dnl Gmsh - Copyright (C) 1997-2009 C. Geuzaine, J.-F. Remacle
dnl
dnl See the LICENSE.txt file for license information. Please report all
dnl bugs and problems to <gmsh@geuz.org>.

dnl Process this file with autoconf to produce the configure script.

dnl Check that this is the gmsh source tree
AC_INIT(Geo/GModel.h)

dnl Parse '--with' command-line options
AC_ARG_WITH(fltk-prefix,
            AC_HELP_STRING([--with-fltk-prefix=PFX],
                           [prefix where FLTK is installed]),
            [FLTK_PREFIX=$withval])
AC_ARG_WITH(gsl-prefix,
            AC_HELP_STRING([--with-gsl-prefix=PFX],
                           [prefix where GSL is installed]),
            [GSL_PREFIX=$withval])
AC_ARG_WITH(jpeg-prefix,
            AC_HELP_STRING([--with-jpeg-prefix=PFX],
                           [prefix where the JPEG library and includes are installed]),
            [JPEG_PREFIX=$withval])
AC_ARG_WITH(png-prefix,
            AC_HELP_STRING([--with-png-prefix=PFX],
                           [prefix where the PNG library and includes are installed]),
            [PNG_PREFIX=$withval])
AC_ARG_WITH(zlib-prefix,
            AC_HELP_STRING([--with-zlib-prefix=PFX],
                           [prefix where the ZLIB library and includes are installed]),
            [ZLIB_PREFIX=$withval])
AC_ARG_WITH(osmesa-prefix,
            AC_HELP_STRING([--with-osmesa-prefix=PFX],
                           [prefix where OSMesa is installed]),
            [OSMESA_PREFIX=$withval])
AC_ARG_WITH(cgns-prefix,
            AC_HELP_STRING([--with-cgns-prefix=PFX],
                           [prefix where CGNS is installed]),
            [CGNS_PREFIX=$withval])
AC_ARG_WITH(occ-prefix,
            AC_HELP_STRING([--with-occ-prefix=PFX],
                           [prefix where OpenCascade is installed]),
            [OCC_PREFIX=$withval])
AC_ARG_WITH(occ-mesh-constraints-prefix,
            AC_HELP_STRING([--occ-mesh-constraints-prefix=PFX],
                           [prefix where OCC mesh contraints source code is located]),
            [OCC_MESH_CONTRAINTS_PREFIX=$withval])
AC_ARG_WITH(hdf5-prefix,
            AC_HELP_STRING([--with-hdf5-prefix=PFX],
                           [prefix where HDF5 is installed]),
            [HDF5_PREFIX=$withval])
AC_ARG_WITH(med-prefix,
            AC_HELP_STRING([--with-med-prefix=PFX],
                           [prefix where MED is installed]),
            [MED_PREFIX=$withval])
AC_ARG_WITH(mpi-prefix,
            AC_HELP_STRING([--with-mpi-prefix=PFX],
                           [prefix where MPI is installed]),
            [MPI_PREFIX=$withval])
AC_ARG_WITH(fftw3-prefix,
            AC_HELP_STRING([--with-fftw3-prefix=PFX],
                           [prefix where FFTW3 is installed]),
            [FFTW3_PREFIX=$withval])
AC_ARG_WITH(fm-prefix,
            AC_HELP_STRING([--with-fm-prefix=PFX],
                           [prefix where FourierModel is installed]),
            [FM_PREFIX=$withval])
AC_ARG_WITH(blas-lapack-prefix,
            AC_HELP_STRING([--with-blas-lapack-prefix=PFX],
                           [prefix where BLAS and LAPACK are installed]),
            [BLAS_LAPACK_PREFIX=$withval])

dnl Parse '--enable' command line options
AC_ARG_ENABLE(gsl,
              AC_HELP_STRING([--enable-gsl],
                             [use GSL as numerical toolkit (default=yes)]))
AC_ARG_ENABLE(gui,
              AC_HELP_STRING([--enable-gui],
                             [build the graphical user interface (default=yes)]))
AC_ARG_ENABLE(parser,
              AC_HELP_STRING([--enable-parser],
                             [build the parser (default=yes)]))
AC_ARG_ENABLE(post,
              AC_HELP_STRING([--enable-post],
                             [build the post-processing module (default=yes)]))
AC_ARG_ENABLE(cygwin,
              AC_HELP_STRING([--enable-cygwin],
                             [use the Cygwin library on Windows (default=no)]))
AC_ARG_ENABLE(jpeg,
              AC_HELP_STRING([--enable-jpeg],
                             [enable JPEG support (default=yes)]))
AC_ARG_ENABLE(zlib,
              AC_HELP_STRING([--enable-zlib],
                             [enable ZLIB support (default=yes)]))
AC_ARG_ENABLE(png,
              AC_HELP_STRING([--enable-png],
                             [enable PNG support (default=yes)]))
AC_ARG_ENABLE(contrib,
              AC_HELP_STRING([--enable-contrib],
                             [enable contrib packages (default=yes)]))
AC_ARG_ENABLE(netgen,
              AC_HELP_STRING([--enable-netgen],
                             [compile Netgen if available (default=yes)]))
AC_ARG_ENABLE(ann,
              AC_HELP_STRING([--enable-ann],
                             [compile ANN if available (default=yes)]))
AC_ARG_ENABLE(metis,
              AC_HELP_STRING([--enable-metis],
                             [compile METIS partitioner (default=yes)]))
AC_ARG_ENABLE(chaco,
              AC_HELP_STRING([--enable-chaco],
                             [compile Chaco partitioner (default=yes)]))
AC_ARG_ENABLE(tetgen,
              AC_HELP_STRING([--enable-tetgen],
                             [compile Tetgen if available (default=yes)]))
AC_ARG_ENABLE(matheval,
              AC_HELP_STRING([--enable-matheval],
                             [compile MathEval if available (default=yes)]))
AC_ARG_ENABLE(gmm,
              AC_HELP_STRING([--enable-gmm],
                             [use gmm++ if available (default=yes)]))
AC_ARG_ENABLE(osmesa,
              AC_HELP_STRING([--enable-osmesa],
                             [use OSMesa for offscreen rendering (default=no)]))
AC_ARG_ENABLE(cgns,
              AC_HELP_STRING([--enable-cgns],
                             [enable CGNS output (default=no)]))
AC_ARG_ENABLE(occ,
              AC_HELP_STRING([--enable-occ],
                             [enable OpenCascade support (default=no)]))
AC_ARG_ENABLE(hdf5,
              AC_HELP_STRING([--enable-hdf5],
                             [enable HDF5 support (default=no)]))
AC_ARG_ENABLE(med,
              AC_HELP_STRING([--enable-med],
                             [enable MED support (default=yes)]))
AC_ARG_ENABLE(fm,
              AC_HELP_STRING([--enable-fm],
                             [enable support for FourierModel (default=yes)]))
AC_ARG_ENABLE(universal,
              AC_HELP_STRING([--enable-universal],
                             [enable support for universal binaries on Mac (default=no)]))
AC_ARG_ENABLE(native-file-chooser,
              AC_HELP_STRING([--enable-native-file-chooser],
                             [enable native file chooser (default=yes, except on Linux)]))
AC_ARG_ENABLE(tree-browser,
              AC_HELP_STRING([--enable-tree-browser],
                             [enable tree browser (default=yes)]))
AC_ARG_ENABLE(mpi,
              AC_HELP_STRING([--enable-mpi],
                             [enable MPI support (default=no)]))
AC_ARG_ENABLE(minimal,
              AC_HELP_STRING([--enable-minimal],
                             [build minimal standalone version (default=no)]))

dnl "minimal" build shortcut
if test "x$enable_minimal" = "xyes"; then
  enable_gui=no;
  enable_gsl=no;
  enable_fm=no;
  enable_netgen=no;
  enable_tetgen=no;
  enable_matheval=no;
  enable_gmm=no;
  enable_ann=no;
  enable_metis=no;
  enable_chaco=no;
  enable_med=no;
  enable_cgns=no;
  enable_hdf5=no;
  enable_zlib=no;
  if test "x$enable_post" != "xyes"; then
    enable_post=no;
  fi
  if test "x$enable_parser" != "xyes"; then
    enable_parser=no;
  fi
  if test "x$enable_occ" != "xyes"; then
    enable_occ=no;
  fi
  CXXFLAGS=-O2;
fi

dnl Get the operating system and machine names
UNAME=`uname`
HOSTNAME=`hostname`

dnl Check for default compilers
AC_PROG_CC
AC_PROG_CXX
if test "x${CC}" = "x" -o "x${CXX}" = "x" ; then
  AC_MSG_ERROR([Could not find required compilers, aborting.])
fi

dnl Set preprocessor and linker
AC_PROG_CPP
LINKER="${CXX}"

dnl Set default compiler flags
FLAGS=""
OPTIM="${CXXFLAGS}"

dnl Take care of no-cygwin option before doing any other tests
case "$UNAME" in
  CYGWIN*)
    if test "x$enable_cygwin" != "xyes"; then
      UNAME="${UNAME}-no-cygwin"
      CC="${CC} -mno-cygwin"
      CXX="${CXX} -mno-cygwin"
      LINKER="${LINKER} -mno-cygwin"
    fi
    ;;
esac

dnl Use c++ for all compilation tests
AC_LANG(C++)

dnl See if we need a .exe extension on executables
AC_EXEEXT

dnl How to build static libraries?
case "$UNAME" in
  Darwin*)
    RANLIB=true
    AR="libtool -o"
    ;;
  *)
    AC_PROG_RANLIB
    AC_PATH_PROG(AR, ar)
    if test "x${AR}" = "x:"; then
      AC_MSG_ERROR([Could not find the library archiver, aborting.])
    fi
    AR="${AR} ruvs"
    ;;
esac

dnl Choose to build the GUI or the batch version
if test "x$enable_gui" != "xno"; then

  GMSH_DIRS="Common Geo Mesh Post Plugin Numeric Parser Graphics Fltk"
  GMSH_LIBS="-Llib -lGmshFltk -lGmshCommon -lGmshMesh -lGmshGeo -lGmshPost -lGmshPlugin"
  GMSH_LIBS="${GMSH_LIBS} -lGmshCommon -lGmshGraphics -lGmshParser -lGmshNumeric"
  AC_DEFINE(HAVE_FLTK)
  BO="${BO} Fltk"

  if test "x${FLTK_PREFIX}" != "x" ; then
    AC_PATH_PROG(FLTKCONFIG,fltk-config,[],[${FLTK_PREFIX}:${FLTK_PREFIX}/bin:$PATH])
    dnl Find the libs/includes even if fltk is _not_ properly installed (ugly hack!)
    GMSH_LIBS="${GMSH_LIBS} -L${FLTK_PREFIX}/lib"
    FLAGS="${FLAGS} -I${FLTK_PREFIX}"
  else
    AC_PATH_PROG(FLTKCONFIG,fltk-config)
  fi
  if test "x$FLTKCONFIG" = "x"; then
    AC_MSG_ERROR([Could not find fltk-config. Try --with-fltk-prefix?])
  fi

  dnl Check for offscreen rendering using OSMesa
  if test "x$enable_osmesa" = "xyes"; then
    if test "x${OSMESA_PREFIX}" != "x"; then
      LDFLAGS="-L${OSMESA_PREFIX} -L${OSMESA_PREFIX}/lib ${LDFLAGS}"
    fi
    AC_CHECK_LIB(OSMesa,main,OSMESA="yes")
  fi

  dnl Check for native file chooser
  AC_CHECK_FILE(./contrib/NativeFileChooser/Fl_Native_File_Chooser.cxx,NATIVE="yes")
  if test "x${NATIVE}" = "xyes"; then
    if (test "x${UNAME}" = "xLinux" -a "x$enable_native_file_chooser" = "xyes" ||
        test "x${UNAME}" != "xLinux" -a "x$enable_native_file_chooser" != "xno"); then
       GMSH_DIRS="${GMSH_DIRS} contrib/NativeFileChooser"
       GMSH_LIBS="${GMSH_LIBS} -lGmshNativeFileChooser"
       AC_DEFINE(HAVE_NATIVE_FILE_CHOOSER)
       BO="${BO} NativeFileChooser"
    fi
  fi

  dnl Check for tree browser widget
  if test "x$enable_tree_browser" != "xno"; then
    AC_CHECK_FILE(./contrib/TreeBrowser/Flu_Tree_Browser.cpp,TREEBROWSER="yes")
    if test "x${TREEBROWSER}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/TreeBrowser"
      GMSH_LIBS="${GMSH_LIBS} -lGmshTreeBrowser"
      AC_DEFINE(HAVE_TREE_BROWSER)
       BO="${BO} TreeBrowser"
    fi
  fi

  if test "x${OSMESA}" = "xyes"; then
    GMSH_LIBS="${GMSH_LIBS} `$FLTKCONFIG --use-images --ldflags` -lfltk_gl"
    FLAGS="${FLAGS} `$FLTKCONFIG --use-images --cxxflags`"
    AC_DEFINE(HAVE_OSMESA)
    BO="${BO} OsMesa"
    if test "x${OSMESA_PREFIX}" = "x"; then
      GMSH_LIBS="${GMSH_LIBS} -lOSMesa -lGL -lGLU"
    else
      GMSH_LIBS="${GMSH_LIBS} -L${OSMESA_PREFIX} -L${OSMESA_PREFIX}/lib -lOSMesa -lGL -lGLU"
      FLAGS="${FLAGS} -I${OSMESA_PREFIX} -I${OSMESA_PREFIX}/include"
    fi
  else
    GMSH_LIBS="${GMSH_LIBS} `$FLTKCONFIG --use-gl --use-images --ldflags`"
    FLAGS="${FLAGS} `$FLTKCONFIG --use-gl --use-images --cxxflags`"
    dnl Ugly fix for Debian bug (fltk-config does not return GL libs)
    if test "x${UNAME}" = "xLinux"; then
      FIX_GL="yes"
      expr "x${GMSH_LIBS}" : 'x.*GL.*' >/dev/null && FIX_GL="no"
      if test "x${FIX_GL}" = "xyes"; then
        GMSH_LIBS="${GMSH_LIBS} -lGLU -lGL"
      fi
    fi
  fi

  expr "x${GMSH_LIBS}" : 'x.*fltk_jpeg.*' >/dev/null && FL_JPEG="yes"
  expr "x${GMSH_LIBS}" : 'x.*fltk_png.*' >/dev/null && FL_PNG="yes"
  expr "x${GMSH_LIBS}" : 'x.*fltk_z.*' >/dev/null && FL_ZLIB="yes"

  dnl Check for libjpeg
  if test "x$enable_jpeg" != "xno"; then
    dnl If provided by FLTK, use that one; otherwise, look for it
    if test "x${FL_JPEG}" = "xyes"; then
      AC_DEFINE(HAVE_LIBJPEG)
      BO="${BO} Jpeg"
    else      
      if test "x${JPEG_PREFIX}" != "x"; then
        LDFLAGS="-L${JPEG_PREFIX} -L${JPEG_PREFIX}/lib ${LDFLAGS}"
      fi
      AC_CHECK_LIB(jpeg,main,JPEG="yes")
      if test "x${JPEG}" = "xyes"; then
        AC_DEFINE(HAVE_LIBJPEG)
        BO="${BO} Jpeg"
        if test "x${JPEG_PREFIX}" = "x"; then
          GMSH_LIBS="${GMSH_LIBS} -ljpeg"
        else
          dnl Find the libs/includes even if libjpeg is _not_ properly installed (ugly hack!)
          GMSH_LIBS="${GMSH_LIBS} -L${JPEG_PREFIX} -L${JPEG_PREFIX}/lib -ljpeg"
          FLAGS="${FLAGS} -I${JPEG_PREFIX} -I${JPEG_PREFIX}/include"
        fi
      fi 
    fi
  fi

  dnl Check for libz
  if test "x$enable_zlib" != "xno"; then
    dnl If provided by FLTK, use that one; otherwise, look for it
    if test "x${FL_ZLIB}" = "xyes"; then
      ZLIB="yes"
    else      
      if test "x${ZLIB_PREFIX}" != "x"; then
        LDFLAGS="-L${ZLIB_PREFIX} -L${ZLIB_PREFIX}/lib ${LDFLAGS}"
      fi
      AC_CHECK_LIB(z,main,ZLIB="yes")
    fi
  fi

  dnl Check for libpng (only if libz is available)
  if test "x$enable_png" != "xno" -a "x${ZLIB}" = "xyes"; then
    dnl If provided by FLTK, use that one; otherwise, look for it
    if test "x${FL_PNG}" = "xyes"; then
      AC_DEFINE(HAVE_LIBPNG)
       BO="${BO} Png"
    else
      if test "x${PNG_PREFIX}" != "x"; then
        LDFLAGS="-L${PNG_PREFIX} -L${PNG_PREFIX}/lib ${LDFLAGS}"
      fi
      AC_CHECK_LIB(png,main,PNG="yes")
      if test "x${PNG}" = "xyes"; then
        AC_DEFINE(HAVE_LIBPNG)
        BO="${BO} Png"
        if test "x${PNG_PREFIX}" = "x"; then
          GMSH_LIBS="${GMSH_LIBS} -lpng"
        else
          dnl Find the libs/includes even if libpng is _not_ properly installed (ugly hack!)
          GMSH_LIBS="${GMSH_LIBS} -L${PNG_PREFIX} -L${PNG_PREFIX}/lib -lpng"
          FLAGS="${FLAGS} -I${PNG_PREFIX} -I${PNG_PREFIX}/include"
        fi
      fi
    fi 
  fi

else

  GMSH_DIRS="Common Geo Mesh"
  GMSH_LIBS="-Llib Common/Main.o -lGmshCommon -lGmshMesh -lGmshGeo"

  if test "x$enable_post" != "xno"; then
    GMSH_DIRS="${GMSH_DIRS} Post Plugin"
    GMSH_LIBS="${GMSH_LIBS} -lGmshPost -lGmshPlugin"
  else
    AC_DEFINE(HAVE_NO_POST)
    BO="${BO} NoPost"
  fi

  if test "x$enable_parser" != "xno"; then
    GMSH_DIRS="${GMSH_DIRS} Parser"
    GMSH_LIBS="${GMSH_LIBS} -lGmshParser"
  else
    AC_DEFINE(HAVE_NO_PARSER)
    BO="${BO} NoParser"
  fi

  dnl re-add Common to work around linker shortcomings on some archs
  GMSH_DIRS="${GMSH_DIRS} Numeric"
  GMSH_LIBS="${GMSH_LIBS} -lGmshCommon -lGmshNumeric"

  dnl Check for libz
  if test "x$enable_zlib" != "xno"; then
    if test "x${ZLIB_PREFIX}" != "x"; then
      LDFLAGS="-L${ZLIB_PREFIX} -L${ZLIB_PREFIX}/lib ${LDFLAGS}"
    fi
    AC_CHECK_LIB(z,main,ZLIB="yes")
  fi

fi

dnl Check for standard math library (no rule given if found, so gets
dnl added to $LIBS, used for further checks)
AC_CHECK_LIB(m,main)

dnl Check for various functions
AC_CHECK_FUNC(vsnprintf,[],AC_DEFINE(HAVE_NO_VSNPRINTF) BO="${BO} NoVsnprintf")

dnl Check if Unix98 socklen_t type is available
AC_TRY_COMPILE(
  [#include <sys/types.h>
   #include <sys/socket.h>],
  [socklen_t len = 42; return 0;],,AC_DEFINE(HAVE_NO_SOCKLEN_T) BO="${BO} NoSocklenT")

dnl Check if we should consider the packages in contrib
if test "x$enable_contrib" != "xno"; then

  dnl Check for ANN
  if test "x$enable_ann" != "xno"; then
    AC_CHECK_FILE(./contrib/ANN/include/ANN/ANN.h,ANN="yes")
    if test "x${ANN}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/ANN"
      GMSH_LIBS="${GMSH_LIBS} -lGmshANN"
      AC_DEFINE(HAVE_ANN)
      BO="${BO} Ann"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains ANN, the"
      echo "  Approximate Nearest Neighbor library. ANN is available under"
      echo "  the GNU LGPL."
      echo "  To disable ANN, run configure again with the --disable-ann"
      echo "  option."
      echo "********************************************************************"
    fi
  fi

  dnl Check for gmm++ linear solver
  if test "x$enable_gmm" != "xno"; then
    AC_CHECK_FILE(./contrib/gmm/gmm.h,GMM="yes")
    if test "x${GMM}" = "xyes"; then
      AC_DEFINE(HAVE_GMM)
      BO="${BO} Gmm"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains the gmm++ mesh"
      echo "  partitioner. Gmm++ is available under the GNU LGPL."
      echo "  To disable gmm++, run configure again with the --disable-gmm"
      echo "  option."
      echo "********************************************************************"
    fi
  fi

  dnl Check for Chaco partitionner
  if test "x$enable_chaco" != "xno"; then
    AC_CHECK_FILE(./contrib/Chaco/main/interface.c,CHACO="yes")
    if test "x${CHACO}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/Chaco"
      GMSH_LIBS="${GMSH_LIBS} -lGmshChaco"
      AC_DEFINE(HAVE_CHACO)
      BO="${BO} Chaco"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains the Chaco mesh"
      echo "  partitioner. Chaco is available under the GNU LGPL."
      echo "  To disable Chaco, run configure again with the --disable-chaco"
      echo "  option."
      echo "********************************************************************"
    fi
  fi

  dnl Check for Metis partitionner
  if test "x$enable_metis" != "xno"; then
    AC_CHECK_FILE(./contrib/Metis/metis.h,METIS="yes")
    if test "x${METIS}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/Metis"
      GMSH_LIBS="${GMSH_LIBS} -lGmshMetis"
      AC_DEFINE(HAVE_METIS)
      BO="${BO} Metis"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains the METIS mesh"
      echo "  partitioner."
      echo "  Please note that by including METIS, you agree with METIS'"
      echo "  special licensing requirements stated in contrib/Metis/README."
      echo "  To disable METIS, run configure again with the --disable-metis"
      echo "  option."
      echo "********************************************************************"
    fi
  fi

  dnl Check for Netgen
  if test "x$enable_netgen" != "xno"; then
    AC_CHECK_FILE(./contrib/Netgen/libsrc/meshing/meshclass.cpp,NETGEN="yes")
    if test "x${NETGEN}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/Netgen"
      GMSH_LIBS="${GMSH_LIBS} -lGmshNetgen"
      AC_DEFINE(HAVE_NETGEN)
      BO="${BO} Netgen"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains the Netgen 3D"
      echo "  mesh generator. Netgen is available under the GNU LGPL."
      echo "  To disable Netgen, run configure again with the --disable-netgen"
      echo "  option."
      echo "********************************************************************"
    fi
  fi

  dnl Check for Tetgen
  if test "x$enable_tetgen" != "xno"; then
    AC_CHECK_FILE(./contrib/Tetgen/tetgen.h,TETGEN="yes")
    if test "x${TETGEN}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/Tetgen"
      GMSH_LIBS="${GMSH_LIBS} -lGmshTetgen"
      AC_DEFINE(HAVE_TETGEN)
      BO="${BO} Tetgen"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains the Tetgen 3D"
      echo "  mesh generator."
      echo "  Please note that by doing so, you agree with Tetgen's special"
      echo "  licensing requirements stated in contrib/Tetgen/LICENSE."
      echo "  To disable Tetgen, run configure again with the --disable-tetgen"
      echo "  option."
      echo "********************************************************************"
    fi
  fi

  dnl Check for MathEval
  if test "x$enable_matheval" != "xno"; then
    AC_CHECK_FILE(./contrib/MathEval/matheval.cpp,MATHEVAL="yes")
    if test "x${MATHEVAL}" = "xyes"; then
      GMSH_DIRS="${GMSH_DIRS} contrib/MathEval"
      GMSH_LIBS="${GMSH_LIBS} -lGmshMathEval"
      AC_DEFINE(HAVE_MATH_EVAL)
      BO="${BO} MathEval"
      echo "********************************************************************"
      echo "  You are building a version of Gmsh that contains GNU MathEval."
      echo "  MathEval is available under the GNU GPL."
      echo "  To disable MathEval, run configure again with the"
      echo "  --disable-matheval option."
      echo "********************************************************************"
    fi
  fi

fi

dnl Check for OpenCascade
if test "x${OCC_PREFIX}" != "x"; then
  if test "x$enable_occ" != "xno"; then
    enable_occ="yes"
  fi
fi
if test "x$enable_occ" = "xyes"; then
  if test "x${OCC_PREFIX}" != "x"; then
    LDFLAGS="-L${OCC_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(TKernel,main,OCC="yes")
  if test "x${OCC}" = "xyes"; then
    # DataExchange (subset; see occ/ros/adm/make/Makefile for more info)
    OCC_LIBS="-lTKSTEP -lTKSTEP209 -lTKSTEPAttr -lTKSTEPBase -lTKIGES -lTKXSBase"
    # ModelingAlgorithms
    OCC_LIBS="${OCC_LIBS} -lTKOffset -lTKFeat -lTKFillet -lTKBool -lTKShHealing"
    OCC_LIBS="${OCC_LIBS} -lTKMesh -lTKHLR -lTKBO -lTKPrim -lTKTopAlgo -lTKGeomAlgo"
    # ModelingData
    OCC_LIBS="${OCC_LIBS} -lTKBRep -lTKGeomBase -lTKG3d -lTKG2d"
    # FoundationClasses
    OCC_LIBS="${OCC_LIBS} -lTKAdvTools -lTKMath -lTKernel"
    AC_DEFINE(HAVE_OCC)
    BO="${BO} Occ"
    if test "x${OCC_PREFIX}" = "x"; then
      GMSH_LIBS="${GMSH_LIBS} ${OCC_LIBS}"
    else
      GMSH_LIBS="${GMSH_LIBS} -L${OCC_PREFIX}/lib ${OCC_LIBS}"
      FLAGS="${FLAGS} -I${OCC_PREFIX}/inc"
    fi
  fi
fi

dnl Check for OpenCascade mesh constraints
if test "x${OCC}" = "xyes"; then
  if test "x${OCC_MESH_CONTRAINTS_PREFIX}" != "x"; then
    AC_CHECK_FILE(${OCC_MESH_CONTRAINTS_PREFIX}/MeshGmsh_Constrain.hxx,OMC="yes")
    if test "x${OMC}" = "xyes"; then
      AC_DEFINE(HAVE_OCC_MESH_CONSTRAINTS)
      BO="${BO} OccMeshConstraints"
      FLAGS="${FLAGS} -I${OCC_MESH_CONTRAINTS_PREFIX}"
    fi
  fi
fi

dnl Check for HDF5 (required by MED, needs zlib, and optional for cgns)
if test "x${HDF5_PREFIX}" != "x" -a "x$enable_hdf5" != "xno"; then
  enable_hdf5=yes
fi
if test "x${ZLIB}" = "xyes" -a "x$enable_med" != "xno"; then
  enable_hdf5=yes
fi
if test "x$enable_hdf5" = "xyes"; then
  if test "x${HDF5_PREFIX}" != "x"; then
    LDFLAGS="-L${HDF5_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(hdf5,main,HDF5="yes")
  if test "x${HDF5}" = "xyes"; then
    LIBS="-lhdf5 ${LIBS}"  # Necessary for CGNS with HDF5
  fi
fi

dnl Check for CGNS
if test "x${CGNS_PREFIX}" != "x" -a "x$enable_cgns" != "xno"; then
  enable_cgns="yes"
fi
if test "x$enable_cgns" = "xyes"; then
  if test "x${CGNS_PREFIX}" != "x"; then
    LDFLAGS="-L${CGNS_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(cgns,main,CGNS="yes")
  if test "x${CGNS}" = "xyes"; then
    AC_DEFINE(HAVE_LIBCGNS)
    BO="${BO} Cgns"
    if test "x${CGNS_PREFIX}" = "x"; then
      GMSH_LIBS="${GMSH_LIBS} -lcgns"
    else
      GMSH_LIBS="${GMSH_LIBS} -L${CGNS_PREFIX}/lib -lcgns"
      FLAGS="${FLAGS} -I${CGNS_PREFIX}/include"
    fi
  fi
fi

dnl Check for MED (needs hdf5)
if test "x${HDF5}" = "xyes"; then
  if test "x$enable_med" != "xno"; then
    if test "x${MED_PREFIX}" != "x"; then
      LDFLAGS="-L${MED_PREFIX}/lib ${LDFLAGS}"
    fi
    AC_CHECK_LIB(med,main,MED="yes")
    if test "x${MED}" = "xyes"; then
      AC_DEFINE(HAVE_MED)
      BO="${BO} Med"
      if test "x${MED_PREFIX}" = "x"; then
        GMSH_LIBS="${GMSH_LIBS} -lmed"
      else
        GMSH_LIBS="${GMSH_LIBS} -L${MED_PREFIX}/lib -lmed"
        FLAGS="${FLAGS} -I${MED_PREFIX}/include"
      fi
    fi
  fi
fi

dnl Complete HDF5 link line
if test "x${HDF5}" = "xyes"; then
  if test "x${HDF5_PREFIX}" = "x"; then
    GMSH_LIBS="${GMSH_LIBS} -lhdf5"
  else
    GMSH_LIBS="${GMSH_LIBS} -L${HDF5_PREFIX}/lib -lhdf5"
    FLAGS="${FLAGS} -I${HDF5_PREFIX}/include"
  fi
fi

dnl Complete zlib link line (zlib must be linked in after libpng and
dnl libhdf5)
if test "x${ZLIB}" = "xyes"; then
  AC_DEFINE(HAVE_LIBZ)
  BO="${BO} Libz"
  if test "x${FL_ZLIB}" != "xyes"; then
    if test "x${ZLIB_PREFIX}" = "x"; then
      GMSH_LIBS="${GMSH_LIBS} -lz"
    else
      dnl Find the libs/includes even if libz is _not_ properly
      dnl installed (ugly hack!)
      GMSH_LIBS="${GMSH_LIBS} -L${ZLIB_PREFIX} -L${ZLIB_PREFIX}/lib -lz"
      FLAGS="${FLAGS} -I${ZLIB_PREFIX} -I${ZLIB_PREFIX}/include"
    fi
  fi
fi 

dnl Check for GSL
if test "x$enable_gsl" != "xno"; then
  if test "x${GSL_PREFIX}" != "x"; then
    LDFLAGS="-L${GSL_PREFIX} -L${GSL_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(gsl,main,GSL="yes",[],-lgslcblas)
  if test "x${GSL}" = "xyes"; then
    AC_DEFINE(HAVE_GSL)
    BO="${BO} Gsl"
    if test "x${GSL_PREFIX}" = "x"; then
      GMSH_LIBS="${GMSH_LIBS} -lgsl"
    else
      GMSH_LIBS="${GMSH_LIBS} -L${GSL_PREFIX} -L${GSL_PREFIX}/lib -lgsl"
      FLAGS="${FLAGS} -I${GSL_PREFIX} -I${GSL_PREFIX}/include"
    fi
  fi
fi

dnl Check for FourierModel
if test "x$enable_fm" != "xno"; then
  if test "x${FM_PREFIX}" != "x"; then
    LDFLAGS="-L${FM_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(FourierModel,main,FM="yes")
  if test "x${FM}" = "xyes"; then
    dnl Check for FFTW3
    if test "x${FFTW3_PREFIX}" != "x"; then
      LDFLAGS="-L${FFTW3_PREFIX}/lib ${LDFLAGS}"
    fi
    AC_CHECK_LIB(fftw3,main,FFTW3="yes")
    if test "x${FFTW3}" != "xyes"; then
      FM=no
      AC_MSG_WARN([Could not find FFTW3: disabling FourierModel.])
    else
      AC_DEFINE(HAVE_FOURIER_MODEL)
      BO="${BO} FourierModel"
      if test "x${FM_PREFIX}" = "x"; then
        GMSH_LIBS="${GMSH_LIBS} -lFourierModel"
      else
        GMSH_LIBS="${GMSH_LIBS} -L${FM_PREFIX}/lib -lFourierModel"
        FLAGS="-I${FM_PREFIX} ${FLAGS}"
      fi
      if test "x${FFTW3_PREFIX}" = "x"; then
        GMSH_LIBS="${GMSH_LIBS} -lfftw3"
      else
        GMSH_LIBS="${GMSH_LIBS} -L${FFTW3_PREFIX}/lib -lfftw3"
        FLAGS="${FLAGS} -I${FFTW3_PREFIX}/include"
      fi
    fi
  fi
fi

dnl Check for C version of BLAS
if test "x${BLAS_LAPACK_PREFIX}" != "x"; then
  LDFLAGS="-L${BLAS_LAPACK_PREFIX} -L${BLAS_LAPACK_PREFIX}/lib ${LDFLAGS}"
fi
AC_CHECK_LIB(cblas,cblas_dgemm,CBLAS="yes" BLAS_LIBS="-lcblas")
if test "x${CBLAS}" != "xyes"; then
  AC_CHECK_LIB(cblas,cblas_dgemm,CBLAS="yes" BLAS_LIBS="-lcblas -latlas",[],-latlas)
fi
if test "x${CBLAS}" = "xyes"; then
  AC_DEFINE(HAVE_CBLAS)
  BO="${BO} Cblas"
else 
  if test "x${GSL}" = "xyes"; then
    dnl use unoptimized gsl version
    BLAS_LIBS="-lgslcblas"
    AC_DEFINE(HAVE_CBLAS)
    BO="${BO} Cblas"
  fi
fi

dnl Check for Fortran version of blas and lapack (only used when not
dnl using GSL, or of FourierModel is linked in)
if test "x${FM}" = "xyes" -o "x${GSL}" != "xyes"; then
  AC_PROG_F77
  case "${F77}" in
    *gfortran*)
      F77LIB="-lgfortran"
      ;;
    *g77*)
      F77LIB="-lg2c"
      ;;
    *)
      F77LIB=""
      ;;
  esac
  LDFLAGS="${LDFLAGS} ${F77LIB}"
  AC_CHECK_LIB(atlas,ATL_xerbla,
    AC_CHECK_LIB(f77blas,dgemm_,
     [BLAS="yes" BLAS_LIBS="${BLAS_LIBS} -lf77blas -latlas"],[],-latlas))
  if test "x${BLAS}" != "xyes"; then
    AC_CHECK_LIB(blas,dgemm_,[BLAS="yes" BLAS_LIBS="${BLAS_LIBS} -lblas"])
  fi
  if test "x${BLAS}" = "xyes"; then
    AC_DEFINE(HAVE_BLAS)
    BO="${BO} Blas"
    AC_CHECK_LIB(lapack,dbdsqr_,
      [LAPACK="yes" BLAS_LIBS="-llapack ${BLAS_LIBS}"],[],${BLAS_LIBS})
    if test "x${LAPACK}" = "xyes"; then
      AC_DEFINE(HAVE_LAPACK)
      BO="${BO} Lapack"
    fi
  fi
fi

if test "x${BLAS_LIBS}" != "x"; then
  if test "x${BLAS_LAPACK_PREFIX}" != "x"; then
    GMSH_LIBS="${GMSH_LIBS} -L${BLAS_LAPACK_PREFIX} -L${BLAS_LAPACK_PREFIX}/lib ${BLAS_LIBS}"
  else
    GMSH_LIBS="${GMSH_LIBS} ${BLAS_LIBS}"
  fi
fi

dnl Check for MPI
if test "x$enable_mpi" = "xyes"; then
  if test "x${MPI_PREFIX}" != "x"; then
    LDFLAGS="-L${MPI_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(mpi_cxx,main,MPI="yes")
  if test "x${MPI}" = "xyes"; then
    AC_DEFINE(HAVE_MPI)
    BO="${BO} Mpi"
    if test "x${MPI_PREFIX}" = "x"; then
      GMSH_LIBS="${GMSH_LIBS} -lmpi_cxx -lmpi"
    else
      GMSH_LIBS="${GMSH_LIBS} -L${MPI_PREFIX}/lib -lmpi_cxx -lmpi"
      FLAGS="${FLAGS} -I${MPI_PREFIX}/include"
    fi
  fi
fi

dnl Finish link line
GMSH_LIBS="${GMSH_LIBS} -lm"

dnl Modify defaults according to OS
case "$UNAME" in

  CYGWIN* | MINGW*)
    dnl increase stack size to 16Mb to avoid stack overflows in
    dnl recursive tet classification for large 3D Delaunay grids
    LINKER="${LINKER} -mwindows -Wl,--stack,16777216"
    if test "x$enable_cygwin" != "xyes"; then
      AC_DEFINE(HAVE_NO_DLL)
      BO="${BO} NoDll"
    fi
    if test "x${OCC}" = "xyes"; then
      GMSH_LIBS="${GMSH_LIBS} -lwinspool -lws2_32"
    fi
    if test "x$enable_gui" != "xno"; then
      GMSH_LIBS="${GMSH_LIBS} Fltk/Win32Icon.res"
    fi
    ;;

  Darwin*)
    AC_DEFINE(HAVE_NO_DLL)
    BO="${BO} NoDll"
    if test "x$enable_universal" = "xyes"; then
      FLAGS="-arch ppc -arch i386 ${FLAGS}"
    fi
    if test "x$enable_gui" = "xno"; then
      GMSH_LIBS="${GMSH_LIBS} -framework ApplicationServices"
    fi
    ;;

  AIX*)
    AC_DEFINE(HAVE_NO_DLL)
    BO="${BO} NoDll"
    FLAGS="-D_BSD ${FLAGS}"
    ;;

  IRIX*)
    dnl options for native SGI compiler
    case "${CXX}" in
      *CC*)
        dnl add "-mips3 -n32" to FLAGS, AR and LINKER for portable 32 bit exe
        dnl "-DOLDCINCLUDE" is for Netgen
        FLAGS="-LANG:std -OPT:Olimit=0 -DOLDCINCLUDE ${FLAGS}"
        AR="${CXX} -ar -o"
        LINKER="${CXX}"
        ;;
    esac
    ;;

  OSF1*)
    AC_DEFINE(HAVE_NO_SOCKLEN_T)
    BO="${BO} NoSocklenT"
    dnl options for native DEC compiler
    case "${CXX}" in
      *cxx*)
        FLAGS="-D__USE_STD_IOSTREAM ${FLAGS}"
        ;;
    esac
    ;;

  SunOS*)
    AC_DEFINE(HAVE_NO_DLL)
    BO="${BO} NoDll"
    GMSH_LIBS="${GMSH_LIBS} -lsocket -lnsl -ldl"
    ;;

  HP-UX*)
    AC_DEFINE(HAVE_NO_DLL)
    BO="${BO} NoDll"
    ;;

esac

dnl Check sizeof size_t (flag as 64 if not 32)
AC_CHECK_SIZEOF([size_t])
if test $ac_cv_sizeof_size_t != 4; then
  if test $ac_cv_sizeof_size_t != 8; then
    AC_MSG_WARN([Unsupported size of size_t - this may affect FNV hashing.])
  else
    AC_DEFINE(HAVE_64BIT_SIZE_T)
    BO="${BO} Have64BitSizeT"
    if test "x${OCC}" = "xyes"; then
      FLAGS="${FLAGS} -D_OCC64"
    fi
  fi
fi

AC_CONFIG_HEADER(Common/GmshConfig.h:Common/GmshConfig.h.in)

dnl Write output
AC_SUBST(UNAME)
AC_SUBST(HOSTNAME)
AC_SUBST(FLAGS)
AC_SUBST(OPTIM)
AC_SUBST(LINKER)
AC_SUBST(GMSH_DIRS)
AC_SUBST(GMSH_LIBS)
AC_SUBST(AR)
AC_CONFIG_FILES([variables])
AC_OUTPUT

dnl Print some information
echo "********************************************************************"
echo "Gmsh is configured for"
echo "  - OS           : ${UNAME} on ${HOSTNAME}"
echo "  - C compiler   : ${CC}"
echo "  - C++ compiler : ${CXX}"
echo "  - Linker       : ${LINKER}"
echo "  - Optimization : ${OPTIM}"
echo "  - Build options:${BO}"
echo "********************************************************************"
echo "Edit 'variables' and 'Common/GmshConfig.h' to fine-tune the config"
echo "********************************************************************"
