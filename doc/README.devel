
Some easy rules to make the code easy to read/debug/maintain:

- please enable full warnings for your compiler (e.g. gcc -Wall)
- always use Msg() to print information/errors/etc.
- indent your files using ../utils/indent.sh
- if working on Windows, don't leave tabs in your files (../utils/untabify)

===========================================================================

How to add an option in the graphical user interface?

1) Create the option in the Context_T class (Common/Context.h) if it's
a classical option, or in the View class (Common/View.h) if it's a
post-processing view-dependent option.

2) In Common/DefaultOptions.h, give a name (for the parser to be able
to access it), a reference to a handling routine (i.e. opt_XXX) and a
default value for this option.

3) Create the handling routine opt_XXX in Common/Options.cpp (and add
the prototype in Common/Options.h).

Optional:

4) Create the associated widget in Fltk/GUI.cpp

5) If no special callback is to be associated to the widget, add the
handling routine opt_XXX to the OK callback for the corresponding
option panel (in Fltk/Callbacks.cpp).

===========================================================================

Tools to check memory leaks

* LIBNJAMD

  export LD_PRELOAD=libnjamd.so
  kill -USR1

* valgrind

* purify

* memprof
