$Id: FORMATS,v 1.11 2002-07-15 18:21:27 geuzaine Exp $

This document describes the version 1.1 of Gmsh's mesh and
post-processing file formats

(This document deals only with the import/export interfaces for
Gmsh. The language driving the behaviour of Gmsh for defining
geometries, options, scripts, etc. is explained step by step in the
tutorials.)


Gmsh Mesh File Format
=====================

The 'msh' file format is the native output file format for Gmsh. The
file is divided in two sections (enclosed in $KEY and $ENDKEY pairs):
$NOD/$ENDNOD defines the nodes and $ELM/$ENDELM defines the elements.

   $NOD
   number-of-nodes
   node-number coord1 coord2 coord3 
   ...
   $ENDNOD

   $ELM
   number-of-elements
   elm-number elm-type elm-region unused nb-nodes node-numbers
   ...
   $ENDELM

All the syntactic variables stand for integers except coord1, coord2
and coord3 which stand for floating point values, and node-numbers
which stand for a list of nb-nodes integers.  The elm-type value
defines the geometrical type for the element:
   
   1  Line (2 nodes, 1 edge). 
   2  Triangle (3 nodes, 3 edges). 
   3  Quadrangle (4 nodes, 4 edges). 
   4  Tetrahedron (4 nodes, 6 edges, 4 facets). 
   5  Hexahedron (8 nodes, 12 edges, 6 facets). 
   6  Prism (6 nodes, 9 edges, 5 facets). 
   7  Pyramid (5 nodes, 8 edges, 5 facets). 
   15 Point (1 node). 

The elm-region value is the number of the physical entity to which the
element belongs.


Gmsh ASCII Post-Processing File Format
======================================
   
A post-processing file is divided in several sections: one format
section (enclosed between $PostFormat/$EndPostFormat) and (possibly
multiple) post-processing views (enclosed between $View/$EndView
pairs).

    $PostFormat
    1.1 file-type data-size
    $EndPostFormat
    $View
    view-name nb-time-steps
    nb-scalar-points nb-vector-points nb-tensor-points
    nb-scalar-lines nb-vector-lines nb-tensor-lines
    nb-scalar-triangles nb-vector-triangles nb-tensor-triangles
    nb-scalar-tetrahedra nb-vector-tetrahedra nb-tensor-tetrahedra
    nb-text2d nb-text2d-chars nb-test3d nb-text3d-chars
    time-step-values
    scalar-point-value ...
    vector-point-value ...
    tensor-point-value ...
    scalar-line-value ...
    vector-line-value ...
    tensor-line-value ...
    scalar-triangle-value ...
    vector-triangle-value ...
    tensor-triangle-value ...
    scalar-tetrahedron-value ...
    vector-tetrahedron-value ...
    tensor-tetrahedron-value ...
    text2d ... text2d-chars ...
    text3d ... text3d-chars ...
    $endView

file-type is an integer equal to 0 in the ASCII file format.

data-size is an integer equal to the size of the floating point
numbers used in the file (usually, data-size == sizeof(double)).

view-name is a string containing the name of the view (max. 256 characters)

nb-time-step is an integer giving the number of time steps in the view

nb-scalar-points, nb-vector-points, etc. are integers giving the
number of scalar points, vector points, etc. in the view.

nb-text2d and nb-text3d are integers giving the number of 2D text
strings and 3d text strings in the view. nb-text2d-chars and
nb-text3d-chars are integers giving the total number of characters in
the 2d and 3d strings.

time-step-values is a list of nb-time-steps double precision numbers
giving the value of the time (or any other variable) for which an
evolution was saved.

scalar-point-value, vector-point-value, etc. are lists of double
precision numbers giving the node coordinates and the values
associated with the nodes of the nb-scalar-points, nb-vector-points,
etc. for each time-step-value. For example, vector-triangle-value is
defined as:
    coord1-node1 coord1-node2 coord1-node3
    coord2-node1 coord2-node2 coord2-node3
    coord3-node1 coord3-node2 coord3-node3
    comp1-node1-time1 comp2-node1-time1 comp3-node1-time1
    comp1-node2-time1 comp2-node2-time1 comp3-node2-time1
    comp1-node3-time1 comp2-node3-time1 comp3-node3-time1
    comp1-node1-time2 comp2-node1-time2 comp3-node1-time2
    comp1-node2-time2 comp2-node2-time2 comp3-node2-time2
    comp1-node3-time2 comp2-node3-time2 comp3-node3-time2
    ...

text2d is a list of 4 double precision numbers:
    coord1 coord2 style index
where index gives the starting index of the correspinding 2d text
string in text2d-chars.

text2d-chars is a list of nb-text2d-chars chars. Substrings are
separated with the '^' characted (which is a forbidden character in
regular strings).

text3d is a list of 5 double precision numbers:
    coord1 coord2 coord3 style index
where index gives the starting index of the correspinding 3d text
string in text3d-chars.

text3d-chars is a list of nb-text3d-chars chars. Substrings are
separated with the '^' characted.

Gmsh Binary Post-Processing File Format
=======================================

The binary post-processing file format is the same as the ASCII file
format, except that:

1) file-type equals 1.

2) all lists of floating point numbers and characters are written in
   binary format

3) there is an additional integer, of value 1, written before
   time-step-values. This integer is used for detecting if the
   computer on which the binary file was written and the computer on
   which the file is read are of the same type (little or big endian).

Here is a pseudo C code to write the beginning of a post-processing
file in binary format:

int one = 1;

fprintf(file, "$PostFormat\n");
fprintf(file, "%g %d %d\n", 1.1, 1, sizeof(double));
fprintf(file, "$EndPostFormat\n");

fprintf(file, "$View\n");
fprintf(file, "%s %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", 
        view-name, nb-time-steps,
        nb-scalar-points, nb-vector-points, nb-tensor-points,
        nb-scalar-lines, nb-vector-lines, nb-tensor-lines,
        nb-scalar-triangles, nb-vector-triangles, nb-tensor-triangles,
        nb-scalar-tetrahedra, nb-vector-tetrahedra, nb-tensor-tetrahedra,
	nb-text2d, nb-text2d-chars, nb-text3d, nb-text3d-chars);
fwrite(&one, sizeof(int), 1, file);
fwrite(time-step-values, sizeof(double), nb-time-steps, file);
fwrite(all-scalar-point-values, sizeof(double), ..., file);
...
fprintf(file, "\n$EndView\n");

In this pseudo-code, all-scalar-point-values is the array of double
precision numbers containing all the scalar-point-value lists, put one
after each other in order to form a long array of doubles. The
principle is the same for all other kinds of values.


Gmsh Parsed Post-Processing Format
==================================

For testing purposes (or with very small data sets, e.g. in the
tutorials), there is an additional post-processing format which is
parsed by the same grammar analyzer as the geometry. You can thus, for
example, embed small post-processing views into your geometrical
descriptions. The format of the parsed post-processing files is the
following:

   View "name" {
     type-of-element (list-of-coordinates) {list-of-values} ;
     ...
   };

   14 base objects can be displayed:

                       type-of-element   list-of-coordinates    list-of-values
   --------------------------------------------------------------------------------
   scalar point        SP                3                      1  * nb-time-steps
   vector point        VP                3                      3  * nb-time-steps
   tensor point        TP                3                      9  * nb-time-steps
   scalar line         SL                6                      2  * nb-time-steps
   vector line         VL                6                      6  * nb-time-steps
   tensor line         TL                6                      18 * nb-time-steps
   scalar triangle     ST                9                      3  * nb-time-steps
   vector triangle     VT                9                      9  * nb-time-steps
   tensor triangle     TT                9                      27 * nb-time-steps
   scalar tetrahedron  SS                12                     4  * nb-time-steps
   vector tetrahedron  VS                12                     12 * nb-time-steps
   tensor tetrahedron  TS                12                     36 * nb-time-steps
   text 2d             T2                4                      arbitrary
   text 3d             T3                5                      arbitrary

Contrary to the ASCII post-processing file format, the coordinates are
given by node, i.e. (coord1, coord2, coord3) for a point,
(coord1-node1, coord2-node1, coord3-node1, coord1-node2, coord2-node2,
coord3-node2) for a line, (coord1-node1, coord2-node1, coord3-node1,
coord1-node2, coord2-node2, coord3-node2, coord1-node3, coord2-node3,
coord3-node3) for a triangle, etc. The values are given in the same
order as for the ASCII post-processing file format.
