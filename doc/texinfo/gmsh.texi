\input texinfo.tex @c -*-texinfo-*-
@c $Id: gmsh.texi,v 1.8 2003-04-11 22:17:06 geuzaine Exp $
@c
@c Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
@c
@c This program is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2 of the License, or
@c (at your option) any later version.
@c
@c This program is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
@c USA.
@c 
@c Please report all bugs and problems to "gmsh@geuz.org".
@c
@c =========================================================================
@c
@c This is the Gmsh documentation texinfo source file
@c
@c Things to do -> "Ctrl+s todo:" 
@c
@c Indexing: @cindex = concept index, e.g. "File formats"
@c           @vindex = (metasyntactic) variable index, e.g.  "expression-id"
@c           @tindex+@findex = type+function index (=reserved keywords),
@c                             e.g. "Spline"
@c
@c Before release, run C-u C-c C-u C-a in GNU Emacs
@c This updates all node pointers and menus
@c 
@c =========================================================================
@c
@c For commercial releases, set the COMMERCIAL flag (uncomment the following
@c line). This will prevent all references to "free software" and the like...
@c
@c      @set COMMERCIAL
@c
@c =========================================================================
@c %**start of header
@setfilename        gmsh.info
@set EDITION        1.0
@set GMSH-VERSION   1.44
@set GMSH-WEB       @uref{http://www.geuz.org/gmsh/}
@set COPYRIGHT      @copyright{} 1997-2003 Christophe Geuzaine, Jean-Francois Remacle
@c
@settitle Gmsh @value{GMSH-VERSION}
@footnotestyle separate
@setchapternewpage odd
@paragraphindent 0
@finalout
@c %**end of header

@c merge function index into type index
@syncodeindex fn tp

@c =========================================================================
@c Info directives
@c =========================================================================

@ifinfo
@dircategory Math
@direntry
* Gmsh: (gmsh).  3D finite element mesh generator with built-in pre- and
post-processing facilities
@end direntry
@noindent
This is edition @value{EDITION}/@today{} of the @cite{Gmsh Reference
Manual}, for Gmsh @value{GMSH-VERSION}.
@noindent
Copyright @value{COPYRIGHT}
@end ifinfo

@c =========================================================================
@c TeX directives
@c =========================================================================

@iftex
@global@let@sl=@it
@global@setfont@indit@itshape{9}{1000}
@end iftex

@c =========================================================================
@c Title page
@c =========================================================================

@shorttitlepage Gmsh

@titlepage

@title Gmsh Reference Manual

@subtitle The documentation for Gmsh, Version @value{GMSH-VERSION}
@subtitle A finite element mesh generator with built-in pre- and post-processing facilities
@subtitle 
@subtitle Edition @value{EDITION}/@today{}

@author Christophe Geuzaine
@author Jean-Francois Remacle

@page
@vskip 0pt plus 1filll
Copyright @value{COPYRIGHT}
@sp 1
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on
all copies.

@end titlepage

@c =========================================================================
@c Table of contents
@c =========================================================================

@summarycontents
@contents

@c =========================================================================
@c Top node (for all output, except TeX)
@c =========================================================================

@ifnottex
@node Top, Copying conditions, (dir), (dir)
@top Gmsh

@chapheading The documentation for Gmsh, Version @value{GMSH-VERSION}
@chapheading a finite element mesh generator with built-in pre- and post-processing facilities

Christophe Geuzaine and Jean-Francois Remacle

Gmsh is an automatic 3D finite element mesh generator with build-in pre- and
post-processing facilities. This is edition @value{EDITION}/@today{} of the
@cite{Gmsh Reference Manual} for Gmsh @value{GMSH-VERSION}.
@end ifnottex

@c =========================================================================
@c Master menu
@c =========================================================================

@menu
* Copying conditions::          Terms and conditions of use.
* Introduction::                What is Gmsh?
* Overview::                    Quick overview of the general philosophy of Gmsh.
* General tools::               Description of general commands and options.
* Geometry module::             Description of all Geometry commands.
* Mesh module::                 Description of all Mesh commands.
* Solver module::               Description of all Solver commands.
* Post-processing module::      Description of all Post-Processing commands.
* Tutorial::                    A step-by-step tutorial.
* Running Gmsh::                How to run Gmsh on your operating system.
* File formats::                Input and output file formats.
* Programming comments::        Some random notes for developpers.
* Bugs and versions::           Contact information, version history and list of contributors.
* Tips and tricks::             Some tips to make your life easier with Gmsh.
* GNU General Public License::  Copy of the GNU GPL.
* Concept index::               Index of concepts.
* Syntax index::                Index of reserved keywords in the Gmsh language.

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* What Gmsh is good at...::     
* ... and what Gmsh sucks at::  
* How to Read this Manual::     
* Syntactic rules::             

Overview

* Geometry: geometrical entity definition::  
* Mesh: finite element mesh generatio::  
* Solver: external solver interface::  
* Post-processing: scalar and vector field visualization::  

General tools

* Comments::                    
* Expressions::                 
* Operators::                   
* Functions::                   
* General commands::            
* Option database::             

Tutorial

* t1.geo::                      
* t2.geo::                      
* t3.geo::                      
* t4.geo::                      
* t5.geo::                      
* t6.geo::                      
* t7.geo::                      
* t8.geo::                      
* t9.geo::                      

Bugs, versions and contributors

* Bugs::                        
* Version history::             
* Contributors::                

@end detailmenu
@end menu

@c =========================================================================
@c Copying Conditions
@c =========================================================================

@ifclear COMMERCIAL

@node Copying conditions, Introduction, Top, Top
@unnumbered Copying conditions

@cindex Copyright
@cindex Web site
@cindex Internet address
@cindex Download

Gmsh is ``free software''; this means that everyone is free to use it and
to redistribute it on a free basis. Gmsh is not in the public domain; it is
copyrighted and there are restrictions on its distribution, but these
restrictions are designed to permit everything that a good cooperating
citizen would want to do.  What is not allowed is to try to prevent others
from further sharing any version of Gmsh that they might get from you.

Specifically, we want to make sure that you have the right to give away
copies of Gmsh, that you receive source code or else can get it if you want
it, that you can change Gmsh or use pieces of Gmsh in new free programs,
and that you know you can do these things.

To make sure that everyone has such rights, we have to forbid you to deprive
anyone else of these rights.  For example, if you distribute copies of
Gmsh, you must give the recipients all the rights that you have.  You must
make sure that they, too, receive or can get the source code.  And you must
tell them their rights.

Also, for our own protection, we must make certain that everyone finds out
that there is no warranty for Gmsh.  If Gmsh is modified by someone else
and passed on, we want their recipients to know that what they have is not
what we distributed, so that any problems introduced by others will not
reflect on our reputation.

The precise conditions of the license for Gmsh are found in the General
Public License that accompanies the source code (@pxref{GNU General Public
License}). Further information about this license is available from the GNU
Project webpage @uref{http://www.gnu.org/copyleft/gpl-faq.html}.

The source code and various pre-compiled versions of Gmsh (for most of the
classical UNIX platforms, for Windows and for Mac OS) can be downloaded from
the web site @value{GMSH-WEB}.

If you use Gmsh, we would appreciate that you mention it in your
work. Published references, as well as the latest news about Gmsh
developments and download information, are always available on
@value{GMSH-WEB}.

@end ifclear

@c =========================================================================
@c Introduction
@c =========================================================================

@node Introduction, Overview, Copying conditions, Top
@unnumbered Introduction

@cindex Introduction
@cindex Reading, guidelines

Gmsh is an automatic three-dimensional finite element mesh generator,
primarily Delaunay, with built-in pre- and post-processing facilities. Its
primal design goal is to provide a simple meshing tool for academic test
cases with parametric input and up to date visualization capabilities.

One of the strengths of Gmsh is its ability to respect a characteristic
length field for the generation of adapted meshes on lines, surfaces and
volumes. These adapted meshes can be mixed with simple structured
(transfinite, elliptic, etc.)  meshes in order to augment the flexibility.

All geometrical, mesh, solver and post-processing instructions are
prescribed in a language analyzed by Lex and Yacc. The code itself is
written in C++, while the graphics are rendered with OpenGL and the user
interface is based on the FLTK widget set. See XXX for some development
comments.

@c -------------------------------------------------------------------------
@c What Gmsh is good at
@c -------------------------------------------------------------------------

@menu
* What Gmsh is good at...::     
* ... and what Gmsh sucks at::  
* How to Read this Manual::     
* Syntactic rules::             
@end menu

@node What Gmsh is good at..., ... and what Gmsh sucks at, Introduction, Introduction
@section What Gmsh is good at...

Gmsh should be pretty good at



@c -------------------------------------------------------------------------
@c ... and what Gmsh sucks at
@c -------------------------------------------------------------------------

@node ... and what Gmsh sucks at, How to Read this Manual, What Gmsh is good at..., Introduction
@section ... and what Gmsh sucks at

Gmsh is not an primarily a structured mesh generator. You can transfinite,
extruded

Related to the previous point: there is no automatic quadrilateral or
hexahedral meshing algorithm implemented. If you want quads, you have to use
transfinite or extruded meshes (see XXX) or recombine unstructured
triangular meshes. For hexahedra, your only choice is transfinite or
extruded meshes.

Gmsh is not a multibloc generator: all meshes produced by Gmsh are
conforming in the sense of finite element meshes 
(see XXX)

Gmsh was designed for solving academic/verification test-cases, not
industrial-size problems. - very large problems: (> million elements) both
for geometry, mesh and post-processing. Gmsh is NOT optimized for
speed. Your mileage may vary, of course, depending of what you consider a
``large'' problem...


@c -------------------------------------------------------------------------
@c How to Read this Manual
@c -------------------------------------------------------------------------

@node How to Read this Manual, Syntactic rules, ... and what Gmsh sucks at, Introduction
@section How to read this manual

@cindex Reading, guidelines

How to Read this Manual...

After reading @ref{Overview}, and @ref{Expressions}, which depict the
general concepts and the way to construct simple expressions in Gmsh, you
can safely directly go to @ref{Short examples}. This chapter gives simple
examples of geometries built with Gmsh. For each example, you should then go
back to @ref{Geometry} to get a detailed view of the syntax of the commands
used. Note that indexes for many concepts and for all the syntax elements
are available at the end of this manual.

Once the examples presented in @ref{Short examples}, you might want to learn
about Gmsh's meshing and post-processing capabilities in @ref{Mesh} and
@ref{Post-processing}. If you plan to interface a solver with Gmsh, see
@ref{Solver}. Some notes on how to run Gmsh on your computer are given in
@ref{Running Gmsh}. 

Tutorial...

@c -------------------------------------------------------------------------
@c Syntactic Rules Used in this Document
@c -------------------------------------------------------------------------

@node Syntactic rules,  , How to Read this Manual, Introduction
@section Syntactic rules used in this document

@cindex Syntax, rules
@cindex Rules, syntactic
@cindex Document syntax

@vindex @dots{}
@vindex <, >
@vindex |
@vindex :
@vindex @var{etc}

Here are the rules we tried to follow when writing this user's guide. Note
that metasyntactic variable definitions stay valid throughout all the manual
(and not only in the sections where the definitions
appear). @xref{Metasyntactic variable index}, for an index of all
metasyntactic variables.

@enumerate
@item 
Keywords and literal symbols are printed like @code{this}.
@item 
Metasyntactic variables (i.e.@: text bits that are not part of the syntax,
but stand for other text bits) are printed like @var{this}.
@item 
A colon (@code{:}) after a metasyntactic variable separates the variable
from its definition.
@item 
Optional rules are enclosed in @code{<} @code{>} pairs.
@item 
Multiple choices are separated by @code{|}.
@item 
Three dots (@dots{}) indicate a possible repetition of the preceding rule.
@item 
For conciseness, the notation @code{@var{rule} <, @var{rule} > @dots{}}
is replaced by @code{@var{rule} <,@dots{}>}.
@item 
The @var{etc} symbol replaces nonlisted rules.
@end enumerate

@c =========================================================================
@c Overview
@c =========================================================================

@node Overview, General tools, Introduction, Top
@chapter Overview

@cindex Overview

Working philosophy:

Gmsh is structured around four modules: geometry, mesh, solver and
post-processing. The specification of any input to these modules is done
either interactively, or in text data files (interactive specifications
generate language bits in the input file, and XXXlatin vice versa). The
accessibility of most features in the ASCII text file makes it possible to
automate all treatments (loops, tests and external access methods permit
advanced scripting capabilities). The internal kernel of Gmsh reflects this
structure: it is built around a geometry, mesh, solver and post-processing
database. It is interesting to notice that the data can be provided to these
databases either in the native format or thanks to dynamically loadable
modules (plug-ins). This is most interesting to convert CAD data from other
description languages (e.g. DXF or STEP), to launch external applications
from inside Gmsh (e.g. GetDP or other solvers) or to apply complex
user-defined treatments to geometry, mesh or post-processing data.  A brief
description of the four modules is given hereafter.

@c -------------------------------------------------------------------------
@c Geometry: geometrical entity definition
@c -------------------------------------------------------------------------

@menu
* Geometry: geometrical entity definition::  
* Mesh: finite element mesh generatio::  
* Solver: external solver interface::  
* Post-processing: scalar and vector field visualization::  
@end menu

@node Geometry: geometrical entity definition, Mesh: finite element mesh generatio, Overview, Overview
@section Geometry: geometrical entity definition

Geometries are created in a bottom-up flow by successively defining
points, oriented curves (segments, circles, ellipses, splines, etc.),
oriented surfaces (plane surfaces, ruled surfaces, etc.) and
volumes. Compound groups of geometrical entities can be defined, based
on these elementary parametrized geometric entities. Data can be
defined either interactively thanks to the menu system, or directly in
the ASCII input files.  The scripting possibilities (with loops,
tests, arrays of variables, etc.) allow fully parametrized definitions
of all geometrical entities.

@c -------------------------------------------------------------------------
@c Mesh: finite element mesh generation
@c -------------------------------------------------------------------------

@node Mesh: finite element mesh generatio, Solver: external solver interface, Geometry: geometrical entity definition, Overview
@section Mesh: finite element mesh generation

A finite element mesh is a tessellation of a given subset of
R<sup>3</sup> by elementary geometrical elements of various shapes (in
this case lines, triangles, quadrangles, tetrahedra, prisms, hexahedra
and pyramids), arranged in such a way that if two of them intersect,
they do so along a face, an edge or a node, and never otherwise. All
the finite element meshes produced by Gmsh as unstructured, even if
they were generated in a structured way. This implies that the
elementary geometrical elements are defined only by an ordered list of
their vertices (which allows the orientation of all their lower order
geometrical entities) but no predefined relation is assumed between
any two elementary elements.

The mesh generation is performed in the same order as the geometry
creation: curves are discretized first; the mesh of the curves is then
used to mesh the surfaces; then the mesh of the surfaces is used to
mesh the volumes. This automatically assures the continuity of the
mesh when, for example, two surfaces share a common curve. Every
meshing step is constrained by the characteristic length field, which
can be uniform, specified by characteristic length associated to
elementary geometrical entities, or associated to another mesh (the
background mesh).

For each meshing step (i.e. the discretization of lines, surfaces and
volumes), all structured mesh directives are executed first, and serve
as additional constraints for the unstructured parts. The implemented
Delaunay algorithm is subdivided in the following five steps for
surface/volume discretization:

1. trivial meshing of a box including the convex polygon/polyhedron
defined by the boundary nodes resulting from the discretization of the
curves/surfaces;

2. creation of the initial mesh by insertion of all the nodes on the
curves/surfaces thanks to the Bowyer algorithm;

3. boundary restoration to force all the edges/faces of the
curves/surfaces to be present in the initial mesh;

4. suppression of all the unwanted triangles/tetrahedra (in
particular those containing the nodes of the initial box);

5. insertion of new nodes by the Bowyer algorithm until the
characteristic size of each simplex is lower or equal to the
characteristic length field evaluated at the center of its
circumscribed circle/sphere.

@c -------------------------------------------------------------------------
@c Solver: external solver interface
@c -------------------------------------------------------------------------

@node Solver: external solver interface, Post-processing: scalar and vector field visualization, Mesh: finite element mesh generatio, Overview
@section Solver: external solver interface

External solvers can be interfaced with Gmsh through a socket
mechanism, which permits to easily launch computations either locally
or on remote computers, and to collect and exploit the simulation
results within Gmsh. The default solver interfaced with Gmsh is <a
href="/getdp/">GetDP</a>. Check the <a href="#mysolver">solver
examples</a> to see how to define your own solver (be sure to also
read the answer to the question 6.1 in the <a
HREF="/gmsh/doc/FAQ">FAQ</a>).

@c -------------------------------------------------------------------------
@c Post-processing: scalar and vector field visualization
@c -------------------------------------------------------------------------

@node Post-processing: scalar and vector field visualization,  , Solver: external solver interface, Overview
@section Post-processing: scalar and vector field visualization

Multiple post-processing scalar or vector maps can be loaded and
manipulated (globally or individually) along with the geometry and the
mesh. Scalar fields are represented by iso-value curves/surfaces or
color maps and vector fields by three-dimensional arrows or
displacement maps. Post-processing functions include arbitrary section
computation, offset, elevation, boundary extraction, color map and
range modification, animation, <a href="/gl2ps/">vector graphic
output</a>, etc. All post-processing options can be accessed either
interactively or through the input ASCII text files. Scripting permits
to automate all the post-processing operations (e.g. for the creation
of complex animations).

@c =========================================================================
@c General tools
@c =========================================================================

@node General tools, Geometry module, Overview, Top
@chapter General tools

ASCII files, parser, blabla

@c -------------------------------------------------------------------------
@c Comments
@c -------------------------------------------------------------------------

@menu
* Comments::                    
* Expressions::                 
* Operators::                   
* Functions::                   
* General commands::            
* Option database::             
@end menu

@node Comments, Expressions, General tools, General tools
@section Comments

@cindex Comments
@cindex File, comment

@tindex /*, */
@tindex //

Both C and C++ style comments are supported and can be used in the input
data file to comment selected text regions:

@enumerate
@item
the text region comprised between @code{/*} and @code{*/} pairs is ignored;
@item
the rest of a line after a double slash @code{//} is ignored.
@end enumerate

These commands won't have the described effects inside double quotes or
inside Gmsh keywords.

Note that `white space' (spaces, tabs, new line characters) is ignored
inside all Gmsh expressions.

@c -------------------------------------------------------------------------
@c Expressions
@c -------------------------------------------------------------------------

@node Expressions, Operators, Comments, General tools
@section Expressions 

@cindex Expression, definition
@cindex Constant, definition
@cindex Constant, evaluation
@cindex Evaluation mechanism
@cindex Real numbers
@cindex Floating point numbers
@cindex Numbers, real
@cindex Numbers, integer
@cindex String

@tindex Pi
@tindex =

@vindex @var{real}
@vindex @var{string}
@vindex @var{string-id}
@vindex @var{expression-char}
@vindex @var{expression}
@vindex @var{expression-id}
@vindex @var{expression-list}

Expressions are denoted by the metasyntactic variable @var{expression}
(remember the definition of the syntactic rules in @ref{Syntactic rules}):

The two constant types used in Gmsh are @var{real} and
@var{string}. There is no integer type.  These types have the same meaning
and syntax as in the C or C++ programming languages. Besides general
expressions (@var{expression}), purely constant expressions, denoted by the
metasyntactic variable @var{expression-cst}, are also used:

@example
@var{expression}:
  @var{real} |
  @var{expression-id} |
  @var{operator-unary} @var{expression} |
  @var{expression} @var{operator-binary} @var{expression} |
  @var{expression} @var{operator-ternary-left} @var{expression} @var{operator-ternary-right} 
      @var{expression} |
  @var{function-id} [ < @var{expression-list} > ]
@end example

List of constant expressions are defined as:

@example
@var{expression-list}:
  @var{expression-list-item} <,@dots{}>
@end example

@noindent with

@example
@var{expression-list-item}:
  @var{expression} |
  @var{expression} : @var{expression} |
  @var{expression} : @var{expression} : @var{expression} |
  @var{expression-id} @{@} |
  @var{expression-id} @{ @var{expression-list} @}
@end example

The second case in this last definition permits to create a list containing
the range of numbers comprised between the two @var{expression}, with a
unit incrementation step. The third case also permits to create a list
containing the range of numbers comprised between the two
@var{expression}, but with a positive or negative incrementation step
equal to the third @var{expression}. The fourth and fifth cases permit
to reference constant identifiers (@var{expression-id}s) of lists of constants
and constant identifiers of sublists of constants (see below for the
definition of constant identifiers) .

All @var{expression-cst} are evaluated during the parsing of the data file
syntactic analysis of the problem. The syntax for the definition of
expression identifiers is:

@example
@var{expression-id} = @var{expression-def};
@end example

@noindent with

@example
@var{expression-id}:
  @var{string}

@var{expression-def}:
  @var{expression-list-item} |
  @{ @var{expression-list} @}
@end example

Note: Only one constant is predefined in Gmsh: @code{Pi} =
3.1415926535897932.

Constant character strings can also be defined. The syntax for their
definition is the following: XXX do we have this at the moment?

@example
@var{string-id} = "@var{string}";
@end example

@noindent with

@example
@var{string-id}:
  @var{string}
@end example

Character expressions can be defined, using these constant strings:

@example
@var{expression-char}:
  "@var{string}" |
  @var{string-id} |
  StrCat[ @var{expression-char} , @var{expression-char} ]
XXX Sprintf, etc.
@end example

@noindent The third case in this definition permits to concatenate two
character expressions.

@c -------------------------------------------------------------------------
@c Operators
@c -------------------------------------------------------------------------

@node Operators, Functions, Expressions, General tools
@section Operators

The operators in Gmsh are similar to the corresponding operators in the C
or C++ programming languages.

@cindex Operators, definition
@cindex Unary operators
@cindex Binary operators
@cindex Ternary operators

@vindex @var{operator-unary}
@vindex @var{operator-binary}
@vindex @var{operator-ternary-left}
@vindex @var{operator-ternary-right}

@tindex -
@tindex !
@tindex +
@tindex ++
@tindex --
@tindex -
@tindex *
@tindex /\
@tindex /
@tindex ^
@tindex %
@tindex >
@tindex <
@tindex >=
@tindex <=
@tindex ==
@tindex +=
@tindex -=
@tindex *=
@tindex /=
@tindex !=
@tindex ||
@tindex &&
@tindex ?:

@noindent
@var{operator-unary}:
@table @code
@item -
Unary minus.
@item !
Logical not.
@item ++
XXX.
@item --
XXX.
@end table

@noindent
@var{operator-binary}:
@table @code
@item ^
Exponentiation. The evaluation of the both arguments must result in a scalar
value.
@item *
Multiplication or scalar product, depending on the type of the arguments. 
@item /\
Cross product. The evaluation of both arguments must result in vectors.
@item /
Division.
@item %
Modulo. The evaluation of the second argument must result in a scalar value.
@item +
Addition.
@item -
Subtraction.
@item ==
Equality.
@item !=
Inequality.
@item +=
XXX.
@item -=
XXX.
@item *=
XXX.
@item /=
XXX.
@item >
Greater. The evaluation of both arguments must result in scalar values.
@item >=
Greater or equality. The evaluation of both arguments must result in
scalar values.
@item <
Less. The evaluation of both arguments must result in scalar values.
@item <=
Less or equality. The evaluation of both arguments must result in scalar values.
@item &&
Logical and. The evaluation of both arguments must result in scalar
values. Warning: the logical and always (unlike in C or C++) implies the
evaluation of both arguments. That is, the second operand of @code{&&} is
evaluated even if the first one is false.
@item ||
Logical or. The evaluation of both arguments must result in floating point
values. Warning: the logical or always (unlike in C or C++) implies the
evaluation of both arguments.  That is, the second operand of @code{||} is
evaluated even if the first one is true.
@end table

@noindent
@var{operator-ternary-left}:
@table @code
@item ?
@end table
@var{operator-ternary-right}:
@table @code
@item :
The only ternary operator, constituted of @var{operator-ternary-left} and
@var{operator-ternary-right} is defined as in the C or C++ programming
languages. The ternary operator first evaluates its first argument (the
@var{expression-cst} located before the @code{?}), which must result in a
scalar value. If it is true (non-zero) the second argument (located between
@code{?} and @code{:}) is evaluated and returned; otherwise the third
argument (located after @code{:}) is evaluated and returned.
@end table


@cindex Evaluation, order
@cindex Order of evaluation
@cindex Operation, priorities
@cindex Priorities, operations

@tindex ()

The evaluation priorities are summarized below (from stronger to weaker,
i.e.@: @code{^} has the highest evaluation priority). Parentheses
@code{()} may be used anywhere to change the order of evaluation.

@table @code
@item ^
@item - (unary), ! 
@item /\
@item *, /, %
@item +, - 
@item <, >, <=, >=
@item !=, ==
@item &&, ||
@item ?:
@end table


@c -------------------------------------------------------------------------
@c Functions
@c -------------------------------------------------------------------------

@node Functions, General commands, Operators, General tools
@section Functions

@cindex Function, definition
@cindex Built-in functions

@vindex @var{function-id}

Built-in functions (@var{function-id}): XXX.

are always followed by a pair of parentheses @code{()} containing a
@var{expression-list}, the list of their arguments. XXX for compatibility
with getdp, parentheses can be replaced by brackets @code{[]}.

@example
@var{function-id} [ @var{expression-list} ]
@end example

@ftable @code

@item Acos 
@code{[@var{expression}]}

Arc cosine (inverse cosine) of @var{expression} in [0,Pi], @var{expression} in [-1,1].

@item Asin 
@code{[@var{expression}]}

Arc sine (inverse sine) of @var{expression} in [-Pi/2,Pi/2], @var{expression} in [-1,1].

@item Atan 
@code{[@var{expression}]}

Arc tangent (inverse tangent) of @var{expression} in [-Pi/2,Pi/2].

@item Atan2
@code{[@var{expression},@var{expression}]}

Arc tangent (inverse tangent) of the first @var{expression} divided by the
second, in [-Pi,Pi].

@item Ceil
@code{[@var{expression}]}

XXX

@item Cos  
@code{[@var{expression}]}

Cosine of @var{expression}.

@item Cosh 
@code{[@var{expression}]}

Hyperbolic cosine of @var{expression}.

@item Exp 
@code{[@var{expression}]}

Exponential function: e^@var{expression}.

@item Fabs 
@code{[@var{expression}]}

Absolute value of @var{expression}.

@item Fmod
@code{[@var{expression},@var{expression}]}

Remainder of the division of the first @var{expression} by the second, with
the sign of the first.

@item Floor
@code{[@var{expression}]}

XXX

@item Hypot
@code{[@var{expression},@var{expression}]}

XXX

@item Log
@code{[@var{expression}]}

Natural logarithm: ln(@var{expression}), @var{expression}>0.

@item Log10
@code{[@var{expression}]}

Base 10 logarithm: log10(@var{expression}), @var{expression}>0.

@item Modulo
@code{[@var{expression}]}

XXX

@item Rand            

XXX

@item Sqrt
@code{[@var{expression}]}

Square root, @var{expression}>=0.

@item Sin
@code{[@var{expression}]}

Sine of @var{expression}.

@item Sinh 
@code{[@var{expression}]}

Hyperbolic sine of @var{expression}.

@item Tan  
@code{[@var{expression}]}

Tangent of @var{expression}.

@item Tanh 
@code{[@var{expression}]}

Hyperbolic tangent of @var{expression}.

@end ftable

@c -------------------------------------------------------------------------
@c General commands
@c -------------------------------------------------------------------------

@node General commands, Option database, Functions, General tools
@section General commands

@ftable @code

@item Call
@code{"@var{expression-char}"}

@item EndFor

@item EndIf

@item Exit

@item For

@item Function

@item If

@item MPI_Rank

@item MPI_Size

@item Printf

@item Return

@item Sprintf

@item StrCat

@item StrPrefix

@item Merge string;

to merge a file

@item MergeWithBoundingBox string;

to merge a file and force the recalculation of the scene's bounding box

@item Draw;

to redraw the scene

@item Save string;

to save the mesh

@item Print string;

to print the graphic window in the format defined in Print.Format

@item Sleep expr;

to sleep during expr seconds

@item Delete View[int];

to free the view int

@item Delete Meshes;

to free all meshes

@item Duplicata View[int];

to duplicate the view int

@item System string;

to execute a system call

@item Include  string

@item #include string

@end ftable

Files can be included by placing one of the following commands
(@var{expression-char} represents a file name) on a separate line, and
outside any Gmsh command.  Any text placed after an include command on the
same line is ignored. XXX verify this

@example
@code{Include @var{expression-char}} 
@code{#include @var{expression-char}} 
@end example

unused keywords:
Bounds
Complex
Ellipse         
Extrude         
ELLIPSE

@c -------------------------------------------------------------------------
@c Option database
@c -------------------------------------------------------------------------

@node Option database,  , General commands, General tools
@section Option database

XXX


@c =========================================================================
@c Geometry module
@c =========================================================================

@node Geometry module, Mesh module, General tools, Top
@chapter Geometry module

@cindex Geometry
@cindex Module, Geometry

@ftable @code

@item newreg
@item newp
@item newc
@item news
@item newv
@item Attractor
@item Bezier		
@item BSpline		
@item Circle          
@item Coherence       
@item CatmullRom	
@item Delete          
@item Dilate          
@item Duplicata       
@item Ellipsis        
@item Intersect       
@item Knots		
@item Line            
@item Loop            
@item Nurbs		
@item Order
@item Physical        
@item Plane           
@item Point           
@item Rotate          
@item Ruled           
@item Spline          
@item Surface         
@item Symmetry        
@item Triangulation   
@item Translate       
@item Trimmed		
@item Volume          
@end ftable

@c =========================================================================
@c Mesh module
@c =========================================================================

@node Mesh module, Solver module, Geometry module, Top
@chapter Mesh module

@cindex Mesh
@cindex Module, Mesh

@ftable @code
@item Bump
@item Characteristic
@item Elliptic
@item Length
@item Layers          
@item Meshes          
@item Power           
@item Progression     
@item Parametric	
@item Recombine
@item Transfinite     
@item With		
@item Using           
@item In              
@end ftable

@c =========================================================================
@c Solver module
@c =========================================================================

@node Solver module, Post-processing module, Mesh module, Top
@chapter Solver module

@cindex Solver
@cindex Module, Solver


@c =========================================================================
@c Post-processing module
@c =========================================================================

@node Post-processing module, Tutorial, Solver module, Top
@chapter Post-processing module

@cindex Post-processing
@cindex Module, Post-processing

@ftable @code
@item Color
@item ColorTable
@item Plugin          
@item SP
@item VP
@item TP
@item SL
@item VL
@item TL
@item ST
@item VT
@item TT
@item SQ
@item VQ
@item TQ
@item SS
@item VS
@item TS
@item SH
@item VH
@item TH
@item SI
@item VI
@item TI
@item SY
@item VY
@item TY
@item T2
@item T3
@end ftable

@c =========================================================================
@c Tutorial
@c =========================================================================

@node Tutorial, Running Gmsh, Post-processing module, Top
@chapter Tutorial

@cindex Short examples
@cindex Examples, short

@c -------------------------------------------------------------------------
@c t1.geo
@c -------------------------------------------------------------------------

@menu
* t1.geo::                      
* t2.geo::                      
* t3.geo::                      
* t4.geo::                      
* t5.geo::                      
* t6.geo::                      
* t7.geo::                      
* t8.geo::                      
* t9.geo::                      
@end menu

@node t1.geo, t2.geo, Tutorial, Tutorial
@section t1.geo

@include t1.geo

@c -------------------------------------------------------------------------
@c t2.geo
@c -------------------------------------------------------------------------

@node t2.geo, t3.geo, t1.geo, Tutorial
@section t2.geo

@include t2.geo

@c -------------------------------------------------------------------------
@c t3.geo
@c -------------------------------------------------------------------------

@node t3.geo, t4.geo, t2.geo, Tutorial
@section t3.geo

@include t3.geo

@c -------------------------------------------------------------------------
@c t4.geo
@c -------------------------------------------------------------------------

@node t4.geo, t5.geo, t3.geo, Tutorial
@section t4.geo

@include t4.geo

@c -------------------------------------------------------------------------
@c t5.geo
@c -------------------------------------------------------------------------

@node t5.geo, t6.geo, t4.geo, Tutorial
@section t5.geo
@include t5.geo

@c -------------------------------------------------------------------------
@c t6.geo
@c -------------------------------------------------------------------------

@node t6.geo, t7.geo, t5.geo, Tutorial
@section t6.geo

@include t6.geo

@c -------------------------------------------------------------------------
@c t7.geo
@c -------------------------------------------------------------------------

@node t7.geo, t8.geo, t6.geo, Tutorial
@section t7.geo

@include t7.geo

@c -------------------------------------------------------------------------
@c t8.geo
@c -------------------------------------------------------------------------

@node t8.geo, t9.geo, t7.geo, Tutorial
@section t8.geo

@include t8.geo

@c -------------------------------------------------------------------------
@c t9.geo
@c -------------------------------------------------------------------------

@node t9.geo,  , t8.geo, Tutorial
@section t9.geo

@include t9.geo

@c =========================================================================
@c Running Gmsh
@c =========================================================================

@node Running Gmsh, File formats, Tutorial, Top
@chapter Running Gmsh

@cindex Operating system
@cindex Platforms
@cindex Command line options
@cindex Options, command line
@cindex Running Gmsh

XXX include tutorial/README


@c =========================================================================
@c File Formats
@c =========================================================================

@node File formats, Programming comments, Running Gmsh, Top
@chapter File formats

XXX include FORMATS

This chapter describes the file formats that cannot be modified by the
user. 

@cindex Input file format
@cindex Gmsh, file format
@cindex Mesh, file format
@cindex File, mesh
@cindex File, @file{.msh}
@cindex @file{.msh} file

The native Gmsh mesh format read is divided into two sections, defining the
nodes and the elements in the mesh.

@example
$NOD
@var{number-of-nodes}
@var{node-number} @var{x-coord} @var{y-coord} @var{z-coord}
@dots{}
$ENDNOD
$ELM
@var{number-of-elements}
@var{elm-number} @var{elm-type} @var{elm-region} @var{unused} @var{number-of-nodes} @var{node-numbers}
@dots{}
$ENDELM
@end example

@noindent
All the syntactic variables stand for integers except @var{x-coord},
@var{y-coord} and @var{z-coord} which stand for floating point values.
The @var{elm-type} value defines the geometrical type for the element:

@noindent
@var{elm-type}:

@table @code
@item 1
Line (2 nodes, 1 edge).
@item 2
Triangle (3 nodes, 3 edges).
@item 3
Quadrangle (4 nodes, 4 edges).
@item 4
Tetrahedron (4 nodes, 6 edges, 4 facets).
@item 5
Hexahedron (8 nodes, 12 edges, 6 facets).
@item 6
Prism (6 nodes, 9 edges, 5 facets).
@item 7
Pyramid (5 nodes, 8 edges, 5 facets).
@item 15
Point (1 node).
@end table

@c =========================================================================
@c Programming Comments
@c =========================================================================

@node Programming comments, Bugs and versions, File formats, Top
@chapter Programming comments

todo: ceci peut constituer une intro a un futur guide de programmation
dans Gmsh...

@cindex Programming comments
@cindex Language
@cindex C
@cindex C++
@cindex @code{lex}
@cindex @code{flex}
@cindex @code{yacc}
@cindex @code{bison}

The analysis of the syntax is performed by Lex and Yacc, the software being
written in C++ (but most of it was initially written in C, which results in
some hybrid code...).

@c =========================================================================
@c Bugs, versions and contributors
@c =========================================================================

@ifclear COMMERCIAL

@node Bugs and versions, Tips and tricks, Programming comments, Top
@chapter Bugs, versions and contributors

@menu
* Bugs::                        
* Version history::             
* Contributors::                
@end menu

@c -------------------------------------------------------------------------
@c Bugs
@c -------------------------------------------------------------------------

@node Bugs, Version history, Bugs and versions, Bugs and versions
@section Bugs

@cindex Known bugs
@cindex Bugs, known
@cindex Bugs, reporting
@cindex Reporting bugs
@cindex Authors, e-mail
@cindex E-mail, authors

If you think you have found a bug in Gmsh, you can report it by electronic
mail to the Gmsh mailing list at @email{gmsh@@geuz.org}.  Please send as
precise a description of the problem as you can, including sample input
files that produce the bug (problem definition and mesh files). Don't forget
to mention both the version of Gmsh and the version of your operation
system (@pxref{Running Gmsh} to see how to get this information).

See the @file{TODO} file in the distribution to check the problems we
already know about.

@c -------------------------------------------------------------------------
@c Versions
@c -------------------------------------------------------------------------

@node Version history, Contributors, Bugs, Bugs and versions
@section Version history

@cindex Versions
@cindex History, versions
@cindex Changelog

@example
@include ../VERSIONS
@end example

@c -------------------------------------------------------------------------
@c Contributors
@c -------------------------------------------------------------------------

@node Contributors,  , Version history, Bugs and versions
@section Contributors

@cindex Acknowledgments
@cindex Contributors, list
@cindex Credits 

@example
@include ../CONTRIBUTORS
@end example

@end ifclear

@c =========================================================================
@c Tips ans Tricks
@c =========================================================================

@node Tips and tricks, GNU General Public License, Bugs and versions, Top
@appendix Tips and tricks

@cindex Tips
@cindex Tricks
@cindex Efficiency, tips

@itemize @bullet
@item
Install the 'info' version of this user's guide! On your (Unix) system, this
can be achieved by 1) copying all gmsh.info* files to the place where your
info files live (usually /usr/info), and 2) issuing the command
'install-info /usr/info/gmsh.info /usr/info/dir'. You will then be able to
access the documentation with the command 'info gmsh'. Note that particular
sections ("nodes") can be accessed directly. For example, 'info gmsh
extrude' will take you directly to the definition of the Extrude command.
@item
Use emacs to edit your files, and load the C++ mode! This permits automatic
syntax highlighting and easy indentation. Automatic loading of the C++ mode
for @file{.pro} files can be achieved by adding the following command in
your @code{.emacs} file: @code{(setq auto-mode-alist (append '(("\\.pro$"
. c++-mode)) auto-mode-alist))}.
@item
Define common geometrical objects and options in separate files, reusable in
all your problem definition structures (@pxref{Includes}).
@end itemize

@c =========================================================================
@c GNU GPL
@c =========================================================================

@ifclear COMMERCIAL

@node  GNU General Public License, Concept index, Tips and tricks, Top
@appendix GNU General Public License
@include gpl.texi

@end ifclear

@c =========================================================================
@c Concept Index (cindex)
@c =========================================================================

@node Concept index, Syntax index, GNU General Public License, Top
@unnumbered Concept index

@cindex Index, concepts
@cindex Concepts, index

@printindex cp

@c =========================================================================
@c Syntax Index (tindex+findex)
@c =========================================================================

@node Syntax index,  , Concept index, Top
@unnumbered Syntax index

@cindex Index, syntax
@cindex Syntax, index
@cindex Keywords, index

@printindex tp

@bye
