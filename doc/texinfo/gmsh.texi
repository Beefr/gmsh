\input texinfo.tex @c -*-texinfo-*-
@c $Id: gmsh.texi,v 1.14 2003-04-15 01:03:26 geuzaine Exp $
@c
@c Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
@c
@c This program is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2 of the License, or
@c (at your option) any later version.
@c
@c This program is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
@c USA.
@c 
@c Please report all bugs and problems to "gmsh@geuz.org".
@c
@c =========================================================================
@c
@c This is the Gmsh documentation texinfo source file
@c
@c Indexing:
@c
@c * @cindex = concept index, e.g. "File formats"
@c * @tindex + @findex = type + function index (= reserved keywords),
@c   e.g. "Spline"
@c
@c Before release, run C-u C-c C-u C-a in GNU Emacs. This updates all node
@c pointers and menus.
@c 
@c =========================================================================
@c
@c For commercial releases, set the COMMERCIAL flag (uncomment the following 
@c line). This will prevent all references to "free software" and the
@c like...
@c
@c @set COMMERCIAL
@c
@c =========================================================================
@c %**start of header
@setfilename        gmsh.info
@set EDITION        1.0
@set GMSH-VERSION   1.44
@set GMSH-WEB       @uref{http://www.geuz.org/gmsh/}
@set COPYRIGHT      @copyright{} 1997-2003 Christophe Geuzaine, Jean-Francois Remacle
@c
@settitle Gmsh @value{GMSH-VERSION}
@footnotestyle separate
@setchapternewpage odd
@paragraphindent 0
@finalout
@c %**end of header

@c merge function index into type index
@syncodeindex fn tp

@c =========================================================================
@c Info directives
@c =========================================================================

@ifinfo
@dircategory Math
@direntry
* Gmsh: (gmsh).  3D finite element mesh generator with built-in pre- and
post-processing facilities
@end direntry
@noindent
This is edition @value{EDITION} (@today{}) of the @cite{Gmsh Reference
Manual}, for Gmsh @value{GMSH-VERSION}.
@noindent
Copyright @value{COPYRIGHT}
@end ifinfo

@c =========================================================================
@c TeX directives
@c =========================================================================

@iftex
@global@let@sl=@it
@global@setfont@indit@itshape{9}{1000}
@end iftex

@c =========================================================================
@c Title page
@c =========================================================================

@shorttitlepage Gmsh

@titlepage

@title Gmsh Reference Manual

@subtitle The documentation for Gmsh, Version @value{GMSH-VERSION}
@subtitle A finite element mesh generator with built-in pre- and post-processing facilities
@subtitle 
@subtitle Edition @value{EDITION} (@today{})

@author Christophe Geuzaine
@author Jean-Francois Remacle

@page
@vskip 0pt plus 1filll
Copyright @value{COPYRIGHT}
@sp 1
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on
all copies.

@end titlepage

@c =========================================================================
@c Table of contents
@c =========================================================================

@summarycontents
@contents

@c =========================================================================
@c Top node (for all output, except TeX)
@c =========================================================================

@ifnottex
@node Top, Copying conditions, (dir), (dir)
@top Gmsh

@chapheading Gmsh Reference Manual

Christophe Geuzaine and Jean-Francois Remacle

Gmsh is an automatic 3D finite element mesh generator with build-in pre- and
post-processing facilities. This is edition @value{EDITION} (@today{}) of
the @cite{Gmsh Reference Manual}, for Gmsh @value{GMSH-VERSION}.
@end ifnottex

@c =========================================================================
@c Master menu
@c =========================================================================

@menu
* Copying conditions::          Terms and conditions of use.
* Overview::                    What is Gmsh?
* General tools::               Description of general commands and options.
* Geometry module::             Description of all Geometry commands.
* Mesh module::                 Description of all Mesh commands.
* Solver module::               Description of all Solver commands.
* Post-processing module::      Description of all Post-Processing commands.
* Tutorial::                    A step-by-step tutorial.
* Running Gmsh::                How to run Gmsh on your operating system.
* File formats::                Input and output file formats.
* Programming comments::        Some random notes for developpers.
* Bugs and versions::           Contact information, version history and list of contributors.
* Tips and tricks::             Some tips to make your life easier with Gmsh.
* GNU General Public License::  Copy of the GNU GPL.
* Concept index::               Index of concepts.
* Syntax index::                Index of reserved keywords in the Gmsh language.

@detailmenu
 --- The Detailed Node Listing ---

Overview

* Geometry::                    
* Mesh::                        
* Solver::                      
* Post-processing::             
* What Gmsh is pretty good at...::  
* ... and what it is not so good at::  
* Syntactic rules::             

General tools

* Comments::                    
* Expressions::                 
* Operators::                   
* Built-in functions::          
* User-defined functions::      
* Loops and tests::             
* General commands::            
* General options::             

Geometry module

* Geometry commands::           
* Geometry options::            

Mesh module

* Mesh commands::               
* Mesh options::                

Solver module

* Solver options::              

Post-processing module

* Post-processing commands::    
* Post-processing options::     

Tutorial

* t1.geo::                      
* t2.geo::                      
* t3.geo::                      
* t4.geo::                      
* t5.geo::                      
* t6.geo::                      
* t7.geo::                      
* t8.geo::                      
* t9.geo::                      

Running Gmsh

* Interactive vs. non-interactive mode::  
* Command-line options::        
* Mouse actions::               
* Keyboard shortcuts::          

Bugs, versions and contributors

* Bugs::                        
* Version history::             
* Contributors::                

@end detailmenu
@end menu

@c =========================================================================
@c Copying Conditions
@c =========================================================================

@ifclear COMMERCIAL

@node Copying conditions, Overview, Top, Top
@unnumbered Copying conditions

@cindex Copyright
@cindex Web site
@cindex Internet address
@cindex Download

Gmsh is ``free software''; this means that everyone is free to use it and
to redistribute it on a free basis. Gmsh is not in the public domain; it is
copyrighted and there are restrictions on its distribution, but these
restrictions are designed to permit everything that a good cooperating
citizen would want to do.  What is not allowed is to try to prevent others
from further sharing any version of Gmsh that they might get from you.

Specifically, we want to make sure that you have the right to give away
copies of Gmsh, that you receive source code or else can get it if you want
it, that you can change Gmsh or use pieces of Gmsh in new free programs,
and that you know you can do these things.

To make sure that everyone has such rights, we have to forbid you to deprive
anyone else of these rights.  For example, if you distribute copies of
Gmsh, you must give the recipients all the rights that you have.  You must
make sure that they, too, receive or can get the source code.  And you must
tell them their rights.

Also, for our own protection, we must make certain that everyone finds out
that there is no warranty for Gmsh.  If Gmsh is modified by someone else
and passed on, we want their recipients to know that what they have is not
what we distributed, so that any problems introduced by others will not
reflect on our reputation.

The precise conditions of the license for Gmsh are found in the General
Public License that accompanies the source code (@pxref{GNU General Public
License}). Further information about this license is available from the GNU
Project webpage @uref{http://www.gnu.org/copyleft/gpl-faq.html}.

The source code and various pre-compiled versions of Gmsh (for most of the
classical UNIX platforms, for Windows and for Mac OS) can be downloaded from
the web site @value{GMSH-WEB}.

If you use Gmsh, we would appreciate that you mention it in your
work. Published references, as well as the latest news about Gmsh
developments and download information, are always available on
@value{GMSH-WEB}.

@end ifclear

@c =========================================================================
@c Overview
@c =========================================================================

@node Overview, General tools, Copying conditions, Top
@chapter Overview

@cindex Introduction
@cindex Overview

Gmsh is an automatic three-dimensional finite element mesh generator,
primarily Delaunay, with built-in pre- and post-processing facilities. Its
primal design goal is to provide a simple meshing tool for academic test
cases with parametric input and up to date visualization capabilities.  One
of the strengths of Gmsh is its ability to respect a characteristic length
field for the generation of adapted meshes on lines, surfaces and
volumes. These adapted meshes can be mixed with simple structured
(transfinite, extruded, etc.) meshes in order to augment the flexibility.
All geometrical, mesh, solver and post-processing instructions are
prescribed either interactively using the graphical user interface or in
ASCII data files using Gmsh's own scripting language.

Gmsh is structured around four modules: geometry, mesh, solver and
post-processing. The specification of any input to these modules is done
either interactively, or in text data files (interactive specifications
generate language bits in the input file, and vice versa). The accessibility
of most features in the ASCII text file makes it possible to automate all
treatments (loops, tests and external access methods permit advanced
scripting capabilities). The internal kernel of Gmsh reflects this
structure: it is built around a geometry, mesh, solver and post-processing
module. A brief description of these four modules is given hereafter.

@menu
* Geometry::                    
* Mesh::                        
* Solver::                      
* Post-processing::             
* What Gmsh is pretty good at...::  
* ... and what it is not so good at::  
* Syntactic rules::             
@end menu

@c -------------------------------------------------------------------------
@c Geometry: geometrical entity definition
@c -------------------------------------------------------------------------

@node Geometry, Mesh, Overview, Overview
@section Geometry: geometrical entity definition

Geometries are created in a bottom-up flow by successively defining
points, oriented curves (segments, circles, ellipses, splines, etc.),
oriented surfaces (plane surfaces, ruled surfaces, etc.) and
volumes. Compound groups of geometrical entities can be defined, based
on these elementary parametrized geometric entities. Data can be
defined either interactively thanks to the menu system, or directly in
the ASCII input files.  The scripting possibilities (with loops,
tests, arrays of variables, etc.) allow fully parametrized definitions
of all geometrical entities.

@c -------------------------------------------------------------------------
@c Mesh: finite element mesh generation
@c -------------------------------------------------------------------------

@node Mesh, Solver, Geometry, Overview
@section Mesh: finite element mesh generation

A finite element mesh is a tessellation of a given subset of R3 by
elementary geometrical elements of various shapes (in this case lines,
triangles, quadrangles, tetrahedra, prisms, hexahedra and pyramids),
arranged in such a way that if two of them intersect, they do so along a
face, an edge or a node, and never otherwise. All the finite element meshes
produced by Gmsh as unstructured, even if they were generated in a
structured way. This implies that the elementary geometrical elements are
defined only by an ordered list of their vertices (which allows the
orientation of all their lower order geometrical entities) but no predefined
relation is assumed between any two elementary elements.

The mesh generation is performed in the same order as the geometry
creation: curves are discretized first; the mesh of the curves is then
used to mesh the surfaces; then the mesh of the surfaces is used to
mesh the volumes. This automatically assures the continuity of the
mesh when, for example, two surfaces share a common curve. Every
meshing step is constrained by the characteristic length field, which
can be uniform, specified by characteristic length associated to
elementary geometrical entities, or associated to another mesh (the
background mesh).

For each meshing step (i.e. the discretization of lines, surfaces and
volumes), all structured mesh directives are executed first, and serve
as additional constraints for the unstructured parts. The implemented
Delaunay algorithm is subdivided in the following five steps for
surface/volume discretization:

@enumerate
@item
trivial meshing of a box including the convex polygon/polyhedron defined by
the boundary nodes resulting from the discretization of the curves/surfaces;
@item
creation of the initial mesh by insertion of all the nodes on the
curves/surfaces thanks to the Bowyer algorithm;
@item
boundary restoration to force all the edges/faces of the curves/surfaces to
be present in the initial mesh;
@item
suppression of all the unwanted triangles/tetrahedra (in particular those
containing the nodes of the initial box);
@item
insertion of new nodes by the Bowyer algorithm until the characteristic size
of each simplex is lower or equal to the characteristic length field
evaluated at the center of its circumscribed circle/sphere.
@end enumerate

@c -------------------------------------------------------------------------
@c Solver: external solver interface
@c -------------------------------------------------------------------------

@node Solver, Post-processing, Mesh, Overview
@section Solver: external solver interface

External solvers can be interfaced with Gmsh through Unix sockets, which
permits to easily launch computations either locally or on remote computers,
and to collect and exploit the simulation results within Gmsh. The default
solver interfaced with Gmsh is GetDP
(@uref{http://www.geuz.org/getdp/}). @xref{Solver}, to see how to define
your own solver.

@c -------------------------------------------------------------------------
@c Post-processing: scalar and vector field visualization
@c -------------------------------------------------------------------------

@node Post-processing, What Gmsh is pretty good at..., Solver, Overview
@section Post-processing: scalar and vector field visualization

Multiple post-processing scalar or vector maps can be loaded and manipulated
(globally or individually) along with the geometry and the mesh. Scalar
fields are represented by iso-value curves/surfaces or color maps and vector
fields by three-dimensional arrows or displacement maps. Post-processing
functions include arbitrary section computation, offset, elevation, boundary
extraction, color map and range modification, animation, vector graphic
output, etc. All post-processing options can be accessed either
interactively or through the input ASCII text files. Scripting permits to
automate all the post-processing operations (e.g. for the creation of
complex animations). User-defined operations can also be performed on
post-proessing views through to dynamically loadable modules (plug-ins).

@c -------------------------------------------------------------------------
@c What Gmsh is pretty good at
@c -------------------------------------------------------------------------

@node What Gmsh is pretty good at..., ... and what it is not so good at, Post-processing, Overview
@section What Gmsh is pretty good at...

@itemize @bullet
@item
Describe quickly simple and/or ``repetitive'' geometries. Models are
constructed by defining successively points, curves, surfaces and volumes
(@pxref{Geometry}). Loops and includes can be used to perform repetitive
tasks (@pxref{Loops and tests}, @pxref{General commands}).
@item
Parameterize these geometries: the model is described in Gmsh's own
language, where all commands and command arguments can depend on previous
calculations.
@item
Generate 1D, 2D and 3D simplicial (i.e. using line segments, triangles and
tetrahedra) finite element meshes. The 1D and 2D algorithms should have
pretty good performance in most cases. The 3D algorithm is still more
experimental.
@item
Specify target element sizes: Gmsh provides several mechanisms to control
the size of the elements in the final (interpolation from geometrical point
characteristic lengths, explicit background mesh, attractors).
@item
Create simple extruded geometries and meshes.
@item
Interact with your solver: Gmsh provides C/C++ and perl interfaces, and
others can be easily added (@pxref{Solver}).
@item
Visualize computational results in a great variety of ways. Gmsh can
display scalar, vector and tensor data sets in many different ways.
@item
Perform various operations on the post-processing views using plugins
(@pxref{Post-processing}).
@item
Exports plots in many different formats (vector PostScript or encapsulated
PostScript, LaTeX, PNG, JPEG, GIF, etc.).
@item
Generate complex animations.
@item
Run on low end machines and/or machines without graphic systems: Gmsh can be
compiled with or without the graphical user interface; graphical versions
can be used either interactively or without graphicak output, directly from
the command-line.
@item
Configure your preferred options for all subsequent operations: Gmsh has a
large number of configurations options that can be set interactively,
scattered inside command files (and changed on the fly in scripts), set in
per-user configuration files, or specified on the command-line
(@pxref{General options}, @ref{Geometry options}, @ref{Mesh options},
@ref{Post-processing options} and @ref{Running Gmsh}).
@end itemize

@c -------------------------------------------------------------------------
@c ... and what it is not so good at
@c -------------------------------------------------------------------------

@node ... and what it is not so good at, Syntactic rules, What Gmsh is pretty good at..., Overview
@section ... and what it is not so good at

@itemize @bullet
@item
The bottom-up approach for describing geometries can become tedious for
complex structures.
@item
There is no support for NURBS and only very limited support for trimmed
surfaces.
@item
Gmsh is not primarily a structured mesh generator: no automatic
quadrilateral or hexahedral meshing algorithm is provided. If you want
quadrangles, you have to use transfinite or extruded meshes (@pxref{Mesh})
or recombine unstructured triangular meshes. For hexahedra, your only choice
is transfinite or extruded meshes.
@item
Gmsh is not a multibloc generator: all meshes produced by Gmsh are
conforming in the sense of finite element meshes (@pxref{Mesh})
@item
There is not support for curved mesh elements as of this writing (Gmsh
1.44).
@item
Gmsh is designed for solving academic test-cases, not industrial-size
problems. You may find that Gmsh is too slow for large problems (with
thousands of geometric primitives; or millions of mesh/post-processing
elements).
@end itemize

@c -------------------------------------------------------------------------
@c Syntactic Rules Used in this Document
@c -------------------------------------------------------------------------

@node Syntactic rules,  , ... and what it is not so good at, Overview
@section Syntactic rules used in this document

@cindex Syntax, rules
@cindex Rules, syntactic
@cindex Document syntax

Here are the rules we tried to follow when writing this user's guide. Note
that metasyntactic variable definitions stay valid throughout all the manual
(and not only in the sections where the definitions appear).

@enumerate
@item 
Keywords and literal symbols are printed like @code{this}.
@item 
Metasyntactic variables (i.e.@: text bits that are not part of the syntax,
but stand for other text bits) are printed like @var{this}.
@item 
A colon (@code{:}) after a metasyntactic variable separates the variable
from its definition.
@item 
Optional rules are enclosed in @code{<} @code{>} pairs.
@item 
Multiple choices are separated by @code{|}.
@item 
Three dots (@dots{}) indicate a possible repetition of the preceding rule.
@item 
The @var{etc} symbol replaces nonlisted rules.
@end enumerate

@c =========================================================================
@c General tools
@c =========================================================================

@node General tools, Geometry module, Overview, Top
@chapter General tools

ASCII files, parser, blabla

@menu
* Comments::                    
* Expressions::                 
* Operators::                   
* Built-in functions::          
* User-defined functions::      
* Loops and tests::             
* General commands::            
* General options::             
@end menu

@c -------------------------------------------------------------------------
@c Comments
@c -------------------------------------------------------------------------

@node Comments, Expressions, General tools, General tools
@section Comments

@cindex Comments
@cindex File, comment

@tindex /*, */
@tindex //

Both C and C++ style comments are supported and can be used in the input
data file to comment selected text regions:

@enumerate
@item
the text region comprised between @code{/*} and @code{*/} pairs is ignored;
@item
the rest of a line after a double slash @code{//} is ignored.
@end enumerate

These commands won't have the described effects inside double quotes or
inside Gmsh keywords.

Note that `white space' (spaces, tabs, new line characters) is ignored
inside all Gmsh expressions.

@c -------------------------------------------------------------------------
@c Expressions
@c -------------------------------------------------------------------------

@node Expressions, Operators, Comments, General tools
@section Expressions 

@cindex Expression, definition
@cindex Constant, definition
@cindex Constant, evaluation
@cindex Evaluation mechanism
@cindex Real numbers
@cindex Floating point numbers
@cindex Numbers, real
@cindex Numbers, integer
@cindex String

@tindex Pi
@tindex MPI_Rank
@tindex MPI_Size
@tindex =

The two constant types used in Gmsh are @var{real} and @var{string} (there
is no integer type).  These types have the same meaning and syntax as in the
C or C++ programming languages.  Expressions are denoted by the
metasyntactic variable @var{expression} (remember the definition of the
syntactic rules in @ref{Syntactic rules}), and are evaluated during the
parsing of the data file:

@example
@var{expression}:
  @var{real} |
  @var{expression-id} |
  @var{operator-unary} @var{expression} |
  @var{expression} @var{operator-binary} @var{expression} |
  @var{expression} @var{operator-ternary-left} @var{expression}
      @var{operator-ternary-right} @var{expression} |
  @var{built-in-function}
@end example

The operators @var{operator-unary}, @var{operator-binary} and
@var{operator-ternary-left}/@var{operator-ternary-right} are defined in
@ref{Operators}. The @var{built-in-function}s are defined in @ref{Built-in
functions}.

List of expressions are defined as:

@example
@var{expression-list}:
  @var{expression-list-item} <, @var{expression-list-item}> @dots{}
@end example

@noindent with

@example
@var{expression-list-item}:
  @var{expression} |
  @var{expression} : @var{expression} |
  @var{expression} : @var{expression} : @var{expression} |
  @var{expression-id} @{@} |
  @var{expression-id} @{ @var{expression-list} @}
@end example

The second case in this last definition permits to create a list containing
the range of numbers comprised between two @var{expression}s, with a unit
incrementation step. The third case also permits to create a list containing
the range of numbers comprised between two @var{expression}s, but with a
positive or negative incrementation step equal to the third
@var{expression}. The fourth and fifth cases permit to lists or sublists of
expressions. The syntax for the definition of expression identifiers is:

@example
@var{expression-id} = @var{expression-def};
@end example

@noindent with

@example
@var{expression-id}:
  @var{string} |
  Pi |
  MPI_Rank | MPI_Size |
  newp | newl | news | newv | newreg

@var{expression-def}:
  @var{expression-list-item} |
  @{ @var{expression-list} @}
@end example

The only expressions predefined in Gmsh are @code{Pi} (=
3.1415926535897932), @code{MPI_Size} (which returns the number of processors
on which Gmsh is running), @code{MPI_Rank} (which returns the rank of the
current processor), @code{newp} (returns the next available point number),
@code{newc} (returns the next available curve number), @code{news} (returns
the next available surface number), @code{newv} (returns the next available
volume number) and @code{newreg} (returns the next available region number).

Character expressions can also be defined (but there exists no character
expression identifier at the moment):

@example
@var{expression-char}:
  "@var{string}" |
  StrPrefix[ @var{expression-char} ] |
  StrCat[ @var{expression-char} , @var{expression-char} ] |
  Sprintf[ @var{expression-char} , @var{expression-list} ]
@end example

@noindent The third casein this definition permits to take the
prefix of a string (e.g. for removing the extension from a file name). The
fourth case permits to concatenate two character expressions. The fifth is
an equivalent of the @code{sprintf} C function (@var{expression-char} is a
format string that can contain floating point formatting characters:
@code{%e}, @code{%g}, etc.).

@c -------------------------------------------------------------------------
@c Operators
@c -------------------------------------------------------------------------

@node Operators, Built-in functions, Expressions, General tools
@section Operators

@cindex Operators, definition
@cindex Unary operators
@cindex Binary operators
@cindex Ternary operators

The operators in Gmsh are similar to the corresponding operators in the C or
C++ programming languages. Here is a list of the unary, binary and ternary
operators currently implemented in Gmsh.

@noindent
@var{operator-unary}:
@ftable @code
@item -
Unary minus.
@item !
Logical not.
@item ++
Post incrementation.
@item --
Post decrementation.
@end ftable

@noindent
@var{operator-binary}:
@ftable @code
@item ^
Exponentiation. The evaluation of the both arguments must result in a scalar
value.
@item *
Multiplication or scalar product, depending on the type of the arguments. 
@item /\
Cross product. The evaluation of both arguments must result in vectors.
@item /
Division.
@item %
Modulo. The evaluation of the second argument must result in a scalar value.
@item +
Addition.
@item -
Subtraction.
@item ==
Equality.
@item !=
Inequality.
@item +=
XXX.
@item -=
XXX.
@item *=
XXX.
@item /=
XXX.
@item >
Greater. The evaluation of both arguments must result in scalar values.
@item >=
Greater or equality. The evaluation of both arguments must result in
scalar values.
@item <
Less. The evaluation of both arguments must result in scalar values.
@item <=
Less or equality. The evaluation of both arguments must result in scalar values.
@item &&
Logical and. The evaluation of both arguments must result in scalar
values. Warning: the logical and always (unlike in C or C++) implies the
evaluation of both arguments. That is, the second operand of @code{&&} is
evaluated even if the first one is false.
@item ||
Logical or. The evaluation of both arguments must result in floating point
values. Warning: the logical or always (unlike in C or C++) implies the
evaluation of both arguments.  That is, the second operand of @code{||} is
evaluated even if the first one is true.
@end ftable

@noindent
@var{operator-ternary-left}:
@ftable @code
@item ?
@end ftable
@var{operator-ternary-right}:
@ftable @code
@item :
The only ternary operator, constituted of @var{operator-ternary-left} and
@var{operator-ternary-right} is defined as in the C or C++ programming
languages. The ternary operator first evaluates its first argument (the
@var{expression} located before the @code{?}), which must result in a scalar
value. If it is true (non-zero) the second argument (located between
@code{?} and @code{:}) is evaluated and returned; otherwise the third
argument (located after @code{:}) is evaluated and returned.
@end ftable


@cindex Evaluation, order
@cindex Order of evaluation
@cindex Operation, priorities
@cindex Priorities, operations

@tindex ()

The evaluation priorities are summarized below (from stronger to weaker,
i.e.@: @code{^} has the highest evaluation priority). Parentheses
@code{()} may be used anywhere to change the order of evaluation.

@table @code
@item ^
@item - (unary), ! 
@item /\
@item *, /, %
@item +, - 
@item <, >, <=, >=
@item !=, ==
@item &&, ||
@item ?:
@end table


@c -------------------------------------------------------------------------
@c Built-in functions
@c -------------------------------------------------------------------------

@node Built-in functions, User-defined functions, Operators, General tools
@section Built-in functions

@cindex Functions, built-in

A built-in function is composed from an identifier followed by a pair of
parentheses @code{()} containing an @var{expression-list} (the list of its
arguments)@footnote{For compatibility with GetDP
(@uref{http://www.geuz.org/getdp/}), parentheses can be replaced by brackets
@code{[]}.}. Here is the list of the built-in functions currently
implemented:

@noindent
@var{build-in-function}:

@ftable @code

@item Acos[ @var{expression} ]
Arc cosine (inverse cosine) of @var{expression} in [0,Pi], @var{expression} in [-1,1].

@item Asin[ @var{expression} ]
Arc sine (inverse sine) of @var{expression} in [-Pi/2,Pi/2], @var{expression} in [-1,1].

@item Atan[ @var{expression} ]
Arc tangent (inverse tangent) of @var{expression} in [-Pi/2,Pi/2].

@item Atan2[ @var{expression}, @var{expression} ]
Arc tangent (inverse tangent) of the first @var{expression} divided by the
second, in [-Pi,Pi].

@item Ceil[ @var{expression} ]
XXX

@item Cos[ @var{expression} ]
Cosine of @var{expression}.

@item Cosh[ @var{expression} ]
Hyperbolic cosine of @var{expression}.

@item Exp[ @var{expression} ]
Exponential function: e^@var{expression}.

@item Fabs[ @var{expression} ]
Absolute value of @var{expression}.

@item Fmod[ @var{expression}, @var{expression} ]
Remainder of the division of the first @var{expression} by the second, with
the sign of the first.

@item Floor[ @var{expression} ]
XXX

@item Hypot[ @var{expression}, @var{expression} ]
XXX

@item Log[ @var{expression} ]
Natural logarithm: ln(@var{expression}), @var{expression}>0.

@item Log10[ @var{expression} ]
Base 10 logarithm: log10(@var{expression}), @var{expression}>0.

@item Modulo[ @var{expression} ]
XXX

@item Rand
XXX

@item Sqrt[ @var{expression} ]
Square root, @var{expression}>=0.

@item Sin[ @var{expression} ]
Sine of @var{expression}.

@item Sinh[ @var{expression} ]
Hyperbolic sine of @var{expression}.

@item Tan[ @var{expression} ]
Tangent of @var{expression}.

@item Tanh[ @var{expression} ]
Hyperbolic tangent of @var{expression}.

@end ftable

@c -------------------------------------------------------------------------
@c User-defined functions
@c -------------------------------------------------------------------------

@node User-defined functions, Loops and tests, Built-in functions, General tools
@section User-defined Functions

@cindex Function, user-defined

User-defined functions can be defined, but are rudimentary: they take no
arguments, and are evaluated as if a file containg the function body was
included at the location of the @code{Call} statement.
be included

@ftable @code

@item Function @var{string}
@item Return
Eclose the definition of a user-defined function.

@item Call @var{string};
Executes the body of the function @var{string}.

@end ftable

@c -------------------------------------------------------------------------
@c Loops and tests
@c -------------------------------------------------------------------------

@node Loops and tests, General commands, User-defined functions, General tools
@section Loops and tests



@ftable @code

@item For ( @var{expression} : @var{expression} )
@item EndFor
Loop

@item For ( @var{expression} : @var{expression} : @var{expression} )
@item EndFor
Loop

@item For @var{string} In ( @var{expression} : @var{expression} )
@item EndFor
Loop

@item For @var{string} In ( @var{expression} : @var{expression} : @var{expression} )
@item EndFor
Loop

@item If ( @var{expression} )
@item EndIf
The body enclised between @code{If} and @code{Endif} is evaluated if
@var{expression} is non-zero.

@end ftable

@c -------------------------------------------------------------------------
@c General commands
@c -------------------------------------------------------------------------

@node General commands, General options, Loops and tests, General tools
@section General commands

@ftable @code

@item Exit;
Aborts the current script.

@item Printf[ @var{expression-char} , @var{expression-list} ]
Equivalent of the @code{printf} C function (@var{expression-char} is a
format string that can contain floating point formatting characters:
@code{%f}, @code{%e}, etc.).

@item Merge @var{expression-char};
To merge a file.

@item MergeWithBoundingBox string;
To merge a file and force the recalculation of the scene's bounding box.

@item Draw;
To redraw the scene.

@item Save @var{expression-char};
To save the mesh to a given file name, using the current @code{Mesh.Format}
(@pxref{Mesh options}).

@item Print @var{expression-char};
To print the graphic window to a given file name, using the current
@code{Print.Format} (@pxref{General options}).

@item Sleep @var{expression};
To sleep during @var{expression} seconds.

@item Delete View[@var{expression}];
To free the post-processing view @var{expression}.

@item Delete Meshes;
To free all meshes.

@item Duplicata View[@var{expression}];
To duplicate the post-processing @var{expression}.

@item System @var{expression-char};
To execute a system call.

@item Include @var{expression-char};
@item #include @var{expression-char};
To include the file @var{expression-char}.

@end ftable

@c -------------------------------------------------------------------------
@c General options
@c -------------------------------------------------------------------------

@node General options,  , General commands, General tools
@section General options

@c All the opt_XXX.texi files are generated automatically with 'gmsh -doc'

@include opt_general.texi

@include opt_print.texi

@c =========================================================================
@c Geometry module
@c =========================================================================

@node Geometry module, Mesh module, General tools, Top
@chapter Geometry module

@cindex Geometry
@cindex Module, Geometry

@menu
* Geometry commands::           
* Geometry options::            
@end menu

@c -------------------------------------------------------------------------
@c Geometry commands
@c -------------------------------------------------------------------------

@node Geometry commands, Geometry options, Geometry module, Geometry module
@section Geometry commands

@ftable @code

@item Bezier		

@item BSpline		

@item Circle          

@item Coherence       

@item CatmullRom	

@item Delete          

@item Dilate          

@item Duplicata       

@item Ellipsis
(synonym: Ellipse)

@item Intersect       

@item Knots		

@item Line            

@item Loop            

@item Nurbs Surface

@item Nurbs Surface With Bounds

@item Order

@item Physical        

@item Plane           

@item Point           

@item Rotate          

@item Ruled           

@item Spline          

@item Surface         

@item Symmetry        

@item Triangulation   

@item Translate       

@item Trimmed		

@item Volume
(synonym: Complex Volume)

@end ftable

@c -------------------------------------------------------------------------
@c Geometry options
@c -------------------------------------------------------------------------

@node Geometry options,  , Geometry commands, Geometry module
@section Geometry options

@include opt_geometry.texi

@c =========================================================================
@c Mesh module
@c =========================================================================

@node Mesh module, Solver module, Geometry module, Top
@chapter Mesh module

@cindex Mesh
@cindex Module, Mesh

@menu
* Mesh commands::               
* Mesh options::                
@end menu

@c -------------------------------------------------------------------------
@c Mesh commands
@c -------------------------------------------------------------------------

@node Mesh commands, Mesh options, Mesh module, Mesh module
@section Mesh commands

@ftable @code
@item Attractor

@item Bump

@item Characteristic

@item Color

@item Elliptic

@item Extrude

@item Length

@item Layers          

@item Meshes          

@item Power           

@item Progression     

@item Parametric	

@item Recombine

@item Transfinite     

@item With		

@item Using           

@item In              

@end ftable

@c -------------------------------------------------------------------------
@c Mesh options
@c -------------------------------------------------------------------------

@node Mesh options,  , Mesh commands, Mesh module
@section Mesh options

@include opt_mesh.texi

@c =========================================================================
@c Solver module
@c =========================================================================

@node Solver module, Post-processing module, Mesh module, Top
@chapter Solver module

@cindex Solver
@cindex Module, Solver

No solver commands. The solver interface works like this XXX. Include C code
from solver example?

@c -------------------------------------------------------------------------
@c Solver options
@c -------------------------------------------------------------------------

@menu
* Solver options::              
@end menu

@node Solver options,  , Solver module, Solver module
@section Solver options

@include opt_solver.texi

@c =========================================================================
@c Post-processing module
@c =========================================================================

@node Post-processing module, Tutorial, Solver module, Top
@chapter Post-processing module

@cindex Post-processing
@cindex Module, Post-processing

@menu
* Post-processing commands::    
* Post-processing options::     
@end menu

@c -------------------------------------------------------------------------
@c Post-processing commands
@c -------------------------------------------------------------------------

@node Post-processing commands, Post-processing options, Post-processing module, Post-processing module
@section Post-processing commands

@ftable @code
@item ColorTable

@item Plugin          

@item SP
@item VP
@item TP

@item SL
@item VL
@item TL

@item ST
@item VT
@item TT

@item SQ
@item VQ
@item TQ

@item SS
@item VS
@item TS

@item SH
@item VH
@item TH

@item SI
@item VI
@item TI

@item SY
@item VY
@item TY

@item T2

@item T3

@end ftable

@c -------------------------------------------------------------------------
@c Post-processing options
@c -------------------------------------------------------------------------

@node Post-processing options,  , Post-processing commands, Post-processing module
@section Post-processing options

@include opt_post.texi

Options that should apply to all views are given by @code{View.Option}. To
set an option specifically for the n-th view, use @code{View[n].Option}.

@include opt_view.texi

@c =========================================================================
@c Tutorial
@c =========================================================================

@node Tutorial, Running Gmsh, Post-processing module, Top
@chapter Tutorial

@cindex Short examples
@cindex Examples
@cindex Tutorial

Here are the examples in the Gmsh tutorial. These examples are commented
(both C and C++-style comments can be used in Gmsh input files: see
@ref{Comments}) and should introduce new features gradually, starting with
@file{t1.geo}.

This tutorial does not explain the mesh and post-processing file
formats. See @ref{File formats} for this.

@menu
* t1.geo::                      
* t2.geo::                      
* t3.geo::                      
* t4.geo::                      
* t5.geo::                      
* t6.geo::                      
* t7.geo::                      
* t8.geo::                      
* t9.geo::                      
@end menu

@c -------------------------------------------------------------------------
@c t1.geo
@c -------------------------------------------------------------------------

@node t1.geo, t2.geo, Tutorial, Tutorial
@section @file{t1.geo}

@include t1.geo

@c -------------------------------------------------------------------------
@c t2.geo
@c -------------------------------------------------------------------------

@node t2.geo, t3.geo, t1.geo, Tutorial
@section @file{t2.geo}

@include t2.geo

@c -------------------------------------------------------------------------
@c t3.geo
@c -------------------------------------------------------------------------

@node t3.geo, t4.geo, t2.geo, Tutorial
@section @file{t3.geo}

@include t3.geo

@c -------------------------------------------------------------------------
@c t4.geo
@c -------------------------------------------------------------------------

@node t4.geo, t5.geo, t3.geo, Tutorial
@section @file{t4.geo}

@include t4.geo

@c -------------------------------------------------------------------------
@c t5.geo
@c -------------------------------------------------------------------------

@node t5.geo, t6.geo, t4.geo, Tutorial
@section @file{t5.geo}

@include t5.geo

@c -------------------------------------------------------------------------
@c t6.geo
@c -------------------------------------------------------------------------

@node t6.geo, t7.geo, t5.geo, Tutorial
@section @file{t6.geo}

@include t6.geo

@c -------------------------------------------------------------------------
@c t7.geo
@c -------------------------------------------------------------------------

@node t7.geo, t8.geo, t6.geo, Tutorial
@section @file{t7.geo}

@include t7.geo

@c -------------------------------------------------------------------------
@c t8.geo
@c -------------------------------------------------------------------------

@node t8.geo, t9.geo, t7.geo, Tutorial
@section @file{t8.geo}

@include t8.geo

@c -------------------------------------------------------------------------
@c t9.geo
@c -------------------------------------------------------------------------

@node t9.geo,  , t8.geo, Tutorial
@section @file{t9.geo}

@include t9.geo

@c =========================================================================
@c Running Gmsh
@c =========================================================================

@node Running Gmsh, File formats, Tutorial, Top
@chapter Running Gmsh

@cindex Operating system
@cindex Platforms
@cindex Command line options
@cindex Options, command line
@cindex Running Gmsh

@menu
* Interactive vs. non-interactive mode::  
* Command-line options::        
* Mouse actions::               
* Keyboard shortcuts::          
@end menu

@c -------------------------------------------------------------------------
@c Interactive vs. non-interactive mode
@c -------------------------------------------------------------------------

@node Interactive vs. non-interactive mode, Command-line options, Running Gmsh, Running Gmsh
@section Interactive vs. non-interactive mode

There are several different ways to actually run Gmsh on your
computer@footnote{Note that these operation modes can slightly vary
depending on the operating system and/or shell you use.} The first working
mode of Gmsh is the interactive graphical mode. To launch Gmsh in
interactive mode, just click or double-click on the Gmsh icon (Windows and
Mac), or type

@example
> gmsh
@end example

@noindent at your shell prompt on the command line (Unix). This will open
two windows: the graphic window (with a status bar at the bottom) and the
menu window (with a menu bar and some context dependent buttons). To open
the first tutorial file, select the 'File->Open' menu, and choose
@file{t1.geo} in the input field. To perform the mesh generation, go to the
mesh module (by selecting 'Mesh' in the module menu) and choose the required
dimension in the context-dependent buttons ('1D' will mesh all the curves;
'2D' will mesh all the surfaces---as well as all the curves if '1D' was not
called before; '3D' will mesh all the volumes---and all the surfaces if '2D'
was not called before). To save the resulting mesh in the current mesh
format, choose 'Save' in the context-dependent buttons, or select the
appropriate format with the 'File->Save as' menu. The default mesh file name
is based on the name of the first input file on the command line (or
'untitled' if there wasn't any input file given), with an appended extension
depending on the mesh format.

Note that nearly all the interactive commands have shortcuts: see
@ref{Keyboard shortcuts} or select 'Help->Shortcuts' in the menu bar to
learn about these.

Instead of opening the tutorial with the 'File->Open' menu, it is
often more convenient to put the file name on the command line, for
example with:

@example
> gmsh t1.geo
@end example

Note that, even if it is often handy to define the variables and the points
directly in the input files (you may use any text editor for this purpose,
e.g. Wordpad on Windows, or Emacs on Unix), it is almost always more simple
to define the curves, the surfaces and the volumes interactively. To do so,
just follow the context dependent buttons in the Geometry module. For
example, to create a spline, select 'Geometry' in the module menu, and then
select 'Elementary, Add, New, Spline'. You will then be asked (in the status
bar of the graphic window) to select a list of points, and to click 'e' to
finish the selection (or 'q' to abort it). Once the interactive command is
completed, a string is automatically added at the end of the currently
opened project file.

The second operating mode for Gmsh is the non-interactive mode. In this
mode, there is no graphical user interface, and all operations are performed
without any user interaction@footnote{If you compile Gmsh without the
graphical user interface, i.e. with @code{./configure --disable-gui}, this
is the only mode you;ll have access to.}. To mesh the first tutorial in
non-interactive mode, just type:

@example
> gmsh t1.geo -2
@end example

To mesh the same example, but with the background mesh available in the file
@file{bgmesh.pos}, just type:

@example
> gmsh t1.geo -2 -bgm bgmesh.pos
@end example

You should read the notes in the file @file{bgmesh.pos} if you intend to use
background meshes.

Several files can be loaded simultaneously in Gmsh. The first one defines
the project, while the others are appended ("merged") to this project. You
can merge such files with the 'File->Merge' menu, or by directly specifying
the names of the files on the command line. This is most useful for
post-processing purposes. For example, to merge the post-processing views
contained in the files @file{view1.pos} and @file{view2.pos} together with
the first tutorial @file{t1.geo}, you can type the following command:

@example
> gmsh t1.geo view1.pos view2.pos
@end example

In the Post-Processing module (select 'Post_Processing' in the module
menu), two view buttons will appear, respectively labeled "a scalar
map" and "a vector map". A mouse click on the name will toggle the
visibility of the selected view, while a click on the arrow button on
the right will provide access to the view's options. If you want the
modifications made to one view to affect also all the other views,
select the 'Apply next changes to all views' or 'Force same options
for all views' option in the 'Tools->Options->Post-processing' menu.

Note that all the options specified interactively can also be directly
specified in the ASCII input files. All available options, with their
current values, can be saved into a file by selecting 'File->Save as->Gmsh
options', or simply viewed by pressing the '?' button in the status bar. To
save the current options as your default preferences for all future Gmsh
sessions, use the 'Tools->Options->Save' button.

@c -------------------------------------------------------------------------
@c Command-line options
@c -------------------------------------------------------------------------

@node Command-line options, Mouse actions, Interactive vs. non-interactive mode, Running Gmsh
@section Command-line options

@include command_line.texi

@c -------------------------------------------------------------------------
@c Mouse actions
@c -------------------------------------------------------------------------

@node Mouse actions, Keyboard shortcuts, Command-line options, Running Gmsh
@section Mouse actions

In the following, for a 2 button mouse, @kbd{Middle button} =
@kbd{Shift+Left button}. For a 1 button mouse, @kbd{Middle button} =
@kbd{Shift+Left button} and @kbd{Right button} = @kbd{Alt+Left button}.


@kbd{Move the mouse}:
@itemize @bullet
@item
highlight the elementary geometrical entity currently under the mouse
pointer and display its properties in the status bar
@item
size a rubber zoom started with @kbd{Ctrl+Left button}
@end itemize

@kbd{Left button}:
@itemize @bullet
@item
rotate
@item
accept a rubber zoom started with @kbd{Ctrl+Left button}
@end itemize

@kbd{Ctrl+Left button}: start (anisotropic) rubber zoom

@kbd{Middle button}:
@itemize @bullet
@item
zoom (isotropic)
@item
cancel a rubber zoom
@end itemize

@kbd{Ctrl+Middle button}: orthogonalize display

@kbd{Right button}:
@itemize @bullet
@item
pan
@item
cancel a rubber zoom
@item
pop up menu on post-processing view button
@end itemize

@kbd{Ctrl+Right button}: reset to default viewpoint

@c -------------------------------------------------------------------------
@c Keyboard shortcuts
@c -------------------------------------------------------------------------

@node Keyboard shortcuts,  , Mouse actions, Running Gmsh
@section Keyboard shortcuts

@include shortcuts.texi

@c =========================================================================
@c File Formats
@c =========================================================================

@node File formats, Programming comments, Running Gmsh, Top
@chapter File formats

XXX include FORMATS

This chapter describes the file formats that cannot be modified by the
user. 

@cindex Input file format
@cindex Gmsh, file format
@cindex Mesh, file format
@cindex File, mesh
@cindex File, @file{.msh}
@cindex @file{.msh} file

The native Gmsh mesh format read is divided into two sections, defining the
nodes and the elements in the mesh.

@example
$NOD
@var{number-of-nodes}
@var{node-number} @var{x-coord} @var{y-coord} @var{z-coord}
@dots{}
$ENDNOD
$ELM
@var{number-of-elements}
@var{elm-number} @var{elm-type} @var{elm-region} @var{unused} @var{number-of-nodes} @var{node-numbers}
@dots{}
$ENDELM
@end example

@noindent
All the syntactic variables stand for integers except @var{x-coord},
@var{y-coord} and @var{z-coord} which stand for floating point values.
The @var{elm-type} value defines the geometrical type for the element:

@noindent
@var{elm-type}:

@table @code
@item 1
Line (2 nodes, 1 edge).
@item 2
Triangle (3 nodes, 3 edges).
@item 3
Quadrangle (4 nodes, 4 edges).
@item 4
Tetrahedron (4 nodes, 6 edges, 4 facets).
@item 5
Hexahedron (8 nodes, 12 edges, 6 facets).
@item 6
Prism (6 nodes, 9 edges, 5 facets).
@item 7
Pyramid (5 nodes, 8 edges, 5 facets).
@item 15
Point (1 node).
@end table

@c =========================================================================
@c Programming Comments
@c =========================================================================

@node Programming comments, Bugs and versions, File formats, Top
@chapter Programming comments

todo: ceci peut constituer une intro a un futur guide de programmation
dans Gmsh...

@cindex Programming comments
@cindex Language
@cindex C
@cindex C++
@cindex @code{lex}
@cindex @code{flex}
@cindex @code{yacc}
@cindex @code{bison}

The analysis of the syntax is performed by Lex and Yacc.

The code itself is in C++ (but most of it was initially written in C, which
results in some hybrid code...).

All graphics are rendered using OpenGL.

The user interface is based on the FLTK widget set. 


@uref{http://www.opengl.org}
@uref{http://www.mesa3d.org}
@uref{http://www.fltk.org}
@uref{http://www.cygwin.com}


@c =========================================================================
@c Bugs, versions and contributors
@c =========================================================================

@ifclear COMMERCIAL

@node Bugs and versions, Tips and tricks, Programming comments, Top
@chapter Bugs, versions and contributors

@menu
* Bugs::                        
* Version history::             
* Contributors::                
@end menu

@c -------------------------------------------------------------------------
@c Bugs
@c -------------------------------------------------------------------------

@node Bugs, Version history, Bugs and versions, Bugs and versions
@section Bugs

@cindex Known bugs
@cindex Bugs, known
@cindex Bugs, reporting
@cindex Reporting bugs
@cindex Authors, e-mail
@cindex E-mail, authors

If you think you have found a bug in Gmsh, you can report it by electronic
mail to the Gmsh mailing list at @email{gmsh@@geuz.org}.  Please send as
precise a description of the problem as you can, including sample input
files that produce the bug (problem definition and mesh files). Don't forget
to mention both the version of Gmsh and the version of your operation
system (@pxref{Running Gmsh} to see how to get this information).

See the @file{TODO} file in the distribution to check the problems we
already know about.

@c -------------------------------------------------------------------------
@c Versions
@c -------------------------------------------------------------------------

@node Version history, Contributors, Bugs, Bugs and versions
@section Version history

@cindex Versions
@cindex History, versions
@cindex Changelog

@example
@include ../VERSIONS
@end example

@c -------------------------------------------------------------------------
@c Contributors
@c -------------------------------------------------------------------------

@node Contributors,  , Version history, Bugs and versions
@section Contributors

@cindex Acknowledgments
@cindex Contributors, list
@cindex Credits 

@example
@include ../CONTRIBUTORS
@end example

@end ifclear

@c =========================================================================
@c Tips ans Tricks
@c =========================================================================

@node Tips and tricks, GNU General Public License, Bugs and versions, Top
@appendix Tips and tricks

@cindex Tips
@cindex Tricks
@cindex Efficiency, tips

@itemize @bullet
@item
Install the 'info' version of this user's guide! On your (Unix) system, this
can be achieved by 1) copying all gmsh.info* files to the place where your
info files live (usually /usr/info), and 2) issuing the command
'install-info /usr/info/gmsh.info /usr/info/dir'. You will then be able to
access the documentation with the command 'info gmsh'. Note that particular
sections ("nodes") can be accessed directly. For example, 'info gmsh
extrude' will take you directly to the definition of the Extrude command.
@item
Use emacs to edit your files, and load the C++ mode! This permits automatic
syntax highlighting and easy indentation. Automatic loading of the C++ mode
for @file{.pro} files can be achieved by adding the following command in
your @code{.emacs} file: @code{(setq auto-mode-alist (append '(("\\.pro$"
. c++-mode)) auto-mode-alist))}.
@item
Define common geometrical objects and options in separate files, reusable in
all your problem definition structures.
@end itemize

@c =========================================================================
@c GNU GPL
@c =========================================================================

@ifclear COMMERCIAL

@node  GNU General Public License, Concept index, Tips and tricks, Top
@appendix GNU General Public License

@include gpl.texi

@end ifclear

@c =========================================================================
@c Concept Index (cindex)
@c =========================================================================

@node Concept index, Syntax index, GNU General Public License, Top
@unnumbered Concept index

@cindex Index, concepts
@cindex Concepts, index

@printindex cp

@c =========================================================================
@c Syntax Index (tindex+findex)
@c =========================================================================

@node Syntax index,  , Concept index, Top
@unnumbered Syntax index

@cindex Index, syntax
@cindex Syntax, index
@cindex Keywords, index

@printindex tp

@bye
