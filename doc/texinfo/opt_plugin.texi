@ftable @code
@item Plugin(CutGrid)
Plugin(CutGrid) cuts a 3D view with a rectangular
grid defined by the 3 points (`X0',`Y0',`Z0') (origin),
(`X1',`Y1',`Z1') (axis of U) and (`X2',`Y2',`Z2') (axis
of V). The number of points along U and V is set
with the options `nPointsU' and `nPointsV'. If
`iView' < 0, the plugin is run on the current view.

Plugin(CutGrid) creates one new view.

Numeric options:
@table @code
@item X0
Default value: @code{-1}
@item Y0
Default value: @code{-1}
@item Z0
Default value: @code{0}
@item X1
Default value: @code{-1}
@item Y1
Default value: @code{0}
@item Z1
Default value: @code{0}
@item X2
Default value: @code{0}
@item Y2
Default value: @code{-1}
@item Z2
Default value: @code{0}
@item nPointsU
Default value: @code{20}
@item nPointsV
Default value: @code{20}
@item iView
Default value: @code{-1}
@end table

@item Plugin(CutMap)
Plugin(CutMap) extracts the isovalue surface of
value `A' from the view `iView' and draws the
`dTimeStep'-th value of the view `dView' on this
isovalue surface. If `iView' < 0, the plugin is
run on the current view. If `dTimeStep' < 0, the
plugin uses, for each time step in `iView', the
corresponding time step in `dView'. If `dView'
< 0, the plugin uses `iView' as the value source.

Plugin(CutMap) creates (at most) as many views
as there are time steps in `iView'.

Numeric options:
@table @code
@item A
Default value: @code{1}
@item dTimeStep
Default value: @code{-1}
@item dView
Default value: @code{-1}
@item iView
Default value: @code{-1}
@end table

@item Plugin(CutParametric)
Plugin(CutParametric) cuts the scalar view `iView'
with the parametric function (`X'(u), `Y'(u), `Z'(u)),
using `nPointsU' values of the parameter u in
[`minU', `maxU']. If `iView' < 0, the plugin is run
on the current view.

Plugin(CutParametric) creates one new view.

String options:
@table @code
@item X
Default value: @code{"0 + 1 * Cos(u)"}
@item Y
Default value: @code{"0 + 1 * Sin(u)"}
@item Z
Default value: @code{"0"}
@end table
Numeric options:
@table @code
@item minU
Default value: @code{0}
@item maxU
Default value: @code{6.28319}
@item nPointsU
Default value: @code{360}
@item iView
Default value: @code{-1}
@end table

@item Plugin(CutPlane)
Plugin(CutPlane) cuts the view `iView' with
the plane `A'*X + `B'*Y + `C'*Z + `D' = 0. If
`iView' < 0, the plugin is run on the current
view.

Plugin(CutPlane) creates one new view.

Numeric options:
@table @code
@item A
Default value: @code{1}
@item B
Default value: @code{0}
@item C
Default value: @code{0}
@item D
Default value: @code{-0.01}
@item iView
Default value: @code{-1}
@end table

@item Plugin(CutSphere)
Plugin(CutSphere) cuts the view `iView' with the
sphere (X-`Xc')^2 + (Y-`Yc')^2 + (Z-`Zc')^2 = `R'^2.
If `iView' < 0, the plugin is run on the current
view.

Plugin(CutSphere) creates one new view.

Numeric options:
@table @code
@item Xc
Default value: @code{0}
@item Yc
Default value: @code{0}
@item Zc
Default value: @code{0}
@item R
Default value: @code{0.25}
@item iView
Default value: @code{-1}
@end table

@item Plugin(DecomposeInSimplex)
Plugin(DecomposeInSimplex) decomposes all
non-simplectic elements (quadrangles, prisms
pyramids, hexahedra) in the view `iView' into
simplices (triangles, tetrahedra). If `iView' < 0,
the plugin is run on the current view.

Plugin(DecomposeInSimplex) is executed
in-place.

Numeric options:
@table @code
@item iView
Default value: @code{-1}
@end table

@item Plugin(DisplacementRaise)
Plugin(DisplacementRaise) transforms the
coordinates of the elements in the view `iView'
using the vectorial values (the displacements)
stored in the `dTimeStep'-th time step of the
view `dView'. If `iView' < 0, the plugin is
run on the current view. If `dView' < 0, the
plugin looks for the displacements in the
view located just after `iView' in the view
list.

Plugin(DisplacementRaise) is executed in-place.

Numeric options:
@table @code
@item Factor
Default value: @code{1}
@item dTimeStep
Default value: @code{0}
@item dView
Default value: @code{-1}
@item iView
Default value: @code{-1}
@end table

@item Plugin(Evaluate)
Plugin(Evaluate) sets the `Component'-th
component of the `TimeStep'-th time step
in the view `iView' to the expression
`Expression'. In addition to the usual
mathematical functions (Exp, Log, Sqrt, Sin,
Cos, Fabs, etc.) and operators (+, -, *, /, ^),
`Expression' can contain the symbols x, y, z
and v, which represent the three spatial
coordinates and the value of the field,
respectively. If `iView' < 0, the plugin is run
on the current view.

Plugin(Evaluate) is executed in-place.

String options:
@table @code
@item Expression
Default value: @code{"0.01*(Fabs(Sin(30*y)*Fabs(Cos(30*x)))+0.3)"}
@end table
Numeric options:
@table @code
@item TimeStep
Default value: @code{0}
@item Component
Default value: @code{0}
@item iView
Default value: @code{-1}
@end table

@item Plugin(Extract)
Plugin(Extract) extracts a combination of
components from the view `iView'. If
`Expression1' or `Expression2' is empty, the
plugin creates a scalar view using
`Expression0'; otherwise the plugin creates
a vector view. In addition to the usual
mathematical functions (Exp, Log, Sqrt, Sin,
Cos, Fabs, etc.) and operators (+, -, *, /, ^),
the expressions can contain the symbols v0,
v1, v2, ..., vn, which represent the n
components of the field. If `iView' < 0, the
plugin is run on the current view.

Plugin(Extract) creates one new view.

String options:
@table @code
@item Expression0
Default value: @code{"v0"}
@item Expression1
Default value: @code{""}
@item Expression2
Default value: @code{""}
@end table
Numeric options:
@table @code
@item iView
Default value: @code{-1}
@end table

@item Plugin(Skin)
Plugin(Skin) extracts the skin (the boundary) of
the view `iView'. If `iView' < 0, the plugin is run
on the current view.

Plugin(Skin) creates one new view.

Numeric options:
@table @code
@item iView
Default value: @code{-1}
@end table

@item Plugin(Smooth)
Plugin(Smooth) averages the values at the nodes
of the scalar view `iView'. If `iView' < 0, the
plugin is run on the current view.

Plugin(Smooth) is executed in-place.

Numeric options:
@table @code
@item iView
Default value: @code{-1}
@end table

@item Plugin(SphericalRaise)
Plugin(SphericalRaise) transforms the
coordinates of the elements in the view `iView'
using the values associated with the
`TimeStep'-th time step. Instead of elevating
the nodes along the X, Y and Z axes as in
View[`iView'].RaiseX, View[`iView'].RaiseY
and View[`iView'].RaiseZ, the raise is applied
 along the radius of a sphere centered at (`Xc',
`Yc', `Zc'). If `iView' < 0, the plugin is run
on the current view.

Plugin(SphericalRaise) is executed in-place.

Numeric options:
@table @code
@item Xc
Default value: @code{0}
@item Yc
Default value: @code{0}
@item Zc
Default value: @code{0}
@item Raise
Default value: @code{1}
@item TimeStep
Default value: @code{0}
@item iView
Default value: @code{-1}
@end table

@item Plugin(StreamLines)
Plugin(StreamLines) computes stream lines
from a vector view `iView' and optionally
interpolates the scalar view `dView' on the
resulting stream lines. It takes as input a
grid defined by the 3 points (`X0',`Y0',`Z0')
(origin), (`X1',`Y1',`Z1') (axis of U) and
(`X2',`Y2',`Z2') (axis of V). The number of points
that are going to be transported along U and V is
set with the options `nPointsU' and `nPointsV'.
Then, we solve the equation DX(t)/dt = V(x,y,z)
with X(t=0) chosen as the grid and V(x,y,z)
interpolated on the vector view. The timestep and
the maximum number of iterations are set with
the options `MaxIter' and `DT'. The time stepping
scheme is a RK44. If `iView' < 0, the plugin is run
on the current view.

Plugin(StreamLines) creates one new view. This
view contains multi-step vector points if `dView'
< 0, or single-step scalar lines if `dView' >= 0.

Numeric options:
@table @code
@item X0
Default value: @code{2.39}
@item Y0
Default value: @code{0.445}
@item Z0
Default value: @code{0}
@item X1
Default value: @code{2.39}
@item Y1
Default value: @code{0.94}
@item Z1
Default value: @code{0}
@item X2
Default value: @code{2.39}
@item Y2
Default value: @code{0.445}
@item Z2
Default value: @code{1}
@item nPointsU
Default value: @code{20}
@item nPointsV
Default value: @code{1}
@item MaxIter
Default value: @code{100}
@item DT
Default value: @code{0.1}
@item dView
Default value: @code{-1}
@item iView
Default value: @code{-1}
@end table

@item Plugin(Transform)
Plugin(Transform) transforms the coordinates of
the nodes of the view `iView' by the matrix
[`A11' `A12' `A13']
[`A21' `A22' `A23']
[`A31' `A32' `A33'].
If `iView' < 0, the plugin is run on the current
view.

Plugin(Transform) is executed in-place.

Numeric options:
@table @code
@item A11
Default value: @code{1}
@item A12
Default value: @code{0}
@item A13
Default value: @code{0}
@item A21
Default value: @code{0}
@item A22
Default value: @code{1}
@item A23
Default value: @code{0}
@item A31
Default value: @code{0}
@item A32
Default value: @code{0}
@item A33
Default value: @code{1}
@item iView
Default value: @code{-1}
@end table

@item Plugin(Triangulate)
Plugin(Triangulate) triangulates the points
in the scalar view `iView', assuming that all
the points belong to a surface that can be
univoquely projected into a plane. If `iView'
< 0, the plugin is run on the current view.

Plugin(Triangulate) creates one new view.

Numeric options:
@table @code
@item iView
Default value: @code{-1}
@end table

@end ftable
