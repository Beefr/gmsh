/* --------------------------------------------------------------------------
    This is a sample GetDP problem definition file                           

    This file includes the file 'Magnetostatics.pro'

    (C) 1998 P. Dular, C. Geuzaine
   -------------------------------------------------------------------------- */

/* 
   To solve the problem
   with scalar potential, type 'getdp test -pre MagSta_phi -cal -pos phi'
   with vector potential, type 'getdp test -pre MagSta_a -cal -pos a'
*/

Group {
  
  /* The numbers correspond to physical regions defined in 'core.geo' (the input 
     to the GMSH meshing tool) */
  
  Air     = Region[ 102 ];
  AirInf  = Region[ 101 ];
  Core    = Region[ 106 ];
  Gap     = Region[ 103 ];
  IndP1   = Region[ 111 ];
  IndP2   = Region[ 112 ];
  IndS1   = Region[ 121 ];
  IndS2   = Region[ 122 ];
  Mag     = Region[ 104 ];

  Domain     = Region[ {Air, AirInf, Core, Mag, Gap, IndP1, IndP2, IndS1, IndS2} ] ;
  Domain_Inf = Region[ AirInf ] ;
  Domain_S   = Region[ {/*IndP1, IndP2*/} ] ;
  Domain_M   = Region[ {Mag} ] ;

  DefineConstant[Val_Rint = {0.2, Path "1Geometry/1"},
                 Val_Rext = {0.3, Path "1Geometry/2"}];
}

Function {

  mu0     = 4.e-7 * Pi ;
  DefineConstant[ murCore = {10., Path "2Materials"} ];
  DefineConstant[ murMag = {1, Path "2Materials"} ];
  If(murCore == 100)
    DefineConstant[ SimplifiedModel = {0, Choices{0, 1}} ];
  EndIf

  nu [ Region[{Air, IndP1, IndP2, IndS1, IndS2, AirInf, Gap}] ]  = 1. / mu0 ;
  nu [ Core ]  = 1. / (murCore * mu0) ;
  nu [ Mag ]   = 1. / (murMag * mu0) ;

  mu [ Region[{Air, IndP1, IndP2, IndS1, IndS2, AirInf, Gap}] ]  = mu0 ;
  mu [ Core ]  = murCore * mu0 ;
  mu [ Mag ]   = murMag * mu0 ;

  DefineConstant[ Hc = {920000, ShortHelp "Coercive H field", Path "3Constraints"} ];
  hc [ Mag ]   = Vector[0., Hc, 0.] ;

  Itot = 4737;
  Surf = 0.03*0.002 ;

  js [ IndP1 ] = Vector[0, 0, Itot/Surf] ;
  js [ IndP2 ] = Vector[0, 0, -Itot/Surf] ;
}

Jacobian {
  { Name JVol ;
    Case { 
      { Region Domain_Inf ; Jacobian VolSphShell{Val_Rint, Val_Rext} ; }
      { Region All ;        Jacobian Vol ; }
    }
  }
}

onelab.number FormulationA.Default(1); 
onelab.iftrue(FormulationA)
  onelab.include(Formulation_a.pro)
onelab.else
  onelab.include(Formulation_phi.pro)
onelab.endif

