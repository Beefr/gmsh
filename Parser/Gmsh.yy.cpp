#line 2 "Gmsh.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/gmsh/Parser/Gmsh.yy.cpp,v 1.224 2005-01-02 17:46:09 geuzaine Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
static yyconst short int yy_accept[1085] =
    {   0,
        0,    0,  214,  212,    1,    1,  212,    5,  212,  212,
        6,  212,  212,  212,  212,  212,  207,   18,    2,  212,
       13,  212,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  212,  212,    0,    0,   26,  206,   22,   16,   23,
       14,   24,   15,    0,  209,    0,    0,    0,    0,    3,
        4,   17,   20,  208,  207,    0,   28,   25,   29,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,   77,
       76,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,   92,  211,  211,
      211,  211,  211,  211,  211,  140,  143,  128,  125,  134,
      137,  131,  146,  211,  211,  211,  211,  211,  211,  211,
      149,  150,  142,  145,  130,  211,  127,  136,  211,  139,
      133,  148,  211,  211,  211,  211,  211,  141,  144,  129,
      126,  135,  138,  132,  147,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,   21,   27,    0,    0,   19,
        0,  158,  159,  160,  161,  208,    0,    0,  210,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,   47,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
       60,  211,  211,  211,  211,  211,  211,   71,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,   83,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  106,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  119,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,    0,    0,    0,  209,    0,    0,
      208,  211,  211,  211,  211,   30,  211,  211,  211,   32,
       34,  211,  211,  211,  211,  211,   40,  211,  211,  211,
      211,  211,  211,   55,  211,   44,  211,  211,  211,  211,
      211,  211,   46,  176,  211,  211,  211,   59,  211,  211,
      211,    0,  211,  211,  211,  211,   67,  211,  211,  211,
       68,  211,   70,  211,  211,  211,  211,   74,  211,  211,

        0,  211,  211,  170,  211,  211,   81,  211,   82,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  103,  211,  211,  211,  211,
      211,  114,  107,  211,  211,  105,  211,  211,  211,  211,
      152,  211,  211,  118,  211,  211,  211,  211,  211,  211,
      211,  211,  124,  211,  211,  211,  211,  201,   10,    9,
        8,  211,   11,   12,  211,  211,  211,  211,    0,    0,
        0,  208,  211,  211,  211,  211,  211,  211,  211,   36,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,   52,  211,  211,  211,  211,

      211,  211,  211,  211,    0,  211,  211,  211,   66,  211,
      211,  211,   69,  211,  211,  211,  211,   75,  211,    0,
      211,   79,  211,  211,   84,  211,  211,  211,  211,   89,
      211,   90,  174,  211,  211,  211,   93,  211,   94,   95,
      211,  211,  211,  211,  211,  102,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  121,  211,  211,  211,  122,
      211,  211,  211,  211,  211,  211,  198,  211,  211,  200,
      205,  211,    0,    0,  211,  211,  211,  211,   31,   33,
       35,  211,  211,  211,   39,  211,   42,  211,  189,  211,
      211,  211,  211,  211,  211,   49,  211,  211,  211,  211,

      211,   56,   57,  211,  211,  211,  211,    0,  182,  211,
      211,   65,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  175,  211,    0,  211,   85,   80,  211,  211,  211,
       86,  211,  211,  211,  211,   99,   98,  211,  211,  104,
      101,  211,  108,  211,  112,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  171,  211,  123,  211,  211,  211,
        7,  199,  197,    0,    0,  211,  211,  211,  211,   37,
      211,   41,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,   45,   51,  211,  211,  211,  211,  165,
        0,   62,  211,  211,   63,  211,  211,  211,  211,  211,

      211,  211,  211,  211,    0,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  111,  211,  109,  211,
      211,  211,  211,  211,  211,  120,  211,  211,  202,  211,
        0,    0,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,    0,   61,   64,  211,  211,  211,  211,  211,
       72,  211,   73,  211,    0,  211,  211,   87,   88,  211,
      211,  211,   91,  211,  211,  211,  211,  110,  211,  211,
      211,  211,  211,  211,  203,  204,    0,    0,  211,  211,
      211,  211,   38,  211,  211,  211,  211,  211,  211,  211,

      211,  211,   50,  211,  172,   58,  211,  164,    0,  211,
      211,  211,  178,  211,  211,  211,    0,   78,  211,  211,
      211,  211,  211,  100,  211,  113,  211,  211,  211,  117,
      211,  211,    0,    0,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,   54,  211,   53,
      163,    0,  168,  211,  211,  211,  211,  211,    0,  211,
      211,  211,   97,  211,  211,  211,  211,  211,  211,  211,
        0,    0,  211,  211,  211,  211,  211,  211,  211,   43,
      211,  211,  211,  211,  211,  211,    0,  211,  211,  177,
      211,  211,    0,  211,  211,  211,   96,  211,  211,  211,

      116,  211,  211,  157,    0,  157,  211,  211,  211,  211,
      211,  211,  211,  183,  211,  211,  211,  211,    0,  211,
      211,  211,  211,  180,  211,  211,  211,  211,  211,  211,
      211,  166,  156,  211,  169,  156,  211,  211,  211,  211,
      211,  211,  211,  211,    0,  211,  211,  191,  211,  211,
      162,  211,  211,  211,  190,  115,  211,  211,  211,  211,
      211,  211,  211,  211,   48,    0,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  153,  193,  187,
      211,    0,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  181,  167,  179,  211,  211,

      211,  211,  188,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  173,  211,  211,  211,  211,  211,
      211,  194,  211,  211,  211,  211,  211,  186,  211,  185,
      211,  211,  211,  211,  211,  211,  151,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  192,  211,  211,  211,  211,  211,
      195,  211,  211,  155,  211,  211,  211,  211,  211,  211,
      154,  211,  211,  211,  211,  211,  211,  211,  211,  196,
      211,  211,  184,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   33,
        1,   49,    1,    1,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   33,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,   76,    1,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[1090] =
    {   0,
        0,    0, 1349,   52,   53, 1350,   58,   55,   72,   75,
       59,   69,   82,   83,  106,  116,  129,   67,   84,  108,
      114,  137,  127,  122,  173,  143,  192,  190,  157,  212,
      220,   89,  144,  237,  235,  156,  241,  254,  265,  310,
      369,  135,  411,  189,  224,  246,  240,  267,  165,  280,
      284,  199,  281, 1310, 1310, 1350,  345, 1350, 1350, 1350,
     1350, 1350, 1350, 1334,  374, 1333, 1332,   94, 1331, 1350,
     1350, 1350, 1350,  407,  449,  356, 1350, 1350, 1350,    0,
     1304, 1296, 1303, 1307, 1274, 1284, 1277,  263, 1270, 1292,
     1258, 1262, 1269, 1289, 1288, 1290,  153, 1292,  107, 1267,

     1274, 1257,  265, 1280, 1281, 1260, 1259, 1268, 1253, 1287,
     1281, 1288, 1253, 1259,  180, 1286, 1276, 1258, 1245, 1244,
     1240, 1243, 1267, 1235, 1279, 1248, 1236, 1257, 1261,    0,
     1229, 1233, 1259, 1221, 1231, 1230,   43, 1255, 1259, 1236,
     1222, 1256, 1233, 1262, 1247, 1217, 1209,    0,   86,  134,
       53, 1219,  109, 1212, 1219, 1255,    0,    0,    0,    0,
        0,    0,    0, 1214, 1214,  233, 1209, 1208, 1207, 1211,
        0,    0,    0, 1236,    0, 1230,    0,    0, 1238,    0,
        0,    0, 1206, 1214,  219, 1208,  232,    0,    0,    0,
        0,    0,    0,    0,    0, 1205, 1196, 1210, 1210, 1198,

     1189, 1193, 1190, 1197, 1190, 1350, 1350, 1219, 1213, 1350,
      468, 1350, 1350, 1350, 1350,  473,  482,  454,  491, 1217,
     1229, 1210, 1209, 1182,  304, 1186, 1185, 1180, 1185, 1206,
     1185, 1180, 1177, 1198, 1214, 1197, 1199, 1205, 1204, 1174,
     1172, 1172, 1165, 1178, 1175, 1165,  286, 1170, 1203, 1198,
     1170, 1173, 1151, 1161, 1193, 1188,   72, 1160,  191, 1149,
        0, 1150, 1188, 1187, 1146, 1149, 1158,    0, 1158, 1174,
     1164, 1181, 1152, 1142, 1177, 1193, 1148, 1133, 1173, 1145,
     1142, 1143, 1182, 1131, 1163, 1144, 1123, 1140, 1163, 1135,
     1152, 1161, 1136, 1118, 1122, 1127, 1120, 1127, 1118, 1123,

     1125, 1114, 1107, 1125, 1120, 1135, 1101, 1114, 1112, 1111,
     1100,  317, 1112, 1105, 1138, 1127, 1128, 1105, 1111, 1098,
      286, 1097, 1116, 1115, 1087, 1098,  326, 1100, 1089,  373,
     1091, 1097, 1092, 1081, 1106, 1109,  496,  501,  515,  506,
      520, 1104, 1109, 1106, 1128,    0, 1079, 1083, 1090,    0,
     1124, 1088, 1079, 1102, 1081, 1081,    0, 1106, 1098, 1104,
     1093, 1104, 1092,    0, 1058,    0, 1076, 1065, 1058, 1057,
     1064, 1061,    0,    0, 1095, 1051, 1050,    0, 1059, 1067,
     1077, 1083, 1086, 1048, 1048, 1055,    0, 1040, 1059, 1058,
        0, 1040,    0, 1037, 1077, 1053, 1075,    0, 1033, 1060,

     1085, 1032, 1030,    0, 1030, 1027,    0, 1081,    0, 1065,
      323, 1032, 1024, 1054, 1023, 1061, 1044, 1025, 1027, 1030,
     1025, 1014, 1015, 1012, 1013,    0, 1017, 1011, 1008, 1022,
     1047,    0,    0, 1011, 1010,    0, 1021, 1004, 1019, 1014,
        0, 1036, 1031,    0,  992,  997, 1001, 1001, 1005, 1023,
     1032,  997,    0, 1007,  993,  992,  986,    0,    0,    0,
        0,  999,    0,    0, 1002,  985,  997,  995, 1017, 1020,
      525,  530, 1015, 1020, 1017,  994,  975,  979,  978,    0,
      987,  976, 1006,  970,  337,  994, 1007, 1007,  991, 1008,
     1004,  969,  976,  973,  972,  983,  962,  969,  980,  967,

      966,  967,  371,  977,  976,  991,  309,  949,    0,  961,
      378,  356,    0,  955,  970,  951,  970,    0,  971,  995,
      940,    0,  939,  948,    0,  967,  953,  944,  938,    0,
      958,    0,    0,  974,  944,  945,    0,  934,    0,    0,
      940,  940,  942,  930,  937,    0,  941,  935,  920,  919,
      932,  933,  916,  957,  955,    0,  186,  925,  926,    0,
      939,  932,  923,  924,  912,  914,    0,  917,  912,    0,
        0,  899,  934,  944,  932,  940,  941,  927,    0,    0,
      949,  895,  908,  925,    0,  898,    0,  928,    0,  909,
      926,  922,  915,  894,  885,    0,  890,  901,  896,  877,

      917,    0,    0,  897,  903,  908,  917,  906,    0,  359,
      884,    0,  887,  903,  896,  911,  914,  911,  872,  894,
      864,    0,  895,  915,  876,    0,    0,  895,  866,  853,
        0,  899,  883,  856,  873,    0,    0,  855,  863,    0,
        0,  894,    0,  864,    0,  863,  863,  850,  892,  888,
      855,  862,  842,  857,    0,  860,    0,  854,  843,  848,
        0,    0,    0,  862,  873,  860,  876,  870,  866,    0,
      836,    0,  871,  841,  873,  854,  852,  844,  861,  851,
      836,  837,  837,    0,    0,  850,  818,  845,  847,    0,
      873,    0,  815,  829,    0,  837,  837,  837,  842,  846,

      813,  843,  819,  838,  858,  818,  843,  809,  813,  840,
      816,  798,  803,  795,  799,  833,    0,  801,    0,  785,
      823,  807,  793,  786,  792,    0,  811,  778,    0,  790,
      101,  175,  192,  194,  248,  278,  250,  269,  309,  303,
      324,  329,  339,  373,  351,  352,  372,  367,  393,  380,
      387,  406,  432,    0,    0,  411,  421,  426,  428,  429,
        0,  432,    0,  436,  456,  405,  426,    0,    0,  430,
      454,  435,    0,  436,  447,  474,  454,    0,  499,  524,
      492,  497,  502,  516,    0,    0,  511,  524,  513,  533,
      527,  534,    0,  535,  499,  514,  537,  516,  523,  544,

      507,  511,    0,  516,    0,    0,  544,    0,  559,  547,
      534,  535,    0,  542,  529,  537,  570,    0,  540,  555,
      556,  532,  522,    0,  555,    0,  546,  545,  521,    0,
      522,  560,  551,  566,  553,  555,  573,  570,  571,  556,
      557,  529,  564,  569,  579,  565,  572,    0,  540,    0,
        0,  592,    0,  560,  579,  588,  571,  582,  599,  578,
      590,  589,    0,  556,  583,  577,  581,  568,  565,  588,
        0,  599,  626,  601,  614,  614,  606,  602,  603,    0,
      612,  616,  608,  624,  604,  586,  642,  632,  619,    0,
      631,  622,  646,  627,  633,  632,    0,  633,  625,  622,

        0,  604,  626, 1350,    0,    0,  631,  643,  703,  644,
      628,  645,  644,    0,  636,  654,  637,  621,  664,  644,
      640,  641,  648, 1350,  654,  659,  651,  646,  661,  663,
      629,    0, 1350,  643,    0,    0,  657,  667,  672,  660,
      653,  673,  656,  648,  695,  673,  686,    0,  669,  693,
        0,  689,  695,  704,    0,    0,  687,  687,  681,  706,
      690,  706,  707,  695,    0,  721,  701,  701,  698,  691,
      699,  705,  718,  714,  696,  701,  720,    0,  699,    0,
      721,  736,  726,  717,  729,  731,  725,  721,  731,  736,
      744,  730,  713,  722,  741, 1350,    0,    0,  735,  726,

      730,  719,    0,  731,  744,  729,  727,  746,  749,  748,
      749,  741,  740,  754,    0,  752,  752,  755,  758,  751,
      749,  739,  762,  741,  742,  750,  758,    0,  767,    0,
      754,  758,  757,  765,  769,  773,    0,  771,  762,  776,
      768,  756,  770,  784,  781,  771,  773,  778,  770,  775,
      773,  775,  774,  781,    0,  791,  792,  793,  780,  785,
        0,  787,  783,    0,  783,  784,  800,  787,  806,  794,
        0,  789,  790,  802,  811,  798,  794,  801,  807,    0,
      802,  804,    0, 1350,  839,  842,  845,  848,  851
    } ;

static yyconst short int yy_def[1090] =
    {   0,
     1084,    1, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084,
     1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1084, 1084, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1086, 1084, 1087, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085,
     1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1084, 1088, 1085, 1085, 1085, 1089, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1085,
     1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1084, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085,    0, 1084, 1084, 1084, 1084, 1084
    } ;

static yyconst short int yy_nxt[1428] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   32,
       39,   40,   41,   42,   43,   44,   32,   32,    4,   32,
       32,   32,   32,   32,   45,   46,   32,   32,   32,   32,
       47,   32,   48,   49,   32,   32,   32,   50,   32,   32,
       51,   32,   32,   32,   32,   52,   53,   54,   54,   56,
       54,   58,  382,   54,   54,   57,   57,   57,   57,   57,
       59,   60,   54,   62,   54,   55,   55,   54,   55,  283,

       54,   55,   55,   61,   63,  214,  284,   54,   54,   54,
       55,  299,   55,  383,   81,   55,  300,   64,   55,   65,
       65,   65,   65,   65,   70,   55,   55,   55,   71,   77,
      209,   54,   83,   54,   66,   78,  295,   72,  787,   54,
       74,   54,   75,   75,   75,   75,   75,   81,   67,   68,
       69,   55,   81,   82,   54,  296,   76,   55,   79,   55,
       81,  302,   54,   89,   73,   83,  104,  240,   81,   81,
       83,   90,   55,   84,  105,  241,   91,  303,   83,   85,
       55,   81,   81,   76,  123,   92,   83,   83,  237,  238,
       81,   93,  297,   86,   87,   88,   94,  106,   81,   83,

       83,  107,  186,  788,   95,  298,  132,   96,   83,  108,
       97,  124,  109,  116,   81,   81,   83,   81,  110,  385,
       98,  117,  386,   99,   54,  141,  111,  100,  112,  789,
      101,  102,   83,   83,  203,   83,  103,   81,  260,  125,
      118,  651,   55,  790,  261,   81,  652,  197,  262,   81,
      119,  120,  113,  121,  114,   83,  128,  323,  138,  122,
       81,  129,   81,   83,  115,   81,   81,   83,  133,  320,
      126,   81,  324,  139,  206,  130,  791,  321,   83,   81,
       83,  142,  131,   83,   83,  127,  198,  134,  144,   83,
       81,  135,   81,  309,  145,  136,  199,   83,  140,  310,

      137,  792,  207,  200,  146,   81,   54,  143,   83,   81,
       83,  147,  148,  227,  149,  152,  793,  150,  794,  153,
      151,  201,  245,   83,   55,  246,  247,   83,  154,  347,
      202,  228,  248,  795,  155,   81,  447,  371,  205,  796,
      156,  157,  437,  204,  158,  348,  349,  448,  159,  160,
      372,  161,  162,   83,  797,  438,  798,  163,   57,   57,
       57,   57,   57,  527,  528,  218,  218,  164,  165,  219,
      219,  219,  219,  219,  166,  167,  610,  611,  168,  169,
      799,  454,  616,  170,  171,  172,  455,   65,   65,   65,
       65,   65,  617,  456,   81,  586,  605,  618,  800,  173,

      174,  211,  614,  175,  587,  606,  176,  177,  178,  179,
      180,  181,   83,  692,  801,  615,  182,  693,  802,  183,
      216,  216,  216,  216,  216,  459,  803,  804,  211,  805,
      806,  807,  184,  460,  217,  185,   81,  461,  187,  462,
      463,  188,  189,  464,  808,  190,  809,  810,  811,  191,
      192,  812,  193,  194,   83,  813,  814,  815,  195,  816,
       74,  217,   75,   75,   75,   75,   75,  219,  219,  219,
      219,  219,  817,  818,  196,  819,   76,  337,  337,  820,
      821,  338,  338,  338,  338,  338,  216,  216,  216,  216,
      216,  340,  340,  822,  823,  341,  341,  341,  341,  341,

      339,  824,  825,   76,  219,  219,  219,  219,  219,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  341,
      341,  341,  341,  341,  471,  471,  826,  339,  472,  472,
      472,  472,  472,  341,  341,  341,  341,  341,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  827,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  838,  839,
      840,  837,  842,  843,  844,  845,  846,  847,  848,  849,
      850,  851,  852,  853,  854,  855,  841,  856,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,  877,  878,

      879,  880,  881,  882,  883,  884,  885,  886,  887,  888,
      889,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      899,  900,  901,  902,  903,  905,  904,  904,  907,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  908,
      909,  910,  911,  912,  904,  904,  904,  904,  904,  913,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  932,  934,
      935,  937,  938,  939,  904,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  949,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961,  962,  963,  964,

      965,  904,  904,  933,  933,  966,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  967,  968,  969,  970,
      971,  933,  933,  933,  933,  933,  972,  973,  974,  975,
      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  990,  991,  992,  993,  994,  995,
      996,  933,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,  933,  933,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,

     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083,   80,  904,  786,  904,  906,  785,  906,  933,  784,
      933,  936,  783,  936,  782,  781,  780,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  770,  769,  768,  767,
      766,  765,  764,  763,  762,  761,  760,  759,  758,  757,
      756,  755,  754,  753,  752,  751,  750,  749,  748,  747,
      746,  745,  744,  743,  742,  741,  740,  739,  738,  737,

      736,  735,  734,  733,  732,  731,  730,  729,  728,  727,
      726,  725,  724,  723,  722,  721,  720,  719,  718,  717,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  699,  698,  697,
      696,  695,  694,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,

      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  613,  612,  609,  608,  607,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  526,  525,  524,  523,  522,  521,  520,

      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  470,  469,  468,
      467,  466,  465,  458,  457,  453,  452,  451,  450,  449,
      446,  445,  444,  443,  442,  441,  440,  439,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,

      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  384,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  346,
      345,  344,  343,  342,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  322,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  308,  307,  306,  305,
      304,  301,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  282,  281,  280,  279,  278,  277,  276,  275,

      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  244,  243,  242,  239,  236,  235,  234,
      233,  232,  231,  230,  229,  226,  225,  224,  223,  222,
      221,  220,  215,  213,  212,  210,  209,  208, 1084,    3,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084
    } ;

static yyconst short int yy_chk[1428] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    5,    7,
        8,   10,  257,    7,   11,    9,    9,    9,    9,    9,
       12,   13,   18,   14,   12,    4,    5,    9,    8,  137,

       10,    7,   11,   13,   14,   68,  137,   13,   14,   19,
       18,  151,   12,  257,   32,    9,  151,   15,   10,   15,
       15,   15,   15,   15,   16,   13,   14,   19,   16,   20,
       68,   15,   32,   20,   15,   21,  149,   16,  731,   21,
       17,   16,   17,   17,   17,   17,   17,   24,   15,   15,
       15,   20,   23,   23,   17,  149,   17,   21,   22,   16,
       42,  153,   22,   24,   16,   24,   26,   99,   26,   33,
       23,   24,   17,   23,   26,   99,   24,  153,   42,   23,
       22,   36,   29,   17,   29,   24,   26,   33,   97,   97,
       49,   24,  150,   23,   23,   23,   25,   26,   25,   36,

       29,   26,   42,  732,   25,  150,   33,   25,   49,   26,
       25,   29,   26,   28,   44,   28,   25,   27,   27,  259,
       25,   28,  259,   25,   52,   36,   27,   25,   27,  733,
       25,   25,   44,   28,   49,   27,   25,   30,  115,   30,
       28,  557,   52,  734,  115,   31,  557,   44,  115,   45,
       28,   28,   27,   28,   27,   30,   31,  187,   35,   28,
       35,   31,   34,   31,   27,   47,   37,   45,   34,  185,
       30,   46,  187,   35,   52,   31,  735,  185,   35,   38,
       34,   37,   31,   47,   37,   30,   45,   34,   38,   46,
       39,   34,   48,  166,   38,   34,   46,   38,   35,  166,

       34,  736,   53,   47,   38,   50,   53,   37,   39,   51,
       48,   38,   38,   88,   38,   39,  737,   38,  738,   39,
       38,   48,  103,   50,   53,  103,  103,   51,   39,  225,
       48,   88,  103,  739,   39,   40,  321,  247,   51,  740,
       40,   40,  312,   50,   40,  225,  225,  321,   40,   40,
      247,   40,   40,   40,  741,  312,  742,   40,   57,   57,
       57,   57,   57,  411,  411,   76,   76,   40,   40,   76,
       76,   76,   76,   76,   40,   40,  507,  507,   40,   40,
      743,  327,  512,   40,   41,   41,  327,   65,   65,   65,
       65,   65,  512,  327,   41,  485,  503,  512,  744,   41,

       41,   65,  511,   41,  485,  503,   41,   41,   41,   41,
       41,   41,   41,  610,  745,  511,   41,  610,  746,   41,
       74,   74,   74,   74,   74,  330,  747,  748,   65,  749,
      750,  751,   41,  330,   74,   41,   43,  330,   43,  330,
      330,   43,   43,  330,  752,   43,  753,  756,  757,   43,
       43,  758,   43,   43,   43,  759,  760,  762,   43,  764,
       75,   74,   75,   75,   75,   75,   75,  218,  218,  218,
      218,  218,  765,  766,   43,  767,   75,  211,  211,  770,
      771,  211,  211,  211,  211,  211,  216,  216,  216,  216,
      216,  217,  217,  772,  774,  217,  217,  217,  217,  217,

      216,  775,  776,   75,  219,  219,  219,  219,  219,  337,
      337,  337,  337,  337,  338,  338,  338,  338,  338,  340,
      340,  340,  340,  340,  339,  339,  777,  216,  339,  339,
      339,  339,  339,  341,  341,  341,  341,  341,  471,  471,
      471,  471,  471,  472,  472,  472,  472,  472,  779,  780,
      781,  782,  783,  784,  787,  788,  789,  790,  791,  792,
      794,  790,  795,  796,  797,  798,  799,  800,  801,  802,
      804,  807,  809,  810,  811,  812,  794,  814,  815,  816,
      817,  819,  820,  821,  822,  823,  825,  827,  828,  829,
      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,

      841,  842,  843,  844,  845,  846,  847,  849,  852,  854,
      855,  856,  857,  858,  859,  860,  861,  862,  864,  865,
      866,  867,  868,  869,  870,  872,  873,  873,  874,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  875,
      876,  877,  878,  879,  873,  873,  873,  873,  873,  881,
      882,  883,  884,  885,  886,  887,  888,  889,  891,  892,
      893,  894,  895,  896,  898,  899,  900,  902,  903,  907,
      908,  910,  911,  912,  873,  913,  915,  916,  917,  918,
      919,  920,  921,  922,  923,  925,  926,  927,  928,  929,
      930,  931,  934,  937,  938,  939,  940,  941,  942,  943,

      944,  873,  873,  909,  909,  945,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  946,  947,  949,  950,
      952,  909,  909,  909,  909,  909,  953,  954,  957,  958,
      959,  960,  961,  962,  963,  964,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  979,  981,
      982,  909,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  999, 1000, 1001, 1002, 1004,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,  909,  909,
     1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1024, 1025, 1026, 1027, 1029, 1031, 1032, 1033, 1034, 1035,

     1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057,
     1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1068, 1069,
     1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081,
     1082, 1085, 1086,  730, 1086, 1087,  728, 1087, 1088,  727,
     1088, 1089,  725, 1089,  724,  723,  722,  721,  720,  718,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  699,  698,  697,
      696,  694,  693,  691,  689,  688,  687,  686,  683,  682,
      681,  680,  679,  678,  677,  676,  675,  674,  673,  671,

      669,  668,  667,  666,  665,  664,  660,  659,  658,  656,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  644,
      642,  639,  638,  635,  634,  633,  632,  630,  629,  628,
      625,  624,  623,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  611,  608,  607,  606,  605,  604,  601,  600,
      599,  598,  597,  595,  594,  593,  592,  591,  590,  588,
      586,  584,  583,  582,  581,  578,  577,  576,  575,  574,
      573,  572,  569,  568,  566,  565,  564,  563,  562,  561,
      559,  558,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  545,  544,  543,  542,  541,  538,  536,  535,  534,

      531,  529,  528,  527,  526,  524,  523,  521,  520,  519,
      517,  516,  515,  514,  510,  508,  506,  505,  504,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  484,  483,  482,  481,
      479,  478,  477,  476,  475,  474,  473,  470,  469,  468,
      467,  466,  465,  462,  457,  456,  455,  454,  452,  451,
      450,  449,  448,  447,  446,  445,  443,  442,  440,  439,
      438,  437,  435,  434,  431,  430,  429,  428,  427,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  410,  408,  406,  405,  403,  402,  401,

      400,  399,  397,  396,  395,  394,  392,  390,  389,  388,
      386,  385,  384,  383,  382,  381,  380,  379,  377,  376,
      375,  372,  371,  370,  369,  368,  367,  365,  363,  362,
      361,  360,  359,  358,  356,  355,  354,  353,  352,  351,
      349,  348,  347,  345,  344,  343,  342,  336,  335,  334,
      333,  332,  331,  329,  328,  326,  325,  324,  323,  322,
      320,  319,  318,  317,  316,  315,  314,  313,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,

      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  267,  266,  265,  264,  263,  262,  260,  258,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,  224,
      223,  222,  221,  220,  209,  208,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  186,  184,  183,  179,
      176,  174,  170,  169,  168,  167,  165,  164,  156,  155,
      154,  152,  147,  146,  145,  144,  143,  142,  141,  140,
      139,  138,  136,  135,  134,  133,  132,  131,  129,  128,

      127,  126,  125,  124,  123,  122,  121,  120,  119,  118,
      117,  116,  114,  113,  112,  111,  110,  109,  108,  107,
      106,  105,  104,  102,  101,  100,   98,   96,   95,   94,
       93,   92,   91,   90,   89,   87,   86,   85,   84,   83,
       82,   81,   69,   67,   66,   64,   55,   54,    3, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Gmsh.l"
#define INITIAL 0
#line 2 "Gmsh.l"
// $Id: Gmsh.yy.cpp,v 1.224 2005-01-02 17:46:09 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "Gmsh.h"
#include "Numeric.h"
#include "Geo.h"
#include "CAD.h"
#include "Gmsh.tab.hpp"

int    yywhere = INFILE;
int    yylineno = 1;

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_ALWAYS_INTERACTIVE 1

#define YY_INPUT(buf,result,max_size)					\
   if ( yy_current_buffer->yy_is_interactive )				\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < max_size &&					\
	       (c = getc( yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;						\
       if ( c == '\n' ){						\
	 buf[n++] = (char) c;						\
	 yylineno++;							\
       }								\
       if ( c == EOF && ferror( yyin ) )				\
	 Msg(FATAL,  "input in flex scanner failed" );			\
       result = n;							\
     }									\
   else if ( ((result = fread( buf, 1, max_size, yyin )) == 0)		\
	     && ferror( yyin ) )					\
     Msg(FATAL,  "input in flex scanner failed" );

#line 1099 "Gmsh.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 80 "Gmsh.l"


#line 1253 "Gmsh.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1085 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1350 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "Gmsh.l"
/* none */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 86 "Gmsh.l"
{parsestring('\"'); return tBIGSTR;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "Gmsh.l"
{parsestring('\''); return tBIGSTR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "Gmsh.l"
{yylval.d = NEWREG(); return tDOUBLE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "Gmsh.l"
{yylval.d = NEWPOINT(); return tDOUBLE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "Gmsh.l"
{yylval.d = NEWLINE(); return tDOUBLE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "Gmsh.l"
{yylval.d = NEWLINE(); return tDOUBLE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "Gmsh.l"
{yylval.d = NEWSURFACE(); return tDOUBLE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "Gmsh.l"
{yylval.d = NEWVOLUME(); return tDOUBLE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tAFFECTPLUS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tAFFECTMINUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAFFECTTIMES;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tAFFECTDIVIDE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tCROSSPRODUCT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tOR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tAND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tPLUSPLUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tMINUSMINUS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tEQUAL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tNOTEQUAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tAPPROXEQUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tLESSOREQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tGREATEROREQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tAcos;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tAcos;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tAsin;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tAsin;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tAtan;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tAtan;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 118 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tAttractor;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tBezier;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tBump;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tBounds;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tBoundingBox;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tCeil;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tCombine;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tCosh;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tCos;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tCircle;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tComplex;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tColor;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tSpline;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tCall;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tDelete;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tDilate;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tDuplicata;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tDraw;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tExp;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tExit;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 155 "Gmsh.l"
return tFabs;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tFloor;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tFmod;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tFor;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tFunction;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tGetValue;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tHide;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tHypot;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tIn;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tIf;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tKnots;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tLength;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 173 "Gmsh.l"
return tLine;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tLoop;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tLog;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tLog10;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tLayers;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tModulo;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 180 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tOrder;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tPi;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tPlane;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 190 "Gmsh.l"
return tPoint;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tProgression;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 192 "Gmsh.l"
return tProgression;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tParametric;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tRotate;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tRuled;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tRand;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tReturn;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tSqrt;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tSin;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tSinh;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tSpline;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tSurface;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tSprintf;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 210 "Gmsh.l"
return tStrCat;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tStrPrefix;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tShow;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tTriangulation;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "Gmsh.l"
return tTanh;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tTan;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tTrimmed;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tToday;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 222 "Gmsh.l"
return tUsing;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tVolume;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tWith;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tScalarPoint;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tVectorPoint;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tTensorPoint;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tScalarLine;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tVectorLine;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 233 "Gmsh.l"
return tTensorLine;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tScalarTriangle;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tVectorTriangle;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tTensorTriangle;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tScalarQuadrangle;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tVectorQuadrangle;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tTensorQuadrangle;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tScalarTetrahedron;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 241 "Gmsh.l"
return tVectorTetrahedron;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 242 "Gmsh.l"
return tTensorTetrahedron;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tScalarHexahedron;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tVectorHexahedron;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 245 "Gmsh.l"
return tTensorHexahedron;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 246 "Gmsh.l"
return tScalarPrism;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 247 "Gmsh.l"
return tVectorPrism;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return tTensorPrism;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 249 "Gmsh.l"
return tScalarPyramid;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 250 "Gmsh.l"
return tVectorPyramid;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 251 "Gmsh.l"
return tTensorPyramid;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 252 "Gmsh.l"
return tText2D;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 253 "Gmsh.l"
return tText3D;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 254 "Gmsh.l"
return tInterpolationScheme;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 255 "Gmsh.l"
return tTime;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 258 "Gmsh.l"
return tCARTESIAN_POINT;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 259 "Gmsh.l"
return tB_SPLINE_SURFACE_WITH_KNOTS;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 260 "Gmsh.l"
return tB_SPLINE_CURVE_WITH_KNOTS;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 261 "Gmsh.l"
return tUNSPECIFIED;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 262 "Gmsh.l"
return tCONTINUOUS;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 263 "Gmsh.l"
return tFALSE;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 264 "Gmsh.l"
return tTRUE;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 265 "Gmsh.l"
return tU;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 266 "Gmsh.l"
return tV;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 267 "Gmsh.l"
return tORIENTED_EDGE;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 268 "Gmsh.l"
return tEDGE_CURVE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 269 "Gmsh.l"
return tEDGE_LOOP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 270 "Gmsh.l"
return tELLIPSE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 271 "Gmsh.l"
return tVERTEX_POINT;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 272 "Gmsh.l"
return tFACE_OUTER_BOUND;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 273 "Gmsh.l"
return tFACE_BOUND;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 274 "Gmsh.l"
return tADVANCED_FACE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 275 "Gmsh.l"
return tLine;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 276 "Gmsh.l"
return tVECTOR;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 277 "Gmsh.l"
return tDIRECTION;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 278 "Gmsh.l"
return tAXIS2_PLACEMENT_3D;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 279 "Gmsh.l"
return tPLANE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 280 "Gmsh.l"
return tHEADER;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 281 "Gmsh.l"
return tDATA;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 282 "Gmsh.l"
return tFILE_SCHEMA;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 283 "Gmsh.l"
return tFILE_NAME;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 284 "Gmsh.l"
return tFILE_DESCRIPTION;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 285 "Gmsh.l"
return tISO;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 286 "Gmsh.l"
return tENDISO;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 287 "Gmsh.l"
return tENDSEC;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 288 "Gmsh.l"
return tCLOSED_SHELL;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 289 "Gmsh.l"
return  tADVANCED_BREP_SHAPE_REPRESENTATION;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 290 "Gmsh.l"
return tMANIFOLD_SOLID_BREP;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 291 "Gmsh.l"
return tCYLINDRICAL_SURFACE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 292 "Gmsh.l"
return tCONICAL_SURFACE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 293 "Gmsh.l"
return tTOROIDAL_SURFACE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 294 "Gmsh.l"
return tCIRCLE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 295 "Gmsh.l"
return tTRIMMED_CURVE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 296 "Gmsh.l"
return tGEOMETRIC_SET;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 297 "Gmsh.l"
return tCOMPOSITE_CURVE_SEGMENT;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 298 "Gmsh.l"
return tCOMPOSITE_CURVE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 299 "Gmsh.l"
return tPRODUCT_DEFINITION;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 300 "Gmsh.l"
return tPRODUCT_DEFINITION_SHAPE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 301 "Gmsh.l"
return tSHAPE_DEFINITION_REPRESENTATION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 303 "Gmsh.l"
return tVertex;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 304 "Gmsh.l"
return tFacet;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 305 "Gmsh.l"
return tNormal;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 306 "Gmsh.l"
return tOuter;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 307 "Gmsh.l"
return tLoopSTL;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 308 "Gmsh.l"
return tEndLoop;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 309 "Gmsh.l"
return tEndFacet;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 310 "Gmsh.l"
{skipline();return tEndSolid;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 311 "Gmsh.l"
{skipline();return tSolid;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 313 "Gmsh.l"
{yylval.d = (double)atoi((char*)(yytext+1)); return tDOUBLE;}
	YY_BREAK
case 207:
#line 316 "Gmsh.l"
case 208:
#line 317 "Gmsh.l"
case 209:
#line 318 "Gmsh.l"
case 210:
YY_RULE_SETUP
#line 318 "Gmsh.l"
{yylval.d = atof((char *)yytext); return tDOUBLE;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 320 "Gmsh.l"
{yylval.c = strsave((char*)yytext); return tSTRING;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 322 "Gmsh.l"
return yytext[0];
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 324 "Gmsh.l"
ECHO;
	YY_BREAK
#line 2392 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1085 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1085 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1084);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 324 "Gmsh.l"


#undef yywrap

int yywrap() {return 1;}

void skipcomments(void){
  int c;

  while (1) {
    while ((c = yyinput()) != '*'){
      if(c == EOF){
        Msg(GERROR, "End of file in commented region");
        return;
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar){
  int c, i;
  char tmp[1024];

  i = 0;
  while ((c = yyinput()) != endchar) {
    if(c == EOF){
      Msg(GERROR, "End of file in string");
      break;
    }
    else if(i >= (int)sizeof(tmp)-1){
      Msg(GERROR, "String too long");
      break;
    }
    else{
      tmp[i++] = (char)c;
    }
  }
  tmp[i] = '\0';
  yylval.c = strsave(tmp);
}

char *strsave(char *ptr){
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline(void){
  int c;
  while ((c = yyinput()) != '\n'){
    if(c == EOF) return;
  }
}

void skip_until(char *skip, char *until){
  int i, nb_skip;
  int l, l_skip, l_until;
  char chars[256];

  nb_skip = 0;

  if(skip)
    l_skip = strlen(skip);
  else
    l_skip = 0;

  l_until = strlen(until);

  while(1){
    while (1){
      chars[0] = yyinput();
      if(chars[0] == (char)EOF){
        Msg(GERROR, "Unexpected end of file");
	return;
      }
      if(chars[0] == until[0]) break;
      if(skip && chars[0] == skip[0]) break;
    }

    l = MAX(l_skip,l_until);
    if(l >= (int)sizeof(chars)){
      Msg(GERROR, "Search pattern too long in skip_until");
      return;
    }
    for(i=1; i<l; i++){
      chars[i] = yyinput();
      if(chars[i] == (char)EOF){
	l = i;
	break;
      }
    }

    if(!strncmp(chars,until,l_until)){
      if(!nb_skip){
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars,skip,l_skip)){
      nb_skip++;
    }
    else{
      for(i=1;i<l-1;i++){
	unput(chars[l-i]);
      }
    }

  }
}

void force_yyflush() { YY_FLUSH_BUFFER; }
