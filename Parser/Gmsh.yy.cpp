#line 2 "Gmsh.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/gmsh/Parser/Gmsh.yy.cpp,v 1.25 2000-12-07 09:21:34 geuzaine Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 176
#define YY_END_OF_BUFFER 177
static yyconst short int yy_accept[966] =
    {   0,
        0,    0,  177,  175,    1,    1,  175,    5,  169,  175,
        6,  175,  175,  175,  175,  175,  170,   14,    2,  175,
        9,  175,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  175,  175,    0,    0,   22,  169,   18,   12,   19,
       10,   20,   11,    0,  172,    0,    0,    0,    0,    3,
        4,   13,   16,  171,  170,    0,   24,   21,   25,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,   73,  174,  174,  174,  174,  174,  174,  174,  111,
      114,  105,  108,  174,  174,  174,  174,  174,  174,  174,
      174,  113,  174,  116,  174,  107,  110,  174,  174,  174,
      174,  112,  115,  106,  109,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,   17,   23,    0,    0,
       15,    0,  122,  123,  124,  125,  171,    0,    0,  173,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,   40,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,   52,
      174,  174,  174,  174,  174,  174,  100,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,   66,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
       84,  174,  174,  174,  174,  174,  174,  174,   94,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,    0,    0,    0,  172,    0,
        0,  171,  174,   26,  174,  174,  174,  174,  174,  174,
       28,   30,  174,  174,  174,  174,   35,  174,  174,  174,
      174,  174,  174,  174,   38,  174,  174,  174,  174,  174,
       39,  139,  174,  174,  174,   50,  174,  174,  174,    0,
      174,  174,  174,  103,  174,  174,  174,   57,  174,   59,
      174,  174,  174,    0,  174,  174,  133,  174,  174,   64,
      174,   65,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,   86,  174,   85,  174,  174,   83,  174,  174,  174,

      174,   93,  174,  174,  174,  174,  174,   97,  174,   99,
      174,  174,  174,  174,  164,    8,  174,  174,  174,  174,
      174,    0,    0,    0,  171,  174,  174,  174,  174,  174,
      174,  174,   32,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,   45,  174,  174,
      174,  174,  174,  174,  174,    0,  174,  174,  174,  174,
      174,  174,   58,  174,  174,   60,    0,  174,   62,  174,
      174,   67,  174,  104,  174,   70,  174,   71,  137,  174,
      174,  174,   74,   75,   76,  174,  174,  174,  174,   82,
      174,  174,   51,  174,  174,  174,  174,  174,  174,  174,

       96,  174,  174,  174,  174,  174,  174,  161,  174,  174,
      163,  168,  174,    0,    0,  174,  174,  174,  174,   27,
       29,   31,  174,  174,  174,   37,  174,  152,  174,  174,
      174,  174,  174,  174,   42,  174,  174,  174,   47,   48,
      174,  174,  174,  174,    0,  145,  174,  174,  101,  174,
      174,  174,  174,  174,  174,  174,  138,    0,  174,   68,
       63,  174,   69,  174,  174,  174,  174,   79,  174,  174,
       81,  174,   90,   87,  174,  174,  174,  174,  174,  174,
      174,  134,  174,   98,  174,  174,  174,    7,  162,  160,
        0,    0,  174,  174,  174,  174,   33,  174,   36,  174,

      174,  174,  174,  174,  174,  174,  174,  174,   44,  174,
      174,  174,  174,   56,    0,  174,  174,   54,  174,  174,
      174,  174,  174,  174,    0,   61,  174,  174,  174,  174,
      174,  174,  174,  174,   88,  174,  174,  174,  174,  174,
       95,  174,  174,  165,  174,    0,    0,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,    0,   53,   55,  174,  174,
      174,  174,  174,  174,    0,  174,  174,  174,  174,   72,
      174,  174,  174,   89,  174,  174,  174,  174,  174,  166,
      167,    0,    0,  174,  174,  174,  174,   34,  174,  174,

      174,  174,  174,  174,  174,  174,   43,  135,   49,  174,
      128,    0,  174,  174,  174,  141,  174,  174,    0,  174,
      174,  174,  174,  174,   80,  174,  174,  174,  174,   92,
      174,    0,    0,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,   46,  174,  127,    0,  131,
      174,  174,  174,  174,    0,  174,  174,  174,   78,  174,
      174,  174,  174,  174,  174,    0,    0,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
        0,  174,  174,  140,  174,    0,  174,  174,  174,   77,
      174,  174,  174,   91,  174,  121,    0,  121,  174,  174,

      174,  174,  174,  174,  174,  146,  174,  174,  174,  174,
        0,  174,  174,  174,  143,  174,  174,  174,  174,  174,
      174,  129,  120,  174,  132,  120,  174,  174,  174,  174,
      174,  174,  174,  174,    0,  174,  174,  154,  174,  126,
      174,  174,  174,  153,  174,  174,  174,  174,  174,  174,
      174,  174,   41,    0,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  117,  156,  150,  174,    0,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  144,  130,  142,  174,  174,  174,  151,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  136,  174,

      174,  174,  174,  174,  157,  174,  174,  174,  174,  174,
      149,  148,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  155,  174,  174,  174,  174,
      174,  158,  174,  174,  119,  174,  174,  174,  174,  174,
      174,  118,  174,  174,  174,  174,  174,  174,  174,  174,
      159,  174,  174,  147,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
        1,   48,    1,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   33,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   33,    1,   73,    1,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1
    } ;

static yyconst short int yy_base[971] =
    {   0,
        0,    0, 1227,   49,   50, 1228,   55,   52,   68,   73,
       53,   65,   78,   79,  111,   93,  130,   71,   77,   87,
      109,  117,  123,  131,  176,  138,  178,  135,  181,  184,
      175,   81,  125,  203,  216,  205,  215,  234,  221,  274,
      309,  202,  269,  224,  245,  236,  259,  302,  255,  277,
      264,  293,  332, 1188, 1188, 1228,  353, 1228, 1228, 1228,
     1228, 1228, 1228, 1212,  362, 1211, 1210,  126, 1209, 1228,
     1228, 1228, 1228,  367,  382,  391, 1228, 1228, 1228,    0,
       72, 1176, 1182, 1186, 1165, 1158,  115, 1177, 1151, 1172,
     1144, 1151, 1170, 1169, 1170,   81, 1172, 1139, 1147, 1154,

     1138,  354, 1160, 1161, 1141, 1140, 1148, 1134, 1166, 1160,
     1167, 1134, 1139,  267, 1165, 1155, 1138, 1126, 1125, 1121,
     1147, 1160, 1120, 1144, 1129, 1118, 1142, 1106, 1116, 1115,
      115, 1138, 1109, 1120, 1107, 1139, 1117, 1145, 1130, 1102,
     1094,    0, 1115,  117,  121, 1112, 1096, 1103, 1137,    0,
        0,    0,    0, 1091, 1094, 1097, 1103, 1097, 1090, 1089,
     1093,    0, 1112,    0, 1119,    0,    0, 1089,  167, 1091,
      226,    0,    0,    0,    0, 1094, 1088, 1079, 1092, 1092,
     1081, 1072, 1076, 1073, 1080, 1073, 1228, 1228, 1100, 1095,
     1228,  408, 1228, 1228, 1228, 1228,  413,  428,  433,  438,

     1098, 1068, 1109, 1091, 1090,  331, 1069, 1068, 1063, 1068,
     1087, 1064, 1061, 1081, 1096, 1080, 1081, 1087, 1086, 1057,
     1057, 1050, 1062, 1059, 1050, 1048, 1053, 1085, 1080, 1053,
     1056, 1035, 1045, 1075, 1070,  350, 1043, 1071, 1032,    0,
     1033, 1069, 1068, 1029, 1032, 1040,    0, 1056, 1064, 1028,
     1078, 1029, 1020, 1058, 1031, 1028, 1029, 1067, 1018, 1048,
     1023, 1010, 1026, 1048, 1021, 1037, 1046, 1022, 1005, 1009,
     1008, 1014, 1006, 1010, 1003, 1014, 1009, 1023, 1007, 1002,
     1002, 1004,  999,  989, 1000,  994, 1015, 1016,  994,  989,
      989,  987, 1005, 1004,  975,  976,  986,  402,  988,  978,

      157,  980,  985,  980,  970,  994,  996,  448,  455,  464,
      469,  474,  992,    0,  996,  993, 1015,  968,  971,  978,
        0, 1011,  976,  967,  989,  970,    0,  994,  986,  992,
      981,  992,  980,  948,    0,  965,  955,  948,  947,  952,
        0,    0,  984,  942,  941,    0,  949,  957,  966,  972,
      975,  939,  939,    0,  932,  950,  949,    0,  932,    0,
      968,  967,  927,  978,  924,  925,    0,  925,  922,    0,
      974,    0,  958,  932,  926,  918,  946,  917,  953,  937,
      919,  920,  923,  909,  910,  907,  908,  912,  904,  917,
      941,    0,  905,    0,  904,  905,    0,  915,  910,  931,

      926,    0,  895,  900,  903,  920,  929,    0,  896,    0,
      905,  892,  891,  885,    0,    0,  897,  900,  884,  895,
      893,  914,  917,  479,  484,  912,  917,  914,  892,  874,
      878,  877,    0,  885,  875,  903,  868,  892,  904,  904,
      889,  905,  901,  868,  874,  871,  870,    0,  869,  880,
      867,  866,  867,  228,  877,  876,  890,   66,  850,  861,
      276,  476,    0,  871,  872,    0,  897,  857,    0,  843,
      851,    0,  869,    0,  844,    0,  863,    0,    0,  878,
      849,  850,    0,    0,    0,  846,  846,  848,  844,    0,
      848,  829,    0,  841,  842,  826,  865,  863,  217,  836,

        0,  849,  842,  833,  834,  823,  825,    0,  827,  823,
        0,    0,  810,  843,  853,  841,  849,  850,  836,    0,
        0,  858,  806,  818,  834,    0,  838,    0,  820,  836,
      832,  826,  806,  797,    0,  802,  791,  829,    0,    0,
      810,  816,  820,  829,  818,    0,  797,  796,    0,  799,
      814,  808,  822,  825,  822,  807,    0,  829,  791,    0,
        0,  809,    0,  815,  800,  774,  790,    0,  773,  780,
        0,  810,    0,    0,  782,  770,  810,  806,  774,  781,
      777,    0,  780,    0,  774,  764,  768,    0,    0,    0,
      782,  792,  780,  795,  789,  785,    0,  757,    0,  790,

      793,  775,  773,  765,  781,  772,  757,  758,    0,  771,
      741,  767,  768,    0,  794,  738,  751,    0,  759,  759,
      759,  763,  767,  765,  782,    0,  768,  767,  744,  727,
      732,  724,  728,  760,    0,  715,  751,  736,  723,  716,
        0,  743,  714,    0,  727,  741,  749,  739,  727,  746,
      750,  708,  723,  734,  739,  741,  727,  741,  704,  700,
      710,  726,  712,  717,  721,  744,    0,    0,  721,  729,
      730,  727,  726,  727,  735,  702,  701,  722,  690,    0,
      689,  692,  716,    0,  695,  717,  684,  687,  702,    0,
        0,  696,  706,  694,  363,  704,  709,    0,  150,  685,

      705,  682,  685,  701,  662,   31,    0,    0,    0,   84,
        0,  184,  205,  203,  204,    0,  215,  238,  283,  281,
      301,  312,  289,  281,    0,  321,  314,  317,  295,    0,
      331,  324,  358,  346,  349,  369,  375,  376,  369,  372,
      378,  397,  407,  394,  400,    0,  371,    0,  423,    0,
      409,  427,  436,  435,  461,  466,  478,  477,    0,  446,
      471,  466,  470,  457,  475,    0,  487,  517,  487,  490,
      493,  495,  492,  493,  496,  500,  498,  513,  494,  477,
      531,  521,  508,    0,  520,  534,  515,  521,  520,    0,
      521,  514,  511,    0,  514, 1228,    0,    0,  518,  530,

      591,  531,  516,  532,  530,    0,  523,  540,  525,  509,
      551,  531,  528,  529, 1228,  540,  545,  537,  533,  547,
      549,    0, 1228,  529,    0,    0,  542,  552,  557,  545,
      539,  558,  542,  534,  576,  545,  557,    0,  567,    0,
      573,  574,  583,    0,  567,  567,  566,  590,  575,  590,
      591,  580,    0,  605,  585,  585,  575,  583,  588,  601,
      597,  580,  585,  603,    0,  583,    0,  604,  619,  608,
      599,  612,  606,  603,  613,  618,  626,  612,  596,  605,
      623, 1228,    0,    0,  608,  611,  601,    0,  612,  625,
      611,  609,  627,  630,  629,  621,  619,  632,    0,  630,

      630,  633,  638,  628,  619,  641,  621,  622,  630,  637,
        0,    0,  633,  636,  636,  643,  647,  651,  649,  641,
      654,  646,  635,  648,  662,  659,  649,  651,  656,  649,
      653,  652,  654,  653,  659,    0,  669,  670,  671,  659,
      663,    0,  665,  662,    0,  662,  663,  678,  666,  684,
      672,    0,  668,  669,  680,  689,  676,  673,  679,  685,
        0,  680,  682,    0, 1228,  717,  720,  723,  726,  729
    } ;

static yyconst short int yy_def[971] =
    {   0,
      965,    1,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  965,  965,  965,  965,  965,
      965,  965,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  965,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  965,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  965,  965,  965,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  965,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  965,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  965,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  965,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      965,  965,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  965,  965,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  965,  966,  966,  966,  966,
      966,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  965,  965,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  965,  966,  966,  966,  966,  966,  966,  965,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  965,  965,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  965,  966,
      966,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  967,  965,  968,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      965,  966,  966,  966,  966,  965,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  965,  969,  966,  966,  966,

      970,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      965,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  965,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  965,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  965,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  965,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  965,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,    0,  965,  965,  965,  965,  965
    } ;

static yyconst short int yy_nxt[1303] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   32,   32,    4,   32,   32,
       32,   32,   32,   45,   46,   32,   32,   32,   47,   32,
       48,   49,   32,   32,   32,   50,   32,   32,   51,   32,
       32,   32,   52,   53,   54,   54,   56,   54,   54,   58,
       54,   57,   57,   57,   57,   57,   59,   60,  747,   62,
       54,   55,   55,   54,   55,   55,   54,   55,   54,   61,

       63,   70,   54,   54,   54,   71,   88,   55,   77,  201,
       55,  748,   54,   55,   72,   55,  217,  218,   54,   55,
       55,   55,   64,   83,   65,   65,   65,   65,   65,   55,
       78,  547,  548,  202,   54,   55,   54,  195,   79,   66,
       73,   74,   54,   75,   75,   75,   75,   75,   81,   82,
       88,   55,   67,   68,   69,   54,   88,   76,  115,   55,
       88,  103,  190,   88,  208,   83,  116,   83,   84,  104,
      258,   89,   55,   83,  271,  739,  259,   83,  273,   90,
       83,  209,  274,   76,  117,  126,  272,   85,   86,   87,
      740,  105,   91,  118,  119,  106,  120,  749,   92,   93,

       88,   88,  107,   88,  109,  108,   88,   94,  121,   88,
       95,  122,  110,   96,  111,  124,  290,   83,   83,  416,
       83,  417,   97,   83,  291,   98,   83,   88,   88,   99,
       88,  750,  100,  101,  127,  125,  112,  102,  113,  132,
       88,   88,  751,  752,   83,   83,   88,   83,  114,   88,
      753,  293,  128,  542,  136,  123,  129,   83,   83,   88,
      130,   88,  543,   83,  131,  294,   83,  170,  138,  133,
       88,  579,  135,  139,  146,  580,   83,  134,   83,  137,
       88,  178,  147,  140,   88,  180,  754,   83,  148,   88,
      141,  142,  143,  755,   88,  144,  171,   83,  145,   88,

      551,   83,   88,  172,  149,  179,   83,  173,  150,  174,
      175,   83,  151,  552,  152,  153,   83,  186,   54,   83,
      181,  756,  184,  154,  239,  155,  176,   88,  757,  240,
      177,  156,  157,  241,   88,   55,  158,  159,  185,  758,
      759,  160,  760,  162,   83,  161,  163,  164,  165,  166,
      167,   83,  761,  188,  762,  182,  318,   54,  168,  763,
      350,  764,  765,  183,  766,  187,   57,   57,   57,   57,
       57,  319,  320,  169,   55,   65,   65,   65,   65,   65,
      197,  197,  197,  197,  197,  767,  768,  735,  769,  192,
      351,  736,  770,   74,  198,   75,   75,   75,   75,   75,

      199,  199,  771,  772,  200,  200,  200,  200,  200,   76,
      224,  773,  225,  226,  774,  192,  775,  308,  308,  227,
      198,  309,  309,  309,  309,  309,  197,  197,  197,  197,
      197,  776,  777,  778,  779,   76,  780,  311,  311,  781,
      310,  312,  312,  312,  312,  312,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  411,  782,  783,  784,
      412,  309,  309,  309,  309,  309,  310,  413,  309,  309,
      309,  309,  309,  424,  424,  785,  786,  425,  425,  425,
      425,  425,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  553,  787,  788,  789,  790,  791,  792,  793,
      794,  795,  554,  797,  799,  800,  555,  796,  796,  801,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      802,  803,  804,  805,  806,  796,  796,  796,  796,  796,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      817,  818,  819,  820,  821,  822,  824,  825,  827,  828,
      829,  830,  831,  832,  796,  833,  834,  835,  836,  837,
      838,  839,  840,  841,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  852,  853,  854,  855,  856,  796,
      796,  823,  823,  857,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  858,  859,  860,  861,  862,  823,
      823,  823,  823,  823,  863,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,  877,  878,
      879,  880,  881,  882,  883,  884,  885,  886,  823,  887,
      888,  889,  890,  891,  892,  893,  894,  895,  896,  897,
      898,  899,  900,  901,  902,  903,  904,  905,  906,  907,
      908,  909,  910,  823,  823,  911,  912,  913,  914,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  924,  925,
      926,  927,  928,  929,  930,  931,  932,  933,  934,  935,
      936,  937,  938,  939,  940,  941,  942,  943,  944,  945,

      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  964,   80,
      796,  746,  796,  798,  745,  798,  823,  744,  823,  826,
      743,  826,  742,  741,  738,  737,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,

      670,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,

      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  550,  549,  546,  545,  544,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,

      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  423,  422,  421,  420,  419,  418,
      415,  414,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,

      352,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      317,  316,  315,  314,  313,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  292,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  238,  237,  236,  235,  234,  233,  232,  231,  230,

      229,  228,  223,  222,  221,  220,  219,  216,  215,  214,
      213,  212,  211,  210,  201,  207,  206,  205,  204,  203,
      196,  194,  193,  191,  190,  189,  965,    3,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965
    } ;

static yyconst short int yy_chk[1303] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    5,    7,    8,   11,   10,
        7,    9,    9,    9,    9,    9,   12,   13,  706,   14,
       12,    4,    5,    9,    8,   11,   18,    7,   10,   13,

       14,   16,   19,   13,   14,   16,   32,   12,   20,   81,
        9,  710,   20,   18,   16,   10,   96,   96,   16,   19,
       13,   14,   15,   32,   15,   15,   15,   15,   15,   20,
       21,  458,  458,   81,   21,   16,   15,   68,   22,   15,
       16,   17,   22,   17,   17,   17,   17,   17,   23,   23,
       33,   21,   15,   15,   15,   17,   24,   17,   28,   22,
       28,   26,   68,   26,   87,   23,   28,   33,   23,   26,
      131,   24,   17,   24,  144,  699,  131,   28,  145,   24,
       26,   87,  145,   17,   28,   33,  144,   23,   23,   23,
      699,   26,   24,   28,   28,   26,   28,  712,   24,   25,

       31,   25,   26,   27,   27,   26,   29,   25,   29,   30,
       25,   30,   27,   25,   27,   31,  169,   31,   25,  301,
       27,  301,   25,   29,  169,   25,   30,   42,   34,   25,
       36,  713,   25,   25,   34,   31,   27,   25,   27,   35,
       37,   35,  714,  715,   42,   34,   39,   36,   27,   44,
      717,  171,   34,  454,   37,   30,   34,   37,   35,   38,
       34,   46,  454,   39,   34,  171,   44,   42,   38,   35,
       45,  499,   36,   38,   39,  499,   38,   35,   46,   37,
       49,   44,   39,   38,   47,   46,  718,   45,   39,   51,
       38,   38,   38,  719,   43,   38,   43,   49,   38,   40,

      461,   47,   50,   43,   40,   45,   51,   43,   40,   43,
       43,   43,   40,  461,   40,   40,   40,   51,   52,   50,
       47,  720,   49,   40,  114,   40,   43,   48,  721,  114,
       43,   40,   40,  114,   41,   52,   40,   40,   50,  722,
      723,   40,  724,   41,   48,   40,   41,   41,   41,   41,
       41,   41,  726,   53,  727,   48,  206,   53,   41,  728,
      236,  729,  731,   48,  732,   52,   57,   57,   57,   57,
       57,  206,  206,   41,   53,   65,   65,   65,   65,   65,
       74,   74,   74,   74,   74,  733,  734,  695,  735,   65,
      236,  695,  736,   75,   74,   75,   75,   75,   75,   75,

       76,   76,  737,  738,   76,   76,   76,   76,   76,   75,
      102,  739,  102,  102,  740,   65,  741,  192,  192,  102,
       74,  192,  192,  192,  192,  192,  197,  197,  197,  197,
      197,  742,  743,  744,  745,   75,  747,  198,  198,  749,
      197,  198,  198,  198,  198,  198,  199,  199,  199,  199,
      199,  200,  200,  200,  200,  200,  298,  751,  752,  753,
      298,  308,  308,  308,  308,  308,  197,  298,  309,  309,
      309,  309,  309,  310,  310,  754,  755,  310,  310,  310,
      310,  310,  311,  311,  311,  311,  311,  312,  312,  312,
      312,  312,  424,  424,  424,  424,  424,  425,  425,  425,

      425,  425,  462,  756,  757,  758,  760,  761,  762,  763,
      764,  765,  462,  767,  769,  770,  462,  768,  768,  771,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      772,  773,  774,  775,  776,  768,  768,  768,  768,  768,
      777,  778,  779,  780,  781,  782,  783,  785,  786,  787,
      788,  789,  791,  792,  793,  795,  799,  800,  802,  803,
      804,  805,  807,  808,  768,  809,  810,  811,  812,  813,
      814,  816,  817,  818,  819,  820,  821,  824,  827,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  837,  768,
      768,  801,  801,  839,  801,  801,  801,  801,  801,  801,

      801,  801,  801,  801,  841,  842,  843,  845,  846,  801,
      801,  801,  801,  801,  847,  848,  849,  850,  851,  852,
      854,  855,  856,  857,  858,  859,  860,  861,  862,  863,
      864,  866,  868,  869,  870,  871,  872,  873,  801,  874,
      875,  876,  877,  878,  879,  880,  881,  885,  886,  887,
      889,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      900,  901,  902,  801,  801,  903,  904,  905,  906,  907,
      908,  909,  910,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  935,  937,  938,  939,  940,

      941,  943,  944,  946,  947,  948,  949,  950,  951,  953,
      954,  955,  956,  957,  958,  959,  960,  962,  963,  966,
      967,  705,  967,  968,  704,  968,  969,  703,  969,  970,
      702,  970,  701,  700,  697,  696,  694,  693,  692,  689,
      688,  687,  686,  685,  683,  682,  681,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      643,  642,  640,  639,  638,  637,  636,  634,  633,  632,
      631,  630,  629,  628,  627,  625,  624,  623,  622,  621,

      620,  619,  617,  616,  615,  613,  612,  611,  610,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  598,  596,
      595,  594,  593,  592,  591,  587,  586,  585,  583,  581,
      580,  579,  578,  577,  576,  575,  572,  570,  569,  567,
      566,  565,  564,  562,  559,  558,  556,  555,  554,  553,
      552,  551,  550,  548,  547,  545,  544,  543,  542,  541,
      538,  537,  536,  534,  533,  532,  531,  530,  529,  527,
      525,  524,  523,  522,  519,  518,  517,  516,  515,  514,
      513,  510,  509,  507,  506,  505,  504,  503,  502,  500,
      498,  497,  496,  495,  494,  492,  491,  489,  488,  487,

      486,  482,  481,  480,  477,  475,  473,  471,  470,  468,
      467,  465,  464,  460,  459,  457,  456,  455,  453,  452,
      451,  450,  449,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  432,  431,  430,
      429,  428,  427,  426,  423,  422,  421,  420,  419,  418,
      417,  414,  413,  412,  411,  409,  407,  406,  405,  404,
      403,  401,  400,  399,  398,  396,  395,  393,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  371,  369,  368,
      366,  365,  364,  363,  362,  361,  359,  357,  356,  355,

      353,  352,  351,  350,  349,  348,  347,  345,  344,  343,
      340,  339,  338,  337,  336,  334,  333,  332,  331,  330,
      329,  328,  326,  325,  324,  323,  322,  320,  319,  318,
      317,  316,  315,  313,  307,  306,  305,  304,  303,  302,
      300,  299,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  246,  245,  244,  243,  242,  241,  239,  238,

      237,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      205,  204,  203,  202,  201,  190,  189,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  170,  168,
      165,  163,  161,  160,  159,  158,  157,  156,  155,  154,
      149,  148,  147,  146,  143,  141,  140,  139,  138,  137,
      136,  135,  134,  133,  132,  130,  129,  128,  127,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  113,  112,  111,  110,  109,  108,  107,  106,  105,

      104,  103,  101,  100,   99,   98,   97,   95,   94,   93,
       92,   91,   90,   89,   88,   86,   85,   84,   83,   82,
       69,   67,   66,   64,   55,   54,    3,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Gmsh.l"
#define INITIAL 0
#line 2 "Gmsh.l"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "Gmsh.h"
#include "Geo.h"
#include "CAD.h"
#include "Gmsh.tab.cpp.h"

char   TmpString[1024];
int    yywhere = INFILE;
int    yylineno = 1;

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_ALWAYS_INTERACTIVE 1

#define YY_INPUT(buf,result,max_size)					\
   if ( yy_current_buffer->yy_is_interactive )				\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < max_size &&					\
	       (c = getc( yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;						\
       if ( c == '\n' ){						\
	 buf[n++] = (char) c;						\
	 yylineno++;							\
       }								\
       if ( c == EOF && ferror( yyin ) )				\
	 YY_FATAL_ERROR( "input in flex scanner failed" );		\
       result = n;							\
     }									\
   else if ( ((result = fread( buf, 1, max_size, yyin )) == 0)		\
	     && ferror( yyin ) )					\
     YY_FATAL_ERROR( "input in flex scanner failed" );

#line 1014 "Gmsh.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "Gmsh.l"


#line 1168 "Gmsh.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 966 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1228 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "Gmsh.l"
/* none */ ;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 65 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 66 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "Gmsh.l"
{parsestring('\"'); return tBIGSTR;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 68 "Gmsh.l"
{parsestring('\''); return tBIGSTR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "Gmsh.l"
{yylval.d = NEWREG(); return tDOUBLE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "Gmsh.l"
{yylval.d = NEWPOINT(); return tDOUBLE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 71 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "Gmsh.l"
return tAFFECTPLUS ;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 73 "Gmsh.l"
return tAFFECTMINUS ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "Gmsh.l"
return tAFFECTTIMES ;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "Gmsh.l"
return tAFFECTDIVIDE ;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "Gmsh.l"
return tCROSSPRODUCT ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "Gmsh.l"
return tOR ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "Gmsh.l"
return tAND ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "Gmsh.l"
return tPLUSPLUS ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "Gmsh.l"
return tMINUSMINUS ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tEQUAL ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tNOTEQUAL ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "Gmsh.l"
return tAPPROXEQUAL ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "Gmsh.l"
return tLESSOREQUAL ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "Gmsh.l"
return tGREATEROREQUAL ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 89 "Gmsh.l"
return tAcos ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tAcos ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tAsin;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 92 "Gmsh.l"
return tAsin;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 93 "Gmsh.l"
return tAtan ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tAtan ;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tAtan2 ;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tAtan2 ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAttractor;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tBump;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tBounds;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tCeil ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tCosh ;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tCos ;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tCircle;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tComplex;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tColor;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tSpline;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tDelete;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tDilate;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tDuplicata;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tDraw;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tSleep;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tExp ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tEllipsis;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tELLIPSE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tFabs ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tFloor ;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tFmod ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tHypot ;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tInclude;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tKnots;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tLength;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tLine;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tLoop;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tLog ;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tLog10 ;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tLayers;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tModulo ;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tOrder;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tPi;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tPlane;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tPoint;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tProgression;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tProgression;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tParametric;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 155 "Gmsh.l"
return tPrintf ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tRotate;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tRuled;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tSqrt ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tSin ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tSinh ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 165 "Gmsh.l"
return tSpline;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tSurface;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tScript;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tTanh ;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "Gmsh.l"
return tTan;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tTrimmed;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tUsing;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tView;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tVolume;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tWith;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tFor;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tScript;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tExit;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tMerge;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tScalarTetrahedron;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 190 "Gmsh.l"
return tVectorTetrahedron;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tTensorTetrahedron;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 192 "Gmsh.l"
return tScalarTriangle;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tVectorTriangle;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tTensorTriangle;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tScalarLine;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tVectorLine;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tTensorLine;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tScalarPoint;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tVectorPoint;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tTensorPoint;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tCARTESIAN_POINT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tB_SPLINE_SURFACE_WITH_KNOTS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tB_SPLINE_CURVE_WITH_KNOTS;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tUNSPECIFIED;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tCONTINUOUS;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tFALSE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tTRUE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 210 "Gmsh.l"
return tU;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tV;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tORIENTED_EDGE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tEDGE_CURVE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tEDGE_LOOP;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tVERTEX_POINT;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tFACE_OUTER_BOUND;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 217 "Gmsh.l"
return tFACE_BOUND;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tADVANCED_FACE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tLine;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tVECTOR;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tDIRECTION;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 222 "Gmsh.l"
return tAXIS2_PLACEMENT_3D;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tPLANE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tHEADER;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tDATA;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tFILE_SCHEMA;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tFILE_NAME;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tFILE_DESCRIPTION;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tISO;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tENDISO;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tENDSEC;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tCLOSED_SHELL;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "Gmsh.l"
return  tADVANCED_BREP_SHAPE_REPRESENTATION;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tMANIFOLD_SOLID_BREP;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tCYLINDRICAL_SURFACE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tCONICAL_SURFACE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tTOROIDAL_SURFACE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tCIRCLE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tTRIMMED_CURVE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tGEOMETRIC_SET;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 241 "Gmsh.l"
return tCOMPOSITE_CURVE_SEGMENT;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 242 "Gmsh.l"
return tCOMPOSITE_CURVE;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tPRODUCT_DEFINITION;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tPRODUCT_DEFINITION_SHAPE;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 245 "Gmsh.l"
return tSHAPE_DEFINITION_REPRESENTATION;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 247 "Gmsh.l"
return tVertex;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return tFacet;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 249 "Gmsh.l"
return tNormal;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 250 "Gmsh.l"
return tOuter;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 251 "Gmsh.l"
return tLoopSTL;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 252 "Gmsh.l"
return tEndLoop;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 253 "Gmsh.l"
return tEndFacet;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 254 "Gmsh.l"
{skipline();return tEndSolid;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 255 "Gmsh.l"
{skipline();return tSolid;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 257 "Gmsh.l"
{yylval.d = (double)atoi((char*)(yytext+1)); return tDOUBLE;}
	YY_BREAK
case 170:
#line 260 "Gmsh.l"
case 171:
#line 261 "Gmsh.l"
case 172:
#line 262 "Gmsh.l"
case 173:
YY_RULE_SETUP
#line 262 "Gmsh.l"
{yylval.d = atof((char *)yytext); return tDOUBLE;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 264 "Gmsh.l"
{yylval.c = strsave((char*)yytext); return tSTRING;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 266 "Gmsh.l"
return yytext[0];
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 268 "Gmsh.l"
ECHO;
	YY_BREAK
#line 2122 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 966 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 966 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 965);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 268 "Gmsh.l"


#undef yywrap

int yywrap() {return 1;}

void skipcomments(void) {
  int c;

  while (1) {
    while ((c=yyinput()) != '*'){
      if(c == EOF) {
        fprintf(stderr, "Error: End of File in Commented Region\n") ;
        exit(1);
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar){
  int c, i;

  c = yyinput();
  i = 0;
  while (c != endchar) {
    TmpString[i++] = c;
    c = yyinput();
  }
  TmpString[i++] = '\0';
  yylval.c = strsave(TmpString);
}

char *strsave(char *ptr){
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline(void)
{
   while (yyinput() != '\n') ;
}

