#line 2 "Gmsh.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/gmsh/Parser/Gmsh.yy.cpp,v 1.17 2000-12-06 18:28:30 remacle Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
static yyconst short int yy_accept[980] =
    {   0,
        0,    0,  166,  164,    1,    1,    5,  158,    6,  164,
      164,  159,    2,    9,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,    0,    0,  158,    0,  161,    0,    0,
        0,    0,    3,    4,  160,  159,    0,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,   62,  163,  163,  163,  163,  163,  163,  163,  100,
      103,   94,   97,  163,  163,  163,  163,  163,  163,  163,
      102,  163,  105,  163,   96,   99,  163,  163,  163,  163,
      101,  104,   95,   98,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,    0,    0,   10,    0,  111,
      112,  113,  114,  160,    0,    0,  162,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,   26,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,   36,  163,  163,  163,
      163,  163,  163,   89,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,   52,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,   74,  163,  163,  163,  163,  163,  163,
       83,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,    0,    0,    0,
      161,    0,    0,  160,  163,   11,  163,  163,  163,  163,

      163,  163,   13,  163,   15,  163,  163,  163,  163,   21,
      163,  163,  163,  163,  163,  163,  163,   24,  163,  163,
      163,  163,  163,   25,  128,  163,  163,  163,  163,  163,
      163,    0,  163,  163,  163,   92,  163,  163,  163,   41,
      163,   43,  163,  163,  163,  163,  163,    0,  163,  163,
      122,  163,  163,   50,  163,   51,  163,  163,   55,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,   76,
      163,   75,  163,   73,  163,  163,  163,  163,   82,  163,
      163,  163,  163,  163,   86,  163,   88,  163,  163,  163,

      163,  153,    8,  163,  163,  163,  163,  163,    0,    0,
        0,  160,  163,  163,  163,  163,  163,  163,  163,  163,
       17,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,   31,  163,  163,  163,  163,
      163,  163,  163,    0,  163,  163,  163,  163,  163,  163,
       42,  163,  163,  163,  163,   46,    0,  163,   48,  163,
      163,   53,  163,   93,  163,   57,  163,  163,  163,   59,
      126,  163,  163,  163,   63,   64,  163,   65,   69,  163,
      163,  163,   72,  163,  163,  163,  163,  163,  163,  163,
      163,  163,   85,  163,  163,  163,  163,  163,  163,  150,

      163,  163,  152,  157,  163,    0,    0,  163,  163,  163,
      163,   12,   14,   16,  163,  163,  163,  163,   23,  163,
      141,  163,  163,  163,  163,  163,  163,   28,  163,  163,
      163,   33,   34,  163,  163,  163,  163,    0,  134,  163,
      163,   90,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  127,    0,  163,   54,   49,  163,   56,  163,   58,
      163,  163,  163,  163,  163,  163,  163,   71,  163,   91,
       77,  163,  163,  163,  163,  163,  163,  163,  123,  163,
       87,  163,  163,  163,    7,  151,  149,    0,    0,  163,
      163,  163,  163,   18,  163,  163,   22,  163,  163,  163,

      163,  163,  163,  163,  163,  163,   30,  163,  163,  163,
      163,   40,    0,  163,  163,   38,  163,  163,  163,  163,
      163,  163,   44,  163,    0,   47,  163,  163,   60,  163,
      163,  163,  163,  163,  163,  163,   78,  163,  163,  163,
      163,  163,   84,  163,  163,  154,  163,    0,    0,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,    0,   37,
       39,  163,  163,  163,  163,  163,  163,   45,    0,  163,
      163,  163,  163,   61,  163,  163,  163,  163,   79,  163,
      163,  163,  163,  163,  155,  156,    0,    0,  163,  163,

      163,  163,  163,   20,  163,  163,  163,  163,  163,  163,
      163,  163,   29,  124,   35,  163,  117,    0,  163,  163,
      163,  130,  163,  163,    0,  163,  163,  163,  163,  163,
      163,   70,  163,  163,  163,  163,   81,  163,    0,    0,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,   32,  163,  116,    0,  120,  163,  163,
      163,  163,    0,  163,  163,  163,   67,  163,  163,  163,
      163,  163,  163,  163,    0,    0,  163,  163,  163,  163,
      163,   19,  163,  163,  163,  163,  163,  163,  163,  163,
        0,  163,  163,  129,  163,    0,  163,  163,  163,  163,

       66,  163,  163,  163,   80,  163,  110,    0,  110,  163,
      163,  163,  163,  163,  163,  163,  135,  163,  163,  163,
      163,    0,  163,  163,  163,  132,  163,  163,  163,  163,
      163,  163,  163,  118,  109,  163,  121,  109,  163,  163,
      163,  163,  163,  163,  163,  163,    0,  163,  163,  143,
      163,  115,  163,  163,  163,  163,  142,  163,  163,  163,
      163,  163,  163,  163,  163,   27,    0,  163,  163,  163,
      163,   68,  163,  163,  163,  163,  163,  163,  106,  145,
      139,  163,    0,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  133,  119,  131,  163,  163,

      163,  140,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  125,  163,  163,  163,  163,  163,  146,  163,
      163,  163,  163,  163,  138,  137,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  144,
      163,  163,  163,  163,  163,  147,  163,  163,  108,  163,
      163,  163,  163,  163,  163,  107,  163,  163,  163,  163,
      163,  163,  163,  163,  148,  163,  163,  136,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    8,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   16,   16,   16,   16,   16,    1,   17,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   39,   40,   41,   42,   28,
        1,    1,    1,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   28,   28,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   28,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[67] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[985] =
    {   0,
        0,    0, 1207,   46,   47, 1208,   48,   58,   54,   87,
       69,  117,   56,   57,   98,   85,  147,  124,  149,  163,
       66,  131,  172,   60,   67,  184,  175,   72,  199,  238,
      191,  277,  323,  123,  249,   97,  154,  129,  204,  236,
      200,  205,  197, 1173, 1173,  251, 1194,  304, 1193, 1192,
       81, 1191, 1208, 1208,  350,  362,  333,    0,  104, 1161,
     1167, 1171, 1151,   57,  102, 1163, 1138, 1158, 1131, 1138,
     1156, 1155, 1156,   51, 1158, 1126, 1134, 1141, 1125,  242,
     1146, 1147, 1128, 1127, 1122, 1153, 1147, 1154, 1122, 1127,
      189, 1152, 1142, 1126, 1114, 1113, 1109, 1134,   60, 1147,

     1108, 1131, 1117, 1106, 1129, 1094, 1104, 1103,   92, 1125,
      192, 1109, 1096, 1127, 1104, 1091, 1104, 1131, 1116, 1089,
     1081,    0, 1102,  217,  219, 1099, 1083, 1090, 1123,    0,
        0,    0,    0, 1078, 1081, 1084, 1085, 1078, 1077, 1081,
        0, 1099,    0, 1106,    0,    0, 1077,  112, 1079,  209,
        0,    0,    0,    0, 1082, 1076, 1067, 1080, 1080, 1069,
     1060, 1064, 1061, 1068, 1061, 1087, 1082, 1208,  375, 1208,
     1208, 1208, 1208,  380,  392,  399,  404, 1085, 1056, 1096,
     1078, 1077,  288, 1057, 1055, 1055, 1050, 1055, 1073, 1051,
     1048, 1067, 1082, 1066, 1067, 1073, 1072, 1044, 1044, 1037,

     1049, 1046, 1037, 1035, 1040, 1071, 1066, 1040, 1043, 1033,
     1062, 1057,  179, 1031, 1058, 1020,    0, 1021, 1056, 1055,
     1017, 1020, 1028,    0, 1043, 1025, 1018, 1049, 1014, 1060,
     1015, 1006, 1043, 1017, 1014, 1015, 1049, 1004, 1033, 1009,
     1007,  995, 1011, 1032,  994, 1001, 1004, 1019, 1028, 1005,
      988,  992,  991,  984,  996,  988,  992,  985,  996,  991,
     1004,  989,  984,  984,  982,  972,  983,  977,  997,  998,
      977,  972,  972,  970,  987,  986,  958,  959,  969,  273,
      971,  961,  221,  963,  968,  963,  953,  976,  978,  409,
      417,  426,  431,  436,  974,    0,  978,  975,  994,  951,

      954,  961,    0,  958,  989,  958,  949,  970,  952,    0,
      975,  967,  973,  962,  973,  961,  930,    0,  947,  937,
      930,  929,  934,    0,    0,  965,  924,  923,  931,  939,
      947,  953,  956,  921,  921,    0,  914,  932,  931,    0,
      914,    0,  949,  912,  922,  946,  907,  954,  904,  905,
        0,  905,  902,    0,  950,    0,  937,  912,    0,  906,
      898,  925,  908,  899,  895,  930,  914,  897,  898,  901,
      887,  913,  887,  884,  885,  889,  881,  894,  917,    0,
      882,    0,  883,    0,  893,  888,  908,  903,    0,  873,
      878,  881,  897,  906,    0,  874,    0,  883,  870,  869,

      863,    0,    0,  875,  878,  862,  873,  871,  891,  894,
      441,  446,  889,  894,  891,  870,  852,  856,  855,  857,
        0,  862,  852,  879,  845,  868,  880,  880,  865,  881,
      877,  845,  851,  848,  847,    0,  846,  856,  844,  843,
      844,  203,  853,  852,  866,  194,  827,  838,  279,  318,
        0,  847,  839,  821,  846,    0,  868,  832,    0,  818,
      826,    0,  843,    0,  819,    0,  837,  812,  817,    0,
        0,  850,  822,  823,    0,    0,  809,    0,    0,  819,
      821,  817,    0,  821,  802,  814,  815,  799,  837,  835,
      251,  809,    0,  821,  814,  806,  807,  796,  798,    0,

      800,  796,    0,    0,  783,  815,  825,  813,  821,  822,
      808,    0,    0,  827,  796,  778,  790,  805,    0,  809,
        0,  792,  807,  803,  797,  778,  769,    0,  774,  763,
      800,    0,    0,  782,  787,  791,  800,  789,    0,  769,
      768,    0,  771,  785,  779,  793,  796,  793,  778,  759,
      752,    0,  795,  761,    0,    0,  778,    0,  784,    0,
      746,  768,  743,  759,  746,  741,  748,    0,  777,    0,
        0,  750,  738,  777,  773,  742,  749,  745,    0,  748,
        0,  742,  732,  736,    0,    0,    0,  749,  759,  747,
      762,  756,  752,    0,  720,  724,    0,  756,  759,  741,

      739,  732,  747,  738,  724,  725,    0,  737,  708,  733,
      734,    0,  757,  705,  718,    0,  725,  725,  725,  729,
      733,  731,    0,  691,  744,    0,  733,  732,    0,  710,
      693,  698,  704,  689,  693,  724,    0,  680,  715,  701,
      688,  681,    0,  707,  679,    0,  692,  705,  713,  703,
      692,  710,  714,  680,  672,  687,  697,  702,  704,  690,
      704,  668,  664,  674,  689,  676,  680,  684,  704,    0,
        0,  684,  692,  693,  690,  688,  687,    0,  690,  659,
       69,  131,  126,    0,  152,  154,  201,  264,    0,  263,
      287,  258,  280,  297,    0,    0,  293,  305,  298,  331,

      310,  317,  312,    0,  350,  326,  347,  336,  342,  362,
      343,  347,    0,    0,    0,  379,    0,  397,  404,  392,
      401,    0,  406,  420,  455,  429,  443,  444,  422,  409,
      414,    0,  444,  436,  435,  413,    0,  448,  440,  454,
      442,  444,  461,  458,  459,  428,  446,  447,  452,  457,
      467,  454,  460,    0,  431,    0,  477,    0,  450,  467,
      476,  460,  483,  465,  477,  476,    0,  441,  447,  471,
      466,  470,  458,  475,    0,  486,  508,  488,  499,  499,
      491,    0,  488,  489,  494,  498,  491,  506,  488,  471,
      521,  514,  501,    0,  513,  524,  508,  514,  513,  489,

        0,  515,  508,  505,    0,  508, 1208,    0,    0,  512,
      524,  547,  527,  520,  536,  534,    0,  527,  544,  530,
      515,  553,  536,  533,  534, 1208,  545,  550,  542,  520,
      539,  553,  555,    0, 1208,  536,    0,    0,  548,  558,
      563,  551,  545,  564,  548,  541,  579,  551,  563,    0,
      569,    0,  565,  543,  567,  576,    0,  560,  560,  555,
      578,  563,  578,  579,  568,    0,  590,  573,  573,  564,
      571,    0,  576,  589,  585,  569,  573,  591,    0,  572,
        0,  592,  604,  596,  587,  600,  594,  590,  600,  605,
      610,  599,  584,  592,  610, 1208,    0,    0,  595,  598,

      589,    0,  599,  612,  598,  596,  614,  617,  616,  608,
      606,  619,    0,  617,  617,  620,  623,  613,  605,  626,
      607,  608,  615,  622,    0,    0,  618,  621,  621,  628,
      632,  636,  634,  626,  639,  631,  621,  633,  647,  644,
      634,  636,  641,  634,  638,  637,  639,  638,  644,    0,
      654,  655,  656,  644,  648,    0,  650,  647,    0,  647,
      648,  663,  651,  669,  657,    0,  653,  654,  665,  674,
      661,  658,  664,  670,    0,  665,  667,    0, 1208,  697,
      700,  703,  706,  709
    } ;

static yyconst short int yy_def[985] =
    {   0,
      979,    1,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  979,  979,  979,
      979,  979,  979,  979,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  979,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  979,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  979,  979,
      979,  979,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  979,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  979,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  979,  979,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  979,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  979,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  979,  979,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  979,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  979,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  979,  979,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  979,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  979,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  979,  979,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  979,  980,  980,
      980,  980,  980,  980,  979,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  979,  979,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  979,  980,  980,  980,
      980,  980,  979,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  981,  979,  982,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      979,  980,  980,  980,  980,  979,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  979,  983,  980,  980,
      980,  984,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  979,  980,  980,  980,  979,  980,  980,  980,  980,
      980,  980,  980,  980,  979,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  979,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  979,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  979,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  979,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,    0,  979,
      979,  979,  979,  979
    } ;

static yyconst short int yy_nxt[1275] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,    4,    4,   10,
       11,   12,   12,   12,   12,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       24,   24,   24,   24,   24,   24,   24,   37,   38,   24,
       24,   24,   39,   24,   40,   41,   24,   24,   24,   42,
       24,   24,   43,   24,   24,   24,   44,   44,   44,   46,
       46,   46,   46,   46,   44,   53,   44,   44,   44,   54,
       66,  195,  196,   45,   45,   45,   66,   66,   98,   44,
      172,   45,   66,   45,   45,   45,   47,   61,   48,   48,

       48,   48,   48,   61,   61,   66,   45,   44,  184,   61,
       49,  727,  167,   99,  226,  227,  185,   66,   59,   60,
       67,  104,   61,   50,   51,   52,   55,   68,   56,   56,
       56,   56,   56,  113,   61,   61,  178,   44,   62,   57,
       69,  237,   81,   66,   66,  186,   70,  238,  157,   66,
       82,   66,  728,  100,   45,  272,   63,   64,   65,  179,
       61,   61,  187,  273,   57,   71,   61,   66,   61,   66,
       86,   83,  159,   72,   66,   84,   73,  729,   87,   74,
       88,   92,  149,   66,   61,   85,   61,  332,   75,   93,
       76,   61,   66,  110,   77,   66,  101,   78,   79,  730,

       61,   89,   80,   90,   66,  731,   94,  102,  158,   61,
      105,   66,   61,   91,  333,   95,   96,   66,   97,   66,
       66,   61,  111,  535,   66,   66,  103,  106,   61,  275,
      112,  107,  536,  114,   61,  108,   61,   61,  126,  109,
      216,   61,   61,  276,  165,  217,  127,  115,  732,  218,
      240,  241,  128,  540,  541,  116,   66,  117,   66,  160,
      164,  163,   46,   46,   46,   46,   46,  118,  253,   66,
      256,  150,  119,   61,  257,   61,  254,  403,  151,  404,
      255,  120,  152,  161,  153,  154,   61,  733,  121,  122,
      123,  162,  202,  124,  203,  204,  125,   66,  544,  576,

      155,  205,  129,  577,  156,  734,  130,  735,  300,  736,
      131,  545,  132,  133,   61,   48,   48,   48,   48,   48,
      134,  398,  135,  301,  302,  399,  169,  737,  136,  738,
      739,  740,  400,  137,  138,  741,  744,  745,  139,  546,
      176,  176,  140,   66,  177,  177,  177,  177,  177,  547,
      742,  169,  141,  548,  743,  142,  143,  144,  145,  146,
       61,  174,  174,  174,  174,  174,  147,  746,  749,  750,
      747,   55,  175,   56,   56,   56,   56,   56,  751,  752,
      753,  148,  290,  290,   57,  748,  291,  291,  291,  291,
      291,  174,  174,  174,  174,  174,  754,  175,  755,  293,

      293,  756,  292,  294,  294,  294,  294,  294,  757,   57,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      291,  291,  291,  291,  291,  758,  759,  292,  291,  291,
      291,  291,  291,  411,  411,  760,  761,  412,  412,  412,
      412,  412,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  762,  763,  764,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  776,  777,  778,  779,
      780,  781,  782,  783,  784,  785,  786,  787,  788,  789,
      790,  791,  792,  793,  794,  795,  796,  797,  798,  799,

      800,  801,  802,  803,  804,  805,  806,  808,  807,  807,
      810,  807,  807,  807,  807,  807,  807,  807,  807,  811,
      812,  813,  814,  815,  807,  807,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  829,
      830,  831,  832,  833,  834,  836,  837,  835,  835,  839,
      835,  835,  835,  835,  835,  835,  835,  835,  840,  841,
      842,  843,  844,  835,  835,  845,  846,  847,  848,  849,
      850,  851,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  862,  863,  864,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  874,  875,  876,  877,  878,  879,

      880,  881,  882,  883,  884,  885,  886,  887,  888,  889,
      890,  891,  892,  893,  894,  895,  896,  897,  898,  899,
      900,  901,  902,  903,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,   58,

      807,  726,  807,  809,  725,  809,  835,  724,  835,  838,
      723,  838,  722,  721,  720,  719,  718,  717,  716,  715,
      714,  713,  712,  711,  710,  709,  708,  707,  706,  705,
      704,  703,  702,  701,  700,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  637,  636,  635,

      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  543,  542,  539,  538,  537,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,

      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,

      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  410,  409,  408,  407,  406,  405,  402,  401,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,

      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  299,  298,  297,  296,  295,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      274,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  239,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  225,  224,  223,  222,
      221,  220,  219,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  201,  200,  199,  198,  197,  194,  193,
      192,  191,  190,  189,  188,  178,  183,  182,  181,  180,

      173,  171,  170,  168,  167,  166,  979,    3,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979
    } ;

static yyconst short int yy_chk[1275] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    5,    7,    8,
        8,    8,    8,    8,    9,   11,   13,   14,    8,   11,
       24,   74,   74,    4,    5,    7,   21,   25,   21,   11,
       51,    9,   28,   13,   14,    8,   10,   24,   10,   10,

       10,   10,   10,   21,   25,   16,   11,   10,   64,   28,
       10,  681,   51,   21,   99,   99,   64,   36,   15,   15,
       16,   25,   16,   10,   10,   10,   12,   16,   12,   12,
       12,   12,   12,   28,   36,   15,   59,   12,   15,   12,
       16,  109,   18,   34,   18,   65,   16,  109,   36,   38,
       18,   22,  682,   22,   12,  148,   15,   15,   15,   59,
       34,   18,   65,  148,   12,   17,   38,   17,   22,   19,
       19,   18,   38,   17,   37,   18,   17,  683,   19,   17,
       19,   20,   34,   20,   17,   18,   19,  213,   17,   20,
       17,   37,   23,   27,   17,   27,   22,   17,   17,  685,

       20,   19,   17,   19,   26,  686,   20,   23,   37,   23,
       26,   31,   27,   19,  213,   20,   20,   43,   20,   29,
       41,   26,   27,  442,   39,   42,   23,   26,   31,  150,
       27,   26,  442,   29,   43,   26,   29,   41,   31,   26,
       91,   39,   42,  150,   43,   91,   31,   29,  687,   91,
      111,  111,   31,  446,  446,   29,   40,   29,   30,   39,
       42,   41,   46,   46,   46,   46,   46,   30,  124,   35,
      125,   35,   30,   40,  125,   30,  124,  283,   35,  283,
      124,   30,   35,   40,   35,   35,   35,  688,   30,   30,
       30,   40,   80,   30,   80,   80,   30,   32,  449,  491,

       35,   80,   32,  491,   35,  690,   32,  691,  183,  692,
       32,  449,   32,   32,   32,   48,   48,   48,   48,   48,
       32,  280,   32,  183,  183,  280,   48,  693,   32,  694,
      697,  698,  280,   32,   32,  699,  701,  702,   32,  450,
       57,   57,   32,   33,   57,   57,   57,   57,   57,  450,
      700,   48,   33,  450,  700,   33,   33,   33,   33,   33,
       33,   55,   55,   55,   55,   55,   33,  703,  706,  707,
      705,   56,   55,   56,   56,   56,   56,   56,  708,  709,
      710,   33,  169,  169,   56,  705,  169,  169,  169,  169,
      169,  174,  174,  174,  174,  174,  711,   55,  712,  175,

      175,  716,  174,  175,  175,  175,  175,  175,  718,   56,
      176,  176,  176,  176,  176,  177,  177,  177,  177,  177,
      290,  290,  290,  290,  290,  719,  720,  174,  291,  291,
      291,  291,  291,  292,  292,  721,  723,  292,  292,  292,
      292,  292,  293,  293,  293,  293,  293,  294,  294,  294,
      294,  294,  411,  411,  411,  411,  411,  412,  412,  412,
      412,  412,  724,  725,  726,  727,  728,  729,  730,  731,
      733,  734,  735,  736,  738,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  749,  750,  751,  752,  753,
      755,  757,  759,  760,  761,  762,  763,  764,  765,  766,

      768,  769,  770,  771,  772,  773,  774,  776,  777,  777,
      778,  777,  777,  777,  777,  777,  777,  777,  777,  779,
      780,  781,  783,  784,  777,  777,  785,  786,  787,  788,
      789,  790,  791,  792,  793,  795,  796,  797,  798,  799,
      800,  802,  803,  804,  806,  810,  811,  812,  812,  813,
      812,  812,  812,  812,  812,  812,  812,  812,  814,  815,
      816,  818,  819,  812,  812,  820,  821,  822,  823,  824,
      825,  827,  828,  829,  830,  831,  832,  833,  836,  839,
      840,  841,  842,  843,  844,  845,  846,  847,  848,  849,
      851,  853,  854,  855,  856,  858,  859,  860,  861,  862,

      863,  864,  865,  867,  868,  869,  870,  871,  873,  874,
      875,  876,  877,  878,  880,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  895,  899,
      900,  901,  903,  904,  905,  906,  907,  908,  909,  910,
      911,  912,  914,  915,  916,  917,  918,  919,  920,  921,
      922,  923,  924,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  942,  943,
      944,  945,  946,  947,  948,  949,  951,  952,  953,  954,
      955,  957,  958,  960,  961,  962,  963,  964,  965,  967,
      968,  969,  970,  971,  972,  973,  974,  976,  977,  980,

      981,  680,  981,  982,  679,  982,  983,  677,  983,  984,
      676,  984,  675,  674,  673,  672,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  645,
      644,  642,  641,  640,  639,  638,  636,  635,  634,  633,
      632,  631,  630,  628,  627,  625,  624,  622,  621,  620,
      619,  618,  617,  615,  614,  613,  611,  610,  609,  608,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  596,
      595,  593,  592,  591,  590,  589,  588,  584,  583,  582,
      580,  578,  577,  576,  575,  574,  573,  572,  569,  567,

      566,  565,  564,  563,  562,  561,  559,  557,  554,  553,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  541,
      540,  538,  537,  536,  535,  534,  531,  530,  529,  527,
      526,  525,  524,  523,  522,  520,  518,  517,  516,  515,
      514,  511,  510,  509,  508,  507,  506,  505,  502,  501,
      499,  498,  497,  496,  495,  494,  492,  490,  489,  488,
      487,  486,  485,  484,  482,  481,  480,  477,  474,  473,
      472,  469,  468,  467,  465,  463,  461,  460,  458,  457,
      455,  454,  453,  452,  448,  447,  445,  444,  443,  441,
      440,  439,  438,  437,  435,  434,  433,  432,  431,  430,

      429,  428,  427,  426,  425,  424,  423,  422,  420,  419,
      418,  417,  416,  415,  414,  413,  410,  409,  408,  407,
      406,  405,  404,  401,  400,  399,  398,  396,  394,  393,
      392,  391,  390,  388,  387,  386,  385,  383,  381,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  358,
      357,  355,  353,  352,  350,  349,  348,  347,  346,  345,
      344,  343,  341,  339,  338,  337,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  323,  322,  321,  320,
      319,  317,  316,  315,  314,  313,  312,  311,  309,  308,

      307,  306,  305,  304,  302,  301,  300,  299,  298,  297,
      295,  289,  288,  287,  286,  285,  284,  282,  281,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  223,  222,  221,  220,  219,  218,
      216,  215,  214,  212,  211,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,

      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  182,  181,  180,  179,  178,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      149,  147,  144,  142,  140,  139,  138,  137,  136,  135,
      134,  129,  128,  127,  126,  123,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  110,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   98,   97,   96,   95,
       94,   93,   92,   90,   89,   88,   87,   86,   85,   84,
       83,   82,   81,   79,   78,   77,   76,   75,   73,   72,
       71,   70,   69,   68,   67,   66,   63,   62,   61,   60,

       52,   50,   49,   47,   45,   44,    3,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Gmsh.l"
#define INITIAL 0
#line 2 "Gmsh.l"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "Gmsh.h"
#include "Geo.h"
#include "CAD.h"
#include "Gmsh.tab.cpp.h"

char   TmpString[1024];
int    yywhere = INFILE;
int    yylineno = 1;

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_ALWAYS_INTERACTIVE 1

#define YY_INPUT(buf,result,max_size)					\
   if ( yy_current_buffer->yy_is_interactive )				\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < max_size &&					\
	       (c = getc( yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;						\
       if ( c == '\n' ){						\
	 buf[n++] = (char) c;						\
	 yylineno++;							\
       }								\
       if ( c == EOF && ferror( yyin ) )				\
	 YY_FATAL_ERROR( "input in flex scanner failed" );		\
       result = n;							\
     }									\
   else if ( ((result = fread( buf, 1, max_size, yyin )) == 0)		\
	     && ferror( yyin ) )					\
     YY_FATAL_ERROR( "input in flex scanner failed" );

#line 1010 "Gmsh.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 60 "Gmsh.l"


#line 1164 "Gmsh.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 980 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1208 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "Gmsh.l"
/* none */ ;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 65 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 66 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "Gmsh.l"
{parsestring('\"'); return tBIGSTR;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 68 "Gmsh.l"
{parsestring('\''); return tBIGSTR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "Gmsh.l"
{yylval.d = NEWREG(); return tDOUBLE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "Gmsh.l"
{yylval.d = NEWPOINT(); return tDOUBLE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 71 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "Gmsh.l"
return tAcos ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "Gmsh.l"
return tAcos ;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "Gmsh.l"
return tAsin;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "Gmsh.l"
return tAsin;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "Gmsh.l"
return tAtan ;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "Gmsh.l"
return tAtan ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "Gmsh.l"
return tAtan2 ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "Gmsh.l"
return tAtan2 ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tAssociation;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tAttractor;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 86 "Gmsh.l"
return tBump;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 87 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 88 "Gmsh.l"
return tBounds;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tCeil ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tCosh ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 92 "Gmsh.l"
return tCos ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 93 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tCircle;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tComplex;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tColor;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tSpline;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tDelete;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tDilate;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tDuplicata;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tExp ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tEllipsis;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tELLIPSE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tFabs ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tFloor ;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tFmod ;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tGeneral;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tGeometry;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tHypot ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tInclude;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tKnots;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tLength;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tLine;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tLoop;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tLog ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tLog10 ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tLayers;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tMesh;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tModulo ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tOffset;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tOrder;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tOptions;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tPi;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tPlane;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tPoint;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tProgression;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tProgression;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 145 "Gmsh.l"
return tParametric;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tPostProcessing;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tPrint;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tRotate;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tRuled;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tSqrt ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tSin ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 155 "Gmsh.l"
return tSinh ;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tSpline;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tSurface;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tTanh ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tTan;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 165 "Gmsh.l"
return tTrimmed;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tUsing;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 169 "Gmsh.l"
return tView;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tVolume;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tWith;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tFor;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tScript;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tExit;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tMerge;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 180 "Gmsh.l"
return tScalarTetrahedron;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tVectorTetrahedron;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tTensorTetrahedron;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tScalarTriangle;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tVectorTriangle;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tTensorTriangle;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tScalarLine;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tVectorLine;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tTensorLine;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tScalarPoint;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 190 "Gmsh.l"
return tVectorPoint;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tTensorPoint;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tCARTESIAN_POINT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tB_SPLINE_SURFACE_WITH_KNOTS;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tB_SPLINE_CURVE_WITH_KNOTS;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tUNSPECIFIED;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tCONTINUOUS;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tFALSE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tTRUE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tU;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 202 "Gmsh.l"
return tV;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tORIENTED_EDGE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tEDGE_CURVE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tEDGE_LOOP;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tVERTEX_POINT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tFACE_OUTER_BOUND;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tFACE_BOUND;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tADVANCED_FACE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 210 "Gmsh.l"
return tLine;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tVECTOR;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tDIRECTION;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tAXIS2_PLACEMENT_3D;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tPLANE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tHEADER;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tDATA;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 217 "Gmsh.l"
return tFILE_SCHEMA;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tFILE_NAME;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tFILE_DESCRIPTION;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tISO;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tENDISO;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 222 "Gmsh.l"
return tENDSEC;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tCLOSED_SHELL;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return  tADVANCED_BREP_SHAPE_REPRESENTATION;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tMANIFOLD_SOLID_BREP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tCYLINDRICAL_SURFACE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tCONICAL_SURFACE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tTOROIDAL_SURFACE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tCIRCLE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tTRIMMED_CURVE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tGEOMETRIC_SET;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tCOMPOSITE_CURVE_SEGMENT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 233 "Gmsh.l"
return tCOMPOSITE_CURVE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tPRODUCT_DEFINITION;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tPRODUCT_DEFINITION_SHAPE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tSHAPE_DEFINITION_REPRESENTATION;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tVertex;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tFacet;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tNormal;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 241 "Gmsh.l"
return tOuter;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 242 "Gmsh.l"
return tLoopSTL;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tEndLoop;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tEndFacet;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 245 "Gmsh.l"
{skipline();return tEndSolid;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 246 "Gmsh.l"
{skipline();return tSolid;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 248 "Gmsh.l"
{yylval.d = (double)atoi((char*)(yytext+1)); return tDOUBLE;}
	YY_BREAK
case 159:
#line 251 "Gmsh.l"
case 160:
#line 252 "Gmsh.l"
case 161:
#line 253 "Gmsh.l"
case 162:
YY_RULE_SETUP
#line 253 "Gmsh.l"
{yylval.d = atof((char *)yytext); return tDOUBLE;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 255 "Gmsh.l"
{yylval.c = strsave((char*)yytext); return tSTRING;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 257 "Gmsh.l"
return yytext[0];
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 259 "Gmsh.l"
ECHO;
	YY_BREAK
#line 2063 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 980 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 980 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 979);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 259 "Gmsh.l"


#undef yywrap

int yywrap() {return 1;}

void skipcomments(void) {
  int c;

  while (1) {
    while ((c=yyinput()) != '*'){
      if(c == EOF) {
        fprintf(stderr, "Error: End of File in Commented Region\n") ;
        exit(1);
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar){
  int c, i;

  c = yyinput();
  i = 0;
  while (c != endchar) {
    TmpString[i++] = c;
    c = yyinput();
  }
  TmpString[i++] = '\0';
  yylval.c = strsave(TmpString);
}

char *strsave(char *ptr){
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline(void)
{
   while (yyinput() != '\n') ;
}

