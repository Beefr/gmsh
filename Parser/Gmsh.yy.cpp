#line 2 "Gmsh.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/gmsh/Parser/Gmsh.yy.cpp,v 1.123 2001-11-12 08:21:18 geuzaine Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
static yyconst short int yy_accept[1019] =
    {   0,
        0,    0,  192,  190,    1,    1,  190,    5,  184,  190,
        6,  190,  190,  190,  190,  190,  185,   17,    2,  190,
       12,  190,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  190,  190,    0,    0,   25,  184,   21,   15,   22,
       13,   23,   14,    0,  187,    0,    0,    0,    0,    3,
        4,   16,   19,  186,  185,    0,   27,   24,   28,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,   72,   71,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,   88,  189,  189,  189,  189,
      189,  189,  189,  189,  124,  127,  118,  121,  189,  189,
      189,  189,  189,  189,  130,  131,  126,  189,  129,  189,
      120,  123,  189,  189,  189,  189,  125,  128,  119,  122,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
       20,   26,    0,    0,   18,    0,  137,  138,  139,  140,

      186,    0,    0,  188,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,   44,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,   57,  189,  189,  189,  189,
      189,  189,   68,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,   78,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  102,
      189,  189,  189,  189,  189,  189,  189,  189,  113,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,    0,    0,    0,  187,    0,    0,
      186,  189,  189,  189,  189,   29,  189,  189,  189,   31,
       33,  189,  189,  189,  189,  189,   39,  189,  189,  189,
      189,  189,  189,   52,  189,   42,  189,  189,  189,  189,
      189,   43,  154,  189,  189,  189,   56,  189,  189,  189,
        0,  189,  189,  189,  189,   64,  189,  189,  189,   65,
      189,   67,  189,  189,  189,  189,    0,  189,  189,  148,
      189,  189,   76,  189,   77,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,   99,  189,  189,  189,  189,  189,  103,  189,
      189,  101,  189,  189,  189,  189,  189,  189,  112,  189,
      189,  189,  189,  189,  189,  117,  189,  189,  189,  189,
      179,    9,    8,  189,   10,   11,  189,  189,  189,  189,
        0,    0,    0,  186,  189,  189,  189,  189,  189,  189,
      189,   35,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,   49,  189,  189,
      189,  189,  189,  189,  189,    0,  189,  189,  189,   63,
      189,  189,  189,   66,  189,  189,  189,   70,    0,  189,
       74,  189,  189,   79,  189,  189,  189,  189,  189,   85,

      189,   86,  152,  189,  189,  189,   89,  189,   90,   91,
      189,  189,  189,  189,  189,   98,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  115,  189,  189,
      189,  189,  189,  189,  176,  189,  189,  178,  183,  189,
        0,    0,  189,  189,  189,  189,   30,   32,   34,  189,
      189,  189,   38,   41,  189,  167,  189,  189,  189,  189,
      189,  189,   46,  189,  189,  189,  189,   53,   54,  189,
      189,  189,  189,    0,  160,  189,  189,   62,  189,  189,
      189,  189,  189,  189,  189,  189,  153,    0,  189,   80,
       75,  189,  189,  189,   82,   81,  189,  189,  189,  189,

       95,   94,  189,  189,  100,   97,  189,  104,  189,  108,
      189,  189,  189,  189,  189,  189,  189,  189,  149,  189,
      116,  189,  189,  189,    7,  177,  175,    0,    0,  189,
      189,  189,  189,   36,  189,   40,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,   48,  189,  189,  189,
      189,   61,    0,  189,  189,   59,  189,  189,  189,  189,
      189,  189,  189,    0,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  107,  189,  105,  189,  189,
      189,  189,  189,  114,  189,  189,  180,  189,    0,    0,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  189,    0,
       58,   60,  189,  189,  189,  189,  189,   69,  189,    0,
      189,  189,   83,   84,  189,  189,  189,   87,  189,  189,
      189,  189,  106,  189,  189,  189,  189,  189,  181,  182,
        0,    0,  189,  189,  189,  189,   37,  189,  189,  189,
      189,  189,  189,  189,  189,   47,  189,  150,   55,  189,
      143,    0,  189,  189,  189,  156,  189,  189,    0,   73,
      189,  189,  189,  189,  189,   96,  189,  109,  189,  189,
      189,  111,  189,    0,    0,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,   51,  189,   50,

      142,    0,  146,  189,  189,  189,  189,    0,  189,  189,
      189,   93,  189,  189,  189,  189,  189,  189,    0,    0,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,    0,  189,  189,  155,  189,    0,  189,
      189,  189,   92,  189,  189,  189,  110,  189,  136,    0,
      136,  189,  189,  189,  189,  189,  189,  189,  161,  189,
      189,  189,  189,    0,  189,  189,  189,  158,  189,  189,
      189,  189,  189,  189,  144,  135,  189,  147,  135,  189,
      189,  189,  189,  189,  189,  189,  189,    0,  189,  189,
      169,  189,  141,  189,  189,  189,  168,  189,  189,  189,

      189,  189,  189,  189,  189,   45,    0,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  132,  171,  165,
      189,    0,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  159,  145,  157,  189,  189,  189,
      166,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  151,  189,  189,  189,  189,  189,  172,  189,  189,
      189,  189,  189,  164,  163,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  170,  189,
      189,  189,  189,  189,  173,  189,  189,  134,  189,  189,

      189,  189,  189,  189,  133,  189,  189,  189,  189,  189,
      189,  189,  189,  174,  189,  189,  162,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
        1,   48,    1,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,   75,    1,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[1024] =
    {   0,
        0,    0, 1282,   51,   52, 1283,   57,   54,   70,   75,
       55,   67,   80,   81,  113,   95,  132,   73,   79,   89,
      111,  119,  125,  133,  179,  140,  181,  189,  135,  184,
      204,   83,  127,  222,  141,  208,  220,  238,  249,  293,
      351,  212,  274,  248,  264,  147,  267,  268,  218,  282,
      295,  271,  197, 1243, 1243, 1283,  253, 1283, 1283, 1283,
     1283, 1283, 1283, 1267,  325, 1266, 1265,  188, 1264, 1283,
     1283, 1283, 1283,  355,  388,  397, 1283, 1283, 1283,    0,
     1237, 1230, 1236, 1240, 1208, 1218, 1211,  131, 1204, 1226,
     1192, 1196, 1203, 1223, 1222, 1223,   83, 1225,  160, 1201,

     1208, 1191,  287, 1214, 1215, 1194, 1193, 1202, 1187, 1220,
     1214, 1221, 1187, 1193,  265, 1219, 1209, 1192, 1179, 1178,
     1174, 1177, 1200, 1213, 1172, 1197,    0, 1166, 1170, 1195,
     1158, 1168, 1167,  226, 1191, 1195, 1159, 1172, 1158, 1191,
     1169, 1197, 1182, 1153, 1145,    0,  119,  292,   77, 1155,
      133, 1148, 1155, 1190,    0,    0,    0,    0, 1151,  196,
     1146, 1145, 1144, 1148,    0,    0,    0, 1168,    0, 1175,
        0,    0, 1144,  302, 1147,  338,    0,    0,    0,    0,
     1144, 1135, 1149, 1149, 1137, 1128, 1132, 1129, 1136, 1129,
     1283, 1283, 1157, 1152, 1283,  408, 1283, 1283, 1283, 1283,

      413,  422,  381,  429, 1155, 1167, 1149, 1148, 1121,  333,
     1125, 1124, 1119, 1124, 1144, 1124, 1119, 1116, 1137, 1152,
     1136, 1137, 1143, 1142, 1113, 1111, 1111, 1104, 1117, 1114,
     1104, 1102, 1108, 1140, 1135, 1108, 1111, 1089, 1099, 1130,
     1125,  344, 1098,  352, 1087,    0, 1088, 1125, 1124, 1084,
     1087, 1096,    0, 1096, 1111, 1119, 1082, 1133, 1089, 1074,
     1113, 1086, 1083, 1084, 1122, 1072, 1103, 1085, 1076, 1063,
     1080, 1102, 1075, 1091, 1100, 1076, 1058, 1062, 1067, 1060,
     1067, 1058, 1063, 1065, 1054, 1047, 1065, 1060, 1074, 1055,
     1053, 1052, 1041,  395, 1053, 1046, 1068, 1069, 1047, 1041,

     1041, 1039, 1058, 1057, 1029, 1040,  393, 1042, 1031,  398,
     1033, 1039, 1034, 1023, 1048, 1050,  440,  455,  464,  469,
      474, 1046, 1050, 1047, 1069,    0, 1021, 1025, 1032,    0,
     1065, 1030, 1021, 1043, 1023, 1023,    0, 1047, 1039, 1045,
     1034, 1045, 1033,    0, 1000,    0, 1018, 1007, 1000,  999,
     1004,    0,    0, 1037,  994,  993,    0, 1002, 1010, 1019,
     1025, 1028,  991,  991,  998,    0,  983, 1002, 1001,    0,
      983,    0,  980, 1019, 1018,  977, 1029,  977,  975,    0,
      975,  972,    0, 1025,    0, 1009,  243,  983,  976,  968,
      997,  967, 1004,  988,  969,  971,  974,  969,  958,  959,

      956,  957,    0,  961,  955,  952,  966,  990,    0,  955,
      954,    0,  965,  948,  963,  958,  979,  974,    0,  942,
      947,  951,  968,  977,  943,    0,  953,  939,  938,  932,
        0,    0,    0,  945,    0,    0,  948,  931,  943,  941,
      962,  965,  479,  484,  960,  965,  962,  940,  921,  925,
      924,    0,  933,  922,  951,  916,  914,  939,  951,  951,
      936,  952,  948,  914,  921,  918,  917,  928,  915,  926,
      913,  912,  913,  330,  923,  922,  936,  320,  895,    0,
      907,  438,  476,    0,  901,  916,  917,    0,  942,  888,
        0,  887,  896,    0,  914,  901,  892,  882,  885,    0,

      905,    0,    0,  920,  891,  892,    0,  881,    0,    0,
      887,  887,  889,  877,  884,    0,  888,  882,  867,  866,
      879,  880,  863,  903,  901,  406,  874,    0,  887,  880,
      871,  872,  860,  862,    0,  865,  860,    0,    0,  847,
      881,  891,  879,  887,  888,  874,    0,    0,  896,  843,
      856,  872,    0,    0,  876,    0,  858,  874,  870,  864,
      843,  834,    0,  839,  850,  827,  866,    0,    0,  847,
      853,  857,  866,  855,    0,  834,  833,    0,  836,  851,
      845,  859,  862,  859,  821,  843,    0,  865,  827,    0,
        0,  845,  817,  804,    0,    0,  849,  834,  807,  824,

        0,    0,  806,  814,    0,    0,  844,    0,  815,    0,
      814,  814,  801,  842,  838,  806,  813,  809,    0,  812,
        0,  806,  795,  800,    0,    0,    0,  814,  824,  812,
      827,  821,  817,    0,  788,    0,  822,  825,  807,  805,
      797,  813,  804,  789,  790,  790,    0,  802,  771,  798,
      799,    0,  825,  768,  782,    0,  790,  790,  790,  794,
      798,  766,  795,  812,  773,  797,  764,  768,  794,  771,
      753,  758,  750,  754,  787,    0,  756,    0,  740,  777,
      762,  748,  741,    0,  769,  739,    0,  753,  767,  775,
      765,  753,  772,  776,  733,  749,  760,  765,  767,  753,

      767,  729,  725,  736,  729,  751,  736,  739,  741,  762,
        0,    0,   54,   84,   88,  106,  108,    0,  153,  214,
      167,  256,    0,    0,  271,  300,  318,    0,  322,  328,
      381,  348,    0,  386,  423,  393,  398,  421,    0,    0,
      434,  472,  462,  481,  475,  482,    0,  483,  462,  484,
      465,  472,  492,  457,  461,    0,  466,    0,    0,  493,
        0,  508,  496,  485,  486,    0,  491,  479,  518,    0,
      489,  503,  504,  481,  471,    0,  503,    0,  495,  494,
      470,    0,  507,  499,  513,  501,  503,  520,  517,  518,
      504,  505,  510,  515,  525,  512,  518,    0,  487,    0,

        0,  538,    0,  507,  525,  534,  518,  544,  523,  535,
      534,    0,  502,  528,  523,  527,  514,  532,    0,  543,
      570,  545,  558,  558,  550,  547,  548,  556,  560,  553,
      568,  549,  531,  586,  576,  563,    0,  575,  589,  570,
      576,  575,    0,  576,  569,  566,    0,  569, 1283,    0,
        0,  573,  585,  646,  586,  571,  587,  585,    0,  579,
      596,  580,  564,  606,  586,  583,  584, 1283,  595,  600,
      592,  588,  602,  604,    0, 1283,  584,    0,    0,  597,
      607,  612,  600,  594,  613,  597,  589,  631,  600,  612,
        0,  622,    0,  628,  629,  638,    0,  622,  622,  621,

      645,  630,  645,  646,  635,    0,  660,  640,  640,  630,
      638,  643,  656,  652,  635,  640,  658,    0,  638,    0,
      659,  674,  663,  654,  667,  661,  658,  668,  673,  681,
      667,  651,  660,  678, 1283,    0,    0,  663,  666,  656,
        0,  667,  680,  666,  664,  682,  685,  684,  676,  674,
      687,    0,  685,  685,  688,  691,  681,  674,  696,  676,
      677,  685,  692,    0,    0,  688,  691,  691,  698,  702,
      706,  704,  696,  709,  701,  690,  703,  717,  714,  704,
      706,  711,  704,  708,  707,  709,  708,  714,    0,  724,
      725,  726,  714,  718,    0,  720,  717,    0,  717,  718,

      733,  721,  739,  727,    0,  723,  724,  735,  744,  731,
      728,  734,  740,    0,  735,  737,    0, 1283,  772,  775,
      778,  781,  784
    } ;

static yyconst short int yy_def[1024] =
    {   0,
     1018,    1, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1018, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1018, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1018, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1018,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1018, 1018, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1018, 1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1018,
     1021, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1018, 1019, 1019, 1019, 1019, 1018, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1022,
     1019, 1019, 1019, 1023, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1018, 1019, 1019, 1019, 1018, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1018, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1018, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019,    0, 1018, 1018,
     1018, 1018, 1018
    } ;

static yyconst short int yy_nxt[1360] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   32,   32,    4,   32,   32,
       32,   32,   32,   45,   46,   32,   32,   32,   32,   47,
       32,   48,   49,   32,   32,   32,   50,   32,   32,   51,
       32,   32,   32,   32,   52,   53,   54,   54,   56,   54,
       54,   58,   54,   57,   57,   57,   57,   57,   59,   60,
      763,   62,   54,   55,   55,   54,   55,   55,   54,   55,

       54,   61,   63,   70,   54,   54,   54,   71,   81,   55,
       77,  764,   55,  765,   54,   55,   72,   55,  222,  223,
       54,   55,   55,   55,   64,   83,   65,   65,   65,   65,
       65,   55,   78,  766,  282,  767,   54,   55,   54,  283,
       79,   66,   73,   74,   54,   75,   75,   75,   75,   75,
       81,   82,   81,   55,   67,   68,   69,   54,   81,   76,
       81,   55,  123,  104,  135,   81,   81,   83,  278,   83,
       84,  105,   81,   89,   55,   83,   85,   83,  768,  136,
      212,   90,   83,   83,  285,   76,   91,  279,  129,   83,
       86,   87,   88,  106,  137,   92,  184,  107,  213,  199,

      286,   93,   94,  138,   81,  108,   81,  110,  109,   81,
       95,  124,  116,   96,   81,  111,   97,  112,  192,  225,
      117,   83,   54,   83,  194,   98,   83,  226,   99,   81,
      769,   83,  100,   81,  770,  101,  102,   81,  118,   55,
      113,  103,  114,   81,  126,   81,   83,   81,  119,  120,
       83,  121,  115,  130,   83,  291,  125,  122,  127,  140,
       83,  292,   83,   81,   83,  128,   57,   57,   57,   57,
       57,  131,  142,   81,   81,  132,  139,  143,  175,  133,
       83,  265,  496,  497,  134,  141,  188,  144,  266,   81,
       83,   83,   81,   81,  145,  146,   54,  147,  150,   81,

      148,  176,  151,  149,  771,  182,   83,   81,  177,   83,
       83,  152,  178,   55,  179,  180,   83,  153,   81,  772,
       81,  186,  245,  154,   83,  183,  773,  155,  246,  185,
      187,  156,  247,  157,  158,   83,  181,   83,   65,   65,
       65,   65,   65,  230,  189,  191,  231,  232,  190,  280,
      159,  300,  196,  233,  361,  571,  160,  161,  327,  301,
      162,  163,  281,  303,  572,  164,  165,  166,  201,  201,
      201,  201,  201,  328,  329,  774,   81,  304,  196,  775,
      364,  776,  202,  365,  362,  167,  576,  577,  168,  169,
      170,  171,  172,   83,  204,  204,  204,  204,  204,   74,

      173,   75,   75,   75,   75,   75,  203,  203,  202,  777,
      204,  204,  204,  204,  204,   76,  174,  317,  317,  778,
      413,  318,  318,  318,  318,  318,  201,  201,  201,  201,
      201,  320,  320,  414,  779,  321,  321,  321,  321,  321,
      319,   76,  204,  204,  204,  204,  204,  427,  780,  432,
      781,  782,  428,  318,  318,  318,  318,  318,  783,  429,
      616,  433,  580,  434,  435,  617,  319,  436,  318,  318,
      318,  318,  318,  443,  443,  581,  784,  444,  444,  444,
      444,  444,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  582,  785,  786,  787,  789,  790,  791,  788,
      793,  794,  583,  795,  796,  797,  584,  798,  799,  800,
      801,  802,  803,  792,  804,  805,  806,  807,  808,  809,
      810,  811,  812,  813,  814,  815,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  829,
      830,  831,  832,  833,  834,  835,  836,  837,  838,  839,
      840,  841,  842,  843,  844,  845,  846,  847,  848,  850,
      849,  849,  852,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  853,  854,  855,  856,  857,  849,  849,
      849,  849,  849,  858,  859,  860,  861,  862,  863,  864,

      865,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  877,  878,  880,  881,  882,  883,  849,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  849,  849,  876,  876,  910,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  911,
      912,  913,  914,  915,  876,  876,  876,  876,  876,  916,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  876,  940,  941,  942,  943,  944,  945,

      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      876,  876,  966,  967,  968,  969,  970,  971,  972,  973,
      974,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  991,  992,  993,
      994,  995,  996,  997,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017,   80,  849,  762,  849,  851,  761,
      851,  876,  760,  876,  879,  759,  879,  758,  757,  756,
      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,

      745,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,

      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  579,
      578,  575,  574,  573,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,

      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  442,  441,
      440,  439,  438,  437,  431,  430,  426,  425,  424,  423,

      422,  421,  420,  419,  418,  417,  416,  415,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  363,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  326,  325,  324,
      323,  322,  316,  315,  314,  313,  312,  311,  310,  309,

      308,  307,  306,  305,  302,  299,  298,  297,  296,  295,
      294,  293,  290,  289,  288,  287,  284,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  229,  228,  227,  224,
      221,  220,  219,  218,  217,  216,  215,  214,  211,  210,
      209,  208,  207,  206,  205,  200,  198,  197,  195,  194,
      193, 1018,    3, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018
    } ;

static yyconst short int yy_chk[1360] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    5,    7,    8,
       11,   10,    7,    9,    9,    9,    9,    9,   12,   13,
      713,   14,   12,    4,    5,    9,    8,   11,   18,    7,

       10,   13,   14,   16,   19,   13,   14,   16,   32,   12,
       20,  714,    9,  715,   20,   18,   16,   10,   97,   97,
       16,   19,   13,   14,   15,   32,   15,   15,   15,   15,
       15,   20,   21,  716,  149,  717,   21,   16,   15,  149,
       22,   15,   16,   17,   22,   17,   17,   17,   17,   17,
       23,   23,   33,   21,   15,   15,   15,   17,   24,   17,
       29,   22,   29,   26,   35,   26,   35,   23,  147,   33,
       23,   26,   46,   24,   17,   24,   23,   29,  719,   35,
       88,   24,   26,   35,  151,   17,   24,  147,   33,   46,
       23,   23,   23,   26,   35,   24,   46,   26,   88,   68,

      151,   24,   25,   35,   25,   26,   27,   27,   26,   30,
       25,   30,   28,   25,   28,   27,   25,   27,   53,   99,
       28,   25,   53,   27,   68,   25,   30,   99,   25,   31,
      720,   28,   25,   36,  721,   25,   25,   42,   28,   53,
       27,   25,   27,   49,   31,   37,   31,   34,   28,   28,
       36,   28,   27,   34,   42,  160,   30,   28,   31,   37,
       49,  160,   37,   38,   34,   31,   57,   57,   57,   57,
       57,   34,   38,   44,   39,   34,   36,   38,   42,   34,
       38,  134,  387,  387,   34,   37,   49,   38,  134,   45,
       44,   39,   47,   48,   38,   38,   52,   38,   39,   43,

       38,   43,   39,   38,  722,   44,   45,   50,   43,   47,
       48,   39,   43,   52,   43,   43,   43,   39,   40,  725,
       51,   48,  115,   40,   50,   45,  726,   40,  115,   47,
       48,   40,  115,   40,   40,   40,   43,   51,   65,   65,
       65,   65,   65,  103,   50,   52,  103,  103,   51,  148,
       40,  174,   65,  103,  242,  474,   40,   40,  210,  174,
       40,   40,  148,  176,  474,   40,   41,   41,   74,   74,
       74,   74,   74,  210,  210,  727,   41,  176,   65,  729,
      244,  730,   74,  244,  242,   41,  478,  478,   41,   41,
       41,   41,   41,   41,  203,  203,  203,  203,  203,   75,

       41,   75,   75,   75,   75,   75,   76,   76,   74,  731,
       76,   76,   76,   76,   76,   75,   41,  196,  196,  732,
      294,  196,  196,  196,  196,  196,  201,  201,  201,  201,
      201,  202,  202,  294,  734,  202,  202,  202,  202,  202,
      201,   75,  204,  204,  204,  204,  204,  307,  735,  310,
      736,  737,  307,  317,  317,  317,  317,  317,  738,  307,
      526,  310,  482,  310,  310,  526,  201,  310,  318,  318,
      318,  318,  318,  319,  319,  482,  741,  319,  319,  319,
      319,  319,  320,  320,  320,  320,  320,  321,  321,  321,
      321,  321,  443,  443,  443,  443,  443,  444,  444,  444,

      444,  444,  483,  742,  743,  744,  745,  746,  748,  744,
      749,  750,  483,  751,  752,  753,  483,  754,  755,  757,
      760,  762,  763,  748,  764,  765,  767,  768,  769,  771,
      772,  773,  774,  775,  777,  779,  780,  781,  783,  784,
      785,  786,  787,  788,  789,  790,  791,  792,  793,  794,
      795,  796,  797,  799,  802,  804,  805,  806,  807,  808,
      809,  810,  811,  813,  814,  815,  816,  817,  818,  820,
      821,  821,  822,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  823,  824,  825,  826,  827,  821,  821,
      821,  821,  821,  828,  829,  830,  831,  832,  833,  834,

      835,  836,  838,  839,  840,  841,  842,  844,  845,  846,
      848,  852,  853,  855,  856,  857,  858,  821,  860,  861,
      862,  863,  864,  865,  866,  867,  869,  870,  871,  872,
      873,  874,  877,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  821,  821,  854,  854,  892,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  894,
      895,  896,  898,  899,  854,  854,  854,  854,  854,  900,
      901,  902,  903,  904,  905,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  917,  919,  921,  922,  923,
      924,  925,  926,  854,  927,  928,  929,  930,  931,  932,

      933,  934,  938,  939,  940,  942,  943,  944,  945,  946,
      947,  948,  949,  950,  951,  953,  954,  955,  956,  957,
      854,  854,  958,  959,  960,  961,  962,  963,  966,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  990,  991,  992,  993,  994,  996,  997,  999, 1000,
     1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011,
     1012, 1013, 1015, 1016, 1019, 1020,  710, 1020, 1021,  709,
     1021, 1022,  708, 1022, 1023,  707, 1023,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  695,  694,

      693,  692,  691,  690,  689,  688,  686,  685,  683,  682,
      681,  680,  679,  677,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  655,  654,  653,  651,  650,  649,  648,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      635,  633,  632,  631,  630,  629,  628,  624,  623,  622,
      620,  618,  617,  616,  615,  614,  613,  612,  611,  609,
      607,  604,  603,  600,  599,  598,  597,  594,  593,  592,
      589,  588,  586,  585,  584,  583,  582,  581,  580,  579,
      577,  576,  574,  573,  572,  571,  570,  567,  566,  565,

      564,  562,  561,  560,  559,  558,  557,  555,  552,  551,
      550,  549,  546,  545,  544,  543,  542,  541,  540,  537,
      536,  534,  533,  532,  531,  530,  529,  527,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  515,  514,  513,
      512,  511,  508,  506,  505,  504,  501,  499,  498,  497,
      496,  495,  493,  492,  490,  489,  487,  486,  485,  481,
      479,  477,  476,  475,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  451,  450,  449,  448,  447,
      446,  445,  442,  441,  440,  439,  438,  437,  434,  430,

      429,  428,  427,  425,  424,  423,  422,  421,  420,  418,
      417,  416,  415,  414,  413,  411,  410,  408,  407,  406,
      405,  404,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  386,  384,  382,
      381,  379,  378,  377,  376,  375,  374,  373,  371,  369,
      368,  367,  365,  364,  363,  362,  361,  360,  359,  358,
      356,  355,  354,  351,  350,  349,  348,  347,  345,  343,
      342,  341,  340,  339,  338,  336,  335,  334,  333,  332,
      331,  329,  328,  327,  325,  324,  323,  322,  316,  315,
      314,  313,  312,  311,  309,  308,  306,  305,  304,  303,

      302,  301,  300,  299,  298,  297,  296,  295,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  252,  251,
      250,  249,  248,  247,  245,  243,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  209,  208,  207,
      206,  205,  194,  193,  190,  189,  188,  187,  186,  185,

      184,  183,  182,  181,  175,  173,  170,  168,  164,  163,
      162,  161,  159,  154,  153,  152,  150,  145,  144,  143,
      142,  141,  140,  139,  138,  137,  136,  135,  133,  132,
      131,  130,  129,  128,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  117,  116,  114,  113,  112,  111,  110,
      109,  108,  107,  106,  105,  104,  102,  101,  100,   98,
       96,   95,   94,   93,   92,   91,   90,   89,   87,   86,
       85,   84,   83,   82,   81,   69,   67,   66,   64,   55,
       54,    3, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Gmsh.l"
#define INITIAL 0
#line 2 "Gmsh.l"

// $Id: Gmsh.yy.cpp,v 1.123 2001-11-12 08:21:18 geuzaine Exp $

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "Gmsh.h"
#include "Numeric.h"
#include "Geo.h"
#include "CAD.h"
#include "Gmsh.tab.cpp.h"

char   TmpString[1024];
int    yywhere = INFILE;
int    yylineno = 1;

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_ALWAYS_INTERACTIVE 1

#define YY_INPUT(buf,result,max_size)					\
   if ( yy_current_buffer->yy_is_interactive )				\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < max_size &&					\
	       (c = getc( yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;						\
       if ( c == '\n' ){						\
	 buf[n++] = (char) c;						\
	 yylineno++;							\
       }								\
       if ( c == EOF && ferror( yyin ) )				\
	 YY_FATAL_ERROR( "input in flex scanner failed" );		\
       result = n;							\
     }									\
   else if ( ((result = fread( buf, 1, max_size, yyin )) == 0)		\
	     && ferror( yyin ) )					\
     YY_FATAL_ERROR( "input in flex scanner failed" );

#line 1047 "Gmsh.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 63 "Gmsh.l"


#line 1201 "Gmsh.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1019 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1283 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "Gmsh.l"
/* none */ ;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "Gmsh.l"
{parsestring('\"'); return tBIGSTR;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 70 "Gmsh.l"
{parsestring('\''); return tBIGSTR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 71 "Gmsh.l"
{yylval.d = NEWREG(); return tDOUBLE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "Gmsh.l"
{yylval.d = NEWPOINT(); return tDOUBLE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 73 "Gmsh.l"
{yylval.d = NEWLINE(); return tDOUBLE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 74 "Gmsh.l"
{yylval.d = NEWSURFACE(); return tDOUBLE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "Gmsh.l"
{yylval.d = NEWVOLUME(); return tDOUBLE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "Gmsh.l"
return tAFFECTPLUS ;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "Gmsh.l"
return tAFFECTMINUS ;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "Gmsh.l"
return tAFFECTTIMES ;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "Gmsh.l"
return tAFFECTDIVIDE ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tCROSSPRODUCT ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tOR ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 85 "Gmsh.l"
return tAND ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 86 "Gmsh.l"
return tPLUSPLUS ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 87 "Gmsh.l"
return tMINUSMINUS ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 88 "Gmsh.l"
return tEQUAL ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 89 "Gmsh.l"
return tNOTEQUAL ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tAPPROXEQUAL ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tLESSOREQUAL ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "Gmsh.l"
return tGREATEROREQUAL ;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tAcos ;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tAcos ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tAsin;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAsin;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tAtan ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tAtan ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tAtan2 ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tAtan2 ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tAttractor;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tBezier;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tBump;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tBounds;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tCeil ;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tCosh ;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tCos ;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tCircle;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tComplex;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tColor;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 118 "Gmsh.l"
return tSpline;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tCall;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tDelete;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tDilate;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tDuplicata;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tDraw;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tExp ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tEllipsis;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tELLIPSE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 132 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tExit;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tFabs ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tFloor ;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tFmod ;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tFor;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tFunction;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tHypot ;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tIn;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tIf;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 145 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tKnots;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tLength;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tLine;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tLoop;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tLog ;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tLog10 ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tLayers;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tModulo ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tMesh;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tOrder;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 165 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tPi;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tPlane;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tPoint;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 169 "Gmsh.l"
return tProgression;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tProgression;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 171 "Gmsh.l"
return tParametric;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 173 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tRotate;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tRuled;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tRand;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tReturn;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tSqrt ;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tSin ;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tSinh ;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tSpline;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tSurface;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tSprintf ;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tStrCat ;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tStrPrefix ;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 192 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tTanh ;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tTan;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tTrimmed;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tUsing;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tVolume;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tWith;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tScalarTetrahedron;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tVectorTetrahedron;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tTensorTetrahedron;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tScalarTriangle;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tVectorTriangle;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tTensorTriangle;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tScalarLine;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 210 "Gmsh.l"
return tVectorLine;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tTensorLine;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tScalarPoint;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tVectorPoint;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tTensorPoint;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tText2D;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tText3D;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tCARTESIAN_POINT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tB_SPLINE_SURFACE_WITH_KNOTS;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tB_SPLINE_CURVE_WITH_KNOTS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 222 "Gmsh.l"
return tUNSPECIFIED;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tCONTINUOUS;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tFALSE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tTRUE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tU;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tV;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tORIENTED_EDGE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tEDGE_CURVE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tEDGE_LOOP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tVERTEX_POINT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tFACE_OUTER_BOUND;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 233 "Gmsh.l"
return tFACE_BOUND;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tADVANCED_FACE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tLine;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tVECTOR;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tDIRECTION;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tAXIS2_PLACEMENT_3D;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tPLANE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tHEADER;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 241 "Gmsh.l"
return tDATA;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 242 "Gmsh.l"
return tFILE_SCHEMA;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tFILE_NAME;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tFILE_DESCRIPTION;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 245 "Gmsh.l"
return tISO;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 246 "Gmsh.l"
return tENDISO;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 247 "Gmsh.l"
return tENDSEC;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return tCLOSED_SHELL;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 249 "Gmsh.l"
return  tADVANCED_BREP_SHAPE_REPRESENTATION;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 250 "Gmsh.l"
return tMANIFOLD_SOLID_BREP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 251 "Gmsh.l"
return tCYLINDRICAL_SURFACE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 252 "Gmsh.l"
return tCONICAL_SURFACE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 253 "Gmsh.l"
return tTOROIDAL_SURFACE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 254 "Gmsh.l"
return tCIRCLE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 255 "Gmsh.l"
return tTRIMMED_CURVE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 256 "Gmsh.l"
return tGEOMETRIC_SET;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 257 "Gmsh.l"
return tCOMPOSITE_CURVE_SEGMENT;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 258 "Gmsh.l"
return tCOMPOSITE_CURVE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 259 "Gmsh.l"
return tPRODUCT_DEFINITION;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 260 "Gmsh.l"
return tPRODUCT_DEFINITION_SHAPE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 261 "Gmsh.l"
return tSHAPE_DEFINITION_REPRESENTATION;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 263 "Gmsh.l"
return tVertex;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 264 "Gmsh.l"
return tFacet;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 265 "Gmsh.l"
return tNormal;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 266 "Gmsh.l"
return tOuter;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 267 "Gmsh.l"
return tLoopSTL;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 268 "Gmsh.l"
return tEndLoop;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 269 "Gmsh.l"
return tEndFacet;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 270 "Gmsh.l"
{skipline();return tEndSolid;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 271 "Gmsh.l"
{skipline();return tSolid;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 273 "Gmsh.l"
{yylval.d = (double)atoi((char*)(yytext+1)); return tDOUBLE;}
	YY_BREAK
case 185:
#line 276 "Gmsh.l"
case 186:
#line 277 "Gmsh.l"
case 187:
#line 278 "Gmsh.l"
case 188:
YY_RULE_SETUP
#line 278 "Gmsh.l"
{yylval.d = atof((char *)yytext); return tDOUBLE;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 280 "Gmsh.l"
{yylval.c = strsave((char*)yytext); return tSTRING;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 282 "Gmsh.l"
return yytext[0];
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 284 "Gmsh.l"
ECHO;
	YY_BREAK
#line 2230 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1019 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1019 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1018);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 284 "Gmsh.l"


#undef yywrap

int yywrap() {return 1;}

void skipcomments(void) {
  int c;

  while (1) {
    while ((c=yyinput()) != '*'){
      if(c == EOF){
        Msg(GERROR, "End of file in commented region") ;
        return;
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar){
  int c, i;

  c = yyinput();
  i = 0;
  while (c != endchar) {
    TmpString[i++] = c;
    c = yyinput();
  }
  TmpString[i++] = '\0';
  yylval.c = strsave(TmpString);
}

char *strsave(char *ptr){
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline(void){
   while (yyinput() != '\n') ;
}

void skip_until(char *skip, char *until){
  int i, nb_skip;
  int l, l_skip, l_until;
  char chars[256];

  nb_skip = 0 ;

  if(skip)
    l_skip = strlen(skip);
  else
    l_skip = 0 ;

  l_until = strlen(until);

  while(1){
    while (1){
      chars[0] = yyinput();
      if(chars[0] == (char)EOF){
        Msg(GERROR, "Unexpected end of file") ;
	return;
      }
      if(chars[0] == until[0]) break;
      if(skip && chars[0] == skip[0]) break;
    }

    l = MAX(l_skip,l_until) ;
    for(i=1 ; i<l ; i++){
      chars[i] = yyinput();
      if(chars[i] == (char)EOF){
	l = i;
	break;
      }
    }

    if(!strncmp(chars,until,l_until)){
      if(!nb_skip){
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars,skip,l_skip)){
      nb_skip++;
    }
    else{
      for(i=1;i<l-1;i++){
	unput(chars[l-i]);
      }
    }

  }
}

