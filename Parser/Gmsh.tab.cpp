
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tPower	302
#define	tBump	303
#define	tProgression	304
#define	tAssociation	305
#define	tRotate	306
#define	tTranslate	307
#define	tSymmetry	308
#define	tDilate	309
#define	tExtrude	310
#define	tDuplicata	311
#define	tLoop	312
#define	tInclude	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tView	317
#define	tOffset	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tGeneral	340
#define	tGeometry	341
#define	tMesh	342
#define	tB_SPLINE_SURFACE_WITH_KNOTS	343
#define	tB_SPLINE_CURVE_WITH_KNOTS	344
#define	tCARTESIAN_POINT	345
#define	tTRUE	346
#define	tFALSE	347
#define	tUNSPECIFIED	348
#define	tU	349
#define	tV	350
#define	tEDGE_CURVE	351
#define	tVERTEX_POINT	352
#define	tORIENTED_EDGE	353
#define	tPLANE	354
#define	tFACE_OUTER_BOUND	355
#define	tEDGE_LOOP	356
#define	tADVANCED_FACE	357
#define	tVECTOR	358
#define	tDIRECTION	359
#define	tAXIS2_PLACEMENT_3D	360
#define	tISO	361
#define	tENDISO	362
#define	tENDSEC	363
#define	tDATA	364
#define	tHEADER	365
#define	tFILE_DESCRIPTION	366
#define	tFILE_SCHEMA	367
#define	tFILE_NAME	368
#define	tMANIFOLD_SOLID_BREP	369
#define	tCLOSED_SHELL	370
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	371
#define	tFACE_BOUND	372
#define	tCYLINDRICAL_SURFACE	373
#define	tCONICAL_SURFACE	374
#define	tCIRCLE	375
#define	tTRIMMED_CURVE	376
#define	tGEOMETRIC_SET	377
#define	tCOMPOSITE_CURVE_SEGMENT	378
#define	tCONTINUOUS	379
#define	tCOMPOSITE_CURVE	380
#define	tTOROIDAL_SURFACE	381
#define	tPRODUCT_DEFINITION	382
#define	tPRODUCT_DEFINITION_SHAPE	383
#define	tSHAPE_DEFINITION_REPRESENTATION	384
#define	tELLIPSE	385
#define	tTrimmed	386
#define	tSolid	387
#define	tEndSolid	388
#define	tVertex	389
#define	tFacet	390
#define	tNormal	391
#define	tOuter	392
#define	tLoopSTL	393
#define	tEndLoop	394
#define	tEndFacet	395
#define	UMINUS	396

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.11 2000-11-28 14:42:44 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Colors.h"
#include "Parser.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int            Force_ViewNumber = 0 ;
List_T         *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static unsigned int  *ptr ;
static int            i,j,k,flag,RecursionLevel=0;
static double         d;
static ExtrudeParams  extr;
static StringXPointer *ColorField ;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
int   Get_ColorForString(StringX4Int SX4I[], int alpha, 
			 char * string, int * FlagError);
void  Get_ColorPointerForString(StringXPointer SXP[], char * string,
				int * FlagError, unsigned int **Pointer);


#line 53 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1326
#define	YYFLAG		-32768
#define	YYNTBASE	157

#define YYTRANSLATE(x) ((unsigned)(x) <= 396 ? yytranslate[x] : 237)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   147,     2,     2,   150,
   152,   145,   143,   151,   144,     2,   146,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   141,
     2,   142,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   155,     2,   156,   149,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   153,     2,   154,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   148
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   521,   528,   537,   538,   541,   544,
   547,   550,   553,   556,   559,   562,   565,   568,   571,   574,
   576,   580,   581,   595,   597,   601,   602,   616,   618,   622,
   623,   637,   639,   643,   644,   664,   666,   670,   671,   691,
   693,   697,   698,   718,   720,   724,   725,   751,   753,   757,
   758,   784,   786,   790,   791,   817,   819,   823,   824,   856,
   858,   862,   863,   895,   897,   901,   902,   934,   939,   947,
   956,   969,   976,   982,   990,   998,  1011,  1019,  1029,  1047,
  1055,  1064,  1073,  1081,  1093,  1099,  1108,  1118,  1127,  1150,
  1171,  1180,  1189,  1195,  1204,  1212,  1221,  1227,  1239,  1245,
  1255,  1257,  1259,  1261,  1262,  1265,  1270,  1275,  1279,  1288,
  1301,  1310,  1323,  1332,  1345,  1357,  1373,  1375,  1378,  1388,
  1391,  1398,  1408,  1418,  1427,  1436,  1445,  1452,  1457,  1460,
  1465,  1466,  1469,  1470,  1476,  1477,  1483,  1484,  1490,  1491,
  1494,  1499,  1508,  1513,  1523,  1531,  1533,  1535,  1537,  1539,
  1541,  1543,  1547,  1551,  1555,  1559,  1563,  1567,  1570,  1573,
  1578,  1583,  1588,  1593,  1598,  1603,  1608,  1613,  1618,  1623,
  1630,  1635,  1640,  1645,  1650,  1655,  1660,  1667,  1674,  1681,
  1683,  1685,  1687,  1691,  1698,  1710,  1720,  1728,  1736,  1737,
  1741,  1743,  1747,  1748,  1752,  1756,  1758,  1762,  1763,  1765,
  1769,  1771,  1773,  1777
};

static const short yyrhs[] = {   159,
     0,   158,     0,   164,     0,   132,     0,   135,   136,   227,
   227,   227,   137,   138,   134,   227,   227,   227,   134,   227,
   227,   227,   134,   227,   227,   227,   139,   140,     0,   133,
     0,     0,   159,   160,     0,   161,     0,   163,     0,   162,
     0,     1,     6,     0,   106,     6,     0,   107,     6,     0,
   109,     6,     0,   108,     6,     0,   110,     6,     0,   111,
   150,   231,   151,     5,   152,     6,     0,   112,   150,   231,
   152,     6,     0,   113,   150,     5,   151,     5,   151,   231,
   151,   231,   151,     5,   151,     5,   151,     5,   152,     6,
     0,     3,     7,    90,   150,     5,   151,   230,   152,     6,
     0,     3,     7,    89,   150,     5,   151,   227,   151,   235,
   151,   226,   151,   226,   151,   226,   151,   235,   151,   235,
   151,   226,   152,     6,     0,     3,     7,    88,   150,     5,
   151,   227,   151,   227,   151,   233,   151,   226,   151,   226,
   151,   226,   151,   226,   151,   235,   151,   235,   151,   235,
   151,   235,   151,   226,   152,     6,     0,     3,     7,    96,
   150,     5,   151,     3,   151,     3,   151,     3,   151,   226,
   152,     6,     0,     3,     7,   100,   150,     5,   151,     3,
   151,   226,   152,     6,     0,     3,     7,   117,   150,     5,
   151,     3,   151,   226,   152,     6,     0,     3,     7,    98,
   150,     5,   151,   145,   151,   145,   151,   227,   151,   226,
   152,     6,     0,     3,     7,   101,   150,     5,   151,   235,
   152,     6,     0,     3,     7,   102,   150,     5,   151,   235,
   151,     3,   151,   226,   152,     6,     0,     3,     7,    97,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   103,
   150,     5,   151,     3,   151,   227,   152,     6,     0,     3,
     7,   105,   150,     5,   151,     3,   151,     3,   151,     3,
   152,     6,     0,     3,     7,   104,   150,     5,   151,   230,
   152,     6,     0,     3,     7,    99,   150,     5,   151,     3,
   152,     6,     0,     3,     7,    33,   150,     5,   151,     3,
   151,     3,   152,     6,     0,     3,     7,   115,   150,     5,
   151,   235,   152,     6,     0,     3,     7,   116,   150,     5,
   151,   235,   151,     3,   152,     6,     0,     3,     7,   114,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   118,
   150,     5,   151,     3,   151,   227,   152,     6,     0,     3,
     7,   119,   150,     5,   151,     3,   151,   227,   151,   227,
   152,     6,     0,     3,     7,   126,   150,     5,   151,     3,
   151,   227,   151,   227,   152,     6,     0,     3,     7,   120,
   150,     5,   151,     3,   151,   227,   152,     6,     0,     3,
     7,   130,   150,     5,   151,     3,   151,   227,   151,   227,
   152,     6,     0,     3,     7,   121,   150,     5,   151,     3,
   151,   235,   151,   235,   151,   226,   151,   226,   152,     6,
     0,     3,     7,   122,   150,     5,   151,   235,   152,     6,
     0,     3,     7,   123,   150,   124,   151,   226,   151,     3,
   152,     6,     0,     3,     7,   125,   150,     5,   151,   235,
   151,   226,   152,     6,     0,     3,     7,   127,   150,     5,
   151,     5,   151,     3,   151,     3,   152,     6,     0,     3,
     7,   128,   150,     5,   151,     5,   151,     3,   152,     6,
     0,     3,     7,   129,   150,     3,   151,     3,   152,     6,
     0,     0,   164,   165,     0,   166,     0,   204,     0,   205,
     0,   206,     0,   209,     0,   210,     0,   212,     0,   215,
     0,   216,     0,   211,     0,   217,     0,     1,     6,     0,
    62,     5,   153,   167,   154,     6,     0,    62,     5,    63,
   230,   153,   167,   154,     6,     0,     0,   167,   169,     0,
   167,   172,     0,   167,   175,     0,   167,   178,     0,   167,
   181,     0,   167,   184,     0,   167,   187,     0,   167,   190,
     0,   167,   193,     0,   167,   196,     0,   167,   199,     0,
   167,   202,     0,   227,     0,   168,   151,   227,     0,     0,
    75,   150,   227,   151,   227,   151,   227,   152,   170,   153,
   168,   154,     6,     0,   227,     0,   171,   151,   227,     0,
     0,    76,   150,   227,   151,   227,   151,   227,   152,   173,
   153,   171,   154,     6,     0,   227,     0,   174,   151,   227,
     0,     0,    77,   150,   227,   151,   227,   151,   227,   152,
   176,   153,   174,   154,     6,     0,   227,     0,   177,   151,
   227,     0,     0,    72,   150,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   152,   179,   153,   177,
   154,     6,     0,   227,     0,   180,   151,   227,     0,     0,
    73,   150,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   152,   182,   153,   180,   154,     6,     0,
   227,     0,   183,   151,   227,     0,     0,    74,   150,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   152,   185,   153,   183,   154,     6,     0,   227,     0,   186,
   151,   227,     0,     0,    69,   150,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   152,   188,   153,   186,   154,     6,     0,
   227,     0,   189,   151,   227,     0,     0,    70,   150,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   152,   191,   153,   189,
   154,     6,     0,   227,     0,   192,   151,   227,     0,     0,
    71,   150,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   151,   227,   152,
   194,   153,   192,   154,     6,     0,   227,     0,   195,   151,
   227,     0,     0,    66,   150,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   152,   197,
   153,   195,   154,     6,     0,   227,     0,   198,   151,   227,
     0,     0,    67,   150,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   152,   200,   153,
   198,   154,     6,     0,   227,     0,   201,   151,   227,     0,
     0,    68,   150,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   152,   203,   153,   201,
   154,     6,     0,     4,     7,   227,     6,     0,    30,   150,
   227,   152,     7,   230,     6,     0,    45,    30,   150,   227,
   152,     7,   235,     6,     0,    64,    30,   235,     7,   150,
   227,   151,   227,   151,   227,   152,     6,     0,    37,    38,
   235,     7,   227,     6,     0,    30,   153,   227,   154,     6,
     0,    33,   150,   227,   152,     7,   235,     6,     0,    35,
   150,   227,   152,     7,   235,     6,     0,    64,    33,   235,
     7,   153,   227,   151,   227,   151,   227,   154,     6,     0,
    31,   150,   227,   152,     7,   235,     6,     0,    31,   150,
   227,   152,     7,   235,    41,   230,     6,     0,    39,   150,
   227,   152,     7,   153,   227,   151,   227,   151,     5,   151,
     5,   151,     5,   154,     6,     0,    32,   150,   227,   152,
     7,   235,     6,     0,    45,    33,   150,   227,   152,     7,
   235,     6,     0,    33,    57,   150,   227,   152,     7,   235,
     6,     0,    78,   150,   227,   152,     7,   235,     6,     0,
    79,   150,   227,   152,     7,   235,    83,   235,    80,   227,
     6,     0,    33,   153,   227,   154,     6,     0,    41,    34,
   150,   227,   152,     7,   235,     6,     0,   131,    34,   150,
   227,   152,     7,   227,   235,     6,     0,    42,    34,   150,
   227,   152,     7,   235,     6,     0,    79,    34,    81,    82,
   150,   227,   152,     7,   233,    83,   153,   235,   151,   235,
   154,    80,   153,   227,   151,   227,   154,     6,     0,    79,
    34,   150,   227,   152,     7,   233,    83,   153,   235,   151,
   235,   154,    80,   153,   227,   151,   227,   154,     6,     0,
    45,    34,   150,   227,   152,     7,   235,     6,     0,    34,
    57,   150,   227,   152,     7,   235,     6,     0,    34,   153,
   227,   154,     6,     0,    44,    36,   150,   227,   152,     7,
   235,     6,     0,    36,   150,   227,   152,     7,   235,     6,
     0,    45,    36,   150,   227,   152,     7,   235,     6,     0,
    52,   230,   153,   207,   154,     0,    51,   153,   230,   151,
   230,   151,   227,   154,   153,   207,   154,     0,    53,   230,
   153,   207,   154,     0,    54,   153,   230,   151,   227,   154,
   153,   207,   154,     0,   209,     0,   208,     0,   206,     0,
     0,   208,   205,     0,    56,   153,   208,   154,     0,    60,
   153,   208,   154,     0,    58,     5,     6,     0,    55,    30,
   153,   227,   151,   230,   154,     6,     0,    55,    30,   153,
   227,   151,   230,   151,   230,   151,   227,   154,     6,     0,
    55,    33,   153,   227,   151,   230,   154,     6,     0,    55,
    33,   153,   227,   151,   230,   151,   230,   151,   227,   154,
     6,     0,    55,    34,   153,   227,   151,   230,   154,     6,
     0,    55,    34,   153,   227,   151,   230,   151,   230,   151,
   227,   154,     6,     0,    55,    34,   153,   227,   151,   230,
   154,   153,   213,   154,     6,     0,    55,    34,   153,   227,
   151,   230,   151,   230,   151,   227,   154,   153,   213,   154,
     6,     0,   214,     0,   213,   214,     0,    65,   153,   235,
   151,   235,   151,   235,   154,     6,     0,    59,     6,     0,
    43,    33,   235,     7,   227,     6,     0,    43,    33,   235,
     7,   227,    46,    49,   227,     6,     0,    43,    33,   235,
     7,   227,    46,    48,   227,     6,     0,    43,    34,   153,
   227,   154,     7,   235,     6,     0,    40,    34,   153,   227,
   154,     7,   235,     6,     0,    43,    36,   153,   227,   154,
     7,   235,     6,     0,    59,    34,   235,     7,   227,     6,
     0,    59,    34,   235,     6,     0,    61,     6,     0,    84,
   153,   218,   154,     0,     0,   218,   219,     0,     0,    85,
   220,   153,   223,   154,     0,     0,    86,   221,   153,   223,
   154,     0,     0,    87,   222,   153,   223,   154,     0,     0,
   224,   223,     0,     4,     7,     4,     6,     0,     4,     7,
   153,     4,   151,   227,   154,     6,     0,     4,     7,   225,
     6,     0,   153,   227,   151,   227,   151,   227,   151,   227,
   154,     0,   153,   227,   151,   227,   151,   227,   154,     0,
    91,     0,    92,     0,    93,     0,    94,     0,    95,     0,
   228,     0,   150,   227,   152,     0,   227,   144,   227,     0,
   227,   143,   227,     0,   227,   145,   227,     0,   227,   146,
   227,     0,   227,   149,   227,     0,   144,   227,     0,   143,
   227,     0,    10,   150,   227,   152,     0,    11,   150,   227,
   152,     0,    12,   150,   227,   152,     0,    13,   150,   227,
   152,     0,    14,   150,   227,   152,     0,    15,   150,   227,
   152,     0,    16,   150,   227,   152,     0,    17,   150,   227,
   152,     0,    18,   150,   227,   152,     0,    19,   150,   227,
   152,     0,    20,   150,   227,   151,   227,   152,     0,    21,
   150,   227,   152,     0,    22,   150,   227,   152,     0,    23,
   150,   227,   152,     0,    24,   150,   227,   152,     0,    25,
   150,   227,   152,     0,    26,   150,   227,   152,     0,    27,
   150,   227,   151,   227,   152,     0,    28,   150,   227,   151,
   227,   152,     0,    29,   150,   227,   151,   227,   152,     0,
     3,     0,     9,     0,     4,     0,   227,     8,   227,     0,
   227,     8,   155,   227,   156,   227,     0,   153,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   154,     0,   153,
   227,   151,   227,   151,   227,   151,   227,   154,     0,   153,
   227,   151,   227,   151,   227,   154,     0,   150,   227,   151,
   227,   151,   227,   152,     0,     0,   150,   232,   152,     0,
     5,     0,   232,   151,     5,     0,     0,   153,   234,   154,
     0,   150,   234,   152,     0,   235,     0,   234,   151,   235,
     0,     0,   227,     0,   153,   236,   154,     0,   227,     0,
   229,     0,   236,   151,   227,     0,   236,   151,   229,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   114,   116,   117,   124,   132,   146,   158,   160,   163,   165,
   166,   167,   170,   176,   181,   182,   183,   186,   190,   193,
   199,   204,   210,   218,   223,   227,   233,   238,   242,   247,
   251,   254,   259,   263,   267,   271,   276,   280,   283,   287,
   291,   295,   299,   303,   307,   310,   314,   317,   321,   324,
   333,   335,   341,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   360,   365,   371,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   390,
   393,   397,   403,   409,   412,   416,   422,   428,   431,   435,
   441,   447,   450,   454,   462,   468,   471,   475,   483,   489,
   492,   496,   504,   510,   513,   517,   529,   535,   538,   542,
   554,   560,   563,   567,   579,   585,   588,   592,   605,   611,
   614,   618,   631,   637,   640,   644,   657,   669,   683,   694,
   700,   719,   730,   738,   744,   750,   769,   775,   791,   798,
   804,   810,   816,   822,   841,   853,   859,   878,   899,   907,
   913,   919,   925,   937,   943,   949,   961,   967,   972,   977,
   984,   986,   987,   990,   995,  1006,  1024,  1039,  1070,  1076,
  1082,  1086,  1090,  1094,  1098,  1103,  1110,  1114,  1119,  1137,
  1147,  1165,  1182,  1199,  1220,  1240,  1260,  1277,  1301,  1312,
  1316,  1318,  1321,  1324,  1325,  1327,  1328,  1330,  1333,  1335,
  1338,  1349,  1359,  1369,  1377,  1453,  1455,  1456,  1457,  1458,
  1461,  1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,
  1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,
  1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,  1490,  1493,
  1495,  1496,  1507,  1514,  1527,  1536,  1544,  1552,  1562,  1566,
  1571,  1575,  1580,  1584,  1588,  1594,  1600,  1606,  1610,  1616,
  1629,  1635,  1644,  1648
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPoint","tCircle","tEllipsis",
"tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tPower","tBump","tProgression","tAssociation","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tOffset","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tGeneral","tGeometry",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'<'","'>'","'+'","'-'","'*'","'/'","'%'",
"UMINUS","'^'","'('","','","')'","'{'","'}'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","Colors","ColorSections","ColorSection","@13","@14","@15","ColorAffects",
"ColorAffect","RGBAExpr","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble", NULL
};
#endif

static const short yyr1[] = {     0,
   157,   157,   157,   158,   158,   158,   159,   159,   160,   160,
   160,   160,   161,   161,   161,   161,   161,   162,   162,   162,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   164,   164,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   166,   166,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   168,
   168,   170,   169,   171,   171,   173,   172,   174,   174,   176,
   175,   177,   177,   179,   178,   180,   180,   182,   181,   183,
   183,   185,   184,   186,   186,   188,   187,   189,   189,   191,
   190,   192,   192,   194,   193,   195,   195,   197,   196,   198,
   198,   200,   199,   201,   201,   203,   202,   204,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   206,   206,   206,   206,
   207,   207,   207,   208,   208,   209,   210,   211,   212,   212,
   212,   212,   212,   212,   212,   212,   213,   213,   214,   214,
   215,   215,   215,   215,   215,   215,   215,   215,   216,   217,
   218,   218,   220,   219,   221,   219,   222,   219,   223,   223,
   224,   224,   224,   225,   225,   226,   226,   226,   226,   226,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   228,
   228,   228,   229,   229,   230,   230,   230,   230,   231,   231,
   232,   232,   233,   233,   233,   234,   234,   235,   235,   235,
   236,   236,   236,   236
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     6,     8,     0,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     4,     7,     8,
    12,     6,     5,     7,     7,    12,     7,     9,    17,     7,
     8,     8,     7,    11,     5,     8,     9,     8,    22,    20,
     8,     8,     5,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     4,     4,     3,     8,    12,
     8,    12,     8,    12,    11,    15,     1,     2,     9,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     4,
     0,     2,     0,     5,     0,     5,     0,     5,     0,     2,
     4,     8,     4,     9,     7,     1,     1,     1,     1,     1,
     1,     3,     3,     3,     3,     3,     3,     2,     2,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     1,
     1,     1,     3,     6,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     0,     1,     3,
     1,     1,     3,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
    58,    62,    59,    60,    61,    63,   240,   242,   241,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   211,    12,     0,    13,    14,    16,    15,
    17,   249,   249,     0,    64,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
     0,     0,   258,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
     0,   258,   164,   189,     0,   258,   258,     0,     0,     0,
   191,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   219,   218,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   164,   164,     0,     0,     0,
     0,     0,   168,     0,     0,     0,    67,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   212,   214,   213,
   215,   216,   217,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   251,     0,     0,     0,     0,   128,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   261,   262,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   163,     0,   162,   161,     0,     0,     0,     0,     0,   166,
   165,   188,     0,   167,     0,     0,     0,     0,     0,     0,
     0,     0,   193,   195,   197,   190,   192,     0,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,     0,   231,
   232,   233,   234,   235,   236,     0,     0,     0,   214,   213,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   250,     0,    19,     0,     0,   133,   258,   258,
     0,   258,   145,     0,   153,   258,   258,     0,     0,   260,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   157,   159,     0,     0,
     0,     0,     0,    67,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,     0,
     0,   258,     0,     0,   258,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   258,   258,     0,     0,     0,     0,   258,
   258,     0,     0,     0,     0,     0,   258,     0,   258,     0,
     0,     0,     0,     0,   252,     0,   249,     0,     0,     0,
   258,     0,   258,     0,     0,     0,   243,   263,   264,   132,
     0,   258,   258,   258,   181,     0,   258,   258,   258,   258,
   258,   258,   258,     0,     0,     0,     0,     0,     0,     0,
   187,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    65,     0,     0,     0,     0,   253,
     0,   199,   199,   199,     0,   230,   237,   238,   239,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   206,   207,   208,   209,   210,     0,     0,
     0,     0,     0,     0,     0,    18,     0,   129,   137,     0,
   140,     0,   134,     0,   135,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   164,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   143,     0,   258,   258,     0,
   258,     0,     0,   199,     0,     0,   258,     0,     0,     0,
   258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
   142,   152,     0,     0,   185,   146,   148,     0,     0,   184,
   186,   154,   130,   141,   151,   156,     0,   248,     0,   247,
     0,     0,   169,     0,   171,     0,   173,     0,    66,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   253,     0,   256,     0,     0,     0,     0,
   194,   200,   196,   198,     0,     0,     0,     0,     0,    21,
     0,    30,     0,    34,     0,    28,     0,     0,    33,     0,
    38,    36,     0,     0,     0,     0,     0,     0,    45,     0,
     0,     0,     0,     0,    50,     0,     0,   138,   244,     0,
   183,   182,   164,     0,   160,     0,     0,     0,     0,     0,
     0,   177,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   258,   255,   254,
   258,     0,     0,     0,     0,   147,     0,     0,   253,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   258,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   246,     0,     0,     0,   180,   258,     0,   178,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   257,     0,     0,   201,   242,
     0,   203,     0,    35,     0,     0,     0,     0,    25,     0,
    31,     0,    37,    26,    39,     0,    42,     0,    46,    47,
     0,     0,    49,     0,     0,     0,   158,     0,     0,     0,
     0,     0,   175,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   258,   258,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   245,   170,   172,   174,
     0,   258,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    82,    86,    90,   131,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    29,    32,    40,     0,    41,
    48,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   258,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   258,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   202,     0,     0,     0,
     0,    24,    27,     0,     0,     0,   176,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    80,     0,
    84,     0,    88,     0,     0,     0,   205,     0,     0,   258,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    44,    20,   139,   179,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    81,    83,
    85,    87,    89,    91,     0,     0,   204,     0,     0,   258,
     0,     0,     0,     0,     0,     0,    94,    98,   102,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     5,   258,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    92,     0,
    96,     0,   100,     0,   258,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   149,     0,
    22,     0,     0,     0,     0,     0,     0,    93,    95,    97,
    99,   101,   103,   258,     0,     0,     0,   106,   110,   114,
     0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     0,   108,     0,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   105,   107,
   109,   111,   113,   115,     0,   118,   122,   126,    23,     0,
     0,     0,     0,     0,     0,     0,   116,     0,   120,     0,
   124,     0,     0,     0,     0,     0,     0,   117,   119,   121,
   123,   125,   127,     0,     0,     0
};

static const short yydefgoto[] = {  1324,
     4,     5,    18,    19,    20,    21,     6,    55,    56,   376,
  1098,   498,  1046,  1100,   499,  1047,  1102,   500,  1048,  1208,
   501,  1181,  1210,   502,  1182,  1212,   503,  1183,  1269,   504,
  1255,  1271,   505,  1256,  1273,   506,  1257,  1306,   507,  1300,
  1308,   508,  1301,  1310,   509,  1302,    57,   371,   361,   362,
   363,   364,    61,    62,    63,   851,   852,    64,    65,    66,
   264,   387,   516,   517,   518,   713,   714,   875,   649,   229,
    94,   343,   134,   213,   326,   710,   795,   796,   344
};

static const short yypact[] = {     7,
-32768,-32768,  -127,-32768,    24,   793,   613,    10,    11,    22,
    35,    42,   122,   138,  -120,    38,    43,-32768,-32768,-32768,
-32768,   191,   201,  -116,    63,    68,   -46,   -26,    70,    74,
   202,    78,   213,   218,   223,    56,   251,   169,   141,   -73,
   -73,   142,   189,   143,   306,   278,   166,   329,   335,    65,
   192,   -29,   209,   321,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   206,
   221,   222,   228,   229,   241,   247,   256,   262,   263,   264,
   287,   288,   289,   294,   295,   296,   313,   314,   337,   613,
   613,   613,   512,-32768,-32768,  1273,-32768,-32768,-32768,-32768,
-32768,   339,   339,   358,-32768,   613,   613,   613,   613,   613,
   345,   613,   613,   350,   613,   613,   613,   457,   613,   236,
   355,   362,   457,   389,   394,   367,   398,   405,   408,   411,
   -73,   613,   613,   409,   410,   -73,   416,   417,   419,-32768,
   568,   457,-32768,-32768,   -59,   457,   457,   613,   -62,   613,
-32768,   425,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   431,   431,   669,   613,   613,   613,   613,   613,
   512,   432,   433,   434,   435,   448,   449,   461,   462,   465,
   468,   469,   471,   493,   494,   496,   509,   510,   517,   518,
   544,   545,   549,   550,   552,   557,   558,   562,   569,   570,
   574,   705,   571,   573,   576,    66,   717,   364,   821,   979,
   613,   989,   400,   613,   460,  1001,  1017,   613,   944,   721,
  1027,   613,   613,   613,   722,   613,   613,   613,   613,   613,
   613,   613,   587,   -70,  1058,   185,   185,   589,   613,   613,
   613,   899,-32768,    40,   915,   -73,-32768,   736,   738,  1048,
   670,   613,  1078,   -72,   613,  1098,  1115,  1134,  1169,  1183,
  1261,  1271,  1281,  1291,  1301,  1738,  1311,  1321,  1331,  1346,
  1356,  1366,  1747,  1756,  1765,   613,   613,-32768,    55,   200,
   431,   431,   431,   259,   737,   748,   750,   753,   756,   763,
   764,   766,   767,   784,   785,   787,   790,   795,   796,   797,
   804,   812,   814,   815,   817,   826,   838,   674,   845,   851,
   859,   863,   839,   865,-32768,    94,   868,   870,   869,-32768,
   875,   880,   878,   883,  1376,   885,   881,  1386,   887,   889,
   890,   171,-32768,    29,   613,   891,   547,  1396,  1406,   613,
   560,   572,  1416,  1426,  1436,  1446,  1456,   -73,   613,   613,
-32768,   746,   976,-32768,   747,   613,  1774,  1783,  1794,-32768,
-32768,-32768,   613,-32768,   749,   232,   769,   768,   896,   770,
  1466,   909,-32768,-32768,-32768,-32768,-32768,  1476,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   613,-32768,
-32768,-32768,-32768,-32768,-32768,   613,   613,   613,  -106,  -106,
   779,   774,   777,   786,   788,   791,   802,   807,   810,   811,
   818,   820,   833,   834,   836,   841,   844,   854,   876,   884,
   892,   897,   898,   900,   901,   917,   919,   920,   926,   927,
   934,   922,-32768,   803,-32768,   941,   -73,-32768,   457,   457,
   961,   457,-32768,   965,-32768,   457,   457,    41,   613,-32768,
   105,   835,   982,   983,  1009,    32,  1012,  1019,  1022,  1024,
  1025,  1034,  1037,   952,  1803,  1813,-32768,-32768,   590,   -73,
   -73,   -73,   116,-32768,   954,   956,   968,   970,   977,   980,
   986,   987,   990,   992,   993,  1002,  1028,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   613,
   613,   457,   613,  1043,   457,   949,   998,  1011,  1122,  1486,
  1496,  1506,  1517,  1005,  1162,   613,   613,   -73,  1164,  1165,
  1029,  1172,  1175,   457,   457,  1177,   -73,  1178,  1192,   457,
   457,  1193,  1195,  1196,  1202,  1203,   457,   559,   457,  1205,
  1212,  1214,  1226,  1228,-32768,  1229,   339,  1230,    30,  1231,
   457,  1239,   457,  1240,  1242,   613,   944,   171,-32768,-32768,
   613,   457,   457,   457,-32768,   158,   457,   457,   457,   457,
   457,   457,   457,   613,   613,   613,  1081,    44,   102,   119,
-32768,   255,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,-32768,  1822,  1831,  1243,  1527,   121,
  1168,  1258,  1258,  1258,   613,-32768,-32768,-32768,-32768,   613,
  1112,  1841,  1850,  1113,  1117,  1114,  1124,  1121,  1130,  1132,
  1131,  1136,  1133,  1138,  1140,  1141,  1139,  1143,  1144,  1148,
  1149,  1150,  1151,-32768,-32768,-32768,-32768,-32768,  1153,  1157,
  1171,  1173,  1179,  1167,  1180,-32768,  1182,-32768,-32768,   -73,
-32768,  1296,-32768,  1314,-32768,-32768,   238,  1859,  1328,  1330,
  1332,   613,   613,  1334,  1335,  1336,  1337,  1338,  1339,  1340,
   605,  1537,   304,   185,   -73,  1341,   -73,  1345,   -73,    14,
  1354,  1868,  1878,  1887,  1896,  1905,  1914,  1923,  1932,  1941,
  1950,  1959,  1968,   613,   613,-32768,  1357,   457,   457,  1269,
   457,  1358,  1213,  1258,  1225,  1227,   407,   512,  1363,   613,
   457,  1362,  1377,  1378,  1237,  1379,   559,  1380,  1394,   613,
  1402,  1408,  1403,  1412,  1409,   559,   613,   613,   613,   457,
  1413,  1418,   559,   613,  1419,  1425,  1423,   613,   339,  1432,
-32768,-32768,   613,   613,-32768,-32768,-32768,   123,   132,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1278,-32768,   613,-32768,
  1285,  1232,-32768,  1290,-32768,  1297,-32768,   -33,-32768,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,  1977,  1986,   121,   112,-32768,   135,  1279,  1369,    13,
-32768,-32768,-32768,-32768,  1445,   512,  1300,  1995,  1307,-32768,
  1308,-32768,  1310,-32768,  1316,-32768,  1318,  1547,-32768,  1320,
-32768,-32768,  1326,  1327,  1557,  2004,  1567,  1333,-32768,  1329,
  1342,  2013,  1352,  1344,-32768,  2022,  1353,-32768,   944,  2031,
-32768,-32768,   185,   347,-32768,   613,   613,   613,  1479,  1289,
   -30,-32768,  2040,  2049,  2058,  2067,  2076,  2085,  2094,  2103,
  2112,  2121,  2130,  2139,   613,   613,  1389,   457,-32768,-32768,
   457,   613,  1480,   660,  1482,-32768,   224,  1500,   121,   559,
  1459,   613,  1501,   559,  1507,  1511,  1518,  1520,  1521,   613,
  1528,   457,  1530,  1531,   613,  1514,  1538,   613,  1477,  1541,
  1393,   613,-32768,   642,   662,   735,-32768,   457,  1548,-32768,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,  1577,   837,  1370,-32768,  1382,   139,-32768,  1392,
  2148,-32768,   613,-32768,  1405,  1415,  1422,  2157,-32768,  1401,
-32768,  1411,-32768,-32768,-32768,  1587,-32768,  1433,-32768,-32768,
  1597,  1424,-32768,  1607,  1435,  1442,-32768,   879,  1551,  1558,
    15,  1443,-32768,  2166,  2175,  2184,  2193,  2202,  2211,  2220,
  2229,  2238,  1617,  1627,  1637,  1561,  1568,   457,   457,-32768,
   613,   613,   512,   559,   559,   559,   559,  1571,  1581,  1590,
   559,  1591,  1598,  1600,  1578,  1602,-32768,-32768,-32768,-32768,
   -33,   457,   613,   613,   613,   613,   613,   613,   613,   613,
   613,-32768,-32768,-32768,-32768,-32768,  1452,  1460,   893,  2247,
   512,  1462,  1465,  1471,  1472,-32768,-32768,-32768,  1475,-32768,
-32768,-32768,  1483,  1485,    28,  1492,  2256,  2265,  2274,  2283,
  2292,  2301,  2310,  2319,  2328,  1464,  1474,  1484,   457,  1553,
  1640,   613,   231,   559,   559,  1648,  1650,   559,  1652,  1654,
  1658,   457,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,  1499,  1512,-32768,   422,   613,  1516,
  1523,-32768,-32768,  1525,  1526,  1533,-32768,  1534,  2337,  2346,
  2355,  2364,  2373,  2382,  2391,  2400,  2409,   159,   944,   182,
   944,   190,   944,  1595,   613,   613,-32768,   512,   559,   457,
  1679,  1688,  1689,  1691,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,  1692,   613,  1698,   613,  1699,  1554,
  2418,   930,   512,  1563,  1564,-32768,-32768,-32768,-32768,  2427,
  2436,  2445,  2454,  2463,  2472,  1647,  1657,  1667,   944,-32768,
   944,-32768,   944,-32768,   613,   613,-32768,   621,   559,   457,
   613,   613,   613,   613,   613,   613,-32768,-32768,-32768,  2481,
   937,  1584,  1566,  1574,  2490,  2499,  2508,  2517,  2526,  2535,
  1555,  1565,  1575,   613,  1721,-32768,   457,   559,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   951,-32768,  1583,
  1585,  2544,  2553,  2562,  2571,  2580,  2589,   196,   944,   197,
   944,   203,   944,  1729,   457,  1732,   613,   613,   613,   613,
   613,   613,   613,  1739,   613,  1741,   613,  1742,-32768,  1593,
-32768,  2598,  2607,  2616,  1677,  1687,  1697,   944,-32768,   944,
-32768,   944,-32768,   457,   613,   613,   613,-32768,-32768,-32768,
  1606,  2625,  2634,  2643,  1605,  1611,  1612,   457,   613,   613,
   613,   613,   613,   613,  1616,  2652,  2661,  2670,   234,   944,
   239,   944,   244,   944,   559,   613,   613,   613,   613,  1762,
   613,  1768,   613,  1769,  1625,  1707,  1717,  1727,   944,-32768,
   944,-32768,   944,-32768,  1778,-32768,-32768,-32768,-32768,  1632,
  1634,  1635,   613,   613,   613,   303,   944,   308,   944,   348,
   944,   613,  1788,   613,  1789,   613,  1791,   944,-32768,   944,
-32768,   944,-32768,  1798,  1804,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1323,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1799,  1802,  -241,
   371,  1808,-32768,-32768,-32768,   816,  -848,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -591,-32768,-32768,  -694,    -7,
-32768,  1359,   -40,  -101,-32768,  -782,  1106,   776,-32768
};


#define	YYLAST		2821


static const short yytable[] = {    93,
   135,   214,   910,   256,   149,   365,    -7,    -7,     7,    -7,
   111,   867,   383,   384,   385,    95,   873,    96,   261,   777,
  1000,   715,   716,    -1,     8,   849,     9,    97,   849,   102,
   114,   850,   815,   107,   850,   659,   108,   575,   178,   179,
    98,   824,   180,    67,    68,   372,   373,    99,   831,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
   660,   330,   286,   287,   178,   179,   132,   576,   180,   133,
   359,   386,   173,   174,   175,   181,   849,   262,   123,   124,
   243,   125,   850,   257,   146,   248,   935,   147,   216,   217,
   218,   219,   220,   112,   222,   223,   113,   225,   226,   227,
   570,   231,    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,
   150,   591,   802,   909,   244,   245,   115,   100,   841,    10,
    11,    12,    13,    14,    15,    16,    17,   842,     1,     2,
   260,     3,   263,   101,   980,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   874,   778,  1001,   289,   290,
   291,   292,   293,   294,   286,   287,   178,   179,   458,   459,
   180,  1061,   460,    90,    91,   936,   910,   103,  -219,   940,
    92,  -219,   104,  -219,   685,   566,   105,   686,   127,  -219,
  -219,   128,   129,   180,   130,   672,   673,   106,   286,   287,
   178,   179,   109,   335,   180,   375,   338,   110,   137,   116,
   342,   138,   139,   117,   347,   348,   349,   119,   351,   352,
   353,   354,   355,   356,   357,    39,    40,    41,    42,   118,
    44,   367,   368,   369,   442,   443,   120,   286,   287,   178,
   179,   121,   687,   180,   381,   688,   122,   388,   286,   287,
   178,   179,   868,   869,   180,   286,   287,   178,   179,   689,
   708,   180,   690,   709,   286,   287,   178,   179,   409,   410,
   180,   286,   287,   178,   179,   868,   126,   180,   870,  1022,
  1023,  1024,  1025,   131,   136,   140,  1029,   485,   486,   487,
   488,   489,   490,   491,   492,   493,   494,   495,   496,  1124,
   141,   142,  1125,   286,   287,   178,   179,   474,   143,   180,
   485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
   495,   496,  1126,  -218,   144,  1127,  -218,   461,  -218,   145,
  1128,   148,   466,  1129,  -218,  -218,  1223,  1225,   180,  1224,
  1226,   475,   476,  1227,   152,   153,  1228,   933,   479,  1080,
  1081,   151,   215,  1084,  1079,   483,   286,   287,   178,   179,
   154,   155,   180,   286,   287,   178,   179,   156,   157,   180,
   286,   287,   178,   179,  1279,   497,   180,  1280,   232,  1281,
   158,   520,  1282,   753,  1283,   411,   159,  1284,   521,   522,
   523,   286,   287,   178,   179,   160,   558,   180,   691,    67,
    68,   161,   162,   163,  1134,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,   164,   165,   166,   588,
   589,   590,   771,   167,   168,   169,   286,   287,   178,   179,
   567,   568,   180,  1312,   769,   657,  1313,   770,  1314,    67,
    68,  1315,   170,   171,  1173,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,   172,   624,   212,   286,
   287,   178,   179,  1201,   221,   180,   633,   902,  1316,   224,
   903,  1317,   606,   607,   233,   609,   286,   287,   178,   179,
   252,   234,   180,   255,    67,    68,   238,   332,   622,   623,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,   236,   286,   287,   178,   179,   237,   239,   180,   176,
   177,   178,   179,   337,   240,   180,    92,   241,   667,   228,
   242,   246,   247,   668,   286,   287,   178,   179,   249,   250,
   180,   251,  1106,   253,   265,  1107,   681,   682,   683,   180,
  1285,   295,   296,   297,   298,   692,   693,   694,   695,   696,
   697,   698,   699,   700,   701,   702,   703,   299,   300,    90,
    91,   901,   286,   287,   178,   179,    92,   717,   180,   228,
   301,   302,   718,   339,   303,    67,    68,   304,   305,   750,
   306,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,   307,   308,   772,   309,   774,   837,   776,   644,
   645,   646,   647,   648,   176,   177,   178,   179,   310,   311,
   180,    92,    67,   930,   758,   759,   312,   313,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,   286,
   287,   178,   179,   314,   315,   180,   792,   793,   316,   317,
   463,   318,   286,   287,   178,   179,   319,   320,   180,   325,
   806,   321,   808,   467,   286,   287,   178,   179,   322,   323,
   180,   327,   818,   324,   328,   468,   329,   345,   350,   825,
   826,   827,   286,   287,   178,   179,   832,   358,   180,   366,
   836,   412,   377,   587,   378,   839,   840,   286,   287,   178,
   179,   380,   413,   180,   414,    90,    91,   415,   767,  1172,
   416,   844,    92,   286,   287,   178,   179,   417,   418,   180,
   419,   420,   853,   854,   855,   856,   857,   858,   859,   860,
   861,   862,   863,   864,   286,   287,   178,   179,   421,   422,
   180,   423,    -3,    22,   424,   959,    23,   435,   877,   425,
   426,   427,    90,    91,   286,   287,   178,   179,   428,    92,
   180,   286,   287,   178,   179,   960,   429,   180,   430,   431,
   288,   432,    24,    25,    26,    27,    28,    29,    30,    31,
   433,    32,    33,    34,    35,    36,    37,    38,   904,   905,
   906,   440,   434,    39,    40,    41,    42,    43,    44,   436,
    45,    46,    47,    48,    49,   437,    50,   923,   924,   286,
   287,   178,   179,   438,   928,   180,   931,   439,   331,   441,
    51,    52,   444,   446,   938,   445,    53,   286,   287,   178,
   179,   447,   946,   180,   449,   448,   453,   951,   961,   450,
   954,   452,   455,   230,   958,   456,   457,   462,   235,   477,
   478,   484,   512,   964,   965,   966,   967,   968,   969,   970,
   971,   972,   973,   974,   975,   515,   524,   254,   510,   513,
   511,   258,   259,    54,   525,   983,   555,   526,    24,    25,
    26,    27,    28,    29,    30,    31,   527,    32,   528,    34,
    35,   529,    37,    38,    24,    25,    26,    27,    28,    29,
    30,    31,   530,    32,   556,    34,    35,   531,    37,    38,
   532,   533,    50,   286,   287,   178,   179,   561,   534,   180,
   535,   563,   333,  1019,  1020,  1021,    51,    52,    50,   286,
   287,   178,   179,   536,   537,   180,   538,   571,   572,   573,
   977,   539,    51,    52,   540,  1037,  1038,  1039,  1040,  1041,
  1042,  1043,  1044,  1045,   541,    24,    25,    26,    27,    28,
    29,    30,    31,  1053,    32,   574,    34,    35,   577,    37,
    38,   286,   287,   178,   179,   578,   542,   180,   579,    54,
   580,   581,   997,   605,   543,   286,   287,   178,   179,    50,
   582,   180,   544,   583,  1078,    54,  1051,   545,   546,   610,
   547,   548,   370,    51,    52,  1089,  1090,  1091,  1092,  1093,
  1094,  1095,  1096,  1097,  1099,  1101,  1103,   549,   374,   550,
   551,  1108,   286,   287,   178,   179,   552,   553,   180,   286,
   287,   178,   179,  1157,   554,   180,   286,   287,   178,   179,
  1185,   557,   180,   286,   287,   178,   179,  1131,  1132,   180,
  1133,   612,   584,   593,  1214,   594,    54,  1140,  1141,  1142,
  1143,  1144,  1145,  1146,  1147,  1148,  1149,   595,  1151,   596,
  1153,   286,   287,   178,   179,  1158,   597,   180,   615,   598,
   334,   286,   287,   178,   179,   599,   600,   180,   620,   601,
   336,   602,   603,   286,   287,   178,   179,  1170,  1171,   180,
   613,   604,   340,  1175,  1176,  1177,  1178,  1179,  1180,   286,
   287,   178,   179,   614,   621,   180,   625,   626,   341,   286,
   287,   178,   179,   627,   628,   180,  1198,   629,   346,   632,
   634,  1202,  1203,  1204,  1205,  1206,  1207,  1209,  1211,  1213,
   286,   287,   178,   179,   635,   638,   180,   639,   640,   379,
   286,   287,   178,   179,   641,   642,   180,   651,   360,  1232,
  1233,  1234,  1235,  1236,  1237,  1238,   652,  1240,   653,  1242,
   286,   287,   178,   179,   559,   560,   180,   562,   654,   382,
   655,   564,   565,   684,   656,   658,   661,  1252,  1253,  1254,
   286,   287,   178,   179,   663,   665,   180,   666,   706,   389,
   711,  1266,  1267,  1268,  1270,  1272,  1274,   286,   287,   178,
   179,   712,   719,   180,   722,   724,   390,   723,  1286,  1287,
  1288,  1289,   726,  1291,   725,  1293,   286,   287,   178,   179,
   727,   729,   180,   728,   731,   391,   730,   608,   732,   735,
   611,   733,   734,   736,   737,  1307,  1309,  1311,   738,   739,
   740,   751,   741,   742,  1318,   182,  1320,   743,  1322,   630,
   631,   286,   287,   178,   179,   636,   637,   180,   747,   752,
   392,   744,   643,   745,   650,   286,   287,   178,   179,   746,
   748,   180,   749,   755,   393,   756,   662,   757,   664,   760,
   761,   762,   763,   764,   765,   766,   773,   669,   670,   671,
   775,   798,   674,   675,   676,   677,   678,   679,   680,   779,
   183,   184,   185,   794,   800,   807,   801,   810,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   803,   811,
   804,   813,   846,   812,   814,   816,   196,   197,   198,   199,
   200,   201,   202,   203,   204,   205,   817,   206,   207,   208,
   209,   210,   211,   286,   287,   178,   179,   819,   821,   180,
   820,   823,   394,   286,   287,   178,   179,   822,   829,   180,
   830,   833,   395,   286,   287,   178,   179,   834,   835,   180,
   843,   871,   396,   286,   287,   178,   179,   838,   845,   180,
   847,   908,   397,   286,   287,   178,   179,   848,   872,   180,
   876,   878,   398,   286,   287,   178,   179,   880,   881,   180,
   882,   937,   400,   286,   287,   178,   179,   883,   884,   180,
   886,   925,   401,   286,   287,   178,   179,   887,   888,   180,
   893,   955,   402,   892,   907,   929,   799,   932,   286,   287,
   178,   179,   805,   894,   180,   897,   809,   403,   286,   287,
   178,   179,   896,   899,   180,   934,   939,   404,   286,   287,
   178,   179,   941,   942,   180,   828,   952,   405,   286,   287,
   178,   179,   978,   943,   180,   944,   945,   451,   286,   287,
   178,   179,   979,   947,   180,   949,   950,   454,   286,   287,
   178,   179,   981,   953,   180,   956,   957,   464,   286,   287,
   178,   179,   988,   963,   180,   984,   998,   465,   286,   287,
   178,   179,   989,   999,   180,   985,  1015,   469,   286,   287,
   178,   179,   986,  1016,   180,   993,  1026,   470,   286,   287,
   178,   179,  1033,   991,   180,   995,  1027,   471,   286,   287,
   178,   179,   996,  1002,   180,  1028,  1030,   472,   286,   287,
   178,   179,  1049,  1031,   180,  1032,  1034,   473,   286,   287,
   178,   179,  1054,  1050,   180,  1055,  1072,   514,   286,   287,
   178,   179,  1056,  1057,   180,  1058,  1073,   519,   286,   287,
   178,   179,  1076,  1059,   180,  1060,  1074,   616,   286,   287,
   178,   179,  1062,   926,   180,  1077,   927,   617,   286,   287,
   178,   179,  1104,  1082,   180,  1083,  1085,   618,  1086,   286,
   287,   178,   179,  1087,  1105,   180,  1109,   948,   619,   286,
   287,   178,   179,  1110,  1130,   180,  1111,  1112,   707,   286,
   287,   178,   179,   962,  1136,   180,  1113,  1114,   768,   286,
   287,   178,   179,  1137,  1138,   180,  1139,  1150,   885,   286,
   287,   178,   179,  1152,  1154,   180,  1155,  1195,   889,   286,
   287,   178,   179,  1159,  1160,   180,  1187,  1196,   891,   286,
   287,   178,   179,  1186,  1188,   180,  1199,  1197,   976,   286,
   287,   178,   179,  1215,  1229,   180,  1216,  1231,   990,   286,
   287,   178,   179,  1244,  1239,   180,  1241,  1243,   992,   286,
   287,   178,   179,  1017,  1018,   180,  1258,  1262,   994,   286,
   287,   178,   179,  1263,  1264,   180,  1275,  1290,  1012,   286,
   287,   178,   179,  1292,  1294,   180,  1295,  1036,  1013,   286,
   287,   178,   179,  1299,  1303,   180,  1304,  1305,  1014,   286,
   287,   178,   179,  1319,  1321,   180,  1323,  1325,  1167,   286,
   287,   178,   179,  1326,    58,   180,   592,    59,  1168,   286,
   287,   178,   179,    60,   797,   180,  1035,   569,  1169,   286,
   287,   178,   179,     0,  1075,   180,     0,     0,  1248,   286,
   287,   178,   179,     0,     0,   180,     0,  1088,  1249,   286,
   287,   178,   179,     0,     0,   180,     0,     0,  1250,   286,
   287,   178,   179,     0,     0,   180,     0,     0,  1296,   286,
   287,   178,   179,     0,     0,   180,     0,     0,  1297,   286,
   287,   178,   179,     0,     0,   180,     0,     0,  1298,     0,
   286,   287,   178,   179,     0,  1135,   180,     0,   399,   286,
   287,   178,   179,     0,     0,   180,     0,   406,   286,   287,
   178,   179,     0,     0,   180,     0,   407,   286,   287,   178,
   179,     0,     0,   180,     0,   408,   286,   287,   178,   179,
     0,     0,   180,     0,   480,   286,   287,   178,   179,     0,
     0,   180,     0,   481,     0,  1174,   286,   287,   178,   179,
     0,     0,   180,     0,   482,   286,   287,   178,   179,     0,
     0,   180,     0,   585,     0,   286,   287,   178,   179,     0,
     0,   180,  1200,   586,   286,   287,   178,   179,     0,     0,
   180,     0,   704,   286,   287,   178,   179,     0,     0,   180,
     0,   705,     0,   286,   287,   178,   179,     0,     0,   180,
  1230,   720,   286,   287,   178,   179,     0,     0,   180,     0,
   721,   286,   287,   178,   179,     0,     0,   180,     0,   754,
   286,   287,   178,   179,     0,     0,   180,     0,   780,  1251,
   286,   287,   178,   179,     0,     0,   180,     0,   781,   286,
   287,   178,   179,  1265,     0,   180,     0,   782,   286,   287,
   178,   179,     0,     0,   180,     0,   783,   286,   287,   178,
   179,     0,     0,   180,     0,   784,   286,   287,   178,   179,
     0,     0,   180,     0,   785,   286,   287,   178,   179,     0,
     0,   180,     0,   786,   286,   287,   178,   179,     0,     0,
   180,     0,   787,   286,   287,   178,   179,     0,     0,   180,
     0,   788,   286,   287,   178,   179,     0,     0,   180,     0,
   789,   286,   287,   178,   179,     0,     0,   180,     0,   790,
   286,   287,   178,   179,     0,     0,   180,     0,   791,   286,
   287,   178,   179,     0,     0,   180,     0,   865,   286,   287,
   178,   179,     0,     0,   180,     0,   866,   286,   287,   178,
   179,     0,     0,   180,     0,   879,   286,   287,   178,   179,
     0,     0,   180,     0,   890,   286,   287,   178,   179,     0,
     0,   180,     0,   895,   286,   287,   178,   179,     0,     0,
   180,     0,   898,   286,   287,   178,   179,     0,     0,   180,
     0,   900,   286,   287,   178,   179,     0,     0,   180,     0,
   911,   286,   287,   178,   179,     0,     0,   180,     0,   912,
   286,   287,   178,   179,     0,     0,   180,     0,   913,   286,
   287,   178,   179,     0,     0,   180,     0,   914,   286,   287,
   178,   179,     0,     0,   180,     0,   915,   286,   287,   178,
   179,     0,     0,   180,     0,   916,   286,   287,   178,   179,
     0,     0,   180,     0,   917,   286,   287,   178,   179,     0,
     0,   180,     0,   918,   286,   287,   178,   179,     0,     0,
   180,     0,   919,   286,   287,   178,   179,     0,     0,   180,
     0,   920,   286,   287,   178,   179,     0,     0,   180,     0,
   921,   286,   287,   178,   179,     0,     0,   180,     0,   922,
   286,   287,   178,   179,     0,     0,   180,     0,   982,   286,
   287,   178,   179,     0,     0,   180,     0,   987,   286,   287,
   178,   179,     0,     0,   180,     0,  1003,   286,   287,   178,
   179,     0,     0,   180,     0,  1004,   286,   287,   178,   179,
     0,     0,   180,     0,  1005,   286,   287,   178,   179,     0,
     0,   180,     0,  1006,   286,   287,   178,   179,     0,     0,
   180,     0,  1007,   286,   287,   178,   179,     0,     0,   180,
     0,  1008,   286,   287,   178,   179,     0,     0,   180,     0,
  1009,   286,   287,   178,   179,     0,     0,   180,     0,  1010,
   286,   287,   178,   179,     0,     0,   180,     0,  1011,   286,
   287,   178,   179,     0,     0,   180,     0,  1052,   286,   287,
   178,   179,     0,     0,   180,     0,  1063,   286,   287,   178,
   179,     0,     0,   180,     0,  1064,   286,   287,   178,   179,
     0,     0,   180,     0,  1065,   286,   287,   178,   179,     0,
     0,   180,     0,  1066,   286,   287,   178,   179,     0,     0,
   180,     0,  1067,   286,   287,   178,   179,     0,     0,   180,
     0,  1068,   286,   287,   178,   179,     0,     0,   180,     0,
  1069,   286,   287,   178,   179,     0,     0,   180,     0,  1070,
   286,   287,   178,   179,     0,     0,   180,     0,  1071,   286,
   287,   178,   179,     0,     0,   180,     0,  1115,   286,   287,
   178,   179,     0,     0,   180,     0,  1116,   286,   287,   178,
   179,     0,     0,   180,     0,  1117,   286,   287,   178,   179,
     0,     0,   180,     0,  1118,   286,   287,   178,   179,     0,
     0,   180,     0,  1119,   286,   287,   178,   179,     0,     0,
   180,     0,  1120,   286,   287,   178,   179,     0,     0,   180,
     0,  1121,   286,   287,   178,   179,     0,     0,   180,     0,
  1122,   286,   287,   178,   179,     0,     0,   180,     0,  1123,
   286,   287,   178,   179,     0,     0,   180,     0,  1156,   286,
   287,   178,   179,     0,     0,   180,     0,  1161,   286,   287,
   178,   179,     0,     0,   180,     0,  1162,   286,   287,   178,
   179,     0,     0,   180,     0,  1163,   286,   287,   178,   179,
     0,     0,   180,     0,  1164,   286,   287,   178,   179,     0,
     0,   180,     0,  1165,   286,   287,   178,   179,     0,     0,
   180,     0,  1166,   286,   287,   178,   179,     0,     0,   180,
     0,  1184,   286,   287,   178,   179,     0,     0,   180,     0,
  1189,   286,   287,   178,   179,     0,     0,   180,     0,  1190,
   286,   287,   178,   179,     0,     0,   180,     0,  1191,   286,
   287,   178,   179,     0,     0,   180,     0,  1192,   286,   287,
   178,   179,     0,     0,   180,     0,  1193,   286,   287,   178,
   179,     0,     0,   180,     0,  1194,   286,   287,   178,   179,
     0,     0,   180,     0,  1217,   286,   287,   178,   179,     0,
     0,   180,     0,  1218,   286,   287,   178,   179,     0,     0,
   180,     0,  1219,   286,   287,   178,   179,     0,     0,   180,
     0,  1220,   286,   287,   178,   179,     0,     0,   180,     0,
  1221,   286,   287,   178,   179,     0,     0,   180,     0,  1222,
   286,   287,   178,   179,     0,     0,   180,     0,  1245,   286,
   287,   178,   179,     0,     0,   180,     0,  1246,   286,   287,
   178,   179,     0,     0,   180,     0,  1247,   286,   287,   178,
   179,     0,     0,   180,     0,  1259,   286,   287,   178,   179,
     0,     0,   180,     0,  1260,   286,   287,   178,   179,     0,
     0,   180,     0,  1261,   286,   287,   178,   179,     0,     0,
   180,     0,  1276,   286,   287,   178,   179,     0,     0,   180,
     0,  1277,   286,   287,   178,   179,     0,     0,   180,     0,
  1278
};

static const short yycheck[] = {     7,
    41,   103,   851,    63,    34,   247,     0,     1,   136,     3,
    57,   794,    85,    86,    87,     6,     4,     7,    81,     6,
     6,   613,   614,     0,     1,    59,     3,     6,    59,   150,
    57,    65,   727,   150,    65,     6,   153,     6,   145,   146,
     6,   736,   149,     3,     4,     6,     7,     6,   743,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    41,     6,   143,   144,   145,   146,   150,    46,   149,   153,
   151,   154,    90,    91,    92,    93,    59,   150,    33,    34,
   131,    36,    65,   153,    30,   136,   879,    33,   106,   107,
   108,   109,   110,   150,   112,   113,   153,   115,   116,   117,
     6,   119,   106,   107,   108,   109,   110,   111,   112,   113,
   150,     6,   714,   154,   132,   133,   153,     6,     6,   106,
   107,   108,   109,   110,   111,   112,   113,     6,   132,   133,
   148,   135,   150,     6,     6,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   153,   153,   153,   176,   177,
   178,   179,   180,   181,   143,   144,   145,   146,     8,   151,
   149,   154,   154,   143,   144,   880,  1035,   150,   134,   884,
   150,   137,   150,   139,   151,   155,     6,   154,    30,   145,
   146,    33,    34,   149,    36,    48,    49,     7,   143,   144,
   145,   146,   150,   221,   149,   256,   224,   150,    30,   150,
   228,    33,    34,   150,   232,   233,   234,   150,   236,   237,
   238,   239,   240,   241,   242,    51,    52,    53,    54,    38,
    56,   249,   250,   251,   151,   152,    34,   143,   144,   145,
   146,    34,   151,   149,   262,   154,    34,   265,   143,   144,
   145,   146,   151,   152,   149,   143,   144,   145,   146,   151,
   150,   149,   154,   153,   143,   144,   145,   146,   286,   287,
   149,   143,   144,   145,   146,   151,    36,   149,   154,   984,
   985,   986,   987,   153,   153,   153,   991,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,   151,
     5,    34,   154,   143,   144,   145,   146,   358,   153,   149,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   151,   134,     6,   154,   137,   345,   139,     5,
   151,   150,   350,   154,   145,   146,   151,   151,   149,   154,
   154,   359,   360,   151,    34,   150,   154,   134,   366,  1054,
  1055,   153,     5,  1058,   134,   373,   143,   144,   145,   146,
   150,   150,   149,   143,   144,   145,   146,   150,   150,   149,
   143,   144,   145,   146,   151,   154,   149,   154,   153,   151,
   150,   399,   154,   156,   151,   137,   150,   154,   406,   407,
   408,   143,   144,   145,   146,   150,   447,   149,   154,     3,
     4,   150,   150,   150,  1109,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   150,   150,   150,   480,
   481,   482,   684,   150,   150,   150,   143,   144,   145,   146,
   458,   459,   149,   151,   151,   557,   154,   154,   151,     3,
     4,   154,   150,   150,  1159,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   150,   528,   150,   143,
   144,   145,   146,  1188,   150,   149,   537,   151,   151,   150,
   154,   154,   510,   511,   150,   513,   143,   144,   145,   146,
   140,   150,   149,   143,     3,     4,   150,   154,   526,   527,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   153,   143,   144,   145,   146,   153,   150,   149,   143,
   144,   145,   146,   154,   150,   149,   150,   150,   566,   153,
   150,   153,   153,   571,   143,   144,   145,   146,   153,   153,
   149,   153,   151,     6,   150,   154,   584,   585,   586,   149,
  1275,   150,   150,   150,   150,   593,   594,   595,   596,   597,
   598,   599,   600,   601,   602,   603,   604,   150,   150,   143,
   144,   843,   143,   144,   145,   146,   150,   615,   149,   153,
   150,   150,   620,   154,   150,     3,     4,   150,   150,   660,
   150,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   150,   150,   685,   150,   687,   749,   689,    91,
    92,    93,    94,    95,   143,   144,   145,   146,   150,   150,
   149,   150,     3,     4,   672,   673,   150,   150,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,   143,
   144,   145,   146,   150,   150,   149,   704,   705,   150,   150,
   154,   150,   143,   144,   145,   146,   150,   150,   149,     5,
   718,   150,   720,   154,   143,   144,   145,   146,   150,   150,
   149,   151,   730,   150,   152,   154,   151,     7,     7,   737,
   738,   739,   143,   144,   145,   146,   744,   151,   149,   151,
   748,     5,     7,   154,     7,   753,   754,   143,   144,   145,
   146,    82,     5,   149,     5,   143,   144,     5,   154,   139,
     5,   769,   150,   143,   144,   145,   146,     5,     5,   149,
     5,     5,   780,   781,   782,   783,   784,   785,   786,   787,
   788,   789,   790,   791,   143,   144,   145,   146,     5,     5,
   149,     5,     0,     1,     5,   154,     4,   124,   806,     5,
     5,     5,   143,   144,   143,   144,   145,   146,     5,   150,
   149,   143,   144,   145,   146,   154,     5,   149,     5,     5,
   152,     5,    30,    31,    32,    33,    34,    35,    36,    37,
     5,    39,    40,    41,    42,    43,    44,    45,   846,   847,
   848,     3,     5,    51,    52,    53,    54,    55,    56,     5,
    58,    59,    60,    61,    62,     5,    64,   865,   866,   143,
   144,   145,   146,     5,   872,   149,   874,     5,   152,     5,
    78,    79,     5,     5,   882,     6,    84,   143,   144,   145,
   146,     7,   890,   149,     7,     6,     6,   895,   154,     7,
   898,     7,     6,   118,   902,     7,     7,     7,   123,   154,
   154,   153,     7,   911,   912,   913,   914,   915,   916,   917,
   918,   919,   920,   921,   922,     7,   138,   142,   150,   150,
   153,   146,   147,   131,   151,   933,     5,   151,    30,    31,
    32,    33,    34,    35,    36,    37,   151,    39,   151,    41,
    42,   151,    44,    45,    30,    31,    32,    33,    34,    35,
    36,    37,   151,    39,   152,    41,    42,   151,    44,    45,
   151,   151,    64,   143,   144,   145,   146,     7,   151,   149,
   151,     7,   152,   981,   982,   983,    78,    79,    64,   143,
   144,   145,   146,   151,   151,   149,   151,   153,     7,     7,
   154,   151,    78,    79,   151,  1003,  1004,  1005,  1006,  1007,
  1008,  1009,  1010,  1011,   151,    30,    31,    32,    33,    34,
    35,    36,    37,  1021,    39,     7,    41,    42,     7,    44,
    45,   143,   144,   145,   146,     7,   151,   149,     7,   131,
     7,     7,   154,     6,   151,   143,   144,   145,   146,    64,
     7,   149,   151,     7,  1052,   131,   154,   151,   151,     7,
   151,   151,   154,    78,    79,  1063,  1064,  1065,  1066,  1067,
  1068,  1069,  1070,  1071,  1072,  1073,  1074,   151,   154,   151,
   151,  1079,   143,   144,   145,   146,   151,   151,   149,   143,
   144,   145,   146,   154,   151,   149,   143,   144,   145,   146,
   154,   151,   149,   143,   144,   145,   146,  1105,  1106,   149,
  1108,   153,   151,   150,   154,   150,   131,  1115,  1116,  1117,
  1118,  1119,  1120,  1121,  1122,  1123,  1124,   150,  1126,   150,
  1128,   143,   144,   145,   146,  1133,   150,   149,     7,   150,
   152,   143,   144,   145,   146,   150,   150,   149,   134,   150,
   152,   150,   150,   143,   144,   145,   146,  1155,  1156,   149,
   153,   150,   152,  1161,  1162,  1163,  1164,  1165,  1166,   143,
   144,   145,   146,   153,     3,   149,     3,     3,   152,   143,
   144,   145,   146,   145,     3,   149,  1184,     3,   152,     3,
     3,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,
   143,   144,   145,   146,     3,     3,   149,     3,     3,   152,
   143,   144,   145,   146,     3,     3,   149,     3,   151,  1217,
  1218,  1219,  1220,  1221,  1222,  1223,     5,  1225,     5,  1227,
   143,   144,   145,   146,   449,   450,   149,   452,     3,   152,
     3,   456,   457,   153,     6,     6,     6,  1245,  1246,  1247,
   143,   144,   145,   146,     6,     6,   149,     6,     6,   152,
    83,  1259,  1260,  1261,  1262,  1263,  1264,   143,   144,   145,
   146,     4,   151,   149,   152,   152,   152,   151,  1276,  1277,
  1278,  1279,   152,  1281,   151,  1283,   143,   144,   145,   146,
   151,   151,   149,   152,   152,   152,   151,   512,   151,   151,
   515,   152,   152,   151,   151,  1303,  1304,  1305,   151,   151,
   151,     6,   152,   151,  1312,    33,  1314,   151,  1316,   534,
   535,   143,   144,   145,   146,   540,   541,   149,   152,     6,
   152,   151,   547,   151,   549,   143,   144,   145,   146,   151,
   151,   149,   151,     6,   152,     6,   561,     6,   563,     6,
     6,     6,     6,     6,     6,     6,     6,   572,   573,   574,
     6,    83,   577,   578,   579,   580,   581,   582,   583,     6,
    88,    89,    90,     7,     7,     3,   154,     6,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   154,     3,
   154,   145,   151,     6,     6,     6,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,     3,   125,   126,   127,
   128,   129,   130,   143,   144,   145,   146,     6,     6,   149,
     3,     3,   152,   143,   144,   145,   146,     6,     6,   149,
     3,     3,   152,   143,   144,   145,   146,     3,     6,   149,
   153,   153,   152,   143,   144,   145,   146,     6,   154,   149,
   151,   153,   152,   143,   144,   145,   146,   151,    80,   149,
     6,   152,   152,   143,   144,   145,   146,   151,   151,   149,
   151,     3,   152,   143,   144,   145,   146,   152,   151,   149,
   151,    83,   152,   143,   144,   145,   146,   152,   152,   149,
   152,     5,   152,   151,     6,     6,   711,     6,   143,   144,
   145,   146,   717,   152,   149,   152,   721,   152,   143,   144,
   145,   146,   151,   151,   149,     6,     6,   152,   143,   144,
   145,   146,     6,     3,   149,   740,     3,   152,   143,   144,
   145,   146,   153,     6,   149,     6,     6,   152,   143,   144,
   145,   146,   151,     6,   149,     6,     6,   152,   143,   144,
   145,   146,   151,     6,   149,     5,   154,   152,   143,   144,
   145,   146,   152,     6,   149,   151,     6,   152,   143,   144,
   145,   146,   152,     6,   149,   151,     6,   152,   143,   144,
   145,   146,   151,     6,   149,   152,     6,   152,   143,   144,
   145,   146,     5,   151,   149,   151,     6,   152,   143,   144,
   145,   146,   151,   151,   149,     6,     6,   152,   143,   144,
   145,   146,   151,     6,   149,     6,     5,   152,   143,   144,
   145,   146,   151,   154,   149,   151,   153,   152,   143,   144,
   145,   146,   152,   152,   149,   151,   153,   152,   143,   144,
   145,   146,    80,   151,   149,   151,   153,   152,   143,   144,
   145,   146,   151,   868,   149,     6,   871,   152,   143,   144,
   145,   146,   154,     6,   149,     6,     5,   152,     5,   143,
   144,   145,   146,     6,   153,   149,   151,   892,   152,   143,
   144,   145,   146,   151,    80,   149,   152,   152,   152,   143,
   144,   145,   146,   908,     6,   149,   154,   154,   152,   143,
   144,   145,   146,     6,     6,   149,     6,     6,   152,   143,
   144,   145,   146,     6,     6,   149,   153,   153,   152,   143,
   144,   145,   146,   151,   151,   149,   151,   153,   152,   143,
   144,   145,   146,   140,   151,   149,     6,   153,   152,   143,
   144,   145,   146,   151,     6,   149,   152,     6,   152,   143,
   144,   145,   146,   151,     6,   149,     6,     6,   152,   143,
   144,   145,   146,   978,   979,   149,   151,   153,   152,   143,
   144,   145,   146,   153,   153,   149,   151,     6,   152,   143,
   144,   145,   146,     6,     6,   149,   152,  1002,   152,   143,
   144,   145,   146,     6,   153,   149,   153,   153,   152,   143,
   144,   145,   146,     6,     6,   149,     6,     0,   152,   143,
   144,   145,   146,     0,     6,   149,   484,     6,   152,   143,
   144,   145,   146,     6,   709,   149,  1001,   459,   152,   143,
   144,   145,   146,    -1,  1049,   149,    -1,    -1,   152,   143,
   144,   145,   146,    -1,    -1,   149,    -1,  1062,   152,   143,
   144,   145,   146,    -1,    -1,   149,    -1,    -1,   152,   143,
   144,   145,   146,    -1,    -1,   149,    -1,    -1,   152,   143,
   144,   145,   146,    -1,    -1,   149,    -1,    -1,   152,   143,
   144,   145,   146,    -1,    -1,   149,    -1,    -1,   152,    -1,
   143,   144,   145,   146,    -1,  1110,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,    -1,  1160,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,    -1,   143,   144,   145,   146,    -1,
    -1,   149,  1187,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,    -1,   143,   144,   145,   146,    -1,    -1,   149,
  1215,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,  1244,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,  1258,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 126 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 140 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 147 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 167 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 172 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 177 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 188 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 191 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 195 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 201 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 207 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 214 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 220 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 224 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 228 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 235 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 239 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 244 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 248 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 252 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 256 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 260 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 264 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 268 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 272 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 278 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 281 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 284 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 288 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 292 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 296 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 300 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 315 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 319 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 322 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 325 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 336 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 342 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 343 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 344 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 345 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 346 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 347 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 348 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 349 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 350 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 351 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 352 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 353 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 65:
#line 362 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 66:
#line 366 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 67:
#line 373 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 80:
#line 392 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 81:
#line 394 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 82:
#line 399 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 83:
#line 404 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 84:
#line 411 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 413 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 418 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 87:
#line 423 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 88:
#line 430 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 432 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 437 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 91:
#line 442 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 92:
#line 449 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 451 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 457 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 463 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 96:
#line 470 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 472 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 478 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 484 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 100:
#line 491 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 493 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 499 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 505 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 104:
#line 512 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 514 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 521 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 530 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 108:
#line 537 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 539 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 546 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 555 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 112:
#line 562 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 564 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 571 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 580 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 116:
#line 587 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 589 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 597 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 606 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 120:
#line 613 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 615 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 623 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 632 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 124:
#line 639 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 641 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 649 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 658 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 128:
#line 671 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 129:
#line 688 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 130:
#line 695 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 131:
#line 701 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 132:
#line 720 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 133:
#line 731 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 134:
#line 739 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 135:
#line 745 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 136:
#line 751 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 137:
#line 770 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 138:
#line 776 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 139:
#line 793 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 140:
#line 799 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 805 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 142:
#line 811 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 143:
#line 817 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 144:
#line 823 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 145:
#line 842 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 146:
#line 854 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 860 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 148:
#line 879 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 149:
#line 902 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 150:
#line 910 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 151:
#line 914 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 920 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 926 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 154:
#line 938 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 155:
#line 944 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 156:
#line 950 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 963 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 158:
#line 968 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 159:
#line 973 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 160:
#line 978 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 161:
#line 985 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 162:
#line 986 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 163:
#line 987 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 164:
#line 992 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 165:
#line 996 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 166:
#line 1008 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 167:
#line 1026 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 168:
#line 1041 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 169:
#line 1072 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 170:
#line 1077 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 171:
#line 1083 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 172:
#line 1087 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 173:
#line 1091 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 174:
#line 1095 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 175:
#line 1099 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 176:
#line 1104 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 177:
#line 1112 "Gmsh.y"
{
    ;
    break;}
case 178:
#line 1115 "Gmsh.y"
{
    ;
    break;}
case 179:
#line 1121 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 180:
#line 1138 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 181:
#line 1149 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 182:
#line 1166 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 183:
#line 1183 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 184:
#line 1200 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 185:
#line 1221 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 186:
#line 1241 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 187:
#line 1261 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 188:
#line 1278 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 189:
#line 1303 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 193:
#line 1323 "Gmsh.y"
{ ColorField = ColorGeneral; ;
    break;}
case 195:
#line 1326 "Gmsh.y"
{ ColorField = ColorGeometry; ;
    break;}
case 197:
#line 1329 "Gmsh.y"
{ ColorField = ColorMesh; ;
    break;}
case 201:
#line 1340 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, -1, yyvsp[-1].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-1].c);
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-3].c);
      else
	*ptr = i ;
    ;
    break;}
case 202:
#line 1350 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, (int)yyvsp[-2].d, yyvsp[-4].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-4].c);
      Get_ColorPointerForString(ColorField, yyvsp[-7].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-7].c);
      else
	*ptr = i ;
    ;
    break;}
case 203:
#line 1360 "Gmsh.y"
{
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-1].v);
      else
	*ptr = PACK_COLOR((int)yyvsp[-1].v[0], (int)yyvsp[-1].v[1], (int)yyvsp[-1].v[2], (int)yyvsp[-1].v[3]);
    ;
    break;}
case 204:
#line 1371 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
    ;
    break;}
case 205:
#line 1378 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=255.;
    ;
    break;}
case 206:
#line 1454 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 207:
#line 1455 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 208:
#line 1456 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 209:
#line 1457 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 210:
#line 1458 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 211:
#line 1462 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 212:
#line 1463 "Gmsh.y"
{ yyval.d = yyvsp[-1].d; ;
    break;}
case 213:
#line 1464 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d; ;
    break;}
case 214:
#line 1465 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d; ;
    break;}
case 215:
#line 1466 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d; ;
    break;}
case 216:
#line 1467 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d; ;
    break;}
case 217:
#line 1468 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d); ;
    break;}
case 218:
#line 1469 "Gmsh.y"
{ yyval.d = - yyvsp[0].d; ;
    break;}
case 219:
#line 1470 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 220:
#line 1471 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 221:
#line 1472 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 222:
#line 1473 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 223:
#line 1474 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 224:
#line 1475 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 225:
#line 1476 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 226:
#line 1477 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 227:
#line 1478 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 228:
#line 1479 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 229:
#line 1480 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 230:
#line 1481 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 231:
#line 1482 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 232:
#line 1483 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 233:
#line 1484 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 234:
#line 1485 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 235:
#line 1486 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 236:
#line 1487 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 237:
#line 1488 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 238:
#line 1489 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 239:
#line 1490 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 240:
#line 1494 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 241:
#line 1495 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 242:
#line 1497 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 243:
#line 1509 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 244:
#line 1515 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 245:
#line 1529 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-9].d;
      yyval.v[1]=yyvsp[-7].d;
      yyval.v[2]=yyvsp[-5].d;
      yyval.v[3]=yyvsp[-3].d;
      yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 246:
#line 1537 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
      yyval.v[4]=1.0;
    ;
    break;}
case 247:
#line 1545 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 248:
#line 1553 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 249:
#line 1564 "Gmsh.y"
{
    ;
    break;}
case 250:
#line 1567 "Gmsh.y"
{
    ;
    break;}
case 251:
#line 1573 "Gmsh.y"
{
    ;
    break;}
case 252:
#line 1576 "Gmsh.y"
{
    ;
    break;}
case 253:
#line 1582 "Gmsh.y"
{
    ;
    break;}
case 254:
#line 1585 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 255:
#line 1589 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 256:
#line 1596 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 257:
#line 1601 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 258:
#line 1608 "Gmsh.y"
{
    ;
    break;}
case 259:
#line 1611 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 260:
#line 1617 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 261:
#line 1631 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 262:
#line 1636 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 263:
#line 1645 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 264:
#line 1649 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1659 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void  vyyerror (char *fmt, ...){
  va_list args;
  char    tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

int Get_ColorForString(StringX4Int SX4I[], int alpha, 
		       char * string, int * FlagError) {
  int  i = 0 ;
  while ((SX4I[i].string != NULL) && (strcmp(SX4I[i].string, string)))  i++ ;
  *FlagError = (SX4I[i].string == NULL)? 1 : 0 ;
  if(alpha > 0)
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,alpha) ;
  else
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,SX4I[i].int4) ;
}

void Get_ColorPointerForString(StringXPointer SXP[], char * string,
			  int * FlagError, unsigned int **Pointer) {
  int  i = 0 ;
  while ((SXP[i].string != NULL) && (strcmp(SXP[i].string, string)))  i++ ;
  *FlagError = (SXP[i].string == NULL)? 1 : 0 ;
  *Pointer = (unsigned int *)SXP[i].Pointer ;
}

