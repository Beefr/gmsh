
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tCombine	352
#define	tBSpline	353
#define	tBezier	354
#define	tNurbs	355
#define	tOrder	356
#define	tWith	357
#define	tBounds	358
#define	tKnots	359
#define	tColor	360
#define	tColorTable	361
#define	tFor	362
#define	tIn	363
#define	tEndFor	364
#define	tIf	365
#define	tEndIf	366
#define	tExit	367
#define	tReturn	368
#define	tCall	369
#define	tFunction	370
#define	tTrimmed	371
#define	tShow	372
#define	tHide	373
#define	tB_SPLINE_SURFACE_WITH_KNOTS	374
#define	tB_SPLINE_CURVE_WITH_KNOTS	375
#define	tCARTESIAN_POINT	376
#define	tTRUE	377
#define	tFALSE	378
#define	tUNSPECIFIED	379
#define	tU	380
#define	tV	381
#define	tEDGE_CURVE	382
#define	tVERTEX_POINT	383
#define	tORIENTED_EDGE	384
#define	tPLANE	385
#define	tFACE_OUTER_BOUND	386
#define	tEDGE_LOOP	387
#define	tADVANCED_FACE	388
#define	tVECTOR	389
#define	tDIRECTION	390
#define	tAXIS2_PLACEMENT_3D	391
#define	tISO	392
#define	tENDISO	393
#define	tENDSEC	394
#define	tDATA	395
#define	tHEADER	396
#define	tFILE_DESCRIPTION	397
#define	tFILE_SCHEMA	398
#define	tFILE_NAME	399
#define	tMANIFOLD_SOLID_BREP	400
#define	tCLOSED_SHELL	401
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	402
#define	tFACE_BOUND	403
#define	tCYLINDRICAL_SURFACE	404
#define	tCONICAL_SURFACE	405
#define	tCIRCLE	406
#define	tTRIMMED_CURVE	407
#define	tGEOMETRIC_SET	408
#define	tCOMPOSITE_CURVE_SEGMENT	409
#define	tCONTINUOUS	410
#define	tCOMPOSITE_CURVE	411
#define	tTOROIDAL_SURFACE	412
#define	tPRODUCT_DEFINITION	413
#define	tPRODUCT_DEFINITION_SHAPE	414
#define	tSHAPE_DEFINITION_REPRESENTATION	415
#define	tELLIPSE	416
#define	tSolid	417
#define	tEndSolid	418
#define	tVertex	419
#define	tFacet	420
#define	tNormal	421
#define	tOuter	422
#define	tLoopSTL	423
#define	tEndLoop	424
#define	tEndFacet	425
#define	tAFFECTPLUS	426
#define	tAFFECTMINUS	427
#define	tAFFECTTIMES	428
#define	tAFFECTDIVIDE	429
#define	tOR	430
#define	tAND	431
#define	tEQUAL	432
#define	tNOTEQUAL	433
#define	tAPPROXEQUAL	434
#define	tLESSOREQUAL	435
#define	tGREATEROREQUAL	436
#define	tCROSSPRODUCT	437
#define	tPLUSPLUS	438
#define	tMINUSMINUS	439
#define	UNARYPREC	440

#line 1 "Gmsh.y"
 
// $Id: Gmsh.tab.cpp,v 1.175 2003-12-11 18:37:53 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);
void FixRelativePath(char *in, char *out);

#line 83 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2319
#define	YYFLAG		-32768
#define	YYNTBASE	205

#define YYTRANSLATE(x) ((unsigned)(x) <= 440 ? yytranslate[x] : 339)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   192,     2,     2,     2,   190,     2,     2,   197,
   198,   188,   186,   202,   187,   201,   189,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   182,
     2,   184,   176,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   199,     2,   200,   196,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   203,     2,   204,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   177,
   178,   179,   180,   181,   183,   185,   191,   193,   194,   195
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   535,
   543,   550,   559,   560,   563,   566,   569,   572,   575,   578,
   581,   584,   587,   590,   593,   596,   599,   602,   605,   608,
   611,   614,   617,   620,   623,   626,   629,   632,   635,   638,
   640,   644,   645,   659,   661,   665,   666,   680,   682,   686,
   687,   701,   703,   707,   708,   728,   730,   734,   735,   755,
   757,   761,   762,   782,   784,   788,   789,   815,   817,   821,
   822,   848,   850,   854,   855,   881,   883,   887,   888,   920,
   922,   926,   927,   959,   961,   965,   966,   998,  1000,  1004,
  1005,  1037,  1039,  1043,  1044,  1076,  1078,  1082,  1083,  1115,
  1117,  1121,  1122,  1178,  1180,  1184,  1185,  1241,  1243,  1247,
  1248,  1304,  1306,  1310,  1311,  1355,  1357,  1361,  1362,  1406,
  1408,  1412,  1413,  1457,  1459,  1463,  1464,  1502,  1504,  1508,
  1509,  1547,  1549,  1553,  1554,  1592,  1594,  1598,  1599,  1613,
  1615,  1619,  1620,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
  1650,  1655,  1663,  1673,  1680,  1684,  1691,  1698,  1708,  1715,
  1725,  1731,  1740,  1749,  1761,  1768,  1778,  1788,  1798,  1806,
  1815,  1828,  1835,  1843,  1851,  1864,  1872,  1880,  1890,  1908,
  1917,  1926,  1934,  1942,  1954,  1963,  1976,  1985,  2000,  2023,
  2044,  2053,  2062,  2071,  2079,  2088,  2094,  2106,  2112,  2122,
  2124,  2126,  2128,  2129,  2132,  2139,  2146,  2153,  2160,  2165,
  2172,  2177,  2184,  2188,  2194,  2198,  2202,  2207,  2212,  2216,
  2224,  2228,  2236,  2240,  2243,  2246,  2253,  2262,  2271,  2282,
  2284,  2287,  2289,  2293,  2298,  2300,  2309,  2322,  2337,  2338,
  2351,  2352,  2369,  2370,  2389,  2398,  2411,  2426,  2427,  2440,
  2441,  2458,  2459,  2478,  2487,  2500,  2515,  2516,  2529,  2530,
  2547,  2548,  2567,  2569,  2572,  2582,  2590,  2593,  2600,  2610,
  2620,  2629,  2638,  2647,  2654,  2659,  2662,  2665,  2667,  2669,
  2671,  2673,  2675,  2677,  2681,  2684,  2687,  2690,  2694,  2698,
  2702,  2706,  2710,  2714,  2718,  2722,  2726,  2730,  2734,  2738,
  2742,  2746,  2752,  2757,  2762,  2767,  2772,  2777,  2782,  2787,
  2792,  2797,  2802,  2809,  2814,  2819,  2824,  2829,  2834,  2839,
  2846,  2853,  2860,  2865,  2870,  2875,  2880,  2885,  2890,  2895,
  2900,  2905,  2910,  2915,  2922,  2927,  2932,  2937,  2942,  2947,
  2952,  2959,  2966,  2973,  2978,  2980,  2982,  2984,  2986,  2988,
  2993,  2996,  3002,  3006,  3013,  3018,  3026,  3028,  3031,  3034,
  3038,  3042,  3054,  3064,  3072,  3080,  3081,  3085,  3087,  3091,
  3092,  3096,  3100,  3102,  3106,  3108,  3110,  3114,  3119,  3123,
  3129,  3134,  3136,  3138,  3140,  3144,  3149,  3156,  3164,  3166,
  3168,  3172,  3176,  3186,  3194,  3196,  3202,  3206,  3213,  3215,
  3219,  3221,  3228,  3233,  3238,  3245,  3252
};

static const short yyrhs[] = {   208,
     0,   207,     0,   213,     0,     1,     6,     0,     3,     0,
   187,     3,     0,   163,     0,   166,   167,   206,   206,   206,
   168,   169,   165,   206,   206,   206,   165,   206,   206,   206,
   165,   206,   206,   206,   170,   171,     0,   164,     0,     0,
   208,   209,     0,   210,     0,   212,     0,   211,     0,   138,
     6,     0,   139,     6,     0,   141,     6,     0,   140,     6,
     0,   142,     6,     0,   143,   197,   328,   202,     5,   198,
     6,     0,   144,   197,   328,   198,     6,     0,   145,   197,
     5,   202,     5,   202,   328,   202,   328,   202,     5,   202,
     5,   202,     5,   198,     6,     0,     3,     7,   122,   197,
     5,   202,   326,   198,     6,     0,     3,     7,   121,   197,
     5,   202,   324,   202,   332,   202,   323,   202,   323,   202,
   323,   202,   332,   202,   332,   202,   323,   198,     6,     0,
     3,     7,   120,   197,     5,   202,   324,   202,   324,   202,
   330,   202,   323,   202,   323,   202,   323,   202,   323,   202,
   332,   202,   332,   202,   332,   202,   332,   202,   323,   198,
     6,     0,     3,     7,   128,   197,     5,   202,     3,   202,
     3,   202,     3,   202,   323,   198,     6,     0,     3,     7,
   132,   197,     5,   202,     3,   202,   323,   198,     6,     0,
     3,     7,   149,   197,     5,   202,     3,   202,   323,   198,
     6,     0,     3,     7,   130,   197,     5,   202,   188,   202,
   188,   202,   324,   202,   323,   198,     6,     0,     3,     7,
   133,   197,     5,   202,   332,   198,     6,     0,     3,     7,
   134,   197,     5,   202,   332,   202,     3,   202,   323,   198,
     6,     0,     3,     7,   129,   197,     5,   202,     3,   198,
     6,     0,     3,     7,   135,   197,     5,   202,     3,   202,
   324,   198,     6,     0,     3,     7,   137,   197,     5,   202,
     3,   202,     3,   202,     3,   198,     6,     0,     3,     7,
   136,   197,     5,   202,   326,   198,     6,     0,     3,     7,
   131,   197,     5,   202,     3,   198,     6,     0,     3,     7,
    41,   197,     5,   202,     3,   202,     3,   198,     6,     0,
     3,     7,   147,   197,     5,   202,   332,   198,     6,     0,
     3,     7,   148,   197,     5,   202,   332,   202,     3,   198,
     6,     0,     3,     7,   146,   197,     5,   202,     3,   198,
     6,     0,     3,     7,   150,   197,     5,   202,     3,   202,
   324,   198,     6,     0,     3,     7,   151,   197,     5,   202,
     3,   202,   324,   202,   324,   198,     6,     0,     3,     7,
   158,   197,     5,   202,     3,   202,   324,   202,   324,   198,
     6,     0,     3,     7,   152,   197,     5,   202,     3,   202,
   324,   198,     6,     0,     3,     7,   162,   197,     5,   202,
     3,   202,   324,   202,   324,   198,     6,     0,     3,     7,
   153,   197,     5,   202,     3,   202,   332,   202,   332,   202,
   323,   202,   323,   198,     6,     0,     3,     7,   154,   197,
     5,   202,   332,   198,     6,     0,     3,     7,   155,   197,
   156,   202,   323,   202,     3,   198,     6,     0,     3,     7,
   157,   197,     5,   202,   332,   202,   323,   198,     6,     0,
     3,     7,   159,   197,     5,   202,     5,   202,     3,   202,
     3,   198,     6,     0,     3,     7,   160,   197,     5,   202,
     5,   202,     3,   198,     6,     0,     3,     7,   161,   197,
     3,   202,     3,   198,     6,     0,     0,   213,   214,     0,
   216,     0,   215,     0,   298,     0,   299,     0,   300,     0,
   303,     0,   304,     0,   305,     0,   306,     0,   309,     0,
   321,     0,   322,     0,   308,     0,   307,     0,    33,   197,
     5,   198,     6,     0,    33,   197,     5,   202,   334,   198,
     6,     0,     4,     5,   203,   217,   204,     6,     0,     4,
     5,     4,   326,   203,   217,   204,     6,     0,     0,   217,
   219,     0,   217,   222,     0,   217,   225,     0,   217,   228,
     0,   217,   231,     0,   217,   234,     0,   217,   237,     0,
   217,   240,     0,   217,   243,     0,   217,   246,     0,   217,
   249,     0,   217,   252,     0,   217,   255,     0,   217,   258,
     0,   217,   261,     0,   217,   264,     0,   217,   267,     0,
   217,   270,     0,   217,   273,     0,   217,   276,     0,   217,
   279,     0,   217,   282,     0,   217,   285,     0,   217,   288,
     0,   217,   291,     0,   217,   294,     0,   324,     0,   218,
   202,   324,     0,     0,    72,   197,   324,   202,   324,   202,
   324,   198,   220,   203,   218,   204,     6,     0,   324,     0,
   221,   202,   324,     0,     0,    73,   197,   324,   202,   324,
   202,   324,   198,   223,   203,   221,   204,     6,     0,   324,
     0,   224,   202,   324,     0,     0,    74,   197,   324,   202,
   324,   202,   324,   198,   226,   203,   224,   204,     6,     0,
   324,     0,   227,   202,   324,     0,     0,    75,   197,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   198,   229,   203,   227,   204,     6,     0,   324,     0,   230,
   202,   324,     0,     0,    76,   197,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   198,   232,   203,
   230,   204,     6,     0,   324,     0,   233,   202,   324,     0,
     0,    77,   197,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   198,   235,   203,   233,   204,     6,
     0,   324,     0,   236,   202,   324,     0,     0,    78,   197,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   198,   238,   203,
   236,   204,     6,     0,   324,     0,   239,   202,   324,     0,
     0,    79,   197,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   198,   241,   203,   239,   204,     6,     0,   324,     0,   242,
   202,   324,     0,     0,    80,   197,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   198,   244,   203,   242,   204,     6,     0,
   324,     0,   245,   202,   324,     0,     0,    81,   197,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   198,   247,   203,   245,   204,     6,     0,   324,
     0,   248,   202,   324,     0,     0,    82,   197,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   198,   250,   203,   248,   204,     6,     0,   324,     0,
   251,   202,   324,     0,     0,    83,   197,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   198,   253,   203,   251,   204,     6,     0,   324,     0,   254,
   202,   324,     0,     0,    84,   197,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   198,
   256,   203,   254,   204,     6,     0,   324,     0,   257,   202,
   324,     0,     0,    85,   197,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   198,   259,
   203,   257,   204,     6,     0,   324,     0,   260,   202,   324,
     0,     0,    86,   197,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   198,   262,   203,
   260,   204,     6,     0,   324,     0,   263,   202,   324,     0,
     0,    87,   197,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   198,   265,   203,   263,   204,     6,     0,   324,     0,   266,
   202,   324,     0,     0,    88,   197,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   198,   268,   203,   266,   204,     6,     0,
   324,     0,   269,   202,   324,     0,     0,    89,   197,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   198,   271,   203,   269,
   204,     6,     0,   324,     0,   272,   202,   324,     0,     0,
    90,   197,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   198,   274,   203,
   272,   204,     6,     0,   324,     0,   275,   202,   324,     0,
     0,    91,   197,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   198,   277,
   203,   275,   204,     6,     0,   324,     0,   278,   202,   324,
     0,     0,    92,   197,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   198,
   280,   203,   278,   204,     6,     0,   324,     0,   281,   202,
   324,     0,     0,    93,   197,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   198,   283,   203,   281,   204,     6,
     0,   324,     0,   284,   202,   324,     0,     0,    94,   197,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   202,   324,   202,   324,   202,   324,   202,   324,   198,
   286,   203,   284,   204,     6,     0,   324,     0,   287,   202,
   324,     0,     0,    95,   197,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   202,   324,   202,   324,   202,   324,
   202,   324,   202,   324,   198,   289,   203,   287,   204,     6,
     0,   338,     0,   290,   202,   338,     0,     0,    96,   197,
   324,   202,   324,   202,   324,   198,   292,   203,   290,   204,
     6,     0,   338,     0,   293,   202,   338,     0,     0,    97,
   197,   324,   202,   324,   202,   324,   202,   324,   198,   295,
   203,   293,   204,     6,     0,     7,     0,   172,     0,   173,
     0,   174,     0,   175,     0,   193,     0,   194,     0,     4,
   296,   324,     6,     0,     4,   199,   324,   200,   296,   324,
     6,     0,     4,   199,   203,   334,   204,   200,   296,   332,
     6,     0,     4,   199,   200,     7,   332,     6,     0,     4,
   297,     6,     0,     4,   199,   324,   200,   297,     6,     0,
     4,   201,     4,     7,   338,     6,     0,     4,   199,   324,
   200,   201,     4,     7,   338,     6,     0,     4,   201,     4,
   296,   324,     6,     0,     4,   199,   324,   200,   201,     4,
   296,   324,     6,     0,     4,   201,     4,   297,     6,     0,
     4,   199,   324,   200,   201,     4,   297,     6,     0,     4,
   201,   106,   201,     4,     7,   335,     6,     0,     4,   199,
   324,   200,   201,   106,   201,     4,     7,   335,     6,     0,
     4,   201,   107,     7,   336,     6,     0,     4,   199,   324,
   200,   201,   107,     7,   336,     6,     0,    58,   197,     4,
   198,   201,     4,     7,   324,     6,     0,    58,   197,     4,
   198,   201,     4,     7,   338,     6,     0,    38,   197,   324,
   198,     7,   326,     6,     0,    54,    38,   197,   324,   198,
     7,   332,     6,     0,    70,    38,   332,     7,   203,   324,
   202,   324,   202,   324,   204,     6,     0,    45,    46,   332,
     7,   324,     6,     0,    41,   197,   324,   198,     7,   332,
     6,     0,    43,   197,   324,   198,     7,   332,     6,     0,
    70,    41,   332,     7,   203,   324,   202,   324,   202,   324,
   204,     6,     0,    39,   197,   324,   198,     7,   332,     6,
     0,    40,   197,   324,   198,     7,   332,     6,     0,    39,
   197,   324,   198,     7,   332,    49,   326,     6,     0,    47,
   197,   324,   198,     7,   203,   324,   202,   324,   202,     5,
   202,     5,   202,     5,   204,     6,     0,    54,    41,   197,
   324,   198,     7,   332,     6,     0,    41,    65,   197,   324,
   198,     7,   332,     6,     0,    99,   197,   324,   198,     7,
   332,     6,     0,   100,   197,   324,   198,     7,   332,     6,
     0,   101,   197,   324,   198,     7,   332,   105,   332,   102,
   324,     6,     0,    49,    42,   197,   324,   198,     7,   332,
     6,     0,   117,    42,   197,   324,   198,     7,   203,   324,
   202,   332,   204,     6,     0,    50,    42,   197,   324,   198,
     7,   332,     6,     0,    51,    42,   197,   324,   198,     7,
   197,   324,   202,   324,   198,   332,   332,     6,     0,   101,
    42,   103,   104,   197,   324,   198,     7,   330,   105,   203,
   332,   202,   332,   204,   102,   203,   324,   202,   324,   204,
     6,     0,   101,    42,   197,   324,   198,     7,   330,   105,
   203,   332,   202,   332,   204,   102,   203,   324,   202,   324,
   204,     6,     0,    54,    42,   197,   324,   198,     7,   332,
     6,     0,    42,    65,   197,   324,   198,     7,   332,     6,
     0,    53,    44,   197,   324,   198,     7,   332,     6,     0,
    44,   197,   324,   198,     7,   332,     6,     0,    54,    44,
   197,   324,   198,     7,   332,     6,     0,    60,   326,   203,
   301,   204,     0,    59,   203,   326,   202,   326,   202,   324,
   204,   203,   301,   204,     0,    61,   326,   203,   301,   204,
     0,    62,   203,   326,   202,   324,   204,   203,   301,   204,
     0,   303,     0,   302,     0,   300,     0,     0,   302,   299,
     0,   302,    38,   203,   334,   204,     6,     0,   302,    41,
   203,   334,   204,     6,     0,   302,    42,   203,   334,   204,
     6,     0,   302,    44,   203,   334,   204,     6,     0,    64,
   203,   302,   204,     0,    64,     4,   199,   324,   200,     6,
     0,    67,   203,   302,   204,     0,    67,     4,   199,   324,
   200,     6,     0,    67,     4,     6,     0,   106,   335,   203,
   302,   204,     0,   118,   338,     6,     0,   119,   338,     6,
     0,   118,   203,   302,   204,     0,   119,   203,   302,   204,
     0,     4,   338,     6,     0,     4,     4,   199,   324,   200,
   338,     6,     0,     4,   324,     6,     0,    58,   197,     4,
   198,   201,     4,     6,     0,    98,     4,     6,     0,   113,
     6,     0,    37,     6,     0,   108,   197,   324,     8,   324,
   198,     0,   108,   197,   324,     8,   324,     8,   324,   198,
     0,   108,     4,   109,   203,   324,     8,   324,   204,     0,
   108,     4,   109,   203,   324,     8,   324,     8,   324,   204,
     0,   110,     0,   116,     4,     0,   114,     0,   115,     4,
     6,     0,   111,   197,   324,   198,     0,   112,     0,    63,
    38,   203,   324,   202,   326,   204,     6,     0,    63,    38,
   203,   324,   202,   326,   202,   326,   202,   324,   204,     6,
     0,    63,    38,   203,   324,   202,   326,   202,   326,   202,
   326,   202,   324,   204,     6,     0,     0,    63,    38,   203,
   324,   202,   326,   204,   310,   203,   319,   204,     6,     0,
     0,    63,    38,   203,   324,   202,   326,   202,   326,   202,
   324,   204,   311,   203,   319,   204,     6,     0,     0,    63,
    38,   203,   324,   202,   326,   202,   326,   202,   326,   202,
   324,   204,   312,   203,   319,   204,     6,     0,    63,    41,
   203,   324,   202,   326,   204,     6,     0,    63,    41,   203,
   324,   202,   326,   202,   326,   202,   324,   204,     6,     0,
    63,    41,   203,   324,   202,   326,   202,   326,   202,   326,
   202,   324,   204,     6,     0,     0,    63,    41,   203,   324,
   202,   326,   204,   313,   203,   319,   204,     6,     0,     0,
    63,    41,   203,   324,   202,   326,   202,   326,   202,   324,
   204,   314,   203,   319,   204,     6,     0,     0,    63,    41,
   203,   324,   202,   326,   202,   326,   202,   326,   202,   324,
   204,   315,   203,   319,   204,     6,     0,    63,    42,   203,
   324,   202,   326,   204,     6,     0,    63,    42,   203,   324,
   202,   326,   202,   326,   202,   324,   204,     6,     0,    63,
    42,   203,   324,   202,   326,   202,   326,   202,   326,   202,
   324,   204,     6,     0,     0,    63,    42,   203,   324,   202,
   326,   204,   316,   203,   319,   204,     6,     0,     0,    63,
    42,   203,   324,   202,   326,   202,   326,   202,   324,   204,
   317,   203,   319,   204,     6,     0,     0,    63,    42,   203,
   324,   202,   326,   202,   326,   202,   326,   202,   324,   204,
   318,   203,   319,   204,     6,     0,   320,     0,   319,   320,
     0,    71,   203,   332,   202,   332,   202,   332,   204,     6,
     0,    71,   203,   332,   202,   332,   204,     6,     0,    66,
     6,     0,    52,    41,   332,     7,   324,     6,     0,    52,
    41,   332,     7,   324,    55,    57,   324,     6,     0,    52,
    41,   332,     7,   324,    55,    56,   324,     6,     0,    52,
    42,   203,   324,   204,     7,   332,     6,     0,    48,    42,
   203,   324,   204,     7,   332,     6,     0,    52,    44,   203,
   324,   204,     7,   332,     6,     0,    66,    42,   332,     7,
   324,     6,     0,    66,    42,   332,     6,     0,    68,     6,
     0,    69,     6,     0,   123,     0,   124,     0,   125,     0,
   126,     0,   127,     0,   325,     0,   197,   324,   198,     0,
   187,   324,     0,   186,   324,     0,   192,   324,     0,   324,
   187,   324,     0,   324,   186,   324,     0,   324,   188,   324,
     0,   324,   189,   324,     0,   324,   190,   324,     0,   324,
   196,   324,     0,   324,   182,   324,     0,   324,   184,   324,
     0,   324,   183,   324,     0,   324,   185,   324,     0,   324,
   179,   324,     0,   324,   180,   324,     0,   324,   178,   324,
     0,   324,   177,   324,     0,   324,   176,   324,     8,   324,
     0,    12,   197,   324,   198,     0,    13,   197,   324,   198,
     0,    14,   197,   324,   198,     0,    15,   197,   324,   198,
     0,    16,   197,   324,   198,     0,    17,   197,   324,   198,
     0,    18,   197,   324,   198,     0,    19,   197,   324,   198,
     0,    20,   197,   324,   198,     0,    22,   197,   324,   198,
     0,    23,   197,   324,   202,   324,   198,     0,    24,   197,
   324,   198,     0,    25,   197,   324,   198,     0,    26,   197,
   324,   198,     0,    27,   197,   324,   198,     0,    28,   197,
   324,   198,     0,    29,   197,   324,   198,     0,    30,   197,
   324,   202,   324,   198,     0,    31,   197,   324,   202,   324,
   198,     0,    32,   197,   324,   202,   324,   198,     0,    21,
   197,   324,   198,     0,    12,   199,   324,   200,     0,    13,
   199,   324,   200,     0,    14,   199,   324,   200,     0,    15,
   199,   324,   200,     0,    16,   199,   324,   200,     0,    17,
   199,   324,   200,     0,    18,   199,   324,   200,     0,    19,
   199,   324,   200,     0,    20,   199,   324,   200,     0,    22,
   199,   324,   200,     0,    23,   199,   324,   202,   324,   200,
     0,    24,   199,   324,   200,     0,    25,   199,   324,   200,
     0,    26,   199,   324,   200,     0,    27,   199,   324,   200,
     0,    28,   199,   324,   200,     0,    29,   199,   324,   200,
     0,    30,   199,   324,   202,   324,   200,     0,    31,   199,
   324,   202,   324,   200,     0,    32,   199,   324,   202,   324,
   200,     0,    21,   199,   324,   200,     0,     3,     0,     9,
     0,    10,     0,    11,     0,     4,     0,     4,   199,   324,
   200,     0,     4,   297,     0,     4,   199,   324,   200,   297,
     0,     4,   201,     4,     0,     4,   199,   324,   200,   201,
     4,     0,     4,   201,     4,   297,     0,     4,   199,   324,
   200,   201,     4,   297,     0,   327,     0,   187,   326,     0,
   186,   326,     0,   326,   187,   326,     0,   326,   186,   326,
     0,   203,   324,   202,   324,   202,   324,   202,   324,   202,
   324,   204,     0,   203,   324,   202,   324,   202,   324,   202,
   324,   204,     0,   203,   324,   202,   324,   202,   324,   204,
     0,   197,   324,   202,   324,   202,   324,   198,     0,     0,
   197,   329,   198,     0,     5,     0,   329,   202,     5,     0,
     0,   203,   331,   204,     0,   197,   331,   198,     0,   332,
     0,   331,   202,   332,     0,   324,     0,   333,     0,   203,
   334,   204,     0,   187,   203,   334,   204,     0,   324,     8,
   324,     0,   324,     8,   324,     8,   324,     0,    38,   203,
   324,   204,     0,   300,     0,   303,     0,   309,     0,     4,
   199,   200,     0,   187,     4,   199,   200,     0,     4,   199,
   203,   334,   204,   200,     0,   187,     4,   199,   203,   334,
   204,   200,     0,   324,     0,   333,     0,   334,   202,   324,
     0,   334,   202,   333,     0,   203,   324,   202,   324,   202,
   324,   202,   324,   204,     0,   203,   324,   202,   324,   202,
   324,   204,     0,     4,     0,     4,   201,   106,   201,     4,
     0,   203,   337,   204,     0,     4,   199,   324,   200,   201,
   107,     0,   335,     0,   337,   202,   335,     0,     5,     0,
    35,   197,   338,   202,   338,   198,     0,    36,   197,   338,
   198,     0,    34,   197,   338,   198,     0,    34,   197,   338,
   202,   334,   198,     0,    34,   197,     4,   201,     4,   198,
     0,    34,   197,     4,   199,   324,   200,   201,     4,   198,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   168,   170,   171,   172,   177,   179,   182,   190,   204,   214,
   216,   219,   221,   222,   225,   231,   236,   237,   238,   241,
   245,   248,   254,   259,   265,   273,   278,   282,   288,   293,
   297,   302,   306,   309,   314,   318,   322,   326,   331,   335,
   338,   342,   346,   350,   354,   358,   362,   365,   369,   372,
   376,   379,   386,   390,   396,   398,   399,   400,   401,   402,
   403,   404,   405,   406,   407,   408,   409,   410,   413,   418,
   433,   438,   444,   449,   450,   451,   452,   453,   454,   455,
   456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   477,
   480,   484,   490,   496,   499,   503,   509,   515,   518,   522,
   528,   534,   537,   541,   549,   555,   558,   562,   570,   576,
   579,   583,   591,   597,   600,   604,   616,   622,   625,   629,
   641,   647,   650,   654,   666,   672,   675,   679,   692,   698,
   701,   705,   718,   724,   727,   731,   744,   750,   753,   757,
   770,   776,   779,   783,   796,   802,   805,   809,   822,   828,
   831,   835,   858,   864,   867,   871,   894,   900,   903,   907,
   930,   936,   939,   943,   961,   967,   970,   974,   992,   998,
  1001,  1005,  1023,  1029,  1032,  1036,  1053,  1059,  1062,  1066,
  1083,  1089,  1092,  1096,  1113,  1119,  1125,  1132,  1140,  1146,
  1152,  1159,  1167,  1176,  1178,  1179,  1180,  1181,  1184,  1186,
  1189,  1220,  1254,  1301,  1316,  1325,  1340,  1352,  1366,  1389,
  1413,  1425,  1439,  1451,  1465,  1485,  1507,  1517,  1531,  1542,
  1548,  1567,  1581,  1587,  1593,  1612,  1618,  1624,  1640,  1647,
  1653,  1659,  1670,  1681,  1706,  1712,  1731,  1753,  1759,  1767,
  1773,  1779,  1788,  1794,  1800,  1810,  1816,  1821,  1826,  1833,
  1835,  1836,  1839,  1844,  1848,  1862,  1876,  1890,  1908,  1919,
  1929,  1937,  1941,  1950,  1962,  1970,  1975,  1984,  1995,  2031,
  2044,  2061,  2070,  2077,  2081,  2101,  2113,  2123,  2144,  2165,
  2186,  2192,  2197,  2202,  2206,  2214,  2227,  2237,  2247,  2252,
  2262,  2267,  2277,  2282,  2294,  2311,  2328,  2345,  2350,  2367,
  2372,  2389,  2394,  2414,  2430,  2446,  2462,  2467,  2484,  2490,
  2507,  2513,  2532,  2536,  2541,  2568,  2592,  2600,  2619,  2637,
  2655,  2677,  2698,  2719,  2733,  2752,  2757,  2766,  2768,  2769,
  2770,  2771,  2774,  2776,  2777,  2778,  2779,  2780,  2781,  2782,
  2783,  2790,  2791,  2792,  2793,  2794,  2795,  2796,  2797,  2798,
  2799,  2800,  2801,  2802,  2803,  2804,  2805,  2806,  2807,  2808,
  2809,  2810,  2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,
  2819,  2820,  2821,  2823,  2824,  2825,  2826,  2827,  2828,  2829,
  2830,  2831,  2832,  2833,  2834,  2835,  2836,  2837,  2838,  2839,
  2840,  2841,  2842,  2843,  2848,  2853,  2854,  2855,  2859,  2870,
  2887,  2898,  2917,  2933,  2949,  2965,  2982,  2987,  2991,  2995,
  2999,  3005,  3010,  3014,  3018,  3024,  3028,  3033,  3037,  3042,
  3046,  3050,  3056,  3062,  3069,  3075,  3079,  3083,  3093,  3100,
  3111,  3131,  3140,  3149,  3160,  3174,  3190,  3210,  3234,  3240,
  3244,  3248,  3259,  3264,  3275,  3280,  3298,  3303,  3316,  3322,
  3328,  3333,  3341,  3354,  3358,  3376,  3390
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr",
"FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   205,   205,   205,   205,   206,   206,   207,   207,   207,   208,
   208,   209,   209,   209,   210,   210,   210,   210,   210,   211,
   211,   211,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   213,   213,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   215,   215,
   216,   216,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   218,
   218,   220,   219,   221,   221,   223,   222,   224,   224,   226,
   225,   227,   227,   229,   228,   230,   230,   232,   231,   233,
   233,   235,   234,   236,   236,   238,   237,   239,   239,   241,
   240,   242,   242,   244,   243,   245,   245,   247,   246,   248,
   248,   250,   249,   251,   251,   253,   252,   254,   254,   256,
   255,   257,   257,   259,   258,   260,   260,   262,   261,   263,
   263,   265,   264,   266,   266,   268,   267,   269,   269,   271,
   270,   272,   272,   274,   273,   275,   275,   277,   276,   278,
   278,   280,   279,   281,   281,   283,   282,   284,   284,   286,
   285,   287,   287,   289,   288,   290,   290,   292,   291,   293,
   293,   295,   294,   296,   296,   296,   296,   296,   297,   297,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   299,   299,
   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
   299,   299,   299,   299,   299,   300,   300,   300,   300,   301,
   301,   301,   302,   302,   302,   302,   302,   302,   303,   303,
   304,   304,   304,   305,   306,   306,   306,   306,   307,   307,
   307,   307,   307,   307,   307,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   309,   309,   309,   310,   309,
   311,   309,   312,   309,   309,   309,   309,   313,   309,   314,
   309,   315,   309,   309,   309,   309,   316,   309,   317,   309,
   318,   309,   319,   319,   320,   320,   320,   321,   321,   321,
   321,   321,   321,   321,   321,   322,   322,   323,   323,   323,
   323,   323,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   326,   326,   326,   326,
   326,   327,   327,   327,   327,   328,   328,   329,   329,   330,
   330,   330,   331,   331,   332,   332,   332,   332,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   334,   334,
   334,   334,   335,   335,   335,   335,   336,   336,   337,   337,
   338,   338,   338,   338,   338,   338,   338
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     7,
     6,     8,     0,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    55,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    43,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    37,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    13,     1,
     3,     0,    15,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     3,     6,     6,     9,     6,     9,
     5,     8,     8,    11,     6,     9,     9,     9,     7,     8,
    12,     6,     7,     7,    12,     7,     7,     9,    17,     8,
     8,     7,     7,    11,     8,    12,     8,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     4,     6,     3,     5,     3,     3,     4,     4,     3,     7,
     3,     7,     3,     2,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     8,    12,    14,     0,    12,     0,
    16,     0,    18,     8,    12,    14,     0,    12,     0,    16,
     0,    18,     1,     2,     9,     7,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     2,     1,     1,     1,
     1,     1,     1,     3,     2,     2,     2,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     4,     4,     4,     6,
     6,     6,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     4,     4,     4,
     6,     6,     6,     4,     1,     1,     1,     1,     1,     4,
     2,     5,     3,     6,     4,     7,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     0,     3,     1,     3,     0,
     3,     3,     1,     3,     1,     1,     3,     4,     3,     5,
     4,     1,     1,     1,     3,     4,     6,     7,     1,     1,
     3,     3,     9,     7,     1,     5,     3,     6,     1,     3,
     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
     0,   295,     0,   292,     0,     0,     0,     0,     0,    54,
    56,    55,    57,    58,    59,    60,    61,    62,    63,    68,
    67,    64,    65,    66,     5,     0,     0,     0,    15,    16,
    18,    17,    19,   426,   426,     0,   405,   409,   461,   204,
   406,   407,   408,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   205,   206,   207,
   208,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     0,     0,   343,     0,     0,   285,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   417,     0,     0,     0,     0,
     0,     0,   263,     0,     0,   263,   336,   337,     0,     0,
     0,     0,     0,     0,     0,   455,     0,     0,     0,     0,
     0,   284,     0,   291,     0,   461,   263,     0,   263,     0,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   411,     0,
    73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   409,   346,   345,   347,
     0,     0,     0,     0,     0,     0,     0,     0,   215,   281,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   279,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   409,     0,     0,     0,   442,
   443,   444,   435,     0,   436,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   419,   418,     0,     0,     0,     0,   263,   263,     0,     0,
     0,     0,     0,     0,     0,   273,     0,     0,     0,     0,
   283,     0,     0,     0,     0,     0,     0,     0,   263,     0,
     0,     0,   293,     0,     0,   275,     0,   276,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   428,
     0,     0,     0,     0,     0,   413,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   344,     0,     0,   449,   450,
     0,     0,   204,     0,     0,     0,     0,   211,     0,   361,
   360,   358,   359,   354,   356,   355,   357,   349,   348,   350,
   351,   352,   353,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   409,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   421,   420,   262,
     0,   261,   260,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   269,   264,   335,     0,     0,   271,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   294,     0,   277,   278,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   427,     0,     0,    21,
     0,   410,   415,    73,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   363,   384,   364,
   385,   365,   386,   366,   387,   367,   388,   368,   389,   369,
   390,   370,   391,   371,   392,   383,   404,   372,   393,     0,
     0,   374,   395,   375,   396,   376,   397,   377,   398,   378,
   399,   379,   400,     0,     0,     0,     0,     0,     0,     0,
     0,   464,     0,     0,   463,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   221,     0,     0,     0,     0,     0,
    69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   445,     0,     0,     0,     0,   437,   439,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   256,   258,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   274,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   429,     0,   426,     0,   412,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    71,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   410,   214,
   451,   452,     0,     0,     0,     0,     0,   216,   217,   219,
     0,     0,   459,     0,   225,   362,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   441,   446,     0,   438,
     0,   232,     0,     0,     0,     0,     0,   328,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   270,     0,     0,     0,     0,   334,
   272,     0,     0,     0,     0,     0,   430,     0,   456,     0,
     0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   338,   339,
   340,   341,   342,     0,     0,     0,     0,     0,     0,     0,
    20,     0,   414,   280,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   373,   394,   380,   401,   381,   402,   382,   403,     0,
   466,   465,   462,     0,   204,     0,     0,     0,     0,   212,
     0,     0,     0,   457,    70,   229,   236,     0,   237,     0,
   233,     0,   234,   254,     0,     0,   440,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   282,     0,     0,     0,     0,   263,     0,   299,     0,
   308,     0,   317,     0,     0,     0,     0,     0,     0,   242,
   243,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   426,   416,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   222,     0,     0,   223,     0,   460,
     0,   241,   252,   447,     0,     0,   332,   245,   247,     0,
     0,     0,   331,   333,   253,   230,   240,   251,   255,     0,
     0,     0,   425,     0,   424,     0,     0,   296,     0,     0,
   305,     0,     0,   314,     0,   265,   266,   267,   268,     0,
     0,   430,     0,   433,     0,     0,     0,     0,   454,     0,
   288,   287,     0,     0,     0,     0,     0,    23,     0,    32,
     0,    36,     0,    30,     0,     0,    35,     0,    40,    38,
     0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   213,   218,   220,     0,   226,     0,   238,   448,
     0,     0,   330,   329,   227,   228,   263,     0,   259,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   432,     0,
   431,     0,     0,     0,     0,     0,     0,     0,   430,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   467,     0,   458,     0,     0,
     0,     0,   423,     0,     0,     0,     0,     0,     0,     0,
     0,   323,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   434,     0,     0,   453,   289,     0,     0,    37,     0,
     0,     0,     0,    27,     0,    33,     0,    39,    28,    41,
     0,    44,     0,    48,    49,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   224,     0,     0,   257,
     0,     0,   301,     0,   327,     0,     0,   324,   310,     0,
     0,   319,     0,     0,     0,     0,     0,     0,   244,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   102,   106,   110,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   198,     0,     0,
     0,   422,   297,     0,     0,     0,   300,   306,     0,     0,
   309,   315,     0,     0,   318,   231,   235,     0,     0,   246,
     0,     0,     0,     0,     0,    31,    34,    42,     0,    43,
    50,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   303,     0,     0,   312,     0,   321,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   202,     0,   248,     0,   298,     0,     0,     0,
   307,     0,     0,   316,     0,     0,     0,     0,     0,     0,
    26,    29,     0,     0,     0,   100,     0,   104,     0,   108,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   196,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   302,     0,     0,   326,   311,     0,   320,     0,     0,
     0,     0,     0,     0,    46,    22,   101,   103,   105,   107,
   109,   111,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   197,   199,     0,   200,   239,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,   118,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,   325,   313,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   201,   203,     0,     0,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   250,
     0,     0,     0,   112,     0,   116,     0,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   249,     0,    24,   113,   115,   117,   119,
   121,   123,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   126,   130,   134,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     0,   128,     0,   132,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,   127,   129,   131,   133,   135,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   138,   142,   146,   150,   154,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,     0,   140,     0,   144,     0,   148,     0,   152,
     0,   156,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,   139,   141,   143,   145,   147,   149,   151,
   153,   155,   157,   159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   186,
   190,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   184,     0,   188,
     0,   192,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   185,   187,   189,   191,   193,   195,     0,     0,     0,   174,
   178,   182,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   172,     0,
   176,     0,   180,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   173,   175,   177,   179,   181,
   183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   162,
   166,   170,     0,     0,     0,     0,     0,     0,     0,   160,
     0,   164,     0,   168,     0,     0,     0,     0,     0,     0,
   161,   163,   165,   167,   169,   171,     0,     0,     0
};

static const short yydefgoto[] = {  2317,
    87,     5,     6,    19,    20,    21,    22,     7,    70,    71,
    72,   438,  1635,   652,  1544,  1637,   653,  1545,  1639,   654,
  1546,  1853,   655,  1800,  1855,   656,  1801,  1857,   657,  1802,
  1989,   658,  1951,  1991,   659,  1952,  1993,   660,  1953,  2101,
   661,  2071,  2103,   662,  2072,  2105,   663,  2073,  2107,   664,
  2074,  2109,   665,  2075,  2111,   666,  2076,  2299,   667,  2293,
  2301,   668,  2294,  2303,   669,  2295,  2248,   670,  2236,  2250,
   671,  2237,  2252,   672,  2238,  2197,   673,  2179,  2199,   674,
  2180,  2201,   675,  2181,  1662,   676,  1568,  1756,   677,  1664,
   140,   249,    73,   565,   340,   551,   552,   341,    77,    78,
    79,    80,    81,   342,  1199,  1514,  1618,  1202,  1519,  1622,
  1205,  1523,  1625,  1381,  1382,    83,    84,   984,   343,   143,
   361,   176,   244,   431,  1095,  1213,  1214,   345,   491,   198,
   739,   894,   144
};

static const short yypact[] = {  2541,
    38,-32768,-32768,  -100,-32768,   269,  3042,-32768,    25,    83,
    92,   142,   159,   270,   273,   -44,    87,    90,-32768,-32768,
-32768,-32768,  2284,   106,   306,   124,   131,   144,   -33,   293,
   164,   176,   352,   204,   422,   426,   446,   452,   439,   456,
     1,   314,   300,   156,   156,   322,   541,     5,   489,     6,
   537,   548,    -7,   533,   369,   390,   -18,     7,    17,-32768,
   399,-32768,   554,-32768,   659,   672,   656,    15,    22,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   696,    25,  2908,-32768,-32768,
-32768,-32768,-32768,   509,   509,   708,-32768,   256,     8,-32768,
-32768,-32768,-32768,  -114,   -65,   -41,   147,   175,   184,   207,
   315,   331,   379,   389,   398,   403,   408,   409,   413,   414,
   419,   420,   462,   463,   546,   561,   568,-32768,-32768,-32768,
-32768,   412,   412,   412,-32768,-32768,   412,   969,    29,   412,
   732,   695,-32768,   742,   744,-32768,   412,   412,   412,   583,
   412,   599,   412,   412,   611,   412,   565,   618,   619,   666,
   611,   596,   655,   670,   673,   679,   690,   692,   888,   156,
   156,   156,   412,   412,  -106,-32768,   -87,   156,   691,   693,
   694,   699,-32768,   611,    20,-32768,-32768,-32768,   611,   611,
   887,   412,   412,   -57,   412,   698,   412,   697,   786,   412,
   412,-32768,   895,-32768,   705,-32768,-32768,   897,-32768,   898,
-32768,    25,   711,   712,   713,   714,   715,   717,   718,   719,
   720,   721,   722,   723,   724,   725,   727,   728,   729,   733,
   735,   736,   767,   768,   769,   770,   774,   778,   779,   780,
   805,   806,   934,   802,   772,   803,   412,  1003,-32768,   156,
-32768,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,    68,    57,    57,   276,   812,   812,   812,
 10726,  1002,  1824, 10026,   145,   809,  1004,   773,-32768,-32768,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,-32768,   -27, 10749, 10772, 10795,
   412, 10818,   412, 10841, 10864,   316,   813,  1499,  1824,-32768,
-32768,-32768,  1789,  1005,-32768, 10887,   412,   412,   412,   412,
  1008,   412,   412,   412,   412,   412,   412,   412,   819,   -42,
-32768,-32768,  3474,  3495,   156,   156,   474,   474,   -20,   412,
   412,   412,   412,  2574,   101,-32768,   412,  2670,  1011,  1013,
-32768, 10910, 10933,   917,   412, 10956,   921,  3516,-32768,   834,
  1902, 10979,-32768,   412,  2703,-32768,  2768,-32768,   875,  1039,
  1040,  1041,  1042,  1043,  1049,  1050,  1051,  1052,  1053,  1054,
  1055,  1056,  1057,  1058,  1059,  1062,  1063,  1065,  1066,  1067,
  1069,  1071,   922,  1074,  1076,  1077,  1080,  1083,  1082,-32768,
     2,  1084,  1085,  1087, 10051,   225,   -74,  2849, 11002, 10076,
 11025, 10101, 11048, 10126, 11071, 10151, 11094, 10176, 11117, 10201,
 11140, 10226, 11163, 10251, 11186, 10276, 11209, 10301, 11232, 10326,
  3537,  3558, 11255, 10351, 11278, 10376, 11301, 10401, 11324, 10426,
 11347, 10451, 11370, 10476,  3579,  3600,  3621,  3642,  3663,  3684,
    27,   153,   881,   890,   412,-32768,   611,  2318,  1789,-32768,
    -8,    12,    57,   412,  1088,  1089,    14,-32768,  2237,   605,
   536,   363,   363,   309,   309,   309,   309,   330,   330,   812,
   812,   812,   812,  1090,  1824,  1093,  1094,  1095, 11393,  1096,
 11416,  1098,  1099,  1190,   412,   328,  1824,   477,   412,   412,
  1100,  1944, 11439, 11462, 11485,   412,  3003,  3026, 11508, 11531,
 11554, 11577, 11600,   894,   156,   412,   412,-32768,-32768,-32768,
   905,  3124,-32768,   906,   412,  3705,  3726,  3747, 10501,     0,
   -40,   -11,    19,-32768,-32768,-32768,   412, 10526,-32768,   908,
   940,  1147,  1150,   963, 11623,  1152,   961,   412,  2792,   412,
   412,-32768, 11646,-32768,-32768,   994,   965,   966,   968,   971,
   972,   973,   979,   996,  1023,  1024,  1025,  1026,  1068,  1086,
  1092,  1101,  1102,  1103,  1104,  1106,  1107,  1108,  1109,  1111,
  1112,  1114,  1141,  1142,  1143,  1145,-32768,  1159,   967,-32768,
  1146,    84,-32768,-32768,  1079,  1081,  1105,  1153,  1157,  1158,
  1160,  1161,  1162,  1163,  1181,  1182,  1183,  1186,  1187,  1188,
  1189,  1191,  1192,  1194,  1195,  1197,  1198,  1199,  1200,  1201,
  1247,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   412,
   412,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   412,   412,   412,   412,   412,   412,   412,
  1255,-32768,  1824,    57,-32768, 10551,  1274,  1824,  1091,    32,
   412,  1276,  1279,   846,-32768,  1280,  1097,     7,  1283,   412,
-32768,   158,   156,   611,   611,  1285,   611,  1290,   611,   611,
-32768,  1824,  3060,  1220,   478,-32768,  2252,   962,  1196,  1291,
  1293,  1294,  1349,   758,  1393,  1394,  1395,  1396,  1397,  1398,
  1401,  1282,   193,  3768,  3789,-32768,-32768,  3083,   156,   156,
   156,  1403,  1824,  1824,  1824,  1824,  1000,  1404,   412,   412,
   611,   611,   412,  1406,   611,  1407,  3810,-32768,  2343,   468,
  1408,  1249,  1413,   412,   412,   156,  1415,  1416,  1233,  1419,
  1421,   611,   611,  1422,   156,  1423,  1424,   611,   611,  1425,
  1426,  1427,  1429,  1430,   611,   467,   611,  1431,  1436,  1442,
  1433,  1454,-32768,  1453,   509,  1456,-32768,  1455,  2925,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,-32768, 11669, 10576, 11692, 10601,
 11715, 10626, 11738, 10651, 10676,  1237,   194,  1260,   -47,-32768,
  1789,-32768,    16,   195,  1262,  1478,  1078,-32768,-32768,-32768,
     7,   412,-32768,   481,-32768, 12589,  1481,    95,    35,  1482,
   611,  1483,   611,  1484,  1485,   482,-32768,-32768,  1824,-32768,
   412,-32768,   412,   611,   611,   611,  1295,-32768,   671,   611,
   611,   611,   611,   611,   611,   611,   661,   412,   412,   412,
  1292,  -116,  -108,   -81,-32768,   485,   486,   500,   505,-32768,
-32768,  3831,  3852,  1487,  1488, 11761,   108,  1391,-32768,   412,
   412,   412,-32768,  1297,    25,  1296,  3873,  3894,  -134,  1299,
  1306,  1303,  1308,  1305,  1336,  1333,  1334,  -111,  1335,  1364,
  1365,  1362,  1387,  1388,  1390,  1392,  1399,  1400,-32768,-32768,
-32768,-32768,-32768,  1402,  1428,  1435,  1437,  1438,  1405,  1441,
-32768,  1443,   225,-32768,  1491,  3915,  3936,  3957,  3978,  3999,
  4020,  4041,  4062,  4083,  4104,  4125,  4146,  4167,  4188,  4209,
  4230,  4251,  4272,  4293,  4314,  4335,  4356,  4377,  4398,  4419,
  4440,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1434,
-32768,-32768,-32768,   611,    57,   412,  1587,  1591,    14,-32768,
  1594, 10701,     7,-32768,-32768,-32768,-32768,   156,-32768,  1596,
-32768,  1599,-32768,-32768,  1446,   508, 12589,  4461,  1600,  1617,
  1618,   412,   412,   412,  1619,  1620,  1621,  1623,  1625,  1626,
  1627,-32768,  2376,  3106, 11784,  1521,   474,   156,  1628,   156,
  1632,   156,  1641,  1642,  1643,  1644,  1645,   412,   412,-32768,
-32768,  1590,   611,   611,  1548,   611,  2312,   385, 11807,   412,
    25,  1651,   412,   611,  1649,  1653,  1655,  1469,  1657,   467,
  1682,  1656,   412,  1686,  1690,  1688,  1689,  1709,   467,   412,
   412,   412,   611,  1707,  1711,   467,   412,  1715,  1717,  1716,
   412,   509,-32768,-32768,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
  1720,  1721,  1722,  1185,-32768,  1723,  1725,-32768,  1528,-32768,
   136,-32768,-32768,-32768,  1533,   412,-32768,-32768,-32768,  4482,
  1266,  1432,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1593,
  1728,  1532,-32768,   412,-32768,  1534,   198,-32768,  1536,   200,
-32768,  1539,   259,-32768,  1540,-32768,-32768,-32768,-32768,  4503,
  4524,   108,   258,-32768,   531,  1541,  1634,   412,-32768,   412,
-32768,-32768,  4545,    25,  1547,  4566,  1535,-32768,  1544,-32768,
  1545,-32768,  1568,-32768,  1565, 11830,-32768,  1572,-32768,-32768,
  1586,  1588, 11853,  4587, 11876,  1583,-32768,  1589,  1592,  4608,
  1597,  1595,-32768,  4629,  1601,  4650,  4671,  4692,  4713,  4734,
  4755,  4776,  4797,  4818,  4839,  4860,  4881,  4902,  4923,  4944,
  4965,  4986,  5007,  5028,  5049,  5070,  5091,  5112,  5133,  5154,
  5175,  1598,-32768,-32768,-32768,     7,-32768,  1681,-32768,-32768,
  5196,   412,-32768,-32768,-32768,-32768,   474,  2791,-32768,  1529,
    56,  1529,    56,  1529,    56,   412,   412,  1687,-32768,   611,
-32768,   611,   412,  3129,  3158,   611,  1629,  1785,   108,   467,
  1792,   412,  1795,   467,  1796,  1801,  1820,  1823,  1825,   412,
  1826,   611,  1852,  1854,   412,  1827,  1875,   412,  1793,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,-32768,  1876,-32768,  1889, 11899,
  1700,   412,-32768,  1529,  1529,   412,  3181,   261,  1899,  1703,
    -6,-32768,  3210,   272,    -5,  3240,   280,    -3,  3263,  3286,
  1704,-32768,  1706,  1713,-32768,-32768,  1724,    25,-32768,  1727,
  1729,  1730,  5217,-32768,  1732,-32768,  1735,-32768,-32768,-32768,
 11922,-32768,  1733,-32768,-32768, 11945,  1736,-32768, 11968,  1734,
 11991, 12014, 12037,  5238,  5259,  5280,  5301,  5322,  5343,  5364,
  5385,  5406,  5427,  5448,  5469,  5490,  5511,  5532,  5553,  5574,
  5595,  5616,  5637,  5658, 12060,  5679,-32768,  1738,   611,-32768,
  3309,  3447,  1905,   412,-32768,   611,  1921,-32768,  1931,   412,
  1932,  1935,   412,  1936,  1937,  1938,   611,   611,-32768,  1939,
    25,   467,   467,   467,   467,  1940,  1964,  1974,   467,  1975,
  1976,  1977,  1979,-32768,-32768,-32768,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,-32768,   412,  1981,
   611,-32768,-32768,  1784,  3332,  1787,-32768,-32768,  1788,  3355,
-32768,-32768,  1790,  3378,-32768,-32768,-32768,  1807,  1808,-32768,
    25,  1811,  1812,  1817,  1819,-32768,-32768,-32768,  1816,-32768,
-32768,-32768,  1818,  1821,  1822,  1828,  5700,  5721,  5742,  5763,
  5784,  5805,  5826,  5847,  5868,  5889,  5910,  5931,  5952,  5973,
  5994,  6015,  6036,  6057,  6078,  6099,  6120,  1829, 12083,  1831,
  2013,    56,  2016,   611,    56,  2017,    56,  2020,   611,  1925,
  1863,   467,   467,  2023,  2024,   467,  2029,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,    57,-32768,  2030,-32768,     3,-32768,  1833,   532,    11,
-32768,  1834,   102,-32768,  1844,  1845,  1847,    25,  1846,  1849,
-32768,-32768,  1855,  1856,   535, 12589,   538, 12589,   542, 12589,
  6141,  6162,  6183,  6204,  6225,  6246,  6267,  6288,  6309,  6330,
  6351,  6372,  6393,  6414,  6435,  6456,  6477,  6498,  6519,  6540,
  6561,   543,-32768,  1853,  1848,  2049,    56,   611,  2051,  2052,
    56,  2053,    56,  1958,   412,    25,   467,   611,  2055,  2056,
   412,  2077,   412,  2087,   412,  2088,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,    57,  2089,    57,
  2090,-32768,   110,  1893,-32768,-32768,   274,-32768,   286,  1897,
  6582,    25,  1900,  1904,-32768,-32768, 12589,-32768, 12589,-32768,
 12589,-32768, 12106, 12129, 12152,  6603,  6624,  6645,  6666,  6687,
  6708,  6729,  6750,  6771,  6792,  6813,  6834,  6855,  6876,  6897,
  6918,  6939,  6960,-32768,-32768,   551,-32768,-32768,  2098,  2102,
  2104,  2119,   412,   412,  1965,   467,   611,-32768,-32768,-32768,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,    57,  2130,
-32768,-32768,-32768,-32768,  6981,  3401,  1966,  1945,  1947,  1948,
  1949,  1950,  7002,  7023,  7044,  7065,  7086,  7107,  7128,  7149,
  7170,  7191,  7212,  7233,  7254,  7275,  7296,  7317,  7338,  7359,
-32768,-32768,   412,  2132,-32768,   611,   467,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,  3424,-32768,
  1952,  1941,   552, 12589,   555, 12589,   567, 12589,  7380,  7401,
  7422,  7443,  7464,  7485,  7506,  7527,  7548,  7569,  7590,  7611,
  7632,  7653,  7674,  7695,  7716,  7737,  2144,   611,  2149,   412,
  2150,   412,  2151,   412,  2152,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,-32768,  1967,-32768, 12589,-32768, 12589,-32768,
 12589,-32768, 12175, 12198, 12221,  7758,  7779,  7800,  7821,  7842,
  7863,  7884,  7905,  7926,  7947,  7968,  7989,  8010,  8031,  8052,
   611,-32768,-32768,-32768,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,  1968,
  1969,  1970,  1971,  8073,  8094,  8115,  8136,  8157,  8178,  8199,
  8220,  8241,  8262,  8283,  8304,  8325,  8346,  8367,   611,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,  1973,   570, 12589,
   571, 12589,   574, 12589,  8388,  8409,  8430,  8451,  8472,  8493,
  8514,  8535,  8556,  8577,  8598,  8619,  8640,  8661,  8682,   467,
   412,  2162,   412,  2165,   412,  2170,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   412,  1980, 12589,-32768, 12589,-32768, 12589,-32768, 12244, 12267,
 12290, 12313, 12336, 12359,  8703,  8724,  8745,  8766,  8787,  8808,
  8829,  8850,  8871,  2171,-32768,-32768,-32768,-32768,-32768,-32768,
   412,   412,   412,   412,   412,   412,   412,   412,   412,-32768,
  1984,  1986,  1988,  1989,  1990,  1991,  8892,  8913,  8934,  8955,
  8976,  8997,  9018,  9039,  9060,   412,   412,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
   598, 12589,   602, 12589,   603, 12589,   607, 12589,   608, 12589,
   641, 12589,  9081,  9102,  9123,  9144,  9165,  9186,  9207,  9228,
  9249,   412,  2173,   412,  2189,   412,  2192,   412,  2194,   412,
  2197,   412,  2201,   412,   412,   412,   412,   412,   412,   412,
   412,   412, 12589,-32768, 12589,-32768, 12589,-32768, 12589,-32768,
 12589,-32768, 12589,-32768,  9270,  9291,  9312,  9333,  9354,  9375,
 12382, 12405, 12428,   412,   412,   412,   412,   412,   412,-32768,
-32768,-32768,  9396,  9417,  9438,  9459,  9480,  9501,  2005,  2006,
  2007,   412,   412,   412,   412,   412,   412,   412,   412,   412,
  9522,  9543,  9564,  9585,  9606,  9627,   642, 12589,   645, 12589,
   646, 12589,   412,   412,   412,   412,   412,   412,   412,  2205,
   412,  2206,   412,  2207,  9648,  9669,  9690, 12451, 12474, 12497,
 12589,-32768, 12589,-32768, 12589,-32768,   412,   412,   412,-32768,
-32768,-32768,  9711,  9732,  9753,  2011,  2012,  2019,   412,   412,
   412,   412,   412,   412,  9774,  9795,  9816,   649, 12589,   652,
 12589,   653, 12589,   412,   412,   412,   412,  2217,   412,  2218,
   412,  2219,  9837,  9858,  9879, 12589,-32768, 12589,-32768, 12589,
-32768,   412,   412,   412,  9900,  9921,  9942,   412,   412,   412,
  9963,  9984, 10005,   412,   412,   412, 12520, 12543, 12566,-32768,
-32768,-32768,  2025,  2026,  2027,   412,   412,   412,   657, 12589,
   660, 12589,   664, 12589,   412,  2220,   412,  2221,   412,  2229,
 12589,-32768, 12589,-32768, 12589,-32768,  2239,  2240,-32768
};

static const short yypgoto[] = {-32768,
   -32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1613,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -299,   -19,-32768,  2234,    -4,  -366,  -169,    -2,-32768,-32768,
-32768,-32768,-32768,  2235,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768, -1268, -1226,-32768,-32768, -1097,   -23,-32768,
   -29,-32768,   -94,-32768, -1182,  1154,  1452,  -244,  -332,  -730,
  1207,-32768,   -21
};


#define	YYLAST		12785


static const short yytable[] = {   142,
   245,   554,    75,   141,    76,   494,   528,   893,   182,   185,
   196,   250,  1233,   374,   175,   177,   378,   737,   100,   206,
   199,  1242,   100,   194,   150,   376,   206,    85,  1249,  1308,
   189,   150,   305,   190,  1385,   884,  1388,   395,   165,   397,
  1047,   166,   167,     8,   168,   384,   208,   210,   125,   126,
   127,   365,   366,   152,   212,   125,   126,   127,   490,  1379,
  1379,   206,  1379,  1105,  1380,  1380,     9,  1380,  1379,   365,
   366,   481,   206,  1380,   365,   366,  1379,   365,   366,   365,
   366,  1380,   252,  1048,   253,  1078,  1114,  1079,   206,    88,
   125,   126,   127,  1080,   490,  1081,   367,    89,   365,   366,
  1046,   125,   126,   127,   365,   366,   566,   567,   298,   299,
   300,   365,   366,   301,   304,   368,   308,   125,   126,   127,
  1082,  1379,  1083,   328,   329,   330,  1380,   332,   624,   334,
   335,   254,   346,   255,   306,   307,  1400,   885,   886,   385,
   360,  1289,   362,   365,   366,   135,   136,    90,   369,   363,
   364,   493,    94,   836,  1458,   256,   151,   257,  1458,   545,
  1041,  1458,   784,   151,    91,   365,   366,  1379,   382,   383,
   514,   386,  1380,   388,   515,  1379,   391,   392,   195,   399,
  1380,   555,   742,   128,   129,   130,   131,   128,   129,   130,
   131,   785,   731,   728,   755,   729,   147,  1457,  1461,   617,
  1464,  1035,   783,   618,   135,   136,  1666,   183,   186,   197,
   251,    86,   730,   200,  1670,   154,   738,   207,   377,   579,
   437,   786,  1401,   435,   209,   720,  1405,   721,   439,   440,
   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
   451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
   461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
   471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
   490,    10,   482,   483,   484,    92,   135,   136,    93,   489,
   365,   366,   490,    95,   836,   495,    96,   499,   500,   501,
   502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
   512,   513,   145,  1616,  1093,  1672,  1620,   519,  1623,   521,
  1094,   146,  1170,  1759,   299,   489,   128,   129,   130,   131,
   147,   365,   366,   532,   533,   534,   535,   148,   537,   538,
   539,   540,   541,   542,   543,   548,   549,   135,   136,  1379,
   149,   171,   172,   258,  1380,   259,   556,   557,   558,   559,
   722,  1379,   173,   568,   723,   897,  1380,   152,   174,   728,
   153,   575,   550,   550,   553,   553,   128,   129,   130,   131,
   583,   260,   154,   261,  1532,  1533,  1534,  1535,   365,   366,
   262,  1539,   263,   365,   366,   365,   366,   135,   136,  1458,
   877,  1032,  1220,  1458,   928,   728,  1458,   155,  1713,  1300,
   156,  1302,  1717,   264,  1719,   265,    11,    12,    13,    14,
    15,    16,    17,    18,    97,   297,   623,   135,   136,   906,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   365,   366,   365,   366,   135,   136,
   936,   937,   938,   939,   247,  1309,   248,   365,   366,  1310,
  1304,   726,  1454,   157,   299,   365,   366,   158,   135,   136,
   734,   733,   732,  1460,   485,   952,   248,  1761,   490,   161,
   162,  1463,   163,   882,  1629,  1630,  1458,   159,  1633,  1762,
  1458,   489,  1458,   160,   320,   321,   322,   323,   324,   164,
   726,   753,   170,   489,   325,   757,   758,   490,   135,   136,
   169,   266,   764,   267,   524,   773,   248,   322,   323,   324,
   135,   136,   774,   775,   178,   325,   754,   268,   248,   269,
   184,   778,    43,    44,    45,    46,   191,    48,   490,   490,
   490,   490,   187,   787,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   188,   797,  1367,   799,   800,   325,   202,
   311,   312,   313,   314,   315,   192,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   270,  1056,   271,   179,  1723,
   325,   180,   181,  1034,  1036,   272,   193,   273,  1221,   979,
   980,   981,   982,   983,   274,   201,   275,   132,   133,   276,
   838,   277,   837,   134,   278,   280,   279,   281,   137,   282,
   284,   283,   285,    97,   336,   286,   288,   287,   289,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   311,   312,   313,   314,   315,   337,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   290,   292,
   291,   293,   203,   325,   490,   953,  1072,  1073,  1798,    43,
    44,    45,    46,    47,    48,   204,   867,   868,   728,   728,
   756,   910,  1043,   728,  1044,  1055,   728,   728,  1084,  1085,
   869,   870,   871,   872,   873,   874,   875,   205,   211,   489,
   310,   728,   878,  1086,   881,   243,   728,   887,  1087,   728,
  1196,  1175,   246,   898,   314,   315,   896,   316,   317,   318,
   319,   320,   321,   322,   323,   324,  1063,  1064,   489,  1852,
   726,   325,  1310,  1668,  1311,  1669,  1681,   309,  1682,  1683,
   992,  1684,   294,  1685,  1708,  1686,  1709,   326,   327,   932,
   933,   934,  1789,  1880,  1790,  1881,  1882,   295,  1883,   489,
   489,   489,   489,   918,   296,   942,   943,   347,  1884,   946,
  1885,  2011,  2013,  2012,  2014,  2015,   959,  2016,   498,   331,
   957,   958,   313,   314,   315,   968,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   333,   132,   338,   352,  2122,
   325,  2123,   134,  2124,  2126,  2125,  2127,   137,  2128,  2130,
  2129,  2131,   919,   339,   348,   349,   996,   997,   998,   999,
  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,
  1020,  1021,  2132,  2209,  2133,  2210,  2211,  2213,  2212,  2214,
  2257,   890,  2258,  2259,  2261,  2260,  2262,   353,  2305,   837,
  2306,  2307,   350,  2308,  1037,  2309,   354,  2310,  1042,   355,
   311,   312,   313,   314,   315,   356,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   489,   357,  1057,   358,  1058,
   325,   359,   381,   370,   390,   371,   372,   373,   387,   389,
   393,   394,   396,   398,  1074,  1075,  1076,   400,   401,   402,
   403,   404,  2032,   405,   406,   407,   408,   409,   410,   411,
   412,   413,  1101,   414,   415,   416,  1097,  1098,  1099,   417,
  1371,   418,   419,   311,   312,   313,   314,   315,   430,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   311,   312,
   313,   314,   315,   325,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   420,   421,   422,   423,   912,   325,   433,
   424,    97,   297,  1133,   425,   426,   427,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   428,   429,   432,   434,   940,   436,   325,   487,   496,
   497,   530,  1164,  1163,   536,   525,   544,   570,  1171,   571,
   574,   311,   312,   313,   314,   315,   577,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   580,  1255,  1180,  1181,
  1182,   325,   586,   587,   588,   589,   590,   591,  1197,  1190,
  1200,  1191,  1203,   592,   593,   594,   595,   596,   597,   598,
   599,   600,   601,   602,  1210,  1211,   603,   604,  1224,   605,
   606,   607,   550,   608,   553,   609,  1223,   610,   611,  1226,
   612,   613,   724,  1040,   614,   615,   616,   725,   619,  1236,
   620,   621,   736,   735,   772,   741,  1243,  1244,  1245,   743,
   744,   745,   747,  1250,   749,   750,   759,  1254,   776,   777,
   789,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,
  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,
  1275,  1276,  1277,  1278,  1279,  1280,  1281,   311,   312,   313,
   314,   315,   790,   316,   317,   318,   319,   320,   321,   322,
   323,   324,  1291,   791,   132,   133,   792,   325,   795,   793,
   134,   796,   802,   833,   834,   137,   803,   804,   302,   805,
  1298,   303,   806,   807,   808,   311,   312,   313,   314,   315,
   809,   316,   317,   318,   319,   320,   321,   322,   323,   324,
  1285,  1317,    97,   297,  1314,   325,  1315,   810,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    97,   297,   811,   812,   813,   814,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   866,   311,   312,   313,   314,   315,   876,   316,
   317,   318,   319,   320,   321,   322,   323,   324,  1370,   815,
  1378,  1293,  1384,   325,  1387,   840,  1377,   841,  1383,   880,
  1386,   888,  1389,  1390,   889,   927,   891,   816,   895,  1394,
   883,   901,   550,   817,   553,   892,   903,   914,  1403,   915,
   916,   842,   818,   819,   820,   821,  1411,   822,   823,   824,
   825,  1416,   826,   827,  1419,   828,  1421,  1422,  1423,  1424,
  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,
  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,
  1445,  1446,   829,   830,   831,   362,   832,   835,  1451,   843,
   298,   299,  1452,   844,   845,   917,   846,   847,   848,   849,
   311,   312,   313,   314,   315,  1471,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   132,   133,   850,   851,   852,
   325,   134,   853,   854,   855,   856,   137,   857,   858,   751,
   859,   860,   752,   861,   862,   863,   864,   865,   913,   920,
   921,   922,   923,   924,   925,   132,   133,   926,   935,   941,
   949,   134,   947,   955,   954,   956,   137,   960,   961,   908,
   962,   963,   909,   964,   967,   969,   970,   973,   974,   975,
  1515,   976,   977,   986,  1031,   989,  1520,  1294,  1531,  1524,
   987,   311,   312,   313,   314,   315,   988,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   990,  1033,   991,   993,
   994,   325,  1038,  1547,  1548,  1549,  1550,  1551,  1552,  1553,
  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
  1564,  1565,  1566,  1567,  1039,  1569,  1045,  1049,  1051,  1053,
  1054,  1062,  1090,  1091,  1077,  1096,  1134,  1102,  1581,  1100,
  1106,    97,   526,  1107,  1108,  1109,  1110,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    97,   297,  1111,  1112,  1113,  1115,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,  1116,  1117,  1118,  1636,  1638,  1640,  1641,  1642,  1643,
  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1119,  1120,
  1663,  1121,  1165,  1122,  1166,  1676,  1212,  1124,  1295,  1168,
  1123,  1172,  1130,  1125,  1173,  1177,   344,   311,   312,   313,
   314,   315,   351,   316,   317,   318,   319,   320,   321,   322,
   323,   324,  1178,  1179,  1183,  1184,  1185,   325,  1186,  1126,
  1187,  1188,  1189,  1198,  1161,   375,  1127,  1201,  1128,  1129,
   379,   380,  1131,  1722,  1132,  1174,  1204,  1206,  1207,  1208,
  1209,  1721,  1216,  1225,  1228,  1229,  1231,  1727,  1235,  1729,
  1230,  1731,  1232,  1733,  1734,  1735,  1736,  1737,  1738,  1739,
  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,
  1750,  1751,  1752,  1753,   132,   133,  1754,  1234,  1757,  1765,
   134,  1237,  1238,  1239,  1240,   137,   311,   312,   313,   314,
   315,   527,   316,   317,   318,   319,   320,   321,   322,   323,
   324,  1241,  1247,  1248,  1374,  1375,   325,  1251,  1469,  1252,
   134,  1253,  1194,  1282,  1195,  1376,  1283,  1284,  1288,  1286,
  1287,   174,  1290,  1296,  1297,  1313,  1320,  1299,  1301,  1795,
  1796,  1303,  1305,  1312,  1318,  1321,  1322,  1803,  1804,  1805,
  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
  1816,  1817,  1818,  1819,  1820,  1323,  1324,  1821,   311,   312,
   313,   314,   315,  1326,   316,   317,   318,   319,   320,   321,
   322,   323,   324,  1327,  1332,  1328,  1333,  1368,   325,  1334,
  1399,  1391,  1337,  1398,  1402,  1366,   529,  1420,  1336,  1849,
  1404,  1406,  1339,  1407,  1854,  1856,  1858,  1859,  1860,  1861,
  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,
  1872,  1873,  1874,  1875,  1876,  1408,    97,   336,  1409,  1417,
  1410,  1412,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,  1907,  1414,  1909,  1415,
  1911,   337,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,
  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,
  1418,  1447,    43,    44,    45,    46,    47,    48,   311,   312,
   313,   314,   315,  1448,   316,   317,   318,   319,   320,   321,
   322,   323,   324,  1450,  1455,  1456,  1467,  1468,   325,   581,
  1513,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
  1963,  1964,  1965,  1966,  1967,  1968,  1517,  1470,  1472,  1476,
  1473,  1474,  1477,  1481,  1479,  1483,  1518,  1521,   727,  1510,
  1522,  1525,  1526,  1527,  1530,  1536,  1990,  1992,  1994,  1995,
  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
  2006,  2007,  2008,  2009,   311,   312,   313,   314,   315,  1537,
   316,   317,   318,   319,   320,   321,   322,   323,   324,  1538,
  1540,  1541,  1542,  1543,   325,  1570,  1572,  2033,  1574,  2035,
  1575,  2037,  1577,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  1579,   132,
   488,  1580,  1582,  1583,  1584,   134,  1585,  1586,  1615,  1587,
   137,  1617,  1621,  1588,  1589,  1624,  1627,  1628,  1631,  1632,
  1590,  1612,  1614,  1634,  1665,  1667,  1671,  2077,  2078,  2079,
  2080,  2081,  2082,  2083,  2084,  2085,  1673,  1677,  1674,  1675,
  1678,  1711,  1679,  1680,  1712,  1710,  1715,  1716,  1718,  1720,
  1725,  1726,  2102,  2104,  2106,  2108,  2110,  2112,  2113,  2114,
  2115,  2116,  2117,  2118,  2119,  2120,  2121,   311,   312,   313,
   314,   315,  1728,   316,   317,   318,   319,   320,   321,   322,
   323,   324,  1730,  1732,  1755,  1758,  1760,   325,  2143,  1763,
  2145,  1766,  2147,  1791,  2149,  1767,  2151,  1792,  2153,  1793,
  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,   311,
   312,   313,   314,   315,  1794,   316,   317,   318,   319,   320,
   321,   322,   323,   324,  1797,  1822,  1825,  1850,  1879,   325,
  2173,  2174,  2175,  2176,  2177,  2178,  1826,   760,  1827,  1904,
  1828,  1829,  1830,  1878,  1906,  1908,  1910,  1912,  2191,  2192,
  2193,  2194,  2195,  2196,  2198,  2200,  2202,  2034,  1931,  1969,
  2036,  1970,  1971,  1972,  2010,  2038,  2070,  2054,  2144,  2215,
  2216,  2217,  2218,  2219,  2220,  2221,  2086,  2223,  2087,  2225,
  2088,  2089,  2090,  2091,  2146,   899,   900,  2148,   902,  2150,
   904,   905,  2152,  2233,  2234,  2235,  2154,  2188,  2189,  2190,
  2222,  2224,  2226,  2242,  2243,  2245,  2246,  2247,  2249,  2251,
  2253,  2244,  2267,  2269,  2271,  2312,  2314,  2296,  2297,  2298,
  2263,  2264,  2265,  2266,  2316,  2268,   839,  2270,  2318,  2319,
    74,    82,   944,   945,   740,  1167,   948,  1215,  2275,  2276,
  2277,     0,     0,     0,  2281,  2282,  2283,     0,     0,   911,
  2287,  2288,  2289,   965,   966,     0,     0,     0,     0,   971,
   972,     0,  2300,  2302,  2304,     0,   978,     0,   985,     0,
     0,  2311,     0,  2313,     0,  2315,    97,    98,    99,     0,
   100,     0,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,     0,   125,   126,   127,
    97,   526,     0,     0,     0,     0,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   951,     0,  1050,     0,  1052,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1059,  1060,  1061,     0,     0,
     0,  1065,  1066,  1067,  1068,  1069,  1070,  1071,    97,   297,
   206,     0,     0,     0,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
   126,   127,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   311,   312,   313,
   314,   315,   325,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,     0,
     0,     0,     0,     0,     0,   128,   129,   130,   131,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
   133,     0,     0,     0,     0,   134,   135,   136,     0,     0,
   137,     0,   138,     0,   139,  1162,     0,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,   132,   133,     0,     0,   325,     0,   134,
     0,     0,     0,  1218,   137,  1219,     0,     0,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   -10,     1,     0,   -10,   -53,     0,     0,  1217,     0,     0,
     0,     0,     0,     0,     0,  1227,     0,     0,     0,     0,
     0,   132,   133,     0,     0,     0,     0,   134,     0,     0,
     0,     0,   137,   -53,  1246,     0,     0,   -53,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,     0,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,
   -53,   560,    27,    28,   561,   562,    31,   563,    33,     0,
    34,     0,    36,    37,    38,     0,    40,    41,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -53,   -53,
   -53,   -53,     0,    53,     0,     0,   -53,     0,   -53,     0,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,     0,     0,     0,   -10,   -10,
   -10,   -10,   -10,   -10,   -10,   -10,     0,     0,     0,     0,
    67,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     2,     3,     0,     4,   560,    27,    28,
   561,   562,    31,   563,    33,     0,    34,     0,    36,    37,
    38,     0,    40,    41,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
   560,    27,    28,   561,   562,    31,   563,    33,     0,    34,
     0,    36,    37,    38,     0,    40,    41,     0,     0,     0,
     0,  1392,     0,  1393,     0,     0,     0,  1397,    55,    56,
    57,     0,    53,     0,     0,     0,     0,   564,     0,     0,
     0,     0,     0,  1413,     0,     0,    67,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,     0,   560,    27,    28,   561,   562,
    31,   563,    33,     0,    34,     0,    36,    37,    38,    67,
    40,    41,     0,     0,     0,     0,     0,     0,     0,   560,
    27,    28,   561,   562,    31,   563,    33,    53,    34,     0,
    36,    37,    38,     0,    40,    41,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    53,     0,     0,     0,     0,    55,    56,    57,     0,
     0,     0,     0,   569,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    67,     0,     0,     0,     0,     0,
    55,    56,    57,     0,     0,     0,     0,     0,     0,     0,
  1511,     0,     0,     0,     0,     0,   584,  1516,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1528,  1529,
   625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
   635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
   645,   646,   647,   648,   649,   650,     0,     0,   213,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1571,     0,     0,     0,   311,   312,   313,   314,
   315,   585,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
     0,     0,  1372,     0,  1373,   798,   625,   626,   627,   628,
   629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
   639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,     0,     0,     0,  1619,     0,   214,   215,   216,
  1626,     0,     0,     0,     0,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,    23,     0,     0,     0,     0,
     0,     0,   651,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     0,     0,     0,     0,    24,     0,     0,     0,    25,    26,
    27,    28,    29,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,    40,    41,     0,     0,     0,    42,
    43,    44,    45,    46,    47,    48,     0,    49,    50,    51,
    52,    53,     0,     0,     0,     0,     0,     0,     0,  1714,
     0,     0,     0,     0,     0,     0,     0,     0,   995,  1724,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,     0,     0,     0,     0,    58,     0,    59,
     0,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,   560,    27,    28,   561,   562,    31,   563,    33,     0,
    34,     0,    36,    37,    38,     0,    40,    41,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,    53,     0,     0,     0,     0,   325,     0,
     0,   311,   312,   313,   314,   315,   765,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,  1799,     0,
     0,   325,    55,    56,    57,     0,     0,     0,     0,   766,
     0,     0,     0,     0,     0,   311,   312,   313,   314,   315,
    67,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,     0,   311,   312,
   313,   314,   315,   907,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,  1851,   325,     0,
     0,   311,   312,   313,   314,   315,   931,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,   311,   312,   313,   314,   315,  1192,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,     0,     0,     0,  1905,
     0,     0,  1395,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,     0,   311,   312,   313,   314,
   315,  1396,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
     0,     0,  1950,     0,  1453,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,     0,     0,     0,
     0,     0,     0,  1459,     0,   311,   312,   313,   314,   315,
  1988,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,     0,   311,   312,
   313,   314,   315,  1462,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
     0,   311,   312,   313,   314,   315,  1465,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,   311,   312,   313,   314,   315,  1466,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,     0,   311,   312,   313,
   314,   315,  1512,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,     0,
   311,   312,   313,   314,   315,  1573,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,     0,   311,   312,   313,   314,   315,  1576,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,     0,   311,   312,   313,   314,
   315,  1578,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,   311,
   312,   313,   314,   315,  1824,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,     0,   311,   312,   313,   314,   315,  1877,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   486,     0,     0,     0,   546,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,   546,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,   547,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,   578,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,   700,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,   701,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
   714,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,   715,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,   716,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,   717,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,   718,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,   719,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,   779,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,   780,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,   781,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,   929,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
   930,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,   950,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1088,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1089,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1103,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1104,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1135,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1136,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1137,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1138,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1139,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1140,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1141,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1142,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1143,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1144,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1145,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1146,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1147,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1148,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1149,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1150,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1151,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1152,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1153,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1154,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1155,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1156,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1157,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1158,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1159,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1160,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1176,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1292,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1306,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1307,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1316,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1319,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1330,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1335,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1338,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1340,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1341,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1342,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1343,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1344,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1345,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1346,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1347,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1348,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1349,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1350,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1351,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1352,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1353,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1354,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1355,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1356,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1357,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1358,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1359,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1360,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1361,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1362,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1363,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1364,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1365,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1369,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1475,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1487,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1488,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1489,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1490,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1491,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1492,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1493,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1494,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1495,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1496,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1497,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1498,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1499,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1500,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1501,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1502,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1503,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1504,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1505,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1506,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1507,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1509,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1591,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1592,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1593,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1594,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1595,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1596,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1597,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1598,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1599,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1600,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1601,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1602,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1603,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1604,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1605,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1606,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1607,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1608,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1609,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1610,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1611,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1687,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1688,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1689,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1690,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1691,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1692,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1693,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1694,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1695,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1696,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1697,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1698,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1699,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1700,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1701,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1702,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1703,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1704,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1705,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1706,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1707,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1764,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1771,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1772,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1773,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1774,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1775,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1776,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1777,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1778,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1779,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1780,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1781,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1782,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1783,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1784,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1785,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1786,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1787,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1788,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1823,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1831,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1832,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1833,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1834,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1835,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1836,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1837,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1838,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1839,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1840,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1841,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1842,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1843,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1844,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1845,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1846,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1847,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1848,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1886,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1887,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1888,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1889,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1890,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1891,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1892,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1893,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1894,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1895,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1896,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1897,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1898,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1899,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1900,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1901,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1902,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1903,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1935,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1936,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1937,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1938,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1939,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1940,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1941,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1942,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1943,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1944,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1945,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1946,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1947,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1948,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1949,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1973,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1974,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1975,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1976,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1977,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1978,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1979,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1980,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1981,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1982,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1983,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1984,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1985,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1986,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1987,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2017,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2018,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2019,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2020,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2021,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2022,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2023,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2024,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2025,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2026,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2027,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2028,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2029,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2030,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2031,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2061,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2062,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2063,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2064,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2065,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2066,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2067,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2068,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2069,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2092,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2093,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2094,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2095,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2096,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2097,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2098,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2099,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2100,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2134,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2135,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2136,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2137,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2138,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2139,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2140,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2141,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2142,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2164,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2165,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2166,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2167,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2168,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2169,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2182,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2183,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2184,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2185,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2186,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2187,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2203,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2204,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2205,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2206,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2207,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2208,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2227,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2228,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2229,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2239,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2240,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2241,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2254,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2255,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2256,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2272,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2273,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2274,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2278,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2279,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2280,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2284,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2285,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2286,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   492,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   622,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   679,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   681,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   683,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   685,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   687,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   689,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   691,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   693,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   695,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   697,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   699,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   703,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   705,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   707,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   709,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   711,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   713,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   782,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   788,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   879,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,  1023,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
  1025,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,  1027,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
  1029,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,  1030,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
  1169,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   486,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   516,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   517,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   518,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   520,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   522,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   523,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   531,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   572,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   573,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   576,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   582,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   678,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   680,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   682,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   684,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   686,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   688,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   690,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   692,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   694,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   696,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   698,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   702,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   704,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   706,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   708,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   710,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   712,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   746,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   748,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   761,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   762,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   763,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   767,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   768,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   769,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   770,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   771,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   794,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   801,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  1022,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  1024,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  1026,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1028,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  1092,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  1193,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  1222,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  1325,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  1329,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  1331,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  1449,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  1478,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  1480,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1482,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  1484,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  1485,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  1486,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  1508,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  1613,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  1768,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  1769,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  1770,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  1932,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1933,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  1934,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  2055,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  2056,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  2057,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  2058,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  2059,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  2060,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  2170,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  2171,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  2172,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  2230,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  2231,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  2232,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  2290,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  2291,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  2292,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325
};

static const short yycheck[] = {    23,
    95,   368,     7,    23,     7,   305,   339,   738,     4,     4,
     4,     4,  1110,   183,    44,    45,   186,     4,     7,     5,
     4,  1119,     7,    42,    65,     6,     5,     3,  1126,  1212,
    38,    65,     4,    41,  1303,     4,  1305,   207,    38,   209,
     6,    41,    42,     6,    44,   103,    68,    69,    34,    35,
    36,   186,   187,    65,    87,    34,    35,    36,   303,    66,
    66,     5,    66,   198,    71,    71,   167,    71,    66,   186,
   187,     4,     5,    71,   186,   187,    66,   186,   187,   186,
   187,    71,   197,    49,   199,   202,   198,   204,     5,     7,
    34,    35,    36,   202,   339,   204,   203,     6,   186,   187,
     6,    34,    35,    36,   186,   187,     6,     7,   132,   133,
   134,   186,   187,   137,   138,   203,   140,    34,    35,    36,
   202,    66,   204,   147,   148,   149,    71,   151,   203,   153,
   154,   197,   156,   199,   106,   107,  1319,   106,   107,   197,
   170,     6,   172,   186,   187,   193,   194,     6,   178,   173,
   174,     7,   197,   201,  1381,   197,   197,   199,  1385,   202,
   891,  1388,   203,   197,     6,   186,   187,    66,   192,   193,
   198,   195,    71,   197,   202,    66,   200,   201,   197,   212,
    71,   202,   515,   172,   173,   174,   175,   172,   173,   174,
   175,   203,   492,   202,   527,   204,   197,   204,   204,   198,
   204,     7,   203,   202,   193,   194,   204,   203,   203,   203,
   203,   187,   201,   197,   204,   197,   203,   203,   199,   389,
   250,   203,  1320,   247,   203,   199,  1324,   201,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   515,     3,   294,   295,   296,     6,   193,   194,     6,   303,
   186,   187,   527,   197,   201,   305,   197,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   197,  1572,   197,   204,  1575,   331,  1577,   333,
   203,     6,  1043,   204,   338,   339,   172,   173,   174,   175,
   197,   186,   187,   347,   348,   349,   350,   197,   352,   353,
   354,   355,   356,   357,   358,   365,   366,   193,   194,    66,
   197,   186,   187,   197,    71,   199,   370,   371,   372,   373,
   198,    66,   197,   377,   202,   198,    71,    65,   203,   202,
   197,   385,   367,   368,   367,   368,   172,   173,   174,   175,
   394,   197,   197,   199,  1472,  1473,  1474,  1475,   186,   187,
   197,  1479,   199,   186,   187,   186,   187,   193,   194,  1616,
   723,   198,     8,  1620,   202,   202,  1623,    46,  1667,   202,
   197,   202,  1671,   197,  1673,   199,   138,   139,   140,   141,
   142,   143,   144,   145,     3,     4,   436,   193,   194,   752,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   186,   187,   186,   187,   193,   194,
   783,   784,   785,   786,   199,   198,   201,   186,   187,   202,
   202,   485,   202,    42,   488,   186,   187,    42,   193,   194,
   494,   493,   492,   202,   199,     8,   201,   204,   723,    41,
    42,   202,    44,   728,  1582,  1583,  1713,    42,  1586,   204,
  1717,   515,  1719,    42,   186,   187,   188,   189,   190,    44,
   524,   525,   203,   527,   196,   529,   530,   752,   193,   194,
   197,   197,   536,   199,   199,   545,   201,   188,   189,   190,
   193,   194,   546,   547,   203,   196,   199,   197,   201,   199,
    42,   555,    59,    60,    61,    62,     4,    64,   783,   784,
   785,   786,     6,   567,   182,   183,   184,   185,   186,   187,
   188,   189,   190,     6,   578,  1286,   580,   581,   196,     6,
   176,   177,   178,   179,   180,   197,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   197,   909,   199,    38,  1677,
   196,    41,    42,   883,   884,   197,   197,   199,   204,   123,
   124,   125,   126,   127,   197,   197,   199,   186,   187,   197,
   622,   199,   622,   192,   197,   197,   199,   199,   197,   197,
   197,   199,   199,     3,     4,   197,   197,   199,   199,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   176,   177,   178,   179,   180,    38,   182,
   183,   184,   185,   186,   187,   188,   189,   190,   197,   197,
   199,   199,     4,   196,   909,   198,     6,     7,  1766,    59,
    60,    61,    62,    63,    64,     4,   700,   701,   202,   202,
   204,   204,   202,   202,   204,   204,   202,   202,   204,   204,
   714,   715,   716,   717,   718,   719,   720,    42,     3,   723,
     6,   202,   724,   204,   728,   197,   202,   731,   204,   202,
  1077,   204,     5,   743,   179,   180,   740,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    56,    57,   752,  1827,
   754,   196,   202,   202,   204,   204,   202,     6,   204,   202,
   835,   204,   197,   202,   202,   204,   204,     6,     5,   779,
   780,   781,   202,   202,   204,   204,   202,   197,   204,   783,
   784,   785,   786,     6,   197,   789,   790,   203,   202,   793,
   204,   202,   202,   204,   204,   202,   806,   204,     6,   197,
   804,   805,   178,   179,   180,   815,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   197,   186,   187,   203,   202,
   196,   204,   192,   202,   202,   204,   204,   197,   202,   202,
   204,   204,    55,   203,   197,   197,   840,   841,   842,   843,
   844,   845,   846,   847,   848,   849,   850,   851,   852,   853,
   854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   202,   202,   204,   204,   202,   202,   204,   204,
   202,     6,   204,   202,   202,   204,   204,   203,   202,   879,
   204,   202,   197,   204,   884,   202,   197,   204,   892,   197,
   176,   177,   178,   179,   180,   197,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   909,   197,   911,   197,   913,
   196,     4,     6,   203,   109,   203,   203,   199,   201,   203,
     6,   197,     6,     6,   928,   929,   930,   197,   197,   197,
   197,   197,  2010,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   955,   197,   197,   197,   950,   951,   952,   197,
  1297,   197,   197,   176,   177,   178,   179,   180,     5,   182,
   183,   184,   185,   186,   187,   188,   189,   190,   176,   177,
   178,   179,   180,   196,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   197,   197,   197,   197,     6,   196,   198,
   197,     3,     4,   993,   197,   197,   197,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   197,   197,   202,   202,     6,     4,   196,     7,   201,
     7,     7,  1036,  1035,     7,   203,   198,     7,  1048,     7,
   104,   176,   177,   178,   179,   180,   106,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   203,  1132,  1062,  1063,
  1064,   196,   168,     5,     5,     5,     5,     5,  1078,  1073,
  1080,  1073,  1082,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,  1088,  1089,     5,     5,  1101,     5,
     5,     5,  1077,     5,  1077,     5,  1100,   156,     5,  1103,
     5,     5,   202,     6,     5,     3,     5,   198,     5,  1113,
     6,     5,     4,     6,   201,     6,  1120,  1121,  1122,     7,
     7,     7,     7,  1127,     7,     7,     7,  1131,   204,   204,
   203,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
  1154,  1155,  1156,  1157,  1158,  1159,  1160,   176,   177,   178,
   179,   180,   203,   182,   183,   184,   185,   186,   187,   188,
   189,   190,  1176,     7,   186,   187,     7,   196,     7,   197,
   192,   201,   169,     5,   198,   197,   202,   202,   200,   202,
  1194,   203,   202,   202,   202,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     6,  1224,     3,     4,  1218,   196,  1220,   202,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,   202,   202,   202,   202,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     6,   176,   177,   178,   179,   180,     4,   182,
   183,   184,   185,   186,   187,   188,   189,   190,  1292,   202,
  1300,     6,  1302,   196,  1304,   197,  1300,   197,  1302,     6,
  1304,     6,  1306,  1307,     6,     4,     7,   202,     6,  1313,
   200,     7,  1297,   202,  1297,   199,     7,     7,  1322,     7,
     7,   197,   202,   202,   202,   202,  1330,   202,   202,   202,
   202,  1335,   202,   202,  1338,   202,  1340,  1341,  1342,  1343,
  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
  1364,  1365,   202,   202,   202,  1375,   202,   202,  1372,   197,
  1374,  1375,  1376,   197,   197,     7,   197,   197,   197,   197,
   176,   177,   178,   179,   180,  1398,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   186,   187,   197,   197,   197,
   196,   192,   197,   197,   197,   197,   197,   197,   197,   200,
   197,   197,   203,   197,   197,   197,   197,   197,   203,     7,
     7,     7,     7,     7,     7,   186,   187,     7,     6,     6,
     4,   192,     7,   165,     7,     3,   197,     3,     3,   200,
   188,     3,   203,     3,     3,     3,     3,     3,     3,     3,
  1454,     3,     3,     3,   198,     3,  1460,     6,  1471,  1463,
     5,   176,   177,   178,   179,   180,     5,   182,   183,   184,
   185,   186,   187,   188,   189,   190,     3,   198,     6,     4,
     6,   196,   201,  1487,  1488,  1489,  1490,  1491,  1492,  1493,
  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
  1504,  1505,  1506,  1507,     7,  1509,     6,     6,     6,     6,
     6,   197,     6,     6,   203,   105,     6,   202,  1531,   203,
   202,     3,     4,   198,   202,   198,   202,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     3,     4,   198,   202,   202,   202,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   198,   198,   202,  1588,  1589,  1590,  1591,  1592,  1593,
  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,   202,   202,
  1612,   202,     6,   202,     4,  1628,     7,   198,     6,     6,
   202,     6,   198,   202,     6,     6,   155,   176,   177,   178,
   179,   180,   161,   182,   183,   184,   185,   186,   187,   188,
   189,   190,     6,     6,     6,     6,     6,   196,     6,   202,
     6,     6,     6,     6,   201,   184,   202,     6,   202,   202,
   189,   190,   202,  1676,   202,   200,     6,     6,     6,     6,
     6,  1675,   105,     3,     6,     3,   188,  1681,     3,  1683,
     6,  1685,     6,  1687,  1688,  1689,  1690,  1691,  1692,  1693,
  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,
  1704,  1705,  1706,  1707,   186,   187,  1708,     6,  1710,  1722,
   192,     6,     3,     6,     6,   197,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,     3,     6,     3,   186,   187,   196,     3,     6,     3,
   192,     6,   202,     4,   204,   197,     6,     6,   201,     7,
     6,   203,   200,     6,   203,   102,   202,   204,   203,  1763,
  1764,   203,   203,   203,   198,   202,   202,  1771,  1772,  1773,
  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
  1784,  1785,  1786,  1787,  1788,   198,   202,  1789,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   198,   202,   198,   198,   107,   196,   198,
     6,   105,   198,   165,     3,   198,     8,     5,   202,  1823,
     6,     6,   202,     3,  1828,  1829,  1830,  1831,  1832,  1833,
  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
  1844,  1845,  1846,  1847,  1848,     6,     3,     4,     6,     3,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,  1880,     6,  1882,     6,
  1884,    38,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
     6,     6,    59,    60,    61,    62,    63,    64,   176,   177,
   178,   179,   180,     5,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   204,     6,   203,   203,   202,   196,     8,
     6,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
  1944,  1945,  1946,  1947,  1948,  1949,     6,   204,   202,   198,
   202,   202,   198,   198,   202,   202,     6,     6,   487,   202,
     6,     6,     6,     6,     6,     6,  1970,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,   176,   177,   178,   179,   180,     6,
   182,   183,   184,   185,   186,   187,   188,   189,   190,     6,
     6,     6,     6,     5,   196,     5,   203,  2011,   202,  2013,
   203,  2015,   203,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,   202,   186,
   187,   204,   202,   202,   198,   192,   198,   202,     6,   202,
   197,     6,     6,   203,   203,     6,   102,   165,     6,     6,
   203,   203,   202,     5,     5,   203,   203,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,   203,   202,   204,   203,
   202,   204,   198,   198,     6,   203,     6,     6,     6,   102,
     6,     6,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
  2094,  2095,  2096,  2097,  2098,  2099,  2100,   176,   177,   178,
   179,   180,     6,   182,   183,   184,   185,   186,   187,   188,
   189,   190,     6,     6,     6,     6,   204,   196,  2122,   203,
  2124,   202,  2126,     6,  2128,   202,  2130,     6,  2132,     6,
  2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,   176,
   177,   178,   179,   180,     6,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   170,     6,   171,     6,   198,   196,
  2164,  2165,  2166,  2167,  2168,  2169,   202,   204,   202,     6,
   203,   203,   203,   202,     6,     6,     6,     6,  2182,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,  2190,     6,   202,   202,
     6,   203,   203,   203,   202,     6,     6,   198,     6,  2203,
  2204,  2205,  2206,  2207,  2208,  2209,   203,  2211,   203,  2213,
   203,   203,   203,   203,     6,   744,   745,     6,   747,     6,
   749,   750,     6,  2227,  2228,  2229,     6,   203,   203,   203,
     6,     6,     6,   203,   203,  2239,  2240,  2241,  2242,  2243,
  2244,   203,     6,     6,     6,     6,     6,   203,   203,   203,
  2254,  2255,  2256,  2257,     6,  2259,   624,  2261,     0,     0,
     7,     7,   791,   792,     8,  1039,   795,  1094,  2272,  2273,
  2274,    -1,    -1,    -1,  2278,  2279,  2280,    -1,    -1,     8,
  2284,  2285,  2286,   812,   813,    -1,    -1,    -1,    -1,   818,
   819,    -1,  2296,  2297,  2298,    -1,   825,    -1,   827,    -1,
    -1,  2305,    -1,  2307,    -1,  2309,     3,     4,     5,    -1,
     7,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     8,    -1,   901,    -1,   903,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   914,   915,   916,    -1,    -1,
    -1,   920,   921,   922,   923,   924,   925,   926,     3,     4,
     5,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   176,   177,   178,
   179,   180,   196,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
   187,    -1,    -1,    -1,    -1,   192,   193,   194,    -1,    -1,
   197,    -1,   199,    -1,   201,  1034,    -1,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,   186,   187,    -1,    -1,   196,    -1,   192,
    -1,    -1,    -1,   202,   197,   204,    -1,    -1,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
     0,     1,    -1,     3,     4,    -1,    -1,  1096,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1104,    -1,    -1,    -1,    -1,
    -1,   186,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
    -1,    -1,   197,    33,  1123,    -1,    -1,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    48,    49,
    50,    51,    52,    53,    54,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
    70,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    47,    -1,    49,    50,    51,    -1,    53,    54,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
   100,   101,    -1,    70,    -1,    -1,   106,    -1,   108,    -1,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,    -1,    -1,    -1,   138,   139,
   140,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   163,   164,    -1,   166,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    47,    -1,    49,    50,
    51,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
    -1,    49,    50,    51,    -1,    53,    54,    -1,    -1,    -1,
    -1,  1310,    -1,  1312,    -1,    -1,    -1,  1316,    99,   100,
   101,    -1,    70,    -1,    -1,    -1,    -1,   204,    -1,    -1,
    -1,    -1,    -1,  1332,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   100,   101,    -1,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    -1,    49,    50,    51,   117,
    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
    39,    40,    41,    42,    43,    44,    45,    70,    47,    -1,
    49,    50,    51,    -1,    53,    54,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1449,    -1,    -1,    -1,    -1,    -1,   204,  1456,   117,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1467,  1468,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    -1,    -1,    41,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1511,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   204,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   204,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    -1,    -1,    -1,  1574,    -1,   120,   121,   122,
  1579,    -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,     4,    -1,    -1,    -1,    -1,
    -1,    -1,   204,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,    -1,   157,   158,   159,   160,   161,   162,
    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    51,    52,    53,    54,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1668,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,  1678,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
    99,   100,   101,    -1,    -1,    -1,    -1,   106,    -1,   108,
    -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    47,    -1,    49,    50,    51,    -1,    53,    54,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    70,    -1,    -1,    -1,    -1,   196,    -1,
    -1,   176,   177,   178,   179,   180,   204,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,  1767,    -1,
    -1,   196,    99,   100,   101,    -1,    -1,    -1,    -1,   204,
    -1,    -1,    -1,    -1,    -1,   176,   177,   178,   179,   180,
   117,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   176,   177,
   178,   179,   180,   204,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,  1826,   196,    -1,
    -1,   176,   177,   178,   179,   180,   204,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,   176,   177,   178,   179,   180,   204,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,  1878,
    -1,    -1,   204,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,    -1,   176,   177,   178,   179,
   180,   204,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
    -1,    -1,  1931,    -1,   204,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   176,   177,   178,   179,   180,
  1969,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   176,   177,
   178,   179,   180,   204,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,   176,   177,   178,   179,   180,   204,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,   176,   177,   178,   179,   180,   204,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,   176,   177,   178,
   179,   180,   204,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
   176,   177,   178,   179,   180,   204,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,   176,   177,   178,   179,   180,   204,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,    -1,   176,   177,   178,   179,
   180,   204,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   176,
   177,   178,   179,   180,   204,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,   176,   177,   178,   179,   180,   204,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,    -1,    -1,    -1,   202,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,   176,   177,   178,   179,   180,   202,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,   176,   177,   178,   179,   180,   202,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,   202,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,   180,
   202,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,   179,
   180,   202,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,   178,
   179,   180,   202,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,   202,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,
   177,   178,   179,   180,   202,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
   176,   177,   178,   179,   180,   202,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,   176,   177,   178,   179,   180,   202,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 172 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 178 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 179 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 184 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1, MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 198 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 205 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 227 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 232 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 243 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 246 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 250 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 256 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 262 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 269 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 275 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 279 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 28:
#line 283 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 29:
#line 290 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 30:
#line 294 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 31:
#line 299 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 303 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 311 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 315 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 319 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 323 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 327 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 339 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 343 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 347 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 351 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 355 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 360 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 363 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 370 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 377 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 380 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 388 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 391 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 415 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 70:
#line 419 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 71:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 72:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 73:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 100:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 491 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 104:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 107:
#line 510 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 108:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 519 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 524 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 529 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 112:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 538 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 544 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 550 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 116:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 559 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 565 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 571 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 120:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 580 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 586 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 592 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 124:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 601 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 608 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 617 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 128:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 626 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 633 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 642 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 132:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 651 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 134:
#line 658 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 135:
#line 667 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 136:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 676 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 138:
#line 684 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 139:
#line 693 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 702 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 142:
#line 710 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 143:
#line 719 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 728 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 146:
#line 736 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 147:
#line 745 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 148:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 754 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 150:
#line 762 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 151:
#line 771 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 152:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 780 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 154:
#line 788 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 155:
#line 797 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 156:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 806 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 158:
#line 814 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 159:
#line 823 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 160:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 832 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 162:
#line 844 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 163:
#line 859 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 868 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 166:
#line 880 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 167:
#line 895 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 168:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 904 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 170:
#line 916 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 171:
#line 931 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 172:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 940 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 174:
#line 950 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 175:
#line 962 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 176:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 971 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 178:
#line 981 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 179:
#line 993 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 180:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1002 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 182:
#line 1012 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 183:
#line 1024 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 184:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1033 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 186:
#line 1042 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 187:
#line 1054 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 188:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1063 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 190:
#line 1072 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 191:
#line 1084 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 192:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1093 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 194:
#line 1102 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 195:
#line 1114 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 196:
#line 1121 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1126 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 198:
#line 1134 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 199:
#line 1141 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 200:
#line 1148 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1153 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1161 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 203:
#line 1168 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 204:
#line 1177 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 205:
#line 1178 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 206:
#line 1179 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 207:
#line 1180 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 208:
#line 1181 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 209:
#line 1185 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 210:
#line 1186 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 211:
#line 1194 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 212:
#line 1221 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 213:
#line 1255 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l, i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1302 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 215:
#line 1317 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 216:
#line 1326 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 217:
#line 1341 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1353 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 219:
#line 1367 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 220:
#line 1390 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 221:
#line 1414 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1426 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 223:
#line 1440 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1452 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 225:
#line 1466 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1486 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 227:
#line 1508 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 228:
#line 1518 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 229:
#line 1536 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d, yyvsp[-1].v[0], yyvsp[-1].v[1], yyvsp[-1].v[2], yyvsp[-1].v[3], yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1543 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_POINT, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 231:
#line 1549 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        v = FindPoint(ip, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 232:
#line 1568 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 233:
#line 1582 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_LINE, 1, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1588 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_SPLN, 3, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 235:
#line 1594 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        c = FindCurve(ip, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 236:
#line 1613 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_CIRC, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1619 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_ELLI, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 238:
#line 1625 "Gmsh.y"
{
      List_T *temp;
      int i, j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l), 1, sizeof(int));
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
      	List_Read(yyvsp[-3].l, i, &d);
        j = (int)d;
        List_Add(temp, &j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 239:
#line 1642 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d, MSH_SEGM_PARAMETRIC, 2, NULL, NULL, -1, -1, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].c, yyvsp[-4].c, yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 240:
#line 1648 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_LINE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1654 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 242:
#line 1660 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BSPLN, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1671 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BEZIER, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 244:
#line 1682 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l), 1, sizeof(int));
	for(i = 0; i < List_Nbr(yyvsp[-5].l); i++) {
	  List_Read(yyvsp[-5].l, i, &d);
	  j = (int)d;
	  List_Add(Temp, &j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d, MSH_SEGM_NURBS, (int)yyvsp[-1].d, Temp, yyvsp[-3].l, -1, -1, 0., 1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 245:
#line 1707 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 246:
#line 1713 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-2].l, NULL);
	s = FindSurface((int)yyvsp[-8].d, THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 247:
#line 1732 "Gmsh.y"
{
      List_Read(yyvsp[-1].l, 0, &d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i, THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 248:
#line 1754 "Gmsh.y"
{
    AddTriangulationToSurface ((int) yyvsp[-10].d, (int) yyvsp[-6].d, (int) yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
    yyval.s.Num = (int)yyvsp[-10].d;
  ;
    break;}
case 249:
#line 1762 "Gmsh.y"
{
      CreateNurbsSurface ((int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 250:
#line 1770 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 251:
#line 1774 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_SURFACE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 252:
#line 1780 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_LOOP, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 253:
#line 1789 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 254:
#line 1795 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 255:
#line 1801 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 256:
#line 1812 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1817 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1822 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 259:
#line 1827 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 260:
#line 1834 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1835 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 262:
#line 1836 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 263:
#line 1841 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 264:
#line 1845 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 265:
#line 1849 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 266:
#line 1863 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 267:
#line 1877 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 268:
#line 1891 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 269:
#line 1910 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 270:
#line 1920 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 271:
#line 1931 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
    ;
    break;}
case 272:
#line 1938 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 273:
#line 1942 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM, 1);
    ;
    break;}
case 274:
#line 1952 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
    ;
    break;}
case 275:
#line 1964 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 276:
#line 1971 "Gmsh.y"
{
      for(i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 277:
#line 1976 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
    ;
    break;}
case 278:
#line 1985 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
    ;
    break;}
case 279:
#line 1997 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	ParseFile(tmpstring, 0, 0);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblemWithBoundingBox(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 280:
#line 2032 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(0, v, tmpstring);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 281:
#line 2045 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	//Maillage_Dimension_0(THEM);
	//mai3d(THEM, (int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 282:
#line 2062 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch (...) {
	yymsg(WARNING, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 283:
#line 2071 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1);
      else
	yymsg(GERROR, "Unknown Combine command");
    ;
    break;}
case 284:
#line 2078 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 285:
#line 2082 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 286:
#line 2104 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 287:
#line 2114 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 288:
#line 2124 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 289:
#line 2145 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 290:
#line 2166 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 291:
#line 2187 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 292:
#line 2193 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 293:
#line 2198 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2203 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 295:
#line 2207 "Gmsh.y"
{
    ;
    break;}
case 296:
#line 2218 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 297:
#line 2228 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 298:
#line 2238 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 299:
#line 2248 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 300:
#line 2253 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2263 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 302:
#line 2268 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 303:
#line 2278 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 304:
#line 2283 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 305:
#line 2295 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 306:
#line 2312 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2329 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2346 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 309:
#line 2351 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2368 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 311:
#line 2373 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 312:
#line 2390 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2395 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 314:
#line 2415 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 315:
#line 2431 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 316:
#line 2447 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 317:
#line 2463 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2468 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 319:
#line 2485 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2491 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 321:
#line 2508 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2514 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 323:
#line 2534 "Gmsh.y"
{
    ;
    break;}
case 324:
#line 2537 "Gmsh.y"
{
    ;
    break;}
case 325:
#line 2543 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 326:
#line 2569 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 327:
#line 2593 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 328:
#line 2602 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 329:
#line 2620 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 330:
#line 2638 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 331:
#line 2656 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 332:
#line 2678 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 333:
#line 2699 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 334:
#line 2720 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)d;
	s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 335:
#line 2734 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read(yyvsp[-1].l, i, &d);
	j = (int)d;
        s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 336:
#line 2754 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 337:
#line 2758 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 338:
#line 2767 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 339:
#line 2768 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 340:
#line 2769 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 341:
#line 2770 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 342:
#line 2771 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 343:
#line 2775 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 344:
#line 2776 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 345:
#line 2777 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 346:
#line 2778 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 347:
#line 2779 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 348:
#line 2780 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 349:
#line 2781 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 350:
#line 2782 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 351:
#line 2784 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 352:
#line 2790 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 353:
#line 2791 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d) ;  ;
    break;}
case 354:
#line 2792 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 355:
#line 2793 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 356:
#line 2794 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 357:
#line 2795 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 358:
#line 2796 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 359:
#line 2797 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 360:
#line 2798 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 361:
#line 2799 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 362:
#line 2800 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 363:
#line 2801 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 364:
#line 2802 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 365:
#line 2803 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 366:
#line 2804 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 367:
#line 2805 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 368:
#line 2806 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2807 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 370:
#line 2808 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 371:
#line 2809 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 372:
#line 2810 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 373:
#line 2811 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 374:
#line 2812 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 375:
#line 2813 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 376:
#line 2814 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 377:
#line 2815 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 378:
#line 2816 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 379:
#line 2817 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 380:
#line 2818 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 381:
#line 2819 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 382:
#line 2820 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 383:
#line 2821 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 384:
#line 2823 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 385:
#line 2824 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 386:
#line 2825 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 387:
#line 2826 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 388:
#line 2827 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 389:
#line 2828 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2829 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 391:
#line 2830 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 392:
#line 2831 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 393:
#line 2832 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 394:
#line 2833 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 395:
#line 2834 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 396:
#line 2835 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 397:
#line 2836 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 398:
#line 2837 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 399:
#line 2838 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 400:
#line 2839 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 401:
#line 2840 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 402:
#line 2841 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 403:
#line 2842 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 404:
#line 2843 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 405:
#line 2852 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 406:
#line 2853 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 407:
#line 2854 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 408:
#line 2855 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 409:
#line 2860 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 410:
#line 2871 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 411:
#line 2888 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 412:
#line 2899 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 413:
#line 2918 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 414:
#line 2934 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 415:
#line 2950 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 416:
#line 2966 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 417:
#line 2984 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 418:
#line 2988 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 419:
#line 2992 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 420:
#line 2996 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 421:
#line 3000 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 422:
#line 3007 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 423:
#line 3011 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 424:
#line 3015 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 425:
#line 3019 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 426:
#line 3026 "Gmsh.y"
{
    ;
    break;}
case 427:
#line 3029 "Gmsh.y"
{
    ;
    break;}
case 428:
#line 3035 "Gmsh.y"
{
    ;
    break;}
case 429:
#line 3038 "Gmsh.y"
{
    ;
    break;}
case 430:
#line 3044 "Gmsh.y"
{
    ;
    break;}
case 431:
#line 3047 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 432:
#line 3051 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 433:
#line 3058 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 434:
#line 3063 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 435:
#line 3071 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 436:
#line 3076 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 437:
#line 3080 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 438:
#line 3084 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 439:
#line 3095 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      for(d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 440:
#line 3101 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 441:
#line 3112 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double)) ;      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d) ;
	double d = 0.0 ;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X) ;
	List_Add(yyval.l, &v->Pos.Y) ;
	List_Add(yyval.l, &v->Pos.Z) ;
      }
    ;
    break;}
case 442:
#line 3132 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 443:
#line 3141 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 444:
#line 3150 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 445:
#line 3161 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 446:
#line 3175 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 447:
#line 3191 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 448:
#line 3211 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 449:
#line 3236 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 450:
#line 3241 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 451:
#line 3245 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 452:
#line 3249 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[0].l); i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 453:
#line 3261 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 454:
#line 3265 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 455:
#line 3276 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 456:
#line 3281 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0) ;
	}
      }
    ;
    break;}
case 457:
#line 3300 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 458:
#line 3304 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 459:
#line 3318 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 460:
#line 3323 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 461:
#line 3330 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 462:
#line 3334 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 463:
#line 3342 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 464:
#line 3355 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 465:
#line 3359 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 466:
#line 3377 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 467:
#line 3391 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3406 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void FixRelativePath(char *in, char *out){
  if(in[0] == '/' || in[0] == '\\' || (strlen(in)>2 && in[1] == ':')){
    // do nothing: 'in' is an absolute path
    strcpy(out, in);
  }
  else{
    // append 'in' to the path of the parent file
    strcpy(out, yyname);
    int i = strlen(out)-1 ;
    while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
    out[i+1] = '\0';
    strcat(out, in);
  }
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


