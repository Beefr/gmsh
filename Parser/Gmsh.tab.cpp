
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tPoint	286
#define	tCircle	287
#define	tEllipsis	288
#define	tLine	289
#define	tSurface	290
#define	tSpline	291
#define	tVolume	292
#define	tCharacteristic	293
#define	tLength	294
#define	tParametric	295
#define	tElliptic	296
#define	tPlane	297
#define	tRuled	298
#define	tTransfinite	299
#define	tComplex	300
#define	tPhysical	301
#define	tUsing	302
#define	tBump	303
#define	tProgression	304
#define	tRotate	305
#define	tTranslate	306
#define	tSymmetry	307
#define	tDilate	308
#define	tExtrude	309
#define	tDuplicata	310
#define	tLoop	311
#define	tInclude	312
#define	tRecombine	313
#define	tDelete	314
#define	tCoherence	315
#define	tView	316
#define	tAttractor	317
#define	tLayers	318
#define	tScalarTetrahedron	319
#define	tVectorTetrahedron	320
#define	tTensorTetrahedron	321
#define	tScalarTriangle	322
#define	tVectorTriangle	323
#define	tTensorTriangle	324
#define	tScalarLine	325
#define	tVectorLine	326
#define	tTensorLine	327
#define	tScalarPoint	328
#define	tVectorPoint	329
#define	tTensorPoint	330
#define	tBSpline	331
#define	tNurbs	332
#define	tOrder	333
#define	tWith	334
#define	tBounds	335
#define	tKnots	336
#define	tColor	337
#define	tFor	338
#define	tEndFor	339
#define	tScript	340
#define	tExit	341
#define	tMerge	342
#define	tB_SPLINE_SURFACE_WITH_KNOTS	343
#define	tB_SPLINE_CURVE_WITH_KNOTS	344
#define	tCARTESIAN_POINT	345
#define	tTRUE	346
#define	tFALSE	347
#define	tUNSPECIFIED	348
#define	tU	349
#define	tV	350
#define	tEDGE_CURVE	351
#define	tVERTEX_POINT	352
#define	tORIENTED_EDGE	353
#define	tPLANE	354
#define	tFACE_OUTER_BOUND	355
#define	tEDGE_LOOP	356
#define	tADVANCED_FACE	357
#define	tVECTOR	358
#define	tDIRECTION	359
#define	tAXIS2_PLACEMENT_3D	360
#define	tISO	361
#define	tENDISO	362
#define	tENDSEC	363
#define	tDATA	364
#define	tHEADER	365
#define	tFILE_DESCRIPTION	366
#define	tFILE_SCHEMA	367
#define	tFILE_NAME	368
#define	tMANIFOLD_SOLID_BREP	369
#define	tCLOSED_SHELL	370
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	371
#define	tFACE_BOUND	372
#define	tCYLINDRICAL_SURFACE	373
#define	tCONICAL_SURFACE	374
#define	tCIRCLE	375
#define	tTRIMMED_CURVE	376
#define	tGEOMETRIC_SET	377
#define	tCOMPOSITE_CURVE_SEGMENT	378
#define	tCONTINUOUS	379
#define	tCOMPOSITE_CURVE	380
#define	tTOROIDAL_SURFACE	381
#define	tPRODUCT_DEFINITION	382
#define	tPRODUCT_DEFINITION_SHAPE	383
#define	tSHAPE_DEFINITION_REPRESENTATION	384
#define	tELLIPSE	385
#define	tTrimmed	386
#define	tSolid	387
#define	tEndSolid	388
#define	tVertex	389
#define	tFacet	390
#define	tNormal	391
#define	tOuter	392
#define	tLoopSTL	393
#define	tEndLoop	394
#define	tEndFacet	395
#define	tAND	396
#define	tOR	397
#define	tNOTEQUAL	398
#define	tEQUAL	399
#define	tAPPROXEQUAL	400
#define	tAFFECTPLUS	401
#define	tAFFECTMINUS	402
#define	tAFFECTTIMES	403
#define	tAFFECTDIVIDE	404
#define	tLESSOREQUAL	405
#define	tGREATEROREQUAL	406
#define	tCROSSPRODUCT	407
#define	UNARYPREC	408
#define	tPLUSPLUS	409
#define	tMINUSMINUS	410

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.24 2000-12-07 08:46:27 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 59 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1479
#define	YYFLAG		-32768
#define	YYNTBASE	174

#define YYTRANSLATE(x) ((unsigned)(x) <= 410 ? yytranslate[x] : 250)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   162,     2,     2,     2,   159,     2,     2,   166,
   168,   157,   155,   167,   156,   171,   158,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   151,
     2,   152,   141,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   172,     2,   173,   163,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,   170,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   153,   154,   160,   161,   164,   165
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   525,   533,   540,   549,
   550,   553,   556,   559,   562,   565,   568,   571,   574,   577,
   580,   583,   586,   588,   592,   593,   607,   609,   613,   614,
   628,   630,   634,   635,   649,   651,   655,   656,   676,   678,
   682,   683,   703,   705,   709,   710,   730,   732,   736,   737,
   763,   765,   769,   770,   796,   798,   802,   803,   829,   831,
   835,   836,   868,   870,   874,   875,   907,   909,   913,   914,
   946,   951,   955,   959,   964,   969,   974,   979,   986,   998,
  1005,  1017,  1024,  1036,  1043,  1055,  1062,  1074,  1081,  1093,
  1099,  1111,  1117,  1129,  1136,  1148,  1155,  1167,  1174,  1186,
  1195,  1203,  1212,  1225,  1232,  1238,  1246,  1254,  1267,  1275,
  1285,  1303,  1311,  1320,  1329,  1337,  1349,  1355,  1364,  1374,
  1383,  1406,  1427,  1436,  1445,  1451,  1460,  1468,  1477,  1483,
  1495,  1501,  1511,  1513,  1515,  1517,  1518,  1521,  1526,  1531,
  1535,  1539,  1542,  1546,  1553,  1562,  1564,  1573,  1586,  1595,
  1608,  1617,  1630,  1642,  1658,  1660,  1663,  1673,  1676,  1683,
  1693,  1703,  1712,  1721,  1730,  1737,  1742,  1745,  1747,  1749,
  1751,  1753,  1755,  1757,  1761,  1764,  1767,  1770,  1774,  1778,
  1782,  1786,  1790,  1794,  1798,  1802,  1806,  1810,  1814,  1818,
  1822,  1826,  1832,  1837,  1842,  1847,  1852,  1857,  1862,  1867,
  1872,  1877,  1882,  1889,  1894,  1899,  1904,  1909,  1914,  1919,
  1926,  1933,  1940,  1942,  1944,  1946,  1950,  1959,  1964,  1974,
  1979,  1989,  1993,  1999,  2001,  2004,  2007,  2011,  2015,  2027,
  2037,  2045,  2053,  2057,  2066,  2067,  2071,  2073,  2077,  2078,
  2082,  2086,  2088,  2092,  2093,  2095,  2099,  2101,  2103,  2107,
  2111,  2121,  2129,  2135,  2137
};

static const short yyrhs[] = {   176,
     0,   175,     0,   181,     0,   132,     0,   135,   136,   238,
   238,   238,   137,   138,   134,   238,   238,   238,   134,   238,
   238,   238,   134,   238,   238,   238,   139,   140,     0,   133,
     0,     0,   176,   177,     0,   178,     0,   180,     0,   179,
     0,     1,     6,     0,   106,     6,     0,   107,     6,     0,
   109,     6,     0,   108,     6,     0,   110,     6,     0,   111,
   166,   243,   167,     5,   168,     6,     0,   112,   166,   243,
   168,     6,     0,   113,   166,     5,   167,     5,   167,   243,
   167,   243,   167,     5,   167,     5,   167,     5,   168,     6,
     0,     3,     7,    90,   166,     5,   167,   241,   168,     6,
     0,     3,     7,    89,   166,     5,   167,   238,   167,   247,
   167,   237,   167,   237,   167,   237,   167,   247,   167,   247,
   167,   237,   168,     6,     0,     3,     7,    88,   166,     5,
   167,   238,   167,   238,   167,   245,   167,   237,   167,   237,
   167,   237,   167,   237,   167,   247,   167,   247,   167,   247,
   167,   247,   167,   237,   168,     6,     0,     3,     7,    96,
   166,     5,   167,     3,   167,     3,   167,     3,   167,   237,
   168,     6,     0,     3,     7,   100,   166,     5,   167,     3,
   167,   237,   168,     6,     0,     3,     7,   117,   166,     5,
   167,     3,   167,   237,   168,     6,     0,     3,     7,    98,
   166,     5,   167,   157,   167,   157,   167,   238,   167,   237,
   168,     6,     0,     3,     7,   101,   166,     5,   167,   247,
   168,     6,     0,     3,     7,   102,   166,     5,   167,   247,
   167,     3,   167,   237,   168,     6,     0,     3,     7,    97,
   166,     5,   167,     3,   168,     6,     0,     3,     7,   103,
   166,     5,   167,     3,   167,   238,   168,     6,     0,     3,
     7,   105,   166,     5,   167,     3,   167,     3,   167,     3,
   168,     6,     0,     3,     7,   104,   166,     5,   167,   241,
   168,     6,     0,     3,     7,    99,   166,     5,   167,     3,
   168,     6,     0,     3,     7,    34,   166,     5,   167,     3,
   167,     3,   168,     6,     0,     3,     7,   115,   166,     5,
   167,   247,   168,     6,     0,     3,     7,   116,   166,     5,
   167,   247,   167,     3,   168,     6,     0,     3,     7,   114,
   166,     5,   167,     3,   168,     6,     0,     3,     7,   118,
   166,     5,   167,     3,   167,   238,   168,     6,     0,     3,
     7,   119,   166,     5,   167,     3,   167,   238,   167,   238,
   168,     6,     0,     3,     7,   126,   166,     5,   167,     3,
   167,   238,   167,   238,   168,     6,     0,     3,     7,   120,
   166,     5,   167,     3,   167,   238,   168,     6,     0,     3,
     7,   130,   166,     5,   167,     3,   167,   238,   167,   238,
   168,     6,     0,     3,     7,   121,   166,     5,   167,     3,
   167,   247,   167,   247,   167,   237,   167,   237,   168,     6,
     0,     3,     7,   122,   166,     5,   167,   247,   168,     6,
     0,     3,     7,   123,   166,   124,   167,   237,   167,     3,
   168,     6,     0,     3,     7,   125,   166,     5,   167,   247,
   167,   237,   168,     6,     0,     3,     7,   127,   166,     5,
   167,     5,   167,     3,   167,     3,   168,     6,     0,     3,
     7,   128,   166,     5,   167,     5,   167,     3,   168,     6,
     0,     3,     7,   129,   166,     3,   167,     3,   168,     6,
     0,     0,   181,   182,     0,   184,     0,   183,     0,   222,
     0,   223,     0,   224,     0,   227,     0,   228,     0,   232,
     0,   235,     0,   236,     0,   229,     0,   231,     0,   230,
     0,     1,     6,     0,    30,   166,     5,   167,   238,   168,
     6,     0,    61,     5,   169,   185,   170,     6,     0,    61,
     5,     4,   241,   169,   185,   170,     6,     0,     0,   185,
   187,     0,   185,   190,     0,   185,   193,     0,   185,   196,
     0,   185,   199,     0,   185,   202,     0,   185,   205,     0,
   185,   208,     0,   185,   211,     0,   185,   214,     0,   185,
   217,     0,   185,   220,     0,   238,     0,   186,   167,   238,
     0,     0,    73,   166,   238,   167,   238,   167,   238,   168,
   188,   169,   186,   170,     6,     0,   238,     0,   189,   167,
   238,     0,     0,    74,   166,   238,   167,   238,   167,   238,
   168,   191,   169,   189,   170,     6,     0,   238,     0,   192,
   167,   238,     0,     0,    75,   166,   238,   167,   238,   167,
   238,   168,   194,   169,   192,   170,     6,     0,   238,     0,
   195,   167,   238,     0,     0,    70,   166,   238,   167,   238,
   167,   238,   167,   238,   167,   238,   167,   238,   168,   197,
   169,   195,   170,     6,     0,   238,     0,   198,   167,   238,
     0,     0,    71,   166,   238,   167,   238,   167,   238,   167,
   238,   167,   238,   167,   238,   168,   200,   169,   198,   170,
     6,     0,   238,     0,   201,   167,   238,     0,     0,    72,
   166,   238,   167,   238,   167,   238,   167,   238,   167,   238,
   167,   238,   168,   203,   169,   201,   170,     6,     0,   238,
     0,   204,   167,   238,     0,     0,    67,   166,   238,   167,
   238,   167,   238,   167,   238,   167,   238,   167,   238,   167,
   238,   167,   238,   167,   238,   168,   206,   169,   204,   170,
     6,     0,   238,     0,   207,   167,   238,     0,     0,    68,
   166,   238,   167,   238,   167,   238,   167,   238,   167,   238,
   167,   238,   167,   238,   167,   238,   167,   238,   168,   209,
   169,   207,   170,     6,     0,   238,     0,   210,   167,   238,
     0,     0,    69,   166,   238,   167,   238,   167,   238,   167,
   238,   167,   238,   167,   238,   167,   238,   167,   238,   167,
   238,   168,   212,   169,   210,   170,     6,     0,   238,     0,
   213,   167,   238,     0,     0,    64,   166,   238,   167,   238,
   167,   238,   167,   238,   167,   238,   167,   238,   167,   238,
   167,   238,   167,   238,   167,   238,   167,   238,   167,   238,
   168,   215,   169,   213,   170,     6,     0,   238,     0,   216,
   167,   238,     0,     0,    65,   166,   238,   167,   238,   167,
   238,   167,   238,   167,   238,   167,   238,   167,   238,   167,
   238,   167,   238,   167,   238,   167,   238,   167,   238,   168,
   218,   169,   216,   170,     6,     0,   238,     0,   219,   167,
   238,     0,     0,    66,   166,   238,   167,   238,   167,   238,
   167,   238,   167,   238,   167,   238,   167,   238,   167,   238,
   167,   238,   167,   238,   167,   238,   167,   238,   168,   221,
   169,   219,   170,     6,     0,     4,     7,   238,     6,     0,
     4,   164,     6,     0,     4,   165,     6,     0,     4,   147,
   238,     6,     0,     4,   148,   238,     6,     0,     4,   149,
   238,     6,     0,     4,   150,   238,     6,     0,     4,   171,
     4,     7,     5,     6,     0,     4,   171,    61,   172,   238,
   173,   171,     4,     7,     5,     6,     0,     4,   171,     4,
     7,   238,     6,     0,     4,   171,    61,   172,   238,   173,
   171,     4,     7,   238,     6,     0,     4,   171,     4,   147,
   238,     6,     0,     4,   171,    61,   172,   238,   173,   171,
     4,   147,   238,     6,     0,     4,   171,     4,   148,   238,
     6,     0,     4,   171,    61,   172,   238,   173,   171,     4,
   148,   238,     6,     0,     4,   171,     4,   149,   238,     6,
     0,     4,   171,    61,   172,   238,   173,   171,     4,   149,
   238,     6,     0,     4,   171,     4,   150,   238,     6,     0,
     4,   171,    61,   172,   238,   173,   171,     4,   150,   238,
     6,     0,     4,   171,     4,   164,     6,     0,     4,   171,
    61,   172,   238,   173,   171,     4,   164,   238,     6,     0,
     4,   171,     4,   165,     6,     0,     4,   171,    61,   172,
   238,   173,   171,     4,   165,   238,     6,     0,     4,   171,
     4,     7,   241,     6,     0,     4,   171,    61,   172,   238,
   173,   171,     4,     7,   241,     6,     0,     4,   171,     4,
   147,   241,     6,     0,     4,   171,    61,   172,   238,   173,
   171,     4,   147,   241,     6,     0,     4,   171,     4,   148,
   241,     6,     0,     4,   171,    61,   172,   238,   173,   171,
     4,   148,   241,     6,     0,     4,   171,    82,   171,     4,
     7,   249,     6,     0,    31,   166,   238,   168,     7,   241,
     6,     0,    46,    31,   166,   238,   168,     7,   247,     6,
     0,    62,    31,   247,     7,   169,   238,   167,   238,   167,
   238,   170,     6,     0,    38,    39,   247,     7,   238,     6,
     0,    31,   169,   238,   170,     6,     0,    34,   166,   238,
   168,     7,   247,     6,     0,    36,   166,   238,   168,     7,
   247,     6,     0,    62,    34,   247,     7,   169,   238,   167,
   238,   167,   238,   170,     6,     0,    32,   166,   238,   168,
     7,   247,     6,     0,    32,   166,   238,   168,     7,   247,
    42,   241,     6,     0,    40,   166,   238,   168,     7,   169,
   238,   167,   238,   167,     5,   167,     5,   167,     5,   170,
     6,     0,    33,   166,   238,   168,     7,   247,     6,     0,
    46,    34,   166,   238,   168,     7,   247,     6,     0,    34,
    56,   166,   238,   168,     7,   247,     6,     0,    76,   166,
   238,   168,     7,   247,     6,     0,    77,   166,   238,   168,
     7,   247,    81,   247,    78,   238,     6,     0,    34,   169,
   238,   170,     6,     0,    42,    35,   166,   238,   168,     7,
   247,     6,     0,   131,    35,   166,   238,   168,     7,   238,
   247,     6,     0,    43,    35,   166,   238,   168,     7,   247,
     6,     0,    77,    35,    79,    80,   166,   238,   168,     7,
   245,    81,   169,   247,   167,   247,   170,    78,   169,   238,
   167,   238,   170,     6,     0,    77,    35,   166,   238,   168,
     7,   245,    81,   169,   247,   167,   247,   170,    78,   169,
   238,   167,   238,   170,     6,     0,    46,    35,   166,   238,
   168,     7,   247,     6,     0,    35,    56,   166,   238,   168,
     7,   247,     6,     0,    35,   169,   238,   170,     6,     0,
    45,    37,   166,   238,   168,     7,   247,     6,     0,    37,
   166,   238,   168,     7,   247,     6,     0,    46,    37,   166,
   238,   168,     7,   247,     6,     0,    51,   241,   169,   225,
   170,     0,    50,   169,   241,   167,   241,   167,   238,   170,
   169,   225,   170,     0,    52,   241,   169,   225,   170,     0,
    53,   169,   241,   167,   238,   170,   169,   225,   170,     0,
   227,     0,   226,     0,   224,     0,     0,   226,   223,     0,
    55,   169,   226,   170,     0,    59,   169,   226,   170,     0,
    57,     5,     6,     0,    30,     5,     6,     0,    86,     6,
     0,    87,     5,     6,     0,    83,   166,   238,     8,   238,
   168,     0,    83,   166,   238,     8,   238,     8,   238,   168,
     0,    84,     0,    54,    31,   169,   238,   167,   241,   170,
     6,     0,    54,    31,   169,   238,   167,   241,   167,   241,
   167,   238,   170,     6,     0,    54,    34,   169,   238,   167,
   241,   170,     6,     0,    54,    34,   169,   238,   167,   241,
   167,   241,   167,   238,   170,     6,     0,    54,    35,   169,
   238,   167,   241,   170,     6,     0,    54,    35,   169,   238,
   167,   241,   167,   241,   167,   238,   170,     6,     0,    54,
    35,   169,   238,   167,   241,   170,   169,   233,   170,     6,
     0,    54,    35,   169,   238,   167,   241,   167,   241,   167,
   238,   170,   169,   233,   170,     6,     0,   234,     0,   233,
   234,     0,    63,   169,   247,   167,   247,   167,   247,   170,
     6,     0,    58,     6,     0,    44,    34,   247,     7,   238,
     6,     0,    44,    34,   247,     7,   238,    47,    49,   238,
     6,     0,    44,    34,   247,     7,   238,    47,    48,   238,
     6,     0,    44,    35,   169,   238,   170,     7,   247,     6,
     0,    41,    35,   169,   238,   170,     7,   247,     6,     0,
    44,    37,   169,   238,   170,     7,   247,     6,     0,    58,
    35,   247,     7,   238,     6,     0,    58,    35,   247,     6,
     0,    60,     6,     0,    91,     0,    92,     0,    93,     0,
    94,     0,    95,     0,   239,     0,   166,   238,   168,     0,
   156,   238,     0,   155,   238,     0,   162,   238,     0,   238,
   156,   238,     0,   238,   155,   238,     0,   238,   157,   238,
     0,   238,   158,   238,     0,   238,   159,   238,     0,   238,
   163,   238,     0,   238,   151,   238,     0,   238,   152,   238,
     0,   238,   153,   238,     0,   238,   154,   238,     0,   238,
   145,   238,     0,   238,   144,   238,     0,   238,   142,   238,
     0,   238,   143,   238,     0,   238,   141,   238,     8,   238,
     0,    10,   166,   238,   168,     0,    11,   166,   238,   168,
     0,    12,   166,   238,   168,     0,    13,   166,   238,   168,
     0,    14,   166,   238,   168,     0,    15,   166,   238,   168,
     0,    16,   166,   238,   168,     0,    17,   166,   238,   168,
     0,    18,   166,   238,   168,     0,    19,   166,   238,   168,
     0,    20,   166,   238,   167,   238,   168,     0,    21,   166,
   238,   168,     0,    22,   166,   238,   168,     0,    23,   166,
   238,   168,     0,    24,   166,   238,   168,     0,    25,   166,
   238,   168,     0,    26,   166,   238,   168,     0,    27,   166,
   238,   167,   238,   168,     0,    28,   166,   238,   167,   238,
   168,     0,    29,   166,   238,   167,   238,   168,     0,     3,
     0,     9,     0,     4,     0,     4,   171,     4,     0,     4,
   171,    61,   172,   238,   173,   171,     4,     0,     4,   171,
     4,   164,     0,     4,   171,    61,   172,   238,   173,   171,
     4,   164,     0,     4,   171,     4,   165,     0,     4,   171,
    61,   172,   238,   173,   171,     4,   165,     0,   238,     8,
   238,     0,   238,     8,   238,     8,   238,     0,   242,     0,
   156,   241,     0,   155,   241,     0,   241,   156,   241,     0,
   241,   155,   241,     0,   169,   238,   167,   238,   167,   238,
   167,   238,   167,   238,   170,     0,   169,   238,   167,   238,
   167,   238,   167,   238,   170,     0,   169,   238,   167,   238,
   167,   238,   170,     0,   166,   238,   167,   238,   167,   238,
   168,     0,     4,   171,     4,     0,     4,   171,    61,   172,
   238,   173,   171,     4,     0,     0,   166,   244,   168,     0,
     5,     0,   244,   167,     5,     0,     0,   169,   246,   170,
     0,   166,   246,   168,     0,   247,     0,   246,   167,   247,
     0,     0,   238,     0,   169,   248,   170,     0,   238,     0,
   240,     0,   248,   167,   238,     0,   248,   167,   240,     0,
   169,   238,   167,   238,   167,   238,   167,   238,   170,     0,
   169,   238,   167,   238,   167,   238,   170,     0,   169,     4,
   167,   238,   170,     0,     4,     0,     4,   171,    82,   171,
     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   138,   140,   141,   148,   156,   170,   182,   184,   187,   189,
   190,   191,   194,   200,   205,   206,   207,   210,   214,   217,
   223,   228,   234,   242,   247,   251,   257,   262,   266,   271,
   275,   278,   283,   287,   291,   295,   300,   304,   307,   311,
   315,   319,   323,   327,   331,   334,   338,   341,   345,   348,
   357,   361,   367,   369,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   381,   382,   385,   396,   401,   407,
   412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
   422,   423,   426,   429,   433,   439,   445,   448,   452,   458,
   464,   467,   471,   477,   483,   486,   490,   498,   504,   507,
   511,   519,   525,   528,   532,   540,   546,   549,   553,   565,
   571,   574,   578,   590,   596,   599,   603,   615,   621,   624,
   628,   641,   647,   650,   654,   667,   673,   676,   680,   693,
   705,   715,   723,   731,   739,   747,   755,   766,   779,   797,
   814,   835,   852,   873,   890,   911,   928,   949,   966,   987,
  1004,  1025,  1042,  1065,  1090,  1119,  1144,  1173,  1198,  1229,
  1249,  1260,  1266,  1285,  1296,  1304,  1310,  1316,  1335,  1341,
  1357,  1364,  1370,  1376,  1382,  1388,  1407,  1419,  1425,  1444,
  1465,  1473,  1479,  1485,  1491,  1503,  1509,  1515,  1527,  1533,
  1538,  1543,  1550,  1552,  1553,  1556,  1561,  1572,  1590,  1605,
  1633,  1664,  1668,  1680,  1695,  1708,  1746,  1752,  1758,  1762,
  1766,  1770,  1774,  1779,  1786,  1790,  1795,  1813,  1823,  1841,
  1858,  1875,  1896,  1916,  1936,  1953,  1977,  1990,  1992,  1993,
  1994,  1995,  1998,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,
  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,
  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,
  2037,  2038,  2041,  2043,  2044,  2053,  2070,  2091,  2108,  2129,
  2146,  2168,  2175,  2188,  2193,  2197,  2201,  2205,  2210,  2215,
  2219,  2223,  2227,  2253,  2285,  2289,  2294,  2298,  2303,  2307,
  2311,  2317,  2323,  2329,  2333,  2339,  2346,  2352,  2361,  2365,
  2375,  2380,  2384,  2389,  2394
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete","tCoherence",
"tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron",
"tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine","tVectorLine",
"tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline","tNurbs",
"tOrder","tWith","tBounds","tKnots","tColor","tFor","tEndFor","tScript","tExit",
"tMerge","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","Color", NULL
};
#endif

static const short yyr1[] = {     0,
   174,   174,   174,   175,   175,   175,   176,   176,   177,   177,
   177,   177,   178,   178,   178,   178,   178,   179,   179,   179,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   181,   181,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   183,   184,   184,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   186,   186,   188,   187,   189,   189,   191,   190,
   192,   192,   194,   193,   195,   195,   197,   196,   198,   198,
   200,   199,   201,   201,   203,   202,   204,   204,   206,   205,
   207,   207,   209,   208,   210,   210,   212,   211,   213,   213,
   215,   214,   216,   216,   218,   217,   219,   219,   221,   220,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   224,   224,
   224,   224,   225,   225,   225,   226,   226,   227,   228,   229,
   230,   230,   230,   231,   231,   231,   232,   232,   232,   232,
   232,   232,   232,   232,   233,   233,   234,   234,   235,   235,
   235,   235,   235,   235,   235,   235,   236,   237,   237,   237,
   237,   237,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   240,   240,   241,   241,   241,   241,   241,   242,   242,
   242,   242,   242,   242,   243,   243,   244,   244,   245,   245,
   245,   246,   246,   247,   247,   247,   248,   248,   248,   248,
   249,   249,   249,   249,   249
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
     7,     8,    12,     6,     5,     7,     7,    12,     7,     9,
    17,     7,     8,     8,     7,    11,     5,     8,     9,     8,
    22,    20,     8,     8,     5,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     4,     4,     3,
     3,     2,     3,     6,     8,     1,     8,    12,     8,    12,
     8,    12,    11,    15,     1,     2,     9,     2,     6,     9,
     9,     8,     8,     8,     6,     4,     2,     1,     1,     1,
     1,     1,     1,     3,     2,     2,     2,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     4,     4,     4,     6,
     6,     6,     1,     1,     1,     3,     8,     4,     9,     4,
     9,     3,     5,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     3,     8,     0,     3,     1,     3,     0,     3,
     3,     1,     3,     0,     1,     3,     1,     1,     3,     3,
     9,     7,     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   206,     0,     0,     0,    52,    54,
    53,    55,    56,    57,    58,    59,    63,    65,    64,    60,
    61,    62,   273,   275,   274,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   233,    12,     0,    13,    14,    16,    15,    17,   295,   295,
     0,    66,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   304,     0,     0,     0,     0,   304,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   284,     0,     0,     0,     0,     0,   196,
     0,   304,   196,   227,     0,   304,   304,     0,     0,     0,
     0,   202,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   236,   235,   237,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   132,   133,     0,     0,     0,   201,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   305,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   286,
   285,     0,     0,     0,     0,   196,   196,     0,     0,     0,
     0,     0,   200,     0,     0,     0,    70,     0,     0,     0,
     0,     0,     0,     0,   203,     0,   276,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   234,     0,   250,   251,   249,   248,   244,   245,   246,   247,
   236,   235,   240,   241,   242,   243,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   297,     0,     0,
     0,     0,   131,   134,   135,   136,   137,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   307,   308,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,   288,
   287,   195,     0,   194,   193,     0,     0,     0,     0,     0,
   198,   197,   226,     0,   199,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   278,   280,     0,   253,   254,
   255,   256,   257,   258,   259,   260,   261,   262,     0,   264,
   265,   266,   267,   268,   269,     0,     0,     0,   239,   238,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   296,     0,    19,     0,   275,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   150,   152,     0,     0,     0,     0,   165,   304,   304,     0,
   304,   177,     0,   185,   304,   304,     0,     0,   306,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   189,   191,     0,     0,
     0,     0,     0,    70,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,     0,
     0,   304,     0,     0,   304,     0,     0,     0,     0,     0,
     0,     0,   252,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   304,   304,     0,     0,     0,     0,   304,
   304,     0,     0,     0,     0,     0,   304,     0,   304,     0,
     0,     0,     0,     0,   298,     0,   295,     0,   138,     0,
   140,   154,   142,   156,   144,   158,   146,   148,     0,     0,
     0,     0,     0,     0,   304,     0,   304,     0,     0,   282,
   309,   310,   164,     0,   304,   304,   304,   219,     0,   304,
   304,   304,   304,   304,   304,   304,     0,     0,     0,     0,
     0,     0,     0,     0,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    68,     0,
     0,     0,     0,   299,     0,     0,   204,     0,     0,   263,
   270,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   228,   229,   230,
   231,   232,     0,     0,     0,     0,     0,     0,     0,    18,
     0,   276,     0,     0,   314,     0,     0,    67,   161,   169,
     0,   172,     0,   166,     0,   167,   187,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   196,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   175,     0,   304,
   304,     0,   304,     0,   304,     0,     0,     0,     0,   304,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   304,     0,
     0,     0,     0,     0,     0,     0,     0,   295,     0,     0,
     0,   275,     0,   160,     0,   174,   184,   283,     0,   223,
   178,   180,     0,     0,   222,   224,   186,   162,   173,   183,
   188,     0,     0,   292,     0,   291,     0,     0,   207,     0,
   209,     0,   211,     0,    69,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
     0,   302,     0,     0,     0,   205,     0,   277,     0,     0,
     0,     0,    21,     0,    30,     0,    34,     0,    28,     0,
     0,    33,     0,    38,    36,     0,     0,     0,     0,     0,
     0,    45,     0,     0,     0,     0,     0,    50,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   170,     0,   221,   220,   196,   294,     0,   192,     0,
     0,     0,     0,     0,     0,   215,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,   301,   300,   304,     0,   179,   279,   281,     0,
     0,   299,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   304,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   290,     0,     0,     0,   218,   304,     0,   216,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   303,     0,     0,     0,    35,     0,     0,
     0,     0,    25,     0,    31,     0,    37,    26,    39,     0,
    42,     0,    46,    47,     0,     0,    49,     0,     0,     0,
   139,   141,   155,   143,   157,   145,   159,   147,   149,   151,
   153,   315,   313,     0,     0,   190,     0,     0,     0,     0,
     0,   213,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   304,   304,   176,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   277,     0,     0,   289,   208,   210,   212,     0,
   304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    85,    89,    93,   163,   168,     0,     0,     0,     0,     0,
     0,     0,    29,    32,    40,     0,    41,    48,    43,     0,
     0,   312,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   304,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   304,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    27,     0,
     0,   311,     0,   214,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    83,     0,    87,     0,    91,
     0,     0,     0,     0,   304,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
    20,   171,   217,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    84,    86,    88,    90,    92,    94,     0,     0,
     0,     0,   304,     0,     0,     0,     0,     0,     0,    97,
   101,   105,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     5,   304,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    95,     0,    99,     0,   103,     0,   304,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   181,     0,    22,     0,     0,     0,     0,     0,     0,
    96,    98,   100,   102,   104,   106,   304,     0,     0,     0,
   109,   113,   117,     0,     0,     0,     0,     0,     0,     0,
   304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   107,     0,   111,     0,   115,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   110,   112,   114,   116,   118,     0,   121,   125,
   129,    23,     0,     0,     0,     0,     0,     0,     0,   119,
     0,   123,     0,   127,     0,     0,     0,     0,     0,     0,
   120,   122,   124,   126,   128,   130,     0,     0,     0
};

static const short yydefgoto[] = {  1477,
     4,     5,    18,    19,    20,    21,     6,    59,    60,    61,
   457,  1255,   598,  1205,  1257,   599,  1206,  1259,   600,  1207,
  1361,   601,  1334,  1363,   602,  1335,  1365,   603,  1336,  1422,
   604,  1408,  1424,   605,  1409,  1426,   606,  1410,  1459,   607,
  1453,  1461,   608,  1454,  1463,   609,  1455,    62,   452,   442,
   443,   444,   445,    66,    67,    68,    69,    70,   985,   986,
    71,    72,   763,   274,   101,   420,   290,   154,   247,   389,
   832,   921,   922,   421,   777
};

static const short yypact[] = {  1243,
-32768,-32768,  -116,-32768,   696,  2145,  1516,    38,    39,    58,
    60,    62,    74,    81,   -64,   -53,   -27,-32768,-32768,-32768,
-32768,   123,    92,    25,   -81,    -4,    26,   -39,   -49,   125,
   129,   208,   131,   223,   267,   280,    77,   293,   269,   167,
    82,    82,   172,   300,   178,   350,   322,   198,   368,   382,
   100,   231,   -25,   235,-32768,   406,   409,   384,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   268,-32768,   272,   275,   276,   277,   278,
   279,   282,   283,   284,   285,   292,   305,   307,   309,   310,
   312,   316,   317,   319,   320,  1516,  1516,  1516,  1516,  1489,
-32768,-32768,  2181,-32768,-32768,-32768,-32768,-32768,   326,   326,
   412,-32768,  1516,  1516,  1516,  1516,  1516,   429,   440,    14,
   453,   472,  1516,  1516,  1516,  1516,   327,  1516,  1516,   328,
  1516,  1516,  1516,   916,  1516,   337,   329,   330,   916,   338,
   341,   347,   349,   369,   373,   374,    82,   370,    82,    82,
  1516,  1516,  -117,-32768,  -102,    82,   343,   378,   380,-32768,
   555,   916,-32768,-32768,    20,   916,   916,  1516,   -65,  1516,
  1516,-32768,   556,   397,     8,  1516,  1516,  1516,  1516,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
  1516,  1516,  1516,  1516,  1516,   402,   402,   402,  2779,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
  1516,  1516,  1516,  1516,  1489,   400,   403,   407,   408,   413,
   414,   415,   439,   441,   442,   456,   457,   459,   460,   462,
   463,   467,   468,   469,   496,   497,   498,   499,   500,   512,
   514,   517,   518,   519,   520,   563,   515,   521,   524,   311,
   516,   670,   724,   825,-32768,-32768,     1,   522,   404,-32768,
   528,  2807,  2307,  2835,  2863,  1516,  2891,  2330,  1516,  2353,
  2919,  2947,  1516,  7451,   680,  2975,  1516,  1516,  1516,   681,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,   -93,    11,-32768,
-32768,  4543,  4570,    82,    82,   261,   261,   -72,  1516,  1516,
  1516,  1282,-32768,    72,  2096,    82,-32768,   691,   705,  3003,
   633,  1516,  3031,   401,-32768,  1516,   -67,   542,  3059,  3087,
  3115,  3143,  3171,  3199,  3227,  3255,  3283,  3311,  4597,  3339,
  3367,  3395,  3423,  3451,  3479,  4624,  4651,  4678,  1516,  1516,
-32768,  1915,   961,   961,   458,   458,   247,   247,   247,   247,
  -114,   -92,   402,   402,   402,   402,  4705,   710,   711,   712,
   713,   715,   717,   718,   719,   720,   721,   726,   728,   729,
   731,   733,   735,   736,   738,   739,   740,   753,   756,   757,
   639,   761,   762,   763,   765,   769,   768,-32768,   -15,   770,
   771,   773,-32768,-32768,-32768,-32768,-32768,   573,  1460,  1460,
  1516,  1516,   774,   778,  1516,   772,  1516,   767,   779,   781,
   783,  3507,   784,   786,  3535,   788,   791,   793,  1940,-32768,
    85,  1516,   803,  2376,  3563,  3591,  1516,  2399,  2422,  3619,
  3647,  3675,  3703,  3731,    82,-32768,   607,  1516,  1516,-32768,
-32768,-32768,   625,  1004,-32768,   646,  1516,  4728,  4755,  4782,
-32768,-32768,-32768,  1516,-32768,   -99,   254,   648,   649,   827,
   669,  3759,   829,  1516,  3787,-32768,-32768,  1516,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1516,-32768,
-32768,-32768,-32768,-32768,-32768,  1516,  1516,  1516,   110,   110,
  1516,   699,   671,   672,   673,   674,   676,   677,   678,   679,
   686,   687,   688,   690,   692,   694,   697,   703,   704,   706,
   707,   722,   723,   725,   727,   730,   744,   745,   746,   747,
   748,   749,   842,-32768,   695,-32768,   750,   714,   852,  1460,
  1460,  1516,   945,     0,   985,     3,  1023,    59,  1433,  1574,
-32768,-32768,  2011,   841,  3815,    82,-32768,   916,   916,   877,
   916,-32768,   879,-32768,   916,   916,  1516,  1516,-32768,  1598,
   752,   884,   886,   888,   375,   889,   891,   911,   917,   939,
   940,   941,   -20,  1516,  4809,  4836,-32768,-32768,  2445,    82,
    82,    82,  1621,-32768,   796,   799,   805,   806,   819,   820,
   821,   823,   824,   828,   830,   831,   943,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1516,
  1516,   916,  1516,   988,   916,   346,   991,  2092,  3843,  3871,
  3899,  3927,  7451,   789,   947,  1516,  1516,    82,   997,   998,
   845,  1000,  1001,   916,   916,  1002,    82,  1003,  1006,   916,
   916,  1007,  1008,  1009,  1010,  1011,   916,   291,   916,  1012,
  1013,  1014,  1017,  1019,-32768,  1020,   326,    15,-32768,  2751,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   836,    21,
  1021,    94,    17,  1022,   916,  1024,   916,  1025,  1026,  1963,
  1940,-32768,-32768,  1516,   916,   916,   916,-32768,   259,   916,
   916,   916,   916,   916,   916,   916,  1516,  2171,  1516,  1516,
   848,  -127,  -122,  -120,-32768,   682,  1516,  1516,  1516,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,-32768,  4863,
  4890,  1027,  3955,    -9,   942,  1516,-32768,  1516,   854,-32768,
-32768,-32768,-32768,  1516,   867,  4917,  4944,   -95,   878,   880,
   897,   883,   898,   899,   901,   902,   -74,   906,   907,   908,
   910,   912,   924,   925,   926,   927,   915,-32768,-32768,-32768,
-32768,-32768,   928,   944,   954,   955,   956,   957,   964,-32768,
   965,   -67,   937,  1070,   913,  1543,  1104,-32768,-32768,-32768,
    82,-32768,  1128,-32768,  1139,-32768,-32768,  1516,  4971,  1144,
  1145,  1146,  1516,  1516,  1163,  1164,  1166,  1167,  1179,  1181,
  1182,  2468,  1018,  3983,  2217,   261,    82,  1189,    82,  1190,
    82,    -2,  1191,  4998,  5025,  5052,  5079,  5106,  5133,  5160,
  5187,  5214,  5241,  5268,  5295,  1516,  1516,-32768,  1192,   916,
   916,  1117,   916,  4011,   207,  1205,  1489,  1208,  1516,   916,
  1220,  1224,  1223,  1073,  1225,   291,  1228,  1232,  1516,  1230,
  1234,  1235,  1236,  1237,   291,  1516,  1516,  1516,   916,  1242,
  1246,   291,  1516,  1247,  1248,  1251,  1516,   326,  1516,    96,
  1170,  -130,  5322,-32768,    98,-32768,-32768,  7451,  1516,-32768,
-32768,-32768,  1644,  1668,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1084,  1250,-32768,  1516,-32768,  1088,   -13,-32768,   134,
-32768,   143,-32768,   -36,-32768,  1516,  1516,  1516,  1516,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  5349,  5376,    -9,
   211,-32768,   116,  1090,  1183,-32768,  1254,   264,  1489,  1094,
  5403,  1110,-32768,  1111,-32768,  1112,-32768,  1113,-32768,  1115,
  4039,-32768,  1119,-32768,-32768,  1127,  1129,  4067,  5430,  4095,
  1120,-32768,  1130,  1131,  5457,  1133,  1136,-32768,  5484,  1134,
  2194,   627,  1460,  1460,  1516,  1516,  1516,  1516,  1125,  1516,
  1516,-32768,  5511,-32768,-32768,   261,-32768,  2247,-32768,  1516,
  1516,  1516,  1299,  1137,   -47,-32768,  5538,  5565,  5592,  5619,
  5646,  5673,  5700,  5727,  5754,  5781,  5808,  5835,  1516,  1516,
  1240,   916,-32768,-32768,   916,  1516,-32768,-32768,-32768,  1049,
  1317,    -9,   291,  1323,  1516,  1325,   291,  1326,  1330,  1328,
  1339,  1340,  1516,  1341,   916,  1342,  1351,  1516,  1357,  1355,
  1516,  1324,  1199,  1356,  1691,   109,  1714,   126,  1738,   132,
  1761,  1788,  1831,  1869,  1368,  2491,  5862,  1369,  1207,  1516,
-32768,  2514,  2537,  2560,-32768,   916,  1373,-32768,  1516,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
  2583,  2606,  1211,-32768,  1214,  1892,  1516,-32768,  1215,  1216,
  1217,  5889,-32768,  1218,-32768,  1219,-32768,-32768,-32768,  4123,
-32768,  1221,-32768,-32768,  4151,  1222,-32768,  4179,  1227,  1381,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1516,  1229,-32768,  2629,  1383,  1389,    -1,
  1231,-32768,  5916,  5943,  5970,  5997,  6024,  6051,  6078,  6105,
  6132,  4207,  4235,  4263,  1391,  1393,   916,   916,-32768,  1489,
   291,   291,   291,   291,  1394,  1395,  1396,   291,  1397,  1398,
  1405,  1407,   264,  2277,  1409,-32768,-32768,-32768,-32768,   -36,
   916,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
-32768,-32768,-32768,-32768,-32768,  1249,  1245,  1489,  1252,  1253,
  1258,  1260,-32768,-32768,-32768,  1263,-32768,-32768,-32768,  1265,
  1516,-32768,  1267,   -37,  1268,  6159,  6186,  6213,  6240,  6267,
  6294,  6321,  6348,  6375,  1271,  1272,  1273,   916,  1343,  2659,
   291,   291,  1411,  1412,   291,  1431,  2682,  1432,  1437,   916,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
  1516,  1516,  1274,  1276,  1516,  1279,  1280,-32768,-32768,  1285,
  1286,-32768,  1278,-32768,  1289,  6402,  6429,  6456,  6483,  6510,
  6537,  6564,  6591,  6618,   175,  7451,   176,  7451,   186,  7451,
  1377,  1516,  1489,   291,   916,  1450,  1455,  1459,  1461,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1462,
  1516,  1484,  1516,  1485,  1297,  6645,  1489,  1327,  1329,-32768,
-32768,-32768,-32768,  6672,  6699,  6726,  6753,  6780,  6807,  4291,
  4319,  4347,  7451,-32768,  7451,-32768,  7451,-32768,  1516,  1516,
  7428,   291,   916,  1516,  1516,  1516,  1516,  1516,  1516,-32768,
-32768,-32768,  6834,  2705,  1382,  1354,  1384,  6861,  6888,  6915,
  6942,  6969,  6996,  1379,  1380,  1404,  1516,  1491,-32768,   916,
   291,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
  2728,-32768,  1414,  1415,  7023,  7050,  7077,  7104,  7131,  7158,
   201,  7451,   205,  7451,   210,  7451,  1517,   916,  1518,  1516,
  1516,  1516,  1516,  1516,  1516,  1516,  1544,  1516,  1573,  1516,
  1576,-32768,  1426,-32768,  7185,  7212,  7239,  4375,  4403,  4431,
  7451,-32768,  7451,-32768,  7451,-32768,   916,  1516,  1516,  1516,
-32768,-32768,-32768,  1427,  7266,  7293,  7320,  1428,  1429,  1430,
   916,  1516,  1516,  1516,  1516,  1516,  1516,  1434,  7347,  7374,
  7401,   229,  7451,   246,  7451,   251,  7451,   291,  1516,  1516,
  1516,  1516,  1589,  1516,  1596,  1516,  1599,  1438,  4459,  4487,
  4515,  7451,-32768,  7451,-32768,  7451,-32768,  1601,-32768,-32768,
-32768,-32768,  1439,  1440,  1441,  1516,  1516,  1516,   256,  7451,
   260,  7451,   266,  7451,  1516,  1605,  1516,  1606,  1516,  1607,
  7451,-32768,  7451,-32768,  7451,-32768,  1495,  1614,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1033,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1612,  1613,
  -295,   274,  1615,-32768,-32768,-32768,-32768,-32768,   464,  -982,
-32768,-32768,  -804,    -7,-32768,  1062,   -10,-32768,  -109,-32768,
  -907,   794,   598,-32768,-32768
};


#define	YYLAST		7614


static const short yytable[] = {   100,
   248,   446,  1058,   903,  1159,   662,   130,   398,   664,   169,
   983,   317,  1001,   311,   436,   984,   127,   257,   772,     7,
   983,   983,   780,   306,   775,   984,   984,   294,   295,   121,
   153,   155,   294,   295,   294,   295,   970,   294,   295,   807,
   175,   938,   808,   102,   809,   103,   811,   810,   214,   812,
   947,   296,   294,   295,  -239,   294,   295,   954,   781,   294,
   295,   294,   295,   104,   666,   105,   297,   106,   318,   584,
   214,   437,   841,   435,   258,   773,  -238,   453,   454,   107,
   294,   295,   294,   295,   123,   148,   108,   124,   196,   197,
   198,   199,   215,   850,   447,   259,   466,   467,   113,   779,
   312,   109,   962,   972,  1079,   250,   251,   252,   253,   254,
   139,   140,   110,   141,  1103,   262,   263,   264,   265,   131,
   267,   268,  1057,   270,   271,   272,   128,   276,   112,   129,
   166,  1105,  1219,   167,   294,   295,   288,  1107,   111,   291,
   170,   294,   295,   292,   293,   298,   697,   399,   400,   401,
   402,   523,   524,   980,   294,   295,   830,   294,   295,   831,
   310,   125,   313,   314,   403,   404,   904,  1160,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   307,   776,
   122,   126,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,  1080,    73,
    74,  1058,  1084,   294,   295,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,   149,   150,   114,   115,
   116,   117,   963,   964,   965,   966,   134,   151,   294,   295,
   152,   558,   294,   295,   559,   118,   119,   136,   412,   967,
   968,   415,   120,   294,   295,   419,   211,   212,   213,   424,
   425,   426,   214,   428,   429,   430,   431,   432,   433,   434,
   294,   295,  1002,   440,   441,  1004,   294,   295,   294,   295,
   132,   448,   449,   450,   133,   456,   135,   294,   295,   143,
   981,   137,   144,   145,   462,   146,   793,   794,   465,   982,
    40,    41,    42,    43,   138,    45,   393,   585,   586,   587,
   588,   589,   590,   591,   592,   593,   594,   595,   596,   142,
   157,   489,   490,   158,   159,   147,  1179,  1180,  1181,  1182,
   156,  1279,  1281,  1186,  1280,  1282,   160,   200,   201,   202,
   203,   204,  1283,   726,   161,  1284,   162,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   163,  1376,    98,   214,
  1377,  1378,    99,   164,  1379,   273,  1380,  1002,  1003,  1381,
   688,   758,   759,   760,   761,   762,   165,   534,   536,   538,
   533,   535,   537,   539,   540,  1432,   168,   543,  1433,   545,
   171,   339,   340,   211,   212,   213,  1236,  1237,   464,   214,
  1240,   172,  1434,   173,   560,  1435,   249,  1436,   174,   565,
  1437,   689,  1465,   597,   573,  1466,  1467,  1008,  1009,  1468,
   575,   576,  1469,   302,   255,  1470,   305,   176,   175,   579,
   177,   178,   179,   180,   181,   256,   583,   182,   183,   184,
   185,   200,   201,   202,   203,   204,   616,   186,   260,  1288,
   618,   205,   206,   207,   208,   339,   340,   211,   212,   213,
   187,   619,   188,   214,   189,   190,   261,   191,   620,   621,
   622,   192,   193,   623,   194,   195,   200,   201,   202,   203,
   204,   246,   266,   269,   278,   279,   205,   206,   207,   208,
   339,   340,   211,   212,   213,   277,   281,  1326,   214,   282,
   897,   299,   283,   727,   284,   200,   201,   202,   203,   204,
   291,   394,   196,   197,   660,   205,   206,   207,   208,   339,
   340,   211,   212,   213,   285,   672,  1354,   214,   286,   287,
   289,   200,   201,   202,   203,   204,   300,   771,   301,   680,
   681,   205,   206,   207,   208,   339,   340,   211,   212,   213,
   303,   315,   316,   214,   214,   358,   698,   388,   359,   702,
   703,   704,   360,   361,   406,    73,   528,   529,   362,   363,
   364,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,   720,   721,   365,   723,   366,   367,   205,   206,
   207,   208,   339,   340,   211,   212,   213,   738,   736,   737,
   214,   368,   369,  1438,   370,   371,   747,   372,   373,    73,
   528,  1034,   374,   375,   376,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,   200,   201,   202,   203,
   204,   377,   378,   379,   380,   381,   205,   206,   207,   208,
   339,   340,   211,   212,   213,   395,   789,   382,   214,   383,
  1049,   390,   384,   385,   386,   387,   422,   427,   391,   802,
   392,   804,   805,   405,   407,    -1,     8,   458,     9,   814,
   815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
   825,   459,   461,   468,   493,   494,   495,   496,   834,   497,
   835,   498,   499,   500,   501,   502,   837,   530,   531,   396,
   503,   275,   504,   505,    98,   506,   280,   507,   532,   508,
   509,   152,   510,   511,   512,   585,   586,   587,   588,   589,
   590,   591,   592,   593,   594,   595,   596,   513,   960,   304,
   514,   515,   516,   308,   309,   517,   518,   519,   873,   520,
   875,   521,   522,   546,   525,   544,   526,   527,   574,   541,
   878,   530,   531,   542,   547,   883,   884,   548,    98,   549,
   551,   552,   532,   554,   577,   152,   898,   555,   900,   556,
   902,    10,    11,    12,    13,    14,    15,    16,    17,   561,
   200,   201,   202,   203,   204,   578,   610,   611,   918,   919,
   205,   206,   207,   208,   339,   340,   211,   212,   213,   929,
   397,   931,   214,   612,   613,   615,   624,   625,   626,   627,
   628,   941,   629,   630,   631,   632,   655,   670,   948,   949,
   950,   813,   633,   634,   635,   955,   636,   659,   637,   959,
   638,   961,   656,   639,   200,   201,   202,   203,   204,   640,
   641,   973,   642,   643,   205,   206,   207,   208,   339,   340,
   211,   212,   213,   675,   658,   677,   214,   978,   644,   645,
   685,   646,   686,   647,   687,   690,   648,   691,   987,   988,
   989,   990,   991,   992,   993,   994,   995,   996,   997,   998,
   649,   650,   651,   652,   653,   654,   657,   692,    73,    74,
   684,  1010,   734,   693,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,   694,   695,   696,   719,   735,
   661,  1036,  1038,  1040,  1035,  1037,  1039,  1041,  1042,  1043,
  1044,   707,  1046,  1047,   708,   200,   201,   202,   203,   204,
   709,   710,  1052,  1053,  1054,   205,   206,   207,   208,   339,
   340,   211,   212,   213,   711,   712,   713,   214,   714,   715,
   663,  1071,  1072,   716,   724,   717,   718,   728,  1076,   739,
   740,   741,   742,   743,   746,   748,   774,  1082,   749,   752,
   753,   754,   755,   756,   765,  1090,   806,   766,   767,   768,
  1095,   769,   833,  1098,   836,   770,   778,   782,   665,   784,
   786,   787,   828,   838,    25,    26,    27,    28,    29,    30,
    31,    32,  1117,    33,   842,    35,    36,   843,    38,    39,
   845,  1123,  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,
  1132,  1133,  1134,   844,   846,    51,   847,   848,   849,  1140,
    96,    97,   851,   870,   852,   853,   854,    98,   855,    52,
    53,    99,   860,   871,   273,   200,   201,   202,   203,   204,
   856,   857,   858,   859,   861,   205,   206,   207,   208,   339,
   340,   211,   212,   213,   203,   204,  1154,   214,   869,   874,
   862,   205,   206,   207,   208,   339,   340,   211,   212,   213,
   863,   864,   865,   214,   866,   200,   201,   202,   203,   204,
   867,   868,  1178,   876,    58,   205,   206,   207,   208,   339,
   340,   211,   212,   213,   877,   673,   674,   214,   676,   880,
   881,   882,   678,   679,  1196,  1197,  1198,  1199,  1200,  1201,
  1202,  1203,  1204,   200,   201,   202,   203,   204,   885,   886,
  1210,   887,   888,   205,   206,   207,   208,   339,   340,   211,
   212,   213,  1077,  1217,   889,   214,   890,   891,   893,   200,
   201,   202,   203,   204,   899,   901,   905,   924,   920,   205,
   206,   207,   208,   339,   340,   211,   212,   213,   928,   722,
   930,   214,   725,  1246,  1247,  1248,  1249,  1250,  1251,  1252,
  1253,  1254,  1256,  1258,  1260,   933,   934,  1263,   935,   936,
   937,   744,   745,   939,   940,   942,   943,   750,   751,   946,
   944,   945,    -7,    -7,   757,    -7,   764,   952,   953,   956,
   957,   969,   976,   977,  1286,  1287,   958,   979,  1005,  1007,
  1006,  1011,  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,
  1302,  1303,   783,  1305,   785,  1307,  1013,  1014,  1015,  1311,
  1016,  1017,   790,   791,   792,  1019,  1025,   795,   796,   797,
   798,   799,   800,   801,  1020,  1045,  1021,  1026,  1027,  1029,
  1032,  1323,  1324,  1030,  1055,  1056,  1328,  1329,  1330,  1331,
  1332,  1333,    25,    26,    27,    28,    29,    30,    31,    32,
  1073,    33,  1078,    35,    36,  1081,    38,    39,  1099,  1351,
  1083,  1085,  1086,  1087,  1355,  1356,  1357,  1358,  1359,  1360,
  1362,  1364,  1366,    51,  1088,  1089,  1091,  1093,    -7,    -7,
    -7,    -7,    -7,    -7,    -7,    -7,  1094,    52,    53,  1096,
  1097,  1101,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1100,
  1393,  1112,  1395,  1115,     1,     2,  1116,     3,  1122,  1137,
  1138,  1141,  1142,  1143,  1153,  1145,  1146,  1148,  1157,  1150,
  1405,  1406,  1407,  1152,  1158,  1155,  1174,  1161,  1175,  1183,
  1184,  1185,  1187,  1188,  1419,  1420,  1421,  1423,  1425,  1427,
  1189,  1190,    58,  1193,  1209,  1208,  1238,  1239,  1211,  1212,
  1234,  1439,  1440,  1441,  1442,  1213,  1444,  1214,  1446,  1215,
   925,  1216,   927,  1218,  1220,  1241,  1243,   932,   667,  1230,
  1231,  1232,  1244,  1261,  1262,  1264,  1265,  1268,  1460,  1462,
  1464,   451,  1266,  1267,  1285,  1290,   951,  1471,  1269,  1473,
  1291,  1475,    73,   528,  1292,  1309,  1293,  1304,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,  1306,
  1308,    73,    74,  1312,  1478,  1313,  1352,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    73,    74,
  1340,  1339,  1382,  1384,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    73,   872,  1348,  1349,  1392,
  1341,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,  1350,   200,   201,   202,   203,   204,  1394,   668,
  1368,  1396,  1369,   205,   206,   207,   208,   339,   340,   211,
   212,   213,  1397,  1411,  1443,   214,  1415,  1416,  1417,  1074,
  1428,  1445,  1075,   683,  1447,  1448,  1452,  1456,  1457,  1458,
  1472,  1474,  1476,  1479,   530,   531,   706,    63,    64,   682,
    65,    98,  1092,  1194,   923,   532,   705,     0,   152,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   209,   210,   211,   212,   213,     0,   974,
    98,   214,     0,  1121,    99,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    96,    97,     0,   975,     0,     0,     0,    98,     0,     0,
     0,    99,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1102,    96,    97,     0,
     0,     0,     0,     0,    98,     0,     0,     0,    99,     0,
     0,     0,     0,     0,   200,   201,   202,   203,   204,  1104,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,  1176,  1177,   214,     0,   200,   201,
   202,   203,   204,  1106,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,  1195,     0,
   214,   200,   201,   202,   203,   204,  1108,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,   200,   201,   202,   203,   204,     0,
     0,     0,     0,  1109,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,  1233,   214,     0,   200,   201,
   202,   203,   204,     0,     0,     0,     0,  1245,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,   200,   201,   202,   203,   204,  1110,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,   200,   201,   202,   203,   204,     0,
     0,     0,  1289,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,  1111,     0,   214,     0,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,  1139,     0,     0,
   214,   200,   201,   202,   203,   204,     0,     0,     0,     0,
  1327,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,   491,   214,     0,     0,     0,     0,   200,   201,
   202,   203,   204,     0,     0,     0,     0,  1353,   205,   206,
   207,   208,   339,   340,   211,   212,   213,   557,     0,     0,
   214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1383,     0,     0,     0,     0,
   788,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,  1404,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1418,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,    25,    26,    27,    28,
    29,    30,    31,    32,     0,    33,     0,    35,    36,     0,
    38,    39,     0,     0,    -3,    22,     0,     0,    23,     0,
     0,   200,   201,   202,   203,   204,     0,    51,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,    52,    53,   214,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   669,    33,    34,    35,    36,    37,    38,
    39,     0,     0,     0,    40,    41,    42,    43,    44,    45,
     0,    46,    47,    48,    49,    50,    51,     0,     0,     0,
     0,     0,     0,     0,   216,     0,     0,     0,     0,     0,
    52,    53,     0,     0,     0,     0,    58,    54,    55,     0,
    56,    57,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   729,   455,     0,     0,   217,   218,
   219,     0,     0,     0,     0,    58,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,     0,     0,     0,     0,
     0,     0,     0,     0,   230,   231,   232,   233,   234,   235,
   236,   237,   238,   239,     0,   240,   241,   242,   243,   244,
   245,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,   200,   201,   202,   203,   204,     0,
     0,     0,     0,   803,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,   200,   201,   202,
   203,   204,     0,     0,     0,     0,  1033,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,   895,     0,     0,   896,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1050,     0,     0,  1051,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1191,     0,     0,  1192,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
   200,   201,   202,   203,   204,     0,   409,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,   200,   201,   202,   203,   204,     0,   414,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,   200,   201,   202,   203,
   204,     0,   416,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,   200,
   201,   202,   203,   204,     0,   562,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,   200,   201,   202,   203,   204,     0,   566,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,   200,   201,   202,   203,   204,
     0,   567,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,   200,   201,
   202,   203,   204,     0,   701,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,   200,   201,   202,   203,   204,     0,   892,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,   200,   201,   202,   203,   204,     0,
  1113,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,   200,   201,   202,
   203,   204,     0,  1118,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
   200,   201,   202,   203,   204,     0,  1119,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,   200,   201,   202,   203,   204,     0,  1120,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,   200,   201,   202,   203,
   204,     0,  1135,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,   200,
   201,   202,   203,   204,     0,  1136,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,  1235,     0,     0,     0,     0,     0,  1156,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,   200,   201,   202,   203,   204,
     0,  1242,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,   200,   201,
   202,   203,   204,     0,  1338,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,   200,   201,   202,   203,   204,     0,  1367,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,   438,   341,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   341,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   408,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   410,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   411,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   413,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   417,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   418,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   423,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   460,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   463,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   469,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   470,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   471,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   472,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   473,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   474,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   475,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   476,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   477,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   478,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   480,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   481,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   482,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   483,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   484,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   485,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   550,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   553,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   563,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   564,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   568,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   569,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   570,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   571,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   572,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   614,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   617,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   671,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   730,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   731,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,   732,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,   733,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,   829,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
   894,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,   926,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,  1018,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,  1022,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,  1024,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
  1147,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,  1149,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,  1151,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,  1171,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,  1172,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
  1173,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,  1320,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,  1321,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,  1322,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,  1401,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,     0,
  1402,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,     0,  1403,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,     0,  1449,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,     0,  1450,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,     0,  1451,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,   438,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,   439,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,   479,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
   486,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,   487,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,   492,     0,     0,   488,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,   580,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,   581,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,   582,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,   699,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,   700,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,   826,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,   827,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,   839,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
   840,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,   879,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,   906,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,   907,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,   908,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,   909,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,   910,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,   911,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,   912,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,   913,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
   914,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,   915,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,   916,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,   917,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,   971,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,   999,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1000,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1012,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1023,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1028,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1031,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1048,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1059,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1060,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1061,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1062,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1063,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1064,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1065,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1066,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1067,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1068,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1069,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1070,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1114,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1144,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1162,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1163,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1164,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1165,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1166,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1167,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1168,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1169,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1170,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1221,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1222,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1223,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1224,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1225,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1226,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1227,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1228,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1229,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1270,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1271,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1272,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1273,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1274,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1275,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1276,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1277,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1278,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1310,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1314,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1315,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1316,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1317,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1318,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1319,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1337,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1342,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1343,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1344,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1345,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1346,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1347,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1370,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1371,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1372,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1373,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,     0,  1374,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,     0,     0,     0,  1375,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,   205,   206,   207,   208,   339,
   340,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     0,  1398,   200,   201,   202,   203,   204,     0,     0,     0,
     0,     0,   205,   206,   207,   208,   339,   340,   211,   212,
   213,     0,     0,     0,   214,     0,     0,     0,  1399,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   339,   340,   211,   212,   213,     0,     0,
     0,   214,     0,     0,     0,  1400,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,   205,   206,   207,   208,
   339,   340,   211,   212,   213,     0,     0,     0,   214,     0,
     0,     0,  1412,   200,   201,   202,   203,   204,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   339,   340,   211,
   212,   213,     0,     0,     0,   214,     0,     0,     0,  1413,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
   205,   206,   207,   208,   339,   340,   211,   212,   213,     0,
     0,     0,   214,     0,     0,     0,  1414,   200,   201,   202,
   203,   204,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   339,   340,   211,   212,   213,     0,     0,     0,   214,
     0,     0,     0,  1429,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,   205,   206,   207,   208,   339,   340,
   211,   212,   213,     0,     0,     0,   214,     0,     0,     0,
  1430,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214,     0,     0,  1325,  1431,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   339,   340,   211,   212,   213,     0,     0,     0,
   214,   200,   201,   202,   203,   204,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   339,   340,   211,   212,   213,
     0,     0,     0,   214
};

static const short yycheck[] = {     7,
   110,   297,   985,     6,     6,     6,    56,     7,     6,    35,
    58,     4,   920,    79,     4,    63,    56,     4,     4,   136,
    58,    58,     6,     4,     4,    63,    63,   155,   156,     5,
    41,    42,   155,   156,   155,   156,   167,   155,   156,   167,
   171,   846,   170,     6,   167,     7,   167,   170,   163,   170,
   855,   169,   155,   156,   169,   155,   156,   862,    42,   155,
   156,   155,   156,     6,     6,     6,   169,     6,    61,   169,
   163,    61,   168,   167,    61,    61,   169,     6,     7,     6,
   155,   156,   155,   156,   166,     4,     6,   169,    96,    97,
    98,    99,   100,   168,   167,    82,   164,   165,     7,     6,
   166,   166,     7,     6,  1012,   113,   114,   115,   116,   117,
    34,    35,   166,    37,     6,   123,   124,   125,   126,   169,
   128,   129,   170,   131,   132,   133,   166,   135,     6,   169,
    31,     6,   170,    34,   155,   156,   147,     6,   166,   150,
   166,   155,   156,   151,   152,   156,   167,   147,   148,   149,
   150,   167,   168,   167,   155,   156,   166,   155,   156,   169,
   168,   166,   170,   171,   164,   165,   169,   169,   176,   177,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   169,   169,
   166,   166,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,  1013,     3,
     4,  1194,  1017,   155,   156,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   155,   156,   147,   148,
   149,   150,   147,   148,   149,   150,    39,   166,   155,   156,
   169,   167,   155,   156,   170,   164,   165,    35,   266,   164,
   165,   269,   171,   155,   156,   273,   157,   158,   159,   277,
   278,   279,   163,   281,   282,   283,   284,   285,   286,   287,
   155,   156,   167,   294,   295,   170,   155,   156,   155,   156,
   166,   299,   300,   301,   166,   306,   166,   155,   156,    31,
   167,    35,    34,    35,   312,    37,    48,    49,   316,   167,
    50,    51,    52,    53,    35,    55,     6,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    37,
    31,   339,   340,    34,    35,   169,  1141,  1142,  1143,  1144,
   169,   167,   167,  1148,   170,   170,   169,   141,   142,   143,
   144,   145,   167,     8,     5,   170,    35,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   169,   167,   162,   163,
   170,   167,   166,     6,   170,   169,   167,   167,   168,   170,
     6,    91,    92,    93,    94,    95,     5,   398,   399,   400,
   398,   399,   400,   401,   402,   167,   166,   405,   170,   407,
   166,   155,   156,   157,   158,   159,  1211,  1212,     8,   163,
  1215,     6,   167,     5,   422,   170,     5,   167,    35,   427,
   170,    47,   167,   170,   435,   170,   167,   164,   165,   170,
   438,   439,   167,   160,     6,   170,   163,   166,   171,   447,
   166,   166,   166,   166,   166,     6,   454,   166,   166,   166,
   166,   141,   142,   143,   144,   145,   464,   166,     6,  1264,
   468,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   166,   479,   166,   163,   166,   166,     5,   166,   486,   487,
   488,   166,   166,   491,   166,   166,   141,   142,   143,   144,
   145,   166,   166,   166,   166,   166,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   169,   169,  1312,   163,   169,
   806,   169,   166,   168,   166,   141,   142,   143,   144,   145,
   531,     6,   530,   531,   532,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   166,   546,  1341,   163,   166,   166,
   171,   141,   142,   143,   144,   145,   169,   657,   169,   557,
   558,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     6,     6,   166,   163,   163,   166,   574,     5,   166,   580,
   581,   582,   166,   166,   171,     3,     4,     5,   166,   166,
   166,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   610,   611,   166,   613,   166,   166,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   628,   626,   627,
   163,   166,   166,  1428,   166,   166,   637,   166,   166,     3,
     4,     5,   166,   166,   166,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   141,   142,   143,   144,
   145,   166,   166,   166,   166,   166,   151,   152,   153,   154,
   155,   156,   157,   158,   159,     6,   684,   166,   163,   166,
   976,   167,   166,   166,   166,   166,     7,     7,   168,   697,
   167,   699,   700,   172,   167,     0,     1,     7,     3,   707,
   708,   709,   710,   711,   712,   713,   714,   715,   716,   717,
   718,     7,    80,   172,     5,     5,     5,     5,   726,     5,
   728,     5,     5,     5,     5,     5,   734,   155,   156,     6,
     5,   134,     5,     5,   162,     5,   139,     5,   166,     5,
     5,   169,     5,     5,     5,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,     5,   868,   162,
     5,     5,   124,   166,   167,     5,     5,     5,   776,     5,
   781,     3,     5,     7,     5,     4,     6,     5,   172,     6,
   788,   155,   156,     6,     6,   793,   794,     7,   162,     7,
     7,     6,   166,     6,   170,   169,   807,     7,   809,     7,
   811,   106,   107,   108,   109,   110,   111,   112,   113,     7,
   141,   142,   143,   144,   145,   170,   169,   169,   826,   827,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   837,
     6,   839,   163,     7,   166,     7,   138,   167,   167,   167,
   167,   849,   167,   167,   167,   167,     5,     7,   856,   857,
   858,   170,   167,   167,   167,   863,   167,     6,   167,   867,
   167,   869,   168,   167,   141,   142,   143,   144,   145,   167,
   167,   879,   167,   167,   151,   152,   153,   154,   155,   156,
   157,   158,   159,     7,   171,     7,   163,   895,   167,   167,
     7,   167,     7,   167,     7,     7,   167,     7,   906,   907,
   908,   909,   910,   911,   912,   913,   914,   915,   916,   917,
   167,   167,   167,   167,   167,   167,   167,     7,     3,     4,
   169,   929,   134,     7,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,     7,     7,     7,     6,     3,
     6,   962,   963,   964,   962,   963,   964,   965,   966,   967,
   968,   166,   970,   971,   166,   141,   142,   143,   144,   145,
   166,   166,   980,   981,   982,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   166,   166,   166,   163,   166,   166,
     6,   999,  1000,   166,     7,   166,   166,     7,  1006,     3,
     3,   157,     3,     3,     3,     3,   171,  1015,     3,     3,
     3,     3,     3,     3,     3,  1023,   169,     5,     5,     3,
  1028,     3,    81,  1031,   171,     6,     6,     6,     6,     6,
     6,     6,     6,   167,    31,    32,    33,    34,    35,    36,
    37,    38,  1050,    40,   167,    42,    43,   168,    45,    46,
   168,  1059,  1060,  1061,  1062,  1063,  1064,  1065,  1066,  1067,
  1068,  1069,  1070,   167,   167,    62,   168,   167,   167,  1077,
   155,   156,   167,     4,   168,   168,   167,   162,   167,    76,
    77,   166,   168,   171,   169,   141,   142,   143,   144,   145,
   167,   167,   167,   167,   167,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   144,   145,  1114,   163,   172,     6,
   167,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   167,   167,   167,   163,   168,   141,   142,   143,   144,   145,
   167,   167,  1140,     6,   131,   151,   152,   153,   154,   155,
   156,   157,   158,   159,     6,   548,   549,   163,   551,     6,
     6,     6,   555,   556,  1162,  1163,  1164,  1165,  1166,  1167,
  1168,  1169,  1170,   141,   142,   143,   144,   145,     6,     6,
  1178,     6,     6,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   134,  1191,     6,   163,     6,     6,   171,   141,
   142,   143,   144,   145,     6,     6,     6,    81,     7,   151,
   152,   153,   154,   155,   156,   157,   158,   159,     4,   612,
     3,   163,   615,  1221,  1222,  1223,  1224,  1225,  1226,  1227,
  1228,  1229,  1230,  1231,  1232,     6,     3,  1235,     6,   157,
     6,   634,   635,     6,     3,     6,     3,   640,   641,     3,
     6,     6,     0,     1,   647,     3,   649,     6,     3,     3,
     3,    82,   169,     4,  1262,  1263,     6,   170,   169,     6,
    78,   168,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,
  1278,  1279,   675,  1281,   677,  1283,   167,   167,   167,  1287,
   168,   167,   685,   686,   687,   167,   167,   690,   691,   692,
   693,   694,   695,   696,   168,   171,   168,   168,   168,   167,
   167,  1309,  1310,   168,     6,   169,  1314,  1315,  1316,  1317,
  1318,  1319,    31,    32,    33,    34,    35,    36,    37,    38,
    81,    40,     6,    42,    43,     3,    45,    46,     5,  1337,
     6,     6,     3,     6,  1342,  1343,  1344,  1345,  1346,  1347,
  1348,  1349,  1350,    62,     6,     6,     6,     6,   106,   107,
   108,   109,   110,   111,   112,   113,     6,    76,    77,     3,
     6,     6,  1370,  1371,  1372,  1373,  1374,  1375,  1376,   171,
  1378,     4,  1380,     5,   132,   133,   170,   135,     6,   169,
   167,   167,   167,   167,     4,   168,   168,   167,     6,   168,
  1398,  1399,  1400,   167,     6,   167,     6,   167,     6,     6,
     6,     6,     6,     6,  1412,  1413,  1414,  1415,  1416,  1417,
     6,     5,   131,     5,   170,   167,     6,     6,   167,   167,
    78,  1429,  1430,  1431,  1432,   168,  1434,   168,  1436,   167,
   833,   167,   835,   167,   167,     5,     5,   840,     6,   169,
   169,   169,     6,   170,   169,   167,   167,   170,  1456,  1457,
  1458,   170,   168,   168,    78,     6,   859,  1465,   170,  1467,
     6,  1469,     3,     4,     6,   169,     6,     6,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,     6,
     6,     3,     4,   167,     0,   167,     6,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,     3,     4,
   167,   140,     6,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,     3,     4,   169,   169,     6,
   167,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   169,   141,   142,   143,   144,   145,     6,     6,
   167,     6,   168,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   167,   167,     6,   163,   169,   169,   169,  1002,
   167,     6,  1005,     6,     6,   168,     6,   169,   169,   169,
     6,     6,     6,     0,   155,   156,   584,     6,     6,   558,
     6,   162,  1025,  1160,   831,   166,     6,    -1,   169,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,     6,
   162,   163,    -1,  1056,   166,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   155,   156,    -1,     6,    -1,    -1,    -1,   162,    -1,    -1,
    -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     6,   155,   156,    -1,
    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,   166,    -1,
    -1,    -1,    -1,    -1,   141,   142,   143,   144,   145,     6,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,  1137,  1138,   163,    -1,   141,   142,
   143,   144,   145,     6,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,  1161,    -1,
   163,   141,   142,   143,   144,   145,     6,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,     6,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,  1208,   163,    -1,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,  1220,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,   141,   142,   143,   144,   145,     6,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,
    -1,    -1,  1265,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,     6,    -1,   163,    -1,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,     6,    -1,    -1,
   163,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
  1313,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,     8,   163,    -1,    -1,    -1,    -1,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,  1340,   151,   152,
   153,   154,   155,   156,   157,   158,   159,     8,    -1,    -1,
   163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1368,    -1,    -1,    -1,    -1,
     8,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,  1397,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1411,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    31,    32,    33,    34,
    35,    36,    37,    38,    -1,    40,    -1,    42,    43,    -1,
    45,    46,    -1,    -1,     0,     1,    -1,    -1,     4,    -1,
    -1,   141,   142,   143,   144,   145,    -1,    62,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    76,    77,   163,    30,    31,    32,    33,    34,    35,
    36,    37,    38,   173,    40,    41,    42,    43,    44,    45,
    46,    -1,    -1,    -1,    50,    51,    52,    53,    54,    55,
    -1,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,   131,    83,    84,    -1,
    86,    87,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   173,   170,    -1,    -1,    88,    89,
    90,    -1,    -1,    -1,    -1,   131,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,   173,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,   173,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,    -1,    -1,   170,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,    -1,    -1,   170,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,    -1,    -1,   170,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
   141,   142,   143,   144,   145,    -1,   170,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,   170,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,   141,   142,   143,   144,
   145,    -1,   170,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,   141,
   142,   143,   144,   145,    -1,   170,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,   141,   142,   143,   144,   145,    -1,   170,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,
    -1,   170,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,   141,   142,
   143,   144,   145,    -1,   170,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,   141,   142,   143,   144,   145,    -1,   170,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,
   170,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,   141,   142,   143,
   144,   145,    -1,   170,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
   141,   142,   143,   144,   145,    -1,   170,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,   141,   142,   143,   144,   145,    -1,   170,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,   141,   142,   143,   144,
   145,    -1,   170,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,   141,
   142,   143,   144,   145,    -1,   170,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,   134,    -1,    -1,    -1,    -1,    -1,   170,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,   141,   142,   143,   144,   145,
    -1,   170,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,   141,   142,
   143,   144,   145,    -1,   170,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,   141,   142,   143,   144,   145,    -1,   170,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
   168,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   168,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,    -1,   168,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,    -1,   168,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,    -1,   168,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,   137,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,
   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,
    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   154,   155,   156,   157,   158,   159,    -1,    -1,
    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,   144,
   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
    -1,    -1,   163,    -1,    -1,    -1,   167,   141,   142,   143,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,   163,
    -1,    -1,    -1,   167,   141,   142,   143,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,
   157,   158,   159,    -1,    -1,    -1,   163,    -1,    -1,    -1,
   167,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163,    -1,    -1,   139,   167,   141,   142,
   143,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,    -1,    -1,    -1,
   163,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
    -1,    -1,    -1,   163
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 150 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 164 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 171 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 188 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 189 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 190 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 191 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 196 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 201 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 212 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 215 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 219 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 225 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 231 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 238 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 244 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 248 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 252 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 259 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 263 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 268 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 272 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 276 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 280 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 284 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 288 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 292 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 296 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 308 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 312 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 316 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 320 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 324 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 329 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 359 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 362 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 368 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 369 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 379 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 382 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 387 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 398 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 402 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 409 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 428 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 430 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 435 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 440 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 447 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 449 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 454 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 459 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 466 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 468 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 473 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 478 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 485 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 487 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 493 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 499 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 506 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 508 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 514 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 520 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 527 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 529 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 535 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 541 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 548 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 550 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 557 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 566 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 573 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 575 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 582 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 591 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 598 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 600 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 607 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 616 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 623 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 625 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 633 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 642 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 649 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 651 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 659 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 668 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 675 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 677 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 685 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 694 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 710 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 716 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 724 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 732 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 740 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 748 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 756 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 767 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 780 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 140:
#line 798 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 815 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 836 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 853 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 874 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 891 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 912 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 929 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 950 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 967 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 988 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1005 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1026 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1043 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1066 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1091 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1120 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1145 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1174 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1199 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1230 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1254 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1261 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1267 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 164:
#line 1286 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 165:
#line 1297 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 166:
#line 1305 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1311 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1317 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 169:
#line 1336 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1342 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 171:
#line 1359 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 172:
#line 1365 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1371 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1377 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1383 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1389 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 177:
#line 1408 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 178:
#line 1420 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1426 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 180:
#line 1445 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 181:
#line 1468 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 182:
#line 1476 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 183:
#line 1480 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1486 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1492 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 186:
#line 1504 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 187:
#line 1510 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 188:
#line 1516 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1529 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1534 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1539 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1544 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1551 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 194:
#line 1552 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1553 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1558 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 197:
#line 1562 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 198:
#line 1574 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 199:
#line 1592 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 200:
#line 1607 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 201:
#line 1635 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 202:
#line 1665 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 203:
#line 1669 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 204:
#line 1683 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 205:
#line 1696 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 206:
#line 1709 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 207:
#line 1748 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 208:
#line 1753 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 209:
#line 1759 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 210:
#line 1763 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 211:
#line 1767 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 212:
#line 1771 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 213:
#line 1775 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 214:
#line 1780 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 215:
#line 1788 "Gmsh.y"
{
    ;
    break;}
case 216:
#line 1791 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 1797 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 218:
#line 1814 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 219:
#line 1825 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 220:
#line 1842 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 221:
#line 1859 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 222:
#line 1876 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 223:
#line 1897 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 224:
#line 1917 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 225:
#line 1937 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 226:
#line 1954 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 227:
#line 1979 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 228:
#line 1991 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 229:
#line 1992 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 230:
#line 1993 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 231:
#line 1994 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 232:
#line 1995 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 233:
#line 1999 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 234:
#line 2000 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 235:
#line 2001 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 236:
#line 2002 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 237:
#line 2003 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 238:
#line 2004 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 239:
#line 2005 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 240:
#line 2006 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 241:
#line 2007 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 242:
#line 2008 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 243:
#line 2009 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 244:
#line 2010 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 245:
#line 2011 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 246:
#line 2012 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 247:
#line 2013 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 248:
#line 2014 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 249:
#line 2015 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 250:
#line 2016 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 251:
#line 2017 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 252:
#line 2018 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 253:
#line 2019 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2020 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 255:
#line 2021 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 256:
#line 2022 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2023 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 258:
#line 2024 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2025 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2026 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2027 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2028 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2029 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 264:
#line 2030 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2031 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2032 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2033 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2034 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 269:
#line 2035 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2036 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 271:
#line 2037 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 272:
#line 2038 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 273:
#line 2042 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 274:
#line 2043 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 275:
#line 2045 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 276:
#line 2054 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 277:
#line 2071 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 278:
#line 2092 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 279:
#line 2109 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 280:
#line 2130 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 281:
#line 2147 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 282:
#line 2170 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 283:
#line 2176 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 284:
#line 2190 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 285:
#line 2194 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 286:
#line 2198 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 287:
#line 2202 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 288:
#line 2206 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 289:
#line 2212 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 290:
#line 2216 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 291:
#line 2220 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 292:
#line 2224 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 293:
#line 2228 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 294:
#line 2254 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 295:
#line 2287 "Gmsh.y"
{
    ;
    break;}
case 296:
#line 2290 "Gmsh.y"
{
    ;
    break;}
case 297:
#line 2296 "Gmsh.y"
{
    ;
    break;}
case 298:
#line 2299 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2305 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2308 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 301:
#line 2312 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 302:
#line 2319 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 303:
#line 2324 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 304:
#line 2331 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2334 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 306:
#line 2340 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 307:
#line 2348 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 308:
#line 2353 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 309:
#line 2362 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 310:
#line 2366 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 311:
#line 2377 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 312:
#line 2381 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 313:
#line 2385 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 314:
#line 2390 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 315:
#line 2395 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2408 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

