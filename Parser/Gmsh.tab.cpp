
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipsis	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTransfinite	305
#define	tComplex	306
#define	tPhysical	307
#define	tUsing	308
#define	tBump	309
#define	tProgression	310
#define	tPlugin	311
#define	tRotate	312
#define	tTranslate	313
#define	tSymmetry	314
#define	tDilate	315
#define	tExtrude	316
#define	tDuplicata	317
#define	tLoop	318
#define	tRecombine	319
#define	tDelete	320
#define	tCoherence	321
#define	tIntersect	322
#define	tAttractor	323
#define	tLayers	324
#define	tScalarTetrahedron	325
#define	tVectorTetrahedron	326
#define	tTensorTetrahedron	327
#define	tScalarTriangle	328
#define	tVectorTriangle	329
#define	tTensorTriangle	330
#define	tScalarLine	331
#define	tVectorLine	332
#define	tTensorLine	333
#define	tScalarPoint	334
#define	tVectorPoint	335
#define	tTensorPoint	336
#define	tText2D	337
#define	tText3D	338
#define	tBSpline	339
#define	tBezier	340
#define	tNurbs	341
#define	tOrder	342
#define	tWith	343
#define	tBounds	344
#define	tKnots	345
#define	tColor	346
#define	tColorTable	347
#define	tFor	348
#define	tIn	349
#define	tEndFor	350
#define	tIf	351
#define	tEndIf	352
#define	tExit	353
#define	tReturn	354
#define	tCall	355
#define	tFunction	356
#define	tMesh	357
#define	tB_SPLINE_SURFACE_WITH_KNOTS	358
#define	tB_SPLINE_CURVE_WITH_KNOTS	359
#define	tCARTESIAN_POINT	360
#define	tTRUE	361
#define	tFALSE	362
#define	tUNSPECIFIED	363
#define	tU	364
#define	tV	365
#define	tEDGE_CURVE	366
#define	tVERTEX_POINT	367
#define	tORIENTED_EDGE	368
#define	tPLANE	369
#define	tFACE_OUTER_BOUND	370
#define	tEDGE_LOOP	371
#define	tADVANCED_FACE	372
#define	tVECTOR	373
#define	tDIRECTION	374
#define	tAXIS2_PLACEMENT_3D	375
#define	tISO	376
#define	tENDISO	377
#define	tENDSEC	378
#define	tDATA	379
#define	tHEADER	380
#define	tFILE_DESCRIPTION	381
#define	tFILE_SCHEMA	382
#define	tFILE_NAME	383
#define	tMANIFOLD_SOLID_BREP	384
#define	tCLOSED_SHELL	385
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	386
#define	tFACE_BOUND	387
#define	tCYLINDRICAL_SURFACE	388
#define	tCONICAL_SURFACE	389
#define	tCIRCLE	390
#define	tTRIMMED_CURVE	391
#define	tGEOMETRIC_SET	392
#define	tCOMPOSITE_CURVE_SEGMENT	393
#define	tCONTINUOUS	394
#define	tCOMPOSITE_CURVE	395
#define	tTOROIDAL_SURFACE	396
#define	tPRODUCT_DEFINITION	397
#define	tPRODUCT_DEFINITION_SHAPE	398
#define	tSHAPE_DEFINITION_REPRESENTATION	399
#define	tELLIPSE	400
#define	tTrimmed	401
#define	tSolid	402
#define	tEndSolid	403
#define	tVertex	404
#define	tFacet	405
#define	tNormal	406
#define	tOuter	407
#define	tLoopSTL	408
#define	tEndLoop	409
#define	tEndFacet	410
#define	tAFFECTPLUS	411
#define	tAFFECTMINUS	412
#define	tAFFECTTIMES	413
#define	tAFFECTDIVIDE	414
#define	tOR	415
#define	tAND	416
#define	tEQUAL	417
#define	tNOTEQUAL	418
#define	tAPPROXEQUAL	419
#define	tLESSOREQUAL	420
#define	tGREATEROREQUAL	421
#define	tCROSSPRODUCT	422
#define	tPLUSPLUS	423
#define	tMINUSMINUS	424
#define	UNARYPREC	425

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.123 2001-11-12 08:21:17 geuzaine Exp $

#include <stdarg.h>
#ifndef _NOPLUGIN
#include "PluginManager.h"
#endif
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][256];
static char           tmpstring[256];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);
static Post_View      *View;

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);

#line 71 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1697
#define	YYFLAG		-32768
#define	YYNTBASE	190

#define YYTRANSLATE(x) ((unsigned)(x) <= 425 ? yytranslate[x] : 283)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   177,     2,     2,     2,   175,     2,     2,   182,
   183,   173,   171,   187,   172,   186,   174,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   167,
     2,   169,   161,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   184,     2,   185,   181,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   188,     2,   189,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   162,   163,   164,   165,   166,   168,
   170,   176,   178,   179,   180
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   595,   598,   600,   604,   605,   619,
   621,   625,   626,   640,   642,   646,   647,   661,   663,   667,
   668,   688,   690,   694,   695,   715,   717,   721,   722,   742,
   744,   748,   749,   775,   777,   781,   782,   808,   810,   814,
   815,   841,   843,   847,   848,   880,   882,   886,   887,   919,
   921,   925,   926,   958,   960,   964,   965,   979,   981,   985,
   986,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,  1021,
  1029,  1039,  1046,  1050,  1057,  1064,  1074,  1081,  1091,  1097,
  1106,  1115,  1127,  1134,  1144,  1154,  1164,  1172,  1181,  1194,
  1201,  1207,  1215,  1223,  1236,  1244,  1252,  1262,  1280,  1289,
  1298,  1306,  1314,  1326,  1332,  1341,  1354,  1363,  1386,  1407,
  1416,  1425,  1431,  1440,  1448,  1457,  1463,  1475,  1481,  1491,
  1493,  1495,  1497,  1498,  1501,  1506,  1511,  1518,  1522,  1526,
  1530,  1538,  1541,  1544,  1551,  1560,  1569,  1580,  1582,  1585,
  1587,  1591,  1596,  1598,  1607,  1620,  1635,  1644,  1657,  1672,
  1673,  1686,  1687,  1704,  1705,  1724,  1733,  1746,  1761,  1762,
  1775,  1776,  1793,  1794,  1813,  1815,  1818,  1828,  1836,  1839,
  1846,  1856,  1866,  1875,  1884,  1893,  1900,  1905,  1908,  1911,
  1913,  1915,  1917,  1919,  1921,  1923,  1927,  1930,  1933,  1936,
  1940,  1944,  1948,  1952,  1956,  1960,  1964,  1968,  1972,  1976,
  1980,  1984,  1988,  1992,  1998,  2003,  2008,  2013,  2018,  2023,
  2028,  2033,  2038,  2043,  2048,  2055,  2060,  2065,  2070,  2075,
  2080,  2085,  2092,  2099,  2106,  2111,  2116,  2121,  2126,  2131,
  2136,  2141,  2146,  2151,  2156,  2161,  2168,  2173,  2178,  2183,
  2188,  2193,  2198,  2205,  2212,  2219,  2224,  2226,  2228,  2230,
  2232,  2234,  2239,  2242,  2248,  2252,  2259,  2264,  2272,  2274,
  2277,  2280,  2284,  2288,  2300,  2310,  2318,  2326,  2327,  2331,
  2333,  2337,  2338,  2342,  2346,  2348,  2352,  2354,  2356,  2360,
  2365,  2369,  2375,  2379,  2384,  2391,  2399,  2401,  2403,  2407,
  2411,  2421,  2429,  2431,  2437,  2441,  2448,  2450,  2454,  2456,
  2463,  2468,  2473,  2480,  2487
};

static const short yyrhs[] = {   193,
     0,   192,     0,   198,     0,     1,     6,     0,     3,     0,
   172,     3,     0,   148,     0,   151,   152,   191,   191,   191,
   153,   154,   150,   191,   191,   191,   150,   191,   191,   191,
   150,   191,   191,   191,   155,   156,     0,   149,     0,     0,
   193,   194,     0,   195,     0,   197,     0,   196,     0,   122,
     6,     0,   123,     6,     0,   125,     6,     0,   124,     6,
     0,   126,     6,     0,   127,   182,   272,   187,     5,   183,
     6,     0,   128,   182,   272,   183,     6,     0,   129,   182,
     5,   187,     5,   187,   272,   187,   272,   187,     5,   187,
     5,   187,     5,   183,     6,     0,     3,     7,   106,   182,
     5,   187,   270,   183,     6,     0,     3,     7,   105,   182,
     5,   187,   268,   187,   276,   187,   267,   187,   267,   187,
   267,   187,   276,   187,   276,   187,   267,   183,     6,     0,
     3,     7,   104,   182,     5,   187,   268,   187,   268,   187,
   274,   187,   267,   187,   267,   187,   267,   187,   267,   187,
   276,   187,   276,   187,   276,   187,   276,   187,   267,   183,
     6,     0,     3,     7,   112,   182,     5,   187,     3,   187,
     3,   187,     3,   187,   267,   183,     6,     0,     3,     7,
   116,   182,     5,   187,     3,   187,   267,   183,     6,     0,
     3,     7,   133,   182,     5,   187,     3,   187,   267,   183,
     6,     0,     3,     7,   114,   182,     5,   187,   173,   187,
   173,   187,   268,   187,   267,   183,     6,     0,     3,     7,
   117,   182,     5,   187,   276,   183,     6,     0,     3,     7,
   118,   182,     5,   187,   276,   187,     3,   187,   267,   183,
     6,     0,     3,     7,   113,   182,     5,   187,     3,   183,
     6,     0,     3,     7,   119,   182,     5,   187,     3,   187,
   268,   183,     6,     0,     3,     7,   121,   182,     5,   187,
     3,   187,     3,   187,     3,   183,     6,     0,     3,     7,
   120,   182,     5,   187,   270,   183,     6,     0,     3,     7,
   115,   182,     5,   187,     3,   183,     6,     0,     3,     7,
    41,   182,     5,   187,     3,   187,     3,   183,     6,     0,
     3,     7,   131,   182,     5,   187,   276,   183,     6,     0,
     3,     7,   132,   182,     5,   187,   276,   187,     3,   183,
     6,     0,     3,     7,   130,   182,     5,   187,     3,   183,
     6,     0,     3,     7,   134,   182,     5,   187,     3,   187,
   268,   183,     6,     0,     3,     7,   135,   182,     5,   187,
     3,   187,   268,   187,   268,   183,     6,     0,     3,     7,
   142,   182,     5,   187,     3,   187,   268,   187,   268,   183,
     6,     0,     3,     7,   136,   182,     5,   187,     3,   187,
   268,   183,     6,     0,     3,     7,   146,   182,     5,   187,
     3,   187,   268,   187,   268,   183,     6,     0,     3,     7,
   137,   182,     5,   187,     3,   187,   276,   187,   276,   187,
   267,   187,   267,   183,     6,     0,     3,     7,   138,   182,
     5,   187,   276,   183,     6,     0,     3,     7,   139,   182,
   140,   187,   267,   187,     3,   183,     6,     0,     3,     7,
   141,   182,     5,   187,   276,   187,   267,   183,     6,     0,
     3,     7,   143,   182,     5,   187,     5,   187,     3,   187,
     3,   183,     6,     0,     3,     7,   144,   182,     5,   187,
     5,   187,     3,   183,     6,     0,     3,     7,   145,   182,
     3,   187,     3,   183,     6,     0,     0,   198,   199,     0,
   201,     0,   200,     0,   247,     0,   248,     0,   249,     0,
   252,     0,   253,     0,   256,     0,   265,     0,   266,     0,
   255,     0,   254,     0,    33,   182,     5,   183,     6,     0,
    33,   182,     5,   187,   278,   183,     6,     0,     4,     5,
   188,   202,   189,     6,     0,     4,     5,     4,   270,   188,
   202,   189,     6,     0,     0,   202,   204,     0,   202,   207,
     0,   202,   210,     0,   202,   213,     0,   202,   216,     0,
   202,   219,     0,   202,   222,     0,   202,   225,     0,   202,
   228,     0,   202,   231,     0,   202,   234,     0,   202,   237,
     0,   202,   240,     0,   202,   243,     0,   268,     0,   203,
   187,   268,     0,     0,    80,   182,   268,   187,   268,   187,
   268,   183,   205,   188,   203,   189,     6,     0,   268,     0,
   206,   187,   268,     0,     0,    81,   182,   268,   187,   268,
   187,   268,   183,   208,   188,   206,   189,     6,     0,   268,
     0,   209,   187,   268,     0,     0,    82,   182,   268,   187,
   268,   187,   268,   183,   211,   188,   209,   189,     6,     0,
   268,     0,   212,   187,   268,     0,     0,    77,   182,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   183,   214,   188,   212,   189,     6,     0,   268,     0,   215,
   187,   268,     0,     0,    78,   182,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   183,   217,   188,
   215,   189,     6,     0,   268,     0,   218,   187,   268,     0,
     0,    79,   182,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   183,   220,   188,   218,   189,     6,
     0,   268,     0,   221,   187,   268,     0,     0,    74,   182,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   183,   223,   188,
   221,   189,     6,     0,   268,     0,   224,   187,   268,     0,
     0,    75,   182,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   183,   226,   188,   224,   189,     6,     0,   268,     0,   227,
   187,   268,     0,     0,    76,   182,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   187,   268,   183,   229,   188,   227,   189,     6,     0,
   268,     0,   230,   187,   268,     0,     0,    71,   182,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   183,   232,   188,   230,   189,     6,     0,   268,
     0,   233,   187,   268,     0,     0,    72,   182,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   183,   235,   188,   233,   189,     6,     0,   268,     0,
   236,   187,   268,     0,     0,    73,   182,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   183,   238,   188,   236,   189,     6,     0,   282,     0,   239,
   187,   282,     0,     0,    83,   182,   268,   187,   268,   187,
   268,   183,   241,   188,   239,   189,     6,     0,   282,     0,
   242,   187,   282,     0,     0,    84,   182,   268,   187,   268,
   187,   268,   187,   268,   183,   244,   188,   242,   189,     6,
     0,     7,     0,   157,     0,   158,     0,   159,     0,   160,
     0,   178,     0,   179,     0,     4,   245,   268,     6,     0,
     4,   184,   268,   185,   245,   268,     6,     0,     4,   184,
   188,   278,   189,   185,   245,   276,     6,     0,     4,   184,
   185,     7,   276,     6,     0,     4,   246,     6,     0,     4,
   184,   268,   185,   246,     6,     0,     4,   186,     4,     7,
   282,     6,     0,     4,   184,   268,   185,   186,     4,     7,
   282,     6,     0,     4,   186,     4,   245,   268,     6,     0,
     4,   184,   268,   185,   186,     4,   245,   268,     6,     0,
     4,   186,     4,   246,     6,     0,     4,   184,   268,   185,
   186,     4,   246,     6,     0,     4,   186,    92,   186,     4,
     7,   279,     6,     0,     4,   184,   268,   185,   186,    92,
   186,     4,     7,   279,     6,     0,     4,   186,    93,     7,
   280,     6,     0,     4,   184,   268,   185,   186,    93,     7,
   280,     6,     0,    57,   182,     4,   183,   186,     4,     7,
   268,     6,     0,    57,   182,     4,   183,   186,     4,     7,
   282,     6,     0,    38,   182,   268,   183,     7,   270,     6,
     0,    53,    38,   182,   268,   183,     7,   276,     6,     0,
    69,    38,   276,     7,   188,   268,   187,   268,   187,   268,
   189,     6,     0,    45,    46,   276,     7,   268,     6,     0,
    38,   188,   268,   189,     6,     0,    41,   182,   268,   183,
     7,   276,     6,     0,    43,   182,   268,   183,     7,   276,
     6,     0,    69,    41,   276,     7,   188,   268,   187,   268,
   187,   268,   189,     6,     0,    39,   182,   268,   183,     7,
   276,     6,     0,    40,   182,   268,   183,     7,   276,     6,
     0,    39,   182,   268,   183,     7,   276,    49,   270,     6,
     0,    47,   182,   268,   183,     7,   188,   268,   187,   268,
   187,     5,   187,     5,   187,     5,   189,     6,     0,    53,
    41,   182,   268,   183,     7,   276,     6,     0,    41,    64,
   182,   268,   183,     7,   276,     6,     0,    85,   182,   268,
   183,     7,   276,     6,     0,    86,   182,   268,   183,     7,
   276,     6,     0,    87,   182,   268,   183,     7,   276,    91,
   276,    88,   268,     6,     0,    41,   188,   268,   189,     6,
     0,    49,    42,   182,   268,   183,     7,   276,     6,     0,
   147,    42,   182,   268,   183,     7,   188,   268,   187,   276,
   189,     6,     0,    50,    42,   182,   268,   183,     7,   276,
     6,     0,    87,    42,    89,    90,   182,   268,   183,     7,
   274,    91,   188,   276,   187,   276,   189,    88,   188,   268,
   187,   268,   189,     6,     0,    87,    42,   182,   268,   183,
     7,   274,    91,   188,   276,   187,   276,   189,    88,   188,
   268,   187,   268,   189,     6,     0,    53,    42,   182,   268,
   183,     7,   276,     6,     0,    42,    64,   182,   268,   183,
     7,   276,     6,     0,    42,   188,   268,   189,     6,     0,
    52,    44,   182,   268,   183,     7,   276,     6,     0,    44,
   182,   268,   183,     7,   276,     6,     0,    53,    44,   182,
   268,   183,     7,   276,     6,     0,    59,   270,   188,   250,
   189,     0,    58,   188,   270,   187,   270,   187,   268,   189,
   188,   250,   189,     0,    60,   270,   188,   250,   189,     0,
    61,   188,   270,   187,   268,   189,   188,   250,   189,     0,
   252,     0,   251,     0,   249,     0,     0,   251,   248,     0,
    63,   188,   251,   189,     0,    66,   188,   251,   189,     0,
    66,     4,   184,   268,   185,     6,     0,    66,   103,     6,
     0,     4,   282,     6,     0,     4,   268,     6,     0,    57,
   182,     4,   183,   186,     4,     6,     0,    99,     6,     0,
    37,     6,     0,    94,   182,   268,     8,   268,   183,     0,
    94,   182,   268,     8,   268,     8,   268,   183,     0,    94,
     4,    95,   188,   268,     8,   268,   189,     0,    94,     4,
    95,   188,   268,     8,   268,     8,   268,   189,     0,    96,
     0,   102,     4,     0,   100,     0,   101,     4,     6,     0,
    97,   182,   268,   183,     0,    98,     0,    62,    38,   188,
   268,   187,   270,   189,     6,     0,    62,    38,   188,   268,
   187,   270,   187,   270,   187,   268,   189,     6,     0,    62,
    38,   188,   268,   187,   270,   187,   270,   187,   270,   187,
   268,   189,     6,     0,    62,    41,   188,   268,   187,   270,
   189,     6,     0,    62,    41,   188,   268,   187,   270,   187,
   270,   187,   268,   189,     6,     0,    62,    41,   188,   268,
   187,   270,   187,   270,   187,   270,   187,   268,   189,     6,
     0,     0,    62,    41,   188,   268,   187,   270,   189,   257,
   188,   263,   189,     6,     0,     0,    62,    41,   188,   268,
   187,   270,   187,   270,   187,   268,   189,   258,   188,   263,
   189,     6,     0,     0,    62,    41,   188,   268,   187,   270,
   187,   270,   187,   270,   187,   268,   189,   259,   188,   263,
   189,     6,     0,    62,    42,   188,   268,   187,   270,   189,
     6,     0,    62,    42,   188,   268,   187,   270,   187,   270,
   187,   268,   189,     6,     0,    62,    42,   188,   268,   187,
   270,   187,   270,   187,   270,   187,   268,   189,     6,     0,
     0,    62,    42,   188,   268,   187,   270,   189,   260,   188,
   263,   189,     6,     0,     0,    62,    42,   188,   268,   187,
   270,   187,   270,   187,   268,   189,   261,   188,   263,   189,
     6,     0,     0,    62,    42,   188,   268,   187,   270,   187,
   270,   187,   270,   187,   268,   189,   262,   188,   263,   189,
     6,     0,   264,     0,   263,   264,     0,    70,   188,   276,
   187,   276,   187,   276,   189,     6,     0,    70,   188,   276,
   187,   276,   189,     6,     0,    65,     6,     0,    51,    41,
   276,     7,   268,     6,     0,    51,    41,   276,     7,   268,
    54,    56,   268,     6,     0,    51,    41,   276,     7,   268,
    54,    55,   268,     6,     0,    51,    42,   188,   268,   189,
     7,   276,     6,     0,    48,    42,   188,   268,   189,     7,
   276,     6,     0,    51,    44,   188,   268,   189,     7,   276,
     6,     0,    65,    42,   276,     7,   268,     6,     0,    65,
    42,   276,     6,     0,    67,     6,     0,    68,     6,     0,
   107,     0,   108,     0,   109,     0,   110,     0,   111,     0,
   269,     0,   182,   268,   183,     0,   172,   268,     0,   171,
   268,     0,   177,   268,     0,   268,   172,   268,     0,   268,
   171,   268,     0,   268,   173,   268,     0,   268,   174,   268,
     0,   268,   175,   268,     0,   268,   181,   268,     0,   268,
   167,   268,     0,   268,   169,   268,     0,   268,   168,   268,
     0,   268,   170,   268,     0,   268,   164,   268,     0,   268,
   165,   268,     0,   268,   163,   268,     0,   268,   162,   268,
     0,   268,   161,   268,     8,   268,     0,    12,   182,   268,
   183,     0,    13,   182,   268,   183,     0,    14,   182,   268,
   183,     0,    15,   182,   268,   183,     0,    16,   182,   268,
   183,     0,    17,   182,   268,   183,     0,    18,   182,   268,
   183,     0,    19,   182,   268,   183,     0,    20,   182,   268,
   183,     0,    22,   182,   268,   183,     0,    23,   182,   268,
   187,   268,   183,     0,    24,   182,   268,   183,     0,    25,
   182,   268,   183,     0,    26,   182,   268,   183,     0,    27,
   182,   268,   183,     0,    28,   182,   268,   183,     0,    29,
   182,   268,   183,     0,    30,   182,   268,   187,   268,   183,
     0,    31,   182,   268,   187,   268,   183,     0,    32,   182,
   268,   187,   268,   183,     0,    21,   182,   268,   183,     0,
    12,   184,   268,   185,     0,    13,   184,   268,   185,     0,
    14,   184,   268,   185,     0,    15,   184,   268,   185,     0,
    16,   184,   268,   185,     0,    17,   184,   268,   185,     0,
    18,   184,   268,   185,     0,    19,   184,   268,   185,     0,
    20,   184,   268,   185,     0,    22,   184,   268,   185,     0,
    23,   184,   268,   187,   268,   185,     0,    24,   184,   268,
   185,     0,    25,   184,   268,   185,     0,    26,   184,   268,
   185,     0,    27,   184,   268,   185,     0,    28,   184,   268,
   185,     0,    29,   184,   268,   185,     0,    30,   184,   268,
   187,   268,   185,     0,    31,   184,   268,   187,   268,   185,
     0,    32,   184,   268,   187,   268,   185,     0,    21,   184,
   268,   185,     0,     3,     0,     9,     0,    10,     0,    11,
     0,     4,     0,     4,   184,   268,   185,     0,     4,   246,
     0,     4,   184,   268,   185,   246,     0,     4,   186,     4,
     0,     4,   184,   268,   185,   186,     4,     0,     4,   186,
     4,   246,     0,     4,   184,   268,   185,   186,     4,   246,
     0,   271,     0,   172,   270,     0,   171,   270,     0,   270,
   172,   270,     0,   270,   171,   270,     0,   188,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   189,     0,   188,
   268,   187,   268,   187,   268,   187,   268,   189,     0,   188,
   268,   187,   268,   187,   268,   189,     0,   182,   268,   187,
   268,   187,   268,   183,     0,     0,   182,   273,   183,     0,
     5,     0,   273,   187,     5,     0,     0,   188,   275,   189,
     0,   182,   275,   183,     0,   276,     0,   275,   187,   276,
     0,   268,     0,   277,     0,   188,   278,   189,     0,   172,
   188,   278,   189,     0,   268,     8,   268,     0,   268,     8,
   268,     8,   268,     0,     4,   184,   185,     0,   172,     4,
   184,   185,     0,     4,   184,   188,   278,   189,   185,     0,
   172,     4,   184,   188,   278,   189,   185,     0,   268,     0,
   277,     0,   278,   187,   268,     0,   278,   187,   277,     0,
   188,   268,   187,   268,   187,   268,   187,   268,   189,     0,
   188,   268,   187,   268,   187,   268,   189,     0,     4,     0,
     4,   186,    92,   186,     4,     0,   188,   281,   189,     0,
     4,   184,   268,   185,   186,    93,     0,   279,     0,   281,
   187,   279,     0,     5,     0,    35,   182,   282,   187,   282,
   183,     0,    36,   182,   282,   183,     0,    34,   182,   282,
   183,     0,    34,   182,   282,   187,   278,   183,     0,    34,
   182,     4,   186,     4,   183,     0,    34,   182,     4,   184,
   268,   185,   186,     4,   183,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   154,   156,   157,   158,   165,   167,   170,   178,   192,   204,
   206,   209,   211,   212,   215,   221,   226,   227,   228,   231,
   235,   238,   244,   249,   255,   263,   268,   272,   278,   283,
   287,   292,   296,   299,   304,   308,   312,   316,   321,   325,
   328,   332,   336,   340,   344,   348,   352,   355,   359,   362,
   366,   369,   378,   382,   388,   390,   391,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   403,   408,   425,   430,
   436,   441,   442,   443,   444,   445,   446,   447,   448,   449,
   450,   451,   452,   453,   454,   457,   460,   464,   470,   476,
   479,   483,   489,   495,   498,   502,   508,   514,   517,   521,
   529,   535,   538,   542,   550,   556,   559,   563,   571,   577,
   580,   584,   596,   602,   605,   609,   621,   627,   630,   634,
   646,   652,   655,   659,   672,   678,   681,   685,   698,   704,
   707,   711,   724,   730,   736,   743,   751,   757,   763,   770,
   778,   789,   791,   792,   793,   794,   796,   798,   800,   831,
   865,   912,   927,   936,   951,   963,   977,  1000,  1024,  1036,
  1050,  1062,  1076,  1092,  1108,  1121,  1141,  1152,  1158,  1177,
  1188,  1196,  1202,  1208,  1227,  1233,  1239,  1255,  1262,  1268,
  1274,  1285,  1296,  1318,  1330,  1336,  1355,  1376,  1384,  1390,
  1396,  1402,  1414,  1420,  1426,  1438,  1444,  1449,  1454,  1461,
  1463,  1464,  1467,  1472,  1483,  1501,  1509,  1514,  1525,  1593,
  1613,  1620,  1624,  1644,  1657,  1668,  1690,  1712,  1733,  1739,
  1744,  1749,  1753,  1763,  1772,  1779,  1788,  1793,  1798,  1803,
  1808,  1813,  1818,  1823,  1828,  1836,  1841,  1846,  1851,  1856,
  1862,  1868,  1874,  1880,  1888,  1892,  1897,  1924,  1948,  1958,
  1977,  1995,  2013,  2035,  2056,  2077,  2091,  2112,  2117,  2128,
  2130,  2131,  2132,  2133,  2136,  2138,  2139,  2140,  2141,  2142,
  2143,  2144,  2145,  2152,  2153,  2154,  2155,  2156,  2157,  2158,
  2159,  2160,  2161,  2162,  2163,  2164,  2165,  2166,  2167,  2168,
  2169,  2170,  2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,
  2179,  2180,  2181,  2182,  2183,  2185,  2186,  2187,  2188,  2189,
  2190,  2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,
  2200,  2201,  2202,  2203,  2204,  2205,  2210,  2215,  2216,  2217,
  2221,  2232,  2249,  2260,  2279,  2295,  2311,  2327,  2344,  2349,
  2353,  2357,  2361,  2366,  2371,  2375,  2379,  2385,  2389,  2394,
  2398,  2403,  2407,  2411,  2417,  2423,  2430,  2436,  2440,  2444,
  2454,  2461,  2472,  2486,  2502,  2522,  2546,  2552,  2556,  2560,
  2571,  2576,  2587,  2592,  2610,  2615,  2628,  2634,  2640,  2645,
  2653,  2666,  2670,  2688,  2702
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence",
"tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tText2D",
"tText3D","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn",
"tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Text2DValues","Text2D","@13","Text3DValues","Text3D","@14","NumericAffectation",
"NumericIncrement","Affectation","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Command","Loop","Extrude","@15","@16","@17","@18","@19",
"@20","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   190,   190,   190,   190,   191,   191,   192,   192,   192,   193,
   193,   194,   194,   194,   195,   195,   195,   195,   195,   196,
   196,   196,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   198,   198,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   200,   200,   201,   201,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   203,   203,   205,   204,   206,
   206,   208,   207,   209,   209,   211,   210,   212,   212,   214,
   213,   215,   215,   217,   216,   218,   218,   220,   219,   221,
   221,   223,   222,   224,   224,   226,   225,   227,   227,   229,
   228,   230,   230,   232,   231,   233,   233,   235,   234,   236,
   236,   238,   237,   239,   239,   241,   240,   242,   242,   244,
   243,   245,   245,   245,   245,   245,   246,   246,   247,   247,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,   247,   247,   247,   247,   247,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   249,   249,   249,   249,   250,
   250,   250,   251,   251,   252,   253,   253,   253,   254,   254,
   254,   254,   254,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   256,   256,   256,   256,   256,   256,   257,
   256,   258,   256,   259,   256,   256,   256,   256,   260,   256,
   261,   256,   262,   256,   263,   263,   264,   264,   264,   265,
   265,   265,   265,   265,   265,   265,   265,   266,   266,   267,
   267,   267,   267,   267,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   270,   270,
   270,   270,   270,   271,   271,   271,   271,   272,   272,   273,
   273,   274,   274,   274,   275,   275,   276,   276,   276,   276,
   277,   277,   277,   277,   277,   277,   278,   278,   278,   278,
   279,   279,   279,   279,   280,   280,   281,   281,   282,   282,
   282,   282,   282,   282,   282
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    13,     1,     3,     0,
    15,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     5,     7,     7,    12,     7,     7,     9,    17,     8,     8,
     7,     7,    11,     5,     8,    12,     8,    22,    20,     8,
     8,     5,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     4,     4,     6,     3,     3,     3,
     7,     2,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     8,    12,    14,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     1,     2,     9,     7,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     4,     2,     5,     3,     6,     4,     7,     1,     2,
     2,     3,     3,    11,     9,     7,     7,     0,     3,     1,
     3,     0,     3,     3,     1,     3,     1,     1,     3,     4,
     3,     5,     3,     4,     6,     7,     1,     1,     3,     3,
     9,     7,     1,     5,     3,     6,     1,     3,     1,     6,
     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   218,     0,   223,     0,
   220,     0,     0,     0,    54,    56,    55,    57,    58,    59,
    60,    61,    66,    65,    62,    63,    64,     5,     0,     0,
     0,    15,    16,    18,    17,    19,   348,   348,     0,   327,
   331,   379,   142,   328,   329,   330,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   143,   144,   145,   146,     0,     0,     0,   147,   148,     0,
     0,     0,     0,     0,     0,   265,     0,     0,   213,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   339,     0,     0,     0,     0,     0,   203,     0,     0,     0,
   203,   258,   259,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   212,     0,   219,     0,     6,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   333,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   268,   267,   269,     0,     0,     0,     0,     0,
     0,     0,     0,   153,   210,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   209,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   331,     0,     0,   357,     0,   358,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   341,   340,     0,     0,     0,     0,   203,
   203,     0,     0,     0,     0,     0,     0,     0,   208,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   350,     0,     0,     0,     0,     0,   335,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   379,     0,     0,     0,   266,
     0,     0,   367,   368,     0,     0,   142,     0,     0,     0,
     0,   149,     0,   283,   282,   280,   281,   276,   278,   277,
   279,   271,   270,   272,   273,   274,   275,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   343,   342,   202,     0,   201,   200,     0,     0,
     0,     0,     0,   205,   204,   257,     0,     0,   206,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   222,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   349,     0,     0,    21,     0,   332,   337,    71,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,   285,   306,
   286,   307,   287,   308,   288,   309,   289,   310,   290,   311,
   291,   312,   292,   313,   293,   314,   305,   326,   294,   315,
     0,     0,   296,   317,   297,   318,   298,   319,   299,   320,
   300,   321,   301,   322,     0,     0,     0,     0,     0,     0,
     0,     0,   382,     0,     0,   381,     0,     0,     0,     0,
     0,     0,     0,     0,   159,     0,     0,     0,     0,     0,
    67,     0,     0,   171,     0,     0,     0,     0,   184,     0,
   192,     0,     0,   363,     0,     0,     0,   359,   361,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   196,   198,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   351,     0,   348,     0,   334,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    69,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   152,   369,
   370,     0,     0,     0,     0,     0,   154,   155,   157,     0,
     0,   373,     0,   377,     0,   163,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   364,     0,   360,
     0,   170,     0,     0,     0,     0,   250,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   256,   207,     0,     0,     0,     0,     0,
   352,     0,     0,     0,   214,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,   261,   262,   263,   264,     0,     0,     0,     0,     0,
     0,     0,    20,     0,   336,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   295,   316,   302,   323,   303,   324,   304,   325,     0,   384,
   383,   380,     0,   142,     0,     0,     0,     0,   150,     0,
     0,     0,     0,     0,   375,    68,   167,   175,     0,   176,
     0,   172,     0,   173,   194,     0,     0,   362,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   211,     0,     0,     0,     0,   203,     0,     0,     0,
   230,     0,   239,     0,     0,   181,   182,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   348,   338,    70,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   160,     0,     0,
   161,     0,     0,     0,   378,     0,   180,   191,   365,     0,
     0,   254,   185,   187,     0,     0,   253,   255,   193,   168,
   179,   190,   195,     0,     0,     0,   347,     0,   346,     0,
     0,   224,     0,   227,     0,     0,   236,     0,     0,     0,
   352,     0,   355,     0,     0,     0,     0,   216,   215,     0,
     0,     0,     0,     0,    23,     0,    32,     0,    36,     0,
    30,     0,     0,    35,     0,    40,    38,     0,     0,     0,
     0,     0,     0,    47,     0,     0,     0,     0,     0,    52,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   151,   156,   158,
     0,   164,     0,     0,     0,   177,   366,     0,   252,   251,
   165,   166,   203,     0,   199,     0,     0,     0,     0,     0,
     0,     0,     0,   354,     0,   353,     0,     0,     0,     0,
     0,     0,   352,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   385,     0,   376,
   374,     0,     0,     0,     0,   345,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   245,     0,     0,     0,
     0,     0,     0,   356,     0,     0,   217,     0,     0,    37,
     0,     0,     0,     0,    27,     0,    33,     0,    39,    28,
    41,     0,    44,     0,    48,    49,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   162,     0,     0,   197,     0,
     0,     0,     0,   232,     0,   249,     0,     0,   246,   241,
     0,     0,     0,     0,     0,     0,   183,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,    92,    96,   136,     0,     0,   372,     0,   344,   225,
     0,   228,     0,     0,     0,   231,   237,     0,     0,   240,
   169,   174,     0,     0,   186,     0,     0,     0,     0,     0,
    31,    34,    42,     0,    43,    50,    45,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   234,     0,     0,   243,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,   371,     0,   226,     0,   229,     0,     0,
     0,   238,     0,     0,     0,     0,     0,     0,    26,    29,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    86,     0,    90,     0,    94,     0,   134,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   233,     0,     0,   248,   242,     0,     0,
     0,     0,     0,     0,    46,    22,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    87,    89,    91,    93,    95,
    97,   135,   137,     0,   138,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   100,   104,   108,     0,     0,   235,   247,   244,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   139,   141,     0,     0,     8,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   189,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    98,
     0,   102,     0,   106,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     0,    24,     0,     0,     0,     0,     0,     0,    99,   101,
   103,   105,   107,   109,     0,     0,     0,     0,   112,   116,
   120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   110,     0,   114,     0,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
   113,   115,   117,   119,   121,     0,   124,   128,   132,    25,
     0,     0,     0,     0,     0,     0,     0,   122,     0,   126,
     0,   130,     0,     0,     0,     0,     0,     0,   123,   125,
   127,   129,   131,   133,     0,     0,     0
};

static const short yydefgoto[] = {  1695,
    80,     5,     6,    19,    20,    21,    22,     7,    65,    66,
    67,   412,  1442,   605,  1378,  1444,   606,  1379,  1446,   607,
  1380,  1579,   608,  1550,  1581,   609,  1551,  1583,   610,  1552,
  1640,   611,  1626,  1642,   612,  1627,  1644,   613,  1628,  1677,
   614,  1671,  1679,   615,  1672,  1681,   616,  1673,  1448,   617,
  1381,  1514,   618,  1450,   133,   235,    68,   535,   525,   526,
   527,   528,    72,    73,    74,    75,  1085,  1343,  1419,  1088,
  1348,  1423,  1236,  1237,    76,    77,   896,   327,   136,   344,
   171,   230,   405,   991,  1092,  1093,   329,   465,   814,   679,
   815,   137
};

static const short yypact[] = {  2200,
    33,-32768,-32768,   -92,-32768,    25,  2380,-32768,    14,    62,
   100,   103,   110,   115,   207,    81,   113,   122,-32768,-32768,
-32768,-32768,  1806,   129,   313,  -159,   177,   196,   -26,   -31,
   256,   265,   161,   274,   310,   341,   385,   464,   423,   170,
   297,   299,   117,   117,   303,   339,   304,   454,     9,   510,
   511,    39,   322,   338,   -24,     5,-32768,   355,-32768,   517,
-32768,   541,   563,   526,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   298,    14,
  2403,-32768,-32768,-32768,-32768,-32768,   457,   457,   605,-32768,
    80,     7,-32768,-32768,-32768,-32768,   -83,     1,    12,    78,
   157,   302,   327,   331,   345,   354,   373,   374,   377,   381,
   382,   403,   404,   407,   425,   429,   432,   458,   461,   462,
-32768,-32768,-32768,-32768,  1990,  1990,  1990,-32768,-32768,  1990,
   708,    22,  1990,   645,   409,-32768,   647,   653,-32768,  1990,
  1990,  1990,  1990,   477,  1990,  1990,   493,  1990,  1990,  1990,
  1682,  1990,   494,   501,   518,  1682,   516,   519,   531,   534,
   566,   586,   597,   704,   117,   117,   117,  1990,  1990,   119,
-32768,   152,   117,   593,   594,   596,-32768,  1682,   502,   780,
-32768,-32768,-32768,  1682,  1682,  1990,  1990,   -69,  1990,   692,
  1990,  1990,-32768,   783,-32768,   614,-32768,    14,   625,   627,
   631,   632,   633,   634,   636,   638,   639,   640,   641,   648,
   649,   650,   651,   652,   654,   655,   656,   657,   666,   691,
   693,   694,   695,   700,   701,   702,   706,   707,   807,   642,
   644,   687,  1990,   831,-32768,   117,-32768,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,    40,
    36,    36,   705,   705,   705,  2109,   884,  2020,  5239,   315,
   709,   885,   431,-32768,-32768,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
-32768,  -134,  5889,   763,  5912,  5935,  1990,  5958,  2045,  1990,
  2226,  5981,  6004,   114,  1712,  2020,   697,   887,-32768,  6027,
  1990,  1990,  1990,   895,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,   732,   198,-32768,-32768,  2803,  2824,   117,   117,   472,
   472,   201,  1990,  1990,  1990,  2267,   153,  1990,-32768,  2317,
   911,   912,  6050,  6073,   832,  1990,  6096,   735,  1506,  6119,
-32768,  1990,   786,   937,   940,   941,   942,   943,   944,   946,
   948,   949,   953,   955,   958,   959,   960,   961,   962,   963,
   964,   965,   971,   972,   973,   976,   842,   978,   979,   982,
   984,   987,   986,-32768,   -59,   990,   991,   993,  5264,    90,
   165,    13,  6142,  5289,  6165,  5314,  6188,  5339,  6211,  5364,
  6234,  5389,  6257,  5414,  6280,  5439,  6303,  5464,  6326,  5489,
  6349,  5514,  6372,  5539,  2845,  2866,  6395,  5564,  6418,  5589,
  6441,  5614,  6464,  5639,  6487,  5664,  6510,  5689,  2887,  2908,
  2929,  2950,  2971,  2992,   436,-32768,   138,   809,   817,-32768,
  1682,  2050,   697,-32768,   428,   264,    36,  1990,   995,   998,
    10,-32768,  1949,   226,   496,   854,   854,   -39,   -39,   -39,
   -39,   295,   295,   705,   705,   705,   705,   999,  2020,   997,
  1000,  1023,  1025,  6533,  1026,  1028,  6556,  1030,  1032,  1033,
  1341,   311,  2020,   434,  1990,  1990,  1034,  2389,  6579,  6602,
  1990,  2412,  2435,  6625,  6648,  6671,  6694,  6717,   851,   117,
  1990,  1990,-32768,-32768,-32768,   853,  1511,-32768,   856,  1990,
  3013,  3034,  3055,-32768,-32768,-32768,  1990,  5714,-32768,   855,
   858,  1040,  1041,   867,  6740,  1044,  1990,  1990,-32768,  6763,
   899,   869,   870,   871,   872,   873,   874,   878,   879,   890,
   891,   892,   893,   902,   914,   915,   916,   918,   919,   920,
   921,   924,   930,   947,   950,   952,   954,   966,   967,   969,
   970,-32768,  1049,   927,-32768,   975,    -7,-32768,-32768,   917,
   945,   956,   968,   983,   985,   988,   992,   996,  1013,  1014,
  1015,  1016,  1018,  1122,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1990,  1990,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1125,-32768,  2020,    36,-32768,  1124,  2020,   957,    38,
  1990,  1129,  1130,   602,-32768,  1133,   974,    11,  1139,  1990,
-32768,   159,   117,-32768,  1682,  1682,  1140,  1682,-32768,  1144,
-32768,  1682,  1682,-32768,  2020,  1461,   437,-32768,  1964,   682,
   980,  1145,  1157,  1159,   290,  1162,  1165,  1166,  1168,  1170,
  1173,  1200,  1127,   231,  3076,  3097,-32768,-32768,  2458,   117,
   117,   117,   736,  1154,  1990,  1990,  1682,  1682,  1990,  1201,
  1682,  1979,   379,  1202,  1060,  1208,  1990,  1990,   117,  1209,
  1210,  1042,  1211,  1213,  1682,  1682,  1214,   117,  1215,  1216,
  1682,  1682,  1218,  1219,  1220,  1222,  1223,  1682,    30,  1682,
  1225,  1224,  1230,  1242,  1244,-32768,  1243,   457,  1247,-32768,
  1185,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,-32768,  6786,  5739,  6809,  5764,
  6832,  5789,  6855,  5814,  5839,  1065,   188,  1070,-32768,   697,
-32768,    17,   343,  1066,  1264,   923,-32768,-32768,-32768,    11,
  1990,  1087,  1990,-32768,   438,-32768,  7407,  1268,    19,    16,
  1269,  1682,  1270,  1682,  1271,  1273,   441,-32768,  2020,-32768,
  1990,-32768,  1990,  1682,  1682,  1682,-32768,   292,  1682,  1682,
  1682,  1682,  1682,  1682,  1682,   402,  1990,  1990,  1990,  1092,
  -137,  -108,   -89,-32768,-32768,  3118,  3139,  1275,  1276,  6878,
    21,  1192,  1990,  1990,-32768,  1097,    14,  1099,  3160,  3181,
  -125,  1100,  1105,  1102,  1107,  1104,  1109,  1106,  1108,  -105,
  1110,  1111,  1113,  1121,  1132,  1142,  1143,  1146,  1148,  1115,
-32768,-32768,-32768,-32768,-32768,  1149,  1150,  1151,  1155,  1160,
  1126,  1161,-32768,  1188,    90,  1305,  3202,  3223,  3244,  3265,
  3286,  3307,  3328,  3349,  3370,  3391,  3412,  3433,  3454,  3475,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1163,-32768,
-32768,-32768,  1682,    36,  1990,  1326,  1336,    10,-32768,  1340,
  5864,  1284,  3496,    11,-32768,-32768,-32768,-32768,   117,-32768,
  1383,-32768,  1384,-32768,-32768,  1206,   442,  7407,  3517,  1386,
  1387,  1388,  1990,  1990,  1389,  1390,  1391,  1392,  1393,  1394,
  1396,-32768,  1924,  2481,  6901,   630,   472,   117,  1398,   117,
  1400,   117,  1401,  1990,  1990,-32768,-32768,  1407,  1682,  1682,
  1334,  1682,   193,  6924,  1990,    14,  1423,  1990,  1682,  1421,
  1425,  1424,  1258,  1426,    30,  1427,  1431,  1990,  1432,  1434,
  1433,  1435,  1437,    30,  1990,  1990,  1990,  1682,  1446,  1451,
    30,  1990,  1453,  1454,  1452,  1990,   457,-32768,-32768,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1455,  1456,  1457,   951,-32768,  1459,  1462,
-32768,  1274,  1283,  1990,-32768,    34,-32768,-32768,-32768,  1309,
  1990,-32768,-32768,-32768,  1069,  1153,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1248,  1489,  1308,-32768,  1990,-32768,  1272,
   245,-32768,   248,-32768,  1311,   254,-32768,  1312,  3538,  3559,
    21,   253,-32768,   460,  1313,  1420,  1990,-32768,-32768,  3580,
    14,  1327,  3601,  1322,-32768,  1324,-32768,  1328,-32768,  1333,
-32768,  1330,  6947,-32768,  1332,-32768,-32768,  1337,  1338,  6970,
  3622,  6993,  1335,-32768,  1348,  1352,  3643,  1349,  1363,-32768,
  3664,  1360,  3685,  3706,  3727,  3748,  3769,  3790,  3811,  3832,
  3853,  3874,  3895,  3916,  3937,  3958,  1365,-32768,-32768,-32768,
    11,-32768,  1464,  1520,  3979,-32768,-32768,  4000,-32768,-32768,
-32768,-32768,   472,  1704,-32768,  1744,  1744,   -38,  1744,   -38,
  1990,  1990,  1468,-32768,  1682,-32768,  1682,  1990,  2504,  1682,
  1412,  1566,    21,    30,  1571,  1990,  1570,    30,  1572,  1574,
  1573,  1575,  1576,  1990,  1577,  1682,  1578,  1579,  1990,  1583,
  1581,  1990,  1585,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,-32768,  1582,-32768,
-32768,  1990,  1586,  1403,  1990,-32768,  1744,  1744,  1990,  2527,
   257,  2550,   259,  1593,  1413,   -34,-32768,  2573,   262,   -22,
  2596,  2619,  1414,-32768,  1416,  1631,-32768,  1411,    14,-32768,
  1417,  1418,  1419,  4021,-32768,  1430,-32768,  1438,-32768,-32768,
-32768,  7016,-32768,  1428,-32768,-32768,  7039,  1439,-32768,  7062,
  1436,  4042,  4063,  4084,  4105,  4126,  4147,  4168,  4189,  4210,
  7085,  7108,  7131,  7154,  4231,-32768,  2323,  1441,-32768,  2642,
  2012,  1608,  1990,  1611,  1990,-32768,  1682,  1612,-32768,  1614,
  1990,  1624,  1628,  1629,  1682,  1682,-32768,  1630,    14,    30,
    30,    30,    30,  1633,  1634,  1635,    30,  1636,  1638,  1639,
  1642,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
-32768,-32768,-32768,-32768,  1990,  1990,-32768,  1643,-32768,-32768,
  2665,-32768,  1466,  2688,  1463,-32768,-32768,  1467,  2711,-32768,
-32768,-32768,  1469,  1470,-32768,    14,  1474,  1476,  1482,  1483,
-32768,-32768,-32768,  1485,-32768,-32768,-32768,  1496,  4252,  4273,
  4294,  4315,  4336,  4357,  4378,  4399,  4420,  1500,  1501,  1529,
  1530,  7177,  2734,  1497,  1651,   -38,  1713,  1682,   -38,  1714,
  1682,  1657,  1596,    30,    30,  1743,  1745,    30,  1772,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,    36,-32768,-32768,  1773,-32768,   -11,-32768,  1562,   463,
    -9,-32768,  1591,  1592,  1594,    14,  1597,  1598,-32768,-32768,
  1600,  1604,  4441,  4462,  4483,  4504,  4525,  4546,  4567,  4588,
  4609,   467,  7407,   487,  7407,   491,  7407,   492,-32768,  1601,
  1599,  1774,   -38,  1682,  1784,  1785,   -38,  1709,  1990,    14,
    30,  1682,  1801,  1802,  1990,  1990,  1990,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1833,  1990,  1838,  1990,  1839,    36,
  1840,    36,  1841,-32768,    -8,  1659,-32768,-32768,     3,  1661,
  4630,    14,  1663,  1664,-32768,-32768,  4651,  4672,  4693,  4714,
  4735,  4756,  7200,  7223,  7246,  7407,-32768,  7407,-32768,  7407,
-32768,-32768,-32768,   498,-32768,-32768,  1846,  1849,  1850,  1990,
  1990,  1703,    30,  1682,  1990,  1990,  1990,  1990,  1990,  1990,
-32768,-32768,-32768,    36,  1854,-32768,-32768,-32768,  4777,  2757,
  1705,  1675,  1676,  4798,  4819,  4840,  4861,  4882,  4903,  1692,
  1693,  1694,-32768,-32768,  1990,  1880,-32768,  1682,    30,  1990,
  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  2780,-32768,
  1700,  1707,  4924,  4945,  4966,  4987,  5008,  5029,   503,  7407,
   504,  7407,   508,  7407,  1882,  1682,  1886,  1990,  1990,  1990,
  1990,  1990,  1990,  1990,  1889,  1990,  1890,  1990,  1891,-32768,
  1711,-32768,  5050,  5071,  5092,  7269,  7292,  7315,  7407,-32768,
  7407,-32768,  7407,-32768,  1682,  1990,  1990,  1990,-32768,-32768,
-32768,  1715,  5113,  5134,  5155,  1716,  1717,  1718,  1682,  1990,
  1990,  1990,  1990,  1990,  1990,  1720,  5176,  5197,  5218,   509,
  7407,   512,  7407,   554,  7407,    30,  1990,  1990,  1990,  1990,
  1893,  1990,  1895,  1990,  1897,  1725,  7338,  7361,  7384,  7407,
-32768,  7407,-32768,  7407,-32768,  1903,-32768,-32768,-32768,-32768,
  1722,  1723,  1724,  1990,  1990,  1990,   557,  7407,   558,  7407,
   591,  7407,  1990,  1907,  1990,  1908,  1990,  1911,  7407,-32768,
  7407,-32768,  7407,-32768,  1918,  1919,-32768
};

static const short yypgoto[] = {-32768,
   -25,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1331,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -284,   -18,-32768,  1915,  1916,  -335,
   -16,  1917,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768, -1119, -1228,-32768,-32768,  -984,   -23,-32768,   361,
-32768,   -84,-32768, -1072,   935,   228,  -183,  -319,  -800,  1024,
-32768,  -279
};


#define	YYLAST		7588


static const short yytable[] = {   135,
   457,   458,   459,   231,   134,   468,   504,  1299,   190,   940,
   236,  1299,   179,   677,   812,   529,    78,   188,  1173,   365,
  1110,   948,   140,    93,   947,   290,  1234,    10,   141,  1119,
  1234,  1235,   147,   348,   349,  1235,  1126,   144,     8,  1156,
   456,   803,  1234,   455,   456,   348,   349,  1235,   488,   978,
  1240,   979,   489,  1234,   198,  1234,  1234,  1000,  1235,     9,
  1235,  1235,   348,   349,   949,   348,   349,  1234,    81,   118,
   119,   120,  1235,   118,   119,   120,   184,  1009,   980,   185,
   981,   348,   349,   590,   591,   592,   593,   594,   595,   596,
   597,   598,   599,   600,   601,   602,   603,   982,   238,   983,
   239,   283,   284,   285,   464,    82,   286,   289,    83,   293,
  1251,   180,   366,   291,   292,    84,   313,   314,   315,   316,
    85,   318,   319,   582,   321,   322,   323,   583,   330,   804,
   805,   305,   306,   307,   308,   309,   891,   892,   893,   894,
   895,   310,   464,  1055,   346,   347,    11,    12,    13,    14,
    15,    16,    17,    18,  1298,   145,   148,   189,   536,   537,
   356,   146,   363,   364,   360,   367,  1302,   369,   370,   682,
   128,   129,   373,   121,   122,   123,   124,  1452,   769,  1456,
  1517,   671,   240,   697,   241,    79,   191,   673,  1299,   348,
   349,  1519,  1299,   242,   237,   243,   181,   678,   813,  1252,
  1097,   604,   989,  1256,   348,   349,   151,   160,   990,   409,
   161,   162,    86,   163,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
   449,   450,   451,   452,   453,   454,  1299,   128,   129,   244,
  1299,   245,    87,   233,   463,   234,  1417,   128,   129,  1421,
    93,   469,   473,   474,   475,   476,   477,   478,   479,   480,
   481,   482,   483,   484,   485,   486,   487,   166,   167,   348,
   349,   128,   129,   494,    88,   837,   497,   501,   168,   234,
   197,   284,   463,    89,   169,   464,   350,   508,   509,   510,
   138,   512,   513,   514,   515,   516,   517,   518,   139,   464,
   663,   467,   348,   349,   664,  1357,  1358,  1359,  1360,   531,
   532,   533,  1364,  1485,   538,   348,   349,  1489,   246,   351,
   247,   818,   545,   838,   797,   668,   963,   964,   550,   934,
  1219,   153,   589,   296,   297,   298,   299,   300,   142,   301,
   302,   303,   304,   305,   306,   307,   308,   309,   348,   349,
   931,   348,   349,   310,   668,   827,   174,   143,   328,   175,
   176,  1098,   154,   334,   520,   798,   864,   530,   298,   299,
   300,   588,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   348,   349,   170,   172,   357,   310,   972,   973,  1427,
  1428,   361,   362,  1431,   295,   348,   349,   847,   348,   349,
   121,   122,   123,   124,   348,   349,   155,   348,   349,   348,
   349,  1166,   348,   349,  1167,  1174,   472,   149,   284,  1175,
  1169,   128,   129,  1293,   674,  1295,   150,   672,  1301,   670,
   296,   297,   298,   299,   300,   152,   301,   302,   303,   304,
   305,   306,   307,   308,   309,   463,   159,   307,   308,   309,
   310,   121,   122,   123,   124,   310,  1493,   409,   164,   463,
   464,   699,   700,   248,   801,   249,   165,   705,   128,   129,
   173,   177,   128,   129,   696,   178,   234,   715,   716,   121,
   122,   123,   124,   186,   156,   157,   719,   158,   250,   957,
   251,   464,   252,   723,   253,   182,   183,   933,   935,   187,
   128,   129,   193,   732,   733,   343,   254,   345,   255,    42,
    43,    44,    45,   352,    47,   256,   192,   257,  1542,   296,
   297,   298,   299,   300,   194,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   258,   260,   259,   261,   262,   310,
   263,   865,   264,   266,   265,   267,   195,   196,   770,   296,
   297,   298,   299,   300,  1572,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   268,   270,   269,   271,   272,   310,
   273,   296,   297,   298,   299,   300,   411,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   274,   809,   275,   232,
   276,   310,   277,   278,   668,   279,   669,   787,   788,   661,
   668,   662,   698,   668,   944,   830,   945,   668,   668,   956,
  1060,   789,   790,   791,   792,   793,   794,   795,   229,   280,
   463,  1080,   281,   282,   800,   464,  1175,   806,  1176,  1454,
   294,  1455,   311,  1474,  1046,  1475,   817,   312,   317,   299,
   300,  1656,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   463,   409,  1476,   320,  1477,   310,  1478,  1480,  1479,
  1481,   331,   332,   904,  1534,   358,  1535,   832,   667,  1594,
  1596,  1595,  1597,  1075,  1598,  1650,  1599,  1651,  1652,   333,
  1653,   856,   857,   335,   505,   860,   336,   342,   523,   524,
    90,    91,   337,   869,   870,   338,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
  1654,   854,  1655,  1683,  1685,  1684,  1686,   339,   907,   908,
   909,   910,   911,   912,   913,   914,   915,   916,   917,   918,
   919,   920,   296,   297,   298,   299,   300,   340,   301,   302,
   303,   304,   305,   306,   307,   308,   309,  1687,   341,  1688,
   353,   354,   310,   355,   936,   359,   368,   941,   371,   943,
   296,   297,   298,   299,   300,   372,   301,   302,   303,   304,
   305,   306,   307,   308,   309,   463,   374,   958,   375,   959,
   310,   404,   376,   377,   378,   379,  1078,   380,  1079,   381,
   382,   383,   384,   974,   975,   976,   407,  1224,   406,   385,
   386,   387,   388,   389,   410,   390,   391,   392,   393,   993,
   994,   996,   296,   297,   298,   299,   300,   394,   301,   302,
   303,   304,   305,   306,   307,   308,   309,   296,   297,   298,
   299,   300,   310,   301,   302,   303,   304,   305,   306,   307,
   308,   309,   395,   408,   396,   397,   398,   310,   125,   126,
   714,   399,   400,   401,   127,   310,  1028,   402,   403,   130,
   461,   471,   287,   506,   470,   288,   296,   297,   298,   299,
   300,   511,   301,   302,   303,   304,   305,   306,   307,   308,
   309,  1047,   820,   821,   519,   823,   310,   540,   541,   825,
   826,   544,   547,   296,   297,   298,   299,   300,   939,   301,
   302,   303,   304,   305,   306,   307,   308,   309,   551,  1065,
  1066,   552,  1132,   310,   553,   554,   555,   556,   557,  1074,
   558,   491,   559,   560,   858,   859,  1150,   561,   862,   562,
  1089,  1090,   563,   564,   565,   566,   567,   568,   569,   570,
  1101,  1100,   877,   878,  1103,   571,   572,   573,   883,   884,
   574,   575,   576,   577,  1113,   890,   578,   897,   579,   580,
   581,  1120,  1121,  1122,   584,   665,   585,   586,  1127,   666,
   675,   676,  1131,   683,   681,   684,  1133,  1134,  1135,  1136,
  1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,  1145,  1146,
   301,   302,   303,   304,   305,   306,   307,   308,   309,   685,
  1155,   686,   688,   689,   310,   691,   713,  1158,   692,   693,
   701,   717,   725,   819,   718,   726,   727,   728,   729,   951,
   731,   953,   735,   766,  1164,   736,   737,   738,   739,   740,
   741,   960,   961,   962,   742,   743,   965,   966,   967,   968,
   969,   970,   971,  1179,  1159,  1181,   744,   745,   746,   747,
   851,   852,   853,   296,   297,   298,   299,   300,   748,   301,
   302,   303,   304,   305,   306,   307,   308,   309,   772,   871,
   749,   750,   751,   310,   752,   753,   754,   755,   880,   767,
   756,   296,   297,   298,   299,   300,   757,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   773,   786,   796,   799,
   846,   310,  1449,   758,   807,   808,   759,   774,   760,   810,
   761,   802,  1230,  1232,   816,  1238,   822,  1241,  1242,   775,
   824,   834,   762,   763,  1246,   764,   765,   811,  1160,   855,
  1045,   768,  1254,   835,   776,   836,   777,   833,   839,   778,
  1262,   840,   841,   779,   842,  1267,   843,   780,  1270,   844,
  1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,
  1282,  1283,  1284,  1285,   781,   782,   783,   784,  1287,   785,
  1512,  1290,  1515,   283,   284,  1291,   845,   861,   866,   867,
   868,   872,   873,   875,   874,   876,   879,   881,   882,  1096,
   885,   886,   887,  1309,   888,   889,  1104,   898,   899,   296,
   297,   298,   299,   300,   900,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   901,  1123,   902,   930,   903,   310,
   905,   937,   932,  1161,  1553,   590,   591,   592,   593,   594,
   595,   596,   597,   598,   599,   600,   601,   602,   603,  1341,
   938,  1344,   942,   946,   950,   952,   954,  1349,   955,   977,
   986,   987,   992,  1356,   995,   997,  1001,  1002,  1003,  1004,
  1005,  1006,  1007,  1011,  1008,  1012,  1010,  1019,  1369,  1370,
  1371,  1372,  1373,  1374,  1375,  1376,  1377,  1013,  1025,  1056,
  1029,  1382,  1383,   296,   297,   298,   299,   300,  1014,   301,
   302,   303,   304,   305,   306,   307,   308,   309,  1015,  1016,
  1393,  1048,  1017,   310,  1018,  1020,  1021,  1022,  1081,  1049,
  1083,  1023,  1086,    90,    91,  1051,  1024,  1026,  1044,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   906,  1027,  1053,  1433,  1434,  1435,  1436,
  1437,  1438,  1439,  1440,  1441,  1443,  1445,  1447,  1057,  1058,
  1059,  1062,  1063,  1064,  1067,  1068,  1069,  1070,  1071,  1072,
  1460,  1073,  1244,  1082,  1245,  1084,  1087,  1248,   296,   297,
   298,   299,   300,  1091,   301,   302,   303,   304,   305,   306,
   307,   308,   309,  1264,  1095,  1102,  1105,  1106,   310,  1107,
  1108,  1109,  1111,  1112,  1492,  1491,  1115,  1114,  1116,  1118,
  1117,  1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,
  1506,  1124,  1508,  1125,  1510,  1128,  1129,  1130,  1147,  1153,
  1165,  1148,  1149,    90,    91,  1151,  1522,  1152,  1154,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,  1157,  1162,  1163,  1539,  1540,  1168,  1170,
  1177,  1544,  1545,  1546,  1547,  1548,  1549,  1178,  1184,  1182,
  1185,   125,   126,   548,  1186,  1187,  1188,   127,  1190,  1191,
  1192,  1196,   130,  1221,  1345,   694,  1231,  1233,   695,  1239,
  1197,  1569,  1353,  1354,  1198,  1200,  1573,  1574,  1575,  1576,
  1577,  1578,  1580,  1582,  1584,  1201,  1203,  1218,    26,    27,
    28,    29,    30,    31,    32,    33,  1220,    34,  1243,    36,
    37,  1249,    39,    40,  1603,  1604,  1605,  1606,  1607,  1608,
  1609,  1250,  1611,  1253,  1613,  1255,  1258,  1257,  1259,    52,
  1260,  1261,  1263,  1265,  1266,  1268,  1269,  1286,   345,  1271,
  1288,  1289,  1623,  1624,  1625,    53,    54,    55,  1296,  1308,
  1297,  1305,  1306,  1310,  1311,  1312,  1637,  1638,  1639,  1641,
  1643,  1645,  1314,  1340,  1317,  1420,  1342,  1346,  1424,  1347,
  1315,  1319,  1321,  1657,  1658,  1659,  1660,  1338,  1662,  1350,
  1664,   125,   126,  1351,  1352,  1355,  1307,   127,  1361,  1362,
  1363,  1365,   130,  1366,  1367,   828,  1368,  1384,   829,  1388,
  1678,  1680,  1682,  1386,  1389,  1391,  1416,    64,  1392,  1689,
  1394,  1691,  1395,  1693,  1396,  1397,   296,   297,   298,   299,
   300,  1398,   301,   302,   303,   304,   305,   306,   307,   308,
   309,  1486,  1399,  1415,    90,   324,   310,  1409,  1410,  1494,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,    90,   502,  1411,  1412,  1418,  1422,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,  1425,  1426,    90,    91,  1429,  1453,
  1430,  1543,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,  1432,  1451,  1457,  1484,
  1458,  1459,  1463,  1461,  1462,  1571,  1464,  1483,  1482,  1487,
  1488,   296,   297,   298,   299,   300,  1490,   301,   302,   303,
   304,   305,   306,   307,   308,   309,  1495,  1496,    90,    91,
    92,   310,    93,  1601,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,  1507,   118,
   119,   120,  1622,  1509,  1511,  1513,  1516,  1518,  1520,  1523,
  1524,  1536,   125,   325,  1537,  1538,  1636,  1541,   127,  1554,
  1557,  1558,  1559,   130,   296,   297,   298,   299,   300,   326,
   301,   302,   303,   304,   305,   306,   307,   308,   309,  1566,
  1567,  1568,   125,   126,   310,  1570,  1586,  1600,   127,  1587,
  1225,  1602,  1226,   130,  1610,  1612,  1614,  1615,  1661,   503,
  1663,  1629,  1665,  1633,  1634,  1635,  1646,  1666,  1670,  1674,
  1675,  1676,  1690,  1692,  1227,  1228,  1694,  1696,  1697,   771,
   127,    69,    70,    71,  1094,  1229,    90,    91,   456,     0,
     0,   169,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   680,   118,   119,   120,
     0,  1050,   121,   122,   123,   124,     0,     0,     0,     0,
     0,   831,     0,     0,     0,     0,   125,   126,     0,     0,
     0,     0,   127,   128,   129,     0,   863,   130,     0,   131,
     0,   132,    90,    91,     0,     0,     0,     0,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,    90,   324,     0,     0,     0,     0,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,    90,   502,     0,     0,     0,     0,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,   126,     0,     0,     0,     0,
   127,     0,     0,     0,     0,   130,     0,     0,     0,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   296,   297,   298,   299,   300,   310,
   301,   302,   303,   304,   305,   306,   307,   308,   309,   296,
   297,   298,   299,   300,   310,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   125,   126,     0,     0,     0,     0,   127,     0,     0,     0,
     0,   130,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
   125,   462,   310,     0,   460,     0,   127,     0,   521,   -10,
     1,   130,   -10,   -53,     0,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
   125,   126,     0,     0,     0,   310,   127,     0,     0,     0,
     0,   130,   -53,   496,     0,     0,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,     0,     0,     0,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   -53,   -53,   -53,     0,     0,   310,
     0,   460,     0,   -53,     0,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,     0,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
     0,   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,     0,
     0,     0,     0,     0,     0,    52,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   -53,     2,     3,     0,
     4,    53,    54,    55,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    23,     0,    52,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,    53,    54,    55,     0,     0,   310,     0,     0,     0,
     0,     0,    24,    64,   498,     0,    25,    26,    27,    28,
    29,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,     0,     0,     0,    41,    42,    43,    44,
    45,    46,    47,   199,    48,    49,    50,    51,    52,     0,
     0,     0,     0,     0,     0,   534,     0,     0,     0,     0,
     0,     0,     0,    64,    53,    54,    55,     0,     0,     0,
     0,     0,     0,    56,     0,    57,    58,    59,    60,    61,
    62,    63,     0,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   539,   200,   201,   202,  1336,
     0,  1337,     0,     0,   203,   204,   205,   206,   207,   208,
   209,   210,   211,   212,     0,     0,    64,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,     0,   223,   224,   225,   226,   227,   228,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,   296,   297,   298,   299,   300,   702,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,     0,   296,   297,   298,   299,   300,
   706,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,     0,   296,   297,
   298,   299,   300,   707,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
     0,   296,   297,   298,   299,   300,   850,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,     0,   296,   297,   298,   299,   300,  1076,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,   296,   297,   298,
   299,   300,  1247,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,     0,
   296,   297,   298,   299,   300,  1292,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,     0,   296,   297,   298,   299,   300,  1294,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,     0,   296,   297,   298,   299,
   300,  1300,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,     0,   296,
   297,   298,   299,   300,  1303,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,   296,   297,   298,   299,   300,  1304,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,     0,   296,   297,   298,   299,   300,
  1339,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,     0,   296,   297,
   298,   299,   300,  1385,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
     0,   296,   297,   298,   299,   300,  1387,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,     0,   296,   297,   298,   299,   300,  1390,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,   296,   297,   298,
   299,   300,  1414,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,     0,
   296,   297,   298,   299,   300,  1556,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,     0,   296,   297,   298,   299,   300,  1585,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,   521,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
   522,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,   641,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,   642,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,   655,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,   656,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,   657,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,   658,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,   659,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,   660,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,   720,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
   721,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,   722,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,   848,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,   849,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,   984,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,   985,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,   998,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,   999,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1030,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1031,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1032,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1033,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1034,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1035,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1036,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1037,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1038,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1039,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1040,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1041,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1042,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1043,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1054,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1061,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1171,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1172,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1180,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1183,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1194,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1199,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1202,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1204,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1205,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1206,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1207,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1208,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1209,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1210,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1211,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1212,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1213,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1214,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1215,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1216,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1217,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1222,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1223,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1313,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1322,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1323,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1324,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1325,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1326,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1327,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1328,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1329,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1330,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1335,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1400,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1401,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1402,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1403,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1404,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1405,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1406,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1407,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1408,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1465,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1466,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1467,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1468,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1469,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1470,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1471,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1472,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1473,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1521,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1525,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1526,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1527,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1528,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1529,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1530,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1555,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1560,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1561,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1562,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1563,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1564,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1565,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1588,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1589,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1590,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1591,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1592,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1593,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1616,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1617,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1618,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1630,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1631,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1632,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1647,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1648,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1649,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   466,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   587,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   620,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   622,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   624,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   626,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   628,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   630,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   632,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   634,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   636,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   638,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   640,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   644,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   646,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   648,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   650,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   652,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   654,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   724,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   922,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   924,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   926,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   928,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   929,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,  1052,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   490,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   492,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   493,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   495,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   499,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   500,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   507,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   542,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   543,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   546,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   549,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   619,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   621,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   623,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   625,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   627,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   629,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   631,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   633,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   635,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   637,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   639,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   643,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   645,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   647,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   649,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   651,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   653,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   687,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   690,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   703,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   704,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   708,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   709,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   710,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   711,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   712,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   730,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   734,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   921,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   923,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   925,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   927,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   988,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,  1077,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,  1099,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,  1189,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,  1193,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,  1195,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,  1316,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,  1318,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,  1320,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,  1331,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
  1332,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,  1333,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,  1334,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,  1413,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,  1531,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,  1532,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,  1533,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,  1619,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,  1620,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,  1621,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
  1667,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,  1668,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,  1669,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310
};

static const short yycheck[] = {    23,
   280,   281,   282,    88,    23,   290,   326,  1236,     4,   810,
     4,  1240,     4,     4,     4,   351,     3,    42,  1091,    89,
  1005,     6,   182,     7,     6,     4,    65,     3,   188,  1014,
    65,    70,    64,   171,   172,    70,  1021,    64,     6,     6,
     5,     4,    65,     4,     5,   171,   172,    70,   183,   187,
  1170,   189,   187,    65,    80,    65,    65,   183,    70,   152,
    70,    70,   171,   172,    49,   171,   172,    65,     7,    34,
    35,    36,    70,    34,    35,    36,    38,   183,   187,    41,
   189,   171,   172,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,   187,   182,   189,
   184,   125,   126,   127,   288,     6,   130,   131,     6,   133,
  1183,   103,   182,    92,    93,     6,   140,   141,   142,   143,
     6,   145,   146,   183,   148,   149,   150,   187,   152,    92,
    93,   171,   172,   173,   174,   175,   107,   108,   109,   110,
   111,   181,   326,   944,   168,   169,   122,   123,   124,   125,
   126,   127,   128,   129,   189,   182,   188,   182,     6,     7,
   177,   188,   186,   187,   181,   189,   189,   191,   192,   489,
   178,   179,   198,   157,   158,   159,   160,   189,   186,   189,
   189,   466,   182,   503,   184,   172,   182,   467,  1417,   171,
   172,   189,  1421,   182,   188,   184,   188,   188,   188,  1184,
     8,   189,   182,  1188,   171,   172,    46,    38,   188,   233,
    41,    42,     6,    44,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,  1485,   178,   179,   182,
  1489,   184,   182,   184,   288,   186,  1386,   178,   179,  1389,
     7,   290,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   171,   172,   171,
   172,   178,   179,   317,   182,     6,   320,   184,   182,   186,
     3,   325,   326,   182,   188,   489,   188,   331,   332,   333,
   182,   335,   336,   337,   338,   339,   340,   341,     6,   503,
   183,     7,   171,   172,   187,  1310,  1311,  1312,  1313,   353,
   354,   355,  1317,  1453,   358,   171,   172,  1457,   182,   188,
   184,   183,   366,    54,   664,   187,    55,    56,   372,     7,
  1151,    42,   188,   161,   162,   163,   164,   165,   182,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   171,   172,
   183,   171,   172,   181,   187,   695,    38,   182,   151,    41,
    42,   189,    42,   156,   187,   665,     8,   187,   163,   164,
   165,   410,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   171,   172,    43,    44,   178,   181,     6,     7,  1394,
  1395,   184,   185,  1398,     6,   171,   172,   187,   171,   172,
   157,   158,   159,   160,   171,   172,    42,   171,   172,   171,
   172,   187,   171,   172,   187,   183,     6,   182,   462,   187,
   187,   178,   179,   187,   468,   187,   182,   466,   187,   186,
   161,   162,   163,   164,   165,   182,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   489,    44,   173,   174,   175,
   181,   157,   158,   159,   160,   181,  1461,   501,   182,   503,
   664,   505,   506,   182,   668,   184,   188,   511,   178,   179,
   188,   188,   178,   179,   184,    42,   186,   521,   522,   157,
   158,   159,   160,   182,    41,    42,   530,    44,   182,   829,
   184,   695,   182,   537,   184,     6,     6,   802,   803,   182,
   178,   179,     6,   547,   548,   165,   182,   167,   184,    58,
    59,    60,    61,   173,    63,   182,   182,   184,  1523,   161,
   162,   163,   164,   165,     4,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   182,   182,   184,   184,   182,   181,
   184,   183,   182,   182,   184,   184,     4,    42,   587,   161,
   162,   163,   164,   165,  1559,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   182,   182,   184,   184,   182,   181,
   184,   161,   162,   163,   164,   165,   236,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   182,     6,   184,     5,
   182,   181,   184,   182,   187,   184,   189,   641,   642,   184,
   187,   186,   189,   187,   187,   189,   189,   187,   187,   189,
   189,   655,   656,   657,   658,   659,   660,   661,   182,   182,
   664,   977,   182,   182,   668,   829,   187,   671,   189,   187,
     6,   189,     6,   187,   934,   189,   680,     5,   182,   164,
   165,  1646,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   695,   696,   187,   182,   189,   181,   187,   187,   189,
   189,   188,   182,   768,   187,   184,   189,     6,   461,   187,
   187,   189,   189,   973,   187,   187,   189,   189,   187,   182,
   189,   725,   726,   188,     8,   729,   188,     4,   348,   349,
     3,     4,   182,   737,   738,   182,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   187,     6,   189,   187,   187,   189,   189,   182,   772,   773,
   774,   775,   776,   777,   778,   779,   780,   781,   782,   783,
   784,   785,   161,   162,   163,   164,   165,   182,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   187,   182,   189,
   188,   188,   181,   188,   803,     6,    95,   811,     6,   813,
   161,   162,   163,   164,   165,   182,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   829,   182,   831,   182,   833,
   181,     5,   182,   182,   182,   182,   187,   182,   189,   182,
   182,   182,   182,   847,   848,   849,   183,  1163,   187,   182,
   182,   182,   182,   182,     4,   182,   182,   182,   182,   863,
   864,   867,   161,   162,   163,   164,   165,   182,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   161,   162,   163,
   164,   165,   181,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   182,   187,   182,   182,   182,   181,   171,   172,
   520,   182,   182,   182,   177,   181,   905,   182,   182,   182,
     7,     7,   185,     7,   186,   188,   161,   162,   163,   164,
   165,     7,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   935,   685,   686,   183,   688,   181,     7,     7,   692,
   693,    90,   188,   161,   162,   163,   164,   165,     6,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   153,   963,
   964,     5,  1027,   181,     5,     5,     5,     5,     5,   973,
     5,   189,     5,     5,   727,   728,     6,     5,   731,     5,
   984,   985,     5,     5,     5,     5,     5,     5,     5,     5,
   996,   995,   745,   746,   998,     5,     5,     5,   751,   752,
     5,   140,     5,     5,  1008,   758,     5,   760,     5,     3,
     5,  1015,  1016,  1017,     5,   187,     6,     5,  1022,   183,
     6,     4,  1026,     7,     6,     6,  1030,  1031,  1032,  1033,
  1034,  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1042,  1043,
   167,   168,   169,   170,   171,   172,   173,   174,   175,     7,
  1054,     7,     7,     6,   181,     6,   186,  1061,     7,     7,
     7,   189,   188,   683,   189,   188,     7,     7,   182,   822,
     7,   824,   154,     5,  1078,   187,   187,   187,   187,   187,
   187,   834,   835,   836,   187,   187,   839,   840,   841,   842,
   843,   844,   845,  1097,     6,  1101,   187,   187,   187,   187,
   720,   721,   722,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   182,   739,
   187,   187,   187,   181,   187,   187,   187,   187,   748,   183,
   187,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   182,     6,     4,     6,
     4,   181,  1412,   187,     6,     6,   187,   182,   187,     7,
   187,   185,  1166,  1167,     6,  1169,     7,  1171,  1172,   182,
     7,     7,   187,   187,  1178,   187,   187,   184,     6,     6,
   933,   187,  1186,     7,   182,     7,   182,   188,     7,   182,
  1194,     7,     7,   182,     7,  1199,     7,   182,  1202,     7,
  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,   182,   182,   182,   182,  1222,   182,
  1480,  1225,  1482,  1227,  1228,  1229,     7,     7,     7,   150,
     3,     3,     3,     3,   173,     3,     3,     3,     3,   992,
     3,     3,     3,  1249,     3,     3,   999,     3,     5,   161,
   162,   163,   164,   165,     5,   167,   168,   169,   170,   171,
   172,   173,   174,   175,     3,  1018,     3,   183,     6,   181,
     4,   186,   183,     6,  1534,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,  1293,
     7,  1295,   186,     6,     6,     6,     6,  1301,     6,   188,
     6,     6,    91,  1309,   188,   187,   187,   183,   187,   183,
   187,   183,   187,   183,   187,   183,   187,   183,  1322,  1323,
  1324,  1325,  1326,  1327,  1328,  1329,  1330,   187,   183,   949,
     6,  1335,  1336,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   187,   187,
  1356,     6,   187,   181,   187,   187,   187,   187,   978,     4,
   980,   187,   982,     3,     4,     6,   187,   187,   186,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   189,   187,    92,  1400,  1401,  1402,  1403,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,     6,     6,
   185,     6,     6,     6,     6,     6,     6,     6,     6,     6,
  1426,     6,  1175,     6,  1177,     6,     6,  1180,   161,   162,
   163,   164,   165,     7,   167,   168,   169,   170,   171,   172,
   173,   174,   175,  1196,    91,     3,     6,     3,   181,     6,
   173,     6,     6,     3,  1460,  1459,     3,     6,     6,     3,
     6,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
  1474,     6,  1476,     3,  1478,     3,     3,     6,     4,   186,
   189,     6,     6,     3,     4,     7,  1492,     6,   186,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   185,     6,   188,  1520,  1521,   188,   188,
   188,  1525,  1526,  1527,  1528,  1529,  1530,    88,   187,   183,
   187,   171,   172,     8,   187,   183,   187,   177,   187,   183,
   183,   187,   182,     4,  1297,   185,  1166,  1167,   188,  1169,
   183,  1555,  1305,  1306,   183,   187,  1560,  1561,  1562,  1563,
  1564,  1565,  1566,  1567,  1568,   183,   187,   183,    38,    39,
    40,    41,    42,    43,    44,    45,    93,    47,    91,    49,
    50,   150,    52,    53,  1588,  1589,  1590,  1591,  1592,  1593,
  1594,     6,  1596,     3,  1598,     6,     3,     6,     6,    69,
     6,     6,     6,     6,     6,     3,     6,     6,  1228,     5,
     5,   189,  1616,  1617,  1618,    85,    86,    87,     6,   189,
   188,   188,   187,   187,   187,   187,  1630,  1631,  1632,  1633,
  1634,  1635,   183,     6,   187,  1388,     6,     6,  1391,     6,
   183,   183,   187,  1647,  1648,  1649,  1650,   187,  1652,     6,
  1654,   171,   172,     6,     6,     6,     6,   177,     6,     6,
     6,     6,   182,     6,     6,   185,     5,     5,   188,   187,
  1674,  1675,  1676,   188,   188,   187,     6,   147,   189,  1683,
   187,  1685,   187,  1687,   183,   183,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,  1454,   187,   187,     3,     4,   181,   188,   188,  1462,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     3,     4,   188,   188,     6,     6,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    88,   150,     3,     4,     6,   188,
     6,  1524,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     5,     5,   188,     6,
   189,   188,   183,   187,   187,  1558,   183,   189,   188,     6,
     6,   161,   162,   163,   164,   165,    88,   167,   168,   169,
   170,   171,   172,   173,   174,   175,     6,     6,     3,     4,
     5,   181,     7,  1586,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     6,    34,
    35,    36,  1615,     6,     6,     6,     6,   189,   188,   187,
   187,     6,   171,   172,     6,     6,  1629,   155,   177,     6,
   156,   187,   187,   182,   161,   162,   163,   164,   165,   188,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   188,
   188,   188,   171,   172,   181,     6,   187,     6,   177,   183,
   187,     6,   189,   182,     6,     6,     6,   187,     6,   188,
     6,   187,     6,   188,   188,   188,   187,   183,     6,   188,
   188,   188,     6,     6,   171,   172,     6,     0,     0,   589,
   177,     7,     7,     7,   990,   182,     3,     4,     5,    -1,
    -1,   188,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     8,    34,    35,    36,
    -1,   938,   157,   158,   159,   160,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,    -1,   171,   172,    -1,    -1,
    -1,    -1,   177,   178,   179,    -1,     8,   182,    -1,   184,
    -1,   186,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   171,   172,    -1,    -1,    -1,    -1,
   177,    -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   161,   162,   163,   164,   165,   181,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   161,
   162,   163,   164,   165,   181,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   171,   172,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
    -1,   182,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
   171,   172,   181,    -1,   183,    -1,   177,    -1,   187,     0,
     1,   182,     3,     4,    -1,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   171,   172,    -1,    -1,    -1,   181,   177,    -1,    -1,    -1,
    -1,   182,    33,   189,    -1,    -1,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    51,    52,    53,    -1,    -1,    -1,    57,    58,    59,    60,
    61,    62,    63,    -1,    65,    66,    67,    68,    69,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    85,    86,    87,    -1,    -1,   181,
    -1,   183,    -1,    94,    -1,    96,    97,    98,    99,   100,
   101,   102,    -1,    -1,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    -1,    49,    50,    -1,    52,    53,
    -1,   122,   123,   124,   125,   126,   127,   128,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
   151,    85,    86,    87,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    -1,    49,    50,    -1,    52,    53,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     4,    -1,    69,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    85,    86,    87,    -1,    -1,   181,    -1,    -1,    -1,
    -1,    -1,    33,   147,   189,    -1,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    47,    48,    49,    50,
    51,    52,    53,    -1,    -1,    -1,    57,    58,    59,    60,
    61,    62,    63,    41,    65,    66,    67,    68,    69,    -1,
    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   147,    85,    86,    87,    -1,    -1,    -1,
    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
   101,   102,    -1,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   189,   104,   105,   106,   187,
    -1,   189,    -1,    -1,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,   147,    -1,    -1,    -1,
    -1,    -1,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,    -1,   141,   142,   143,   144,   145,   146,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,   161,   162,   163,   164,   165,   189,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,
   189,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,
   163,   164,   165,   189,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
    -1,   161,   162,   163,   164,   165,   189,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,   189,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,   163,
   164,   165,   189,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
   161,   162,   163,   164,   165,   189,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,    -1,   161,   162,   163,   164,   165,   189,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,
   165,   189,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,
   162,   163,   164,   165,   189,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,   161,   162,   163,   164,   165,   189,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,
   189,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,
   163,   164,   165,   189,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
    -1,   161,   162,   163,   164,   165,   189,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,   189,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,   163,
   164,   165,   189,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
   161,   162,   163,   164,   165,   189,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,    -1,   161,   162,   163,   164,   165,   189,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 158 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 166 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 167 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 172 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 186 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 193 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 210 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 211 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 212 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 217 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 222 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 233 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 236 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 240 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 246 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 252 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 259 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 265 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 269 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 273 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 280 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 284 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 289 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 293 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 297 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 301 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 305 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 309 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 313 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 317 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 323 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 329 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 333 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 337 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 341 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 345 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 350 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 353 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 357 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 360 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 370 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 380 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 383 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 405 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 409 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c,yyvsp[-2].l,tmpstring);
      if(i<0) 
	vyyerror("Too few arguments in Printf");
      else if(i>0)
	vyyerror("Too many arguments (%d) in Printf", i);
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 427 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 431 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 438 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 86:
#line 459 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 461 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 466 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 89:
#line 471 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 90:
#line 478 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 480 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 485 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 93:
#line 490 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 94:
#line 497 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 499 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 504 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 509 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 98:
#line 516 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 518 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 524 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 530 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 102:
#line 537 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 539 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 545 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 551 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 106:
#line 558 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 560 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 566 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 572 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 110:
#line 579 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 581 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 588 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 597 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 114:
#line 604 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 606 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 613 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 622 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 118:
#line 629 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 631 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 638 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 647 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 122:
#line 654 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 656 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 664 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 673 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 126:
#line 680 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 682 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 690 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 699 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 130:
#line 706 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 131:
#line 708 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 716 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 133:
#line 725 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 134:
#line 732 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 135:
#line 737 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 136:
#line 745 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 137:
#line 752 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 138:
#line 759 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 139:
#line 764 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 140:
#line 772 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 141:
#line 779 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 142:
#line 790 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 143:
#line 791 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 144:
#line 792 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 145:
#line 793 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 146:
#line 794 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 147:
#line 797 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 148:
#line 798 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 149:
#line 805 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 150:
#line 832 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 151:
#line 866 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 152:
#line 913 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 153:
#line 928 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 154:
#line 937 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 155:
#line 952 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 156:
#line 964 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 157:
#line 978 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 158:
#line 1001 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 159:
#line 1025 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 160:
#line 1037 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 161:
#line 1051 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 162:
#line 1063 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 163:
#line 1077 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 164:
#line 1093 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 165:
#line 1109 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins){
      try {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
      }
      catch (...) {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
    }
#endif
  ;
    break;}
case 166:
#line 1122 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins){
      try {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
      }
      catch (...) {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
    }
#endif
  ;
    break;}
case 167:
#line 1146 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1153 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1159 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1178 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 171:
#line 1189 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 172:
#line 1197 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1203 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1209 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 175:
#line 1228 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1234 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1240 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 178:
#line 1257 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 179:
#line 1263 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1269 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1275 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 182:
#line 1286 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BEZIER,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 183:
#line 1297 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		 "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
		 (int)yyvsp[-8].d, 
		 List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
	for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
	  List_Read(yyvsp[-5].l,i,&d);
	  j = (int)d;
	  List_Add(Temp,&j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 184:
#line 1319 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 185:
#line 1331 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1337 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 187:
#line 1356 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 188:
#line 1379 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 189:
#line 1387 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 190:
#line 1391 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 191:
#line 1397 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 192:
#line 1403 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 193:
#line 1415 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 194:
#line 1421 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 195:
#line 1427 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 196:
#line 1440 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 197:
#line 1445 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 198:
#line 1450 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1455 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 200:
#line 1462 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 201:
#line 1463 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 202:
#line 1464 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 203:
#line 1469 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 204:
#line 1473 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 205:
#line 1485 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 206:
#line 1503 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 207:
#line 1510 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 208:
#line 1515 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 209:
#line 1527 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 210:
#line 1594 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 211:
#line 1614 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins)
      GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
#endif
   ;
    break;}
case 212:
#line 1621 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 213:
#line 1625 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 214:
#line 1647 "Gmsh.y"
{
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 215:
#line 1658 "Gmsh.y"
{
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 216:
#line 1669 "Gmsh.y"
{
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 217:
#line 1691 "Gmsh.y"
{
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 218:
#line 1713 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 219:
#line 1734 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yyname,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 220:
#line 1740 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yyname,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 221:
#line 1745 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yyname,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 222:
#line 1750 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 223:
#line 1754 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1766 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,
			   &pc,&prc,NULL);
    ;
    break;}
case 225:
#line 1773 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 226:
#line 1780 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 227:
#line 1789 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,NULL);
    ;
    break;}
case 228:
#line 1794 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 229:
#line 1799 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 230:
#line 1804 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 231:
#line 1809 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			   0.,0.,0.,0.,0.,0.,0.,&extr);
    ;
    break;}
case 232:
#line 1814 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 233:
#line 1819 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,&extr);
    ;
    break;}
case 234:
#line 1824 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 235:
#line 1829 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,&extr);
    ;
    break;}
case 236:
#line 1837 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			     0.,0.,0.,0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 237:
#line 1842 "Gmsh.y"
{
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 238:
#line 1847 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 239:
#line 1852 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 240:
#line 1857 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			     0.,0.,0.,0.,0.,0.,0.,vol,&extr);
    ;
    break;}
case 241:
#line 1863 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 242:
#line 1869 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 243:
#line 1875 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 244:
#line 1881 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 245:
#line 1890 "Gmsh.y"
{
    ;
    break;}
case 246:
#line 1893 "Gmsh.y"
{
    ;
    break;}
case 247:
#line 1899 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	  List_Read(yyvsp[-6].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (int)d;
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	vyyerror("Wrong layer definition {%d, %d, %d}", 
	       List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 248:
#line 1925 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-4].l);i++){
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (int)d;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	vyyerror("Wrong layer definition {%d, %d}", 
	       List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 249:
#line 1949 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 250:
#line 1960 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 251:
#line 1978 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 252:
#line 1996 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 253:
#line 2014 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 254:
#line 2036 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 255:
#line 2057 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	Msg(WARNING, "Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 256:
#line 2078 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 257:
#line 2092 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 258:
#line 2114 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 259:
#line 2118 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 260:
#line 2129 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 261:
#line 2130 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 262:
#line 2131 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 263:
#line 2132 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 264:
#line 2133 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 265:
#line 2137 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 266:
#line 2138 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 267:
#line 2139 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 268:
#line 2140 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 269:
#line 2141 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 270:
#line 2142 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 271:
#line 2143 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 272:
#line 2144 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 273:
#line 2146 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 274:
#line 2152 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 275:
#line 2153 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 276:
#line 2154 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 277:
#line 2155 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 278:
#line 2156 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 279:
#line 2157 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 280:
#line 2158 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 281:
#line 2159 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 282:
#line 2160 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 283:
#line 2161 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 284:
#line 2162 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 285:
#line 2163 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 286:
#line 2164 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 287:
#line 2165 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 288:
#line 2166 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 289:
#line 2167 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 290:
#line 2168 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 291:
#line 2169 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 292:
#line 2170 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 293:
#line 2171 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 294:
#line 2172 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 295:
#line 2173 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 296:
#line 2174 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 297:
#line 2175 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 298:
#line 2176 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 299:
#line 2177 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 300:
#line 2178 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 301:
#line 2179 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 302:
#line 2180 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 303:
#line 2181 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 304:
#line 2182 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 305:
#line 2183 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 306:
#line 2185 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 307:
#line 2186 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 308:
#line 2187 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 309:
#line 2188 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 310:
#line 2189 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 311:
#line 2190 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 312:
#line 2191 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 313:
#line 2192 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 314:
#line 2193 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 315:
#line 2194 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 316:
#line 2195 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 317:
#line 2196 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 318:
#line 2197 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 319:
#line 2198 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 320:
#line 2199 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 321:
#line 2200 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 322:
#line 2201 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 323:
#line 2202 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 324:
#line 2203 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 325:
#line 2204 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 326:
#line 2205 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 327:
#line 2214 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 328:
#line 2215 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 329:
#line 2216 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 330:
#line 2217 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 331:
#line 2222 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 332:
#line 2233 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 333:
#line 2250 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 334:
#line 2261 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 335:
#line 2280 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 336:
#line 2296 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 337:
#line 2312 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 338:
#line 2328 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 339:
#line 2346 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 340:
#line 2350 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 341:
#line 2354 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 342:
#line 2358 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 343:
#line 2362 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 344:
#line 2368 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 345:
#line 2372 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 346:
#line 2376 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 347:
#line 2380 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 348:
#line 2387 "Gmsh.y"
{
    ;
    break;}
case 349:
#line 2390 "Gmsh.y"
{
    ;
    break;}
case 350:
#line 2396 "Gmsh.y"
{
    ;
    break;}
case 351:
#line 2399 "Gmsh.y"
{
    ;
    break;}
case 352:
#line 2405 "Gmsh.y"
{
    ;
    break;}
case 353:
#line 2408 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 354:
#line 2412 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 355:
#line 2419 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 356:
#line 2424 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 357:
#line 2432 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 358:
#line 2437 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 359:
#line 2441 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 360:
#line 2445 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 361:
#line 2456 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 362:
#line 2462 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 363:
#line 2473 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 364:
#line 2487 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 365:
#line 2503 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 366:
#line 2523 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 367:
#line 2548 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 368:
#line 2553 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 369:
#line 2557 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 370:
#line 2561 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 371:
#line 2573 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 372:
#line 2577 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 373:
#line 2588 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 374:
#line 2593 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 375:
#line 2612 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 376:
#line 2616 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 377:
#line 2630 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 378:
#line 2635 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 379:
#line 2642 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 380:
#line 2646 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 381:
#line 2654 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 382:
#line 2667 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 383:
#line 2671 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c,yyvsp[-1].l,tmpstring);
      if(i<0){
	vyyerror("Too few arguments in Sprintf");
	yyval.c = "";
      }
      else if(i>0){
	vyyerror("Too many arguments (%d) in Sprintf", i);
	yyval.c = "";
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
      }
      Free(yyvsp[-3].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 384:
#line 2689 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 385:
#line 2703 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2718 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0 ; i<List_Nbr(list) ; i++){
    k = j;
    j++;
    if(j<(int)strlen(format)){
      if(format[j]=='%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j]!='%' && j<(int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]),j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list,i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
      break ;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


