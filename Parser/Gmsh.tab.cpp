
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPrintf	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tBump	302
#define	tProgression	303
#define	tRotate	304
#define	tTranslate	305
#define	tSymmetry	306
#define	tDilate	307
#define	tExtrude	308
#define	tDuplicata	309
#define	tLoop	310
#define	tInclude	311
#define	tRecombine	312
#define	tDelete	313
#define	tCoherence	314
#define	tView	315
#define	tAttractor	316
#define	tLayers	317
#define	tScalarTetrahedron	318
#define	tVectorTetrahedron	319
#define	tTensorTetrahedron	320
#define	tScalarTriangle	321
#define	tVectorTriangle	322
#define	tTensorTriangle	323
#define	tScalarLine	324
#define	tVectorLine	325
#define	tTensorLine	326
#define	tScalarPoint	327
#define	tVectorPoint	328
#define	tTensorPoint	329
#define	tBSpline	330
#define	tNurbs	331
#define	tOrder	332
#define	tWith	333
#define	tBounds	334
#define	tKnots	335
#define	tColor	336
#define	tOptions	337
#define	tFor	338
#define	tEndFor	339
#define	tScript	340
#define	tExit	341
#define	tMerge	342
#define	tB_SPLINE_SURFACE_WITH_KNOTS	343
#define	tB_SPLINE_CURVE_WITH_KNOTS	344
#define	tCARTESIAN_POINT	345
#define	tTRUE	346
#define	tFALSE	347
#define	tUNSPECIFIED	348
#define	tU	349
#define	tV	350
#define	tEDGE_CURVE	351
#define	tVERTEX_POINT	352
#define	tORIENTED_EDGE	353
#define	tPLANE	354
#define	tFACE_OUTER_BOUND	355
#define	tEDGE_LOOP	356
#define	tADVANCED_FACE	357
#define	tVECTOR	358
#define	tDIRECTION	359
#define	tAXIS2_PLACEMENT_3D	360
#define	tISO	361
#define	tENDISO	362
#define	tENDSEC	363
#define	tDATA	364
#define	tHEADER	365
#define	tFILE_DESCRIPTION	366
#define	tFILE_SCHEMA	367
#define	tFILE_NAME	368
#define	tMANIFOLD_SOLID_BREP	369
#define	tCLOSED_SHELL	370
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	371
#define	tFACE_BOUND	372
#define	tCYLINDRICAL_SURFACE	373
#define	tCONICAL_SURFACE	374
#define	tCIRCLE	375
#define	tTRIMMED_CURVE	376
#define	tGEOMETRIC_SET	377
#define	tCOMPOSITE_CURVE_SEGMENT	378
#define	tCONTINUOUS	379
#define	tCOMPOSITE_CURVE	380
#define	tTOROIDAL_SURFACE	381
#define	tPRODUCT_DEFINITION	382
#define	tPRODUCT_DEFINITION_SHAPE	383
#define	tSHAPE_DEFINITION_REPRESENTATION	384
#define	tELLIPSE	385
#define	tTrimmed	386
#define	tSolid	387
#define	tEndSolid	388
#define	tVertex	389
#define	tFacet	390
#define	tNormal	391
#define	tOuter	392
#define	tLoopSTL	393
#define	tEndLoop	394
#define	tEndFacet	395
#define	tAFFECTPLUS	396
#define	tAFFECTMINUS	397
#define	tAFFECTTIMES	398
#define	tAFFECTDIVIDE	399
#define	tAND	400
#define	tOR	401
#define	tNOTEQUAL	402
#define	tEQUAL	403
#define	tAPPROXEQUAL	404
#define	tLESSOREQUAL	405
#define	tGREATEROREQUAL	406
#define	tCROSSPRODUCT	407
#define	UNARYPREC	408
#define	tPLUSPLUS	409
#define	tMINUSMINUS	410

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.22 2000-12-07 01:03:38 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 59 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1492
#define	YYFLAG		-32768
#define	YYNTBASE	175

#define YYTRANSLATE(x) ((unsigned)(x) <= 410 ? yytranslate[x] : 255)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   163,     2,     2,     2,   160,     2,     2,   167,
   169,   158,   156,   168,   157,   172,   159,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   152,
     2,   153,   146,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   173,     2,   174,   164,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   170,     2,   171,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   147,
   148,   149,   150,   151,   154,   155,   161,   162,   165,   166
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   527,   532,   535,   543,
   550,   559,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   590,   593,   596,   598,   602,   603,   617,   619,
   623,   624,   638,   640,   644,   645,   659,   661,   665,   666,
   686,   688,   692,   693,   713,   715,   719,   720,   740,   742,
   746,   747,   773,   775,   779,   780,   806,   808,   812,   813,
   839,   841,   845,   846,   878,   880,   884,   885,   917,   919,
   923,   924,   956,   961,   966,   971,   976,   981,   986,   991,
   999,  1008,  1021,  1028,  1034,  1042,  1050,  1063,  1071,  1081,
  1099,  1107,  1116,  1125,  1133,  1145,  1151,  1160,  1170,  1179,
  1202,  1223,  1232,  1241,  1247,  1256,  1264,  1273,  1279,  1291,
  1297,  1307,  1309,  1311,  1313,  1314,  1317,  1322,  1327,  1331,
  1335,  1338,  1342,  1349,  1358,  1360,  1369,  1382,  1391,  1404,
  1413,  1426,  1438,  1454,  1456,  1459,  1469,  1472,  1479,  1489,
  1499,  1508,  1517,  1526,  1533,  1538,  1541,  1542,  1545,  1547,
  1554,  1566,  1573,  1585,  1592,  1604,  1611,  1623,  1630,  1642,
  1649,  1661,  1667,  1679,  1685,  1697,  1704,  1716,  1723,  1735,
  1742,  1754,  1763,  1764,  1767,  1769,  1771,  1773,  1775,  1777,
  1779,  1781,  1785,  1788,  1791,  1794,  1798,  1802,  1806,  1810,
  1814,  1818,  1822,  1826,  1830,  1834,  1838,  1842,  1846,  1850,
  1856,  1861,  1866,  1871,  1876,  1881,  1886,  1891,  1896,  1901,
  1906,  1913,  1918,  1923,  1928,  1933,  1938,  1943,  1950,  1957,
  1964,  1966,  1968,  1970,  1974,  1983,  1988,  1998,  2003,  2013,
  2017,  2023,  2025,  2028,  2031,  2035,  2039,  2051,  2061,  2069,
  2077,  2081,  2090,  2091,  2095,  2097,  2101,  2102,  2106,  2110,
  2112,  2116,  2117,  2119,  2123,  2125,  2127,  2131,  2135,  2145,
  2153,  2159,  2161
};

static const short yyrhs[] = {   177,
     0,   176,     0,   182,     0,   133,     0,   136,   137,   243,
   243,   243,   138,   139,   135,   243,   243,   243,   135,   243,
   243,   243,   135,   243,   243,   243,   140,   141,     0,   134,
     0,     0,   177,   178,     0,   179,     0,   181,     0,   180,
     0,     1,     6,     0,   107,     6,     0,   108,     6,     0,
   110,     6,     0,   109,     6,     0,   111,     6,     0,   112,
   167,   248,   168,     5,   169,     6,     0,   113,   167,   248,
   169,     6,     0,   114,   167,     5,   168,     5,   168,   248,
   168,   248,   168,     5,   168,     5,   168,     5,   169,     6,
     0,     3,     7,    91,   167,     5,   168,   246,   169,     6,
     0,     3,     7,    90,   167,     5,   168,   243,   168,   252,
   168,   242,   168,   242,   168,   242,   168,   252,   168,   252,
   168,   242,   169,     6,     0,     3,     7,    89,   167,     5,
   168,   243,   168,   243,   168,   250,   168,   242,   168,   242,
   168,   242,   168,   242,   168,   252,   168,   252,   168,   252,
   168,   252,   168,   242,   169,     6,     0,     3,     7,    97,
   167,     5,   168,     3,   168,     3,   168,     3,   168,   242,
   169,     6,     0,     3,     7,   101,   167,     5,   168,     3,
   168,   242,   169,     6,     0,     3,     7,   118,   167,     5,
   168,     3,   168,   242,   169,     6,     0,     3,     7,    99,
   167,     5,   168,   158,   168,   158,   168,   243,   168,   242,
   169,     6,     0,     3,     7,   102,   167,     5,   168,   252,
   169,     6,     0,     3,     7,   103,   167,     5,   168,   252,
   168,     3,   168,   242,   169,     6,     0,     3,     7,    98,
   167,     5,   168,     3,   169,     6,     0,     3,     7,   104,
   167,     5,   168,     3,   168,   243,   169,     6,     0,     3,
     7,   106,   167,     5,   168,     3,   168,     3,   168,     3,
   169,     6,     0,     3,     7,   105,   167,     5,   168,   246,
   169,     6,     0,     3,     7,   100,   167,     5,   168,     3,
   169,     6,     0,     3,     7,    34,   167,     5,   168,     3,
   168,     3,   169,     6,     0,     3,     7,   116,   167,     5,
   168,   252,   169,     6,     0,     3,     7,   117,   167,     5,
   168,   252,   168,     3,   169,     6,     0,     3,     7,   115,
   167,     5,   168,     3,   169,     6,     0,     3,     7,   119,
   167,     5,   168,     3,   168,   243,   169,     6,     0,     3,
     7,   120,   167,     5,   168,     3,   168,   243,   168,   243,
   169,     6,     0,     3,     7,   127,   167,     5,   168,     3,
   168,   243,   168,   243,   169,     6,     0,     3,     7,   121,
   167,     5,   168,     3,   168,   243,   169,     6,     0,     3,
     7,   131,   167,     5,   168,     3,   168,   243,   168,   243,
   169,     6,     0,     3,     7,   122,   167,     5,   168,     3,
   168,   252,   168,   252,   168,   242,   168,   242,   169,     6,
     0,     3,     7,   123,   167,     5,   168,   252,   169,     6,
     0,     3,     7,   124,   167,   125,   168,   242,   168,     3,
   169,     6,     0,     3,     7,   126,   167,     5,   168,   252,
   168,   242,   169,     6,     0,     3,     7,   128,   167,     5,
   168,     5,   168,     3,   168,     3,   169,     6,     0,     3,
     7,   129,   167,     5,   168,     5,   168,     3,   169,     6,
     0,     3,     7,   130,   167,     3,   168,     3,   169,     6,
     0,     0,   182,   183,     0,   185,     0,   184,     0,   223,
     0,   224,     0,   225,     0,   228,     0,   229,     0,   233,
     0,   236,     0,   237,     0,   230,     0,   232,     0,   231,
     0,    83,   170,   238,   171,     0,    86,   170,   240,   171,
     0,     1,     6,     0,    30,   167,     5,   168,   243,   169,
     6,     0,    61,     5,   170,   186,   171,     6,     0,    61,
     5,     4,   246,   170,   186,   171,     6,     0,     0,   186,
   188,     0,   186,   191,     0,   186,   194,     0,   186,   197,
     0,   186,   200,     0,   186,   203,     0,   186,   206,     0,
   186,   209,     0,   186,   212,     0,   186,   215,     0,   186,
   218,     0,   186,   221,     0,   243,     0,   187,   168,   243,
     0,     0,    73,   167,   243,   168,   243,   168,   243,   169,
   189,   170,   187,   171,     6,     0,   243,     0,   190,   168,
   243,     0,     0,    74,   167,   243,   168,   243,   168,   243,
   169,   192,   170,   190,   171,     6,     0,   243,     0,   193,
   168,   243,     0,     0,    75,   167,   243,   168,   243,   168,
   243,   169,   195,   170,   193,   171,     6,     0,   243,     0,
   196,   168,   243,     0,     0,    70,   167,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   169,   198,
   170,   196,   171,     6,     0,   243,     0,   199,   168,   243,
     0,     0,    71,   167,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   169,   201,   170,   199,   171,
     6,     0,   243,     0,   202,   168,   243,     0,     0,    72,
   167,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   169,   204,   170,   202,   171,     6,     0,   243,
     0,   205,   168,   243,     0,     0,    67,   167,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   169,   207,   170,   205,   171,
     6,     0,   243,     0,   208,   168,   243,     0,     0,    68,
   167,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   169,   210,
   170,   208,   171,     6,     0,   243,     0,   211,   168,   243,
     0,     0,    69,   167,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   168,
   243,   169,   213,   170,   211,   171,     6,     0,   243,     0,
   214,   168,   243,     0,     0,    64,   167,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   169,   216,   170,   214,   171,     6,     0,   243,     0,   217,
   168,   243,     0,     0,    65,   167,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   169,
   219,   170,   217,   171,     6,     0,   243,     0,   220,   168,
   243,     0,     0,    66,   167,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   169,   222,
   170,   220,   171,     6,     0,     4,     7,   243,     6,     0,
     4,   142,   243,     6,     0,     4,   143,   243,     6,     0,
     4,   165,   243,     6,     0,     4,   143,   243,     6,     0,
     4,   144,   243,     6,     0,     4,   145,   243,     6,     0,
    31,   167,   243,   169,     7,   246,     6,     0,    46,    31,
   167,   243,   169,     7,   252,     6,     0,    62,    31,   252,
     7,   170,   243,   168,   243,   168,   243,   171,     6,     0,
    38,    39,   252,     7,   243,     6,     0,    31,   170,   243,
   171,     6,     0,    34,   167,   243,   169,     7,   252,     6,
     0,    36,   167,   243,   169,     7,   252,     6,     0,    62,
    34,   252,     7,   170,   243,   168,   243,   168,   243,   171,
     6,     0,    32,   167,   243,   169,     7,   252,     6,     0,
    32,   167,   243,   169,     7,   252,    42,   246,     6,     0,
    40,   167,   243,   169,     7,   170,   243,   168,   243,   168,
     5,   168,     5,   168,     5,   171,     6,     0,    33,   167,
   243,   169,     7,   252,     6,     0,    46,    34,   167,   243,
   169,     7,   252,     6,     0,    34,    56,   167,   243,   169,
     7,   252,     6,     0,    76,   167,   243,   169,     7,   252,
     6,     0,    77,   167,   243,   169,     7,   252,    81,   252,
    78,   243,     6,     0,    34,   170,   243,   171,     6,     0,
    42,    35,   167,   243,   169,     7,   252,     6,     0,   132,
    35,   167,   243,   169,     7,   243,   252,     6,     0,    43,
    35,   167,   243,   169,     7,   252,     6,     0,    77,    35,
    79,    80,   167,   243,   169,     7,   250,    81,   170,   252,
   168,   252,   171,    78,   170,   243,   168,   243,   171,     6,
     0,    77,    35,   167,   243,   169,     7,   250,    81,   170,
   252,   168,   252,   171,    78,   170,   243,   168,   243,   171,
     6,     0,    46,    35,   167,   243,   169,     7,   252,     6,
     0,    35,    56,   167,   243,   169,     7,   252,     6,     0,
    35,   170,   243,   171,     6,     0,    45,    37,   167,   243,
   169,     7,   252,     6,     0,    37,   167,   243,   169,     7,
   252,     6,     0,    46,    37,   167,   243,   169,     7,   252,
     6,     0,    51,   246,   170,   226,   171,     0,    50,   170,
   246,   168,   246,   168,   243,   171,   170,   226,   171,     0,
    52,   246,   170,   226,   171,     0,    53,   170,   246,   168,
   243,   171,   170,   226,   171,     0,   228,     0,   227,     0,
   225,     0,     0,   227,   224,     0,    55,   170,   227,   171,
     0,    59,   170,   227,   171,     0,    57,     5,     6,     0,
    30,     5,     6,     0,    87,     6,     0,    88,     5,     6,
     0,    84,   167,   243,     8,   243,   169,     0,    84,   167,
   243,     8,   243,     8,   243,   169,     0,    85,     0,    54,
    31,   170,   243,   168,   246,   171,     6,     0,    54,    31,
   170,   243,   168,   246,   168,   246,   168,   243,   171,     6,
     0,    54,    34,   170,   243,   168,   246,   171,     6,     0,
    54,    34,   170,   243,   168,   246,   168,   246,   168,   243,
   171,     6,     0,    54,    35,   170,   243,   168,   246,   171,
     6,     0,    54,    35,   170,   243,   168,   246,   168,   246,
   168,   243,   171,     6,     0,    54,    35,   170,   243,   168,
   246,   171,   170,   234,   171,     6,     0,    54,    35,   170,
   243,   168,   246,   168,   246,   168,   243,   171,   170,   234,
   171,     6,     0,   235,     0,   234,   235,     0,    63,   170,
   252,   168,   252,   168,   252,   171,     6,     0,    58,     6,
     0,    44,    34,   252,     7,   243,     6,     0,    44,    34,
   252,     7,   243,    47,    49,   243,     6,     0,    44,    34,
   252,     7,   243,    47,    48,   243,     6,     0,    44,    35,
   170,   243,   171,     7,   252,     6,     0,    41,    35,   170,
   243,   171,     7,   252,     6,     0,    44,    37,   170,   243,
   171,     7,   252,     6,     0,    58,    35,   252,     7,   243,
     6,     0,    58,    35,   252,     6,     0,    60,     6,     0,
     0,   238,   239,     0,   184,     0,     4,   172,     4,     7,
     5,     6,     0,     4,   172,    61,   173,   243,   174,   172,
     4,     7,     5,     6,     0,     4,   172,     4,     7,   243,
     6,     0,     4,   172,    61,   173,   243,   174,   172,     4,
     7,   243,     6,     0,     4,   172,     4,   142,   243,     6,
     0,     4,   172,    61,   173,   243,   174,   172,     4,   142,
   243,     6,     0,     4,   172,     4,   143,   243,     6,     0,
     4,   172,    61,   173,   243,   174,   172,     4,   143,   243,
     6,     0,     4,   172,     4,   144,   243,     6,     0,     4,
   172,    61,   173,   243,   174,   172,     4,   144,   243,     6,
     0,     4,   172,     4,   145,   243,     6,     0,     4,   172,
    61,   173,   243,   174,   172,     4,   145,   243,     6,     0,
     4,   172,     4,   165,     6,     0,     4,   172,    61,   173,
   243,   174,   172,     4,   165,   243,     6,     0,     4,   172,
     4,   166,     6,     0,     4,   172,    61,   173,   243,   174,
   172,     4,   166,   243,     6,     0,     4,   172,     4,     7,
   246,     6,     0,     4,   172,    61,   173,   243,   174,   172,
     4,     7,   246,     6,     0,     4,   172,     4,   142,   246,
     6,     0,     4,   172,    61,   173,   243,   174,   172,     4,
   142,   246,     6,     0,     4,   172,     4,   143,   246,     6,
     0,     4,   172,    61,   173,   243,   174,   172,     4,   143,
   246,     6,     0,     4,   172,    82,   172,     4,     7,   254,
     6,     0,     0,   240,   241,     0,   239,     0,    92,     0,
    93,     0,    94,     0,    95,     0,    96,     0,   244,     0,
   167,   243,   169,     0,   157,   243,     0,   156,   243,     0,
   163,   243,     0,   243,   157,   243,     0,   243,   156,   243,
     0,   243,   158,   243,     0,   243,   159,   243,     0,   243,
   160,   243,     0,   243,   164,   243,     0,   243,   152,   243,
     0,   243,   153,   243,     0,   243,   154,   243,     0,   243,
   155,   243,     0,   243,   150,   243,     0,   243,   149,   243,
     0,   243,   147,   243,     0,   243,   148,   243,     0,   243,
   146,   243,     8,   243,     0,    10,   167,   243,   169,     0,
    11,   167,   243,   169,     0,    12,   167,   243,   169,     0,
    13,   167,   243,   169,     0,    14,   167,   243,   169,     0,
    15,   167,   243,   169,     0,    16,   167,   243,   169,     0,
    17,   167,   243,   169,     0,    18,   167,   243,   169,     0,
    19,   167,   243,   169,     0,    20,   167,   243,   168,   243,
   169,     0,    21,   167,   243,   169,     0,    22,   167,   243,
   169,     0,    23,   167,   243,   169,     0,    24,   167,   243,
   169,     0,    25,   167,   243,   169,     0,    26,   167,   243,
   169,     0,    27,   167,   243,   168,   243,   169,     0,    28,
   167,   243,   168,   243,   169,     0,    29,   167,   243,   168,
   243,   169,     0,     3,     0,     9,     0,     4,     0,     4,
   172,     4,     0,     4,   172,    61,   173,   243,   174,   172,
     4,     0,     4,   172,     4,   165,     0,     4,   172,    61,
   173,   243,   174,   172,     4,   165,     0,     4,   172,     4,
   166,     0,     4,   172,    61,   173,   243,   174,   172,     4,
   166,     0,   243,     8,   243,     0,   243,     8,   243,     8,
   243,     0,   247,     0,   157,   246,     0,   156,   246,     0,
   246,   157,   246,     0,   246,   156,   246,     0,   170,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   171,     0,
   170,   243,   168,   243,   168,   243,   168,   243,   171,     0,
   170,   243,   168,   243,   168,   243,   171,     0,   167,   243,
   168,   243,   168,   243,   169,     0,     4,   172,     4,     0,
     4,   172,    61,   173,   243,   174,   172,     4,     0,     0,
   167,   249,   169,     0,     5,     0,   249,   168,     5,     0,
     0,   170,   251,   171,     0,   167,   251,   169,     0,   252,
     0,   251,   168,   252,     0,     0,   243,     0,   170,   253,
   171,     0,   243,     0,   245,     0,   253,   168,   243,     0,
   253,   168,   245,     0,   170,   243,   168,   243,   168,   243,
   168,   243,   171,     0,   170,   243,   168,   243,   168,   243,
   171,     0,   170,     4,   168,   243,   171,     0,     4,     0,
     4,   172,    82,   172,     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   135,   137,   138,   145,   153,   167,   179,   181,   184,   186,
   187,   188,   191,   197,   202,   203,   204,   207,   211,   214,
   220,   225,   231,   239,   244,   248,   254,   259,   263,   268,
   272,   275,   280,   284,   288,   292,   297,   301,   304,   308,
   312,   316,   320,   324,   328,   331,   335,   338,   342,   345,
   354,   358,   364,   366,   367,   368,   369,   370,   371,   372,
   373,   374,   375,   376,   378,   379,   380,   381,   384,   395,
   400,   406,   411,   412,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   425,   428,   432,   438,   444,   447,
   451,   457,   463,   466,   470,   476,   482,   485,   489,   497,
   503,   506,   510,   518,   524,   527,   531,   539,   545,   548,
   552,   564,   570,   573,   577,   589,   595,   598,   602,   614,
   620,   623,   627,   640,   646,   649,   653,   666,   672,   675,
   679,   692,   704,   711,   719,   727,   735,   743,   751,   766,
   777,   783,   802,   813,   821,   827,   833,   852,   858,   874,
   881,   887,   893,   899,   905,   924,   936,   942,   961,   982,
   990,   996,  1002,  1008,  1020,  1026,  1032,  1044,  1050,  1055,
  1060,  1067,  1069,  1070,  1073,  1078,  1089,  1107,  1122,  1150,
  1181,  1185,  1197,  1212,  1225,  1263,  1269,  1275,  1279,  1283,
  1287,  1291,  1296,  1303,  1307,  1312,  1330,  1340,  1358,  1375,
  1392,  1413,  1433,  1453,  1470,  1494,  1505,  1507,  1510,  1517,
  1530,  1548,  1565,  1586,  1603,  1624,  1641,  1662,  1679,  1700,
  1717,  1738,  1755,  1776,  1793,  1816,  1841,  1870,  1895,  1924,
  1949,  1980,  1999,  2001,  2004,  2019,  2021,  2022,  2023,  2024,
  2027,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,
  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,
  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,
  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,
  2070,  2072,  2073,  2082,  2099,  2120,  2137,  2158,  2175,  2197,
  2204,  2217,  2222,  2226,  2230,  2234,  2239,  2244,  2248,  2252,
  2256,  2282,  2314,  2318,  2323,  2327,  2332,  2336,  2340,  2346,
  2352,  2358,  2362,  2368,  2375,  2381,  2390,  2394,  2404,  2409,
  2413,  2418,  2423
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete","tCoherence",
"tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron",
"tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine","tVectorLine",
"tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline","tNurbs",
"tOrder","tWith","tBounds","tKnots","tColor","tOptions","tFor","tEndFor","tScript",
"tExit","tMerge","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tAND","tOR","tNOTEQUAL",
"tEQUAL","tAPPROXEQUAL","'<'","'>'","tLESSOREQUAL","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC","'!'","'^'","tPLUSPLUS","tMINUSMINUS",
"'('","','","')'","'{'","'}'","'.'","'['","']'","All","STLFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeomFormatList",
"GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","Options",
"Option","Scripts","Script","BoolExpr","FExpr","FExpr_Single","FExpr_Range",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","Color", NULL
};
#endif

static const short yyr1[] = {     0,
   175,   175,   175,   176,   176,   176,   177,   177,   178,   178,
   178,   178,   179,   179,   179,   179,   179,   180,   180,   180,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   182,   182,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   184,   185,
   185,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   187,   187,   189,   188,   190,   190,
   192,   191,   193,   193,   195,   194,   196,   196,   198,   197,
   199,   199,   201,   200,   202,   202,   204,   203,   205,   205,
   207,   206,   208,   208,   210,   209,   211,   211,   213,   212,
   214,   214,   216,   215,   217,   217,   219,   218,   220,   220,
   222,   221,   223,   223,   223,   223,   223,   223,   223,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   225,   225,   225,
   225,   226,   226,   226,   227,   227,   228,   229,   230,   231,
   231,   231,   232,   232,   232,   233,   233,   233,   233,   233,
   233,   233,   233,   234,   234,   235,   235,   236,   236,   236,
   236,   236,   236,   236,   236,   237,   238,   238,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   240,   240,   241,   242,   242,   242,   242,   242,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
   245,   246,   246,   246,   246,   246,   247,   247,   247,   247,
   247,   247,   248,   248,   249,   249,   250,   250,   250,   251,
   251,   252,   252,   252,   253,   253,   253,   253,   254,   254,
   254,   254,   254
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     4,     2,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     1,     3,     0,    13,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    19,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    25,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    31,     4,     4,     4,     4,     4,     4,     4,     7,
     8,    12,     6,     5,     7,     7,    12,     7,     9,    17,
     7,     8,     8,     7,    11,     5,     8,     9,     8,    22,
    20,     8,     8,     5,     8,     7,     8,     5,    11,     5,
     9,     1,     1,     1,     0,     2,     4,     4,     3,     3,
     2,     3,     6,     8,     1,     8,    12,     8,    12,     8,
    12,    11,    15,     1,     2,     9,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     0,     2,     1,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     6,
    11,     5,    11,     5,    11,     6,    11,     6,    11,     6,
    11,     8,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     1,     1,     1,     3,     8,     4,     9,     4,     9,     3,
     5,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     3,     8,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     0,     1,     3,     1,     1,     3,     3,     9,     7,
     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   185,     0,     0,     0,     0,
    52,    54,    53,    55,    56,    57,    58,    59,    63,    65,
    64,    60,    61,    62,   281,   283,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   241,    12,     0,    13,    14,    16,    15,    17,
   303,   303,     0,    68,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   312,     0,     0,     0,     0,   312,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   292,     0,     0,     0,     0,     0,   175,
     0,   312,   175,   206,     0,   312,   312,     0,     0,     0,
   207,     0,   233,   181,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   244,   243,   245,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   180,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   313,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   294,   293,     0,
     0,     0,     0,   175,   175,     0,     0,     0,     0,     0,
   179,     0,     0,     0,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   182,     0,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   242,     0,   258,   259,   257,   256,   252,   253,   254,   255,
   244,   243,   248,   249,   250,   251,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   305,     0,     0,
     0,     0,   133,   134,   135,   138,   139,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
     0,   296,   295,   174,     0,   173,   172,     0,     0,     0,
     0,     0,   177,   176,   205,     0,   178,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    66,   209,   208,
     0,    67,   235,   234,     0,   286,   288,     0,   261,   262,
   263,   264,   265,   266,   267,   268,   269,   270,     0,   272,
   273,   274,   275,   276,   277,     0,     0,     0,   247,   246,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   304,     0,    19,     0,     0,     0,   144,
   312,   312,     0,   312,   156,     0,   164,   312,   312,     0,
     0,   314,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
   170,     0,     0,     0,     0,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,     0,     0,   312,     0,     0,   312,     0,     0,
     0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   312,   312,     0,
     0,     0,     0,   312,   312,     0,     0,     0,     0,     0,
   312,     0,   312,     0,     0,     0,     0,     0,   306,     0,
   303,     0,     0,     0,     0,   312,     0,   312,     0,     0,
   290,   317,   318,   143,     0,   312,   312,   312,   198,     0,
   312,   312,   312,   312,   312,   312,   312,     0,     0,     0,
     0,     0,     0,     0,     0,   204,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    70,
     0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
   183,     0,     0,   271,   278,   279,   280,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   236,   237,   238,   239,   240,     0,     0,     0,     0,
     0,     0,     0,    18,     0,    69,   140,   148,     0,   151,
     0,   145,     0,   146,   166,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   175,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   154,     0,   312,   312,     0,
   312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   312,     0,     0,     0,     0,   312,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   312,     0,     0,     0,     0,
     0,     0,     0,     0,   303,     0,   153,   163,   291,     0,
   202,   157,   159,     0,     0,   201,   203,   165,   141,   152,
   162,   167,     0,     0,   300,     0,   299,     0,     0,   186,
     0,   188,     0,   190,     0,    71,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,   310,     0,     0,     0,   283,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   222,
   224,     0,     0,   184,     0,   285,     0,     0,     0,     0,
    21,     0,    30,     0,    34,     0,    28,     0,     0,    33,
     0,    38,    36,     0,     0,     0,     0,     0,     0,    45,
     0,     0,     0,     0,     0,    50,     0,     0,   149,     0,
   200,   199,   175,   302,     0,   171,     0,     0,     0,     0,
     0,     0,   194,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   312,   309,
   308,   312,     0,     0,   210,     0,   212,   226,   214,   228,
   216,   230,   218,   220,     0,     0,   158,   287,   289,     0,
     0,   307,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   312,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   298,     0,     0,     0,   197,
   312,     0,   195,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     0,   284,     0,     0,   322,     0,     0,     0,    35,     0,
     0,     0,     0,    25,     0,    31,     0,    37,    26,    39,
     0,    42,     0,    46,    47,     0,     0,    49,     0,     0,
     0,   169,     0,     0,     0,     0,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   312,   312,   155,     0,     0,     0,   283,     0,
   232,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   297,   187,   189,   191,     0,
   312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    87,    91,    95,   142,   147,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    29,    32,    40,     0,    41,    48,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   312,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   211,   213,
   227,   215,   229,   217,   231,   219,   221,   223,   225,   323,
   321,     0,     0,     0,     0,    24,    27,     0,     0,     0,
   193,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    85,     0,    89,     0,    93,     0,     0,   285,
     0,     0,     0,   312,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
    44,    20,   150,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,    88,    90,    92,    94,    96,     0,
     0,     0,     0,     0,   312,     0,     0,     0,     0,     0,
     0,    99,   103,   107,     0,     0,   319,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     5,   312,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   161,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    97,     0,   101,     0,   105,     0,
   312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   160,     0,    22,     0,     0,     0,
     0,     0,     0,    98,   100,   102,   104,   106,   108,   312,
     0,     0,     0,   111,   115,   119,     0,     0,     0,     0,
     0,     0,     0,   312,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,     0,   113,     0,   117,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   110,   112,   114,   116,   118,   120,
     0,   123,   127,   131,    23,     0,     0,     0,     0,     0,
     0,     0,   121,     0,   125,     0,   129,     0,     0,     0,
     0,     0,     0,   122,   124,   126,   128,   130,   132,     0,
     0,     0
};

static const short yydefgoto[] = {  1490,
     4,     5,    18,    19,    20,    21,     6,    61,   459,    63,
   449,  1262,   581,  1184,  1264,   582,  1185,  1266,   583,  1186,
  1374,   584,  1347,  1376,   585,  1348,  1378,   586,  1349,  1435,
   587,  1421,  1437,   588,  1422,  1439,   589,  1423,  1472,   590,
  1466,  1474,   591,  1467,  1476,   592,  1468,    64,   444,   434,
   435,   436,   437,    68,    69,    70,    71,    72,   962,   963,
    73,    74,   312,   460,   314,   464,   737,   272,   103,   412,
   288,   154,   249,   389,   800,   892,   893,   413,  1057
};

static const short yypact[] = {   413,
-32768,-32768,  -116,-32768,   576,  2038,   693,    13,    97,   141,
   156,   208,   215,   257,   104,   114,   126,-32768,-32768,-32768,
-32768,   295,   300,     0,   -36,   135,   164,   -40,   -50,   169,
   176,   306,   202,   335,   342,   352,   189,   364,   -20,   249,
   128,   128,   266,    71,   282,   403,   392,   289,   456,   468,
   225,   307,   -25,   305,   324,-32768,   345,   492,   497,   471,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   344,-32768,   351,   361,   362,
   365,   368,   369,   370,   371,   372,   373,   374,   375,   376,
   377,   378,   384,   385,   389,   390,   391,   693,   693,   693,
   693,  1473,-32768,-32768,  2077,-32768,-32768,-32768,-32768,-32768,
   393,   393,   526,-32768,   693,   693,   693,   693,   693,   693,
   553,   556,   693,   693,   693,   693,   396,   693,   693,   397,
   693,   693,   693,   338,   693,   395,   399,   401,   338,   400,
   402,   404,   406,   407,   408,   414,   128,   410,   128,   128,
   693,   693,  -118,-32768,    -6,   128,   415,   418,   421,-32768,
   563,   338,-32768,-32768,    22,   338,   338,   693,   -71,   693,
-32768,   693,-32768,-32768,   574,   416,    36,   693,   693,   693,
   693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
   693,   693,   693,   693,   693,   693,   693,   420,   420,   420,
  2669,   693,   693,   693,   693,   693,   693,   693,   693,   693,
   693,   693,   693,   693,   693,   693,  1473,   425,   426,   429,
   430,   431,   432,   433,   434,   438,   441,   442,   443,   482,
   483,   485,   486,   488,   489,   490,   491,   493,   499,   500,
   501,   502,   503,   524,   525,   527,   531,   633,   532,   530,
   564,   487,  1033,  1152,  1357,  1387,  1408,-32768,   565,  2693,
  2260,  2717,  2741,   693,  2765,  2280,   693,  2300,  2789,  2813,
   693,  6619,   647,  2837,   693,   693,   693,   652,   693,   693,
   693,   693,   693,   693,   693,  -113,    37,-32768,-32768,  4181,
  4204,   128,   128,   435,   435,    60,   693,   693,   693,  1295,
-32768,    39,  1988,   128,-32768,   729,   743,  2861,   671,   693,
  2885,    -1,   749,    20,-32768,   693,  -112,   580,  2909,  2933,
  2957,  2981,  3005,  3029,  3053,  3077,  3101,  3125,  4227,  3149,
  3173,  3197,  3221,  3245,  3269,  4250,  4273,  4296,   693,   693,
-32768,   960,   588,   588,   571,   571,   291,   291,   291,   291,
   -63,   -16,   420,   420,   420,   420,  1899,   751,   753,   756,
   757,   758,   759,   763,   766,   767,   769,   784,   785,   786,
   795,   796,   798,   799,   800,   801,   803,   805,   806,   807,
   688,   809,   810,   811,   812,   815,   816,-32768,  -107,   817,
   814,   818,-32768,-32768,-32768,-32768,-32768,-32768,   693,   822,
   819,   823,   824,  3293,   825,   828,  3317,   829,   833,   834,
  1540,-32768,    90,   693,   835,  2320,  3341,  3365,   693,  2340,
  2360,  3389,  3413,  3437,  3461,  3485,   128,-32768,   651,   693,
   693,-32768,-32768,-32768,   665,  2096,-32768,   667,   693,  4319,
  4342,  4365,-32768,-32768,-32768,   693,-32768,    -4,   711,   674,
   675,   839,   680,  3509,   841,   679,   685,-32768,-32768,-32768,
   693,-32768,-32768,-32768,  3533,-32768,-32768,   693,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   693,-32768,
-32768,-32768,-32768,-32768,-32768,   693,   693,   693,   318,   318,
   693,   714,   686,   687,   689,   690,   694,   695,   696,   697,
   698,   699,   700,   701,   715,   716,   717,   718,   719,   720,
   721,   723,   732,   746,   747,   748,   787,   788,   789,   790,
   793,   797,   856,-32768,   794,-32768,   804,  3557,   128,-32768,
   338,   338,   946,   338,-32768,   947,-32768,   338,   338,   693,
   693,-32768,  1427,   826,   957,   964,   966,  1007,   967,   968,
   975,   985,   986,   987,   990,   140,   693,  4388,  4411,-32768,
-32768,  2380,   128,   128,   128,  1446,-32768,   832,   836,   837,
   838,   840,   842,   843,   845,   848,   849,   850,   852,   995,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   693,   693,   338,   693,  1001,   338,    53,   831,
  1013,  1997,  3581,  3605,  3629,  3653,  6619,   867,  1018,   693,
   693,   128,  1019,  1021,   882,  1022,  1038,   338,   338,  1039,
   128,  1040,  1041,   338,   338,  1045,  1047,  1052,  1053,  1054,
   338,   417,   338,  1055,  1057,  1058,  1063,  1064,-32768,  1062,
   393,  1066,     1,     7,  1067,   338,  1071,   338,  1072,  1073,
  1854,  1540,-32768,-32768,   693,   338,   338,   338,-32768,   107,
   338,   338,   338,   338,   338,   338,   338,   693,  2113,   693,
   693,   890,  -134,   -68,   238,-32768,   874,   693,   693,   693,
   693,   693,   693,   693,   693,   693,   693,   693,   693,-32768,
  4434,  4457,  1074,  3677,   201,   988,   255,   897,   909,   693,
-32768,   693,   910,-32768,-32768,-32768,-32768,   693,   915,  4480,
  4503,  -121,   919,   927,   920,   928,   930,   931,   933,   934,
    63,   935,   942,   952,   936,   954,   955,   969,   970,   981,
   965,-32768,-32768,-32768,-32768,-32768,  1000,  1002,  1004,  1005,
  1006,  1008,  1010,-32768,  1016,-32768,-32768,-32768,   128,-32768,
  1129,-32768,  1130,-32768,-32768,   693,  4526,  1163,  1169,  1170,
   693,   693,  1188,  1189,  1190,  1192,  1193,  1194,  1195,  2400,
  1030,  3701,  2182,   435,   128,  1197,   128,  1198,   128,    24,
  1199,  4549,  4572,  4595,  4618,  4641,  4664,  4687,  4710,  4733,
  4756,  4779,  4802,   693,   693,-32768,  1212,   338,   338,  1125,
   338,    55,   603,   603,   693,   693,  1214,  1215,   693,  1218,
  3725,   226,  1219,  1473,  1221,   693,   338,  1220,  1222,  1224,
  1069,  1225,   417,  1226,  1230,   693,  1228,  1234,  1232,  1233,
  1238,   417,   693,   693,   693,   338,  1236,  1240,   417,   693,
  1241,  1243,  1242,   693,   393,     3,-32768,-32768,  6619,   693,
-32768,-32768,-32768,  1502,  1521,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1077,  1245,-32768,   693,-32768,  1079,   178,-32768,
   254,-32768,   278,-32768,    27,-32768,   693,   693,   693,   693,
   693,   693,   693,   693,   693,   693,   693,   693,  4825,  4848,
   201,   -82,-32768,   220,  1081,  1150,  1080,  1247,   603,   603,
   693,  1563,    12,  1582,   109,  1602,   123,  1636,  1658,-32768,
-32768,  2136,  1248,-32768,  1250,    68,  1473,  1085,  4871,  1089,
-32768,  1090,-32768,  1091,-32768,  1092,-32768,  1095,  3749,-32768,
  1098,-32768,-32768,  1099,  1100,  3773,  4894,  3797,  1102,-32768,
  1113,  1115,  4917,  1103,  1117,-32768,  4940,  1119,-32768,  4963,
-32768,-32768,   435,-32768,  2208,-32768,   693,   693,   693,  1254,
  1097,   -38,-32768,  4986,  5009,  5032,  5055,  5078,  5101,  5124,
  5147,  5170,  5193,  5216,  5239,   693,   693,  1207,   338,-32768,
-32768,   338,   693,    38,-32768,  2645,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1118,    23,-32768,-32768,-32768,  2067,
  1286,   201,   417,  1290,   693,  1288,   417,  1289,  1293,  1291,
  1297,  1309,   693,  1311,   338,  1312,  1319,   693,  1331,  1330,
   693,  1334,  1337,  1173,   693,-32768,  2420,  2440,  2460,-32768,
   338,  1339,-32768,   693,   693,   693,   693,   693,   693,   693,
   693,   693,   693,   693,   693,  2480,  2500,  1176,-32768,  1179,
  1677,  -112,  1185,  1355,  1196,   908,  1354,   693,-32768,  1201,
  1202,  1205,  5262,-32768,  1206,-32768,  1216,-32768,-32768,-32768,
  3821,-32768,  1223,-32768,-32768,  3845,  1227,-32768,  3869,  1229,
  1231,-32768,  2520,  1356,  1358,    45,  1235,-32768,  5285,  5308,
  5331,  5354,  5377,  5400,  5423,  5446,  5469,  3893,  3917,  3941,
  1359,  1360,   338,   338,-32768,   693,   260,  1279,   -29,  5492,
-32768,  1473,   417,   417,   417,   417,  1361,  1368,  1377,   417,
  1381,  1382,  1383,  1385,  1389,-32768,-32768,-32768,-32768,    27,
   338,   693,   693,   693,   693,   693,   693,   693,   693,   693,
-32768,-32768,-32768,-32768,-32768,  1244,  1237,  2159,   301,   603,
   603,   693,   693,   693,   693,  1239,   693,   693,  1473,  1249,
  1256,  1246,  1257,-32768,-32768,-32768,  1260,-32768,-32768,-32768,
  1261,  1262,   -30,  1263,  5515,  5538,  5561,  5584,  5607,  5630,
  5653,  5676,  5699,  1255,  1264,  1269,   338,  1314,  1272,  1392,
  1701,   130,  1720,   132,  1739,   143,  1758,  1781,  1813,  1833,
  1391,  2540,  5722,  2094,   417,   417,  1394,  1395,   417,  1397,
  1404,  1407,   338,   693,   693,   693,   693,   693,   693,   693,
   693,   693,   693,   693,   693,  1270,  1275,  1412,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   693,   693,  1278,  1280,-32768,-32768,  1281,  1282,  1276,
-32768,  1283,  5745,  5768,  5791,  5814,  5837,  5860,  5883,  5906,
  5929,   247,  6619,   269,  6619,   270,  6619,  1371,   693,    68,
  2234,  1473,   417,   338,  1426,  1447,  1449,  1450,   693,   693,
   693,   693,   693,   693,   693,   693,   693,   693,  1451,   693,
  1452,   693,  1454,  1298,  5952,   693,-32768,  1473,  1299,  1301,
-32768,-32768,-32768,-32768,  5975,  5998,  6021,  6044,  6067,  6090,
  3965,  3989,  4013,  6619,-32768,  6619,-32768,  6619,-32768,   693,
   693,  2560,  2626,   417,   338,   693,   693,   693,   693,   693,
   693,-32768,-32768,-32768,  6113,  2580,-32768,  1320,  1302,  1304,
  6136,  6159,  6182,  6205,  6228,  6251,  1308,  1310,  1348,   693,
  1459,-32768,   338,   417,   693,   693,   693,   693,   693,   693,
   693,   693,   693,  2600,-32768,  1306,  1350,  6274,  6297,  6320,
  6343,  6366,  6389,   285,  6619,   292,  6619,   298,  6619,  1475,
   338,  1514,   693,   693,   693,   693,   693,   693,   693,  1516,
   693,  1517,   693,  1518,-32768,  1362,-32768,  6412,  6435,  6458,
  4037,  4061,  4085,  6619,-32768,  6619,-32768,  6619,-32768,   338,
   693,   693,   693,-32768,-32768,-32768,  1370,  6481,  6504,  6527,
  1379,  1380,  1400,   338,   693,   693,   693,   693,   693,   693,
  1384,  6550,  6573,  6596,   299,  6619,   321,  6619,   328,  6619,
   417,   693,   693,   693,   693,  1519,   693,  1520,   693,  1522,
  1402,  4109,  4133,  4157,  6619,-32768,  6619,-32768,  6619,-32768,
  1523,-32768,-32768,-32768,-32768,  1419,  1420,  1437,   693,   693,
   693,   332,  6619,   336,  6619,   346,  6619,   693,  1547,   693,
  1572,   693,  1591,  6619,-32768,  6619,-32768,  6619,-32768,  1479,
  1609,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1605,-32768,
  1046,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1606,  1608,
  -291,   268,  1610,-32768,-32768,-32768,-32768,-32768,   494,  -960,
-32768,-32768,-32768,  1303,-32768,-32768,  -776,    -7,-32768,  1093,
   -10,-32768,  -111,-32768,  -879,   844,   428,-32768,-32768
};


#define	YYLAST		6783


static const short yytable[] = {   102,
   250,  1033,   456,   438,   121,   130,   747,   309,   949,   169,
   143,   978,   748,   144,   145,   127,   146,   988,   104,   960,
     7,   292,   293,   456,   961,   304,  1055,   960,   457,   874,
   153,   155,   961,   775,   292,   293,   776,   292,   293,   317,
   428,  1052,   292,   293,   445,   446,   926,   818,   749,   457,
  1129,   294,   466,   467,   427,   935,   697,    75,   897,   898,
   523,   524,   942,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,   960,   979,   980,   292,   293,   961,
   198,   199,   200,   201,   217,   310,   318,   429,  1053,   777,
   216,   157,   778,   105,   158,   159,  -247,   252,   253,   254,
   255,   256,   257,   698,   990,   260,   261,   262,   263,   131,
   265,   266,  1060,   268,   269,   270,   128,   274,   992,   129,
   123,   148,  1032,   124,   699,  1231,   286,  1233,  1157,   289,
  1212,   170,   177,   290,   291,   296,   106,   216,  1235,   292,
   293,   292,   293,  -246,   761,   762,   292,   293,   292,   293,
   308,   107,   311,   295,   313,   567,   122,   292,   293,   458,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   462,   305,  1056,   875,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   899,   900,  1033,   108,  1130,   292,   293,   100,   292,   293,
   109,   901,   139,   140,   152,   141,  1061,   439,    75,    76,
  1065,   827,   998,   999,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,   166,   404,   541,   167,   407,
   542,   802,   110,   411,   292,   293,  1149,   416,   417,   418,
   111,   420,   421,   422,   423,   424,   425,   426,   292,   293,
   112,   432,   433,   149,   150,   292,   293,   292,   293,   440,
   441,   442,   113,   448,   151,   292,   293,   152,   292,   293,
   114,   125,   454,    75,   897,  1190,   115,   668,   465,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
   126,   489,   490,   292,   293,   132,  1160,  1161,  1162,  1163,
    75,    76,   133,  1167,   134,   957,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   798,   135,   136,
   799,   202,   203,   204,   205,   206,   137,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   138,   979,   100,   216,
   981,   528,   101,   292,   293,   271,   803,   804,   805,   806,
   142,  1150,  1151,  1152,  1153,   779,   543,   161,   780,   292,
   293,   548,    -7,    -7,  1288,    -7,   556,  1289,   147,   807,
   808,   958,   558,   559,  1154,  1155,   162,   300,  1244,  1245,
   303,   562,  1248,   292,   293,   156,  1290,  1292,   566,  1291,
  1293,   116,   117,   118,   119,   959,   339,   340,   213,   214,
   215,   160,  1389,   600,   216,  1390,   899,   900,   163,  1391,
   602,   164,  1392,   100,   120,  1393,  1445,   901,  1394,  1446,
   152,   603,   165,   168,   171,   213,   214,   215,   604,   605,
   606,   216,   868,   607,    40,    41,    42,    43,  1447,    45,
   172,  1448,   393,    98,    99,  1449,  1299,   174,  1450,  1478,
   100,   175,  1479,  1480,   101,   176,  1481,   271,   732,   733,
   734,   735,   736,  1482,   173,   177,  1483,   178,   643,    -7,
    -7,    -7,    -7,    -7,    -7,    -7,    -7,   179,   180,   745,
   251,   181,   651,   652,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,     1,     2,  1339,     3,   669,
   193,   194,   673,   674,   675,   195,   196,   197,   258,   248,
   259,   273,   264,   267,   275,   276,   278,   277,   301,   279,
   281,   280,   282,   283,   284,    -1,     8,  1367,     9,   315,
   285,   287,   316,   216,   297,   691,   692,   298,   694,   302,
   299,   358,   359,   306,   307,   360,   361,   362,   363,   364,
   365,   712,   710,   711,   366,    75,   897,   367,   368,   369,
   721,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   202,   203,   204,   205,   206,   388,   207,   208,
   209,   210,   339,   340,   213,   214,   215,   757,   370,   371,
   216,   372,   373,   414,   374,   375,   376,   377,   419,   378,
   770,  1024,   772,   773,  1451,   379,   380,   381,   382,   383,
   782,   783,   784,   785,   786,   787,   788,   789,   790,   791,
   792,   793,    10,    11,    12,    13,    14,    15,    16,    17,
   384,   385,   811,   386,   812,    75,    76,   387,   391,   390,
   814,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   207,   208,   209,   210,   339,   340,   213,   214,
   215,   392,   399,   948,   216,   450,   205,   206,   846,   207,
   208,   209,   210,   339,   340,   213,   214,   215,   849,   451,
   453,   216,   468,   854,   855,   493,   461,   494,   899,   900,
   495,   496,   497,   498,   869,   100,   871,   499,   873,   901,
   500,   501,   152,   502,   568,   569,   570,   571,   572,   573,
   574,   575,   576,   577,   578,   579,   889,   890,   503,   504,
   505,   903,   905,   907,   902,   904,   906,   908,   909,   506,
   507,   912,   508,   509,   510,   511,   917,   512,   919,   513,
   514,   515,   516,   517,   518,   519,   520,   521,   929,   526,
   522,   525,   527,   557,   530,   936,   937,   938,   529,   531,
   532,   534,   943,   535,   537,   560,   947,   561,   700,   538,
   539,   544,   950,   593,   594,   595,   596,   598,    98,    99,
   599,   122,   608,   609,   610,   100,   611,   612,   955,   101,
   639,   613,   614,   615,   616,   617,   618,   619,   620,   964,
   965,   966,   967,   968,   969,   970,   971,   972,   973,   974,
   975,   580,   621,   622,   623,   624,   625,   626,   627,   289,
   628,   198,   199,   986,   202,   203,   204,   205,   206,   629,
   207,   208,   209,   210,   339,   340,   213,   214,   215,  1000,
    75,  1109,   216,   630,   631,   632,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   568,   569,   570,
   571,   572,   573,   574,   575,   576,   577,   578,   579,  1027,
  1028,  1029,   646,   648,   633,   634,   635,   636,   644,   645,
   637,   647,   640,   656,   638,   649,   650,   491,  1046,  1047,
   657,   641,   658,   661,   662,  1051,   202,   203,   204,   205,
   206,   663,   207,   208,   209,   210,   339,   340,   213,   214,
   215,   664,   665,   666,   216,   655,   667,  1063,   678,   701,
   690,   708,   679,   680,   681,  1071,   682,   695,   683,   684,
  1076,   685,   659,  1079,   686,   687,   688,  1083,   689,   702,
   709,   713,   693,   714,   716,   696,  1089,  1090,  1091,  1092,
  1093,  1094,  1095,  1096,  1097,  1098,  1099,  1100,   394,   715,
   717,   720,   722,   723,   781,   718,   719,   726,  1110,   727,
  1112,   724,   725,   660,   728,   729,   730,   739,   731,   774,
   738,   740,   741,    98,    99,   742,   743,   744,   801,   809,
   100,   746,   750,   751,   101,   753,   752,   754,   755,   796,
   810,   813,   815,   758,   759,   760,   819,   821,   763,   764,
   765,   766,   767,   768,   769,   820,   822,   823,  1148,   824,
   825,   826,   828,   831,  1159,   202,   203,   204,   205,   206,
   829,   207,   208,   209,   210,   339,   340,   213,   214,   215,
   830,   832,   833,   216,  1175,  1176,  1177,  1178,  1179,  1180,
  1181,  1182,  1183,   837,   847,   848,   834,   835,  1192,  1194,
  1196,  1191,  1193,  1195,  1197,  1198,  1199,  1200,   836,  1202,
  1203,  1204,   202,   203,   204,   205,   206,   395,   207,   208,
   209,   210,   339,   340,   213,   214,   215,   838,   851,   839,
   216,   840,   841,   842,   852,   853,   843,   844,   202,   203,
   204,   205,   206,   845,   207,   208,   209,   210,   339,   340,
   213,   214,   215,   856,   857,   858,   216,   859,   860,   861,
   862,   864,   870,   872,   876,   895,  1253,  1254,  1255,  1256,
  1257,  1258,  1259,  1260,  1261,  1263,  1265,  1267,   891,   910,
   911,   913,   916,   918,   922,   921,   924,   983,   896,   923,
   925,   927,   928,   930,  1271,  1272,   931,   932,   933,   915,
   934,   940,   941,   944,   920,   945,   953,   946,   954,   956,
   982,   984,   985,  1001,   996,   997,  1003,  1004,  1005,  1030,
  1006,  1295,  1007,   939,  1298,  1009,  1031,  1010,  1011,  1015,
  1019,  1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,
  1314,  1016,  1316,  1017,  1318,  1020,  1022,  1048,  1322,  1054,
  1323,  1059,  1062,  1064,  1066,  1067,  1068,   202,   203,   204,
   205,   206,  1069,   207,   208,   209,   210,   339,   340,   213,
   214,   215,  1335,  1336,  1070,   216,  1072,  1074,  1341,  1342,
  1343,  1344,  1345,  1346,  1075,    25,    26,    27,    28,    29,
    30,    31,    32,  1077,    33,  1078,    35,    36,  1080,    38,
    39,  1081,  1364,  1082,  1088,  1103,  1104,  1368,  1369,  1370,
  1371,  1372,  1373,  1375,  1377,  1379,    51,  1106,  1107,  1111,
  1156,  1127,   396,  1128,  1144,  1145,  1164,  1108,  1113,  1114,
    52,    53,  1115,  1165,  1117,  1398,  1399,  1400,  1401,  1402,
  1403,  1404,  1166,  1406,  1118,  1408,  1168,  1169,  1170,  1171,
  1120,  1227,   397,  1172,  1240,  1122,  1124,  1229,  1125,  1246,
  1247,  1249,  1131,  1418,  1419,  1420,  1049,  1188,  1250,  1050,
  1201,  1187,  1251,   398,  1207,  1270,  1205,  1432,  1433,  1434,
  1436,  1438,  1440,  1206,  1223,  1208,    60,  1209,  1210,  1211,
  1213,  1301,   654,  1224,  1452,  1453,  1454,  1455,  1225,  1457,
  1268,  1459,  1073,  1228,  1269,  1273,  1277,  1274,  1294,  1275,
  1276,   676,  1302,  1278,  1303,  1304,  1315,  1317,  1087,  1319,
  1352,  1473,  1475,  1477,  1365,   443,  1324,  1320,  1325,  1353,
  1484,  1354,  1486,  1381,  1488,    75,    76,  1361,  1491,  1362,
  1395,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   202,   203,   204,   205,   206,   951,   207,   208,
   209,   210,   339,   340,   213,   214,   215,  1363,  1382,  1397,
   216,  1405,  1407,  1409,  1456,  1458,   952,  1460,  1465,  1410,
  1146,  1147,   202,   203,   204,   205,   206,  1424,   207,   208,
   209,   210,   339,   340,   213,   214,   215,   540,  1428,  1429,
   216,  1441,  1485,   202,   203,   204,   205,   206,  1174,   207,
   208,   209,   210,   339,   340,   213,   214,   215,   987,  1430,
  1461,   216,   202,   203,   204,   205,   206,  1487,   207,   208,
   209,   210,   339,   340,   213,   214,   215,   989,  1469,  1470,
   216,   202,   203,   204,   205,   206,  1489,   207,   208,   209,
   210,   339,   340,   213,   214,   215,  1471,   991,  1492,   216,
    62,    65,   677,    66,  1226,    67,   463,     0,   202,   203,
   204,   205,   206,  1173,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   653,     0,   100,   216,     0,     0,   101,
  1252,   993,   894,     0,     0,     0,     0,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,   994,     0,   216,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,  1105,     0,   216,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,  1300,     0,   216,     0,     0,  1230,     0,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,  1232,   216,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,  1234,   216,     0,   202,   203,   204,
   205,   206,  1340,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,  1236,     0,   216,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1366,   202,   203,   204,   205,   206,  1237,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   202,   203,   204,   205,   206,  1396,   207,
   208,   209,   210,   339,   340,   213,   214,   215,  1238,     0,
     0,   216,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,  1417,  1239,     0,
   216,     0,     0,     0,     0,     0,   202,   203,   204,   205,
   206,  1431,   207,   208,   209,   210,   339,   340,   213,   214,
   215,   756,     0,     0,   216,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,     0,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,    25,    26,
    27,    28,    29,    30,    31,    32,     0,    33,     0,    35,
    36,     0,    38,    39,     0,     0,   492,    -3,    22,     0,
     0,    23,     0,     0,   202,   203,   204,   205,   206,    51,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,    52,    53,     0,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,    33,    34,    35,
    36,    37,    38,    39,     0,     0,     0,    40,    41,    42,
    43,    44,    45,     0,    46,    47,    48,    49,    50,    51,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   218,     0,     0,    52,    53,     0,     0,     0,     0,    60,
    54,    55,    56,    57,    58,    59,    25,    26,    27,    28,
    29,    30,    31,    32,     0,    33,     0,    35,    36,     0,
    38,    39,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,    51,   447,     0,
   216,     0,     0,     0,     0,   219,   220,   221,     0,    60,
   703,    52,    53,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,     0,     0,     0,     0,     0,     0,     0,
     0,   232,   233,   234,   235,   236,   237,   238,   239,   240,
   241,  1058,   242,   243,   244,   245,   246,   247,     0,     0,
     0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,    60,  1243,     0,
   216,     0,     0,     0,     0,     0,     0,     0,     0,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   202,   203,   204,   205,   206,   771,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,     0,   202,   203,   204,   205,   206,   995,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   202,   203,   204,
   205,   206,  1189,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   866,
     0,     0,   867,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1025,     0,     0,  1026,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1296,     0,     0,  1297,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   401,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   406,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   408,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   545,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   549,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   550,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   672,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
   863,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1084,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1085,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1086,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1101,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1102,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1126,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1241,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1337,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,   202,   203,   204,   205,   206,
  1351,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,  1338,     0,     0,     0,     0,
  1380,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   430,   341,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   341,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   400,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   402,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   403,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   405,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   409,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   410,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   415,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   452,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   455,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   469,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   470,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   471,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   472,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   473,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   474,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   475,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   476,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   477,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   478,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   480,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   481,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   482,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   483,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   484,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   485,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   533,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   536,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   546,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   547,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   551,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   552,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   553,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   554,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   555,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   597,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   601,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   642,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   704,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   705,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   706,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   707,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   797,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   865,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   914,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1008,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1012,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1014,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,  1119,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,  1121,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1123,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1141,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1142,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,  1143,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,  1332,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1333,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1334,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1414,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,  1415,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,  1416,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1462,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1463,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1464,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,   430,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,   431,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,   479,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,   486,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   487,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   488,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   563,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   564,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   565,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,   670,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,   671,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,   794,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,   795,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,   816,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   817,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   850,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   877,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   878,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   879,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,   880,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,   881,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,   882,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,   883,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,   884,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   885,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   886,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   887,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   888,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   976,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,   977,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1002,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1013,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1018,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1021,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1023,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1034,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1035,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1036,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1037,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1038,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1039,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1040,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1041,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1042,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1043,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1044,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1045,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1116,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1132,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1133,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1134,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1135,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1136,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1137,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1138,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1139,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1140,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1158,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1214,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1215,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1216,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1217,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1218,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1219,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1220,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1221,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1222,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1242,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1279,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1280,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1281,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1282,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1283,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1284,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1285,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1286,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1287,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1321,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1326,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1327,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1328,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1329,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1330,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1331,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1350,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1355,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1356,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1357,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1358,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1359,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1360,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1383,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1384,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1385,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1386,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1387,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1388,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   339,   340,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1411,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   339,   340,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1412,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   339,   340,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1413,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   339,   340,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1425,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   339,
   340,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1426,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   339,   340,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1427,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   339,   340,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1442,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   339,   340,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1443,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   339,   340,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1444,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   339,   340,   213,   214,   215,     0,
     0,     0,   216
};

static const short yycheck[] = {     7,
   112,   962,     4,   295,     5,    56,     6,    79,     6,    35,
    31,   891,     6,    34,    35,    56,    37,     6,     6,    58,
   137,   156,   157,     4,    63,     4,     4,    58,    30,     6,
    41,    42,    63,   168,   156,   157,   171,   156,   157,     4,
     4,     4,   156,   157,     6,     7,   823,   169,    42,    30,
     6,   170,   165,   166,   168,   832,     4,     3,     4,     5,
   168,   169,   839,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    58,   168,   169,   156,   157,    63,
    98,    99,   100,   101,   102,   167,    61,    61,    61,   168,
   164,    31,   171,     7,    34,    35,   170,   115,   116,   117,
   118,   119,   120,    61,     6,   123,   124,   125,   126,   170,
   128,   129,  1002,   131,   132,   133,   167,   135,     6,   170,
   167,     4,   171,   170,    82,     6,   147,     6,   168,   150,
   171,   167,   172,   151,   152,   156,     6,   164,     6,   156,
   157,   156,   157,   170,    48,    49,   156,   157,   156,   157,
   168,     6,   170,   170,   172,   170,   167,   156,   157,   171,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   171,   170,   170,   170,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   156,   157,  1173,     6,   170,   156,   157,   163,   156,   157,
     6,   167,    34,    35,   170,    37,  1003,   168,     3,     4,
  1007,   169,   165,   166,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    31,   264,   168,    34,   267,
   171,     7,     6,   271,   156,   157,     7,   275,   276,   277,
   167,   279,   280,   281,   282,   283,   284,   285,   156,   157,
   167,   292,   293,   156,   157,   156,   157,   156,   157,   297,
   298,   299,   167,   304,   167,   156,   157,   170,   156,   157,
     6,   167,   310,     3,     4,     5,     7,   168,   316,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
   167,   339,   340,   156,   157,   167,  1113,  1114,  1115,  1116,
     3,     4,   167,  1120,    39,   168,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,   167,   167,    35,
   170,   146,   147,   148,   149,   150,    35,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    35,   168,   163,   164,
   171,   399,   167,   156,   157,   170,   142,   143,   144,   145,
    37,   142,   143,   144,   145,   168,   414,     5,   171,   156,
   157,   419,     0,     1,   168,     3,   427,   171,   170,   165,
   166,   168,   430,   431,   165,   166,    35,   160,  1205,  1206,
   163,   439,  1209,   156,   157,   170,   168,   168,   446,   171,
   171,   142,   143,   144,   145,   168,   156,   157,   158,   159,
   160,   170,   168,   461,   164,   171,   156,   157,   170,   168,
   468,     6,   171,   163,   165,   168,   168,   167,   171,   171,
   170,   479,     5,   167,   170,   158,   159,   160,   486,   487,
   488,   164,   774,   491,    50,    51,    52,    53,   168,    55,
   167,   171,     6,   156,   157,   168,  1273,     6,   171,   168,
   163,     5,   171,   168,   167,    35,   171,   170,    92,    93,
    94,    95,    96,   168,   170,   172,   171,   167,   529,   107,
   108,   109,   110,   111,   112,   113,   114,   167,   167,   641,
     5,   167,   540,   541,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   133,   134,  1324,   136,   557,
   167,   167,   563,   564,   565,   167,   167,   167,     6,   167,
     5,   134,   167,   167,   170,   167,   139,   167,     6,   170,
   167,   170,   167,   167,   167,     0,     1,  1354,     3,     6,
   167,   172,   167,   164,   170,   593,   594,   170,   596,   162,
   170,   167,   167,   166,   167,   167,   167,   167,   167,   167,
   167,   612,   610,   611,   167,     3,     4,   167,   167,   167,
   621,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   146,   147,   148,   149,   150,     5,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   655,   167,   167,
   164,   167,   167,     7,   167,   167,   167,   167,     7,   167,
   668,   953,   670,   671,  1441,   167,   167,   167,   167,   167,
   678,   679,   680,   681,   682,   683,   684,   685,   686,   687,
   688,   689,   107,   108,   109,   110,   111,   112,   113,   114,
   167,   167,   700,   167,   702,     3,     4,   167,   169,   168,
   708,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   168,   168,   845,   164,     7,   149,   150,   749,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   756,     7,
    80,   164,   173,   761,   762,     5,     8,     5,   156,   157,
     5,     5,     5,     5,   775,   163,   777,     5,   779,   167,
     5,     5,   170,     5,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,   794,   795,     5,     5,
     5,   802,   803,   804,   802,   803,   804,   805,   806,     5,
     5,   809,     5,     5,     5,     5,   814,     5,   816,     5,
     5,     5,   125,     5,     5,     5,     5,     3,   826,     6,
     5,     5,     5,   173,     6,   833,   834,   835,     7,     7,
     7,     7,   840,     6,     6,   171,   844,   171,     8,     7,
     7,     7,   850,   170,   170,     7,   167,     7,   156,   157,
   172,   167,   139,   168,   168,   163,   168,   168,   866,   167,
     5,   168,   168,   168,   168,   168,   168,   168,   168,   877,
   878,   879,   880,   881,   882,   883,   884,   885,   886,   887,
   888,   171,   168,   168,   168,   168,   168,   168,   168,   900,
   168,   899,   900,   901,   146,   147,   148,   149,   150,   168,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   917,
     3,     4,   164,   168,   168,   168,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,   957,
   958,   959,     7,     7,   168,   168,   168,   168,   531,   532,
   168,   534,   169,     7,   168,   538,   539,     8,   976,   977,
     7,   168,     7,     7,     7,   983,   146,   147,   148,   149,
   150,     7,   152,   153,   154,   155,   156,   157,   158,   159,
   160,     7,     7,     7,   164,   170,     7,  1005,   167,   169,
     6,   135,   167,   167,   167,  1013,   167,     7,   167,   167,
  1018,   167,     6,  1021,   167,   167,   167,  1025,   167,     7,
     3,     3,   595,     3,     3,   598,  1034,  1035,  1036,  1037,
  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,     6,   158,
     3,     3,     3,     3,   171,   618,   619,     3,  1056,     3,
  1058,   624,   625,    47,     3,     3,     3,     3,   631,   170,
   633,     5,     5,   156,   157,     3,     3,     6,    81,   173,
   163,     6,     6,   646,   167,   648,     6,     6,     6,     6,
   172,   172,   168,   656,   657,   658,   168,   168,   661,   662,
   663,   664,   665,   666,   667,   169,   169,   168,  1106,   169,
   168,   168,   168,   168,  1112,   146,   147,   148,   149,   150,
   169,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   169,   168,   168,   164,  1132,  1133,  1134,  1135,  1136,  1137,
  1138,  1139,  1140,   169,     6,     6,   168,   168,  1149,  1150,
  1151,  1149,  1150,  1151,  1152,  1153,  1154,  1155,   168,  1157,
  1158,  1159,   146,   147,   148,   149,   150,     6,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   168,     6,   168,
   164,   168,   168,   168,     6,     6,   169,   168,   146,   147,
   148,   149,   150,   168,   152,   153,   154,   155,   156,   157,
   158,   159,   160,     6,     6,     6,   164,     6,     6,     6,
     6,   172,     6,     6,     6,    81,  1214,  1215,  1216,  1217,
  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,     7,     6,
     6,     4,     4,     3,     3,     6,   158,    78,   801,     6,
     6,     6,     3,     6,  1242,  1243,     3,     6,     6,   812,
     3,     6,     3,     3,   817,     3,   170,     6,     4,   171,
   170,   172,     6,   169,     7,     6,   168,   168,   168,     6,
   169,  1269,   168,   836,  1272,   168,   170,   169,   169,   168,
   168,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,  1287,
  1288,   169,  1290,   169,  1292,   169,   168,    81,  1296,   172,
  1298,     6,     3,     6,     6,     3,     6,   146,   147,   148,
   149,   150,     6,   152,   153,   154,   155,   156,   157,   158,
   159,   160,  1320,  1321,     6,   164,     6,     6,  1326,  1327,
  1328,  1329,  1330,  1331,     6,    31,    32,    33,    34,    35,
    36,    37,    38,     3,    40,     6,    42,    43,     5,    45,
    46,     5,  1350,   171,     6,   170,   168,  1355,  1356,  1357,
  1358,  1359,  1360,  1361,  1362,  1363,    62,   173,     4,     6,
    82,     6,     6,     6,     6,     6,     6,   172,   168,   168,
    76,    77,   168,     6,   169,  1383,  1384,  1385,  1386,  1387,
  1388,  1389,     6,  1391,   169,  1393,     6,     6,     6,     5,
   168,    78,     6,     5,     4,   169,   168,     6,   168,     6,
     6,     5,   168,  1411,  1412,  1413,   979,   171,     5,   982,
   172,   168,     6,     6,   169,     4,   168,  1425,  1426,  1427,
  1428,  1429,  1430,   168,   170,   169,   132,   168,   168,   168,
   168,     6,     6,   170,  1442,  1443,  1444,  1445,   170,  1447,
   171,  1449,  1015,   172,   170,   168,   171,   168,    78,   169,
   169,     6,     6,   171,     6,     6,     6,     6,  1031,     6,
   141,  1469,  1470,  1471,     6,   171,   168,   170,   168,   168,
  1478,   168,  1480,   168,  1482,     3,     4,   170,     0,   170,
     6,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   146,   147,   148,   149,   150,     6,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   170,   169,     6,
   164,     6,     6,     6,     6,     6,     6,     6,     6,   168,
  1103,  1104,   146,   147,   148,   149,   150,   168,   152,   153,
   154,   155,   156,   157,   158,   159,   160,     8,   170,   170,
   164,   168,     6,   146,   147,   148,   149,   150,  1131,   152,
   153,   154,   155,   156,   157,   158,   159,   160,     6,   170,
   169,   164,   146,   147,   148,   149,   150,     6,   152,   153,
   154,   155,   156,   157,   158,   159,   160,     6,   170,   170,
   164,   146,   147,   148,   149,   150,     6,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   170,     6,     0,   164,
     6,     6,   567,     6,  1187,     6,   314,    -1,   146,   147,
   148,   149,   150,  1130,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   541,    -1,   163,   164,    -1,    -1,   167,
  1213,     6,   799,    -1,    -1,    -1,    -1,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,     6,    -1,   164,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,     6,    -1,   164,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,  1274,    -1,   164,    -1,    -1,     6,    -1,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,     6,   164,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,     6,   164,    -1,   146,   147,   148,
   149,   150,  1325,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,     6,    -1,   164,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1353,   146,   147,   148,   149,   150,     6,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   146,   147,   148,   149,   150,  1381,   152,
   153,   154,   155,   156,   157,   158,   159,   160,     6,    -1,
    -1,   164,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,  1410,     6,    -1,
   164,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,   149,
   150,  1424,   152,   153,   154,   155,   156,   157,   158,   159,
   160,     8,    -1,    -1,   164,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,    -1,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    31,    32,
    33,    34,    35,    36,    37,    38,    -1,    40,    -1,    42,
    43,    -1,    45,    46,    -1,    -1,   138,     0,     1,    -1,
    -1,     4,    -1,    -1,   146,   147,   148,   149,   150,    62,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    76,    77,    -1,    -1,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    -1,    40,    41,    42,
    43,    44,    45,    46,    -1,    -1,    -1,    50,    51,    52,
    53,    54,    55,    -1,    57,    58,    59,    60,    61,    62,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,   132,
    83,    84,    85,    86,    87,    88,    31,    32,    33,    34,
    35,    36,    37,    38,    -1,    40,    -1,    42,    43,    -1,
    45,    46,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    62,   171,    -1,
   164,    -1,    -1,    -1,    -1,    89,    90,    91,    -1,   132,
   174,    76,    77,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   135,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   132,   135,    -1,
   164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   146,   147,   148,   149,   150,   174,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,    -1,   146,   147,   148,   149,   150,   174,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   146,   147,   148,
   149,   150,   174,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
    -1,    -1,   171,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,    -1,    -1,   171,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,    -1,    -1,   171,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   146,   147,   148,   149,   150,
   171,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,   140,    -1,    -1,    -1,    -1,
   171,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 147 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 161 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 168 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 185 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 186 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 187 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 188 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 193 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 198 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 209 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 212 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 216 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 222 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 228 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 235 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 241 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 245 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 249 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 256 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 260 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 265 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 269 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 273 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 277 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 281 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 285 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 289 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 293 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 299 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 305 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 309 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 313 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 317 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 321 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 329 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 356 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 359 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 365 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 366 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 367 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 368 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 369 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 376 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 381 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 69:
#line 386 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 70:
#line 397 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 71:
#line 401 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 72:
#line 408 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 85:
#line 427 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 429 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 434 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 88:
#line 439 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 89:
#line 446 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 448 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 453 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 92:
#line 458 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 93:
#line 465 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 467 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 472 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 96:
#line 477 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 97:
#line 484 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 486 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 492 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 100:
#line 498 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 101:
#line 505 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 507 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 513 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 104:
#line 519 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 105:
#line 526 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 528 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 534 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 108:
#line 540 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 109:
#line 547 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 549 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 556 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 112:
#line 565 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 113:
#line 572 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 574 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 581 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 116:
#line 590 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 117:
#line 597 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 599 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 606 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 120:
#line 615 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 121:
#line 622 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 624 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 632 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 124:
#line 641 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 125:
#line 648 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 650 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 658 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 128:
#line 667 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 129:
#line 674 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 676 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 131:
#line 684 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 132:
#line 693 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 133:
#line 706 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 134:
#line 712 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 720 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 728 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 137:
#line 736 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 744 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 139:
#line 752 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 140:
#line 771 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 778 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 142:
#line 784 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 143:
#line 803 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 144:
#line 814 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 145:
#line 822 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 146:
#line 828 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 834 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 148:
#line 853 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 149:
#line 859 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 150:
#line 876 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 151:
#line 882 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 888 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 894 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 900 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 155:
#line 906 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 156:
#line 925 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 157:
#line 937 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 943 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 159:
#line 962 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 160:
#line 985 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 161:
#line 993 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 162:
#line 997 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1003 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1009 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 165:
#line 1021 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 166:
#line 1027 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1033 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1046 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 169:
#line 1051 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 170:
#line 1056 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 171:
#line 1061 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 172:
#line 1068 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 173:
#line 1069 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 174:
#line 1070 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 175:
#line 1075 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 176:
#line 1079 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 177:
#line 1091 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 178:
#line 1109 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 179:
#line 1124 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 180:
#line 1152 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 181:
#line 1182 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 182:
#line 1186 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 183:
#line 1200 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 184:
#line 1213 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 185:
#line 1226 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 186:
#line 1265 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 187:
#line 1270 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 188:
#line 1276 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 189:
#line 1280 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 190:
#line 1284 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 191:
#line 1288 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 192:
#line 1292 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 193:
#line 1297 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 194:
#line 1305 "Gmsh.y"
{
    ;
    break;}
case 195:
#line 1308 "Gmsh.y"
{
    ;
    break;}
case 196:
#line 1314 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 197:
#line 1331 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 198:
#line 1342 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 199:
#line 1359 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 200:
#line 1376 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 201:
#line 1393 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 202:
#line 1414 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 203:
#line 1434 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 204:
#line 1454 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 205:
#line 1471 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 206:
#line 1496 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 209:
#line 1512 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 1518 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 211:
#line 1531 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 212:
#line 1549 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 213:
#line 1566 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 214:
#line 1587 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 215:
#line 1604 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 216:
#line 1625 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 217:
#line 1642 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 218:
#line 1663 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 219:
#line 1680 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 220:
#line 1701 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 221:
#line 1718 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 222:
#line 1739 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 223:
#line 1756 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 224:
#line 1777 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 225:
#line 1794 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 226:
#line 1817 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 227:
#line 1842 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 228:
#line 1871 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 229:
#line 1896 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 230:
#line 1925 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 231:
#line 1950 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 232:
#line 1981 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 236:
#line 2020 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 237:
#line 2021 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 238:
#line 2022 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 2023 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 240:
#line 2024 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 241:
#line 2028 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 2029 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 243:
#line 2030 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 244:
#line 2031 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 245:
#line 2032 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 246:
#line 2033 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 247:
#line 2034 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 248:
#line 2035 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 249:
#line 2036 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 250:
#line 2037 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 251:
#line 2038 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 252:
#line 2039 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 253:
#line 2040 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 254:
#line 2041 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 255:
#line 2042 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 256:
#line 2043 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 257:
#line 2044 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 258:
#line 2045 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 259:
#line 2046 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 260:
#line 2047 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 261:
#line 2048 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2049 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2050 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 2051 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2052 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2053 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2054 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2055 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2056 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2057 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2058 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 272:
#line 2059 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2060 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2061 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2062 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2063 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 2064 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2065 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 279:
#line 2066 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 2067 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 281:
#line 2071 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 282:
#line 2072 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 283:
#line 2074 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 284:
#line 2083 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 285:
#line 2100 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2121 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2138 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2159 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 289:
#line 2176 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 290:
#line 2199 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 291:
#line 2205 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 292:
#line 2219 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 293:
#line 2223 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2227 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 295:
#line 2231 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 296:
#line 2235 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 297:
#line 2241 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 298:
#line 2245 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2249 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 300:
#line 2253 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 301:
#line 2257 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 302:
#line 2283 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 303:
#line 2316 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2319 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2325 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2328 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2334 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2337 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 309:
#line 2341 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 310:
#line 2348 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 311:
#line 2353 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 312:
#line 2360 "Gmsh.y"
{
    ;
    break;}
case 313:
#line 2363 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 314:
#line 2369 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 315:
#line 2377 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 316:
#line 2382 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 317:
#line 2391 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 318:
#line 2395 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 319:
#line 2406 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 320:
#line 2410 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 321:
#line 2414 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 322:
#line 2419 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 323:
#line 2424 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2437 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

