
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tIntersect	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tMesh	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.69 2001-02-08 10:32:43 geuzaine Exp $

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;
static char           *str;
static void           *pNumOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 67 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1546
#define	YYFLAG		-32768
#define	YYNTBASE	182

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 261)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   167,     2,     2,   174,
   175,   165,   163,   179,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   181,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   952,   960,   967,   971,   978,   982,   989,   994,  1002,  1007,
  1015,  1020,  1028,  1033,  1041,  1048,  1060,  1067,  1079,  1086,
  1098,  1105,  1117,  1124,  1136,  1143,  1155,  1161,  1173,  1179,
  1191,  1200,  1212,  1220,  1229,  1242,  1249,  1255,  1263,  1271,
  1284,  1292,  1302,  1320,  1328,  1337,  1346,  1354,  1366,  1372,
  1381,  1394,  1403,  1426,  1447,  1456,  1465,  1471,  1480,  1488,
  1497,  1503,  1515,  1521,  1531,  1533,  1535,  1537,  1538,  1541,
  1546,  1551,  1558,  1562,  1566,  1570,  1573,  1576,  1583,  1592,
  1601,  1612,  1614,  1617,  1619,  1623,  1628,  1630,  1639,  1652,
  1661,  1674,  1683,  1696,  1708,  1724,  1726,  1729,  1739,  1742,
  1749,  1759,  1769,  1778,  1787,  1796,  1803,  1808,  1811,  1814,
  1816,  1819,  1821,  1823,  1825,  1827,  1829,  1831,  1835,  1838,
  1841,  1844,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1876,
  1880,  1884,  1888,  1892,  1896,  1900,  1906,  1911,  1916,  1921,
  1926,  1931,  1936,  1941,  1946,  1951,  1956,  1963,  1968,  1973,
  1978,  1983,  1988,  1993,  2000,  2007,  2014,  2019,  2021,  2023,
  2025,  2030,  2033,  2039,  2042,  2048,  2052,  2061,  2066,  2076,
  2081,  2091,  2095,  2101,  2103,  2106,  2109,  2113,  2117,  2129,
  2139,  2147,  2155,  2156,  2160,  2162,  2166,  2167,  2171,  2175,
  2177,  2181,  2182,  2184,  2188,  2192,  2194,  2196,  2200,  2204,
  2208,  2214,  2224,  2232,  2238,  2240,  2246,  2250,  2259,  2261,
  2265,  2267,  2272
};

static const short yyrhs[] = {   184,
     0,   183,     0,   189,     0,     1,     6,     0,   140,     0,
   143,   144,   244,   244,   244,   145,   146,   142,   244,   244,
   244,   142,   244,   244,   244,   142,   244,   244,   244,   147,
   148,     0,   141,     0,     0,   184,   185,     0,   186,     0,
   188,     0,   187,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   174,   251,   179,     5,   175,     6,     0,   120,   174,   251,
   175,     6,     0,   121,   174,     5,   179,     5,   179,   251,
   179,   251,   179,     5,   179,     5,   179,     5,   175,     6,
     0,     3,     7,    98,   174,     5,   179,   249,   175,     6,
     0,     3,     7,    97,   174,     5,   179,   246,   179,   255,
   179,   245,   179,   245,   179,   245,   179,   255,   179,   255,
   179,   245,   175,     6,     0,     3,     7,    96,   174,     5,
   179,   246,   179,   246,   179,   253,   179,   245,   179,   245,
   179,   245,   179,   245,   179,   255,   179,   255,   179,   255,
   179,   255,   179,   245,   175,     6,     0,     3,     7,   104,
   174,     5,   179,     3,   179,     3,   179,     3,   179,   245,
   175,     6,     0,     3,     7,   108,   174,     5,   179,     3,
   179,   245,   175,     6,     0,     3,     7,   125,   174,     5,
   179,     3,   179,   245,   175,     6,     0,     3,     7,   106,
   174,     5,   179,   165,   179,   165,   179,   246,   179,   245,
   175,     6,     0,     3,     7,   109,   174,     5,   179,   255,
   175,     6,     0,     3,     7,   110,   174,     5,   179,   255,
   179,     3,   179,   245,   175,     6,     0,     3,     7,   105,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   111,
   174,     5,   179,     3,   179,   246,   175,     6,     0,     3,
     7,   113,   174,     5,   179,     3,   179,     3,   179,     3,
   175,     6,     0,     3,     7,   112,   174,     5,   179,   249,
   175,     6,     0,     3,     7,   107,   174,     5,   179,     3,
   175,     6,     0,     3,     7,    37,   174,     5,   179,     3,
   179,     3,   175,     6,     0,     3,     7,   123,   174,     5,
   179,   255,   175,     6,     0,     3,     7,   124,   174,     5,
   179,   255,   179,     3,   175,     6,     0,     3,     7,   122,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   126,
   174,     5,   179,     3,   179,   246,   175,     6,     0,     3,
     7,   127,   174,     5,   179,     3,   179,   246,   179,   246,
   175,     6,     0,     3,     7,   134,   174,     5,   179,     3,
   179,   246,   179,   246,   175,     6,     0,     3,     7,   128,
   174,     5,   179,     3,   179,   246,   175,     6,     0,     3,
     7,   138,   174,     5,   179,     3,   179,   246,   179,   246,
   175,     6,     0,     3,     7,   129,   174,     5,   179,     3,
   179,   255,   179,   255,   179,   245,   179,   245,   175,     6,
     0,     3,     7,   130,   174,     5,   179,   255,   175,     6,
     0,     3,     7,   131,   174,   132,   179,   245,   179,     3,
   175,     6,     0,     3,     7,   133,   174,     5,   179,   255,
   179,   245,   175,     6,     0,     3,     7,   135,   174,     5,
   179,     5,   179,     3,   179,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   179,     5,   179,     3,   175,     6,
     0,     3,     7,   137,   174,     3,   179,     3,   175,     6,
     0,     0,   189,   190,     0,   192,     0,   191,     0,   230,
     0,   231,     0,   232,     0,   235,     0,   236,     0,   239,
     0,   242,     0,   243,     0,   238,     0,   237,     0,    31,
   174,     5,   175,     6,     0,    31,   174,     5,   179,   256,
   175,     6,     0,    64,     5,   180,   193,   181,     6,     0,
    64,     5,     4,   249,   180,   193,   181,     6,     0,     0,
   193,   195,     0,   193,   198,     0,   193,   201,     0,   193,
   204,     0,   193,   207,     0,   193,   210,     0,   193,   213,
     0,   193,   216,     0,   193,   219,     0,   193,   222,     0,
   193,   225,     0,   193,   228,     0,   246,     0,   194,   179,
   246,     0,     0,    76,   174,   246,   179,   246,   179,   246,
   175,   196,   180,   194,   181,     6,     0,   246,     0,   197,
   179,   246,     0,     0,    77,   174,   246,   179,   246,   179,
   246,   175,   199,   180,   197,   181,     6,     0,   246,     0,
   200,   179,   246,     0,     0,    78,   174,   246,   179,   246,
   179,   246,   175,   202,   180,   200,   181,     6,     0,   246,
     0,   203,   179,   246,     0,     0,    73,   174,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   175,
   205,   180,   203,   181,     6,     0,   246,     0,   206,   179,
   246,     0,     0,    74,   174,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   175,   208,   180,   206,
   181,     6,     0,   246,     0,   209,   179,   246,     0,     0,
    75,   174,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   175,   211,   180,   209,   181,     6,     0,
   246,     0,   212,   179,   246,     0,     0,    70,   174,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   175,   214,   180,   212,
   181,     6,     0,   246,     0,   215,   179,   246,     0,     0,
    71,   174,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   175,
   217,   180,   215,   181,     6,     0,   246,     0,   218,   179,
   246,     0,     0,    72,   174,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   179,   246,   175,   220,   180,   218,   181,     6,     0,   246,
     0,   221,   179,   246,     0,     0,    67,   174,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   175,   223,   180,   221,   181,     6,     0,   246,     0,
   224,   179,   246,     0,     0,    68,   174,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   175,   226,   180,   224,   181,     6,     0,   246,     0,   227,
   179,   246,     0,     0,    69,   174,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   175,
   229,   180,   227,   181,     6,     0,     4,     7,   246,     6,
     0,     4,   176,   246,   177,     7,   246,     6,     0,     4,
   176,   177,     7,   255,     6,     0,     4,   170,     6,     0,
     4,   176,   246,   177,   170,     6,     0,     4,   171,     6,
     0,     4,   176,   246,   177,   171,     6,     0,     4,   149,
   246,     6,     0,     4,   176,   246,   177,   149,   246,     6,
     0,     4,   150,   246,     6,     0,     4,   176,   246,   177,
   150,   246,     6,     0,     4,   151,   246,     6,     0,     4,
   176,   246,   177,   151,   246,     6,     0,     4,   152,   246,
     6,     0,     4,   176,   246,   177,   152,   246,     6,     0,
     4,   178,     4,     7,     5,     6,     0,     4,   178,    64,
   176,   246,   177,   178,     4,     7,     5,     6,     0,     4,
   178,     4,     7,   246,     6,     0,     4,   178,    64,   176,
   246,   177,   178,     4,     7,   246,     6,     0,     4,   178,
     4,   149,   246,     6,     0,     4,   178,    64,   176,   246,
   177,   178,     4,   149,   246,     6,     0,     4,   178,     4,
   150,   246,     6,     0,     4,   178,    64,   176,   246,   177,
   178,     4,   150,   246,     6,     0,     4,   178,     4,   151,
   246,     6,     0,     4,   178,    64,   176,   246,   177,   178,
     4,   151,   246,     6,     0,     4,   178,     4,   152,   246,
     6,     0,     4,   178,    64,   176,   246,   177,   178,     4,
   152,   246,     6,     0,     4,   178,     4,   170,     6,     0,
     4,   178,    64,   176,   246,   177,   178,     4,   170,   246,
     6,     0,     4,   178,     4,   171,     6,     0,     4,   178,
    64,   176,   246,   177,   178,     4,   171,   246,     6,     0,
     4,   178,    85,   178,     4,     7,   257,     6,     0,     4,
   178,    64,   176,   246,   177,   178,    85,     7,   258,     6,
     0,    34,   174,   246,   175,     7,   249,     6,     0,    49,
    34,   174,   246,   175,     7,   255,     6,     0,    65,    34,
   255,     7,   180,   246,   179,   246,   179,   246,   181,     6,
     0,    41,    42,   255,     7,   246,     6,     0,    34,   180,
   246,   181,     6,     0,    37,   174,   246,   175,     7,   255,
     6,     0,    39,   174,   246,   175,     7,   255,     6,     0,
    65,    37,   255,     7,   180,   246,   179,   246,   179,   246,
   181,     6,     0,    35,   174,   246,   175,     7,   255,     6,
     0,    35,   174,   246,   175,     7,   255,    45,   249,     6,
     0,    43,   174,   246,   175,     7,   180,   246,   179,   246,
   179,     5,   179,     5,   179,     5,   181,     6,     0,    36,
   174,   246,   175,     7,   255,     6,     0,    49,    37,   174,
   246,   175,     7,   255,     6,     0,    37,    59,   174,   246,
   175,     7,   255,     6,     0,    79,   174,   246,   175,     7,
   255,     6,     0,    80,   174,   246,   175,     7,   255,    84,
   255,    81,   246,     6,     0,    37,   180,   246,   181,     6,
     0,    45,    38,   174,   246,   175,     7,   255,     6,     0,
   139,    38,   174,   246,   175,     7,   180,   246,   179,   255,
   181,     6,     0,    46,    38,   174,   246,   175,     7,   255,
     6,     0,    80,    38,    82,    83,   174,   246,   175,     7,
   253,    84,   180,   255,   179,   255,   181,    81,   180,   246,
   179,   246,   181,     6,     0,    80,    38,   174,   246,   175,
     7,   253,    84,   180,   255,   179,   255,   181,    81,   180,
   246,   179,   246,   181,     6,     0,    49,    38,   174,   246,
   175,     7,   255,     6,     0,    38,    59,   174,   246,   175,
     7,   255,     6,     0,    38,   180,   246,   181,     6,     0,
    48,    40,   174,   246,   175,     7,   255,     6,     0,    40,
   174,   246,   175,     7,   255,     6,     0,    49,    40,   174,
   246,   175,     7,   255,     6,     0,    54,   249,   180,   233,
   181,     0,    53,   180,   249,   179,   249,   179,   246,   181,
   180,   233,   181,     0,    55,   249,   180,   233,   181,     0,
    56,   180,   249,   179,   246,   181,   180,   233,   181,     0,
   235,     0,   234,     0,   232,     0,     0,   234,   231,     0,
    58,   180,   234,   181,     0,    61,   180,   234,   181,     0,
    61,    64,   176,   246,   177,     6,     0,    61,    95,     6,
     0,     4,   260,     6,     0,     4,   246,     6,     0,    91,
     6,     0,    33,     6,     0,    86,   174,   246,     8,   246,
   175,     0,    86,   174,   246,     8,   246,     8,   246,   175,
     0,    86,     4,    87,   180,   246,     8,   246,   181,     0,
    86,     4,    87,   180,   246,     8,   246,     8,   246,   181,
     0,    88,     0,    94,     4,     0,    92,     0,    93,     4,
     6,     0,    89,   174,   246,   175,     0,    90,     0,    57,
    34,   180,   246,   179,   249,   181,     6,     0,    57,    34,
   180,   246,   179,   249,   179,   249,   179,   246,   181,     6,
     0,    57,    37,   180,   246,   179,   249,   181,     6,     0,
    57,    37,   180,   246,   179,   249,   179,   249,   179,   246,
   181,     6,     0,    57,    38,   180,   246,   179,   249,   181,
     6,     0,    57,    38,   180,   246,   179,   249,   179,   249,
   179,   246,   181,     6,     0,    57,    38,   180,   246,   179,
   249,   181,   180,   240,   181,     6,     0,    57,    38,   180,
   246,   179,   249,   179,   249,   179,   246,   181,   180,   240,
   181,     6,     0,   241,     0,   240,   241,     0,    66,   180,
   255,   179,   255,   179,   255,   181,     6,     0,    60,     6,
     0,    47,    37,   255,     7,   246,     6,     0,    47,    37,
   255,     7,   246,    50,    52,   246,     6,     0,    47,    37,
   255,     7,   246,    50,    51,   246,     6,     0,    47,    38,
   180,   246,   181,     7,   255,     6,     0,    44,    38,   180,
   246,   181,     7,   255,     6,     0,    47,    40,   180,   246,
   181,     7,   255,     6,     0,    60,    38,   255,     7,   246,
     6,     0,    60,    38,   255,     6,     0,    62,     6,     0,
    63,     6,     0,     3,     0,   164,     3,     0,    99,     0,
   100,     0,   101,     0,   102,     0,   103,     0,   247,     0,
   174,   246,   175,     0,   164,   246,     0,   163,   246,     0,
   169,   246,     0,   246,   164,   246,     0,   246,   163,   246,
     0,   246,   165,   246,     0,   246,   166,   246,     0,   246,
   167,   246,     0,   246,   173,   246,     0,   246,   159,   246,
     0,   246,   161,   246,     0,   246,   160,   246,     0,   246,
   162,   246,     0,   246,   156,   246,     0,   246,   157,   246,
     0,   246,   155,   246,     0,   246,   154,   246,     0,   246,
   153,   246,     8,   246,     0,    10,   174,   246,   175,     0,
    11,   174,   246,   175,     0,    12,   174,   246,   175,     0,
    13,   174,   246,   175,     0,    14,   174,   246,   175,     0,
    15,   174,   246,   175,     0,    16,   174,   246,   175,     0,
    17,   174,   246,   175,     0,    18,   174,   246,   175,     0,
    20,   174,   246,   175,     0,    21,   174,   246,   179,   246,
   175,     0,    22,   174,   246,   175,     0,    23,   174,   246,
   175,     0,    24,   174,   246,   175,     0,    25,   174,   246,
   175,     0,    26,   174,   246,   175,     0,    27,   174,   246,
   175,     0,    28,   174,   246,   179,   246,   175,     0,    29,
   174,   246,   179,   246,   175,     0,    30,   174,   246,   179,
   246,   175,     0,    19,   174,   246,   175,     0,     3,     0,
     9,     0,     4,     0,     4,   176,   246,   177,     0,     4,
   170,     0,     4,   176,   246,   177,   170,     0,     4,   171,
     0,     4,   176,   246,   177,   171,     0,     4,   178,     4,
     0,     4,   178,    64,   176,   246,   177,   178,     4,     0,
     4,   178,     4,   170,     0,     4,   178,    64,   176,   246,
   177,   178,     4,   170,     0,     4,   178,     4,   171,     0,
     4,   178,    64,   176,   246,   177,   178,     4,   171,     0,
   246,     8,   246,     0,   246,     8,   246,     8,   246,     0,
   250,     0,   164,   249,     0,   163,   249,     0,   249,   164,
   249,     0,   249,   163,   249,     0,   180,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   181,     0,   180,   246,
   179,   246,   179,   246,   179,   246,   181,     0,   180,   246,
   179,   246,   179,   246,   181,     0,   174,   246,   179,   246,
   179,   246,   175,     0,     0,   174,   252,   175,     0,     5,
     0,   252,   179,     5,     0,     0,   180,   254,   181,     0,
   174,   254,   175,     0,   255,     0,   254,   179,   255,     0,
     0,   246,     0,     4,   176,   177,     0,   180,   256,   181,
     0,   246,     0,   248,     0,     4,   176,   177,     0,   256,
   179,   246,     0,   256,   179,   248,     0,   256,   179,     4,
   176,   177,     0,   180,   246,   179,   246,   179,   246,   179,
   246,   181,     0,   180,   246,   179,   246,   179,   246,   181,
     0,   180,     4,   179,   246,   181,     0,     4,     0,     4,
   178,    85,   178,     4,     0,   180,   259,   181,     0,     4,
   178,    64,   176,   246,   177,   178,    85,     0,   257,     0,
   259,   179,   257,     0,     5,     0,    32,   174,     5,   175,
     0,    32,   174,     5,   179,   256,   175,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   148,   149,   150,   157,   165,   179,   191,   193,   196,
   198,   199,   202,   208,   213,   214,   215,   218,   222,   225,
   231,   236,   242,   250,   255,   259,   265,   270,   274,   279,
   283,   286,   291,   295,   299,   303,   308,   312,   315,   319,
   323,   327,   331,   335,   339,   342,   346,   349,   353,   356,
   365,   369,   375,   377,   378,   379,   380,   381,   382,   383,
   384,   385,   386,   387,   390,   396,   425,   430,   436,   441,
   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
   452,   455,   458,   462,   468,   474,   477,   481,   487,   493,
   496,   500,   506,   512,   515,   519,   527,   533,   536,   540,
   548,   554,   557,   561,   569,   575,   578,   582,   594,   600,
   603,   607,   619,   625,   628,   632,   644,   650,   653,   657,
   670,   676,   679,   683,   696,   702,   705,   709,   722,   734,
   750,   762,   775,   784,   796,   804,   816,   824,   836,   844,
   856,   864,   876,   888,   907,   920,   938,   955,   976,   993,
  1014,  1031,  1052,  1069,  1090,  1111,  1137,  1154,  1175,  1192,
  1215,  1228,  1253,  1264,  1270,  1289,  1300,  1308,  1314,  1320,
  1339,  1345,  1361,  1368,  1374,  1380,  1386,  1392,  1411,  1423,
  1429,  1448,  1469,  1477,  1483,  1489,  1495,  1507,  1513,  1519,
  1531,  1537,  1542,  1547,  1554,  1556,  1557,  1560,  1565,  1576,
  1594,  1602,  1606,  1617,  1676,  1695,  1699,  1719,  1735,  1749,
  1774,  1799,  1825,  1831,  1836,  1841,  1845,  1855,  1861,  1867,
  1871,  1875,  1879,  1883,  1888,  1895,  1899,  1904,  1922,  1932,
  1950,  1967,  1984,  2005,  2025,  2045,  2062,  2086,  2091,  2102,
  2104,  2107,  2109,  2110,  2111,  2112,  2115,  2117,  2118,  2119,
  2120,  2121,  2122,  2123,  2124,  2131,  2132,  2133,  2134,  2135,
  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,
  2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,
  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2167,  2172,  2176,
  2188,  2206,  2218,  2236,  2248,  2268,  2289,  2313,  2334,  2358,
  2379,  2404,  2411,  2424,  2431,  2435,  2439,  2443,  2448,  2453,
  2457,  2461,  2467,  2471,  2476,  2480,  2485,  2489,  2493,  2499,
  2505,  2511,  2515,  2521,  2536,  2543,  2549,  2558,  2570,  2574,
  2582,  2595,  2600,  2604,  2609,  2614,  2632,  2637,  2658,  2667,
  2673,  2678,  2682
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tView","tAttractor","tLayers","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarLine","tVectorLine","tTensorLine","tScalarPoint","tVectorPoint",
"tTensorPoint","tBSpline","tNurbs","tOrder","tWith","tBounds","tKnots","tColor",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Command","Loop","Extrude",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","SignedDouble",
"BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor",
"StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   185,   186,   186,   186,   186,   186,   187,   187,   187,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   191,   191,   192,   192,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   196,   195,   197,   197,   199,   198,   200,
   200,   202,   201,   203,   203,   205,   204,   206,   206,   208,
   207,   209,   209,   211,   210,   212,   212,   214,   213,   215,
   215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
   222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   232,   232,   232,   232,   233,   233,   233,   234,   234,   235,
   236,   236,   236,   237,   237,   237,   237,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   239,   239,   239,
   239,   239,   239,   239,   239,   240,   240,   241,   241,   242,
   242,   242,   242,   242,   242,   242,   242,   243,   243,   244,
   244,   245,   245,   245,   245,   245,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   247,   247,   247,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,   248,   248,   249,   249,   249,   249,   249,   250,   250,
   250,   250,   251,   251,   252,   252,   253,   253,   253,   254,
   254,   255,   255,   255,   255,   256,   256,   256,   256,   256,
   256,   257,   257,   257,   257,   257,   258,   258,   259,   259,
   260,   260,   260
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     4,
     7,     6,     3,     6,     3,     6,     4,     7,     4,     7,
     4,     7,     4,     7,     6,    11,     6,    11,     6,    11,
     6,    11,     6,    11,     6,    11,     5,    11,     5,    11,
     8,    11,     7,     8,    12,     6,     5,     7,     7,    12,
     7,     9,    17,     7,     8,     8,     7,    11,     5,     8,
    12,     8,    22,    20,     8,     8,     5,     8,     7,     8,
     5,    11,     5,     9,     1,     1,     1,     0,     2,     4,
     4,     6,     3,     3,     3,     2,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     8,    12,     8,
    12,     8,    12,    11,    15,     1,     2,     9,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     4,     2,     5,     2,     5,     3,     8,     4,     9,     4,
     9,     3,     5,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     0,     1,     3,     3,     1,     1,     3,     3,     3,
     5,     9,     7,     5,     1,     5,     3,     8,     1,     3,
     1,     4,     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   212,     0,   217,     0,   214,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    64,    63,    60,    61,    62,   240,     0,     0,     0,
    13,    14,    16,    15,    17,   313,   313,     0,   288,   290,
   341,     0,   289,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   247,     0,
     0,   207,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   322,     0,     0,     0,     0,   322,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   304,     0,     0,     0,     0,     0,   198,   322,
     0,     0,   198,   238,   239,     0,   322,   322,     0,     0,
     0,     0,     0,     0,   206,     0,   213,     0,   241,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   292,   294,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   250,   249,   251,   133,   135,
     0,     0,     0,     0,     0,     0,   205,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   204,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   290,     0,   323,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   306,   305,     0,     0,     0,     0,   198,   198,
     0,     0,     0,     0,     0,     0,     0,   203,     0,     0,
    69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   215,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   315,     0,     0,     0,     0,     0,   296,
     0,   130,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,   139,   141,   143,   248,   322,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   265,   264,   262,   263,   258,   260,   259,   261,   253,
   252,   254,   255,   256,   257,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
   326,   327,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   308,
   307,   197,     0,   196,   195,     0,     0,     0,     0,     0,
   200,   199,   237,     0,     0,   201,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   216,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   314,
     0,     0,    19,     0,   291,   298,   300,     0,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   287,   276,     0,
   278,   279,   280,   281,   282,   283,     0,     0,     0,   342,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,   159,     0,     0,     0,
    65,     0,     0,   167,   322,   322,     0,   322,   179,     0,
   187,   322,   322,   324,     0,     0,     0,   325,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   191,   193,     0,     0,     0,     0,
     0,     0,    69,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,     0,     0,
   322,     0,     0,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   322,   322,     0,
     0,     0,     0,   322,   322,     0,     0,     0,     0,     0,
   322,     0,   322,     0,     0,     0,     0,     0,   316,     0,
   313,   293,   295,     0,     0,     0,     0,     0,     0,   132,
     0,     0,     0,     0,     0,   134,   136,   145,   147,   149,
   151,   153,   155,     0,     0,   266,     0,     0,     0,     0,
   322,     0,   322,     0,     0,   328,   302,   290,   329,   330,
   166,     0,   322,   322,   322,   230,     0,   322,   322,   322,
   322,   322,   322,   322,     0,     0,     0,     0,     0,     0,
     0,   236,   202,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    67,     0,     0,     0,
     0,   317,     0,     0,     0,   208,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     0,     0,     0,    18,     0,     0,   277,   284,   285,   286,
   343,   131,   138,   140,   142,   144,     0,   335,     0,     0,
    66,   163,   171,     0,   174,     0,   168,     0,   169,   189,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   198,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   177,     0,   322,   322,     0,   322,     0,     0,     0,     0,
     0,     0,   322,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   322,     0,     0,     0,     0,     0,     0,     0,     0,
   313,     0,     0,     0,     0,   290,     0,   161,     0,   176,
   186,   303,   331,     0,   234,   180,   182,     0,     0,   233,
   235,   188,   164,   175,   185,   190,     0,   312,     0,   311,
     0,     0,   218,     0,   220,     0,   222,     0,    68,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   317,     0,   320,     0,     0,     0,     0,
   210,   209,     0,     0,     0,     0,     0,    21,     0,    30,
     0,    34,     0,    28,     0,     0,    33,     0,    38,    36,
     0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     0,     0,    50,     0,     0,   297,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   172,     0,   232,
   231,   198,     0,   194,     0,     0,     0,     0,     0,     0,
   226,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   319,   322,   318,   322,
     0,     0,   322,     0,     0,   317,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
     0,     0,     0,     0,     0,     0,   299,   301,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   310,     0,     0,     0,   229,
   322,     0,   227,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
     0,   211,     0,     0,    35,     0,     0,     0,     0,    25,
     0,    31,     0,    37,    26,    39,     0,    42,     0,    46,
    47,     0,     0,    49,     0,     0,   146,   148,   150,   152,
   154,   156,   158,   160,     0,   339,     0,   162,   336,   334,
     0,     0,   192,     0,     0,     0,     0,     0,   224,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   322,   322,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   337,     0,     0,   309,   219,   221,   223,     0,
   322,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    84,    88,    92,   165,   170,     0,     0,   181,     0,     0,
     0,     0,     0,    29,    32,    40,     0,    41,    48,    43,
     0,     0,   340,     0,   333,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   322,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    27,     0,     0,     0,   332,     0,   225,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    82,     0,    86,     0,    90,     0,     0,     0,     0,   322,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    44,    20,   338,   173,   228,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    83,
    85,    87,    89,    91,    93,     0,     0,     0,     0,   322,
     0,     0,     0,     0,     0,     0,    96,   100,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,   322,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   184,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    94,     0,
    98,     0,   102,     0,   322,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   183,     0,
    22,     0,     0,     0,     0,     0,     0,    95,    97,    99,
   101,   103,   105,   322,     0,     0,     0,   108,   112,   116,
     0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
     0,   110,     0,   114,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   107,   109,
   111,   113,   115,   117,     0,   120,   124,   128,    23,     0,
     0,     0,     0,     0,     0,     0,   118,     0,   122,     0,
   126,     0,     0,     0,     0,     0,     0,   119,   121,   123,
   125,   127,   129,     0,     0,     0
};

static const short yydefgoto[] = {  1544,
     5,     6,    19,    20,    21,    22,     7,    64,    65,    66,
   488,  1320,   637,  1268,  1322,   638,  1269,  1324,   639,  1270,
  1428,   640,  1401,  1430,   641,  1402,  1432,   642,  1403,  1489,
   643,  1475,  1491,   644,  1476,  1493,   645,  1477,  1526,   646,
  1520,  1528,   647,  1521,  1530,   648,  1522,    67,   482,   472,
   473,   474,   475,    71,    72,    73,    74,  1040,  1041,    75,
    76,    79,   807,   298,   129,   452,   162,   163,   222,   375,
   885,   975,   976,   453,   830,  1099,  1167,   130
};

static const short yypact[] = {  2450,
    71,-32768,-32768,   -27,-32768,   118,  2568,-32768,     7,   156,
   124,   168,   179,   224,   235,    87,    94,   129,-32768,-32768,
-32768,-32768,   319,   146,   350,   -99,   151,   207,   -41,   -46,
   213,   260,   393,   279,   392,   400,   422,   562,   426,    45,
   334,   101,   101,   344,   117,   345,   443,   -40,   479,   540,
   551,   351,   401,   -26,    10,-32768,   409,-32768,   583,-32768,
   597,   606,   578,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   625,     7,  2606,
-32768,-32768,-32768,-32768,-32768,   456,   456,   630,-32768,    24,
-32768,  1584,-32768,   462,   466,   468,   471,   474,   483,   484,
   486,   509,   515,   525,   526,   527,   529,   532,   533,   534,
   541,   542,   543,   545,   546,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,   647,   699,  1584,   349,    16,   256,-32768,   715,
   720,-32768,  1584,  1584,  1584,  1584,   552,  1584,  1584,   553,
  1584,  1584,  1584,    23,  1584,   548,   555,   556,    23,   564,
   565,   557,   572,   573,   574,   579,   101,   101,   101,  1584,
  1584,    80,-32768,   113,   101,   602,   612,   613,-32768,    23,
   618,   748,-32768,-32768,-32768,    -2,    23,    23,  1584,   -25,
  1584,   708,  1584,  1584,-32768,   790,-32768,   626,-32768,     7,
   627,   628,   629,   631,   633,   634,   635,   636,   637,   638,
   639,   643,   649,   653,   654,   656,   657,   658,   659,   660,
   662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
   793,   672,   674,   675,-32768,-32768,  1584,    63,   862,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
   799,   910,   950,  1055,  1080,   673,   673,   673,-32768,-32768,
  5429,   840,  5279,    18,   677,   680,-32768,  1584,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,-32768,   -13,  5452,  2679,  5475,  5498,  1584,  5521,
  2702,  1584,  2725,  5544,  5567,   463,  1612,  6901,   848,  5590,
  1584,  1584,  1584,   852,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,   148,-32768,-32768,  1549,  1975,   101,   101,   524,   524,
   288,  1584,  1584,  1584,    25,   283,  1584,-32768,  2398,   101,
-32768,   853,   854,  5613,   779,  1584,  5636,   683,   812,  5659,
-32768,  1584,   719,   860,   865,   866,   867,   868,   869,   870,
   871,   872,   873,   875,   876,   877,   878,   879,   880,   884,
   885,   886,   887,   889,   890,   891,   735,   893,   894,   895,
   896,   899,   898,-32768,    26,   900,   901,   907,  5304,  -141,
   728,-32768,  5682,  5705,  5728,  5751,  5774,  5797,  5820,  5843,
  5866,  5889,  5912,  2421,  5935,  5958,  5981,  6004,  6027,  6050,
  2526,  3116,  3137,    88,-32768,-32768,-32768,-32768,-32768,    23,
   121,  1164,  1584,  1584,  1584,  1584,   908,   911,  1584,   902,
  2183,   403,   458,   388,   388,   366,   366,   366,   366,   355,
   355,   673,   673,   673,   673,   912,  1612,   906,   913,   914,
   915,  6073,   917,   919,  6096,   921,   922,   923,   652,   473,
  2210,-32768,  -125,  1584,   924,  2748,  6119,  6142,  1584,  2771,
  2794,  6165,  6188,  6211,  6234,  6257,   101,  1584,  1584,-32768,
-32768,-32768,   747,  2629,-32768,   751,  1584,  3158,  3179,  3200,
-32768,-32768,-32768,  1584,  5329,-32768,   264,   330,   753,   754,
   928,   762,  6280,   942,  1584,  1584,-32768,  6303,   804,   772,
   773,   774,   775,   776,   780,   781,   782,   783,   785,   791,
   801,   802,   803,   807,   808,   809,   810,   811,   822,   823,
   826,   827,   828,   829,   830,   831,   832,   841,   851,-32768,
   978,   818,-32768,   855,   -84,-32768,-32768,  1584,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1584,
-32768,-32768,-32768,-32768,-32768,-32768,  1584,  1584,  1584,-32768,
  1612,  1027,  1584,  1584,  1584,  1584,  1584,  1030,  1031,  1033,
  1274,  1361,  1693,  1725,  1746,-32768,-32768,  5354,  1034,  1584,
-32768,   123,   101,-32768,    23,    23,  1035,    23,-32768,  1036,
-32768,    23,    23,-32768,   746,  1584,  1640,-32768,  1767,   864,
  1038,  1040,  1041,   531,  1042,  1043,  1044,  1045,  1046,  1048,
  1049,   295,  3221,  3242,-32768,-32768,  2817,   101,   101,   101,
  1782,  1051,-32768,   904,   905,   916,   934,   946,   947,   972,
   973,   975,   976,   977,   979,  1054,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1584,  1584,
    23,  1584,  1061,    23,  2231,   624,  1073,   939,  1037,  1584,
  1584,   101,  1081,  1082,   987,  1084,  1085,    23,    23,  1086,
   101,  1151,  1152,    23,    23,  1153,  1154,  1155,  1156,  1157,
    23,   611,    23,  1158,  1159,  1160,  1163,  1167,-32768,  1165,
   456,-32768,-32768,  5379,  6326,  6349,  6372,  6395,   142,-32768,
  1804,  1819,  1834,  1857,  1888,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   984,     0,  6901,  1166,     9,    78,  1189,
    23,  1190,    23,  1191,  1192,-32768,  2258,   476,  2210,-32768,
-32768,  1584,    23,    23,    23,-32768,   343,    23,    23,    23,
    23,    23,    23,    23,  1584,  1584,  1584,  1047,   -72,   261,
   269,-32768,-32768,   432,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,-32768,  3263,  3284,  1207,
  6418,   -48,  1141,  1584,  1584,-32768,  1050,     7,  1053,  3305,
  3326,   -75,  1059,  1074,  1069,  1075,  1072,  1079,  1076,  1077,
   -39,  1078,  1083,  1099,  1096,  1097,  1102,  1103,  1104,  1106,
  1111,-32768,-32768,-32768,-32768,-32768,  1108,  1109,  1112,  1114,
  1116,  1119,  1117,-32768,  1118,  1120,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    72,  1121,  1668,  1220,
-32768,-32768,-32768,   101,-32768,  1253,-32768,  1254,-32768,-32768,
  1584,  1115,  3347,  1255,  1284,  1294,  1584,  1584,  1295,  1296,
  1297,  1299,  1300,  1301,  1302,  2840,  6441,  2592,   524,   101,
  1303,   101,  1304,   101,     2,  1305,  3368,  3389,  3410,  3431,
  3452,  3473,  3494,  3515,  3536,  3557,  3578,  3599,  1584,  1584,
-32768,  1316,    23,    23,  1228,    23,   431,  6464,  1584,     7,
  1322,  1584,    23,  1323,  1327,  1325,  1169,  1326,   611,  1329,
  1333,  1584,  1331,  1336,  1334,  1335,  1339,   611,  1584,  1584,
  1584,    23,  1337,  1341,   611,  1584,  1342,  1343,  1344,  1584,
   456,  1345,   145,  1340,  1263,    20,  3620,-32768,    13,-32768,
-32768,  6901,-32768,  1584,-32768,-32768,-32768,  1909,  1946,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1171,-32768,  1584,-32768,
  1174,   299,-32768,   301,-32768,   312,-32768,    99,-32768,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,  3641,  3662,   -48,   175,-32768,   -73,  1172,  1275,  1584,
-32768,-32768,  3683,     7,  1182,  3704,  1185,-32768,  1186,-32768,
  1187,-32768,  1193,-32768,  1194,  6487,-32768,  1195,-32768,-32768,
  1196,  1197,  6510,  3725,  6533,  1198,-32768,  1200,  1201,  3746,
  1199,  1204,-32768,  3767,  1203,   286,  1556,  1584,  1584,  1584,
  1584,  1584,  1584,     1,  1202,  1584,  1584,-32768,  3788,-32768,
-32768,   524,  2621,-32768,  1584,  1584,  1584,  1363,  1205,   -38,
-32768,  3809,  3830,  3851,  3872,  3893,  3914,  3935,  3956,  3977,
  3998,  4019,  4040,  1584,  1584,  1286,-32768,    23,-32768,    23,
  1584,  2863,    23,  1241,  1378,   -48,   611,  1392,  1584,  1390,
   611,  1391,  1395,  1397,  1398,  1399,  1584,  1402,    23,  1403,
  1404,  1584,  1408,  1406,  1584,  1396,-32768,-32768,  1407,  1996,
  2019,  2050,  2071,  2098,  2120,  2141,  1243,     0,  1417,  1421,
  2886,  4061,  1427,  1245,  1584,-32768,  2909,  2932,  2955,-32768,
    23,  1439,-32768,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  2978,  3001,  1266,-32768,  1269,
  2162,-32768,  1268,     7,-32768,  1271,  1272,  1273,  4082,-32768,
  1278,-32768,  1279,-32768,-32768,-32768,  6556,-32768,  1276,-32768,
-32768,  6579,  1287,-32768,  6602,  1285,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1405,-32768,   -50,-32768,-32768,-32768,
  1584,  1288,-32768,  3024,  1457,  1460,     3,  1291,-32768,  4103,
  4124,  4145,  4166,  4187,  4208,  4229,  4250,  4271,  6625,  6648,
  6671,  1465,  1466,    23,    23,-32768,  1471,     7,   611,   611,
   611,   611,  1473,  1475,  1478,   611,  1479,  1480,  1481,  1485,
  1315,     0,-32768,  2650,  1487,-32768,-32768,-32768,-32768,    99,
    23,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
-32768,-32768,-32768,-32768,-32768,  1314,  1313,-32768,     7,  1317,
  1319,  1324,  1328,-32768,-32768,-32768,  1350,-32768,-32768,-32768,
  1351,  1584,-32768,  1584,-32768,  1352,    12,  1353,  4292,  4313,
  4334,  4355,  4376,  4397,  4418,  4439,  4460,  1330,  1332,  1356,
    23,  1423,  1364,   611,   611,  1499,  1501,   611,  1503,  5404,
  3047,  1514,  1527,    23,  1584,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,  1357,  1359,     7,  1362,
  1365,-32768,-32768,  1367,  1368,  1372,-32768,  1370,-32768,  1381,
  4481,  4502,  4523,  4544,  4565,  4586,  4607,  4628,  4649,   -37,
  6901,    50,  6901,    61,  6901,  1459,  1584,     7,   611,    23,
  1539,  1540,  1504,  1557,  1558,  1584,  1584,  1584,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  1585,  1584,  1586,  1584,  1611,
  1410,  4670,     7,  1440,  1441,-32768,-32768,-32768,-32768,-32768,
  4691,  4712,  4733,  4754,  4775,  4796,  6694,  6717,  6740,  6901,
-32768,  6901,-32768,  6901,-32768,  1584,  1584,  1498,   611,    23,
  1584,  1584,  1584,  1584,  1584,  1584,-32768,-32768,-32768,  4817,
  3070,  1470,  1467,  1468,  4838,  4859,  4880,  4901,  4922,  4943,
  1493,  1494,  1495,  1584,  1642,-32768,    23,   611,  1584,  1584,
  1584,  1584,  1584,  1584,  1584,  1584,  1584,  3093,-32768,  1497,
  1526,  4964,  4985,  5006,  5027,  5048,  5069,   176,  6901,   262,
  6901,   268,  6901,  1711,    23,  1712,  1584,  1584,  1584,  1584,
  1584,  1584,  1584,  1715,  1584,  1717,  1584,  1718,-32768,  1548,
-32768,  5090,  5111,  5132,  6763,  6786,  6809,  6901,-32768,  6901,
-32768,  6901,-32768,    23,  1584,  1584,  1584,-32768,-32768,-32768,
  1550,  5153,  5174,  5195,  1552,  1553,  1554,    23,  1584,  1584,
  1584,  1584,  1584,  1584,  1559,  5216,  5237,  5258,   298,  6901,
   305,  6901,   313,  6901,   611,  1584,  1584,  1584,  1584,  1729,
  1584,  1730,  1584,  1731,  1564,  6832,  6855,  6878,  6901,-32768,
  6901,-32768,  6901,-32768,  1734,-32768,-32768,-32768,-32768,  1561,
  1562,  1563,  1584,  1584,  1584,   317,  6901,   338,  6901,   430,
  6901,  1584,  1738,  1584,  1739,  1584,  1740,  6901,-32768,  6901,
-32768,  6901,-32768,  1749,  1750,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1128,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1747,  1748,
  -314,   211,  1752,-32768,-32768,-32768,-32768,   536, -1029,-32768,
-32768,   -76,  -892,   -23,-32768,  1168,   -12,-32768,   -86,-32768,
  -916,   882,   814,  -420, -1077,-32768,-32768,-32768
};


#define	YYLAST		7074


static const short yytable[] = {   128,
   223,   330,   190,   828,  1097,   476,   993,   957,  1219,    77,
  1113,   180,   140,   182,   832,  1002,   582,   137,  1028,   264,
  1166,  1038,  1009,   171,   412,    89,   296,  1039,   536,   537,
   164,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   597,   172,   598,   335,  1056,    26,    27,
    28,    29,    30,    31,    32,    33,   380,    34,   229,    36,
    37,  1038,    39,    40,   133,   923,     8,  1039,   153,   265,
   134,   154,   155,   833,   156,   692,   693,   317,   318,    52,
   317,   318,   252,   253,   254,   255,   256,   257,   258,   894,
   266,   261,   263,    53,    54,  1058,   860,  1059,   861,   285,
   286,   287,   288,   343,   290,   291,     9,   293,   294,   295,
    10,   300,   834,   317,   318,   883,   381,   563,  1212,    81,
  1213,   884,   138,   141,  1253,   903,   315,   316,   139,   173,
   699,  1345,  1112,  1346,   312,   313,   314,   181,   336,  1136,
   166,  1017,   321,   167,   168,   334,   924,   337,  1038,   339,
   340,   436,    80,    63,  1039,   437,   413,   414,   415,   416,
    78,   317,   318,    82,  1137,   317,   318,   331,  1141,   829,
  1098,   958,  1220,   183,    83,   120,   121,   417,   418,   225,
   226,   122,  1283,   225,   226,   227,   125,   228,  1026,   227,
   530,   228,   297,   379,   531,   481,   383,   384,   385,   386,
   387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,  1113,  1347,    84,
  1348,    11,    12,    13,    14,    15,    16,    17,    18,  1349,
    85,  1350,   317,   318,   421,   422,   423,   424,   425,   426,
   427,   428,   429,   430,   431,   432,   433,   434,   435,   319,
    86,   267,   560,   158,   159,   442,   561,    87,   445,   564,
   565,   566,   567,   451,   160,   317,   318,   456,   457,   458,
   161,   460,   461,   462,   463,   464,   465,   466,   483,   484,
   568,   569,   320,  1018,  1019,  1020,  1021,   717,   478,   479,
   480,   597,    88,   485,   470,   471,  1240,  1241,  1242,  1243,
   317,   318,   493,  1247,  1022,  1023,   821,   487,   498,   131,
   597,    89,    90,    91,   135,    92,   467,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,  1057,
   115,    89,    90,  1058,  1443,   132,  1444,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   325,
   136,  1300,  1301,   329,   177,  1304,   142,   178,   571,   572,
   573,   574,   575,   847,   848,   578,   624,   625,   626,   627,
   628,   629,   630,   631,   632,   633,   634,   635,   268,   269,
   270,   271,   272,   451,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   317,   318,   379,   317,   318,   282,   146,
   599,   317,   318,   143,   144,   604,  1354,   147,   980,   862,
  1445,   863,  1446,   623,   613,   614,  1447,   864,  1448,   865,
   317,   318,   145,   617,   612,  1087,  1088,   317,   318,   148,
   621,   317,   318,   317,   318,   152,   477,   116,   117,   118,
   119,   655,   656,   745,   317,   318,  1499,  1035,  1500,  1036,
   170,   120,   121,  1501,   174,  1502,  1393,   122,   123,   124,
  1037,  1503,   125,  1504,   126,  1532,   127,  1533,   624,   625,
   626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
   636,   120,   121,   157,   694,  1421,  1534,   122,  1535,   279,
   280,   281,   125,   165,   169,   262,   695,   282,   277,   278,
   279,   280,   281,   696,   697,   698,   736,   451,   282,   701,
   702,   703,   704,   705,   951,   175,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   176,   716,   270,   271,   272,
   282,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   718,   379,   727,   729,   179,   282,    41,    42,    43,    44,
   737,    46,   184,   268,   269,   270,   271,   272,   185,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   149,   150,
   186,   151,  1505,   282,   815,   749,   750,   751,  1536,   187,
  1537,   981,   866,   271,   272,   188,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   768,   769,   189,   771,   221,
   282,   775,   225,   226,   224,   230,   780,   781,   449,   231,
   228,   232,   225,   226,   233,   225,   226,   234,   595,   782,
   228,   842,   259,   228,    89,    90,   235,   236,   791,   237,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   238,   268,   269,   270,   271,   272,   239,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   240,   241,
   242,   890,   243,   282,   260,   244,   245,   246,   843,   802,
   803,   804,   805,   806,   247,   248,   249,  1104,   250,   251,
   283,   856,   857,   858,   284,   289,   292,   301,   302,   303,
   307,   867,   868,   869,   870,   871,   872,   873,   874,   875,
   876,   877,   878,   305,   306,   308,   309,   310,    89,    90,
   887,   888,   311,   328,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   268,   269,   270,   271,
   272,   322,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   323,   324,   327,   338,   341,   282,   374,   776,   342,
   344,   345,   346,   404,   347,   927,   348,   349,   350,   351,
   352,   353,   354,   984,   120,   121,   355,   932,   379,   496,
   122,   929,   356,   938,   939,   125,   357,   358,   594,   359,
   360,   361,   362,   363,  1015,   364,   365,   366,   367,   368,
   369,   370,   371,   372,   373,   282,   410,   952,   377,   954,
   376,   956,   419,   378,   454,   972,   973,   420,   459,   489,
   490,   492,   495,   499,   500,   983,   523,   382,   986,   501,
   502,   503,   504,   505,   506,   507,   508,   509,   996,   510,
   511,   512,   513,   514,   515,  1003,  1004,  1005,   516,   517,
   518,   519,  1010,   520,   521,   522,  1014,   524,   525,   526,
   527,   528,   529,   538,   532,   579,   533,  1064,   120,   121,
  1029,   534,   583,   576,   122,   405,   577,   581,   584,   125,
   585,   586,   726,   588,   589,  1033,   591,   615,   592,   593,
   600,   616,   649,   650,   651,   652,  1042,  1043,  1044,  1045,
  1046,  1047,  1048,  1049,  1050,  1051,  1052,  1053,   654,   658,
   659,   660,   661,   662,   663,   406,  1062,   299,   664,   665,
   666,   667,   304,   668,   268,   269,   270,   271,   272,   669,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   670,
   671,   672,   689,   326,   282,   673,   674,   675,   676,   677,
   332,   333,   690,  1090,  1091,  1092,  1093,  1094,  1095,  1096,
   678,   679,  1101,  1102,   680,   681,   682,   683,   684,   685,
   686,  1107,  1108,  1109,   268,   269,   270,   271,   272,   687,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   688,
  1126,  1127,   700,   691,   282,   706,   707,  1131,   708,   779,
   715,   721,   723,   732,   733,  1139,   734,   735,   738,   739,
   740,   741,   742,  1147,   743,   744,   753,  1198,  1152,   767,
   407,  1155,   268,   269,   270,   271,   272,   772,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   755,   756,   777,
   778,  1174,   282,   783,   784,   408,   786,   787,   790,   757,
  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,  1189,
  1190,  1191,   268,   269,   270,   271,   272,   758,   273,   274,
   275,   276,   277,   278,   279,   280,   281,    89,    90,   759,
   760,  1239,   282,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   761,   762,  1214,   763,   764,
   765,   785,   766,   792,   793,   796,   797,   798,   799,   800,
   809,   827,  1273,   810,   811,   812,    89,    90,   570,   813,
   814,   831,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   835,   837,   839,   840,  1259,  1260,
  1261,  1262,  1263,  1264,  1265,  1266,  1267,   268,   269,   270,
   271,   272,   881,   273,   274,   275,   276,   277,   278,   279,
   280,   281,  1328,   562,   886,   928,   859,   282,  1280,   889,
  1281,   891,   268,   269,   270,   271,   272,   895,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   897,   896,   898,
   899,  1353,   282,   900,   901,   902,   904,   905,   930,   931,
   935,  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,
  1321,  1323,  1325,   906,   907,   908,  1378,   120,   121,   709,
   909,   910,   911,   122,   912,   913,   914,   915,   125,   936,
   916,   933,   917,   919,   918,   920,   921,   922,   925,   937,
   940,   941,   942,  1352,   943,   944,   945,   946,   953,   955,
   959,   978,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,
  1369,  1370,   974,  1372,   985,  1374,   120,   121,   988,   989,
   990,   992,   122,   991,   994,   995,   997,   125,   998,   999,
  1000,  1001,  1007,  1008,  1011,  1012,  1024,  1025,  1016,  1013,
  1032,  1060,  1390,  1391,  1034,  1061,  1065,  1395,  1396,  1397,
  1398,  1399,  1400,  1067,  1068,  1069,   710,  1070,  1110,  1128,
  1074,  1075,  1071,  1073,  1080,  1081,  1079,  1083,  1084,  1100,
  1418,  1086,  1134,  1135,  1111,  1422,  1423,  1424,  1425,  1426,
  1427,  1429,  1431,  1433,  1138,  1140,  1142,  1143,   719,   720,
  1156,   722,  1144,  1145,  1146,   724,   725,  1148,  1150,  1151,
  1153,  1154,  1157,  1452,  1453,  1454,  1455,  1456,  1457,  1458,
  1165,  1460,  1168,  1462,  1169,  1173,   268,   269,   270,   271,
   272,  1172,   273,   274,   275,   276,   277,   278,   279,   280,
   281,  1472,  1473,  1474,  1179,  1194,   282,  1195,  1197,  1199,
  1200,  1201,  1203,  1204,  1206,  1486,  1487,  1488,  1490,  1492,
  1494,  1208,  1217,  1210,   770,  1218,  1215,   773,  1211,  1221,
  1234,  1235,  1506,  1507,  1508,  1509,  1238,  1511,  1244,  1513,
  1245,   788,   789,  1246,  1248,  1249,  1250,   794,   795,  1251,
  1252,  1256,  1271,  1272,   801,  1274,   808,  1275,  1276,  1527,
  1529,  1531,  1277,  1298,  1302,  1299,  1303,  1305,  1538,  1294,
  1540,  1295,  1542,   268,   269,   270,   271,   272,  1308,   273,
   274,   275,   276,   277,   278,   279,   280,   281,  1278,  1279,
  1282,  1284,  1309,   282,   836,  1296,   838,  1326,  1327,  1351,
  1329,  1331,  1332,  1330,  1356,  1357,   844,   845,   846,  1333,
  1334,   849,   850,   851,   852,   853,   854,   855,    89,    90,
  1089,  1335,  1359,  1360,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,    89,    90,  1358,  1376,
  1371,  1373,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    89,   450,  1375,  1406,  1379,  1380,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    89,   728,  1392,  1407,  1408,  1419,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
    89,   926,  1415,  1416,  1417,  1435,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   711,   979,
  1436,   268,   269,   270,   271,   272,   987,   273,   274,   275,
   276,   277,   278,   279,   280,   281,  1449,  1451,   120,   121,
  1459,   282,  1461,  1463,   122,  1006,  1464,   468,  1478,   125,
   712,  1482,  1483,  1484,  1510,  1512,  1514,  1495,  1515,  1519,
  1523,  1524,  1525,  1539,  1541,  1543,   120,   121,  1545,  1546,
   754,   713,   122,    68,    69,  1257,     0,   125,    70,     0,
     0,     0,     0,     0,   730,   977,     0,     0,     0,     0,
     0,     0,   731,     0,   120,   121,     0,     0,     0,     0,
   122,     0,     0,     0,     0,   125,     0,   752,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   120,   121,     0,     0,     0,     0,   122,   822,
     0,     0,     0,   125,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   823,     0,     0,     0,     0,     0,
   120,   121,     0,     0,     0,     0,   122,     0,     0,   824,
     0,   125,     0,     0,     0,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,   825,     0,     0,   282,     0,     0,     0,     0,
     0,  1129,     0,  1130,     0,     0,  1133,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,  1149,   826,     0,     0,     0,   282,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,  1030,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1178,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   268,   269,   270,   271,   272,   282,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,  1031,     0,     0,   282,     0,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   268,   269,   270,   271,   272,   282,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   268,   269,   270,   271,
   272,   282,   273,   274,   275,   276,   277,   278,   279,   280,
   281,  1158,     0,     0,     0,     0,   282,  1236,  1237,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,  1159,     0,     0,     0,     0,   282,
     0,     0,     0,     0,  1258,     0,     0,     0,     0,     0,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,  1160,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,  1161,     0,     0,     0,
     0,   282,     0,     0,  1297,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1310,   268,   269,
   270,   271,   272,  1162,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
     0,     0,     0,     0,     0,  1163,     0,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,  1355,     0,     0,  1164,   282,   268,   269,
   270,   271,   272,   469,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,  1196,   282,     0,
     0,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
   580,   282,     0,  1394,     0,     0,     0,     0,     0,     0,
     0,     0,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   596,     0,     0,
  1420,     0,   282,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   774,     0,
     0,     0,     0,   282,     0,     0,     0,     0,  1450,     0,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   841,     0,     0,     0,     0,
   282,     0,   268,   269,   270,   271,   272,  1471,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,  1485,   282,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,     0,     0,     0,
     0,     0,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,     0,     0,     0,     0,     0,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,    26,    27,    28,    29,    30,    31,    32,    33,     0,
    34,     0,    36,    37,     0,    39,    40,     0,     0,    -8,
     1,     0,    -8,   -51,     0,     0,     0,     0,     0,     0,
     0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    53,    54,     0,     0,
   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,   -51,
   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,     0,
     0,     0,   -51,   -51,   -51,   -51,   -51,   -51,     0,   -51,
   -51,   -51,   -51,   -51,   -51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -51,   -51,
     0,     0,     0,     0,     0,   -51,    63,   -51,   -51,   -51,
   -51,   -51,   -51,   -51,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    -8,    -8,    -8,    -8,    -8,    -8,    -8,
    -8,    23,     0,   268,   269,   270,   271,   272,   486,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   -51,     2,
     3,     0,     4,   282,     0,     0,     0,     0,    24,   550,
    25,    26,    27,    28,    29,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,     0,     0,     0,
    41,    42,    43,    44,    45,    46,     0,    47,    48,    49,
    50,    51,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   191,     0,     0,     0,    53,    54,     0,     0,
     0,     0,     0,    55,     0,    56,    57,    58,    59,    60,
    61,    62,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,     0,    36,    37,     0,    39,    40,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,    52,     0,     0,     0,     0,   282,     0,
     0,   192,   193,   194,   557,     0,    63,    53,    54,   195,
   196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     0,     0,     0,     0,     0,     0,     0,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,     0,   215,   216,
   217,   218,   219,   220,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,     0,    63,     0,     0,
   949,     0,   950,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,     0,     0,     0,     0,  1105,
     0,  1106,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,     0,     0,     0,     0,  1254,     0,
  1255,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,     0,   268,   269,   270,   271,   272,   439,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,     0,   268,   269,   270,
   271,   272,   444,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,     0,
   268,   269,   270,   271,   272,   446,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,     0,   268,   269,   270,   271,   272,   601,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,     0,   268,   269,   270,   271,
   272,   605,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,     0,   268,
   269,   270,   271,   272,   606,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,     0,   268,   269,   270,   271,   272,   748,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,     0,   268,   269,   270,   271,   272,
   947,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,     0,   268,   269,
   270,   271,   272,  1132,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
     0,   268,   269,   270,   271,   272,  1170,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,     0,   268,   269,   270,   271,   272,  1175,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,     0,   268,   269,   270,
   271,   272,  1176,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,     0,
   268,   269,   270,   271,   272,  1177,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,     0,   268,   269,   270,   271,   272,  1192,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,     0,   268,   269,   270,   271,
   272,  1193,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,     0,   268,
   269,   270,   271,   272,  1216,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,     0,   268,   269,   270,   271,   272,  1307,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,     0,   268,   269,   270,   271,   272,
  1405,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,     0,   268,   269,
   270,   271,   272,  1434,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,   558,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,   559,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,   618,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,   619,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,   620,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,   746,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
   747,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,   879,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,   880,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,   892,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,   893,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,   934,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,   960,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,   961,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,   962,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,   963,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
   964,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,   965,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,   966,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,   967,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,   968,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,   969,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,   970,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,   971,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1027,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1054,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1055,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1063,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1066,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1077,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1082,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1085,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1103,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1114,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1115,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1116,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1117,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1118,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1119,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1120,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1121,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1122,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1123,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1124,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1125,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1171,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1202,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1222,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1223,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1224,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1225,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1226,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1227,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1228,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1229,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1230,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1285,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1286,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1287,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1288,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1289,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1290,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1291,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1292,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1293,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1336,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1337,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1338,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1339,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1340,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1341,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1342,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1343,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1344,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1377,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1381,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1382,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1383,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1384,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1385,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1386,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1404,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1409,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1410,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1411,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1412,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1413,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1414,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1437,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1438,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1439,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1440,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1441,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,   268,   269,   270,   271,   272,  1442,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,   268,   269,   270,   271,   272,  1465,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,   268,   269,   270,   271,   272,  1466,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,   268,   269,   270,   271,   272,
  1467,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,   268,   269,   270,   271,
   272,  1479,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,   268,   269,   270,
   271,   272,  1480,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,   268,   269,
   270,   271,   272,  1481,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,   268,
   269,   270,   271,   272,  1496,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
   268,   269,   270,   271,   272,  1497,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,   268,   269,   270,   271,   272,  1498,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,     0,     0,   411,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,     0,     0,
   535,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,     0,     0,   622,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,     0,     0,
   714,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,     0,     0,   816,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,     0,     0,
  1306,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,   409,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,   438,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,   440,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,   441,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,   443,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,   447,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,   448,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,   455,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,   491,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
   494,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,   497,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,   539,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,   540,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,   541,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,   542,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,   543,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,   544,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,   545,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,   546,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
   547,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,   548,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,   549,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,   551,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,   552,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,   553,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,   554,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,   555,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,   556,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,   587,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
   590,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,   602,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,   603,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,   607,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,   608,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,   609,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,   610,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,   611,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,   653,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,   657,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
   817,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,   818,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,   819,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,   820,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,   882,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,   948,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,   982,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,  1072,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,  1076,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,  1078,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
  1205,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,  1207,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,  1209,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,  1231,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,  1232,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282,     0,  1233,   268,   269,   270,   271,
   272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
   281,     0,     0,     0,     0,     0,   282,     0,  1387,   268,
   269,   270,   271,   272,     0,   273,   274,   275,   276,   277,
   278,   279,   280,   281,     0,     0,     0,     0,     0,   282,
     0,  1388,   268,   269,   270,   271,   272,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,     0,     0,     0,
     0,     0,   282,     0,  1389,   268,   269,   270,   271,   272,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     0,     0,     0,     0,     0,   282,     0,  1468,   268,   269,
   270,   271,   272,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,     0,     0,     0,     0,     0,   282,     0,
  1469,   268,   269,   270,   271,   272,     0,   273,   274,   275,
   276,   277,   278,   279,   280,   281,     0,     0,     0,     0,
     0,   282,     0,  1470,   268,   269,   270,   271,   272,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     0,     0,     0,     0,   282,     0,  1516,   268,   269,   270,
   271,   272,     0,   273,   274,   275,   276,   277,   278,   279,
   280,   281,     0,     0,     0,     0,     0,   282,     0,  1517,
   268,   269,   270,   271,   272,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,     0,     0,     0,     0,     0,
   282,     0,  1518,   268,   269,   270,   271,   272,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     0,     0,
     0,     0,     0,   282
};

static const short yycheck[] = {    23,
    87,     4,    79,     4,     4,   320,   899,     6,     6,     3,
  1040,    38,    59,     4,     6,   908,   437,    59,     6,     4,
  1098,    60,   915,    64,     7,     3,     4,    66,   170,   171,
    43,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   179,    95,   181,    82,   974,    34,    35,
    36,    37,    38,    39,    40,    41,     4,    43,    92,    45,
    46,    60,    48,    49,   174,     4,     6,    66,    34,    64,
   180,    37,    38,     6,    40,   170,   171,   163,   164,    65,
   163,   164,   116,   117,   118,   119,   120,   121,   122,   175,
    85,   125,   126,    79,    80,   179,   179,   181,   181,   133,
   134,   135,   136,   190,   138,   139,   144,   141,   142,   143,
     3,   145,    45,   163,   164,   174,    64,     7,   179,     6,
   181,   180,   174,   180,  1212,   175,   160,   161,   180,   180,
   561,   179,   181,   181,   157,   158,   159,   174,   174,  1066,
    34,     7,   165,    37,    38,   179,    85,   181,    60,   183,
   184,   175,     7,   139,    66,   179,   149,   150,   151,   152,
   164,   163,   164,     6,  1067,   163,   164,   180,  1071,   180,
   180,   180,   180,   174,     6,   163,   164,   170,   171,   170,
   171,   169,   181,   170,   171,   176,   174,   178,   179,   176,
   175,   178,   180,   227,   179,   181,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,  1257,   179,     6,
   181,   114,   115,   116,   117,   118,   119,   120,   121,   179,
     6,   181,   163,   164,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   180,
   174,     6,   175,   163,   164,   289,   179,   174,   292,   149,
   150,   151,   152,   297,   174,   163,   164,   301,   302,   303,
   180,   305,   306,   307,   308,   309,   310,   311,     6,     7,
   170,   171,   180,   149,   150,   151,   152,   175,   322,   323,
   324,   179,   174,   327,   317,   318,  1199,  1200,  1201,  1202,
   163,   164,   336,  1206,   170,   171,   175,   330,   342,   174,
   179,     3,     4,     5,   174,     7,   179,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   175,
    32,     3,     4,   179,   179,     6,   181,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   169,
   174,  1274,  1275,   173,    34,  1278,   174,    37,   412,   413,
   414,   415,   416,    51,    52,   419,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,   153,   154,
   155,   156,   157,   437,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   163,   164,   449,   163,   164,   173,    38,
   454,   163,   164,   174,    42,   459,  1329,    38,     8,   179,
   179,   181,   181,   180,   468,   469,   179,   179,   181,   181,
   163,   164,   174,   477,   467,   170,   171,   163,   164,    38,
   484,   163,   164,   163,   164,    40,   179,   149,   150,   151,
   152,   495,   496,   179,   163,   164,   179,   179,   181,   179,
    38,   163,   164,   179,     6,   181,  1379,   169,   170,   171,
   179,   179,   174,   181,   176,   179,   178,   181,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
   181,   163,   164,   180,   538,  1408,   179,   169,   181,   165,
   166,   167,   174,   180,   180,   177,   550,   173,   163,   164,
   165,   166,   167,   557,   558,   559,     6,   561,   173,   563,
   564,   565,   566,   567,   859,     6,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     5,   580,   155,   156,   157,
   173,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   583,   595,   596,   597,   174,   173,    53,    54,    55,    56,
    50,    58,   174,   153,   154,   155,   156,   157,     6,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    37,    38,
     4,    40,  1495,   173,   691,   618,   619,   620,   179,     4,
   181,   181,   181,   156,   157,    38,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   649,   650,     3,   652,   174,
   173,     8,   170,   171,     5,   174,   660,   661,   176,   174,
   178,   174,   170,   171,   174,   170,   171,   174,   176,   662,
   178,   176,     6,   178,     3,     4,   174,   174,   671,   174,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   174,   153,   154,   155,   156,   157,   174,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   174,   174,
   174,   778,   174,   173,     6,   174,   174,   174,   732,    99,
   100,   101,   102,   103,   174,   174,   174,  1032,   174,   174,
     6,   745,   746,   747,     5,   174,   174,   180,   174,   174,
   174,   755,   756,   757,   758,   759,   760,   761,   762,   763,
   764,   765,   766,   180,   180,   174,   174,   174,     3,     4,
   774,   775,   174,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   180,   180,   176,    87,     6,   173,     5,   175,   174,
   174,   174,   174,     5,   174,   829,   174,   174,   174,   174,
   174,   174,   174,   890,   163,   164,   174,   841,   842,     8,
   169,   834,   174,   847,   848,   174,   174,   174,   177,   174,
   174,   174,   174,   174,   921,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   173,     7,   860,   175,   862,
   179,   864,   176,   179,     7,   879,   880,   178,     7,     7,
     7,    83,   180,   145,     5,   889,   132,     6,   892,     5,
     5,     5,     5,     5,     5,     5,     5,     5,   902,     5,
     5,     5,     5,     5,     5,   909,   910,   911,     5,     5,
     5,     5,   916,     5,     5,     5,   920,     5,     5,     5,
     5,     3,     5,   176,     5,     4,     6,   984,   163,   164,
   934,     5,     7,     6,   169,     6,     6,     6,     6,   174,
     7,     7,   177,     7,     6,   949,     6,   181,     7,     7,
     7,   181,   180,   180,     7,   174,   960,   961,   962,   963,
   964,   965,   966,   967,   968,   969,   970,   971,     7,   146,
   179,   179,   179,   179,   179,     6,   980,   144,   179,   179,
   179,   179,   149,   179,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   179,
   179,   179,     5,   170,   173,   179,   179,   179,   179,   179,
   177,   178,   175,  1017,  1018,  1019,  1020,  1021,  1022,  1023,
   179,   179,  1026,  1027,   179,   179,   179,   179,   179,   179,
   179,  1035,  1036,  1037,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   179,
  1054,  1055,     6,   179,   173,     6,     6,  1061,     6,     3,
     7,     7,     7,   180,     7,  1069,     7,     7,     7,     7,
     7,     7,     7,  1077,     7,     7,     6,  1134,  1082,     6,
     6,  1085,   153,   154,   155,   156,   157,     7,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   174,   174,     7,
   142,  1105,   173,     3,     3,     6,     3,     3,     3,   174,
  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
  1124,  1125,   153,   154,   155,   156,   157,   174,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     3,     4,   174,
   174,  1198,   173,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   174,   174,  1171,   174,   174,
   174,   165,   174,     3,     3,     3,     3,     3,     3,     3,
     3,   178,  1239,     5,     5,     3,     3,     4,     5,     3,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     6,     6,     6,     6,  1222,  1223,
  1224,  1225,  1226,  1227,  1228,  1229,  1230,   153,   154,   155,
   156,   157,     6,   159,   160,   161,   162,   163,   164,   165,
   166,   167,  1299,   410,    84,     6,   180,   173,  1252,   180,
  1254,   179,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   179,   175,   175,
   179,  1328,   173,   175,   179,   179,   179,   175,     6,     6,
     6,  1285,  1286,  1287,  1288,  1289,  1290,  1291,  1292,  1293,
  1294,  1295,  1296,   175,   179,   179,  1353,   163,   164,     6,
   179,   179,   179,   169,   179,   175,   179,   179,   174,     6,
   179,   177,   179,   175,   179,   179,   179,   178,   178,     6,
     6,     6,     6,  1327,     6,     6,     6,     6,     6,     6,
     6,    84,  1336,  1337,  1338,  1339,  1340,  1341,  1342,  1343,
  1344,  1345,     7,  1347,     3,  1349,   163,   164,     6,     3,
     6,     6,   169,   165,     6,     3,     6,   174,     3,     6,
     6,     3,     6,     3,     3,     3,     7,    85,     4,     6,
   180,   180,  1376,  1377,   181,    81,   175,  1381,  1382,  1383,
  1384,  1385,  1386,   179,   179,   179,     6,   175,     6,    84,
   175,   175,   179,   179,   175,   175,   179,   179,   175,   178,
  1404,   179,   142,     6,   180,  1409,  1410,  1411,  1412,  1413,
  1414,  1415,  1416,  1417,     3,     6,     6,     3,   585,   586,
     5,   588,     6,     6,     6,   592,   593,     6,     6,     6,
     3,     6,     6,  1437,  1438,  1439,  1440,  1441,  1442,  1443,
   178,  1445,     6,  1447,     4,   181,   153,   154,   155,   156,
   157,     5,   159,   160,   161,   162,   163,   164,   165,   166,
   167,  1465,  1466,  1467,     6,   180,   173,   179,   181,   179,
   179,   179,   175,   175,   179,  1479,  1480,  1481,  1482,  1483,
  1484,   175,     6,   179,   651,     6,   179,   654,    64,   179,
     6,     6,  1496,  1497,  1498,  1499,     6,  1501,     6,  1503,
     6,   668,   669,     6,     6,     6,     6,   674,   675,     5,
   176,     5,   179,   181,   681,   179,   683,   179,   175,  1523,
  1524,  1525,   175,    81,     6,   142,     6,     5,  1532,   180,
  1534,   180,  1536,   153,   154,   155,   156,   157,     5,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   179,   179,
   179,   179,     6,   173,   721,   180,   723,   181,   180,    81,
   179,   175,   175,   179,     6,     6,   733,   734,   735,   178,
   181,   738,   739,   740,   741,   742,   743,   744,     3,     4,
     5,   181,     6,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     3,     4,    85,   180,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     3,     4,     6,   148,   179,   179,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,     3,     4,   147,   179,   179,     6,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     3,     4,   180,   180,   180,   179,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     6,   886,
   175,   153,   154,   155,   156,   157,   893,   159,   160,   161,
   162,   163,   164,   165,   166,   167,     6,     6,   163,   164,
     6,   173,     6,     6,   169,   912,   179,   179,   179,   174,
     6,   180,   180,   180,     6,     6,     6,   179,   175,     6,
   180,   180,   180,     6,     6,     6,   163,   164,     0,     0,
   623,     6,   169,     7,     7,  1220,    -1,   174,     7,    -1,
    -1,    -1,    -1,    -1,   597,   884,    -1,    -1,    -1,    -1,
    -1,    -1,     6,    -1,   163,   164,    -1,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,    -1,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   163,   164,    -1,    -1,    -1,    -1,   169,     6,
    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
   163,   164,    -1,    -1,    -1,    -1,   169,    -1,    -1,     6,
    -1,   174,    -1,    -1,    -1,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,     6,    -1,    -1,   173,    -1,    -1,    -1,    -1,
    -1,  1058,    -1,  1060,    -1,    -1,  1063,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,  1079,     6,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,     6,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,  1111,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   153,   154,   155,   156,   157,   173,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,     6,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   153,   154,   155,   156,   157,   173,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   153,   154,   155,   156,
   157,   173,   159,   160,   161,   162,   163,   164,   165,   166,
   167,     6,    -1,    -1,    -1,    -1,   173,  1194,  1195,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,     6,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,  1221,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     6,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,     6,    -1,    -1,    -1,
    -1,   173,    -1,    -1,  1271,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1284,   153,   154,
   155,   156,   157,     6,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,    -1,    -1,    -1,     6,    -1,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,  1330,    -1,    -1,     6,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,     6,   173,    -1,
    -1,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
     8,   173,    -1,  1380,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     8,    -1,    -1,
  1407,    -1,   173,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,     8,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,  1435,    -1,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     8,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,  1464,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,  1478,   173,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    34,    35,    36,    37,    38,    39,    40,    41,    -1,
    43,    -1,    45,    46,    -1,    48,    49,    -1,    -1,     0,
     1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,    -1,
    31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
    -1,    -1,    53,    54,    55,    56,    57,    58,    -1,    60,
    61,    62,    63,    64,    65,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,
    -1,    -1,    -1,    -1,    -1,    86,   139,    88,    89,    90,
    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
   121,     4,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   139,   140,
   141,    -1,   143,   173,    -1,    -1,    -1,    -1,    31,   179,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    -1,
    43,    44,    45,    46,    47,    48,    49,    -1,    -1,    -1,
    53,    54,    55,    56,    57,    58,    -1,    60,    61,    62,
    63,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    37,    -1,    -1,    -1,    79,    80,    -1,    -1,
    -1,    -1,    -1,    86,    -1,    88,    89,    90,    91,    92,
    93,    94,    34,    35,    36,    37,    38,    39,    40,    41,
    -1,    43,    -1,    45,    46,    -1,    48,    49,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    65,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    96,    97,    98,   179,    -1,   139,    79,    80,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,   133,   134,
   135,   136,   137,   138,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   139,    -1,    -1,
   179,    -1,   181,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   177,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   177,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   177,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 150 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 159 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 173 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 180 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 197 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 198 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 199 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 204 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 209 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 220 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 223 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 227 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 233 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 239 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 246 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 252 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 256 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 260 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 267 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 271 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 276 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 280 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 284 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 288 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 292 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 296 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 300 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 304 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 310 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 313 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 316 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 320 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 324 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 328 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 332 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 347 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 354 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 357 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 367 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 370 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 392 "Gmsh.y"
{
      fprintf(stderr, yyvsp[-2].c); 
      fprintf(stderr, "\n"); 
    ;
    break;}
case 66:
#line 397 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  fprintf(stderr, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring, "%");
	  strcat(tmpstring, str);
	  fprintf(stderr, tmpstring, *(double*)List_Pointer(ListOfDouble_L,i)); 
	}
	else{
	  fprintf(stderr, "\n"); 
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      if(!yyerrorstate)
	fprintf(stderr, "\n"); 
    ;
    break;}
case 67:
#line 427 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 68:
#line 431 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 69:
#line 438 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 82:
#line 457 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 459 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 464 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 469 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 476 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 478 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 483 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 488 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 495 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 497 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 502 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 507 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 514 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 516 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 522 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 528 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 535 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 537 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 543 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 549 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 556 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 558 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 564 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 570 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 577 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 579 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 586 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 595 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 602 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 604 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 611 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 620 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 627 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 629 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 636 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 645 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 652 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 654 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 662 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 671 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 678 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 680 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 688 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 697 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 704 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 706 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 714 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 723 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 739 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-1].d);
      }
    ;
    break;}
case 131:
#line 751 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
      }
    ;
    break;}
case 132:
#line 763 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
    ;
    break;}
case 133:
#line 776 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else{
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0 ;
      }
    ;
    break;}
case 134:
#line 785 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 135:
#line 797 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1. ;
    ;
    break;}
case 136:
#line 805 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd -= 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 137:
#line 817 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 825 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd += yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 139:
#line 837 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= yyvsp[-1].d ;
    ;
    break;}
case 140:
#line 845 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd -= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 141:
#line 857 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) *= yyvsp[-1].d ;
    ;
    break;}
case 142:
#line 865 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd *= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 143:
#line 877 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-3].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	else
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) /= yyvsp[-1].d ;
      }
    ;
    break;}
case 144:
#line 889 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-6].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
	else{
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	    *pd /= yyvsp[-1].d ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 145:
#line 908 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 146:
#line 921 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 147:
#line 939 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 956 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 977 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 994 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1015 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1032 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1053 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1070 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1091 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	  vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	else{
	  if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	    vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 156:
#line 1112 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.View[%d].%s /= %g'", 
		 yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(strcmp(yyvsp[-10].c, "PostProcessing"))
	  vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
	else{
	  if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	    if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	    else      vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			       yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	  }
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 157:
#line 1138 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1155 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1176 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1193 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 161:
#line 1216 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 162:
#line 1229 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 163:
#line 1258 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1265 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 165:
#line 1271 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 166:
#line 1290 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 167:
#line 1301 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 168:
#line 1309 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1315 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1321 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 171:
#line 1340 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 172:
#line 1346 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 173:
#line 1363 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 174:
#line 1369 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1375 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1381 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1387 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 178:
#line 1393 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 179:
#line 1412 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 180:
#line 1424 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1430 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 182:
#line 1449 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 183:
#line 1472 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 184:
#line 1480 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 185:
#line 1484 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1490 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 187:
#line 1496 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 188:
#line 1508 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 189:
#line 1514 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1520 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 191:
#line 1533 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1538 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1543 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1548 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 195:
#line 1555 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1556 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1557 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 198:
#line 1562 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 199:
#line 1566 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 200:
#line 1578 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 201:
#line 1596 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 202:
#line 1603 "Gmsh.y"
{
	FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 203:
#line 1607 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 204:
#line 1619 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if !defined(__CYGWIN__) // comprends pas pq ca ne marche pas
	if(!CTX.interactive) CreateFile(yyvsp[-1].c, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if !defined(__CYGWIN__) // comprends pas pq ca ne marche pas
	CreateFile(yyvsp[-1].c, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing System Call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 205:
#line 1677 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 206:
#line 1696 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 207:
#line 1700 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 208:
#line 1722 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 209:
#line 1736 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 210:
#line 1750 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 211:
#line 1775 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 212:
#line 1800 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 213:
#line 1826 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 214:
#line 1832 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 215:
#line 1837 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 216:
#line 1842 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 217:
#line 1846 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 1857 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 219:
#line 1862 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 220:
#line 1868 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 221:
#line 1872 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 222:
#line 1876 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 223:
#line 1880 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 224:
#line 1884 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 225:
#line 1889 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 226:
#line 1897 "Gmsh.y"
{
    ;
    break;}
case 227:
#line 1900 "Gmsh.y"
{
    ;
    break;}
case 228:
#line 1906 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 229:
#line 1923 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 230:
#line 1934 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 231:
#line 1951 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 232:
#line 1968 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 233:
#line 1985 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 234:
#line 2006 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 235:
#line 2026 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 236:
#line 2046 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 237:
#line 2063 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 238:
#line 2088 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 239:
#line 2092 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 240:
#line 2103 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 241:
#line 2104 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 242:
#line 2108 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 243:
#line 2109 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 244:
#line 2110 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 245:
#line 2111 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 246:
#line 2112 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 247:
#line 2116 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 248:
#line 2117 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 249:
#line 2118 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 250:
#line 2119 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 251:
#line 2120 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 252:
#line 2121 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 253:
#line 2122 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 254:
#line 2123 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 255:
#line 2125 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 256:
#line 2131 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 257:
#line 2132 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 258:
#line 2133 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 259:
#line 2134 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 260:
#line 2135 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 261:
#line 2136 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 262:
#line 2137 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 263:
#line 2138 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 264:
#line 2139 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 265:
#line 2140 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 266:
#line 2141 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 267:
#line 2142 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2143 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2144 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 270:
#line 2145 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2146 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 272:
#line 2147 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2148 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 274:
#line 2149 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2150 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 276:
#line 2151 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 277:
#line 2152 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 278:
#line 2153 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2154 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2155 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2156 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2157 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 283:
#line 2158 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 284:
#line 2159 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 285:
#line 2160 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 286:
#line 2161 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 287:
#line 2162 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 288:
#line 2171 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 289:
#line 2172 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 290:
#line 2177 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
      }
      //      Free($1);
    ;
    break;}
case 291:
#line 2189 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
      //Free($1);
    ;
    break;}
case 292:
#line 2207 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0) ;
      }
      //Free($1);
    ;
    break;}
case 293:
#line 2219 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      //Free($1);
    ;
    break;}
case 294:
#line 2237 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1.0) ;
      }
      //Free($1);
    ;
    break;}
case 295:
#line 2249 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd -= 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      //Free($1);
    ;
    break;}
case 296:
#line 2269 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 297:
#line 2290 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 298:
#line 2314 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 299:
#line 2335 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 300:
#line 2359 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 301:
#line 2380 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 302:
#line 2406 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 303:
#line 2412 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 304:
#line 2426 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
      //??? Avec ce qui suit, bison se plante sur DEC
      //for(i=0 ; i<5 ; i++) $$[i] = $1[i];
    ;
    break;}
case 305:
#line 2432 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 306:
#line 2436 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 307:
#line 2440 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 308:
#line 2444 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 309:
#line 2450 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 310:
#line 2454 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 311:
#line 2458 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 312:
#line 2462 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 313:
#line 2469 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2472 "Gmsh.y"
{
    ;
    break;}
case 315:
#line 2478 "Gmsh.y"
{
    ;
    break;}
case 316:
#line 2481 "Gmsh.y"
{
    ;
    break;}
case 317:
#line 2487 "Gmsh.y"
{
    ;
    break;}
case 318:
#line 2490 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 319:
#line 2494 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 320:
#line 2501 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 321:
#line 2506 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 322:
#line 2513 "Gmsh.y"
{
    ;
    break;}
case 323:
#line 2516 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 324:
#line 2522 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(ListOfDouble_L, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 325:
#line 2537 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 326:
#line 2545 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 327:
#line 2550 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 328:
#line 2559 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 329:
#line 2571 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 330:
#line 2575 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 331:
#line 2583 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 332:
#line 2597 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 333:
#line 2601 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 334:
#line 2605 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 335:
#line 2610 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 336:
#line 2615 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 337:
#line 2634 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 338:
#line 2638 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 339:
#line 2660 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 340:
#line 2668 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 341:
#line 2675 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 342:
#line 2679 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 343:
#line 2683 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(ListOfDouble_L,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring)+1);
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2707 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


