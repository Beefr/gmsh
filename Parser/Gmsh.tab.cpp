
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPrintf	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tBump	302
#define	tProgression	303
#define	tRotate	304
#define	tTranslate	305
#define	tSymmetry	306
#define	tDilate	307
#define	tExtrude	308
#define	tDuplicata	309
#define	tLoop	310
#define	tInclude	311
#define	tRecombine	312
#define	tDelete	313
#define	tCoherence	314
#define	tView	315
#define	tOffset	316
#define	tAttractor	317
#define	tLayers	318
#define	tScalarTetrahedron	319
#define	tVectorTetrahedron	320
#define	tTensorTetrahedron	321
#define	tScalarTriangle	322
#define	tVectorTriangle	323
#define	tTensorTriangle	324
#define	tScalarLine	325
#define	tVectorLine	326
#define	tTensorLine	327
#define	tScalarPoint	328
#define	tVectorPoint	329
#define	tTensorPoint	330
#define	tBSpline	331
#define	tNurbs	332
#define	tOrder	333
#define	tWith	334
#define	tBounds	335
#define	tKnots	336
#define	tColor	337
#define	tOptions	338
#define	tFor	339
#define	tEndFor	340
#define	tScript	341
#define	tExit	342
#define	tMerge	343
#define	tB_SPLINE_SURFACE_WITH_KNOTS	344
#define	tB_SPLINE_CURVE_WITH_KNOTS	345
#define	tCARTESIAN_POINT	346
#define	tTRUE	347
#define	tFALSE	348
#define	tUNSPECIFIED	349
#define	tU	350
#define	tV	351
#define	tEDGE_CURVE	352
#define	tVERTEX_POINT	353
#define	tORIENTED_EDGE	354
#define	tPLANE	355
#define	tFACE_OUTER_BOUND	356
#define	tEDGE_LOOP	357
#define	tADVANCED_FACE	358
#define	tVECTOR	359
#define	tDIRECTION	360
#define	tAXIS2_PLACEMENT_3D	361
#define	tISO	362
#define	tENDISO	363
#define	tENDSEC	364
#define	tDATA	365
#define	tHEADER	366
#define	tFILE_DESCRIPTION	367
#define	tFILE_SCHEMA	368
#define	tFILE_NAME	369
#define	tMANIFOLD_SOLID_BREP	370
#define	tCLOSED_SHELL	371
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	372
#define	tFACE_BOUND	373
#define	tCYLINDRICAL_SURFACE	374
#define	tCONICAL_SURFACE	375
#define	tCIRCLE	376
#define	tTRIMMED_CURVE	377
#define	tGEOMETRIC_SET	378
#define	tCOMPOSITE_CURVE_SEGMENT	379
#define	tCONTINUOUS	380
#define	tCOMPOSITE_CURVE	381
#define	tTOROIDAL_SURFACE	382
#define	tPRODUCT_DEFINITION	383
#define	tPRODUCT_DEFINITION_SHAPE	384
#define	tSHAPE_DEFINITION_REPRESENTATION	385
#define	tELLIPSE	386
#define	tTrimmed	387
#define	tSolid	388
#define	tEndSolid	389
#define	tVertex	390
#define	tFacet	391
#define	tNormal	392
#define	tOuter	393
#define	tLoopSTL	394
#define	tEndLoop	395
#define	tEndFacet	396
#define	tAFFECTPLUS	397
#define	tAFFECTMINUS	398
#define	tAFFECTTIMES	399
#define	tAFFECTDIVIDE	400
#define	tAND	401
#define	tOR	402
#define	tNOTEQUAL	403
#define	tEQUAL	404
#define	tAPPROXEQUAL	405
#define	tLESSOREQUAL	406
#define	tGREATEROREQUAL	407
#define	tCROSSPRODUCT	408
#define	UNARYPREC	409
#define	tPLUSPLUS	410
#define	tMINUSMINUS	411

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.20 2000-12-06 23:01:55 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 59 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1437
#define	YYFLAG		-32768
#define	YYNTBASE	174

#define YYTRANSLATE(x) ((unsigned)(x) <= 411 ? yytranslate[x] : 254)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   164,     2,     2,     2,   161,     2,     2,   168,
   170,   159,   157,   169,   158,   173,   160,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   153,
     2,   154,   147,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   165,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   171,     2,   172,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   148,   149,   150,   151,   152,   155,   156,   162,   163,   166,
   167
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   527,   532,   535,   543,
   550,   559,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   590,   593,   596,   598,   602,   603,   617,   619,
   623,   624,   638,   640,   644,   645,   659,   661,   665,   666,
   686,   688,   692,   693,   713,   715,   719,   720,   740,   742,
   746,   747,   773,   775,   779,   780,   806,   808,   812,   813,
   839,   841,   845,   846,   878,   880,   884,   885,   917,   919,
   923,   924,   956,   961,   966,   971,   976,   981,   986,   991,
   999,  1008,  1021,  1028,  1034,  1042,  1050,  1063,  1071,  1081,
  1099,  1107,  1116,  1125,  1133,  1145,  1151,  1160,  1170,  1179,
  1202,  1223,  1232,  1241,  1247,  1256,  1264,  1273,  1279,  1291,
  1297,  1307,  1309,  1311,  1313,  1314,  1317,  1322,  1327,  1331,
  1335,  1338,  1342,  1349,  1358,  1360,  1369,  1382,  1391,  1404,
  1413,  1426,  1438,  1454,  1456,  1459,  1469,  1472,  1479,  1489,
  1499,  1508,  1517,  1526,  1533,  1538,  1541,  1542,  1545,  1547,
  1554,  1561,  1568,  1575,  1582,  1589,  1595,  1601,  1608,  1615,
  1622,  1631,  1632,  1635,  1637,  1639,  1641,  1643,  1645,  1647,
  1649,  1653,  1656,  1659,  1662,  1666,  1670,  1674,  1678,  1682,
  1686,  1690,  1694,  1698,  1702,  1706,  1710,  1714,  1718,  1724,
  1729,  1734,  1739,  1744,  1749,  1754,  1759,  1764,  1769,  1774,
  1781,  1786,  1791,  1796,  1801,  1806,  1811,  1818,  1825,  1832,
  1834,  1836,  1838,  1842,  1847,  1852,  1856,  1862,  1864,  1867,
  1870,  1874,  1878,  1890,  1900,  1908,  1916,  1920,  1921,  1925,
  1927,  1931,  1932,  1936,  1940,  1942,  1946,  1947,  1949,  1953,
  1955,  1957,  1961,  1965,  1975,  1983,  1989,  1991
};

static const short yyrhs[] = {   176,
     0,   175,     0,   181,     0,   134,     0,   137,   138,   242,
   242,   242,   139,   140,   136,   242,   242,   242,   136,   242,
   242,   242,   136,   242,   242,   242,   141,   142,     0,   135,
     0,     0,   176,   177,     0,   178,     0,   180,     0,   179,
     0,     1,     6,     0,   108,     6,     0,   109,     6,     0,
   111,     6,     0,   110,     6,     0,   112,     6,     0,   113,
   168,   247,   169,     5,   170,     6,     0,   114,   168,   247,
   170,     6,     0,   115,   168,     5,   169,     5,   169,   247,
   169,   247,   169,     5,   169,     5,   169,     5,   170,     6,
     0,     3,     7,    92,   168,     5,   169,   245,   170,     6,
     0,     3,     7,    91,   168,     5,   169,   242,   169,   251,
   169,   241,   169,   241,   169,   241,   169,   251,   169,   251,
   169,   241,   170,     6,     0,     3,     7,    90,   168,     5,
   169,   242,   169,   242,   169,   249,   169,   241,   169,   241,
   169,   241,   169,   241,   169,   251,   169,   251,   169,   251,
   169,   251,   169,   241,   170,     6,     0,     3,     7,    98,
   168,     5,   169,     3,   169,     3,   169,     3,   169,   241,
   170,     6,     0,     3,     7,   102,   168,     5,   169,     3,
   169,   241,   170,     6,     0,     3,     7,   119,   168,     5,
   169,     3,   169,   241,   170,     6,     0,     3,     7,   100,
   168,     5,   169,   159,   169,   159,   169,   242,   169,   241,
   170,     6,     0,     3,     7,   103,   168,     5,   169,   251,
   170,     6,     0,     3,     7,   104,   168,     5,   169,   251,
   169,     3,   169,   241,   170,     6,     0,     3,     7,    99,
   168,     5,   169,     3,   170,     6,     0,     3,     7,   105,
   168,     5,   169,     3,   169,   242,   170,     6,     0,     3,
     7,   107,   168,     5,   169,     3,   169,     3,   169,     3,
   170,     6,     0,     3,     7,   106,   168,     5,   169,   245,
   170,     6,     0,     3,     7,   101,   168,     5,   169,     3,
   170,     6,     0,     3,     7,    34,   168,     5,   169,     3,
   169,     3,   170,     6,     0,     3,     7,   117,   168,     5,
   169,   251,   170,     6,     0,     3,     7,   118,   168,     5,
   169,   251,   169,     3,   170,     6,     0,     3,     7,   116,
   168,     5,   169,     3,   170,     6,     0,     3,     7,   120,
   168,     5,   169,     3,   169,   242,   170,     6,     0,     3,
     7,   121,   168,     5,   169,     3,   169,   242,   169,   242,
   170,     6,     0,     3,     7,   128,   168,     5,   169,     3,
   169,   242,   169,   242,   170,     6,     0,     3,     7,   122,
   168,     5,   169,     3,   169,   242,   170,     6,     0,     3,
     7,   132,   168,     5,   169,     3,   169,   242,   169,   242,
   170,     6,     0,     3,     7,   123,   168,     5,   169,     3,
   169,   251,   169,   251,   169,   241,   169,   241,   170,     6,
     0,     3,     7,   124,   168,     5,   169,   251,   170,     6,
     0,     3,     7,   125,   168,   126,   169,   241,   169,     3,
   170,     6,     0,     3,     7,   127,   168,     5,   169,   251,
   169,   241,   170,     6,     0,     3,     7,   129,   168,     5,
   169,     5,   169,     3,   169,     3,   170,     6,     0,     3,
     7,   130,   168,     5,   169,     5,   169,     3,   170,     6,
     0,     3,     7,   131,   168,     3,   169,     3,   170,     6,
     0,     0,   181,   182,     0,   184,     0,   183,     0,   222,
     0,   223,     0,   224,     0,   227,     0,   228,     0,   232,
     0,   235,     0,   236,     0,   229,     0,   231,     0,   230,
     0,    84,   171,   237,   172,     0,    87,   171,   239,   172,
     0,     1,     6,     0,    30,   168,     5,   169,   242,   170,
     6,     0,    61,     5,   171,   185,   172,     6,     0,    61,
     5,    62,   245,   171,   185,   172,     6,     0,     0,   185,
   187,     0,   185,   190,     0,   185,   193,     0,   185,   196,
     0,   185,   199,     0,   185,   202,     0,   185,   205,     0,
   185,   208,     0,   185,   211,     0,   185,   214,     0,   185,
   217,     0,   185,   220,     0,   242,     0,   186,   169,   242,
     0,     0,    74,   168,   242,   169,   242,   169,   242,   170,
   188,   171,   186,   172,     6,     0,   242,     0,   189,   169,
   242,     0,     0,    75,   168,   242,   169,   242,   169,   242,
   170,   191,   171,   189,   172,     6,     0,   242,     0,   192,
   169,   242,     0,     0,    76,   168,   242,   169,   242,   169,
   242,   170,   194,   171,   192,   172,     6,     0,   242,     0,
   195,   169,   242,     0,     0,    71,   168,   242,   169,   242,
   169,   242,   169,   242,   169,   242,   169,   242,   170,   197,
   171,   195,   172,     6,     0,   242,     0,   198,   169,   242,
     0,     0,    72,   168,   242,   169,   242,   169,   242,   169,
   242,   169,   242,   169,   242,   170,   200,   171,   198,   172,
     6,     0,   242,     0,   201,   169,   242,     0,     0,    73,
   168,   242,   169,   242,   169,   242,   169,   242,   169,   242,
   169,   242,   170,   203,   171,   201,   172,     6,     0,   242,
     0,   204,   169,   242,     0,     0,    68,   168,   242,   169,
   242,   169,   242,   169,   242,   169,   242,   169,   242,   169,
   242,   169,   242,   169,   242,   170,   206,   171,   204,   172,
     6,     0,   242,     0,   207,   169,   242,     0,     0,    69,
   168,   242,   169,   242,   169,   242,   169,   242,   169,   242,
   169,   242,   169,   242,   169,   242,   169,   242,   170,   209,
   171,   207,   172,     6,     0,   242,     0,   210,   169,   242,
     0,     0,    70,   168,   242,   169,   242,   169,   242,   169,
   242,   169,   242,   169,   242,   169,   242,   169,   242,   169,
   242,   170,   212,   171,   210,   172,     6,     0,   242,     0,
   213,   169,   242,     0,     0,    65,   168,   242,   169,   242,
   169,   242,   169,   242,   169,   242,   169,   242,   169,   242,
   169,   242,   169,   242,   169,   242,   169,   242,   169,   242,
   170,   215,   171,   213,   172,     6,     0,   242,     0,   216,
   169,   242,     0,     0,    66,   168,   242,   169,   242,   169,
   242,   169,   242,   169,   242,   169,   242,   169,   242,   169,
   242,   169,   242,   169,   242,   169,   242,   169,   242,   170,
   218,   171,   216,   172,     6,     0,   242,     0,   219,   169,
   242,     0,     0,    67,   168,   242,   169,   242,   169,   242,
   169,   242,   169,   242,   169,   242,   169,   242,   169,   242,
   169,   242,   169,   242,   169,   242,   169,   242,   170,   221,
   171,   219,   172,     6,     0,     4,     7,   242,     6,     0,
     4,   143,   242,     6,     0,     4,   144,   242,     6,     0,
     4,   166,   242,     6,     0,     4,   144,   242,     6,     0,
     4,   145,   242,     6,     0,     4,   146,   242,     6,     0,
    31,   168,   242,   170,     7,   245,     6,     0,    46,    31,
   168,   242,   170,     7,   251,     6,     0,    63,    31,   251,
     7,   171,   242,   169,   242,   169,   242,   172,     6,     0,
    38,    39,   251,     7,   242,     6,     0,    31,   171,   242,
   172,     6,     0,    34,   168,   242,   170,     7,   251,     6,
     0,    36,   168,   242,   170,     7,   251,     6,     0,    63,
    34,   251,     7,   171,   242,   169,   242,   169,   242,   172,
     6,     0,    32,   168,   242,   170,     7,   251,     6,     0,
    32,   168,   242,   170,     7,   251,    42,   245,     6,     0,
    40,   168,   242,   170,     7,   171,   242,   169,   242,   169,
     5,   169,     5,   169,     5,   172,     6,     0,    33,   168,
   242,   170,     7,   251,     6,     0,    46,    34,   168,   242,
   170,     7,   251,     6,     0,    34,    56,   168,   242,   170,
     7,   251,     6,     0,    77,   168,   242,   170,     7,   251,
     6,     0,    78,   168,   242,   170,     7,   251,    82,   251,
    79,   242,     6,     0,    34,   171,   242,   172,     6,     0,
    42,    35,   168,   242,   170,     7,   251,     6,     0,   133,
    35,   168,   242,   170,     7,   242,   251,     6,     0,    43,
    35,   168,   242,   170,     7,   251,     6,     0,    78,    35,
    80,    81,   168,   242,   170,     7,   249,    82,   171,   251,
   169,   251,   172,    79,   171,   242,   169,   242,   172,     6,
     0,    78,    35,   168,   242,   170,     7,   249,    82,   171,
   251,   169,   251,   172,    79,   171,   242,   169,   242,   172,
     6,     0,    46,    35,   168,   242,   170,     7,   251,     6,
     0,    35,    56,   168,   242,   170,     7,   251,     6,     0,
    35,   171,   242,   172,     6,     0,    45,    37,   168,   242,
   170,     7,   251,     6,     0,    37,   168,   242,   170,     7,
   251,     6,     0,    46,    37,   168,   242,   170,     7,   251,
     6,     0,    51,   245,   171,   225,   172,     0,    50,   171,
   245,   169,   245,   169,   242,   172,   171,   225,   172,     0,
    52,   245,   171,   225,   172,     0,    53,   171,   245,   169,
   242,   172,   171,   225,   172,     0,   227,     0,   226,     0,
   224,     0,     0,   226,   223,     0,    55,   171,   226,   172,
     0,    59,   171,   226,   172,     0,    57,     5,     6,     0,
    30,     5,     6,     0,    88,     6,     0,    89,     5,     6,
     0,    85,   168,   242,     8,   242,   170,     0,    85,   168,
   242,     8,   242,     8,   242,   170,     0,    86,     0,    54,
    31,   171,   242,   169,   245,   172,     6,     0,    54,    31,
   171,   242,   169,   245,   169,   245,   169,   242,   172,     6,
     0,    54,    34,   171,   242,   169,   245,   172,     6,     0,
    54,    34,   171,   242,   169,   245,   169,   245,   169,   242,
   172,     6,     0,    54,    35,   171,   242,   169,   245,   172,
     6,     0,    54,    35,   171,   242,   169,   245,   169,   245,
   169,   242,   172,     6,     0,    54,    35,   171,   242,   169,
   245,   172,   171,   233,   172,     6,     0,    54,    35,   171,
   242,   169,   245,   169,   245,   169,   242,   172,   171,   233,
   172,     6,     0,   234,     0,   233,   234,     0,    64,   171,
   251,   169,   251,   169,   251,   172,     6,     0,    58,     6,
     0,    44,    34,   251,     7,   242,     6,     0,    44,    34,
   251,     7,   242,    47,    49,   242,     6,     0,    44,    34,
   251,     7,   242,    47,    48,   242,     6,     0,    44,    35,
   171,   242,   172,     7,   251,     6,     0,    41,    35,   171,
   242,   172,     7,   251,     6,     0,    44,    37,   171,   242,
   172,     7,   251,     6,     0,    58,    35,   251,     7,   242,
     6,     0,    58,    35,   251,     6,     0,    60,     6,     0,
     0,   237,   238,     0,   183,     0,     4,   173,     4,     7,
     5,     6,     0,     4,   173,     4,     7,   242,     6,     0,
     4,   173,     4,   143,   242,     6,     0,     4,   173,     4,
   144,   242,     6,     0,     4,   173,     4,   145,   242,     6,
     0,     4,   173,     4,   146,   242,     6,     0,     4,   173,
     4,   166,     6,     0,     4,   173,     4,   167,     6,     0,
     4,   173,     4,     7,   245,     6,     0,     4,   173,     4,
   143,   245,     6,     0,     4,   173,     4,   144,   245,     6,
     0,     4,   173,    83,   173,     4,     7,   253,     6,     0,
     0,   239,   240,     0,   238,     0,    93,     0,    94,     0,
    95,     0,    96,     0,    97,     0,   243,     0,   168,   242,
   170,     0,   158,   242,     0,   157,   242,     0,   164,   242,
     0,   242,   158,   242,     0,   242,   157,   242,     0,   242,
   159,   242,     0,   242,   160,   242,     0,   242,   161,   242,
     0,   242,   165,   242,     0,   242,   153,   242,     0,   242,
   154,   242,     0,   242,   155,   242,     0,   242,   156,   242,
     0,   242,   151,   242,     0,   242,   150,   242,     0,   242,
   148,   242,     0,   242,   149,   242,     0,   242,   147,   242,
     8,   242,     0,    10,   168,   242,   170,     0,    11,   168,
   242,   170,     0,    12,   168,   242,   170,     0,    13,   168,
   242,   170,     0,    14,   168,   242,   170,     0,    15,   168,
   242,   170,     0,    16,   168,   242,   170,     0,    17,   168,
   242,   170,     0,    18,   168,   242,   170,     0,    19,   168,
   242,   170,     0,    20,   168,   242,   169,   242,   170,     0,
    21,   168,   242,   170,     0,    22,   168,   242,   170,     0,
    23,   168,   242,   170,     0,    24,   168,   242,   170,     0,
    25,   168,   242,   170,     0,    26,   168,   242,   170,     0,
    27,   168,   242,   169,   242,   170,     0,    28,   168,   242,
   169,   242,   170,     0,    29,   168,   242,   169,   242,   170,
     0,     3,     0,     9,     0,     4,     0,     4,   173,     4,
     0,     4,   173,     4,   166,     0,     4,   173,     4,   167,
     0,   242,     8,   242,     0,   242,     8,   242,     8,   242,
     0,   246,     0,   158,   245,     0,   157,   245,     0,   245,
   158,   245,     0,   245,   157,   245,     0,   171,   242,   169,
   242,   169,   242,   169,   242,   169,   242,   172,     0,   171,
   242,   169,   242,   169,   242,   169,   242,   172,     0,   171,
   242,   169,   242,   169,   242,   172,     0,   168,   242,   169,
   242,   169,   242,   170,     0,     4,   173,     4,     0,     0,
   168,   248,   170,     0,     5,     0,   248,   169,     5,     0,
     0,   171,   250,   172,     0,   168,   250,   170,     0,   251,
     0,   250,   169,   251,     0,     0,   242,     0,   171,   252,
   172,     0,   242,     0,   244,     0,   252,   169,   242,     0,
   252,   169,   244,     0,   171,   242,   169,   242,   169,   242,
   169,   242,   172,     0,   171,   242,   169,   242,   169,   242,
   172,     0,   171,     4,   169,   242,   172,     0,     4,     0,
     4,   173,    83,   173,     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   135,   137,   138,   145,   153,   167,   179,   181,   184,   186,
   187,   188,   191,   197,   202,   203,   204,   207,   211,   214,
   220,   225,   231,   239,   244,   248,   254,   259,   263,   268,
   272,   275,   280,   284,   288,   292,   297,   301,   304,   308,
   312,   316,   320,   324,   328,   331,   335,   338,   342,   345,
   354,   358,   364,   366,   367,   368,   369,   370,   371,   372,
   373,   374,   375,   376,   378,   379,   380,   381,   384,   395,
   400,   406,   411,   412,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   425,   428,   432,   438,   444,   447,
   451,   457,   463,   466,   470,   476,   482,   485,   489,   497,
   503,   506,   510,   518,   524,   527,   531,   539,   545,   548,
   552,   564,   570,   573,   577,   589,   595,   598,   602,   614,
   620,   623,   627,   640,   646,   649,   653,   666,   672,   675,
   679,   692,   704,   711,   719,   727,   735,   743,   751,   766,
   777,   783,   802,   813,   821,   827,   833,   852,   858,   874,
   881,   887,   893,   899,   905,   924,   936,   942,   961,   982,
   990,   996,  1002,  1008,  1020,  1026,  1032,  1044,  1050,  1055,
  1060,  1067,  1069,  1070,  1073,  1078,  1089,  1107,  1122,  1150,
  1181,  1185,  1197,  1212,  1225,  1263,  1269,  1275,  1279,  1283,
  1287,  1291,  1296,  1303,  1307,  1312,  1330,  1340,  1358,  1375,
  1392,  1413,  1433,  1453,  1470,  1494,  1505,  1507,  1510,  1514,
  1526,  1543,  1560,  1577,  1594,  1611,  1628,  1645,  1670,  1695,
  1720,  1738,  1740,  1743,  1758,  1760,  1761,  1762,  1763,  1766,
  1768,  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,
  1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,
  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,
  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1809,
  1811,  1812,  1821,  1838,  1855,  1874,  1881,  1894,  1899,  1903,
  1907,  1911,  1916,  1921,  1925,  1929,  1933,  1961,  1965,  1970,
  1974,  1979,  1983,  1987,  1993,  1999,  2005,  2009,  2015,  2022,
  2028,  2037,  2041,  2051,  2056,  2060,  2065,  2070
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete","tCoherence",
"tView","tOffset","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tOptions","tFor","tEndFor",
"tScript","tExit","tMerge","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tAND","tOR","tNOTEQUAL",
"tEQUAL","tAPPROXEQUAL","'<'","'>'","tLESSOREQUAL","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC","'!'","'^'","tPLUSPLUS","tMINUSMINUS",
"'('","','","')'","'{'","'}'","'.'","All","STLFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeomFormatList",
"GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","Options",
"Option","Scripts","Script","BoolExpr","FExpr","FExpr_Single","FExpr_Range",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","Color", NULL
};
#endif

static const short yyr1[] = {     0,
   174,   174,   174,   175,   175,   175,   176,   176,   177,   177,
   177,   177,   178,   178,   178,   178,   178,   179,   179,   179,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   181,   181,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   183,   184,
   184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   186,   186,   188,   187,   189,   189,
   191,   190,   192,   192,   194,   193,   195,   195,   197,   196,
   198,   198,   200,   199,   201,   201,   203,   202,   204,   204,
   206,   205,   207,   207,   209,   208,   210,   210,   212,   211,
   213,   213,   215,   214,   216,   216,   218,   217,   219,   219,
   221,   220,   222,   222,   222,   222,   222,   222,   222,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   224,   224,   224,
   224,   225,   225,   225,   226,   226,   227,   228,   229,   230,
   230,   230,   231,   231,   231,   232,   232,   232,   232,   232,
   232,   232,   232,   233,   233,   234,   234,   235,   235,   235,
   235,   235,   235,   235,   235,   236,   237,   237,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   239,   239,   240,   241,   241,   241,   241,   241,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   243,
   243,   243,   243,   243,   243,   244,   244,   245,   245,   245,
   245,   245,   246,   246,   246,   246,   246,   247,   247,   248,
   248,   249,   249,   249,   250,   250,   251,   251,   251,   252,
   252,   252,   252,   253,   253,   253,   253,   253
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     4,     2,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     1,     3,     0,    13,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    19,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    25,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    31,     4,     4,     4,     4,     4,     4,     4,     7,
     8,    12,     6,     5,     7,     7,    12,     7,     9,    17,
     7,     8,     8,     7,    11,     5,     8,     9,     8,    22,
    20,     8,     8,     5,     8,     7,     8,     5,    11,     5,
     9,     1,     1,     1,     0,     2,     4,     4,     3,     3,
     2,     3,     6,     8,     1,     8,    12,     8,    12,     8,
    12,    11,    15,     1,     2,     9,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     0,     2,     1,     6,
     6,     6,     6,     6,     6,     5,     5,     6,     6,     6,
     8,     0,     2,     1,     1,     1,     1,     1,     1,     1,
     3,     2,     2,     2,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     1,
     1,     1,     3,     4,     4,     3,     5,     1,     2,     2,
     3,     3,    11,     9,     7,     7,     3,     0,     3,     1,
     3,     0,     3,     3,     1,     3,     0,     1,     3,     1,
     1,     3,     3,     9,     7,     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   185,     0,     0,     0,     0,
    52,    54,    53,    55,    56,    57,    58,    59,    63,    65,
    64,    60,    61,    62,   270,   272,   271,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   230,    12,     0,    13,    14,    16,    15,    17,
   288,   288,     0,    68,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   297,     0,     0,     0,     0,   297,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   278,     0,     0,     0,     0,     0,   175,
     0,   297,   175,   206,     0,   297,   297,     0,     0,     0,
   207,     0,   222,   181,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   233,   232,   234,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   180,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   280,   279,     0,
     0,     0,     0,   175,   175,     0,     0,     0,     0,     0,
   179,     0,     0,     0,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   182,     0,   273,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   231,
     0,   247,   248,   246,   245,   241,   242,   243,   244,   233,
   232,   237,   238,   239,   240,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   290,     0,     0,     0,
     0,   133,   134,   135,   138,   139,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   300,
   301,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   287,     0,     0,   282,
   281,   174,     0,   173,   172,     0,     0,     0,     0,     0,
   177,   176,   205,     0,   178,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    66,   209,   208,     0,    67,
   224,   223,     0,   274,   275,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
   265,   266,     0,     0,     0,   236,   235,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   289,     0,    19,     0,     0,     0,   144,   297,   297,     0,
   297,   156,     0,   164,   297,   297,     0,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   168,   170,     0,     0,     0,
     0,     0,    72,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,     0,     0,
   297,     0,     0,   297,     0,     0,     0,     0,     0,     0,
     0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   297,   297,     0,     0,     0,     0,   297,   297,
     0,     0,     0,     0,     0,   297,     0,   297,     0,     0,
     0,     0,     0,   291,     0,   288,     0,     0,     0,     0,
   297,     0,   297,     0,     0,   276,   302,   303,   143,     0,
   297,   297,   297,   198,     0,   297,   297,   297,   297,   297,
   297,   297,     0,     0,     0,     0,     0,     0,     0,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,     0,     0,     0,     0,   292,     0,
     0,     0,     0,   183,     0,   260,   267,   268,   269,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   225,   226,   227,   228,   229,     0,     0,
     0,     0,     0,     0,     0,    18,     0,    69,   140,   148,
     0,   151,     0,   145,     0,   146,   166,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   154,     0,   297,   297,
     0,   297,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   297,     0,     0,     0,   297,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   297,     0,     0,     0,     0,     0,
     0,     0,     0,   288,     0,   153,   163,   277,     0,   202,
   157,   159,     0,     0,   201,   203,   165,   141,   152,   162,
   167,     0,   286,     0,   285,     0,     0,   186,     0,   188,
     0,   190,     0,    71,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   292,     0,
   295,     0,     0,     0,   272,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   216,   217,     0,
   184,     0,     0,     0,     0,     0,    21,     0,    30,     0,
    34,     0,    28,     0,     0,    33,     0,    38,    36,     0,
     0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
     0,    50,     0,     0,   149,     0,   200,   199,   175,     0,
   171,     0,     0,     0,     0,     0,     0,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   297,   294,   293,   297,     0,     0,   210,
     0,   211,   218,   212,   219,   213,   220,   214,   215,     0,
   158,     0,     0,   292,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   297,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   284,     0,     0,
     0,   197,   297,     0,   195,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   296,     0,     0,   273,   307,     0,     0,     0,    35,     0,
     0,     0,     0,    25,     0,    31,     0,    37,    26,    39,
     0,    42,     0,    46,    47,     0,     0,    49,     0,     0,
     0,   169,     0,     0,     0,     0,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   297,   297,   155,     0,   272,     0,   221,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   283,   187,   189,   191,     0,   297,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    87,    91,
    95,   142,   147,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    29,    32,    40,     0,    41,    48,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   297,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   297,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   308,   306,     0,     0,     0,
     0,    24,    27,     0,     0,     0,   193,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    85,     0,
    89,     0,    93,     0,     0,     0,     0,     0,   297,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   305,     0,     0,     0,    44,    20,   150,   196,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    86,    88,
    90,    92,    94,    96,     0,     0,     0,     0,     0,   297,
     0,     0,     0,     0,     0,     0,    99,   103,   107,     0,
     0,   304,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     5,   297,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   161,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    97,
     0,   101,     0,   105,     0,   297,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   160,
     0,    22,     0,     0,     0,     0,     0,     0,    98,   100,
   102,   104,   106,   108,   297,     0,     0,     0,   111,   115,
   119,     0,     0,     0,     0,     0,     0,     0,   297,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,     0,   113,     0,   117,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   112,   114,   116,   118,   120,     0,   123,   127,   131,    23,
     0,     0,     0,     0,     0,     0,     0,   121,     0,   125,
     0,   129,     0,     0,     0,     0,     0,     0,   122,   124,
   126,   128,   130,   132,     0,     0,     0
};

static const short yydefgoto[] = {  1435,
     4,     5,    18,    19,    20,    21,     6,    61,   457,    63,
   447,  1208,   577,  1154,  1210,   578,  1155,  1212,   579,  1156,
  1319,   580,  1292,  1321,   581,  1293,  1323,   582,  1294,  1380,
   583,  1366,  1382,   584,  1367,  1384,   585,  1368,  1417,   586,
  1411,  1419,   587,  1412,  1421,   588,  1413,    64,   442,   432,
   433,   434,   435,    68,    69,    70,    71,    72,   947,   948,
    73,    74,   312,   458,   314,   462,   729,   272,   103,   411,
   288,   154,   249,   388,   791,   880,   881,   412,  1037
};

static const short yypact[] = {   742,
-32768,-32768,  -117,-32768,   424,  1923,  1114,    29,    30,    38,
    50,    65,    70,    76,   -67,   -61,   -39,-32768,-32768,-32768,
-32768,   132,   141,     0,   -37,   -25,   -19,   -48,   -44,   -13,
    -6,   127,    24,   178,   182,   211,   224,   244,   344,   100,
    -1,    -1,   128,   116,   135,   305,   289,   154,   320,   328,
   102,   187,   -29,   185,   189,-32768,   193,   368,   377,   353,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   214,-32768,   221,   281,   297,
   307,   311,   312,   322,   323,   324,   326,   327,   329,   336,
   346,   347,   351,   354,   355,   356,   358,  1114,  1114,  1114,
  1114,  1036,-32768,-32768,  1961,-32768,-32768,-32768,-32768,-32768,
   359,   359,   403,-32768,  1114,  1114,  1114,  1114,  1114,  1114,
   413,   461,  1114,  1114,  1114,  1114,   361,  1114,  1114,   372,
  1114,  1114,  1114,   543,  1114,   349,   373,   374,   543,   402,
   404,   375,   376,   380,   406,   408,    -1,   300,    -1,    -1,
  1114,  1114,  -119,-32768,   -83,    -1,   407,   409,   410,-32768,
   512,   543,-32768,-32768,   -36,   543,   543,  1114,   -69,  1114,
-32768,  1114,-32768,-32768,   515,   411,   541,  1114,  1114,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  1114,   412,   412,   412,
  2416,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  1036,   416,   418,   433,
   434,   436,   437,   439,   440,   441,   442,   443,   446,   448,
   449,   471,   472,   473,   474,   476,   477,   479,   480,   481,
   482,   483,   484,   485,   486,   487,   491,   598,   492,   490,
   493,   744,   817,   919,   997,  1090,  1322,-32768,   494,  2440,
  2007,  2464,  2488,  1114,  2512,  2027,  1114,  2047,  2536,  2560,
  1114,  6366,   657,  2584,  1114,  1114,  1114,   670,  1114,  1114,
  1114,  1114,  1114,  1114,  1114,  -103,   674,-32768,-32768,  3928,
  3951,    -1,    -1,   350,   350,    -5,  1114,  1114,  1114,  1761,
-32768,    80,  1780,    -1,-32768,   672,   673,  2608,   600,  1114,
  2632,    19,   579,    21,-32768,  1114,    87,  2656,  2680,  2704,
  2728,  2752,  2776,  2800,  2824,  2848,  2872,  3974,  2896,  2920,
  2944,  2968,  2992,  3016,  3997,  4020,  4043,  1114,  1114,-32768,
   773,   303,   303,   435,   435,   -80,   -80,   -80,   -80,  -152,
  -151,   412,   412,   412,   412,  1866,   677,   678,   679,   680,
   682,   684,   685,   686,   687,   689,   690,   691,   692,   693,
   694,   697,   698,   699,   700,   701,   703,   704,   705,   586,
   708,   710,   711,   712,   715,   714,-32768,    93,   716,   718,
   717,-32768,-32768,-32768,-32768,-32768,-32768,  1114,   713,   719,
   741,   745,  3040,   746,   743,  3064,   748,   750,   752,  1599,
-32768,   126,  1114,   754,  2067,  3088,  3112,  1114,  2087,  2107,
  3136,  3160,  3184,  3208,  3232,    -1,-32768,  1114,  1114,-32768,
-32768,-32768,   583,    27,-32768,   590,  1114,  4066,  4089,  4112,
-32768,-32768,-32768,  1114,-32768,   -74,   769,   580,   592,   757,
   597,  3256,   761,   596,   602,-32768,-32768,-32768,  1114,-32768,
-32768,-32768,  3280,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1114,-32768,-32768,-32768,-32768,
-32768,-32768,  1114,  1114,  1114,   225,   225,  1114,   631,   603,
   605,   606,   607,   613,   622,   623,   624,   625,   626,   628,
   630,   632,   633,   634,   635,   636,   637,   638,   640,   641,
   642,   643,   644,   645,   649,   650,   651,   652,   655,   795,
-32768,   658,-32768,   656,  3304,    -1,-32768,   543,   543,   820,
   543,-32768,   822,-32768,   543,   543,  1114,  1114,-32768,  1341,
   659,   824,   826,   839,   352,   841,   842,   863,   864,   865,
   866,   867,    98,  4135,  4158,-32768,-32768,  2127,    -1,    -1,
    -1,  1364,-32768,   707,   720,   721,   722,   738,   739,   740,
   747,   751,   771,   774,   775,   877,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1114,  1114,
   543,  1114,   878,   543,     6,   285,   879,  3328,  3352,  3376,
  3400,  6366,   777,   881,  1114,  1114,    -1,   884,   907,   755,
   908,   913,   543,   543,   915,    -1,   943,   944,   543,   543,
   945,   946,   947,   948,   949,   543,   391,   543,   950,   951,
   952,   955,   956,-32768,   954,   359,   957,     1,    11,   963,
   543,   973,   543,   975,   977,  1623,  1599,-32768,-32768,  1114,
   543,   543,   543,-32768,   231,   543,   543,   543,   543,   543,
   543,   543,  1114,  1114,  1114,   791,  -129,  -124,   139,-32768,
  1779,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,-32768,  4181,  4204,   978,  3424,   146,   903,
    99,   813,  1114,-32768,  1114,-32768,-32768,-32768,-32768,  1114,
   818,  4227,  4250,   -55,   821,   819,   823,   825,   828,   829,
   832,   833,   -16,   835,   836,   837,   852,   853,   854,   855,
   856,   857,   838,-32768,-32768,-32768,-32768,-32768,   858,   859,
   861,   868,   869,   862,   872,-32768,   873,-32768,-32768,-32768,
    -1,-32768,   985,-32768,   988,-32768,-32768,  1114,  4273,   992,
   999,  1027,  1114,  1114,  1028,  1029,  1030,  1037,  1038,  1065,
  1075,  2147,  3448,  1885,   350,    -1,  1076,    -1,  1079,    -1,
    -2,  1080,  4296,  4319,  4342,  4365,  4388,  4411,  4434,  4457,
  4480,  4503,  4526,  4549,  1114,  1114,-32768,  1081,   543,   543,
  1005,   543,   325,   609,   609,  1114,  1114,  1083,  1084,  1087,
  3472,   212,  1036,  1089,  1114,   543,  1088,  1092,  1091,   934,
  1093,   391,  1094,  1095,  1114,  1096,  1098,  1106,  1107,  1111,
   391,  1114,  1114,  1114,   543,  1109,  1113,   391,  1114,  1116,
  1146,  1153,  1114,   359,    62,-32768,-32768,  6366,  1114,-32768,
-32768,-32768,  1383,  1404,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   989,-32768,  1114,-32768,   991,   131,-32768,   144,-32768,
   147,-32768,   -28,-32768,  1114,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  4572,  4595,   146,   149,
-32768,   143,   990,  1085,  1004,  1172,   609,   609,  1114,  1462,
    90,  1487,    92,  1510,    94,  1529,  1550,-32768,-32768,  1173,
-32768,  1182,  1036,  1009,  4618,  1033,-32768,  1034,-32768,  1040,
-32768,  1035,-32768,  1042,  3496,-32768,  1043,-32768,-32768,  1044,
  1045,  3520,  4641,  3544,  1047,-32768,  1057,  1059,  4664,  1062,
  1063,-32768,  4687,  1066,-32768,  4710,-32768,-32768,   350,  1952,
-32768,  1114,  1114,  1114,  1192,  1061,   -42,-32768,  4733,  4756,
  4779,  4802,  4825,  4848,  4871,  4894,  4917,  4940,  4963,  4986,
  1114,  1114,  1117,   543,-32768,-32768,   543,  1114,  1202,-32768,
  2392,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    23,
-32768,  1720,  1201,   146,   391,  1210,  1114,  1236,   391,  1246,
  1250,  1248,  1251,  1254,  1114,  1255,   543,  1256,  1257,  1114,
  1253,  1264,  1114,  1268,  1269,  1103,  1114,-32768,  2167,  2187,
  2207,-32768,   543,  1270,-32768,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  1114,  2227,  2247,  1108,
-32768,  1112,  1569,    87,  1104,  1438,  1274,  1114,-32768,  1115,
  1118,  1120,  5009,-32768,  1121,-32768,  1122,-32768,-32768,-32768,
  3568,-32768,  1133,-32768,-32768,  3592,  1134,-32768,  3616,  1136,
  1139,-32768,  2267,  1277,  1279,    41,  1141,-32768,  5032,  5055,
  5078,  5101,  5124,  5147,  5170,  5193,  5216,  3640,  3664,  3688,
  1280,  1284,   543,   543,-32768,  1220,  -127,  5239,-32768,  1036,
   391,   391,   391,   391,  1305,  1306,  1309,   391,  1310,  1311,
  1312,  1314,  1315,-32768,-32768,-32768,-32768,   -28,   543,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,-32768,-32768,
-32768,-32768,-32768,  1161,  1160,  1162,  1114,  1114,  1036,  1164,
  1165,  1166,  1167,-32768,-32768,-32768,  1169,-32768,-32768,-32768,
  1170,  1171,   -40,  1174,  5262,  5285,  5308,  5331,  5354,  5377,
  5400,  5423,  5446,  1175,  1177,  1181,   543,  1262,  1338,  2287,
  5469,  1750,   391,   391,  1339,  1347,   391,  1349,  1350,  1351,
   543,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,  1184,  1187,-32768,-32768,  1114,  1114,  1190,
  1191,-32768,-32768,  1203,  1204,  1189,-32768,  1199,  5492,  5515,
  5538,  5561,  5584,  5607,  5630,  5653,  5676,   226,  6366,   235,
  6366,   240,  6366,  1265,  1114,  1981,  1036,   391,   543,  1356,
  1369,  1370,  1371,  1114,  1114,  1114,  1114,  1114,  1114,  1114,
  1114,  1114,  1114,  1372,  1114,  1373,  1114,  1378,  1215,  5699,
  1114,-32768,  1036,  1219,  1221,-32768,-32768,-32768,-32768,  5722,
  5745,  5768,  5791,  5814,  5837,  3712,  3736,  3760,  6366,-32768,
  6366,-32768,  6366,-32768,  1114,  1114,  2307,  2373,   391,   543,
  1114,  1114,  1114,  1114,  1114,  1114,-32768,-32768,-32768,  5860,
  2327,-32768,  1252,  1224,  1226,  5883,  5906,  5929,  5952,  5975,
  5998,  1225,  1228,  1229,  1114,  1395,-32768,   543,   391,  1114,
  1114,  1114,  1114,  1114,  1114,  1114,  1114,  1114,  2347,-32768,
  1233,  1235,  6021,  6044,  6067,  6090,  6113,  6136,   241,  6366,
   245,  6366,   246,  6366,  1397,   543,  1405,  1114,  1114,  1114,
  1114,  1114,  1114,  1114,  1406,  1114,  1407,  1114,  1408,-32768,
  1258,-32768,  6159,  6182,  6205,  3784,  3808,  3832,  6366,-32768,
  6366,-32768,  6366,-32768,   543,  1114,  1114,  1114,-32768,-32768,
-32768,  1259,  6228,  6251,  6274,  1244,  1261,  1272,   543,  1114,
  1114,  1114,  1114,  1114,  1114,  1275,  6297,  6320,  6343,   251,
  6366,   257,  6366,   259,  6366,   391,  1114,  1114,  1114,  1114,
  1411,  1114,  1416,  1114,  1417,  1263,  3856,  3880,  3904,  6366,
-32768,  6366,-32768,  6366,-32768,  1418,-32768,-32768,-32768,-32768,
  1303,  1313,  1332,  1114,  1114,  1114,   279,  6366,   298,  6366,
   302,  6366,  1114,  1419,  1114,  1420,  1114,  1439,  6366,-32768,
  6366,-32768,  6366,-32768,  1446,  1485,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1480,-32768,
   941,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1499,  1501,
  -293,   234,  1502,-32768,-32768,-32768,-32768,-32768,   401,  -932,
-32768,-32768,-32768,  1196,-32768,-32768,  -771,    -7,-32768,  1007,
   -10,-32768,  -111,-32768,  -870,   736,   778,-32768,-32768
};


#define	YYLAST		6531


static const short yytable[] = {   102,
   250,   436,   148,   862,   121,   169,   739,   127,   963,   691,
   309,   130,   216,   216,  1015,   945,   740,   945,  -236,  -235,
     7,   946,   454,   946,   454,   304,  1035,   292,   293,   945,
   153,   155,   292,   293,   104,   946,   105,   292,   293,   766,
   912,  1127,   767,   106,   768,   177,  1107,   769,   455,   921,
   455,   294,   741,   292,   293,   107,   928,    25,    26,    27,
    28,    29,    30,    31,    32,   426,    33,   935,    35,    36,
   108,    38,    39,   292,   293,   109,   338,   339,   213,   214,
   215,   110,   292,   293,   216,   443,   444,   295,   692,    51,
   198,   199,   200,   201,   217,   973,   563,   975,   310,   977,
   111,   292,   293,    52,    53,   793,   112,   252,   253,   254,
   255,   256,   257,  1040,   807,   260,   261,   262,   263,   128,
   265,   266,   129,   268,   269,   270,   131,   274,   113,  1014,
   123,  1170,   166,   124,   305,   167,   286,   114,   170,   289,
   292,   293,   125,   290,   291,   296,   157,   115,   126,   158,
   159,   292,   293,   816,   132,   149,   150,   292,   293,    60,
   308,   133,   311,   437,   313,   134,   151,   122,   863,   152,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   456,   135,   460,  1036,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
  1015,  1108,   136,  1041,    75,    76,   137,  1045,   292,   293,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,   794,   795,   796,   797,   138,   292,   293,   292,   293,
   292,   293,   464,   465,   292,   293,   403,   139,   140,   406,
   141,   520,   521,   410,   798,   799,   663,   415,   416,   417,
   147,   419,   420,   421,   422,   423,   424,   425,   753,   754,
   142,   430,   431,   116,   117,   118,   119,   292,   293,   438,
   439,   440,   693,   446,   538,   292,   293,   539,   156,   942,
   292,   293,   452,   292,   293,   160,   120,   770,   463,   161,
   771,   964,   943,   789,   966,   944,   790,   964,   965,  1130,
  1131,  1132,  1133,   162,   163,   164,  1137,    75,   885,   886,
   486,   487,   165,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,   168,   171,   172,   654,   202,   203,
   204,   205,   206,   173,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   174,   143,   100,   216,   144,   145,   101,
   146,   175,   271,   213,   214,   215,   177,   176,   178,   216,
   525,  1190,  1191,   300,  1233,  1194,   303,  1234,   655,    40,
    41,    42,    43,  1235,    45,   540,  1236,   251,  1237,  1334,
   545,  1238,  1335,  1336,  1338,   553,  1337,  1339,   258,  1390,
   554,   555,  1391,    -1,     8,  1392,     9,  1394,  1393,   558,
  1395,   202,   203,   204,   205,   206,   562,   207,   208,   209,
   210,   338,   339,   213,   214,   215,  1244,  1423,   179,   216,
  1424,   596,   205,   206,   694,   207,   208,   209,   210,   338,
   339,   213,   214,   215,   180,   259,  1425,   216,   598,  1426,
  1427,   856,   287,  1428,   181,   599,   600,   601,   182,   183,
   602,   887,   888,   724,   725,   726,   727,   728,   100,   184,
   185,   186,   889,   187,   188,   152,   189,  1284,   202,   203,
   204,   205,   206,   190,   207,   208,   209,   210,   338,   339,
   213,   214,   215,   191,   192,   638,   216,   301,   193,   275,
   315,   194,   195,   196,   737,   197,   248,  1312,   264,   646,
   647,    10,    11,    12,    13,    14,    15,    16,    17,   267,
   276,   277,   281,   282,   317,    75,    76,   283,   667,   668,
   669,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   279,   284,   280,   285,   216,   297,   316,   298,
   299,   685,   686,   357,   688,   358,   459,   207,   208,   209,
   210,   338,   339,   213,   214,   215,   704,   702,   703,   216,
   359,   360,   387,   361,   362,   713,   363,   364,   365,   366,
   367,    75,   885,   368,  1396,   369,   370,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   371,   372,
   373,   374,   749,   375,   376,  1006,   377,   378,   379,   380,
   381,   382,   383,   384,   385,   762,   763,   764,   386,   390,
   389,   391,   398,   413,   773,   774,   775,   776,   777,   778,
   779,   780,   781,   782,   783,   784,   418,   427,   448,   449,
   451,   490,   491,   492,   493,   801,   494,   802,   495,   496,
   497,   498,   803,   499,   500,   501,   502,   503,   504,    98,
    99,   505,   506,   507,   508,   509,   100,   510,   511,   512,
   101,   513,   514,   271,   515,   516,   517,   518,   519,   526,
   522,   524,   934,   523,   527,   202,   203,   204,   205,   206,
   835,   207,   208,   209,   210,   338,   339,   213,   214,   215,
   838,    -7,    -7,   216,    -7,   843,   844,   528,   532,   392,
   589,   529,   531,   534,   556,   857,   535,   859,   536,   861,
   541,   557,   590,   591,   592,   887,   888,   594,   595,   122,
   603,   604,   100,   605,   606,   607,   889,   877,   878,   152,
   488,   608,   891,   893,   895,   890,   892,   894,   896,   897,
   609,   610,   611,   612,   613,   903,   614,   905,   615,   634,
   616,   617,   618,   619,   620,   621,   622,   915,   623,   624,
   625,   626,   627,   628,   922,   923,   924,   629,   630,   631,
   632,   929,   393,   633,   636,   933,   641,   635,   643,   650,
   651,   936,   652,   564,   565,   566,   567,   568,   569,   570,
   571,   572,   573,   574,   575,   653,   940,   656,   657,    -7,
    -7,    -7,    -7,    -7,    -7,    -7,    -7,   949,   950,   951,
   952,   953,   954,   955,   956,   957,   958,   959,   960,   658,
   659,   660,   661,   662,   672,     1,     2,   289,     3,   198,
   199,   971,   684,   701,   689,   695,   705,   673,   674,   675,
   202,   203,   204,   205,   206,   982,   207,   208,   209,   210,
   338,   339,   213,   214,   215,   676,   677,   678,   216,   706,
   708,   273,   700,   707,   679,   709,   278,   712,   680,   202,
   203,   204,   205,   206,   394,   207,   208,   209,   210,   338,
   339,   213,   214,   215,  1009,  1010,  1011,   216,   681,   302,
   576,   682,   683,   306,   307,   714,   715,   718,   719,   720,
   721,   722,   731,  1028,  1029,   732,   733,   734,   735,   736,
  1033,   765,   738,   202,   203,   204,   205,   206,   742,   207,
   208,   209,   210,   338,   339,   213,   214,   215,   744,  1043,
   746,   216,   747,   787,   792,   800,   804,  1051,   809,   808,
   836,   810,  1056,   837,   811,  1059,   812,   840,   813,  1063,
   814,   815,   395,   817,   841,   818,   819,   826,  1069,  1070,
  1071,  1072,  1073,  1074,  1075,  1076,  1077,  1078,  1079,  1080,
   820,   821,   822,   823,   824,   825,   827,   828,  1088,   829,
  1090,   832,   842,   845,   846,   847,   830,   831,    75,    76,
   833,   834,   848,   849,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,   202,   203,   204,   205,   206,
   850,   207,   208,   209,   210,   338,   339,   213,   214,   215,
   851,   858,  1129,   216,   860,   864,   883,   879,   898,   899,
   900,   904,   910,   907,   908,   396,   909,   914,   911,   913,
   917,   916,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,
  1153,   918,   919,   920,   926,   927,    75,    76,   930,  1160,
  1161,  1162,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,   202,   203,   204,   205,   206,   931,   207,
   208,   209,   210,   338,   339,   213,   214,   215,   932,   939,
   967,   216,   941,   968,  1199,  1200,  1201,  1202,  1203,  1204,
  1205,  1206,  1207,  1209,  1211,  1213,   969,   970,   983,   980,
  1216,  1217,   202,   203,   204,   205,   206,   981,   207,   208,
   209,   210,   211,   212,   213,   214,   215,  1012,  1030,   100,
   216,   985,   986,   101,   988,  1034,  1039,  1240,   987,  1243,
   989,   991,  1042,   992,   993,   997,  1250,  1251,  1252,  1253,
  1254,  1255,  1256,  1257,  1258,  1259,   998,  1261,   999,  1263,
  1001,  1013,  1002,  1267,  1004,  1268,   202,   203,   204,   205,
   206,  1044,   207,   208,   209,   210,   338,   339,   213,   214,
   215,  1046,  1047,  1048,   216,  1057,  1049,  1280,  1281,  1050,
  1052,  1054,  1055,  1286,  1287,  1288,  1289,  1290,  1291,  1058,
    98,    99,  1060,  1061,  1062,  1068,  1086,   100,  1083,  1089,
  1084,   101,  1105,  1091,  1106,  1122,  1092,  1309,  1093,  1123,
  1095,  1096,  1313,  1314,  1315,  1316,  1317,  1318,  1320,  1322,
  1324,  1098,  1126,  1100,  1102,   639,   640,  1103,   642,  1109,
  1134,  1135,   644,   645,  1136,  1138,  1139,  1140,  1141,  1142,
  1343,  1344,  1345,  1346,  1347,  1348,  1349,   397,  1351,  1157,
  1353,  1158,  1163,  1164,  1159,  1165,  1166,  1167,  1168,  1169,
  1185,  1186,  1171,  1239,  1192,  1181,   649,  1182,  1363,  1364,
  1365,  1183,  1193,  1195,  1196,  1214,  1197,  1215,  1218,  1219,
  1222,  1246,  1377,  1378,  1379,  1381,  1383,  1385,   687,   670,
  1223,   690,  1220,  1221,  1247,  1248,  1249,  1260,  1262,  1397,
  1398,  1399,  1400,  1264,  1402,  1265,  1404,  1269,   937,  1270,
   710,   711,  1298,  1297,  1299,  1306,   716,   717,  1307,  1308,
  1310,  1326,  1340,   723,  1327,   730,  1418,  1420,  1422,   938,
  1342,  1350,  1352,  1354,  1373,  1429,  1401,  1431,   743,  1433,
   745,  1403,  1405,  1410,  1430,  1432,  1355,  1369,   750,   751,
   752,  1374,  1406,   755,   756,   757,   758,   759,   760,   761,
    75,  1087,  1375,  1386,  1434,  1436,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   972,   202,   203,
   204,   205,   206,  1414,   207,   208,   209,   210,   338,   339,
   213,   214,   215,  1415,  1437,    62,   216,   202,   203,   204,
   205,   206,   974,   207,   208,   209,   210,   338,   339,   213,
   214,   215,  1416,   671,    65,   216,    66,    67,  1143,   461,
   202,   203,   204,   205,   206,   976,   207,   208,   209,   210,
   338,   339,   213,   214,   215,   882,     0,     0,   216,   202,
   203,   204,   205,   206,   978,   207,   208,   209,   210,   338,
   339,   213,   214,   215,   648,     0,     0,   216,     0,     0,
   202,   203,   204,   205,   206,   979,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,   884,
     0,     0,     0,     0,  1085,     0,     0,     0,     0,   902,
     0,     0,     0,   906,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    98,    99,     0,     0,     0,     0,
     0,   100,   925,     0,     0,   101,   537,     0,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   748,     0,     0,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,     0,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,     0,     0,     0,
     0,  1031,     0,     0,  1032,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,     0,     0,   202,
   203,   204,   205,   206,  1053,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
  1067,    25,    26,    27,    28,    29,    30,    31,    32,     0,
    33,     0,    35,    36,     0,    38,    39,     0,     0,     0,
    25,    26,    27,    28,    29,    30,    31,    32,     0,    33,
     0,    35,    36,    51,    38,    39,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    52,    53,     0,
     0,     0,    51,   564,   565,   566,   567,   568,   569,   570,
   571,   572,   573,   574,   575,  1038,    52,    53,     0,     0,
  1124,  1125,     0,     0,     0,     0,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,  1189,  1144,     0,     0,     0,
     0,     0,     0,    60,     0,     0,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,    60,     0,   216,     0,     0,     0,     0,     0,
     0,     0,    -3,    22,     0,     0,    23,     0,     0,     0,
     0,     0,   441,     0,  1184,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1198,     0,
   772,   445,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,    33,    34,    35,    36,    37,    38,    39,     0,
     0,     0,    40,    41,    42,    43,    44,    45,     0,    46,
    47,    48,    49,    50,     0,    51,     0,     0,     0,     0,
     0,     0,     0,     0,   218,     0,  1245,     0,     0,    52,
    53,     0,     0,     0,   489,     0,    54,    55,    56,    57,
    58,    59,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,  1285,     0,   216,
   219,   220,   221,   854,     0,    60,   855,     0,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,     0,     0,
     0,     0,     0,     0,     0,  1311,   232,   233,   234,   235,
   236,   237,   238,   239,   240,   241,     0,   242,   243,   244,
   245,   246,   247,     0,     0,     0,     0,     0,   202,   203,
   204,   205,   206,  1341,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1007,     0,     0,  1008,     0,     0,     0,   202,   203,   204,
   205,   206,  1362,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,  1376,     0,     0,  1241,
     0,     0,  1242,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   400,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   405,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   407,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   542,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   546,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   547,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   666,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,   852,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1064,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1065,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1066,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1081,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1082,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1104,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1187,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1282,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,   202,   203,   204,   205,   206,  1296,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,  1283,     0,     0,     0,     0,  1325,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   428,   340,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   340,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   399,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   401,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   402,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   404,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   408,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   409,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   414,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   450,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   453,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   466,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   467,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   468,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   469,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   470,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   471,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   472,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   473,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   474,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   475,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   477,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   478,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   479,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   480,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   481,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   482,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   530,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   533,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   543,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   544,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   548,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   549,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   550,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   551,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   552,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   593,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   597,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   637,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   696,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   697,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   698,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   699,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   788,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,   853,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,   901,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,   990,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,   994,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,   996,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1097,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1099,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1101,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,  1119,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,  1120,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1121,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1277,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1278,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,  1279,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,  1359,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,     0,  1360,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
     0,  1361,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,     0,  1407,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,     0,  1408,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,     0,  1409,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   428,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   429,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   476,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,   483,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,   484,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,   485,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,   559,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,   560,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   561,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   664,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   665,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   785,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   786,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,   805,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,   806,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,   839,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,   865,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,   866,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   867,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   868,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   869,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   870,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,   871,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,   872,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,   873,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,   874,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,   875,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,   876,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
   961,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,   962,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,   984,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,   995,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1000,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1003,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1005,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1016,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1017,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1018,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1019,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1020,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1021,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1022,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1023,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1024,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1025,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1026,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1027,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1094,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1110,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1111,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1112,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1113,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1114,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1115,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1116,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1117,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1118,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1128,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1172,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1173,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1174,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1175,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1176,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1177,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1178,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1179,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1180,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1188,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1224,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1225,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1226,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1227,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1228,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1229,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1230,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1231,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1232,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1266,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1271,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1272,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1273,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1274,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1275,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1276,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1295,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1300,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1301,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1302,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1303,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1304,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1305,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1328,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1329,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1330,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1331,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1332,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216,     0,     0,     0,  1333,   202,   203,   204,   205,   206,
     0,   207,   208,   209,   210,   338,   339,   213,   214,   215,
     0,     0,     0,   216,     0,     0,     0,  1356,   202,   203,
   204,   205,   206,     0,   207,   208,   209,   210,   338,   339,
   213,   214,   215,     0,     0,     0,   216,     0,     0,     0,
  1357,   202,   203,   204,   205,   206,     0,   207,   208,   209,
   210,   338,   339,   213,   214,   215,     0,     0,     0,   216,
     0,     0,     0,  1358,   202,   203,   204,   205,   206,     0,
   207,   208,   209,   210,   338,   339,   213,   214,   215,     0,
     0,     0,   216,     0,     0,     0,  1370,   202,   203,   204,
   205,   206,     0,   207,   208,   209,   210,   338,   339,   213,
   214,   215,     0,     0,     0,   216,     0,     0,     0,  1371,
   202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
   338,   339,   213,   214,   215,     0,     0,     0,   216,     0,
     0,     0,  1372,   202,   203,   204,   205,   206,     0,   207,
   208,   209,   210,   338,   339,   213,   214,   215,     0,     0,
     0,   216,     0,     0,     0,  1387,   202,   203,   204,   205,
   206,     0,   207,   208,   209,   210,   338,   339,   213,   214,
   215,     0,     0,     0,   216,     0,     0,     0,  1388,   202,
   203,   204,   205,   206,     0,   207,   208,   209,   210,   338,
   339,   213,   214,   215,     0,     0,     0,   216,     0,     0,
     0,  1389,   202,   203,   204,   205,   206,     0,   207,   208,
   209,   210,   338,   339,   213,   214,   215,     0,     0,     0,
   216
};

static const short yycheck[] = {     7,
   112,   295,     4,     6,     5,    35,     6,    56,   879,     4,
    80,    56,   165,   165,   947,    58,     6,    58,   171,   171,
   138,    64,     4,    64,     4,    62,     4,   157,   158,    58,
    41,    42,   157,   158,     6,    64,     7,   157,   158,   169,
   812,   169,   172,     6,   169,   173,     6,   172,    30,   821,
    30,   171,    42,   157,   158,     6,   828,    31,    32,    33,
    34,    35,    36,    37,    38,   169,    40,     6,    42,    43,
     6,    45,    46,   157,   158,     6,   157,   158,   159,   160,
   161,     6,   157,   158,   165,     6,     7,   171,    83,    63,
    98,    99,   100,   101,   102,     6,   171,     6,   168,     6,
   168,   157,   158,    77,    78,     7,   168,   115,   116,   117,
   118,   119,   120,   984,   170,   123,   124,   125,   126,   168,
   128,   129,   171,   131,   132,   133,   171,   135,   168,   172,
   168,   172,    31,   171,   171,    34,   147,     6,   168,   150,
   157,   158,   168,   151,   152,   156,    31,     7,   168,    34,
    35,   157,   158,   170,   168,   157,   158,   157,   158,   133,
   168,   168,   170,   169,   172,    39,   168,   168,   171,   171,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   172,   168,   172,   171,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
  1143,   171,    35,   985,     3,     4,    35,   989,   157,   158,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   143,   144,   145,   146,    35,   157,   158,   157,   158,
   157,   158,   166,   167,   157,   158,   264,    34,    35,   267,
    37,   169,   170,   271,   166,   167,   169,   275,   276,   277,
   171,   279,   280,   281,   282,   283,   284,   285,    48,    49,
    37,   292,   293,   143,   144,   145,   146,   157,   158,   297,
   298,   299,     8,   304,   169,   157,   158,   172,   171,   169,
   157,   158,   310,   157,   158,   171,   166,   169,   316,     5,
   172,   169,   169,   168,   172,   169,   171,   169,   170,  1091,
  1092,  1093,  1094,    35,   171,     6,  1098,     3,     4,     5,
   338,   339,     5,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   168,   171,   168,     6,   147,   148,
   149,   150,   151,   171,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     6,    31,   164,   165,    34,    35,   168,
    37,     5,   171,   159,   160,   161,   173,    35,   168,   165,
   398,  1163,  1164,   160,   169,  1167,   163,   172,    47,    50,
    51,    52,    53,   169,    55,   413,   172,     5,   169,   169,
   418,   172,   172,   169,   169,   426,   172,   172,     6,   169,
   428,   429,   172,     0,     1,   169,     3,   169,   172,   437,
   172,   147,   148,   149,   150,   151,   444,   153,   154,   155,
   156,   157,   158,   159,   160,   161,  1218,   169,   168,   165,
   172,   459,   150,   151,   170,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   168,     5,   169,   165,   476,   172,
   169,   765,   173,   172,   168,   483,   484,   485,   168,   168,
   488,   157,   158,    93,    94,    95,    96,    97,   164,   168,
   168,   168,   168,   168,   168,   171,   168,  1269,   147,   148,
   149,   150,   151,   168,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   168,   168,   526,   165,     6,   168,   171,
     6,   168,   168,   168,   636,   168,   168,  1299,   168,   537,
   538,   108,   109,   110,   111,   112,   113,   114,   115,   168,
   168,   168,   168,   168,     4,     3,     4,   168,   559,   560,
   561,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   171,   168,   171,   168,   165,   171,   168,   171,
   171,   589,   590,   168,   592,   168,     8,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   607,   605,   606,   165,
   168,   168,     5,   168,   168,   616,   168,   168,   168,   168,
   168,     3,     4,   168,  1386,   168,   168,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,   168,   168,
   168,   168,   650,   168,   168,   939,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   663,   664,   665,   168,   170,
   169,   169,   169,     7,   672,   673,   674,   675,   676,   677,
   678,   679,   680,   681,   682,   683,     7,     4,     7,     7,
    81,     5,     5,     5,     5,   693,     5,   695,     5,     5,
     5,     5,   700,     5,     5,     5,     5,     5,     5,   157,
   158,     5,     5,     5,     5,     5,   164,     5,     5,     5,
   168,   126,     5,   171,     5,     5,     5,     3,     5,     7,
     5,     5,   834,     6,     6,   147,   148,   149,   150,   151,
   741,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   748,     0,     1,   165,     3,   753,   754,     7,     6,     6,
   171,     7,     7,     6,   172,   766,     7,   768,     7,   770,
     7,   172,   171,     7,   168,   157,   158,     7,   173,   168,
   140,   169,   164,   169,   169,   169,   168,   785,   786,   171,
     8,   169,   793,   794,   795,   793,   794,   795,   796,   797,
   169,   169,   169,   169,   169,   803,   169,   805,   169,     5,
   169,   169,   169,   169,   169,   169,   169,   815,   169,   169,
   169,   169,   169,   169,   822,   823,   824,   169,   169,   169,
   169,   829,     6,   169,   169,   833,     7,   170,     7,   171,
     7,   839,     7,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     7,   854,     7,     7,   108,
   109,   110,   111,   112,   113,   114,   115,   865,   866,   867,
   868,   869,   870,   871,   872,   873,   874,   875,   876,     7,
     7,     7,     7,     7,   168,   134,   135,   888,   137,   887,
   888,   889,     6,     3,     7,     7,     3,   168,   168,   168,
   147,   148,   149,   150,   151,   903,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   168,   168,   168,   165,     3,
     3,   134,   136,   159,   168,     3,   139,     3,   168,   147,
   148,   149,   150,   151,     6,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   942,   943,   944,   165,   168,   162,
   172,   168,   168,   166,   167,     3,     3,     3,     3,     3,
     3,     3,     3,   961,   962,     5,     5,     3,     3,     6,
   968,   171,     6,   147,   148,   149,   150,   151,     6,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     6,   987,
     6,   165,     6,     6,    82,   173,   169,   995,   170,   169,
     6,   169,  1000,     6,   170,  1003,   169,     6,   170,  1007,
   169,   169,     6,   169,     6,   170,   170,   170,  1016,  1017,
  1018,  1019,  1020,  1021,  1022,  1023,  1024,  1025,  1026,  1027,
   169,   169,   169,   169,   169,   169,   169,   169,  1036,   169,
  1038,   170,     6,     6,     6,     6,   169,   169,     3,     4,
   169,   169,     6,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   147,   148,   149,   150,   151,
     6,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     6,     6,  1090,   165,     6,     6,    82,     7,     6,     6,
     4,     3,   159,     6,     3,     6,     6,     3,     6,     6,
     3,     6,  1110,  1111,  1112,  1113,  1114,  1115,  1116,  1117,
  1118,     6,     6,     3,     6,     3,     3,     4,     3,  1127,
  1128,  1129,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,   147,   148,   149,   150,   151,     3,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     6,   171,
   171,   165,   172,    79,  1172,  1173,  1174,  1175,  1176,  1177,
  1178,  1179,  1180,  1181,  1182,  1183,   173,     6,   170,     7,
  1188,  1189,   147,   148,   149,   150,   151,     6,   153,   154,
   155,   156,   157,   158,   159,   160,   161,     6,    82,   164,
   165,   169,   169,   168,   170,     4,     6,  1215,   169,  1217,
   169,   169,     3,   170,   170,   169,  1224,  1225,  1226,  1227,
  1228,  1229,  1230,  1231,  1232,  1233,   170,  1235,   170,  1237,
   169,   171,   170,  1241,   169,  1243,   147,   148,   149,   150,
   151,     6,   153,   154,   155,   156,   157,   158,   159,   160,
   161,     6,     3,     6,   165,     3,     6,  1265,  1266,     6,
     6,     6,     6,  1271,  1272,  1273,  1274,  1275,  1276,     6,
   157,   158,     5,     5,   172,     6,   173,   164,   171,     6,
   169,   168,     6,   169,     6,     6,   169,  1295,   169,     6,
   170,   170,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,
  1308,   169,    83,   170,   169,   528,   529,   169,   531,   169,
     6,     6,   535,   536,     6,     6,     6,     6,     5,     5,
  1328,  1329,  1330,  1331,  1332,  1333,  1334,     6,  1336,   169,
  1338,   172,   169,   169,   173,   170,   170,   169,   169,   169,
    79,     4,   169,    79,     6,   171,     6,   171,  1356,  1357,
  1358,   171,     6,     5,     5,   172,     6,   171,   169,   169,
   172,     6,  1370,  1371,  1372,  1373,  1374,  1375,   591,     6,
   172,   594,   170,   170,     6,     6,     6,     6,     6,  1387,
  1388,  1389,  1390,     6,  1392,   171,  1394,   169,     6,   169,
   613,   614,   169,   142,   169,   171,   619,   620,   171,   171,
     6,   169,     6,   626,   170,   628,  1414,  1415,  1416,     6,
     6,     6,     6,     6,   171,  1423,     6,  1425,   641,  1427,
   643,     6,     6,     6,     6,     6,   169,   169,   651,   652,
   653,   171,   170,   656,   657,   658,   659,   660,   661,   662,
     3,     4,   171,   169,     6,     0,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,     6,   147,   148,
   149,   150,   151,   171,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   171,     0,     6,   165,   147,   148,   149,
   150,   151,     6,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   171,   563,     6,   165,     6,     6,  1108,   314,
   147,   148,   149,   150,   151,     6,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   790,    -1,    -1,   165,   147,
   148,   149,   150,   151,     6,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   538,    -1,    -1,   165,    -1,    -1,
   147,   148,   149,   150,   151,     6,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,   792,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,   802,
    -1,    -1,    -1,   806,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   157,   158,    -1,    -1,    -1,    -1,
    -1,   164,   825,    -1,    -1,   168,     8,    -1,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
     8,    -1,    -1,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,    -1,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   964,    -1,    -1,   967,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,   147,
   148,   149,   150,   151,   997,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
  1013,    31,    32,    33,    34,    35,    36,    37,    38,    -1,
    40,    -1,    42,    43,    -1,    45,    46,    -1,    -1,    -1,
    31,    32,    33,    34,    35,    36,    37,    38,    -1,    40,
    -1,    42,    43,    63,    45,    46,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
    -1,    -1,    63,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,   136,    77,    78,    -1,    -1,
  1083,  1084,    -1,    -1,    -1,    -1,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,   136,  1109,    -1,    -1,    -1,
    -1,    -1,    -1,   133,    -1,    -1,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,   133,    -1,   165,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     0,     1,    -1,    -1,     4,    -1,    -1,    -1,
    -1,    -1,   172,    -1,  1157,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1171,    -1,
   172,   172,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    -1,    40,    41,    42,    43,    44,    45,    46,    -1,
    -1,    -1,    50,    51,    52,    53,    54,    55,    -1,    57,
    58,    59,    60,    61,    -1,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,  1219,    -1,    -1,    77,
    78,    -1,    -1,    -1,   139,    -1,    84,    85,    86,    87,
    88,    89,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,  1270,    -1,   165,
    90,    91,    92,   169,    -1,   133,   172,    -1,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1298,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,    -1,   147,   148,
   149,   150,   151,  1326,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,    -1,    -1,   172,    -1,    -1,    -1,   147,   148,   149,
   150,   151,  1355,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,  1369,    -1,    -1,   169,
    -1,    -1,   172,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   141,    -1,    -1,    -1,    -1,   172,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 147 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 161 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 168 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 185 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 186 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 187 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 188 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 193 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 198 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 209 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 212 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 216 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 222 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 228 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 235 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 241 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 245 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 249 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 256 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 260 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 265 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 269 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 273 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 277 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 281 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 285 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 289 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 293 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 299 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 305 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 309 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 313 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 317 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 321 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 329 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 356 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 359 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 365 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 366 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 367 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 368 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 369 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 376 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 381 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 69:
#line 386 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 70:
#line 397 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 71:
#line 401 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 72:
#line 408 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 85:
#line 427 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 429 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 434 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 88:
#line 439 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 89:
#line 446 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 448 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 453 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 92:
#line 458 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 93:
#line 465 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 467 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 472 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 96:
#line 477 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 97:
#line 484 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 486 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 492 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 100:
#line 498 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 101:
#line 505 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 507 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 513 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 104:
#line 519 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 105:
#line 526 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 528 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 534 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 108:
#line 540 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 109:
#line 547 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 549 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 556 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 112:
#line 565 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 113:
#line 572 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 574 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 581 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 116:
#line 590 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 117:
#line 597 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 599 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 606 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 120:
#line 615 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 121:
#line 622 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 624 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 632 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 124:
#line 641 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 125:
#line 648 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 650 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 658 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 128:
#line 667 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 129:
#line 674 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 676 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 131:
#line 684 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 132:
#line 693 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 133:
#line 706 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 134:
#line 712 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 720 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 728 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 137:
#line 736 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 744 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 139:
#line 752 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 140:
#line 771 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 778 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 142:
#line 784 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 143:
#line 803 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 144:
#line 814 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 145:
#line 822 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 146:
#line 828 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 834 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 148:
#line 853 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 149:
#line 859 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 150:
#line 876 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 151:
#line 882 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 888 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 894 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 900 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 155:
#line 906 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 156:
#line 925 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 157:
#line 937 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 943 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 159:
#line 962 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 160:
#line 985 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 161:
#line 993 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 162:
#line 997 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1003 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1009 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 165:
#line 1021 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 166:
#line 1027 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1033 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1046 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 169:
#line 1051 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 170:
#line 1056 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 171:
#line 1061 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 172:
#line 1068 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 173:
#line 1069 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 174:
#line 1070 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 175:
#line 1075 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 176:
#line 1079 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 177:
#line 1091 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 178:
#line 1109 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 179:
#line 1124 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 180:
#line 1152 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 181:
#line 1182 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 182:
#line 1186 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 183:
#line 1200 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 184:
#line 1213 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 185:
#line 1226 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 186:
#line 1265 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 187:
#line 1270 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 188:
#line 1276 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 189:
#line 1280 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 190:
#line 1284 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 191:
#line 1288 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 192:
#line 1292 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 193:
#line 1297 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 194:
#line 1305 "Gmsh.y"
{
    ;
    break;}
case 195:
#line 1308 "Gmsh.y"
{
    ;
    break;}
case 196:
#line 1314 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 197:
#line 1331 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 198:
#line 1342 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 199:
#line 1359 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 200:
#line 1376 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 201:
#line 1393 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 202:
#line 1414 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 203:
#line 1434 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 204:
#line 1454 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 205:
#line 1471 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 206:
#line 1496 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 209:
#line 1512 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 1515 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 211:
#line 1527 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 212:
#line 1544 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 213:
#line 1561 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 214:
#line 1578 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 215:
#line 1595 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 216:
#line 1612 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 217:
#line 1629 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 218:
#line 1646 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pNumOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pNumOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pNumOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pNumOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 219:
#line 1671 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pNumOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pNumOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pNumOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pNumOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 220:
#line 1696 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pNumOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pNumOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pNumOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pNumOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 221:
#line 1721 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 225:
#line 1759 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 226:
#line 1760 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 227:
#line 1761 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 228:
#line 1762 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 229:
#line 1763 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 230:
#line 1767 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 231:
#line 1768 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 232:
#line 1769 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 233:
#line 1770 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 234:
#line 1771 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 235:
#line 1772 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 236:
#line 1773 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 237:
#line 1774 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 238:
#line 1775 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 239:
#line 1776 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 240:
#line 1777 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 241:
#line 1778 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 242:
#line 1779 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 243:
#line 1780 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 244:
#line 1781 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 245:
#line 1782 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 246:
#line 1783 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 247:
#line 1784 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 248:
#line 1785 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 249:
#line 1786 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 250:
#line 1787 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 251:
#line 1788 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 252:
#line 1789 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 253:
#line 1790 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 254:
#line 1791 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 255:
#line 1792 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 256:
#line 1793 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 257:
#line 1794 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 258:
#line 1795 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 259:
#line 1796 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 260:
#line 1797 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 261:
#line 1798 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 262:
#line 1799 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 263:
#line 1800 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 264:
#line 1801 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1802 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 266:
#line 1803 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1804 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 268:
#line 1805 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 269:
#line 1806 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 270:
#line 1810 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 271:
#line 1811 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 272:
#line 1813 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 273:
#line 1822 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 274:
#line 1839 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 275:
#line 1856 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 276:
#line 1876 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 277:
#line 1882 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 278:
#line 1896 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 279:
#line 1900 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 280:
#line 1904 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 281:
#line 1908 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 282:
#line 1912 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 283:
#line 1918 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 284:
#line 1922 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 285:
#line 1926 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 286:
#line 1930 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 287:
#line 1934 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 288:
#line 1963 "Gmsh.y"
{
    ;
    break;}
case 289:
#line 1966 "Gmsh.y"
{
    ;
    break;}
case 290:
#line 1972 "Gmsh.y"
{
    ;
    break;}
case 291:
#line 1975 "Gmsh.y"
{
    ;
    break;}
case 292:
#line 1981 "Gmsh.y"
{
    ;
    break;}
case 293:
#line 1984 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 294:
#line 1988 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 295:
#line 1995 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 296:
#line 2000 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 297:
#line 2007 "Gmsh.y"
{
    ;
    break;}
case 298:
#line 2010 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 299:
#line 2016 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 300:
#line 2024 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 301:
#line 2029 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 302:
#line 2038 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 303:
#line 2042 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 304:
#line 2053 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 305:
#line 2057 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 306:
#line 2061 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 307:
#line 2066 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 308:
#line 2071 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2084 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

