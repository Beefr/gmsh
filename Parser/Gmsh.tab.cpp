
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPoint	284
#define	tCircle	285
#define	tEllipsis	286
#define	tLine	287
#define	tSurface	288
#define	tSpline	289
#define	tVolume	290
#define	tCharacteristic	291
#define	tLength	292
#define	tParametric	293
#define	tElliptic	294
#define	tPlane	295
#define	tRuled	296
#define	tTransfinite	297
#define	tComplex	298
#define	tPhysical	299
#define	tUsing	300
#define	tPower	301
#define	tBump	302
#define	tProgression	303
#define	tAssociation	304
#define	tRotate	305
#define	tTranslate	306
#define	tSymmetry	307
#define	tDilate	308
#define	tExtrude	309
#define	tDuplicata	310
#define	tLoop	311
#define	tInclude	312
#define	tRecombine	313
#define	tDelete	314
#define	tCoherence	315
#define	tView	316
#define	tOffset	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tOptions	339
#define	tFor	340
#define	tEndFor	341
#define	tScript	342
#define	tExit	343
#define	tMerge	344
#define	tGeneral	345
#define	tGeometry	346
#define	tMesh	347
#define	tPostProcessing	348
#define	tPrint	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	UMINUS	403

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.17 2000-12-06 18:28:30 remacle Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static StringXColor   *ColorField ;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);

#line 51 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1422
#define	YYFLAG		-32768
#define	YYNTBASE	166

#define YYTRANSLATE(x) ((unsigned)(x) <= 403 ? yytranslate[x] : 259)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   155,     2,     2,   158,
   160,   153,   151,   159,   152,     2,   154,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   163,     2,   149,
     2,   150,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   164,     2,   165,   157,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   161,     2,   162,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   156
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   525,   528,   535,   544,   545,
   548,   551,   554,   557,   560,   563,   566,   569,   572,   575,
   578,   581,   583,   587,   588,   602,   604,   608,   609,   623,
   625,   629,   630,   644,   646,   650,   651,   671,   673,   677,
   678,   698,   700,   704,   705,   725,   727,   731,   732,   758,
   760,   764,   765,   791,   793,   797,   798,   824,   826,   830,
   831,   863,   865,   869,   870,   902,   904,   908,   909,   941,
   946,   954,   963,   976,   983,   989,   997,  1005,  1018,  1026,
  1036,  1054,  1062,  1071,  1080,  1088,  1100,  1106,  1115,  1125,
  1134,  1157,  1178,  1187,  1196,  1202,  1211,  1219,  1228,  1234,
  1246,  1252,  1262,  1264,  1266,  1268,  1269,  1272,  1277,  1282,
  1286,  1290,  1293,  1297,  1304,  1313,  1315,  1324,  1337,  1346,
  1359,  1368,  1381,  1393,  1409,  1411,  1414,  1424,  1427,  1434,
  1444,  1454,  1463,  1472,  1481,  1488,  1493,  1496,  1497,  1500,
  1505,  1510,  1515,  1520,  1525,  1526,  1529,  1534,  1539,  1544,
  1545,  1551,  1552,  1555,  1560,  1565,  1570,  1571,  1577,  1578,
  1581,  1586,  1591,  1596,  1597,  1603,  1604,  1607,  1612,  1617,
  1622,  1623,  1629,  1630,  1633,  1638,  1643,  1648,  1649,  1655,
  1656,  1659,  1664,  1673,  1678,  1688,  1696,  1698,  1700,  1702,
  1704,  1706,  1708,  1712,  1716,  1720,  1724,  1728,  1732,  1735,
  1738,  1743,  1748,  1753,  1758,  1763,  1768,  1773,  1778,  1783,
  1788,  1795,  1800,  1805,  1810,  1815,  1820,  1825,  1832,  1839,
  1846,  1848,  1850,  1852,  1856,  1863,  1875,  1885,  1893,  1901,
  1902,  1906,  1908,  1912,  1913,  1917,  1921,  1923,  1927,  1928,
  1930,  1934,  1936,  1938,  1942
};

static const short yyrhs[] = {   168,
     0,   167,     0,   173,     0,   140,     0,   143,   144,   249,
   249,   249,   145,   146,   142,   249,   249,   249,   142,   249,
   249,   249,   142,   249,   249,   249,   147,   148,     0,   141,
     0,     0,   168,   169,     0,   170,     0,   172,     0,   171,
     0,     1,     6,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   158,   253,   159,     5,   160,     6,     0,   120,   158,   253,
   160,     6,     0,   121,   158,     5,   159,     5,   159,   253,
   159,   253,   159,     5,   159,     5,   159,     5,   160,     6,
     0,     3,     7,    98,   158,     5,   159,   252,   160,     6,
     0,     3,     7,    97,   158,     5,   159,   249,   159,   257,
   159,   248,   159,   248,   159,   248,   159,   257,   159,   257,
   159,   248,   160,     6,     0,     3,     7,    96,   158,     5,
   159,   249,   159,   249,   159,   255,   159,   248,   159,   248,
   159,   248,   159,   248,   159,   257,   159,   257,   159,   257,
   159,   257,   159,   248,   160,     6,     0,     3,     7,   104,
   158,     5,   159,     3,   159,     3,   159,     3,   159,   248,
   160,     6,     0,     3,     7,   108,   158,     5,   159,     3,
   159,   248,   160,     6,     0,     3,     7,   125,   158,     5,
   159,     3,   159,   248,   160,     6,     0,     3,     7,   106,
   158,     5,   159,   153,   159,   153,   159,   249,   159,   248,
   160,     6,     0,     3,     7,   109,   158,     5,   159,   257,
   160,     6,     0,     3,     7,   110,   158,     5,   159,   257,
   159,     3,   159,   248,   160,     6,     0,     3,     7,   105,
   158,     5,   159,     3,   160,     6,     0,     3,     7,   111,
   158,     5,   159,     3,   159,   249,   160,     6,     0,     3,
     7,   113,   158,     5,   159,     3,   159,     3,   159,     3,
   160,     6,     0,     3,     7,   112,   158,     5,   159,   252,
   160,     6,     0,     3,     7,   107,   158,     5,   159,     3,
   160,     6,     0,     3,     7,    33,   158,     5,   159,     3,
   159,     3,   160,     6,     0,     3,     7,   123,   158,     5,
   159,   257,   160,     6,     0,     3,     7,   124,   158,     5,
   159,   257,   159,     3,   160,     6,     0,     3,     7,   122,
   158,     5,   159,     3,   160,     6,     0,     3,     7,   126,
   158,     5,   159,     3,   159,   249,   160,     6,     0,     3,
     7,   127,   158,     5,   159,     3,   159,   249,   159,   249,
   160,     6,     0,     3,     7,   134,   158,     5,   159,     3,
   159,   249,   159,   249,   160,     6,     0,     3,     7,   128,
   158,     5,   159,     3,   159,   249,   160,     6,     0,     3,
     7,   138,   158,     5,   159,     3,   159,   249,   159,   249,
   160,     6,     0,     3,     7,   129,   158,     5,   159,     3,
   159,   257,   159,   257,   159,   248,   159,   248,   160,     6,
     0,     3,     7,   130,   158,     5,   159,   257,   160,     6,
     0,     3,     7,   131,   158,   132,   159,   248,   159,     3,
   160,     6,     0,     3,     7,   133,   158,     5,   159,   257,
   159,   248,   160,     6,     0,     3,     7,   135,   158,     5,
   159,     5,   159,     3,   159,     3,   160,     6,     0,     3,
     7,   136,   158,     5,   159,     5,   159,     3,   160,     6,
     0,     3,     7,   137,   158,     3,   159,     3,   160,     6,
     0,     0,   173,   174,     0,   175,     0,   213,     0,   214,
     0,   215,     0,   218,     0,   219,     0,   223,     0,   226,
     0,   227,     0,   220,     0,   222,     0,   221,     0,    85,
   161,   228,   162,     0,     1,     6,     0,    62,     5,   161,
   176,   162,     6,     0,    62,     5,    63,   252,   161,   176,
   162,     6,     0,     0,   176,   178,     0,   176,   181,     0,
   176,   184,     0,   176,   187,     0,   176,   190,     0,   176,
   193,     0,   176,   196,     0,   176,   199,     0,   176,   202,
     0,   176,   205,     0,   176,   208,     0,   176,   211,     0,
   249,     0,   177,   159,   249,     0,     0,    75,   158,   249,
   159,   249,   159,   249,   160,   179,   161,   177,   162,     6,
     0,   249,     0,   180,   159,   249,     0,     0,    76,   158,
   249,   159,   249,   159,   249,   160,   182,   161,   180,   162,
     6,     0,   249,     0,   183,   159,   249,     0,     0,    77,
   158,   249,   159,   249,   159,   249,   160,   185,   161,   183,
   162,     6,     0,   249,     0,   186,   159,   249,     0,     0,
    72,   158,   249,   159,   249,   159,   249,   159,   249,   159,
   249,   159,   249,   160,   188,   161,   186,   162,     6,     0,
   249,     0,   189,   159,   249,     0,     0,    73,   158,   249,
   159,   249,   159,   249,   159,   249,   159,   249,   159,   249,
   160,   191,   161,   189,   162,     6,     0,   249,     0,   192,
   159,   249,     0,     0,    74,   158,   249,   159,   249,   159,
   249,   159,   249,   159,   249,   159,   249,   160,   194,   161,
   192,   162,     6,     0,   249,     0,   195,   159,   249,     0,
     0,    69,   158,   249,   159,   249,   159,   249,   159,   249,
   159,   249,   159,   249,   159,   249,   159,   249,   159,   249,
   160,   197,   161,   195,   162,     6,     0,   249,     0,   198,
   159,   249,     0,     0,    70,   158,   249,   159,   249,   159,
   249,   159,   249,   159,   249,   159,   249,   159,   249,   159,
   249,   159,   249,   160,   200,   161,   198,   162,     6,     0,
   249,     0,   201,   159,   249,     0,     0,    71,   158,   249,
   159,   249,   159,   249,   159,   249,   159,   249,   159,   249,
   159,   249,   159,   249,   159,   249,   160,   203,   161,   201,
   162,     6,     0,   249,     0,   204,   159,   249,     0,     0,
    66,   158,   249,   159,   249,   159,   249,   159,   249,   159,
   249,   159,   249,   159,   249,   159,   249,   159,   249,   159,
   249,   159,   249,   159,   249,   160,   206,   161,   204,   162,
     6,     0,   249,     0,   207,   159,   249,     0,     0,    67,
   158,   249,   159,   249,   159,   249,   159,   249,   159,   249,
   159,   249,   159,   249,   159,   249,   159,   249,   159,   249,
   159,   249,   159,   249,   160,   209,   161,   207,   162,     6,
     0,   249,     0,   210,   159,   249,     0,     0,    68,   158,
   249,   159,   249,   159,   249,   159,   249,   159,   249,   159,
   249,   159,   249,   159,   249,   159,   249,   159,   249,   159,
   249,   159,   249,   160,   212,   161,   210,   162,     6,     0,
     4,     7,   249,     6,     0,    30,   158,   249,   160,     7,
   252,     6,     0,    45,    30,   158,   249,   160,     7,   257,
     6,     0,    64,    30,   257,     7,   161,   249,   159,   249,
   159,   249,   162,     6,     0,    37,    38,   257,     7,   249,
     6,     0,    30,   161,   249,   162,     6,     0,    33,   158,
   249,   160,     7,   257,     6,     0,    35,   158,   249,   160,
     7,   257,     6,     0,    64,    33,   257,     7,   161,   249,
   159,   249,   159,   249,   162,     6,     0,    31,   158,   249,
   160,     7,   257,     6,     0,    31,   158,   249,   160,     7,
   257,    41,   252,     6,     0,    39,   158,   249,   160,     7,
   161,   249,   159,   249,   159,     5,   159,     5,   159,     5,
   162,     6,     0,    32,   158,   249,   160,     7,   257,     6,
     0,    45,    33,   158,   249,   160,     7,   257,     6,     0,
    33,    57,   158,   249,   160,     7,   257,     6,     0,    78,
   158,   249,   160,     7,   257,     6,     0,    79,   158,   249,
   160,     7,   257,    83,   257,    80,   249,     6,     0,    33,
   161,   249,   162,     6,     0,    41,    34,   158,   249,   160,
     7,   257,     6,     0,   139,    34,   158,   249,   160,     7,
   249,   257,     6,     0,    42,    34,   158,   249,   160,     7,
   257,     6,     0,    79,    34,    81,    82,   158,   249,   160,
     7,   255,    83,   161,   257,   159,   257,   162,    80,   161,
   249,   159,   249,   162,     6,     0,    79,    34,   158,   249,
   160,     7,   255,    83,   161,   257,   159,   257,   162,    80,
   161,   249,   159,   249,   162,     6,     0,    45,    34,   158,
   249,   160,     7,   257,     6,     0,    34,    57,   158,   249,
   160,     7,   257,     6,     0,    34,   161,   249,   162,     6,
     0,    44,    36,   158,   249,   160,     7,   257,     6,     0,
    36,   158,   249,   160,     7,   257,     6,     0,    45,    36,
   158,   249,   160,     7,   257,     6,     0,    52,   252,   161,
   216,   162,     0,    51,   161,   252,   159,   252,   159,   249,
   162,   161,   216,   162,     0,    53,   252,   161,   216,   162,
     0,    54,   161,   252,   159,   249,   162,   161,   216,   162,
     0,   218,     0,   217,     0,   215,     0,     0,   217,   214,
     0,    56,   161,   217,   162,     0,    60,   161,   217,   162,
     0,    58,     5,     6,     0,    95,     5,     6,     0,    89,
     6,     0,    90,     5,     6,     0,    86,   158,   249,   163,
   249,   160,     0,    86,   158,   249,   163,   249,   163,   249,
   160,     0,    87,     0,    55,    30,   161,   249,   159,   252,
   162,     6,     0,    55,    30,   161,   249,   159,   252,   159,
   252,   159,   249,   162,     6,     0,    55,    33,   161,   249,
   159,   252,   162,     6,     0,    55,    33,   161,   249,   159,
   252,   159,   252,   159,   249,   162,     6,     0,    55,    34,
   161,   249,   159,   252,   162,     6,     0,    55,    34,   161,
   249,   159,   252,   159,   252,   159,   249,   162,     6,     0,
    55,    34,   161,   249,   159,   252,   162,   161,   224,   162,
     6,     0,    55,    34,   161,   249,   159,   252,   159,   252,
   159,   249,   162,   161,   224,   162,     6,     0,   225,     0,
   224,   225,     0,    65,   161,   257,   159,   257,   159,   257,
   162,     6,     0,    59,     6,     0,    43,    33,   257,     7,
   249,     6,     0,    43,    33,   257,     7,   249,    46,    49,
   249,     6,     0,    43,    33,   257,     7,   249,    46,    48,
   249,     6,     0,    43,    34,   161,   249,   162,     7,   257,
     6,     0,    40,    34,   161,   249,   162,     7,   257,     6,
     0,    43,    36,   161,   249,   162,     7,   257,     6,     0,
    59,    34,   257,     7,   249,     6,     0,    59,    34,   257,
     6,     0,    61,     6,     0,     0,   228,   229,     0,    91,
   161,   230,   162,     0,    92,   161,   233,   162,     0,    93,
   161,   236,   162,     0,    94,   161,   239,   162,     0,    95,
   161,   242,   162,     0,     0,   230,   231,     0,     4,     7,
     5,     6,     0,     4,     7,   249,     6,     0,     4,     7,
   252,     6,     0,     0,    84,   232,   161,   245,   162,     0,
     0,   233,   234,     0,     4,     7,     5,     6,     0,     4,
     7,   249,     6,     0,     4,     7,   252,     6,     0,     0,
    84,   235,   161,   245,   162,     0,     0,   236,   237,     0,
     4,     7,     5,     6,     0,     4,     7,   249,     6,     0,
     4,     7,   252,     6,     0,     0,    84,   238,   161,   245,
   162,     0,     0,   239,   240,     0,     4,     7,     5,     6,
     0,     4,     7,   249,     6,     0,     4,     7,   252,     6,
     0,     0,    84,   241,   161,   245,   162,     0,     0,   242,
   243,     0,     4,     7,     5,     6,     0,     4,     7,   249,
     6,     0,     4,     7,   252,     6,     0,     0,    84,   244,
   161,   245,   162,     0,     0,   246,   245,     0,     4,     7,
     4,     6,     0,     4,     7,   161,     4,   159,   249,   162,
     6,     0,     4,     7,   247,     6,     0,   161,   249,   159,
   249,   159,   249,   159,   249,   162,     0,   161,   249,   159,
   249,   159,   249,   162,     0,    99,     0,   100,     0,   101,
     0,   102,     0,   103,     0,   250,     0,   158,   249,   160,
     0,   249,   152,   249,     0,   249,   151,   249,     0,   249,
   153,   249,     0,   249,   154,   249,     0,   249,   157,   249,
     0,   152,   249,     0,   151,   249,     0,    10,   158,   249,
   160,     0,    11,   158,   249,   160,     0,    12,   158,   249,
   160,     0,    13,   158,   249,   160,     0,    14,   158,   249,
   160,     0,    15,   158,   249,   160,     0,    16,   158,   249,
   160,     0,    17,   158,   249,   160,     0,    18,   158,   249,
   160,     0,    19,   158,   249,   160,     0,    20,   158,   249,
   159,   249,   160,     0,    21,   158,   249,   160,     0,    22,
   158,   249,   160,     0,    23,   158,   249,   160,     0,    24,
   158,   249,   160,     0,    25,   158,   249,   160,     0,    26,
   158,   249,   160,     0,    27,   158,   249,   159,   249,   160,
     0,    28,   158,   249,   159,   249,   160,     0,    29,   158,
   249,   159,   249,   160,     0,     3,     0,     9,     0,     4,
     0,   249,     8,   249,     0,   249,     8,   164,   249,   165,
   249,     0,   161,   249,   159,   249,   159,   249,   159,   249,
   159,   249,   162,     0,   161,   249,   159,   249,   159,   249,
   159,   249,   162,     0,   161,   249,   159,   249,   159,   249,
   162,     0,   158,   249,   159,   249,   159,   249,   160,     0,
     0,   158,   254,   160,     0,     5,     0,   254,   159,     5,
     0,     0,   161,   256,   162,     0,   158,   256,   160,     0,
   257,     0,   256,   159,   257,     0,     0,   249,     0,   161,
   258,   162,     0,   249,     0,   251,     0,   258,   159,   249,
     0,   258,   159,   251,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   113,   115,   116,   123,   131,   145,   157,   159,   162,   164,
   165,   166,   169,   175,   180,   181,   182,   185,   189,   192,
   198,   203,   209,   217,   222,   226,   232,   237,   241,   246,
   250,   253,   258,   262,   266,   270,   275,   279,   282,   286,
   290,   294,   298,   302,   306,   309,   313,   316,   320,   323,
   332,   336,   342,   344,   345,   346,   347,   348,   349,   350,
   351,   352,   353,   355,   356,   357,   364,   369,   375,   380,
   381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
   391,   394,   397,   401,   407,   413,   416,   420,   426,   432,
   435,   439,   445,   451,   454,   458,   466,   472,   475,   479,
   487,   493,   496,   500,   508,   514,   517,   521,   533,   539,
   542,   546,   558,   564,   567,   571,   583,   589,   592,   596,
   609,   615,   618,   622,   635,   641,   644,   648,   661,   673,
   687,   698,   704,   723,   734,   742,   748,   754,   773,   779,
   795,   802,   808,   814,   820,   826,   845,   857,   863,   882,
   903,   911,   917,   923,   929,   941,   947,   953,   965,   971,
   976,   981,   988,   990,   991,   994,   999,  1010,  1028,  1043,
  1071,  1102,  1106,  1118,  1133,  1146,  1184,  1190,  1196,  1200,
  1204,  1208,  1212,  1217,  1224,  1228,  1233,  1251,  1261,  1279,
  1296,  1313,  1334,  1354,  1374,  1391,  1415,  1426,  1428,  1431,
  1433,  1434,  1435,  1436,  1439,  1441,  1444,  1450,  1455,  1459,
  1461,  1464,  1466,  1469,  1475,  1480,  1485,  1487,  1490,  1492,
  1495,  1501,  1506,  1511,  1513,  1516,  1518,  1521,  1527,  1532,
  1537,  1539,  1542,  1544,  1547,  1553,  1558,  1563,  1565,  1568,
  1570,  1573,  1581,  1588,  1596,  1604,  1618,  1620,  1621,  1622,
  1623,  1626,  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,
  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,
  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
  1658,  1660,  1661,  1672,  1679,  1692,  1701,  1709,  1717,  1727,
  1731,  1736,  1740,  1745,  1749,  1753,  1759,  1765,  1771,  1775,
  1781,  1794,  1800,  1809,  1813
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPoint","tCircle","tEllipsis",
"tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tPower","tBump","tProgression","tAssociation","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tOffset","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tOptions","tFor","tEndFor",
"tScript","tExit","tMerge","tGeneral","tGeometry","tMesh","tPostProcessing",
"tPrint","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'<'","'>'","'+'","'-'","'*'","'/'","'%'",
"UMINUS","'^'","'('","','","')'","'{'","'}'","':'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter",
"Transfini","Coherence","Options","Option","GeneralOptions","GeneralOption",
"@13","GeometryOptions","GeometryOption","@14","MeshOptions","MeshOption","@15",
"PostProcessingOptions","PostProcessingOption","@16","PrintOptions","PrintOption",
"@17","ColorAffects","ColorAffect","RGBAExpr","BoolExpr","FExpr","FExpr_Single",
"FExpr_Range","VExpr","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble", NULL
};
#endif

static const short yyr1[] = {     0,
   166,   166,   166,   167,   167,   167,   168,   168,   169,   169,
   169,   169,   170,   170,   170,   170,   170,   171,   171,   171,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   173,   173,   174,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   175,   175,   176,   176,
   176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
   176,   177,   177,   179,   178,   180,   180,   182,   181,   183,
   183,   185,   184,   186,   186,   188,   187,   189,   189,   191,
   190,   192,   192,   194,   193,   195,   195,   197,   196,   198,
   198,   200,   199,   201,   201,   203,   202,   204,   204,   206,
   205,   207,   207,   209,   208,   210,   210,   212,   211,   213,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   215,   215,
   215,   215,   216,   216,   216,   217,   217,   218,   219,   220,
   221,   221,   221,   222,   222,   222,   223,   223,   223,   223,
   223,   223,   223,   223,   224,   224,   225,   225,   226,   226,
   226,   226,   226,   226,   226,   226,   227,   228,   228,   229,
   229,   229,   229,   229,   230,   230,   231,   231,   231,   232,
   231,   233,   233,   234,   234,   234,   235,   234,   236,   236,
   237,   237,   237,   238,   237,   239,   239,   240,   240,   240,
   241,   240,   242,   242,   243,   243,   243,   244,   243,   245,
   245,   246,   246,   246,   247,   247,   248,   248,   248,   248,
   248,   249,   249,   249,   249,   249,   249,   249,   249,   249,
   249,   249,   249,   249,   249,   249,   249,   249,   249,   249,
   249,   249,   249,   249,   249,   249,   249,   249,   249,   249,
   250,   250,   250,   251,   251,   252,   252,   252,   252,   253,
   253,   254,   254,   255,   255,   255,   256,   256,   257,   257,
   257,   258,   258,   258,   258
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     2,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     4,
     7,     8,    12,     6,     5,     7,     7,    12,     7,     9,
    17,     7,     8,     8,     7,    11,     5,     8,     9,     8,
    22,    20,     8,     8,     5,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     4,     4,     3,
     3,     2,     3,     6,     8,     1,     8,    12,     8,    12,
     8,    12,    11,    15,     1,     2,     9,     2,     6,     9,
     9,     8,     8,     8,     6,     4,     2,     0,     2,     4,
     4,     4,     4,     4,     0,     2,     4,     4,     4,     0,
     5,     0,     2,     4,     4,     4,     0,     5,     0,     2,
     4,     4,     4,     0,     5,     0,     2,     4,     4,     4,
     0,     5,     0,     2,     4,     4,     4,     0,     5,     0,
     2,     4,     8,     4,     9,     7,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     2,     2,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     1,     1,     1,     3,     6,    11,     9,     7,     7,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     0,     1,
     3,     1,     1,     3,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   176,     0,     0,     0,     0,    52,
    53,    54,    55,    56,    57,    58,    62,    64,    63,    59,
    60,    61,   281,   283,   282,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   252,
    12,     0,    13,    14,    16,    15,    17,   290,   290,     0,
    66,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   299,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   166,     0,   299,   166,   197,
     0,   299,   299,     0,     0,     0,   198,     0,   172,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   260,   259,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   300,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   166,   166,     0,     0,     0,
     0,     0,   170,     0,     0,     0,    69,     0,     0,     0,
     0,     0,     0,     0,     0,   173,   171,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   253,   255,   254,   256,   257,   258,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   292,     0,     0,
     0,     0,   130,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   302,   303,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   165,     0,   164,   163,     0,     0,     0,
     0,     0,   168,   167,   196,     0,   169,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    65,   199,     0,     0,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,     0,   272,   273,   274,   275,   276,
   277,     0,     0,     0,   255,   254,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   291,     0,
    19,     0,     0,   135,   299,   299,     0,   299,   147,     0,
   155,   299,   299,     0,     0,   301,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   159,   161,     0,     0,     0,     0,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,     0,     0,   299,     0,     0,
   299,   205,   212,   219,   226,   233,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   299,   299,     0,     0,     0,     0,   299,   299,
     0,     0,     0,     0,     0,   299,     0,   299,     0,     0,
     0,     0,     0,   293,     0,   290,     0,     0,     0,   299,
     0,   299,     0,     0,     0,   284,   304,   305,   134,     0,
   299,   299,   299,   189,     0,   299,   299,   299,   299,   299,
   299,   299,     0,     0,     0,     0,     0,     0,     0,   195,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    67,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,   174,     0,     0,   271,   278,
   279,   280,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   247,   248,   249,   250,
   251,     0,     0,     0,     0,     0,     0,     0,    18,     0,
   131,   139,     0,   142,     0,   136,     0,   137,   157,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   166,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   145,     0,
   299,   299,     0,   299,     0,   210,   200,   206,     0,   217,
   201,   213,     0,   224,   202,   220,     0,   231,   203,   227,
     0,   238,   204,   234,     0,   299,     0,     0,     0,   299,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,   290,     0,   144,
   154,     0,     0,   193,   148,   150,     0,     0,   192,   194,
   156,   132,   143,   153,   158,     0,   289,     0,   288,     0,
     0,   177,     0,   179,     0,   181,     0,    68,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   294,     0,   297,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
     0,     0,     0,     0,    21,     0,    30,     0,    34,     0,
    28,     0,     0,    33,     0,    38,    36,     0,     0,     0,
     0,     0,     0,    45,     0,     0,     0,     0,     0,    50,
     0,     0,   140,   285,     0,   191,   190,   166,     0,   162,
     0,     0,     0,     0,     0,     0,   185,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   299,   296,   295,   299,     0,     0,     0,     0,
     0,   240,     0,     0,     0,   240,     0,     0,     0,   240,
     0,     0,     0,   240,     0,     0,     0,   240,   149,     0,
     0,   294,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   287,     0,     0,     0,   188,
   299,     0,   186,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   298,     0,
     0,   207,     0,   208,   209,     0,     0,   240,   214,   215,
   216,     0,   221,   222,   223,     0,   228,   229,   230,     0,
   235,   236,   237,     0,     0,    35,     0,     0,     0,     0,
    25,     0,    31,     0,    37,    26,    39,     0,    42,     0,
    46,    47,     0,     0,    49,     0,     0,     0,   160,     0,
     0,     0,     0,     0,   183,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
   299,   146,     0,   211,   241,   218,   225,   232,   239,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   286,   178,   180,   182,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    84,    88,
    92,   133,   138,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    29,    32,    40,     0,    41,    48,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   299,     0,   242,   283,
     0,   244,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   299,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    27,     0,     0,     0,   184,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
    86,     0,    90,     0,     0,     0,     0,     0,     0,   299,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    44,    20,   141,   187,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    83,
    85,    87,    89,    91,    93,     0,     0,   243,     0,     0,
     0,   299,     0,     0,     0,     0,     0,     0,    96,   100,
   104,     0,     0,     0,   246,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     5,   299,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   152,   245,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    94,     0,    98,     0,   102,     0,
   299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   151,     0,    22,     0,     0,     0,
     0,     0,     0,    95,    97,    99,   101,   103,   105,   299,
     0,     0,     0,   108,   112,   116,     0,     0,     0,     0,
     0,     0,     0,   299,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   106,     0,   110,     0,   114,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   107,   109,   111,   113,   115,   117,
     0,   120,   124,   128,    23,     0,     0,     0,     0,     0,
     0,     0,   118,     0,   122,     0,   126,     0,     0,     0,
     0,     0,     0,   119,   121,   123,   125,   127,   129,     0,
     0,     0
};

static const short yydefgoto[] = {  1420,
     4,     5,    18,    19,    20,    21,     6,    60,    61,   389,
  1188,   514,  1134,  1190,   515,  1135,  1192,   516,  1136,  1304,
   517,  1275,  1306,   518,  1276,  1308,   519,  1277,  1365,   520,
  1351,  1367,   521,  1352,  1369,   522,  1353,  1402,   523,  1396,
  1404,   524,  1397,  1406,   525,  1398,    62,   384,   374,   375,
   376,   377,    66,    67,    68,    69,    70,   896,   897,    71,
    72,   274,   402,   631,   738,   840,   632,   742,   842,   633,
   746,   844,   634,   750,   846,   635,   754,   848,   997,   998,
  1108,   672,   239,   100,   356,   140,   223,   339,   733,   834,
   835,   357
};

static const short yypact[] = {   447,
-32768,-32768,  -135,-32768,   455,   959,  1490,    28,    65,    30,
    71,    75,    90,    96,   -38,   -34,   -22,-32768,-32768,-32768,
-32768,   140,   141,   -57,    -5,    -4,   -35,   -42,    70,    92,
   238,   112,   228,   243,   257,    46,   286,   -20,   160,   -36,
   -36,   162,    41,   173,   281,   306,   186,   342,   349,   100,
   205,   -30,   206,   229,-32768,   376,   383,   387,   359,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   245,   255,   262,   264,   267,
   268,   269,   274,   275,   284,   291,   295,   296,   299,   301,
   315,   316,   317,   343,   348,  1490,  1490,  1490,  1463,-32768,
-32768,  1574,-32768,-32768,-32768,-32768,-32768,   355,   355,   392,
-32768,  1490,  1490,  1490,  1490,  1490,   356,  1490,  1490,   360,
  1490,  1490,  1490,  1415,  1490,   303,   363,   365,  1415,   346,
   371,   366,   378,   379,   382,   385,   -36,  1490,  1490,   373,
   386,   -36,   389,   390,   391,-32768,   429,  1415,-32768,-32768,
   -58,  1415,  1415,  1490,   -75,  1490,-32768,  1490,-32768,   510,
   511,   399,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,   403,   403,   469,  1490,  1490,  1490,  1490,  1490,
  1463,   419,   426,   431,   434,   435,   436,   437,   441,   442,
   443,   444,   445,   446,   466,   479,   480,   506,   507,   518,
   520,   526,   528,   529,   532,   537,   538,   543,   546,   551,
   555,   541,   427,   558,   468,   121,   828,   621,  1204,  1308,
  1490,  1397,   641,  1490,   703,  1408,  1418,  1490,   509,   660,
  1449,  1490,  1490,  1490,   691,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,   556,   907,   942,   195,   195,   560,  1490,  1490,
  1490,   638,-32768,    18,  1259,   -36,-32768,   719,   720,  1477,
   647,  1490,  1492,   -25,   428,-32768,-32768,  1490,  1502,  1562,
  1572,  1582,  1592,  1602,  1612,  1622,  1632,  1642,  1188,  1652,
  1662,  1672,  1682,  1692,  1702,  2072,  2081,  2090,  1490,  1490,
-32768,   -69,   388,   403,   403,   403,   554,   726,   727,   729,
   730,   733,   735,   736,   737,   744,   749,   750,   756,   759,
   761,   762,   774,   779,   782,   784,   785,   791,   792,   799,
   416,   800,   801,   802,   803,   806,   805,-32768,   -73,   822,
   820,   823,-32768,   804,   827,   835,   839,  1712,   841,   829,
  1722,   844,   845,   851,   224,-32768,   -24,  1490,   852,   783,
  1732,  1742,  1490,   790,   980,  1752,  1762,  1772,  1782,  1792,
   -36,  1490,  1490,-32768,   667,  1554,-32768,   699,  1490,  2099,
  2108,  2117,-32768,-32768,-32768,  1490,-32768,   705,   821,   717,
   718,   874,   741,  1802,   893,   740,   745,   778,   787,   788,
-32768,-32768,  1490,  1812,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1490,-32768,-32768,-32768,-32768,-32768,
-32768,  1490,  1490,  1490,   -60,   -60,   765,   743,   746,   794,
   796,   797,   798,   807,   825,   838,   847,   848,   850,   857,
   863,   865,   866,   867,   869,   871,   873,   881,   883,   884,
   888,   892,   894,   898,   920,   921,   922,   945,-32768,   826,
-32768,   923,   -36,-32768,  1415,  1415,   954,  1415,-32768,   955,
-32768,  1415,  1415,    36,  1490,-32768,   128,   880,   957,   958,
  1045,   104,  1085,  1090,  1096,  1100,  1102,  1128,  1129,   949,
  2126,  2135,-32768,-32768,  1013,   -36,   -36,   -36,   184,-32768,
   981,   982,   983,   985,   986,   987,  1000,  1010,  1011,  1018,
  1021,  1022,  1132,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1490,  1490,  1415,  1490,  1152,
  1415,-32768,-32768,-32768,-32768,-32768,   540,  1171,  1822,  1832,
  1842,  1852,  1039,   984,  1490,  1490,   -36,  1180,  1182,  1033,
  1186,  1187,  1415,  1415,  1189,   -36,  1190,  1191,  1415,  1415,
  1192,  1193,  1194,  1205,  1207,  1415,   259,  1415,  1221,  1223,
  1224,  1228,  1233,-32768,  1231,   355,  1235,     1,  1238,  1415,
  1239,  1415,  1248,  1249,  1490,   509,   224,-32768,-32768,  1490,
  1415,  1415,  1415,-32768,   149,  1415,  1415,  1415,  1415,  1415,
  1415,  1415,  1490,  1490,  1490,  1066,   -19,   -17,    63,-32768,
  1001,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,  1490,-32768,  2144,  2153,  1250,  1862,    -6,  1175,
    14,    15,    16,    29,    37,-32768,  1490,  1490,-32768,-32768,
-32768,-32768,  1490,  1108,  2162,  2171,  1110,  1109,  1113,  1116,
  1126,  1117,  1127,  1138,  1140,  1142,  1146,  1153,  1155,  1158,
  1163,  1166,  1168,  1169,  1174,  1170,-32768,-32768,-32768,-32768,
-32768,  1184,  1185,  1195,  1200,  1203,  1209,  1212,-32768,  1218,
-32768,-32768,   -36,-32768,  1254,-32768,  1255,-32768,-32768,   287,
  2180,  1266,  1282,  1320,  1490,  1490,  1340,  1357,  1372,  1379,
  1381,  1382,  1383,  1020,  1872,   571,   195,   -36,  1384,   -36,
  1389,   -36,    24,  1390,  2189,  2198,  2207,  2216,  2225,  2234,
  2243,  2252,  2261,  2270,  2279,  2288,  1490,  1490,-32768,  1392,
  1415,  1415,  1314,  1415,  1393,-32768,-32768,-32768,  1395,-32768,
-32768,-32768,  1399,-32768,-32768,-32768,  1400,-32768,-32768,-32768,
  1406,-32768,-32768,-32768,  1882,   192,  1463,  1401,  1490,  1415,
  1410,  1411,  1416,  1264,  1443,   259,  1444,  1454,  1490,  1458,
  1466,  1464,  1489,  1493,   259,  1490,  1490,  1490,  1415,  1491,
  1495,   259,  1490,  1519,  1521,  1541,  1490,   355,  1546,-32768,
-32768,  1490,  1490,-32768,-32768,-32768,   217,   232,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1364,-32768,  1490,-32768,  1394,
  1396,-32768,  1404,-32768,  1405,-32768,   -48,-32768,  1490,  1490,
  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  2297,  2306,    -6,    74,-32768,    67,  1413,  1478,   285,  1419,
   467,  1420,   630,  1422,   904,  1431,  1101,  1433,-32768,  1571,
  1463,  1437,  2315,  1445,-32768,  1446,-32768,  1451,-32768,  1448,
-32768,  1453,  1892,-32768,  1460,-32768,-32768,  1462,  1467,  1902,
  2324,  1912,  1465,-32768,  1475,  1476,  2333,  1479,  1480,-32768,
  2342,  1488,-32768,   509,  2351,-32768,-32768,   195,   594,-32768,
  1490,  1490,  1490,  1573,  1452,   -33,-32768,  2360,  2369,  2378,
  2387,  2396,  2405,  2414,  2423,  2432,  2441,  2450,  2459,  1490,
  1490,  1540,  1415,-32768,-32768,  1415,  1490,  1620,  1490,   253,
  1633,  1646,  1645,   277,  1651,  1646,  1654,   309,  1655,  1646,
  1657,   351,  1658,  1646,  1659,   358,  1660,  1646,-32768,   174,
  1661,    -6,   259,  1670,  1490,  1668,   259,  1671,  1673,  1683,
  1684,  1685,  1490,  1686,  1415,  1688,  1689,  1490,  1703,  1711,
  1490,  1653,  1713,  1526,  1490,-32768,  1061,  1068,  1081,-32768,
  1415,  1714,-32768,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,  1490,  1490,  1490,  1112,  1167,  1560,-32768,  1568,
   374,-32768,   723,-32768,-32768,  1721,  1569,  1646,-32768,-32768,
-32768,  1575,-32768,-32768,-32768,  1576,-32768,-32768,-32768,  1578,
-32768,-32768,-32768,  1579,  1490,-32768,  1588,  1589,  1591,  2468,
-32768,  1570,-32768,  1597,-32768,-32768,-32768,  1922,-32768,  1599,
-32768,-32768,  1932,  1600,-32768,  1942,  1608,  1609,-32768,  1222,
  1745,  1755,    31,  1611,-32768,  2477,  2486,  2495,  2504,  2513,
  2522,  2531,  2540,  2549,  1952,  1962,  1972,  1765,  1771,  1415,
  1415,-32768,    25,-32768,-32768,-32768,-32768,-32768,-32768,  1463,
   259,   259,   259,   259,  1774,  1775,  1781,   259,  1784,  1785,
  1791,  1773,  1783,-32768,-32768,-32768,-32768,   -48,  1415,  1490,
  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,-32768,-32768,
-32768,-32768,-32768,  1639,  1638,  1795,  1517,  1801,  1463,  1649,
  1669,  1650,  1667,-32768,-32768,-32768,  1678,-32768,-32768,-32768,
  1679,  1681,   -21,  1691,  2558,  2567,  2576,  2585,  2594,  2603,
  2612,  2621,  2630,  1656,  1680,  1687,  1415,  1731,-32768,  1698,
  2639,-32768,   402,   259,   259,  1814,  1815,   259,  1813,  1825,
  1841,  1415,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,  1490,  1490,  1696,  1690,  1490,  1490,  1490,  1701,
  1708,-32768,-32768,  1710,  1717,  1699,-32768,  1706,  2648,  2657,
  2666,  2675,  2684,  2693,  2702,  2711,  2720,   101,   509,   105,
   509,   107,   509,  1751,  1490,  1229,  2729,  1463,   259,  1415,
  1865,  1874,  1875,  1881,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,  1490,  1490,  1884,  1490,  1885,  1490,  1891,  1727,
  2738,  1894,  1490,  1463,  1719,  1739,-32768,-32768,-32768,-32768,
  2747,  2756,  2765,  2774,  2783,  2792,  1982,  1992,  2002,   509,
-32768,   509,-32768,   509,-32768,  1490,  1490,-32768,   606,   882,
   259,  1415,  1490,  1490,  1490,  1490,  1490,  1490,-32768,-32768,
-32768,  2801,  1258,  1490,-32768,  1753,  1748,  1749,  2810,  2819,
  2828,  2837,  2846,  2855,  1750,  1756,  1757,  1490,  1904,  1294,
-32768,  1415,   259,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
  1490,  1490,  1301,-32768,-32768,  1761,  1767,  2864,  2873,  2882,
  2891,  2900,  2909,   125,   509,   170,   509,   171,   509,  1915,
  1415,  1924,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1925,
  1490,  1931,  1490,  1934,-32768,  1769,-32768,  2918,  2927,  2936,
  2012,  2022,  2032,   509,-32768,   509,-32768,   509,-32768,  1415,
  1490,  1490,  1490,-32768,-32768,-32768,  1779,  2945,  2954,  2963,
  1780,  1786,  1787,  1415,  1490,  1490,  1490,  1490,  1490,  1490,
  1798,  2972,  2981,  2990,   180,   509,   193,   509,   239,   509,
   259,  1490,  1490,  1490,  1490,  1944,  1490,  1945,  1490,  1954,
  1807,  2042,  2052,  2062,   509,-32768,   509,-32768,   509,-32768,
  1955,-32768,-32768,-32768,-32768,  1797,  1809,  1810,  1490,  1490,
  1490,   240,   509,   250,   509,   252,   509,  1490,  1971,  1490,
  1974,  1490,  1975,   509,-32768,   509,-32768,   509,-32768,  1968,
  1978,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1487,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1984,  1985,  -256,
   272,  1991,-32768,-32768,-32768,-32768,-32768,   900,  -893,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -903,-32768,
-32768,  -754,    -7,-32768,  1523,     2,  -107,-32768,  -825,  1268,
   271,-32768
};


#define	YYLAST		3149


static const short yytable[] = {    99,
   378,   224,   973,   155,   266,   271,   682,   912,     7,   133,
   894,   860,   134,   135,   120,   136,   895,   735,   739,   743,
   869,   117,  1002,   385,   386,   894,  1006,   876,  1106,   816,
  1010,   895,   747,   101,  1014,   103,  1087,   894,    73,    74,
   751,   683,   141,   895,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,   396,   397,   398,   399,   400,
   143,   102,  -260,   144,   145,  -260,   104,  -260,   129,   130,
   105,   131,   272,  -260,  -260,   458,   459,   190,   183,   184,
   185,   191,   188,   189,  1065,   106,   190,   736,   740,   744,
   113,   107,   267,   114,   226,   227,   228,   229,   230,   594,
   232,   233,   748,   235,   236,   237,  1017,   241,   121,   108,
   752,   138,   118,   109,   139,   119,   343,   156,   972,   152,
   254,   255,   153,   589,   475,   110,   401,   476,   253,   708,
  1151,   710,   709,   258,   711,   111,   270,   112,   273,   595,
   275,   731,   115,   116,   732,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   737,   741,   745,   302,   303,
   304,   305,   306,   307,   817,  1107,    96,    97,  1018,   610,
   749,  1088,  1022,    98,    73,    74,   695,   696,   753,   585,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,   712,   886,   348,   713,   913,   351,   122,   915,   973,
   355,   474,   913,   914,   360,   361,   362,   887,   364,   365,
   366,   367,   368,   369,   370,    39,    40,    41,    42,   123,
    44,   380,   381,   382,   299,   300,   188,   189,   994,  1214,
   190,   126,  1215,  1216,   394,  1218,  1217,   388,  1219,   125,
   404,   299,   300,   188,   189,   124,   127,   190,   299,   300,
   188,   189,  1000,  1319,   190,   147,  1320,    73,    74,   918,
   128,   425,   426,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,  1004,  1015,  1110,  1111,  1112,  1113,
   137,   132,   142,  1117,   299,   300,   188,   189,  1321,  1323,
   190,  1322,  1324,   146,   299,   300,   188,   189,  1375,   148,
   190,  1376,   186,   187,   188,   189,   149,   150,   190,    98,
   477,  1377,   238,   151,  1378,   482,  1008,   667,   668,   669,
   670,   671,   154,  1012,   491,   492,   157,   299,   300,   188,
   189,   495,   490,   190,   299,   300,   188,   189,   499,  1062,
   190,   159,   299,   300,   188,   189,   158,   160,   190,  1170,
  1171,   161,   162,  1174,   240,   537,   225,  1379,  1408,   245,
  1380,  1409,   163,   299,   300,   188,   189,   539,  1410,   190,
  1412,  1411,   164,  1413,   540,   541,   542,   262,   264,   165,
   265,   166,   268,   269,   167,   168,   169,   299,   300,   188,
   189,   170,   171,   190,   263,    96,    97,   299,   300,   188,
   189,   172,   919,   190,  1225,   139,    -7,    -7,   173,    -7,
   810,   792,   174,   175,    -1,     8,   176,     9,   177,   299,
   300,   188,   189,   242,   577,   190,   586,   587,   680,    73,
    74,   923,   178,   179,   180,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,  1267,   607,   608,   609,
   181,   299,   300,   188,   189,   182,   246,   190,   299,   300,
   188,   189,   222,   231,   190,   276,   277,   234,   625,   626,
   243,   628,   244,   248,   299,   300,   188,   189,  1297,  -259,
   190,   247,  -259,   256,  -259,   249,   250,   645,   646,   251,
  -259,  -259,   252,  1169,   190,   338,   257,   451,   647,   259,
   260,   261,   299,   300,   188,   189,   278,   656,   190,   190,
    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,    10,    11,
    12,    13,    14,    15,    16,    17,   308,   690,   299,   300,
   188,   189,   691,   309,   190,   340,     1,     2,   310,     3,
   403,   311,   312,   313,   314,   704,   705,   706,   315,   316,
   317,   318,   319,   320,   715,   716,   717,   718,   719,   720,
   721,   722,   723,   724,   725,   726,  1381,    96,    97,   299,
   300,   188,   189,   321,   919,   190,   342,   139,   301,   755,
   756,   964,    73,    74,   927,   757,   322,   323,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,   299,
   300,   188,   189,   324,   325,   190,   358,    24,    25,    26,
    27,    28,    29,    30,    31,   326,    32,   327,    34,    35,
   882,    37,    38,   328,   789,   329,   330,   797,   798,   331,
   299,   300,   188,   189,   332,   333,   190,   363,   427,   636,
   334,    50,   637,   335,   299,   300,   188,   189,   336,   811,
   190,   813,   337,   815,   371,    51,    52,   341,   379,   831,
   832,   299,   300,   188,   189,   390,   391,   190,   393,   808,
   428,   429,   809,   430,   431,   578,   579,   432,   581,   433,
   434,   435,   583,   584,   299,   300,   188,   189,   436,   851,
   190,   853,   965,   437,   438,   966,   299,   300,   188,   189,
   439,   863,   190,   440,  1264,   441,   442,  1265,   870,   871,
   872,   299,   300,   188,   189,   877,    59,   190,   443,   881,
    96,    97,   345,   444,   884,   885,   445,   919,   446,   447,
   139,   299,   300,   188,   189,   448,   449,   190,   627,   383,
   889,   630,   350,   450,   452,   453,   454,   455,   456,   457,
   463,   898,   899,   900,   901,   902,   903,   904,   905,   906,
   907,   908,   909,   653,   654,   461,   460,   462,   493,   659,
   660,   920,   464,   924,   469,   928,   666,   932,   673,   936,
   921,   465,   925,   940,   929,   466,   933,   468,   937,   471,
   685,   472,   687,   299,   300,   188,   189,   473,   478,   190,
   494,   692,   693,   694,   352,   500,   697,   698,   699,   700,
   701,   702,   703,   299,   300,   188,   189,   526,   527,   190,
   528,   372,   301,   967,   968,   969,   501,   502,   503,   504,
   505,   506,   507,   508,   509,   510,   511,   512,   529,   531,
   532,   544,   986,   987,   545,   533,    73,    74,   931,   991,
   543,   993,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,   299,   300,   188,   189,  1020,   534,   190,
   299,   300,   188,   189,   479,  1028,   190,   535,   536,   574,
  1033,   483,   546,  1036,   547,   548,   549,  1040,    -3,    22,
   580,   582,    23,   591,   592,   550,  1046,  1047,  1048,  1049,
  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,   299,   300,
   188,   189,   513,   551,   190,   575,   644,   344,    24,    25,
    26,    27,    28,    29,    30,    31,   552,    32,    33,    34,
    35,    36,    37,    38,   838,   553,   554,  1070,   555,    39,
    40,    41,    42,    43,    44,   556,    45,    46,    47,    48,
    49,   557,    50,   558,   559,   560,   850,   561,  1266,   562,
   854,   563,   299,   300,   188,   189,    51,    52,   190,   564,
   590,   565,   566,    53,    54,    55,   567,    56,    57,   873,
   568,   593,   569,    58,    96,    97,   570,   299,   300,   188,
   189,   919,  1109,   190,   139,   372,   501,   502,   503,   504,
   505,   506,   507,   508,   509,   510,   511,   512,   571,   572,
   573,   576,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,
  1133,   596,   299,   300,   188,   189,   597,    59,   190,  1141,
   373,  1143,   598,    73,    74,   935,   599,   603,   600,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
   299,   300,   188,   189,   601,   602,   190,   624,   612,   613,
   614,   484,   615,   616,   617,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,  1187,  1189,  1191,  1193,   618,   629,  1196,
  1197,  1198,   714,   299,   300,   188,   189,   619,   620,   190,
   299,   300,   188,   189,   606,   621,   190,   638,   622,   623,
   643,   806,   648,   989,   649,   650,   990,  1221,   651,   652,
  1224,   655,   657,   658,   661,   662,   663,  1231,  1232,  1233,
  1234,  1235,  1236,  1237,  1238,  1239,  1240,   664,  1242,   665,
  1244,   299,   300,   188,   189,  1249,  1250,   190,   299,   300,
   188,   189,  1041,   674,   190,  1030,   707,   675,   676,  1042,
   677,   299,   300,   188,   189,   678,   679,   190,  1262,  1263,
   681,  1044,  1043,   684,   686,  1269,  1270,  1271,  1272,  1273,
  1274,    96,    97,   688,   689,   729,  1280,   734,   919,   790,
   791,   139,   299,   300,   188,   189,   758,   762,   190,   761,
  1293,   794,   763,  1058,   764,   766,  1298,  1299,  1300,  1301,
  1302,  1303,  1305,  1307,  1309,   765,   767,   795,    24,    25,
    26,    27,    28,    29,    30,    31,   768,    32,   769,    34,
    35,   770,    37,    38,   771,  1328,  1329,  1330,  1331,  1332,
  1333,  1334,   772,  1336,   773,  1338,   774,   299,   300,   188,
   189,   775,    50,   190,   776,   796,   777,   778,  1059,   780,
  1104,  1105,   779,  1348,  1349,  1350,    51,    52,   299,   300,
   188,   189,   781,   782,   190,   799,   415,  1362,  1363,  1364,
  1366,  1368,  1370,   783,   299,   300,   188,   189,   784,  1124,
   190,   785,   800,   346,  1382,  1383,  1384,  1385,   786,  1387,
   787,  1389,   299,   300,   188,   189,   788,   801,   190,   299,
   300,   188,   189,  1084,   802,   190,   803,   804,   805,   812,
  1222,  1403,  1405,  1407,   814,   818,   837,    59,   833,   839,
  1414,   841,  1416,   852,  1418,   843,   845,  1165,   299,   300,
   188,   189,   847,   856,   190,   855,   858,    73,    74,  1279,
   387,   857,  1178,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,   299,   300,   188,   189,   859,   861,
   190,   299,   300,   188,   189,  1295,   862,   190,   299,   300,
   188,   189,  1310,   864,   190,    73,    74,   347,   865,   866,
  1226,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    73,    74,   867,   868,   874,   875,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    73,
  1140,   878,  1268,   879,   888,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,   880,   299,   300,   188,
   189,   883,  1296,   190,   891,   890,   349,   917,   299,   300,
   188,   189,   892,   893,   190,    96,    97,   353,   299,   300,
   188,   189,    98,   916,   190,   238,   939,   354,   970,   922,
   926,  1326,   930,    24,    25,    26,    27,    28,    29,    30,
    31,   934,    32,   938,    34,    35,   941,    37,    38,   299,
   300,   188,   189,   943,   944,   190,   192,   946,   359,   945,
  1347,   947,   971,   186,   187,   188,   189,    50,   949,   190,
    98,   950,   988,   955,  1361,   992,   951,   299,   300,   188,
   189,    51,    52,   190,   956,   957,   392,   959,   995,   960,
    96,    97,   299,   300,   188,   189,   962,    98,   190,   996,
   999,   395,   299,   300,   188,   189,  1001,  1037,   190,  1003,
  1005,   405,  1007,  1009,  1011,  1013,  1016,    96,    97,   193,
   194,   195,  1019,  1021,    98,  1024,  1023,   196,   197,   198,
   199,   200,   201,   202,   203,   204,   205,  1039,  1025,  1026,
  1027,  1029,    59,  1031,  1032,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,  1034,   216,   217,   218,   219,
   220,   221,   299,   300,   188,   189,  1035,  1038,   190,  1045,
  1060,   406,   299,   300,   188,   189,  1061,  1063,   190,  1075,
  1064,   407,   299,   300,   188,   189,  1066,  1067,   190,  1068,
  1069,   408,   299,   300,   188,   189,  1071,  1072,   190,  1073,
  1085,   409,   299,   300,   188,   189,  1076,  1078,   190,  1080,
  1086,   410,   299,   300,   188,   189,  1082,  1083,   190,  1089,
  1102,   411,   299,   300,   188,   189,  1103,  1121,   190,  1114,
  1115,   412,   299,   300,   188,   189,  1116,  1122,   190,  1118,
  1119,   413,   299,   300,   188,   189,  1120,  1137,   190,  1138,
  1139,   414,   299,   300,   188,   189,  1142,  1144,   190,  1146,
  1166,   416,   299,   300,   188,   189,  1162,  1175,   190,  1172,
  1173,   417,   299,   300,   188,   189,  1147,  1145,   190,  1176,
  1220,   418,   299,   300,   188,   189,  1148,  1149,   190,  1150,
  1163,   419,   299,   300,   188,   189,  1177,  1164,   190,  1152,
  1195,   420,   299,   300,   188,   189,  1167,  1194,   190,  1199,
  1203,   421,   299,   300,   188,   189,  1200,  1204,   190,  1201,
  1227,   467,   299,   300,   188,   189,  1202,  1251,   190,  1228,
  1229,   470,   299,   300,   188,   189,  1230,  1246,   190,  1241,
  1243,   480,   299,   300,   188,   189,  1245,  1252,   190,  1248,
  1281,   481,   299,   300,   188,   189,  1282,  1283,   190,  1294,
  1290,   485,   299,   300,   188,   189,  1291,  1292,   190,  1311,
  1325,   486,   299,   300,   188,   189,  1312,  1340,   190,  1327,
  1335,   487,   299,   300,   188,   189,  1337,  1354,   190,  1339,
  1358,   488,   299,   300,   188,   189,  1359,  1360,   190,  1386,
  1388,   489,   299,   300,   188,   189,  1371,  1399,   190,  1390,
  1395,   530,   299,   300,   188,   189,  1391,  1421,   190,  1400,
  1401,   538,   299,   300,   188,   189,  1415,  1422,   190,  1417,
  1419,   639,   299,   300,   188,   189,   611,  1123,   190,    63,
    64,   640,   299,   300,   188,   189,    65,   588,   190,   836,
     0,   641,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   642,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   730,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   807,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   849,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   948,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   952,   299,   300,   188,   189,     0,     0,   190,     0,
     0,   954,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1077,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1079,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1081,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1099,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1100,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1101,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1259,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1260,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1261,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1344,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1345,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1346,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1392,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1393,   299,   300,   188,   189,     0,     0,   190,     0,
     0,  1394,   299,   300,   188,   189,     0,     0,   190,     0,
   422,   299,   300,   188,   189,     0,     0,   190,     0,   423,
   299,   300,   188,   189,     0,     0,   190,     0,   424,   299,
   300,   188,   189,     0,     0,   190,     0,   496,   299,   300,
   188,   189,     0,     0,   190,     0,   497,   299,   300,   188,
   189,     0,     0,   190,     0,   498,   299,   300,   188,   189,
     0,     0,   190,     0,   604,   299,   300,   188,   189,     0,
     0,   190,     0,   605,   299,   300,   188,   189,     0,     0,
   190,     0,   727,   299,   300,   188,   189,     0,     0,   190,
     0,   728,   299,   300,   188,   189,     0,     0,   190,     0,
   759,   299,   300,   188,   189,     0,     0,   190,     0,   760,
   299,   300,   188,   189,     0,     0,   190,     0,   793,   299,
   300,   188,   189,     0,     0,   190,     0,   819,   299,   300,
   188,   189,     0,     0,   190,     0,   820,   299,   300,   188,
   189,     0,     0,   190,     0,   821,   299,   300,   188,   189,
     0,     0,   190,     0,   822,   299,   300,   188,   189,     0,
     0,   190,     0,   823,   299,   300,   188,   189,     0,     0,
   190,     0,   824,   299,   300,   188,   189,     0,     0,   190,
     0,   825,   299,   300,   188,   189,     0,     0,   190,     0,
   826,   299,   300,   188,   189,     0,     0,   190,     0,   827,
   299,   300,   188,   189,     0,     0,   190,     0,   828,   299,
   300,   188,   189,     0,     0,   190,     0,   829,   299,   300,
   188,   189,     0,     0,   190,     0,   830,   299,   300,   188,
   189,     0,     0,   190,     0,   910,   299,   300,   188,   189,
     0,     0,   190,     0,   911,   299,   300,   188,   189,     0,
     0,   190,     0,   942,   299,   300,   188,   189,     0,     0,
   190,     0,   953,   299,   300,   188,   189,     0,     0,   190,
     0,   958,   299,   300,   188,   189,     0,     0,   190,     0,
   961,   299,   300,   188,   189,     0,     0,   190,     0,   963,
   299,   300,   188,   189,     0,     0,   190,     0,   974,   299,
   300,   188,   189,     0,     0,   190,     0,   975,   299,   300,
   188,   189,     0,     0,   190,     0,   976,   299,   300,   188,
   189,     0,     0,   190,     0,   977,   299,   300,   188,   189,
     0,     0,   190,     0,   978,   299,   300,   188,   189,     0,
     0,   190,     0,   979,   299,   300,   188,   189,     0,     0,
   190,     0,   980,   299,   300,   188,   189,     0,     0,   190,
     0,   981,   299,   300,   188,   189,     0,     0,   190,     0,
   982,   299,   300,   188,   189,     0,     0,   190,     0,   983,
   299,   300,   188,   189,     0,     0,   190,     0,   984,   299,
   300,   188,   189,     0,     0,   190,     0,   985,   299,   300,
   188,   189,     0,     0,   190,     0,  1074,   299,   300,   188,
   189,     0,     0,   190,     0,  1090,   299,   300,   188,   189,
     0,     0,   190,     0,  1091,   299,   300,   188,   189,     0,
     0,   190,     0,  1092,   299,   300,   188,   189,     0,     0,
   190,     0,  1093,   299,   300,   188,   189,     0,     0,   190,
     0,  1094,   299,   300,   188,   189,     0,     0,   190,     0,
  1095,   299,   300,   188,   189,     0,     0,   190,     0,  1096,
   299,   300,   188,   189,     0,     0,   190,     0,  1097,   299,
   300,   188,   189,     0,     0,   190,     0,  1098,   299,   300,
   188,   189,     0,     0,   190,     0,  1153,   299,   300,   188,
   189,     0,     0,   190,     0,  1154,   299,   300,   188,   189,
     0,     0,   190,     0,  1155,   299,   300,   188,   189,     0,
     0,   190,     0,  1156,   299,   300,   188,   189,     0,     0,
   190,     0,  1157,   299,   300,   188,   189,     0,     0,   190,
     0,  1158,   299,   300,   188,   189,     0,     0,   190,     0,
  1159,   299,   300,   188,   189,     0,     0,   190,     0,  1160,
   299,   300,   188,   189,     0,     0,   190,     0,  1161,   299,
   300,   188,   189,     0,     0,   190,     0,  1168,   299,   300,
   188,   189,     0,     0,   190,     0,  1205,   299,   300,   188,
   189,     0,     0,   190,     0,  1206,   299,   300,   188,   189,
     0,     0,   190,     0,  1207,   299,   300,   188,   189,     0,
     0,   190,     0,  1208,   299,   300,   188,   189,     0,     0,
   190,     0,  1209,   299,   300,   188,   189,     0,     0,   190,
     0,  1210,   299,   300,   188,   189,     0,     0,   190,     0,
  1211,   299,   300,   188,   189,     0,     0,   190,     0,  1212,
   299,   300,   188,   189,     0,     0,   190,     0,  1213,   299,
   300,   188,   189,     0,     0,   190,     0,  1223,   299,   300,
   188,   189,     0,     0,   190,     0,  1247,   299,   300,   188,
   189,     0,     0,   190,     0,  1253,   299,   300,   188,   189,
     0,     0,   190,     0,  1254,   299,   300,   188,   189,     0,
     0,   190,     0,  1255,   299,   300,   188,   189,     0,     0,
   190,     0,  1256,   299,   300,   188,   189,     0,     0,   190,
     0,  1257,   299,   300,   188,   189,     0,     0,   190,     0,
  1258,   299,   300,   188,   189,     0,     0,   190,     0,  1278,
   299,   300,   188,   189,     0,     0,   190,     0,  1284,   299,
   300,   188,   189,     0,     0,   190,     0,  1285,   299,   300,
   188,   189,     0,     0,   190,     0,  1286,   299,   300,   188,
   189,     0,     0,   190,     0,  1287,   299,   300,   188,   189,
     0,     0,   190,     0,  1288,   299,   300,   188,   189,     0,
     0,   190,     0,  1289,   299,   300,   188,   189,     0,     0,
   190,     0,  1313,   299,   300,   188,   189,     0,     0,   190,
     0,  1314,   299,   300,   188,   189,     0,     0,   190,     0,
  1315,   299,   300,   188,   189,     0,     0,   190,     0,  1316,
   299,   300,   188,   189,     0,     0,   190,     0,  1317,   299,
   300,   188,   189,     0,     0,   190,     0,  1318,   299,   300,
   188,   189,     0,     0,   190,     0,  1341,   299,   300,   188,
   189,     0,     0,   190,     0,  1342,   299,   300,   188,   189,
     0,     0,   190,     0,  1343,   299,   300,   188,   189,     0,
     0,   190,     0,  1355,   299,   300,   188,   189,     0,     0,
   190,     0,  1356,   299,   300,   188,   189,     0,     0,   190,
     0,  1357,   299,   300,   188,   189,     0,     0,   190,     0,
  1372,   299,   300,   188,   189,     0,     0,   190,     0,  1373,
   299,   300,   188,   189,     0,     0,   190,     0,  1374
};

static const short yycheck[] = {     7,
   257,   109,   896,    34,    63,    81,     6,   833,   144,    30,
    59,   766,    33,    34,    57,    36,    65,     4,     4,     4,
   775,    57,   926,     6,     7,    59,   930,   782,     4,     6,
   934,    65,     4,     6,   938,     6,     6,    59,     3,     4,
     4,    41,    41,    65,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    91,    92,    93,    94,    95,
    30,     7,   142,    33,    34,   145,     6,   147,    33,    34,
     6,    36,   158,   153,   154,   159,   160,   157,    96,    97,
    98,    99,   153,   154,   998,     6,   157,    84,    84,    84,
   158,     6,   161,   161,   112,   113,   114,   115,   116,     6,
   118,   119,    84,   121,   122,   123,   942,   125,   161,   158,
    84,   158,   158,   158,   161,   161,     6,   158,   162,    30,
   138,   139,    33,     6,   159,   158,   162,   162,   137,   159,
   162,   159,   162,   142,   162,     6,   154,     7,   156,    46,
   158,   158,   158,   158,   161,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   181,   182,   162,   162,   162,   186,   187,
   188,   189,   190,   191,   161,   161,   151,   152,   943,     6,
   162,   161,   947,   158,     3,     4,    48,    49,   162,   164,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   159,     6,   231,   162,   159,   234,   158,   162,  1123,
   238,     8,   159,   160,   242,   243,   244,     6,   246,   247,
   248,   249,   250,   251,   252,    51,    52,    53,    54,   158,
    56,   259,   260,   261,   151,   152,   153,   154,     6,   159,
   157,    34,   162,   159,   272,   159,   162,   266,   162,   158,
   278,   151,   152,   153,   154,    38,    34,   157,   151,   152,
   153,   154,     6,   159,   157,     5,   162,     3,     4,     5,
    34,   299,   300,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,     6,   142,  1071,  1072,  1073,  1074,
   161,    36,   161,  1078,   151,   152,   153,   154,   159,   159,
   157,   162,   162,   161,   151,   152,   153,   154,   159,    34,
   157,   162,   151,   152,   153,   154,   161,     6,   157,   158,
   358,   159,   161,     5,   162,   363,     6,    99,   100,   101,
   102,   103,   158,     6,   372,   373,   161,   151,   152,   153,
   154,   379,   371,   157,   151,   152,   153,   154,   386,     6,
   157,     6,   151,   152,   153,   154,   158,     5,   157,  1144,
  1145,     5,    34,  1148,   124,   403,     5,   159,   159,   129,
   162,   162,   158,   151,   152,   153,   154,   415,   159,   157,
   159,   162,   158,   162,   422,   423,   424,   146,   148,   158,
   149,   158,   152,   153,   158,   158,   158,   151,   152,   153,
   154,   158,   158,   157,     6,   151,   152,   151,   152,   153,
   154,   158,   158,   157,  1199,   161,     0,     1,   158,     3,
   707,   165,   158,   158,     0,     1,   158,     3,   158,   151,
   152,   153,   154,   161,   463,   157,   474,   475,   576,     3,
     4,     5,   158,   158,   158,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,  1251,   496,   497,   498,
   158,   151,   152,   153,   154,   158,   161,   157,   151,   152,
   153,   154,   158,   158,   157,     6,     6,   158,   526,   527,
   158,   529,   158,   158,   151,   152,   153,   154,  1283,   142,
   157,   161,   145,   161,   147,   158,   158,   545,   546,   158,
   153,   154,   158,   142,   157,     5,   161,   132,   547,   161,
   161,   161,   151,   152,   153,   154,   158,   556,   157,   157,
   114,   115,   116,   117,   118,   119,   120,   121,   114,   115,
   116,   117,   118,   119,   120,   121,   158,   585,   151,   152,
   153,   154,   590,   158,   157,   159,   140,   141,   158,   143,
   163,   158,   158,   158,   158,   603,   604,   605,   158,   158,
   158,   158,   158,   158,   612,   613,   614,   615,   616,   617,
   618,   619,   620,   621,   622,   623,  1371,   151,   152,   151,
   152,   153,   154,   158,   158,   157,   159,   161,   160,   637,
   638,   888,     3,     4,     5,   643,   158,   158,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,   151,
   152,   153,   154,   158,   158,   157,     7,    30,    31,    32,
    33,    34,    35,    36,    37,   158,    39,   158,    41,    42,
   788,    44,    45,   158,   683,   158,   158,   695,   696,   158,
   151,   152,   153,   154,   158,   158,   157,     7,   145,   160,
   158,    64,   163,   158,   151,   152,   153,   154,   158,   708,
   157,   710,   158,   712,   159,    78,    79,   160,   159,   727,
   728,   151,   152,   153,   154,     7,     7,   157,    82,   159,
     5,     5,   162,     5,     5,   465,   466,     5,   468,     5,
     5,     5,   472,   473,   151,   152,   153,   154,     5,   757,
   157,   759,   159,     5,     5,   162,   151,   152,   153,   154,
     5,   769,   157,     5,   159,     5,     5,   162,   776,   777,
   778,   151,   152,   153,   154,   783,   139,   157,     5,   787,
   151,   152,   162,     5,   792,   793,     5,   158,     5,     5,
   161,   151,   152,   153,   154,     5,     5,   157,   528,   162,
   808,   531,   162,     5,     5,     5,     5,     5,     3,     5,
     7,   819,   820,   821,   822,   823,   824,   825,   826,   827,
   828,   829,   830,   553,   554,     6,     5,     5,   162,   559,
   560,   839,     6,   841,     6,   843,   566,   845,   568,   847,
   839,     7,   841,   851,   843,     7,   845,     7,   847,     6,
   580,     7,   582,   151,   152,   153,   154,     7,     7,   157,
   162,   591,   592,   593,   162,   161,   596,   597,   598,   599,
   600,   601,   602,   151,   152,   153,   154,   161,   161,   157,
     7,   159,   160,   891,   892,   893,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   158,     7,
   161,   159,   910,   911,   159,   161,     3,     4,     5,   917,
   146,   919,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,   151,   152,   153,   154,   945,   161,   157,
   151,   152,   153,   154,   162,   953,   157,   161,   161,     5,
   958,   162,   159,   961,   159,   159,   159,   965,     0,     1,
     7,     7,     4,     7,     7,   159,   974,   975,   976,   977,
   978,   979,   980,   981,   982,   983,   984,   985,   151,   152,
   153,   154,   162,   159,   157,   160,     3,   160,    30,    31,
    32,    33,    34,    35,    36,    37,   159,    39,    40,    41,
    42,    43,    44,    45,   734,   159,   159,  1015,   159,    51,
    52,    53,    54,    55,    56,   159,    58,    59,    60,    61,
    62,   159,    64,   159,   159,   159,   756,   159,   147,   159,
   760,   159,   151,   152,   153,   154,    78,    79,   157,   159,
   161,   159,   159,    85,    86,    87,   159,    89,    90,   779,
   159,     7,   159,    95,   151,   152,   159,   151,   152,   153,
   154,   158,  1070,   157,   161,   159,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   159,   159,
   159,   159,  1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,
  1098,     7,   151,   152,   153,   154,     7,   139,   157,  1107,
   159,  1109,     7,     3,     4,     5,     7,   159,     7,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
   151,   152,   153,   154,     7,     7,   157,     6,   158,   158,
   158,   162,   158,   158,   158,  1153,  1154,  1155,  1156,  1157,
  1158,  1159,  1160,  1161,  1162,  1163,  1164,   158,     7,  1167,
  1168,  1169,   162,   151,   152,   153,   154,   158,   158,   157,
   151,   152,   153,   154,   162,   158,   157,     7,   158,   158,
   142,   162,     3,   913,     3,   153,   916,  1195,     3,     3,
  1198,     3,     3,     3,     3,     3,     3,  1205,  1206,  1207,
  1208,  1209,  1210,  1211,  1212,  1213,  1214,     3,  1216,     3,
  1218,   151,   152,   153,   154,  1223,  1224,   157,   151,   152,
   153,   154,   162,     3,   157,   955,   161,     5,     5,   162,
     3,   151,   152,   153,   154,     3,     6,   157,  1246,  1247,
     6,   971,   162,     6,     6,  1253,  1254,  1255,  1256,  1257,
  1258,   151,   152,     6,     6,     6,  1264,    83,   158,     6,
     6,   161,   151,   152,   153,   154,   159,   159,   157,   160,
  1278,     6,   160,   162,   159,   159,  1284,  1285,  1286,  1287,
  1288,  1289,  1290,  1291,  1292,   160,   160,     6,    30,    31,
    32,    33,    34,    35,    36,    37,   159,    39,   159,    41,
    42,   160,    44,    45,   159,  1313,  1314,  1315,  1316,  1317,
  1318,  1319,   160,  1321,   160,  1323,   159,   151,   152,   153,
   154,   159,    64,   157,   159,     6,   159,   159,   162,   160,
  1060,  1061,   159,  1341,  1342,  1343,    78,    79,   151,   152,
   153,   154,   159,   159,   157,     6,   159,  1355,  1356,  1357,
  1358,  1359,  1360,   159,   151,   152,   153,   154,   159,  1089,
   157,   159,     6,   160,  1372,  1373,  1374,  1375,   160,  1377,
   159,  1379,   151,   152,   153,   154,   159,     6,   157,   151,
   152,   153,   154,   162,     6,   157,     6,     6,     6,     6,
   162,  1399,  1400,  1401,     6,     6,    83,   139,     7,     7,
  1408,     7,  1410,     3,  1412,     7,     7,  1137,   151,   152,
   153,   154,     7,     3,   157,     6,   153,     3,     4,   162,
   162,     6,  1152,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   151,   152,   153,   154,     6,     6,
   157,   151,   152,   153,   154,   162,     3,   157,   151,   152,
   153,   154,   162,     6,   157,     3,     4,   160,     3,     6,
  1200,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,     3,     4,     6,     3,     6,     3,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,     3,
     4,     3,  1252,     3,   161,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,     6,   151,   152,   153,
   154,     6,  1282,   157,   159,   162,   160,    80,   151,   152,
   153,   154,   159,   159,   157,   151,   152,   160,   151,   152,
   153,   154,   158,   161,   157,   161,     6,   160,     6,   161,
   161,  1311,   161,    30,    31,    32,    33,    34,    35,    36,
    37,   161,    39,   161,    41,    42,   160,    44,    45,   151,
   152,   153,   154,   159,   159,   157,    33,   160,   160,   159,
  1340,   159,   161,   151,   152,   153,   154,    64,   159,   157,
   158,   160,    83,   159,  1354,     6,   160,   151,   152,   153,
   154,    78,    79,   157,   160,   160,   160,   159,     6,   160,
   151,   152,   151,   152,   153,   154,   159,   158,   157,     4,
     6,   160,   151,   152,   153,   154,     6,     5,   157,     6,
     6,   160,     6,     6,     6,     6,     6,   151,   152,    96,
    97,    98,     3,     6,   158,     3,     6,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   162,     6,     6,
     6,     6,   139,     6,     6,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,     3,   133,   134,   135,   136,
   137,   138,   151,   152,   153,   154,     6,     5,   157,     6,
   161,   160,   151,   152,   153,   154,   159,     7,   157,   160,
   162,   160,   151,   152,   153,   154,   162,   162,   157,   162,
   162,   160,   151,   152,   153,   154,   159,   159,   157,   159,
     6,   160,   151,   152,   153,   154,   160,   159,   157,   160,
     6,   160,   151,   152,   153,   154,   159,   159,   157,   159,
     6,   160,   151,   152,   153,   154,     6,     5,   157,     6,
     6,   160,   151,   152,   153,   154,     6,     5,   157,     6,
     6,   160,   151,   152,   153,   154,     6,   159,   157,   162,
     6,   160,   151,   152,   153,   154,     6,   159,   157,   160,
    80,   160,   151,   152,   153,   154,   161,     5,   157,     6,
     6,   160,   151,   152,   153,   154,   160,   159,   157,     5,
    80,   160,   151,   152,   153,   154,   159,   159,   157,   159,
   161,   160,   151,   152,   153,   154,     6,   161,   157,   159,
   161,   160,   151,   152,   153,   154,   159,   162,   157,   159,
   162,   160,   151,   152,   153,   154,   159,   162,   157,   160,
     6,   160,   151,   152,   153,   154,   160,   159,   157,     6,
     6,   160,   151,   152,   153,   154,     6,   161,   157,     6,
     6,   160,   151,   152,   153,   154,     6,   159,   157,     6,
   148,   160,   151,   152,   153,   154,   159,   159,   157,     6,
   161,   160,   151,   152,   153,   154,   161,   161,   157,   159,
     6,   160,   151,   152,   153,   154,   160,   159,   157,     6,
     6,   160,   151,   152,   153,   154,     6,   159,   157,     6,
   161,   160,   151,   152,   153,   154,   161,   161,   157,     6,
     6,   160,   151,   152,   153,   154,   159,   161,   157,     6,
     6,   160,   151,   152,   153,   154,   160,     0,   157,   161,
   161,   160,   151,   152,   153,   154,     6,     0,   157,     6,
     6,   160,   151,   152,   153,   154,   500,  1088,   157,     6,
     6,   160,   151,   152,   153,   154,     6,   475,   157,   732,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
    -1,   160,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,
   152,   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,
   153,   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,
   154,    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,
    -1,    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,
    -1,   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,
   157,    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,
    -1,   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,
   159,   151,   152,   153,   154,    -1,    -1,   157,    -1,   159,
   151,   152,   153,   154,    -1,    -1,   157,    -1,   159
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 125 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 139 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 146 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 166 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 171 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 176 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 187 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 190 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 194 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 200 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 206 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 213 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 219 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 223 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 227 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 234 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 238 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 243 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 247 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 251 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 255 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 259 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 263 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 267 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 271 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 277 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 280 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 283 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 287 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 291 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 295 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 299 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 304 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 311 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 314 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 318 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 321 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 324 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 334 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 337 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 343 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 344 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 345 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 346 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 347 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 348 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 349 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 350 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 351 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 352 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 353 "Gmsh.y"
{return 1;;
    break;}
case 64:
#line 355 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 356 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 357 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 366 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 68:
#line 370 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 69:
#line 377 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 82:
#line 396 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 398 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 403 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 408 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 415 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 417 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 422 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 427 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 434 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 436 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 441 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 446 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 453 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 455 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 461 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 467 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 474 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 476 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 482 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 488 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 495 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 497 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 503 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 509 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 516 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 518 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 525 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 534 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 541 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 543 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 550 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 559 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 566 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 568 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 575 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 584 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 591 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 593 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 601 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 610 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 617 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 619 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 627 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 636 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 643 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 645 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 653 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 662 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 675 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 131:
#line 692 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 132:
#line 699 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 133:
#line 705 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 134:
#line 724 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 135:
#line 735 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 136:
#line 743 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 137:
#line 749 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 138:
#line 755 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 139:
#line 774 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 140:
#line 780 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 141:
#line 797 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 142:
#line 803 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 143:
#line 809 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 144:
#line 815 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 145:
#line 821 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 146:
#line 827 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 147:
#line 846 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 148:
#line 858 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 149:
#line 864 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 150:
#line 883 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 151:
#line 906 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 152:
#line 914 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 153:
#line 918 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 924 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 155:
#line 930 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 156:
#line 942 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 157:
#line 948 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 954 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 967 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 160:
#line 972 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 161:
#line 977 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 162:
#line 982 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 163:
#line 989 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 164:
#line 990 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 165:
#line 991 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 166:
#line 996 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 167:
#line 1000 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 168:
#line 1012 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 169:
#line 1030 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 170:
#line 1045 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 171:
#line 1073 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 172:
#line 1103 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 173:
#line 1107 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 174:
#line 1121 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 175:
#line 1134 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 176:
#line 1147 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 177:
#line 1186 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 178:
#line 1191 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 179:
#line 1197 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 180:
#line 1201 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 181:
#line 1205 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 182:
#line 1209 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 183:
#line 1213 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 184:
#line 1218 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 185:
#line 1226 "Gmsh.y"
{
    ;
    break;}
case 186:
#line 1229 "Gmsh.y"
{
    ;
    break;}
case 187:
#line 1235 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 188:
#line 1252 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 189:
#line 1263 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 190:
#line 1280 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 191:
#line 1297 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 192:
#line 1314 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 193:
#line 1335 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 194:
#line 1355 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 195:
#line 1375 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 196:
#line 1392 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 197:
#line 1417 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 207:
#line 1446 "Gmsh.y"
{ 
      if(!Set_StringOption(yyvsp[-3].c, GeneralOptions_String, yyvsp[-1].c))
	vyyerror("Unknown General Option (String) '%s'", yyvsp[-3].c);
    ;
    break;}
case 208:
#line 1451 "Gmsh.y"
{ 
      if(!Set_NumberOption(yyvsp[-3].c, GeneralOptions_Number, yyvsp[-1].d))
	vyyerror("Unknown General Option (Number) '%s'", yyvsp[-3].c);
    ;
    break;}
case 209:
#line 1456 "Gmsh.y"
{ if(!Set_ArrayOption(yyvsp[-3].c, GeneralOptions_Array, yyvsp[-1].v)) 
	vyyerror("Unknown General Option (Array) '%s'", yyvsp[-3].c);
    ;
    break;}
case 210:
#line 1460 "Gmsh.y"
{ ColorField = GeneralOptions_Color; ;
    break;}
case 214:
#line 1471 "Gmsh.y"
{ 
      if(!Set_StringOption(yyvsp[-3].c, GeometryOptions_String, yyvsp[-1].c))
	vyyerror("Unknown Geometry Option (String) '%s'", yyvsp[-3].c);
    ;
    break;}
case 215:
#line 1476 "Gmsh.y"
{ 
      if(!Set_NumberOption(yyvsp[-3].c, GeometryOptions_Number, yyvsp[-1].d))
	vyyerror("Unknown Geometry Option (Number) '%s'", yyvsp[-3].c);
    ;
    break;}
case 216:
#line 1481 "Gmsh.y"
{
      if(!Set_ArrayOption(yyvsp[-3].c, GeometryOptions_Array, yyvsp[-1].v))
	vyyerror("Unknown Geometry Option (Array) '%s'", yyvsp[-3].c);
    ;
    break;}
case 217:
#line 1486 "Gmsh.y"
{ ColorField = GeometryOptions_Color; ;
    break;}
case 221:
#line 1497 "Gmsh.y"
{ 
      if(!Set_StringOption(yyvsp[-3].c, MeshOptions_String, yyvsp[-1].c))
	vyyerror("Unknown Mesh Option (String) '%s'", yyvsp[-3].c);
    ;
    break;}
case 222:
#line 1502 "Gmsh.y"
{
      if(!Set_NumberOption(yyvsp[-3].c, MeshOptions_Number, yyvsp[-1].d))
	vyyerror("Unknown Mesh Option (Number) '%s'", yyvsp[-3].c);
    ;
    break;}
case 223:
#line 1507 "Gmsh.y"
{
      if(!Set_ArrayOption(yyvsp[-3].c, MeshOptions_Array, yyvsp[-1].v))
	vyyerror("Unknown Mesh Option (Array) '%s'", yyvsp[-3].c);
    ;
    break;}
case 224:
#line 1512 "Gmsh.y"
{ ColorField = MeshOptions_Color; ;
    break;}
case 228:
#line 1523 "Gmsh.y"
{ 
      if(!Set_StringOption(yyvsp[-3].c, PostProcessingOptions_String, yyvsp[-1].c))
	vyyerror("Unknown PostProcessing Option (String) '%s'", yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1528 "Gmsh.y"
{ 
      if(!Set_NumberOption(yyvsp[-3].c, PostProcessingOptions_Number, yyvsp[-1].d)) 
	vyyerror("Unknown PostProcessing Option (Number) '%s'", yyvsp[-3].c);
    ;
    break;}
case 230:
#line 1533 "Gmsh.y"
{ 
      if(!Set_ArrayOption(yyvsp[-3].c, PostProcessingOptions_Array, yyvsp[-1].v))
	vyyerror("Unknown PostProcessing (Array) Option '%s'", yyvsp[-3].c);
    ;
    break;}
case 231:
#line 1538 "Gmsh.y"
{ ColorField = PostProcessingOptions_Color; ;
    break;}
case 235:
#line 1549 "Gmsh.y"
{
      if(!Set_StringOption(yyvsp[-3].c, PrintOptions_String, yyvsp[-1].c))
	vyyerror("Unknown Print Option (String) '%s'", yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1554 "Gmsh.y"
{
      if(!Set_NumberOption(yyvsp[-3].c, PrintOptions_Number, yyvsp[-1].d)) 
	vyyerror("Unknown Print Option (Number) '%s'", yyvsp[-3].c);
    ;
    break;}
case 237:
#line 1559 "Gmsh.y"
{
      if(!Set_ArrayOption(yyvsp[-3].c, PrintOptions_Array, yyvsp[-1].v))
	vyyerror("Unknown Print Option (Array) '%s'", yyvsp[-3].c);
    ;
    break;}
case 238:
#line 1564 "Gmsh.y"
{ ColorField = PrintOptions_Color; ;
    break;}
case 242:
#line 1575 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, -1, yyvsp[-1].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-1].c);
      if(!Set_ColorOption(yyvsp[-3].c, ColorField, i))
	vyyerror("Unknown Color Field '%s'", yyvsp[-3].c);
    ;
    break;}
case 243:
#line 1582 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, (int)yyvsp[-2].d, yyvsp[-4].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-4].c);
      if(!Set_ColorOption(yyvsp[-7].c, ColorField, i))
	 vyyerror("Unknown Color Field '%s'", yyvsp[-7].c);
    ;
    break;}
case 244:
#line 1589 "Gmsh.y"
{
      if(!Set_ColorOption(yyvsp[-3].c, ColorField,
			  PACK_COLOR((int)yyvsp[-1].v[0], (int)yyvsp[-1].v[1], (int)yyvsp[-1].v[2], (int)yyvsp[-1].v[3])))
	vyyerror("Unknown Color Field '%s'", yyvsp[-3].c);
    ;
    break;}
case 245:
#line 1598 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
    ;
    break;}
case 246:
#line 1605 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=255.;
    ;
    break;}
case 247:
#line 1619 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 248:
#line 1620 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 249:
#line 1621 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 250:
#line 1622 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 251:
#line 1623 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 252:
#line 1627 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 253:
#line 1628 "Gmsh.y"
{ yyval.d = yyvsp[-1].d; ;
    break;}
case 254:
#line 1629 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d; ;
    break;}
case 255:
#line 1630 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d; ;
    break;}
case 256:
#line 1631 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d; ;
    break;}
case 257:
#line 1632 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d; ;
    break;}
case 258:
#line 1633 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d); ;
    break;}
case 259:
#line 1634 "Gmsh.y"
{ yyval.d = - yyvsp[0].d; ;
    break;}
case 260:
#line 1635 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 261:
#line 1636 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 1637 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 1638 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 1639 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1640 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 1641 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1642 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 1643 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1644 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 1645 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 1646 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 272:
#line 1647 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 1648 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 1649 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 1650 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 1651 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 1652 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 1653 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 279:
#line 1654 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 1655 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 281:
#line 1659 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 282:
#line 1660 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 283:
#line 1662 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 284:
#line 1674 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 285:
#line 1680 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 286:
#line 1694 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-9].d;
      yyval.v[1]=yyvsp[-7].d;
      yyval.v[2]=yyvsp[-5].d;
      yyval.v[3]=yyvsp[-3].d;
      yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 287:
#line 1702 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
      yyval.v[4]=1.0;
    ;
    break;}
case 288:
#line 1710 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 289:
#line 1718 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 290:
#line 1729 "Gmsh.y"
{
    ;
    break;}
case 291:
#line 1732 "Gmsh.y"
{
    ;
    break;}
case 292:
#line 1738 "Gmsh.y"
{
    ;
    break;}
case 293:
#line 1741 "Gmsh.y"
{
    ;
    break;}
case 294:
#line 1747 "Gmsh.y"
{
    ;
    break;}
case 295:
#line 1750 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 296:
#line 1754 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 297:
#line 1761 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 298:
#line 1766 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 299:
#line 1773 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 1776 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 301:
#line 1782 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 302:
#line 1796 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 303:
#line 1801 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 304:
#line 1810 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 305:
#line 1814 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1824 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


