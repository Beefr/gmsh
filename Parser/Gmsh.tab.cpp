
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTriangulation	308
#define	tTransfinite	309
#define	tComplex	310
#define	tPhysical	311
#define	tUsing	312
#define	tBump	313
#define	tProgression	314
#define	tPlugin	315
#define	tDiscrete	316
#define	tRotate	317
#define	tTranslate	318
#define	tSymmetry	319
#define	tDilate	320
#define	tExtrude	321
#define	tDuplicata	322
#define	tLoop	323
#define	tRecombine	324
#define	tDelete	325
#define	tCoherence	326
#define	tIntersect	327
#define	tAttractor	328
#define	tLayers	329
#define	tAlias	330
#define	tAliasWithOptions	331
#define	tText2D	332
#define	tText3D	333
#define	tInterpolationScheme	334
#define	tTime	335
#define	tCombine	336
#define	tBSpline	337
#define	tBezier	338
#define	tNurbs	339
#define	tOrder	340
#define	tWith	341
#define	tBounds	342
#define	tKnots	343
#define	tColor	344
#define	tColorTable	345
#define	tFor	346
#define	tIn	347
#define	tEndFor	348
#define	tIf	349
#define	tEndIf	350
#define	tExit	351
#define	tReturn	352
#define	tCall	353
#define	tFunction	354
#define	tTrimmed	355
#define	tShow	356
#define	tHide	357
#define	tGetValue	358
#define	tGMSH_MAJOR_VERSION	359
#define	tGMSH_MINOR_VERSION	360
#define	tGMSH_PATCH_VERSION	361
#define	tB_SPLINE_SURFACE_WITH_KNOTS	362
#define	tB_SPLINE_CURVE_WITH_KNOTS	363
#define	tCARTESIAN_POINT	364
#define	tTRUE	365
#define	tFALSE	366
#define	tUNSPECIFIED	367
#define	tU	368
#define	tV	369
#define	tEDGE_CURVE	370
#define	tVERTEX_POINT	371
#define	tORIENTED_EDGE	372
#define	tPLANE	373
#define	tFACE_OUTER_BOUND	374
#define	tEDGE_LOOP	375
#define	tADVANCED_FACE	376
#define	tVECTOR	377
#define	tDIRECTION	378
#define	tAXIS2_PLACEMENT_3D	379
#define	tISO	380
#define	tENDISO	381
#define	tENDSEC	382
#define	tDATA	383
#define	tHEADER	384
#define	tFILE_DESCRIPTION	385
#define	tFILE_SCHEMA	386
#define	tFILE_NAME	387
#define	tMANIFOLD_SOLID_BREP	388
#define	tCLOSED_SHELL	389
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	390
#define	tFACE_BOUND	391
#define	tCYLINDRICAL_SURFACE	392
#define	tCONICAL_SURFACE	393
#define	tCIRCLE	394
#define	tTRIMMED_CURVE	395
#define	tGEOMETRIC_SET	396
#define	tCOMPOSITE_CURVE_SEGMENT	397
#define	tCONTINUOUS	398
#define	tCOMPOSITE_CURVE	399
#define	tTOROIDAL_SURFACE	400
#define	tPRODUCT_DEFINITION	401
#define	tPRODUCT_DEFINITION_SHAPE	402
#define	tSHAPE_DEFINITION_REPRESENTATION	403
#define	tELLIPSE	404
#define	tSolid	405
#define	tEndSolid	406
#define	tVertex	407
#define	tFacet	408
#define	tNormal	409
#define	tOuter	410
#define	tLoopSTL	411
#define	tEndLoop	412
#define	tEndFacet	413
#define	tAFFECTPLUS	414
#define	tAFFECTMINUS	415
#define	tAFFECTTIMES	416
#define	tAFFECTDIVIDE	417
#define	tOR	418
#define	tAND	419
#define	tEQUAL	420
#define	tNOTEQUAL	421
#define	tAPPROXEQUAL	422
#define	tLESSOREQUAL	423
#define	tGREATEROREQUAL	424
#define	tCROSSPRODUCT	425
#define	tPLUSPLUS	426
#define	tMINUSMINUS	427
#define	UNARYPREC	428

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.235 2005-03-26 04:09:16 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"
#include "GmshVersion.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 79 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1591
#define	YYFLAG		-32768
#define	YYNTBASE	194

#define YYTRANSLATE(x) ((unsigned)(x) <= 428 ? yytranslate[x] : 265)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   190,     2,   178,     2,     2,   185,
   186,   176,   174,   191,   175,   189,   177,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   170,
     2,   172,   164,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   187,     2,   188,   184,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   192,     2,   193,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   165,   166,   167,
   168,   169,   171,   173,   179,   181,   182,   183
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   581,   585,   587,   591,   592,   593,   604,   606,   610,
   611,   625,   627,   631,   632,   648,   657,   658,   665,   667,
   669,   671,   673,   675,   677,   679,   684,   692,   702,   709,
   713,   720,   727,   737,   744,   754,   760,   769,   778,   790,
   797,   807,   817,   827,   835,   844,   857,   864,   872,   880,
   888,   898,   906,   916,   934,   942,   950,   962,   974,   986,
   995,  1008,  1017,  1026,  1035,  1048,  1063,  1078,  1093,  1116,
  1137,  1146,  1155,  1164,  1172,  1181,  1187,  1199,  1205,  1215,
  1217,  1219,  1221,  1222,  1225,  1232,  1239,  1246,  1253,  1258,
  1265,  1272,  1279,  1284,  1291,  1295,  1300,  1306,  1310,  1314,
  1319,  1324,  1328,  1336,  1340,  1348,  1352,  1355,  1358,  1374,
  1377,  1384,  1393,  1402,  1413,  1415,  1418,  1420,  1424,  1429,
  1431,  1440,  1453,  1468,  1469,  1482,  1483,  1500,  1501,  1520,
  1529,  1542,  1557,  1558,  1571,  1572,  1589,  1590,  1609,  1618,
  1631,  1646,  1647,  1660,  1661,  1678,  1679,  1698,  1700,  1703,
  1713,  1721,  1724,  1731,  1741,  1751,  1760,  1769,  1778,  1785,
  1790,  1793,  1796,  1798,  1800,  1802,  1804,  1806,  1808,  1812,
  1815,  1818,  1821,  1825,  1829,  1833,  1837,  1841,  1845,  1849,
  1853,  1857,  1861,  1865,  1869,  1873,  1877,  1883,  1888,  1893,
  1898,  1903,  1908,  1913,  1918,  1923,  1928,  1933,  1940,  1945,
  1950,  1955,  1960,  1965,  1970,  1977,  1984,  1991,  1996,  2001,
  2006,  2011,  2016,  2021,  2026,  2031,  2036,  2041,  2046,  2053,
  2058,  2063,  2068,  2073,  2078,  2083,  2090,  2097,  2104,  2109,
  2111,  2113,  2115,  2117,  2119,  2121,  2123,  2125,  2130,  2135,
  2138,  2144,  2148,  2155,  2160,  2168,  2175,  2177,  2180,  2183,
  2187,  2191,  2203,  2213,  2221,  2229,  2230,  2234,  2236,  2240,
  2241,  2245,  2249,  2251,  2255,  2257,  2259,  2263,  2268,  2272,
  2278,  2283,  2285,  2287,  2289,  2293,  2298,  2305,  2313,  2315,
  2317,  2321,  2325,  2335,  2343,  2345,  2351,  2355,  2362,  2364,
  2368,  2370,  2372,  2379,  2384,  2389,  2394,  2401,  2408
};

static const short yyrhs[] = {   198,
     0,   196,     0,   203,     0,     1,     6,     0,     3,     0,
   175,     3,     0,     0,   196,   197,     0,   151,     0,   154,
   155,   195,   195,   195,   156,   157,   153,   195,   195,   195,
   153,   195,   195,   195,   153,   195,   195,   195,   158,   159,
     0,   152,     0,     0,   198,   199,     0,   200,     0,   202,
     0,   201,     0,   126,     6,     0,   127,     6,     0,   129,
     6,     0,   128,     6,     0,   130,     6,     0,   131,   185,
   254,   191,     5,   186,     6,     0,   132,   185,   254,   186,
     6,     0,   133,   185,     5,   191,     5,   191,   254,   191,
   254,   191,     5,   191,     5,   191,     5,   186,     6,     0,
     3,     7,   110,   185,     5,   191,   252,   186,     6,     0,
     3,     7,   109,   185,     5,   191,   250,   191,   258,   191,
   249,   191,   249,   191,   249,   191,   258,   191,   258,   191,
   249,   186,     6,     0,     3,     7,   108,   185,     5,   191,
   250,   191,   250,   191,   256,   191,   249,   191,   249,   191,
   249,   191,   249,   191,   258,   191,   258,   191,   258,   191,
   258,   191,   249,   186,     6,     0,     3,     7,   116,   185,
     5,   191,     3,   191,     3,   191,     3,   191,   249,   186,
     6,     0,     3,     7,   120,   185,     5,   191,     3,   191,
   249,   186,     6,     0,     3,     7,   137,   185,     5,   191,
     3,   191,   249,   186,     6,     0,     3,     7,   118,   185,
     5,   191,   176,   191,   176,   191,   250,   191,   249,   186,
     6,     0,     3,     7,   121,   185,     5,   191,   258,   186,
     6,     0,     3,     7,   122,   185,     5,   191,   258,   191,
     3,   191,   249,   186,     6,     0,     3,     7,   117,   185,
     5,   191,     3,   186,     6,     0,     3,     7,   123,   185,
     5,   191,     3,   191,   250,   186,     6,     0,     3,     7,
   125,   185,     5,   191,     3,   191,     3,   191,     3,   186,
     6,     0,     3,     7,   124,   185,     5,   191,   252,   186,
     6,     0,     3,     7,   119,   185,     5,   191,     3,   186,
     6,     0,     3,     7,    44,   185,     5,   191,     3,   191,
     3,   186,     6,     0,     3,     7,   135,   185,     5,   191,
   258,   186,     6,     0,     3,     7,   136,   185,     5,   191,
   258,   191,     3,   186,     6,     0,     3,     7,   134,   185,
     5,   191,     3,   186,     6,     0,     3,     7,   138,   185,
     5,   191,     3,   191,   250,   186,     6,     0,     3,     7,
   139,   185,     5,   191,     3,   191,   250,   191,   250,   186,
     6,     0,     3,     7,   146,   185,     5,   191,     3,   191,
   250,   191,   250,   186,     6,     0,     3,     7,   140,   185,
     5,   191,     3,   191,   250,   186,     6,     0,     3,     7,
   150,   185,     5,   191,     3,   191,   250,   191,   250,   186,
     6,     0,     3,     7,   141,   185,     5,   191,     3,   191,
   258,   191,   258,   191,   249,   191,   249,   186,     6,     0,
     3,     7,   142,   185,     5,   191,   258,   186,     6,     0,
     3,     7,   143,   185,   144,   191,   249,   191,     3,   186,
     6,     0,     3,     7,   145,   185,     5,   191,   258,   191,
   249,   186,     6,     0,     3,     7,   147,   185,     5,   191,
     5,   191,     3,   191,     3,   186,     6,     0,     3,     7,
   148,   185,     5,   191,     5,   191,     3,   186,     6,     0,
     3,     7,   149,   185,     3,   191,     3,   186,     6,     0,
     0,   203,   204,     0,   206,     0,   205,     0,   224,     0,
   225,     0,   226,     0,   229,     0,   230,     0,   231,     0,
   232,     0,   235,     0,   247,     0,   248,     0,   234,     0,
   233,     0,    33,   185,     5,   186,     6,     0,    33,   185,
     5,   191,   260,   186,     6,     0,     4,     5,   192,   207,
   193,     6,     0,     4,     5,     4,   252,   192,   207,   193,
     6,     0,     0,   207,   210,     0,   207,   214,     0,   207,
   217,     0,   207,   219,     0,   207,   220,     0,   250,     0,
   208,   191,   250,     0,   250,     0,   209,   191,   250,     0,
     0,     0,     4,   211,   185,   208,   186,   212,   192,   209,
   193,     6,     0,   264,     0,   213,   191,   264,     0,     0,
    78,   185,   250,   191,   250,   191,   250,   186,   215,   192,
   213,   193,     6,     0,   264,     0,   216,   191,   264,     0,
     0,    79,   185,   250,   191,   250,   191,   250,   191,   250,
   186,   218,   192,   216,   193,     6,     0,    80,   192,   257,
   193,   192,   257,   193,     6,     0,     0,    81,   221,   192,
   209,   193,     6,     0,     7,     0,   160,     0,   161,     0,
   162,     0,   163,     0,   181,     0,   182,     0,     4,   222,
   250,     6,     0,     4,   187,   250,   188,   222,   250,     6,
     0,     4,   187,   192,   260,   193,   188,   222,   258,     6,
     0,     4,   187,   188,     7,   258,     6,     0,     4,   223,
     6,     0,     4,   187,   250,   188,   223,     6,     0,     4,
   189,     4,     7,   264,     6,     0,     4,   187,   250,   188,
   189,     4,     7,   264,     6,     0,     4,   189,     4,   222,
   250,     6,     0,     4,   187,   250,   188,   189,     4,   222,
   250,     6,     0,     4,   189,     4,   223,     6,     0,     4,
   187,   250,   188,   189,     4,   223,     6,     0,     4,   189,
    90,   189,     4,     7,   261,     6,     0,     4,   187,   250,
   188,   189,    90,   189,     4,     7,   261,     6,     0,     4,
   189,    91,     7,   262,     6,     0,     4,   187,   250,   188,
   189,    91,     7,   262,     6,     0,    61,   185,     4,   186,
   189,     4,     7,   250,     6,     0,    61,   185,     4,   186,
   189,     4,     7,   264,     6,     0,    41,   185,   250,   186,
     7,   252,     6,     0,    57,    41,   185,   250,   186,     7,
   258,     6,     0,    74,    41,   258,     7,   192,   250,   191,
   250,   191,   250,   193,     6,     0,    48,    49,   258,     7,
   250,     6,     0,    44,   185,   250,   186,     7,   258,     6,
     0,    46,   185,   250,   186,     7,   258,     6,     0,    42,
   185,   250,   186,     7,   258,     6,     0,    42,   185,   250,
   186,     7,   258,    52,   252,     6,     0,    43,   185,   250,
   186,     7,   258,     6,     0,    43,   185,   250,   186,     7,
   258,    52,   252,     6,     0,    50,   185,   250,   186,     7,
   192,   250,   191,   250,   191,     5,   191,     5,   191,     5,
   193,     6,     0,    83,   185,   250,   186,     7,   258,     6,
     0,    84,   185,   250,   186,     7,   258,     6,     0,    85,
   185,   250,   186,     7,   258,    89,   258,    86,   250,     6,
     0,    62,    44,   185,   250,   186,     7,   192,   250,   193,
   258,     6,     0,    62,    44,   192,   250,   193,     7,   192,
   250,   193,   258,     6,     0,    44,    69,   185,   250,   186,
     7,   258,     6,     0,    74,    44,   258,     7,   192,   250,
   191,   250,   191,   250,   193,     6,     0,    57,    44,   185,
   250,   186,     7,   258,     6,     0,    52,    45,   185,   250,
   186,     7,   258,     6,     0,    53,    45,   185,   250,   186,
     7,   258,     6,     0,   101,    45,   185,   250,   186,     7,
   192,   250,   191,   258,   193,     6,     0,    62,    45,   185,
   250,   186,     7,   192,   250,   191,   250,   193,   258,   258,
     6,     0,    62,    45,   192,   250,   193,     7,   192,   250,
   191,   250,   193,   258,   258,     6,     0,    54,    45,   185,
   250,   186,     7,   185,   250,   191,   250,   186,   258,   258,
     6,     0,    85,    45,    87,    88,   185,   250,   186,     7,
   256,    89,   192,   258,   191,   258,   193,    86,   192,   250,
   191,   250,   193,     6,     0,    85,    45,   185,   250,   186,
     7,   256,    89,   192,   258,   191,   258,   193,    86,   192,
   250,   191,   250,   193,     6,     0,    45,    69,   185,   250,
   186,     7,   258,     6,     0,    57,    45,   185,   250,   186,
     7,   258,     6,     0,    56,    47,   185,   250,   186,     7,
   258,     6,     0,    47,   185,   250,   186,     7,   258,     6,
     0,    57,    47,   185,   250,   186,     7,   258,     6,     0,
    64,   252,   192,   227,   193,     0,    63,   192,   252,   191,
   252,   191,   250,   193,   192,   227,   193,     0,    65,   252,
   192,   227,   193,     0,    66,   192,   252,   191,   250,   193,
   192,   227,   193,     0,   229,     0,   228,     0,   226,     0,
     0,   228,   225,     0,   228,    41,   192,   260,   193,     6,
     0,   228,    44,   192,   260,   193,     6,     0,   228,    45,
   192,   260,   193,     6,     0,   228,    47,   192,   260,   193,
     6,     0,    68,   192,   228,   193,     0,    68,     4,   187,
   250,   188,     6,     0,    76,     4,   187,   250,   188,     6,
     0,    77,     4,   187,   250,   188,     6,     0,    71,   192,
   228,   193,     0,    71,     4,   187,   250,   188,     6,     0,
    71,     4,     6,     0,    71,     4,     4,     6,     0,    90,
   261,   192,   228,   193,     0,   102,   264,     6,     0,   103,
   264,     6,     0,   102,   192,   228,   193,     0,   103,   192,
   228,   193,     0,     4,   264,     6,     0,     4,     4,   187,
   250,   188,   264,     6,     0,     4,   250,     6,     0,    61,
   185,     4,   186,   189,     4,     6,     0,    82,     4,     6,
     0,    97,     6,     0,    38,     6,     0,    38,   192,   250,
   191,   250,   191,   250,   191,   250,   191,   250,   191,   250,
   193,     6,     0,    39,     6,     0,    92,   185,   250,     8,
   250,   186,     0,    92,   185,   250,     8,   250,     8,   250,
   186,     0,    92,     4,    93,   192,   250,     8,   250,   193,
     0,    92,     4,    93,   192,   250,     8,   250,     8,   250,
   193,     0,    94,     0,   100,     4,     0,    98,     0,    99,
     4,     6,     0,    95,   185,   250,   186,     0,    96,     0,
    67,    41,   192,   250,   191,   252,   193,     6,     0,    67,
    41,   192,   250,   191,   252,   191,   252,   191,   250,   193,
     6,     0,    67,    41,   192,   250,   191,   252,   191,   252,
   191,   252,   191,   250,   193,     6,     0,     0,    67,    41,
   192,   250,   191,   252,   193,   236,   192,   245,   193,     6,
     0,     0,    67,    41,   192,   250,   191,   252,   191,   252,
   191,   250,   193,   237,   192,   245,   193,     6,     0,     0,
    67,    41,   192,   250,   191,   252,   191,   252,   191,   252,
   191,   250,   193,   238,   192,   245,   193,     6,     0,    67,
    44,   192,   250,   191,   252,   193,     6,     0,    67,    44,
   192,   250,   191,   252,   191,   252,   191,   250,   193,     6,
     0,    67,    44,   192,   250,   191,   252,   191,   252,   191,
   252,   191,   250,   193,     6,     0,     0,    67,    44,   192,
   250,   191,   252,   193,   239,   192,   245,   193,     6,     0,
     0,    67,    44,   192,   250,   191,   252,   191,   252,   191,
   250,   193,   240,   192,   245,   193,     6,     0,     0,    67,
    44,   192,   250,   191,   252,   191,   252,   191,   252,   191,
   250,   193,   241,   192,   245,   193,     6,     0,    67,    45,
   192,   250,   191,   252,   193,     6,     0,    67,    45,   192,
   250,   191,   252,   191,   252,   191,   250,   193,     6,     0,
    67,    45,   192,   250,   191,   252,   191,   252,   191,   252,
   191,   250,   193,     6,     0,     0,    67,    45,   192,   250,
   191,   252,   193,   242,   192,   245,   193,     6,     0,     0,
    67,    45,   192,   250,   191,   252,   191,   252,   191,   250,
   193,   243,   192,   245,   193,     6,     0,     0,    67,    45,
   192,   250,   191,   252,   191,   252,   191,   252,   191,   250,
   193,   244,   192,   245,   193,     6,     0,   246,     0,   245,
   246,     0,    75,   192,   258,   191,   258,   191,   258,   193,
     6,     0,    75,   192,   258,   191,   258,   193,     6,     0,
    70,     6,     0,    55,    44,   258,     7,   250,     6,     0,
    55,    44,   258,     7,   250,    58,    60,   250,     6,     0,
    55,    44,   258,     7,   250,    58,    59,   250,     6,     0,
    55,    45,   192,   250,   193,     7,   258,     6,     0,    51,
    45,   192,   250,   193,     7,   258,     6,     0,    55,    47,
   192,   250,   193,     7,   258,     6,     0,    70,    45,   258,
     7,   250,     6,     0,    70,    45,   258,     6,     0,    72,
     6,     0,    73,     6,     0,   111,     0,   112,     0,   113,
     0,   114,     0,   115,     0,   251,     0,   185,   250,   186,
     0,   175,   250,     0,   174,   250,     0,   180,   250,     0,
   250,   175,   250,     0,   250,   174,   250,     0,   250,   176,
   250,     0,   250,   177,   250,     0,   250,   178,   250,     0,
   250,   184,   250,     0,   250,   170,   250,     0,   250,   172,
   250,     0,   250,   171,   250,     0,   250,   173,   250,     0,
   250,   167,   250,     0,   250,   168,   250,     0,   250,   166,
   250,     0,   250,   165,   250,     0,   250,   164,   250,     8,
   250,     0,    12,   185,   250,   186,     0,    13,   185,   250,
   186,     0,    14,   185,   250,   186,     0,    15,   185,   250,
   186,     0,    16,   185,   250,   186,     0,    17,   185,   250,
   186,     0,    18,   185,   250,   186,     0,    19,   185,   250,
   186,     0,    20,   185,   250,   186,     0,    22,   185,   250,
   186,     0,    23,   185,   250,   191,   250,   186,     0,    24,
   185,   250,   186,     0,    25,   185,   250,   186,     0,    26,
   185,   250,   186,     0,    27,   185,   250,   186,     0,    28,
   185,   250,   186,     0,    29,   185,   250,   186,     0,    30,
   185,   250,   191,   250,   186,     0,    31,   185,   250,   191,
   250,   186,     0,    32,   185,   250,   191,   250,   186,     0,
    21,   185,   250,   186,     0,    12,   187,   250,   188,     0,
    13,   187,   250,   188,     0,    14,   187,   250,   188,     0,
    15,   187,   250,   188,     0,    16,   187,   250,   188,     0,
    17,   187,   250,   188,     0,    18,   187,   250,   188,     0,
    19,   187,   250,   188,     0,    20,   187,   250,   188,     0,
    22,   187,   250,   188,     0,    23,   187,   250,   191,   250,
   188,     0,    24,   187,   250,   188,     0,    25,   187,   250,
   188,     0,    26,   187,   250,   188,     0,    27,   187,   250,
   188,     0,    28,   187,   250,   188,     0,    29,   187,   250,
   188,     0,    30,   187,   250,   191,   250,   188,     0,    31,
   187,   250,   191,   250,   188,     0,    32,   187,   250,   191,
   250,   188,     0,    21,   187,   250,   188,     0,     3,     0,
     9,     0,    10,     0,    11,     0,   105,     0,   106,     0,
   107,     0,     4,     0,     4,   187,   250,   188,     0,   190,
     4,   187,   188,     0,     4,   223,     0,     4,   187,   250,
   188,   223,     0,     4,   189,     4,     0,     4,   187,   250,
   188,   189,     4,     0,     4,   189,     4,   223,     0,     4,
   187,   250,   188,   189,     4,   223,     0,   104,   185,     5,
   191,   250,   186,     0,   253,     0,   175,   252,     0,   174,
   252,     0,   252,   175,   252,     0,   252,   174,   252,     0,
   192,   250,   191,   250,   191,   250,   191,   250,   191,   250,
   193,     0,   192,   250,   191,   250,   191,   250,   191,   250,
   193,     0,   192,   250,   191,   250,   191,   250,   193,     0,
   185,   250,   191,   250,   191,   250,   186,     0,     0,   185,
   255,   186,     0,     5,     0,   255,   191,     5,     0,     0,
   192,   257,   193,     0,   185,   257,   186,     0,   258,     0,
   257,   191,   258,     0,   250,     0,   259,     0,   192,   260,
   193,     0,   175,   192,   260,   193,     0,   250,     8,   250,
     0,   250,     8,   250,     8,   250,     0,    41,   192,   250,
   193,     0,   226,     0,   229,     0,   235,     0,     4,   187,
   188,     0,   175,     4,   187,   188,     0,     4,   187,   192,
   260,   193,   188,     0,   175,     4,   187,   192,   260,   193,
   188,     0,   250,     0,   259,     0,   260,   191,   250,     0,
   260,   191,   259,     0,   192,   250,   191,   250,   191,   250,
   191,   250,   193,     0,   192,   250,   191,   250,   191,   250,
   193,     0,     4,     0,     4,   189,    90,   189,     4,     0,
   192,   263,   193,     0,     4,   187,   250,   188,   189,    91,
     0,   261,     0,   263,   191,   261,     0,     5,     0,    40,
     0,    35,   185,   264,   191,   264,   186,     0,    36,   185,
   264,   186,     0,    37,   185,   264,   186,     0,    34,   185,
   264,   186,     0,    34,   185,   264,   191,   260,   186,     0,
    34,   185,     4,   189,     4,   186,     0,    34,   185,     4,
   187,   250,   188,   189,     4,   186,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   159,   161,   162,   163,   168,   170,   173,   175,   178,   185,
   198,   212,   214,   217,   219,   220,   223,   229,   234,   235,
   236,   239,   243,   246,   252,   257,   263,   271,   276,   280,
   286,   291,   295,   300,   304,   307,   312,   316,   320,   324,
   329,   333,   336,   340,   344,   348,   352,   356,   360,   363,
   367,   370,   374,   377,   384,   386,   389,   391,   392,   393,
   394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
   406,   412,   429,   437,   446,   454,   455,   456,   457,   458,
   461,   464,   468,   471,   475,   666,   684,   694,   700,   707,
   715,   721,   727,   734,   742,   748,   756,   761,   768,   770,
   771,   772,   773,   776,   778,   781,   816,   855,   909,   926,
   937,   956,   970,   987,  1013,  1040,  1054,  1071,  1085,  1102,
  1122,  1145,  1155,  1170,  1190,  1206,  1225,  1244,  1262,  1280,
  1298,  1324,  1342,  1368,  1388,  1412,  1436,  1462,  1479,  1495,
  1512,  1530,  1549,  1568,  1607,  1632,  1652,  1671,  1688,  1707,
  1726,  1742,  1762,  1779,  1796,  1816,  1822,  1827,  1832,  1839,
  1841,  1842,  1845,  1850,  1854,  1870,  1886,  1902,  1922,  1937,
  1943,  1949,  1960,  1970,  1980,  1990,  2008,  2022,  2031,  2037,
  2048,  2061,  2106,  2121,  2137,  2147,  2158,  2162,  2166,  2170,
  2181,  2198,  2214,  2240,  2267,  2299,  2306,  2311,  2317,  2321,
  2329,  2348,  2364,  2380,  2385,  2401,  2406,  2422,  2427,  2445,
  2468,  2491,  2514,  2519,  2542,  2547,  2570,  2575,  2601,  2624,
  2647,  2670,  2675,  2698,  2704,  2727,  2733,  2758,  2762,  2767,
  2794,  2818,  2826,  2845,  2863,  2881,  2908,  2934,  2960,  2974,
  2992,  2997,  3006,  3008,  3009,  3010,  3011,  3014,  3016,  3017,
  3018,  3019,  3020,  3021,  3022,  3023,  3030,  3031,  3032,  3033,
  3034,  3035,  3036,  3037,  3038,  3039,  3040,  3041,  3042,  3043,
  3044,  3045,  3046,  3047,  3048,  3049,  3050,  3051,  3052,  3053,
  3054,  3055,  3056,  3057,  3058,  3059,  3060,  3061,  3063,  3064,
  3065,  3066,  3067,  3068,  3069,  3070,  3071,  3072,  3073,  3074,
  3075,  3076,  3077,  3078,  3079,  3080,  3081,  3082,  3083,  3088,
  3093,  3094,  3095,  3096,  3097,  3098,  3102,  3115,  3135,  3149,
  3162,  3185,  3203,  3221,  3239,  3257,  3264,  3269,  3273,  3277,
  3281,  3287,  3292,  3296,  3300,  3306,  3310,  3315,  3319,  3324,
  3328,  3332,  3338,  3344,  3351,  3357,  3361,  3365,  3376,  3383,
  3394,  3414,  3424,  3434,  3446,  3463,  3482,  3506,  3534,  3540,
  3544,  3548,  3560,  3565,  3577,  3584,  3605,  3610,  3624,  3630,
  3636,  3641,  3649,  3657,  3671,  3685,  3689,  3708,  3730
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTriangulation","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tPlugin","tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude",
"tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor",
"tLayers","tAlias","tAliasWithOptions","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION",
"tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ElementCoords",
"ElementValues","Element","@1","@2","Text2DValues","Text2D","@3","Text3DValues",
"Text3D","@4","InterpolationMatrix","Time","@5","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Colorify","Visibility","Command","Loop","Extrude","@6","@7","@8","@9",
"@10","@11","@12","@13","@14","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   194,   194,   194,   194,   195,   195,   196,   196,   197,   197,
   197,   198,   198,   199,   199,   199,   200,   200,   200,   200,
   200,   201,   201,   201,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   203,   203,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   205,   205,   206,   206,   207,   207,   207,   207,   207,   207,
   208,   208,   209,   209,   211,   212,   210,   213,   213,   215,
   214,   216,   216,   218,   217,   219,   221,   220,   222,   222,
   222,   222,   222,   223,   223,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   226,   226,   226,   226,   227,
   227,   227,   228,   228,   228,   228,   228,   228,   229,   229,
   229,   229,   230,   230,   230,   230,   231,   232,   232,   232,
   232,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
   235,   235,   235,   236,   235,   237,   235,   238,   235,   235,
   235,   235,   239,   235,   240,   235,   241,   235,   235,   235,
   235,   242,   235,   243,   235,   244,   235,   245,   245,   246,
   246,   246,   247,   247,   247,   247,   247,   247,   247,   247,
   248,   248,   249,   249,   249,   249,   249,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   252,   252,   252,   252,
   252,   253,   253,   253,   253,   254,   254,   255,   255,   256,
   256,   256,   257,   257,   258,   258,   258,   258,   259,   259,
   259,   259,   259,   259,   259,   259,   259,   259,   260,   260,
   260,   260,   261,   261,   261,   261,   262,   262,   263,   263,
   264,   264,   264,   264,   264,   264,   264,   264,   264
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     1,     3,     1,     3,     0,     0,    10,     1,     3,     0,
    13,     1,     3,     0,    15,     8,     0,     6,     1,     1,
     1,     1,     1,     1,     1,     4,     7,     9,     6,     3,
     6,     6,     9,     6,     9,     5,     8,     8,    11,     6,
     9,     9,     9,     7,     8,    12,     6,     7,     7,     7,
     9,     7,     9,    17,     7,     7,    11,    11,    11,     8,
    12,     8,     8,     8,    12,    14,    14,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     6,     6,     4,     6,     3,     4,     5,     3,     3,     4,
     4,     3,     7,     3,     7,     3,     2,     2,    15,     2,
     6,     8,     8,    10,     1,     2,     1,     3,     4,     1,
     8,    12,    14,     0,    12,     0,    16,     0,    18,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     1,     2,     9,
     7,     2,     6,     9,     9,     8,     8,     8,     6,     4,
     2,     2,     1,     1,     1,     1,     1,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     1,
     1,     1,     1,     1,     1,     1,     1,     4,     4,     2,
     5,     3,     6,     4,     7,     6,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     0,     3,     1,     3,     0,
     3,     3,     1,     3,     1,     1,     3,     4,     3,     5,
     4,     1,     1,     1,     3,     4,     6,     7,     1,     1,
     3,     3,     9,     7,     1,     5,     3,     6,     1,     3,
     1,     1,     6,     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   195,     0,   200,     0,   197,     0,     0,
     0,     0,     0,    56,    58,    57,    59,    60,    61,    62,
    63,    64,    65,    70,    69,    66,    67,    68,     0,     0,
    17,    18,    20,    19,    21,   336,   336,     0,   310,   317,
   371,    99,   311,   312,   313,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   372,     0,   314,   315,   316,   100,   101,   102,   103,     0,
     0,     0,   104,   105,     0,     0,     0,     0,     0,     0,
     0,   248,     0,     0,   188,     0,   190,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
     0,     0,     0,     0,     0,   163,     0,     0,   163,   241,
   242,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   365,     0,     0,     0,     0,     0,   187,     0,   196,     0,
   371,   163,     0,   163,     0,     5,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   320,     0,    75,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   317,   251,   250,   252,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   184,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   182,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   317,     0,     0,     0,   352,
   353,   354,   345,     0,   346,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   329,   328,     0,     0,     0,     0,
   163,   163,     0,     0,     0,     0,     0,     0,     0,     0,
   175,     0,     0,     0,     0,     0,     0,   186,     0,     0,
     0,     0,     0,     0,     0,   163,     0,     0,     0,   198,
     0,     0,   178,     0,   179,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   338,     0,     0,
     0,     0,     0,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   249,     0,     0,   359,   360,
     0,     0,    99,     0,     0,     0,     0,     0,   106,     0,
   266,   265,   263,   264,   259,   261,   260,   262,   254,   253,
   255,   256,   257,   258,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   331,   330,   162,     0,   161,   160,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   169,
   164,   240,     0,   176,     0,   173,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   199,     0,   180,   181,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   337,     0,     0,    23,     0,
   318,   324,    75,    85,     0,     0,     0,    97,     0,    76,
    77,    78,    79,    80,   268,   289,   269,   290,   270,   291,
   271,   292,   272,   293,   273,   294,   274,   295,   275,   296,
   276,   297,   288,   309,   277,   298,     0,     0,   279,   300,
   280,   301,   281,   302,   282,   303,   283,   304,   284,   305,
     0,     0,     0,     0,     0,     0,     0,     0,   376,     0,
     0,   374,   375,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   116,     0,     0,     0,     0,   319,     0,
    71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   355,     0,     0,     0,     0,   347,   349,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   156,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   177,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   339,
     0,   336,     0,   321,     0,     0,     0,     0,     0,     0,
     0,    73,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   318,   109,   361,   362,     0,
     0,     0,     0,     0,   111,   112,   114,     0,     0,   369,
     0,   120,   267,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   351,   356,     0,   348,     0,   127,
     0,     0,     0,     0,     0,   233,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   170,     0,     0,     0,
     0,   239,   174,     0,     0,   171,   172,     0,     0,     0,
   340,     0,   366,     0,     0,     0,   191,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   243,   244,   245,   246,   247,     0,     0,     0,
     0,     0,     0,     0,    22,     0,   323,   183,     0,     0,
     0,     0,     0,   343,     0,   278,   299,   285,   306,   286,
   307,   287,   308,     0,   378,   377,   373,   326,     0,    99,
     0,     0,     0,     0,   107,     0,     0,     0,   367,    72,
     0,   124,   130,     0,   132,     0,     0,   128,     0,   129,
   154,     0,     0,   350,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   185,     0,
     0,     0,     0,     0,     0,     0,     0,   163,     0,   204,
     0,   213,     0,   222,     0,     0,     0,     0,     0,     0,
   135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   336,   325,    74,     0,    81,     0,     0,     0,
     0,     0,    83,     0,     0,     0,     0,   117,     0,     0,
   118,     0,   370,     0,     0,     0,   140,   151,   357,     0,
     0,   237,   143,   144,     0,     0,     0,   236,   238,   153,
   125,   142,   152,   155,     0,     0,     0,     0,     0,     0,
     0,   335,     0,   334,     0,     0,   201,     0,     0,   210,
     0,     0,   219,     0,   165,   166,   167,   168,     0,     0,
   340,     0,     0,     0,     0,     0,   364,     0,   193,   192,
     0,     0,     0,     0,     0,    25,     0,    34,     0,    38,
     0,    32,     0,     0,    37,     0,    42,    40,     0,     0,
     0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
    54,     0,     0,    86,     0,     0,     0,   344,     0,     0,
     0,     0,   108,   113,   115,     0,   121,     0,     0,   131,
   133,   358,     0,     0,   235,   234,   122,   123,     0,     0,
     0,     0,   163,     0,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   342,   341,     0,     0,     0,     0,
     0,     0,     0,   340,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    82,     0,     0,     0,    84,
    98,   379,     0,   368,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   333,     0,     0,     0,     0,     0,     0,
     0,     0,   228,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   363,   194,     0,     0,    39,     0,
     0,     0,     0,    29,     0,    35,     0,    41,    30,    43,
     0,    46,     0,    50,    51,     0,     0,    53,     0,     0,
     0,     0,     0,     0,   119,     0,     0,     0,   138,   139,
     0,     0,   157,     0,     0,   206,     0,   232,     0,     0,
   229,   215,     0,     0,   224,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    90,     0,    96,
     0,     0,     0,     0,     0,   332,   202,     0,     0,     0,
   205,   211,     0,     0,   214,   220,     0,     0,   223,   126,
   141,     0,     0,   145,     0,     0,     0,     0,     0,    33,
    36,    44,     0,    45,    52,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   208,     0,     0,   217,
     0,   226,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    87,     0,    94,     0,     0,   148,   146,   147,     0,
   203,     0,     0,     0,   212,     0,     0,   221,     0,     0,
     0,     0,     0,     0,    28,    31,     0,     0,     0,    88,
     0,   189,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   207,     0,     0,   231,   216,     0,   225,     0,
     0,     0,     0,     0,     0,    48,    24,    89,    91,     0,
    92,   134,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   209,   230,   218,   227,     0,     0,     0,
     0,     0,    93,    95,     0,     0,     0,     0,     0,     0,
   150,    10,     0,     0,     0,     0,     0,   149,     0,    26,
     0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
     0
};

static const short yydefgoto[] = {  1589,
   228,     2,     9,     3,    19,    20,    21,    22,     4,    74,
    75,    76,   466,  1116,  1122,   670,   847,  1295,  1499,   671,
  1449,  1540,   672,  1501,   673,   674,   851,   149,   265,    77,
   601,   360,   587,   588,   361,    81,    82,    83,    84,    85,
   362,  1168,  1418,  1482,  1171,  1423,  1486,  1174,  1427,  1489,
  1322,  1323,    87,    88,   978,   363,   152,   385,   189,   260,
   459,  1076,   993,   994,   365,   521,   213,   738,   881,   153
};

static const short yypact[] = {  2391,
    81,   337,   300,  2620,-32768,-32768,-32768,  -115,-32768,    86,
    94,    97,   134,   146,   168,    -8,     6,    17,-32768,-32768,
-32768,-32768,  1849,    51,     9,   202,   103,   114,   179,   -34,
   158,   190,   193,   283,   197,   297,   352,   368,   389,   506,
   391,   636,   271,    30,   288,   308,   308,   298,   531,     7,
   473,    12,   516,   520,   117,   539,   548,   552,   350,   357,
   -26,    19,    24,-32768,   361,-32768,   555,-32768,   558,   575,
   545,    42,   289,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    15,  2262,
-32768,-32768,-32768,-32768,-32768,   388,   388,   605,-32768,   382,
    21,-32768,-32768,-32768,-32768,   -74,    50,   285,   406,   443,
   455,   477,   482,   497,   500,   511,   515,   518,   528,   533,
   534,   537,   538,   541,   542,   546,   426,   433,   447,   463,
-32768,   469,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2177,
  2177,  2177,-32768,-32768,  2177,    41,    90,   662,  2177,   666,
   449,-32768,   667,   674,-32768,  2177,-32768,  2177,  2177,  2177,
   501,  2177,   510,  2177,  2177,   781,  2177,   507,   521,   554,
   567,   781,   524,   572,   584,   585,   598,   601,   602,   778,
   -83,    20,   308,   308,   308,  2177,  2177,   -94,-32768,   -67,
   308,   631,   632,   635,   646,-32768,   781,    23,-32768,-32768,
-32768,   781,   781,   650,   652,   834,  2177,  2177,   -57,  2177,
   653,  2177,   651,   757,  2177,  2177,-32768,   845,-32768,   668,
-32768,-32768,   846,-32768,   848,-32768,   856,    15,   675,   676,
   679,   681,   682,   683,   684,   686,   687,   688,   690,   692,
   694,   695,   696,   697,   698,   699,   704,   705,   706,   707,
   709,   710,   711,   715,   716,   717,   718,   719,   905,   729,
   738,   735,  2177,   927,-32768,   308,-32768,  2177,  2177,  2177,
  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,
  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,
  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,
  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,   431,
   439,   439,   439,   937,   464,   759,   759,   759,  5110,   938,
  2037,  4360,   225,   755,   940,   761,   957,-32768,-32768,  2177,
  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,  2177,
  2177,  2177,  2177,  2177,-32768,   147,  3348,  5133,  5156,  5179,
  2177,  5202,  2177,  5225,  5248,   474,   758,  1634,  2037,-32768,
-32768,-32768,  1550,   944,-32768,  5271,  2177,  2177,  2177,  2177,
   945,  2177,  2177,  2177,  2177,  2177,  2177,  2177,   767,  2177,
  2177,  2177,  2177,   165,-32768,-32768,  3370,  3392,   308,   308,
   573,   573,   221,  2177,  2177,  2177,  2177,  2257,   124,   948,
-32768,  2177,  2454,   950,   951,  2177,  2177,-32768,  5294,  5317,
   871,  2177,  5340,   870,  3414,-32768,   770,  1794,  5363,-32768,
  2177,  2506,-32768,  2531,-32768,-32768,    15,   959,   963,   964,
   965,   969,   970,   971,   972,   973,   974,   975,   977,   980,
   982,   984,   985,   986,   987,   988,   989,   990,   991,   992,
   839,   999,  1009,  1010,  1015,  1019,  1018,-32768,   157,  1027,
  1028,  1030,  4385,   228,   -20,     5,  5386,  4410,  5409,  4435,
  5432,  4460,  5455,  4485,  5478,  4510,  5501,  4535,  5524,  4560,
  5547,  4585,  5570,  4610,  5593,  4635,  5616,  4660,  3436,  3458,
  5639,  4685,  5662,  4710,  5685,  4735,  5708,  4760,  5731,  4785,
  5754,  4810,  3480,  3502,  3524,  3546,  3568,  3590,   115,   175,
   833,   847,   850,   851,  2177,-32768,   781,  2241,  1550,-32768,
   322,   280,   439,  2177,  1031,  1021,    22,   853,-32768,  1820,
   762,   930,   411,   411,   425,   425,   425,   425,   481,   481,
   759,   759,   759,   759,  1037,  2037,  2177,  1041,  1042,  1043,
  5777,  1044,  5800,  1045,  1046,  1397,  2177,   489,  2037,   560,
  2177,  2177,  1047,  2696,  5823,  5846,  5869,  2177,  2720,  2744,
  5892,  5915,  5938,  5961,  5984,   855,  6007,  2768,  6030,  2792,
   308,  2177,  2177,-32768,-32768,-32768,   862,  2684,-32768,   863,
  2177,  3612,  3634,  3656,  4835,   105,   -35,   -36,   142,-32768,
-32768,-32768,  2177,-32768,  4860,-32768,   865,   867,  4885,  4910,
  1055,  1056,   879,  6053,  1058,   880,  2177,  2556,  2177,  2177,
-32768,  6076,-32768,-32768,   912,   881,   882,   883,   884,   886,
   890,   891,   892,   893,   895,   896,   897,   899,   900,   901,
   902,   903,   908,   918,   919,   921,   922,   924,   925,   926,
   928,   929,   935,   946,   947,-32768,  1065,   953,-32768,   956,
   385,-32768,-32768,-32768,   976,   979,   966,-32768,  1130,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2177,  2177,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2177,  2177,  2177,  2177,  2177,  2177,  2177,  1153,-32768,  2037,
   439,-32768,-32768,  2177,  4935,  1154,  2037,   981,   301,  2177,
  1160,  1162,   978,-32768,  1152,   983,    19,  1165,-32768,  2177,
-32768,   217,  3678,   308,   781,   781,  1166,   781,  1167,   781,
   781,-32768,  2037,  2816,  1444,   564,-32768,  1909,  1020,   997,
  1168,  1169,  1172,  1174,   835,  1192,  1193,  1194,  1196,  1198,
  1202,  1203,  1207,  1205,  1206,  1208,  1209,   227,  3700,  3722,
-32768,-32768,  2840,   308,   308,   308,  1211,  2037,  2037,  2037,
  2037,  1200,  1212,  2177,  2177,  1213,  1214,   781,   781,  2177,
  1215,   781,  1210,  3744,-32768,  1955,   741,  1216,  1067,  1222,
  2177,  2177,   308,  1223,  1224,   996,  1229,  1233,   781,   781,
  1238,   308,  1239,  1240,   781,   781,  1241,  1243,  1244,  1245,
  1246,   781,   597,   781,  1247,  1248,  1251,  1256,  1257,-32768,
  1259,   388,  1264,-32768,  1263,    10,  1078,  2177,  2177,   781,
  1079,-32768,  6099,  4960,  6122,  4985,  6145,  5010,  6168,  5035,
  5060,  1086,   262,  1087,  6191,   -11,-32768,  1550,-32768,    34,
   324,  1088,  1269,  1321,-32768,-32768,-32768,    19,  2177,-32768,
   565,-32768,  6490,  1273,  2177,    43,    40,    91,   781,  1275,
   781,  1277,  1278,   568,-32768,-32768,  2037,-32768,  2177,-32768,
  2177,   781,   781,   781,  1100,-32768,   364,   781,   781,   781,
   781,   781,   781,   781,   440,  1094,  1096,  1097,  1099,  2177,
  2177,  2177,  1103,   -79,   303,   323,-32768,   569,   582,   583,
   587,-32768,-32768,  3766,  3788,-32768,-32768,  1290,  1291,  6214,
   185,  1218,-32768,  2177,  2177,  2177,-32768,  1106,  1146,  1109,
  3810,  3832,   194,  1110,  1116,  1112,  1118,  1114,  1122,  1119,
  1120,   230,  1121,  1123,  1128,  1125,  1127,  1129,  1133,  1134,
  1135,  1142,-32768,-32768,-32768,-32768,-32768,  1138,  1139,  1140,
  1141,  1148,  1147,  1156,-32768,  1157,   228,-32768,  1313,  2177,
  3854,  3876,   588,-32768,  2177,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1161,-32768,-32768,-32768,-32768,   781,   439,
  2177,  1331,  1345,    22,-32768,  1346,  5085,    19,-32768,-32768,
  3898,-32768,-32768,   308,-32768,   308,  1347,-32768,  1349,-32768,
-32768,  1163,   623,  6490,  3920,  1350,  1351,  1352,  2177,  2177,
  2177,  1353,  1355,  1356,  1363,  1373,  1374,  1375,-32768,  2142,
  2177,  2177,  2177,  2177,  2864,  6237,  2606,   573,   308,  1376,
   308,  1377,   308,  1379,  1381,  1383,  1384,  1385,  2177,  2177,
-32768,-32768,  1386,   781,   781,  1303,   781,  2636,   570,  6260,
  2177,    15,  1391,  2177,   781,  1390,  1394,  1392,  1226,  1393,
   597,  1399,  1400,  2177,  1424,  1428,  1427,  1429,  1431,   597,
  2177,  2177,  2177,   781,  1430,  1434,   597,  2177,  1435,  1436,
  1437,  2177,   388,-32768,-32768,   313,  6490,  2177,  2177,   781,
  1250,   624,  6490,  1440,  1439,  1443,  1389,-32768,  1433,  1445,
-32768,  1288,-32768,  2177,   118,   121,-32768,-32768,-32768,  1258,
  2177,-32768,-32768,-32768,  3942,  1426,  1520,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1602,  1472,  2888,  2912,  3964,  3986,
  1287,-32768,  2177,-32768,  1289,   328,-32768,  1292,   334,-32768,
  1308,   336,-32768,  1314,-32768,-32768,-32768,-32768,  4008,  4030,
   185,   326,   627,  1315,  1395,  2177,-32768,  2177,-32768,-32768,
  4052,    15,  1294,  4074,  1317,-32768,  1320,-32768,  1322,-32768,
  1329,-32768,  1325,  6283,-32768,  1327,-32768,-32768,  1333,  1334,
  6306,  4096,  6329,  1330,-32768,  1336,  1337,  4118,  1338,  1341,
-32768,  4140,  1339,-32768,  2177,  4162,  4184,-32768,   781,  2177,
  1522,  1348,-32768,-32768,-32768,    19,-32768,  1441,  4206,-32768,
-32768,-32768,  4228,  2177,-32768,-32768,-32768,-32768,   781,   781,
  2177,  2177,   573,  2666,-32768,  1733,    59,  1733,    59,  1733,
    59,  2177,  2177,  1442,-32768,-32768,   781,  2177,  2936,  2960,
   781,    15,  1527,   185,   597,  1532,  2177,  1531,   597,  1533,
  1535,  1534,  1537,  1538,  2177,  1539,   781,  1540,  1541,  2177,
  1565,  1563,  2177,  1536,  1382,  6490,  2177,  2177,   628,  6490,
-32768,-32768,  1569,-32768,  2177,  1571,  6352,  1572,  1573,  2984,
  3008,  1387,  2177,-32768,  1733,  1733,  2177,  3032,   356,  1575,
  1396,   -33,-32768,  3056,   366,   -27,  3080,   374,    29,  3104,
  3128,  1403,  1414,  1617,-32768,-32768,  1413,  1454,-32768,  1418,
  1420,  1421,  4250,-32768,  1398,-32768,  1447,-32768,-32768,-32768,
  6375,-32768,  1422,-32768,-32768,  6398,  1449,-32768,  6421,  1423,
  2177,  6444,  4272,  1577,-32768,  4294,  1425,   781,-32768,-32768,
   781,   781,-32768,  3152,  3320,  1580,  2177,-32768,   781,  1609,
-32768,  1611,  2177,  1614,  1615,  2177,  1616,  1619,  1620,   781,
   781,-32768,  1621,    15,   597,   597,   597,   597,  1622,  1624,
  1625,   597,  1633,  1635,  1636,  1662,   637,-32768,  2177,-32768,
  2177,  1663,   781,   781,   781,-32768,-32768,  1448,  3176,  1478,
-32768,-32768,  1479,  3200,-32768,-32768,  1480,  3224,-32768,-32768,
-32768,  1482,  1477,-32768,    15,  1483,  1484,  1490,  1491,-32768,
-32768,-32768,  1487,-32768,-32768,-32768,  1488,  1674,  1497,  6467,
  3248,  1492,  1694,  1695,  1696,    59,  1699,   781,    59,  1700,
    59,  1701,   781,  1623,    15,   597,   597,  1702,  1704,   597,
  1706,-32768,   439,-32768,  1707,  1724,-32768,-32768,-32768,    31,
-32768,  1543,   638,    35,-32768,  1579,    45,-32768,  1604,  1519,
  1605,  1578,  1542,  1607,-32768,-32768,  1544,  1546,   641,-32768,
  1613,-32768,  1606,  1800,    59,   781,  1801,  1804,    59,  1806,
    59,  1727,  2177,    15,   597,   781,  1809,  1810,   439,  1811,
   439,  1812,-32768,    46,  1627,-32768,-32768,    98,-32768,   113,
  1629,  4316,    15,  1638,  1639,-32768,-32768,-32768,-32768,   645,
-32768,-32768,  1819,  1821,  1825,  1826,  2177,  2177,    15,   597,
   781,   439,  1827,-32768,-32768,-32768,-32768,  4338,  3272,  1676,
  1644,  1645,-32768,-32768,  2177,  1835,  1683,   781,   597,  3296,
-32768,-32768,  1652,  1658,  1842,   781,  1843,-32768,  1659,-32768,
   781,  1660,   781,  1664,   597,  1671,  1876,-32768,  1887,  1888,
-32768
};

static const short yypgoto[] = {-32768,
  -227,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1228,-32768,   532,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -316,    -1,-32768,
  1890,     2,  -390,  -186,     8,-32768,-32768,-32768,-32768,-32768,
  1892,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
 -1094, -1305,-32768,-32768,  -938,   -23,-32768,   254,-32768,   -92,
-32768, -1142, -1043,   432,  -183,  -339,  -729,   878,-32768,   -69
};


#define	YYLAST		6674


static const short yytable[] = {   151,
   427,   590,   223,   225,   261,    79,   524,   880,   664,   398,
   195,    80,   403,   664,   155,   198,  1381,   226,   209,   560,
  1381,   150,   211,  1381,   266,   736,   400,   214,   401,   411,
  1182,  1183,   163,   161,   161,   422,  1320,   424,  1264,    89,
   102,  1321,  1320,    99,   315,  1023,   221,  1321,  1022,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   181,   182,   127,   128,   129,   130,   389,
   390,   131,   665,   666,   667,   668,     5,   665,   666,   667,
   668,  1024,    90,   323,   389,   390,  1025,   391,  1320,    91,
  1320,   380,    92,  1321,  1320,  1321,   389,   390,   381,  1321,
   268,  1059,   269,  1060,  1320,  1320,   316,   317,   318,  1321,
  1321,   319,   322,  1240,   392,   327,  1241,   412,  1320,   602,
   603,  1340,   347,  1321,   348,   349,   350,   520,   352,    93,
   354,   355,  1026,   366,   132,   133,   134,   135,  1016,   162,
   162,    94,  1201,   389,   390,   790,   789,   202,   210,  1380,
   203,  1210,   387,   388,  1326,  1384,  1329,  1320,  1217,   143,
   144,   663,  1321,    95,  1381,   520,    96,   843,  1381,   324,
   325,  1381,  1320,   409,   410,  1299,   413,  1321,   415,   227,
    97,   418,   419,   136,   137,   138,   139,   669,   196,   625,
   156,    98,   989,   199,   382,   730,   742,   157,   215,   402,
   212,   383,   267,   737,   140,   141,   389,   390,  1381,   756,
   142,  1387,  1381,  1504,  1381,   145,   163,  1508,   320,   618,
   148,   523,   321,   222,   270,   154,   271,  1510,  1543,   463,
   510,   511,   512,   513,   467,   468,   469,   470,   471,   472,
   473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
   483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
   493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
   503,   504,   505,   506,   507,   508,   102,   158,  1133,   158,
  1545,   389,   390,   221,   389,   390,   788,   519,   159,   188,
   190,   717,    10,   718,   871,  1546,   530,   531,   532,   533,
   534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
   544,   525,   127,   128,   129,   130,   165,   551,   131,   553,
  1010,   166,   545,   791,   317,   519,  1341,   546,   389,   390,
  1345,   168,   656,   564,   565,   566,   567,   657,   569,   570,
   571,   572,   573,   574,   575,   581,   577,   578,   579,   580,
   719,  1480,   520,   160,  1484,   720,  1487,   389,   390,  1074,
   592,   593,   594,   595,   164,   520,  1075,   165,   605,  1086,
   863,   167,   609,   610,   136,   137,   138,   139,   614,   221,
   872,   873,   586,   586,   389,   390,   169,   622,   589,   589,
   389,   390,   884,   389,   390,   143,   144,   727,   143,   144,
  1524,   591,   170,   894,  1528,  1095,  1530,   920,   127,   128,
   129,   130,  1040,  1041,   131,    11,    12,    13,    14,    15,
    16,    17,    18,   171,   509,   221,   384,   175,   386,   136,
   137,   138,   139,   221,   393,  1049,  1050,  1006,   928,   929,
   930,   931,   727,   732,   329,   180,  1436,  1437,  1438,  1439,
   143,   144,   662,  1443,   127,   128,   129,   130,   729,   272,
   131,   273,   127,   128,   129,   130,   389,   390,   131,   183,
   224,   184,   185,   136,   137,   138,   139,     6,     7,   191,
     8,   725,   186,  1061,   317,  1062,   389,   390,  1224,   187,
   733,   389,   390,  1225,   143,   144,  1303,   389,   390,   389,
   390,  1265,   727,  1063,   728,  1064,  1120,   197,  1256,   465,
   731,   200,   519,   743,  1258,   201,  1260,  1493,  1494,   389,
   390,  1497,   725,   754,   207,   519,   520,   758,   759,   389,
   390,   208,   204,   869,   765,   216,  1377,   389,   390,   172,
   173,   205,   174,  1009,  1011,   206,  1383,  1033,   779,   780,
   217,   218,   143,   144,  1386,   143,   144,   783,   263,   520,
   264,   192,   259,   843,   193,   194,  1534,  1188,   219,   792,
   335,   336,   337,   338,   339,   340,   341,   342,   343,   220,
   274,   845,   275,   804,   344,   806,   807,   364,   339,   340,
   341,   342,   343,   371,   520,   520,   520,   520,   344,   262,
   310,  1561,   330,   331,   332,   333,   334,   311,   335,   336,
   337,   338,   339,   340,   341,   342,   343,   276,   399,   277,
  1574,   312,   344,   404,   405,    45,    46,    47,    48,   278,
    50,   279,   584,   585,   143,   144,  1586,   313,    56,    57,
   515,   864,   264,   314,   143,   144,   341,   342,   343,   844,
   556,   280,   264,   281,   344,   326,   282,  1165,   283,   143,
   144,   328,   345,   853,   854,   755,   176,   264,   346,   177,
   178,   284,   179,   285,   286,   351,   287,   855,   856,   857,
   858,   859,   860,   861,   353,   288,   519,   289,   367,   290,
   865,   291,   292,   868,   293,   368,   874,   973,   974,   975,
   976,   977,   294,   520,   295,   372,   883,   296,   298,   297,
   299,   300,   302,   301,   303,   304,   306,   305,   307,   519,
   308,   725,   309,   330,   331,   332,   333,   334,   369,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   946,   986,
   727,   370,   757,   344,   727,  1018,   898,  1019,   727,   727,
  1032,  1065,  1189,   373,   519,   519,   519,   519,   374,   375,
   934,   935,   727,   727,  1066,  1067,   940,   727,  1120,  1068,
  1121,   379,   376,    99,   356,   377,   378,   951,   952,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   727,  1230,  1140,  1231,  1120,  1120,  1266,
  1364,   357,   394,   395,   991,   992,   396,  1230,  1506,  1448,
  1507,  1519,   397,  1520,   778,  1552,   406,  1553,   407,   408,
   906,   414,   416,    45,    46,    47,    48,    49,    50,   417,
   420,   423,   421,   425,  1192,  1017,    56,    57,   426,   428,
   429,  1021,  1312,   430,   844,   431,   432,   433,   434,  1012,
   435,   436,   437,   519,   438,  1034,   439,  1035,   440,   441,
   442,   443,   444,   445,   132,   133,   134,   135,   446,   447,
   448,   449,   907,   450,   451,   452,  1055,  1056,  1057,   453,
   454,   455,   456,   457,   330,   331,   332,   333,   334,   458,
   335,   336,   337,   338,   339,   340,   341,   342,   343,   460,
  1078,  1079,  1080,   461,   344,   462,   947,   332,   333,   334,
   464,   335,   336,   337,   338,   339,   340,   341,   342,   343,
  1126,   514,   344,   526,   517,   344,   527,   528,   726,   557,
   562,   568,   576,   604,   140,   358,   607,   608,   613,   616,
   142,   619,   529,   626,  1272,   145,  1117,   627,   628,   629,
   148,  1123,   359,   630,   631,   632,   633,   634,   635,   636,
  1156,   637,   649,   877,   638,  1114,   639,  1127,   640,   641,
   642,   643,   644,   645,   646,   647,   648,   886,   330,   331,
   332,   333,   334,   650,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   651,   652,  1145,  1146,  1147,   344,   653,
  1223,   654,   655,   721,   735,   900,  1155,  1157,  1158,  1159,
  1160,   658,   722,   659,   660,   723,   734,   924,   925,   926,
   739,   724,   741,   773,  1338,  1179,  1180,   744,   745,   746,
   748,   750,   751,   760,   781,   782,   794,  1191,   795,   586,
  1194,   798,   799,   800,   802,   589,   953,   809,   803,   840,
  1204,   810,   811,   812,   813,   962,   814,  1211,  1212,  1213,
   815,   816,   817,   818,  1218,   819,   820,   821,  1222,   822,
   823,   824,   825,   826,  1226,  1227,   333,   334,   827,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   828,   829,
  1239,   830,   831,   344,   832,   833,   834,  1243,   835,   836,
   330,   331,   332,   333,   334,   837,   335,   336,   337,   338,
   339,   340,   341,   342,   343,   852,   838,   839,   841,  1254,
   344,   330,   331,   332,   333,   334,   842,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   862,   850,   878,   867,
   848,   344,  1269,   849,  1270,   875,  1435,   876,   870,   879,
   882,   956,   889,   891,   902,   903,   887,   888,   904,   890,
   905,   892,   893,   330,   331,   332,   333,   334,   901,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   908,   909,
   910,  1296,   911,   344,   912,   932,  1300,  1465,   913,   914,
   915,   916,   917,   943,   918,   919,   927,   933,   936,   937,
  1307,   941,   948,   949,   950,   954,   955,  1310,  1311,   938,
   939,   957,  1318,   942,  1324,   958,  1327,  1492,  1330,  1331,
   961,   963,   964,   967,  1334,   968,   969,   970,   971,   980,
   959,   960,   981,  1343,   586,   982,   965,   966,   983,   984,
   589,  1351,   990,   972,   985,   979,  1356,   987,   988,  1359,
   995,  1005,  1007,  1362,  1363,  1014,  1013,  1135,  1020,  1136,
  1028,  1366,  1030,  1031,  1039,  1051,  1533,  1052,  1053,  1374,
  1054,   316,   317,  1375,  1058,  1071,  1072,  1081,  1082,  1083,
  1087,  1088,  1089,  1090,  1091,  1549,  1077,  1092,  1097,  1093,
  1094,  1096,  1166,  1098,  1169,  1099,  1172,  1100,  1115,  1101,
  1027,  1560,  1029,  1102,  1103,  1104,  1015,  1105,  1106,  1107,
  1108,  1109,  1111,  1036,  1037,  1038,  1128,  1123,  1110,  1042,
  1043,  1044,  1045,  1046,  1047,  1048,  1112,  1113,  1129,  1124,
  1139,  1131,  1137,  1419,  1138,  1142,  1143,  1144,  1148,  1424,
  1149,  1150,  1428,   330,   331,   332,   333,   334,  1151,   335,
   336,   337,   338,   339,   340,   341,   342,   343,  1152,  1153,
  1154,  1167,  1170,   344,  1173,  1450,  1175,  1451,  1176,  1177,
  1178,  1184,  1181,  1193,  1235,  1196,  1197,  1198,  1200,    99,
   315,  1199,  1203,  1500,  1202,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,  1205,
  1206,  1245,  1207,  1209,  1208,  1215,  1216,  1219,  1220,  1236,
  1125,  1229,  1221,  1232,  1233,  1242,    99,   315,  1234,  1538,
  1237,  1541,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,  1238,  1248,  1253,  1273,
  1268,  1255,  1563,  1257,   330,   331,   332,   333,   334,  1532,
   335,   336,   337,   338,   339,   340,   341,   342,   343,  1259,
   132,   133,   134,   135,   344,  1261,  1267,  1275,  1185,  1319,
  1276,  1325,  1277,  1328,  1278,  1279,  1195,  1281,  1282,  1283,
  1287,  1288,  1289,  1558,  1559,  1246,  1292,  1301,  1291,  1294,
  1332,  1304,  1339,  1302,  1342,  1214,  1344,  1347,  1346,  1348,
  1360,  1570,  1349,  1350,  1352,  1354,  1355,   132,   133,   134,
   135,  1228,   330,   331,   332,   333,   334,   561,   335,   336,
   337,   338,   339,   340,   341,   342,   343,  1357,  1358,   386,
   140,   141,   344,  1361,  1365,  1367,   142,  1369,  1370,  1373,
  1378,   145,  1410,  1399,   752,  1417,   148,  1379,   753,   330,
   331,   332,   333,   334,  1390,   335,   336,   337,   338,   339,
   340,   341,   342,   343,  1391,  1393,  1394,  1247,  1395,   344,
  1396,  1397,  1402,  1406,  1421,  1412,  1422,   140,   141,  1425,
  1426,  1429,  1392,   142,  1430,  1431,  1434,  1440,   145,  1441,
  1442,   896,  1400,   148,  1404,   897,    99,   558,  1444,  1456,
  1445,  1446,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,  1447,  1452,  1458,  1464,
  1459,  1461,  1463,  1466,  1467,  1468,  1469,  1470,  1471,  1472,
  1308,  1309,  1476,   330,   331,   332,   333,   334,  1473,   335,
   336,   337,   338,   339,   340,   341,   342,   343,  1333,  1477,
  1478,  1479,  1337,   344,  1481,  1485,  1488,  1495,  1491,  1496,
  1498,  1512,  1502,   330,   331,   332,   333,   334,  1353,   335,
   336,   337,   338,   339,   340,   341,   342,   343,  1503,  1517,
  1514,  1518,  1515,   344,  1505,    99,   315,   132,   133,   134,
   135,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   330,   331,   332,   333,   334,
  1509,   335,   336,   337,   338,   339,   340,   341,   342,   343,
   330,   331,   332,   333,   334,   344,   335,   336,   337,   338,
   339,   340,   341,   342,   343,  1511,  1513,  1516,  1522,  1413,
   344,   620,  1414,  1415,  1521,  1523,  1526,   140,   141,  1527,
  1420,  1529,  1531,   142,  1536,  1537,  1539,  1542,   145,  1544,
  1547,  1432,  1433,   148,  1554,   559,  1555,   740,  1550,  1551,
  1556,  1557,  1564,  1567,  1568,  1569,   132,   133,   134,   135,
  1571,  1572,  1576,  1577,  1453,  1454,  1455,  1578,  1580,  1581,
  1583,    99,   100,   101,  1585,   102,  1587,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,  1588,   127,   128,   129,   130,  1590,  1591,   131,  1483,
   846,  1130,  1407,    78,  1490,    86,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1315,  1316,     0,     0,
     0,     0,   142,     0,     0,     0,   899,  1317,     0,     0,
     0,     0,   148,     0,   187,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1525,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1535,     0,     0,
     0,     0,   132,   133,   134,   135,     0,   330,   331,   332,
   333,   334,   945,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,     0,  1562,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,  1573,
     0,     0,     0,   344,     0,     0,     0,  1579,   136,   137,
   138,   139,  1582,     0,  1584,     0,     0,     0,     0,     0,
     0,     0,   140,   141,     0,     0,     0,     0,   142,   143,
   144,     0,     0,   145,     0,   146,     0,   147,   148,    99,
   356,     0,     0,     0,     0,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,   330,   331,   332,   333,   334,   357,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,     0,     0,     0,     0,     0,    45,
    46,    47,    48,    49,    50,     0,     0,     0,     0,     0,
     0,     0,    56,    57,     0,     0,     0,     0,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   132,   133,   134,   135,    99,   315,   221,     0,     0,     0,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,     0,   127,   128,   129,   130,    99,
   315,   131,     0,     0,     0,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
   140,   518,     0,     0,     0,     0,   142,     0,     0,     0,
     0,   145,     0,     0,     0,     0,   148,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    99,   558,   132,   133,   134,   135,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,     0,     0,     0,     0,     0,     0,
   132,   133,   134,   135,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   596,    28,    29,
   597,   598,    32,   599,    34,   229,    35,     0,    37,    38,
    39,     0,    41,    42,     0,   140,   141,     0,    44,     0,
     0,   142,     0,     0,     0,     0,   145,     0,     0,     0,
    55,   148,     0,     0,     0,     0,     0,     0,     0,    59,
    60,    61,     0,     0,   132,   133,   134,   135,     0,     0,
   140,   141,     0,     0,     0,     0,   142,    71,     0,     0,
     0,   145,     0,     0,     0,     0,   148,     0,     0,   230,
   231,   232,     0,     0,     0,     0,     0,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,     0,     0,     0,
    -7,     1,     0,   -12,   -55,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,     0,   253,   254,   255,   256,
   257,   258,     0,     0,   140,   141,     0,     0,     0,     0,
   142,     0,     0,   -55,     0,   145,     0,     0,   -55,   -55,
   148,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,   600,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,
   -55,   -55,   -55,   -55,   -55,     0,   -55,   -55,     0,     0,
     0,     0,   -55,   -55,   -55,   -55,     0,     0,     0,     0,
   -55,     0,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   596,    28,    29,   597,   598,    32,
   599,    34,     0,    35,     0,    37,    38,    39,     0,    41,
    42,     0,     0,     0,     0,    44,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,   -12,     0,     0,     0,    55,     0,     0,
     0,     0,     0,     0,     0,     0,    59,    60,    61,     0,
     0,    -7,    -7,     0,    -7,     0,   596,    28,    29,   597,
   598,    32,   599,    34,    71,    35,     0,    37,    38,    39,
     0,    41,    42,     0,     0,     0,     0,    44,     0,     0,
     0,   596,    28,    29,   597,   598,    32,   599,    34,    55,
    35,     0,    37,    38,    39,     0,    41,    42,    59,    60,
    61,     0,    44,     0,     0,     0,   596,    28,    29,   597,
   598,    32,   599,    34,    55,    35,    71,    37,    38,    39,
     0,    41,    42,    59,    60,    61,     0,    44,     0,     0,
     0,     0,     0,    23,     0,     0,     0,     0,     0,    55,
     0,    71,     0,     0,     0,     0,     0,     0,    59,    60,
    61,     0,     0,     0,     0,     0,   606,     0,     0,     0,
     0,     0,    24,     0,     0,     0,    71,    25,    26,     0,
    27,    28,    29,    30,    31,    32,    33,    34,     0,    35,
    36,    37,    38,    39,    40,    41,    42,     0,     0,     0,
    43,    44,    45,    46,    47,    48,    49,    50,     0,    51,
    52,    53,    54,    55,     0,    56,    57,     0,   623,     0,
     0,    58,    59,    60,    61,     0,     0,     0,     0,    62,
     0,    63,     0,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,   624,   596,    28,    29,   597,   598,    32,
   599,    34,     0,    35,     0,    37,    38,    39,     0,    41,
    42,     0,     0,     0,     0,    44,     0,     0,   805,     0,
     0,     0,     0,     0,     0,     0,     0,    55,     0,     0,
     0,     0,     0,     0,     0,     0,    59,    60,    61,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,    71,     0,     0,     0,     0,   344,
     0,     0,     0,     0,     0,     0,  1163,     0,  1164,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,     0,     0,     0,  1186,     0,  1187,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,     0,     0,     0,  1313,     0,  1314,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,   761,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,   766,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,   767,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
   775,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,   777,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,   895,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,   923,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1161,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1249,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1250,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1335,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1336,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1371,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1372,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1376,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1382,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1385,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1388,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1389,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1416,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1457,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1460,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1462,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1475,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1566,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1575,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   516,     0,     0,     0,     0,
   582,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   547,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   582,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   583,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   617,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,   697,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   698,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   711,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   712,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   713,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,   714,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   715,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   716,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   784,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   785,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,   786,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   885,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   921,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   922,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   944,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1069,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1070,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1084,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1085,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1118,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1119,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1134,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1141,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1244,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1251,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1252,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1262,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1263,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1271,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1274,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1285,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1290,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1293,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1297,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1298,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1305,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1306,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1398,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1409,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1411,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1548,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1565,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   522,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   661,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   676,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   678,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   680,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   682,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   684,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   686,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   688,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   690,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   692,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   694,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   696,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   700,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   702,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   704,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   706,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   708,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   710,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   787,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   793,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   796,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   797,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   866,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   997,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,   999,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,  1001,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,  1003,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,  1004,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,     0,  1132,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   516,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   548,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   549,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   550,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   552,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   554,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   555,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   563,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   611,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   612,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   615,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   621,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   675,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   677,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   679,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   681,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   683,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   685,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   687,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   689,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   691,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   693,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   695,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   699,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   701,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   703,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   705,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   707,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   709,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   747,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   749,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   762,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   763,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   764,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   768,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   769,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   770,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   771,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   772,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   774,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   776,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   801,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   808,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   996,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   998,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
  1000,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,  1002,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,  1008,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,  1073,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,  1162,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,  1190,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,  1280,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,  1284,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,  1286,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,  1368,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
  1401,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,  1403,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,  1405,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,  1408,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,  1474,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344
};

static const short yycheck[] = {    23,
   228,   392,    72,    73,    97,     4,   323,   737,     4,   196,
     4,     4,   199,     4,     6,     4,  1322,     3,    45,   359,
  1326,    23,     4,  1329,     4,     4,     4,     4,     6,    87,
  1074,  1075,    69,    69,    69,   222,    70,   224,  1181,   155,
     7,    75,    70,     3,     4,     6,     5,    75,     6,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    44,    45,    34,    35,    36,    37,   174,
   175,    40,    78,    79,    80,    81,     6,    78,    79,    80,
    81,    52,     7,     4,   174,   175,     6,   192,    70,     6,
    70,   185,     6,    75,    70,    75,   174,   175,   192,    75,
   185,   191,   187,   193,    70,    70,   140,   141,   142,    75,
    75,   145,   146,     6,   192,   149,     6,   185,    70,     6,
     7,  1274,   156,    75,   158,   159,   160,   321,   162,     6,
   164,   165,    52,   167,   104,   105,   106,   107,   878,   185,
   185,     6,  1091,   174,   175,   192,   192,    41,   185,   193,
    44,  1100,   186,   187,  1259,   193,  1261,    70,  1107,   181,
   182,   192,    75,     6,  1480,   359,   185,   189,  1484,    90,
    91,  1487,    70,   207,   208,  1229,   210,    75,   212,   175,
   185,   215,   216,   160,   161,   162,   163,   193,   192,   427,
   192,   185,   193,   192,   185,   522,   546,     6,   185,   187,
   192,   192,   192,   192,   174,   175,   174,   175,  1524,   559,
   180,   193,  1528,   193,  1530,   185,    69,   193,   188,   416,
   190,     7,   192,   192,   185,   185,   187,   193,   193,   263,
   310,   311,   312,   313,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     7,   185,  1018,   185,
   193,   174,   175,     5,   174,   175,   192,   321,   185,    46,
    47,   187,     3,   189,     4,   193,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
   344,   323,    34,    35,    36,    37,   185,   351,    40,   353,
     7,    49,   186,   192,   358,   359,  1275,   191,   174,   175,
  1279,    45,   186,   367,   368,   369,   370,   191,   372,   373,
   374,   375,   376,   377,   378,   191,   380,   381,   382,   383,
   186,  1456,   546,   185,  1459,   191,  1461,   174,   175,   185,
   394,   395,   396,   397,   185,   559,   192,   185,   402,   186,
   720,   185,   406,   407,   160,   161,   162,   163,   412,     5,
    90,    91,   391,   392,   174,   175,    45,   421,   391,   392,
   174,   175,   186,   174,   175,   181,   182,   191,   181,   182,
  1505,   191,    45,   753,  1509,   186,  1511,   191,    34,    35,
    36,    37,    59,    60,    40,   126,   127,   128,   129,   130,
   131,   132,   133,    45,     4,     5,   183,    47,   185,   160,
   161,   162,   163,     5,   191,     6,     7,   186,   788,   789,
   790,   791,   191,   523,     6,   185,  1395,  1396,  1397,  1398,
   181,   182,   464,  1402,    34,    35,    36,    37,   189,   185,
    40,   187,    34,    35,    36,    37,   174,   175,    40,   192,
   192,   174,   175,   160,   161,   162,   163,   151,   152,   192,
   154,   515,   185,   191,   518,   193,   174,   175,   186,   192,
   524,   174,   175,   191,   181,   182,  1236,   174,   175,   174,
   175,   186,   191,   191,   193,   193,   191,    45,   191,   266,
   522,     6,   546,   547,   191,     6,   191,  1466,  1467,   174,
   175,  1470,   556,   557,   185,   559,   720,   561,   562,   174,
   175,   185,     4,   727,   568,   185,   191,   174,   175,    44,
    45,     4,    47,   870,   871,     4,   191,   897,   582,   583,
     6,     4,   181,   182,   191,   181,   182,   591,   187,   753,
   189,    41,   185,   189,    44,    45,  1515,     8,     4,   603,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    45,
   185,   661,   187,   617,   184,   619,   620,   166,   174,   175,
   176,   177,   178,   172,   788,   789,   790,   791,   184,     5,
   185,  1550,   164,   165,   166,   167,   168,   185,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   185,   197,   187,
  1569,   185,   184,   202,   203,    63,    64,    65,    66,   185,
    68,   187,   389,   390,   181,   182,  1585,   185,    76,    77,
   187,   721,   189,   185,   181,   182,   176,   177,   178,   661,
   187,   185,   189,   187,   184,     4,   185,  1058,   187,   181,
   182,     6,     6,   697,   698,   187,    41,   189,     5,    44,
    45,   185,    47,   187,   185,   185,   187,   711,   712,   713,
   714,   715,   716,   717,   185,   185,   720,   187,   192,   185,
   724,   187,   185,   727,   187,   185,   730,   111,   112,   113,
   114,   115,   185,   897,   187,   192,   740,   185,   185,   187,
   187,   185,   185,   187,   187,   185,   185,   187,   187,   753,
   185,   755,   187,   164,   165,   166,   167,   168,   185,   170,
   171,   172,   173,   174,   175,   176,   177,   178,     8,   842,
   191,   185,   193,   184,   191,   191,   193,   193,   191,   191,
   193,   193,   193,   192,   788,   789,   790,   791,   185,   185,
   794,   795,   191,   191,   193,   193,   800,   191,   191,   193,
   193,     4,   185,     3,     4,   185,   185,   811,   812,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   191,   191,   193,   193,   191,   191,   193,
   193,    41,   192,   192,   848,   849,   192,   191,   191,   193,
   193,   191,   187,   193,   581,   191,   187,   193,   187,     6,
     6,   189,   192,    63,    64,    65,    66,    67,    68,    93,
     6,     6,   185,     6,  1082,   879,    76,    77,     3,   185,
   185,   885,  1253,   185,   866,   185,   185,   185,   185,   871,
   185,   185,   185,   897,   185,   899,   185,   901,   185,   185,
   185,   185,   185,   185,   104,   105,   106,   107,   185,   185,
   185,   185,    58,   185,   185,   185,   920,   921,   922,   185,
   185,   185,   185,   185,   164,   165,   166,   167,   168,     5,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   191,
   944,   945,   946,   186,   184,   191,   186,   166,   167,   168,
     4,   170,   171,   172,   173,   174,   175,   176,   177,   178,
  1010,     5,   184,   189,     7,   184,     7,   187,   517,   192,
     7,     7,   186,     6,   174,   175,     7,     7,    88,    90,
   180,   192,     6,     5,  1192,   185,   990,     5,     5,     5,
   190,   995,   192,     5,     5,     5,     5,     5,     5,     5,
  1050,     5,   144,     6,     5,   987,     5,  1011,     5,     5,
     5,     5,     5,     5,     5,     5,     5,   744,   164,   165,
   166,   167,   168,     5,   170,   171,   172,   173,   174,   175,
   176,   177,   178,     5,     5,  1039,  1040,  1041,   184,     5,
  1113,     3,     5,   191,     4,     6,  1050,  1051,  1052,  1053,
  1054,     5,   186,     6,     5,   186,     6,   784,   785,   786,
   188,   191,     6,   189,  1272,  1069,  1070,     7,     7,     7,
     7,     7,     7,     7,   193,   193,   192,  1081,   192,  1058,
  1084,     7,     7,   185,     7,  1058,   813,   156,   189,     5,
  1094,   191,   191,   191,   191,   822,   191,  1101,  1102,  1103,
   191,   191,   191,   191,  1108,   191,   191,   191,  1112,   191,
   191,   191,   191,   191,  1118,  1119,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   191,   191,
  1134,   191,   191,   184,   191,   191,   191,  1141,   191,   191,
   164,   165,   166,   167,   168,   191,   170,   171,   172,   173,
   174,   175,   176,   177,   178,     6,   191,   191,   186,  1163,
   184,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,     4,   192,     7,     6,
   185,   184,  1186,   185,  1188,     6,  1394,     6,   188,   187,
     6,   176,     7,     7,     7,     7,   745,   746,     7,   748,
     7,   750,   751,   164,   165,   166,   167,   168,   192,   170,
   171,   172,   173,   174,   175,   176,   177,   178,     7,     7,
     7,  1225,     7,   184,     7,     6,  1230,  1435,     7,     7,
     4,     7,     7,     4,     7,     7,     6,     6,     6,     6,
  1244,     7,     7,   157,     3,     3,     3,  1251,  1252,   798,
   799,     3,  1256,   802,  1258,     3,  1260,  1465,  1262,  1263,
     3,     3,     3,     3,  1268,     3,     3,     3,     3,     3,
   819,   820,     5,  1277,  1253,     5,   825,   826,     3,     3,
  1253,  1285,   185,   832,     6,   834,  1290,     4,     6,  1293,
   192,   186,   186,  1297,  1298,     7,   189,  1024,     6,  1026,
     6,  1305,     6,     6,   185,   192,  1514,   192,   192,  1313,
   192,  1315,  1316,  1317,   192,     6,     6,   192,   153,   191,
   191,   186,   191,   186,   191,  1533,    89,   186,   186,   191,
   191,   191,  1059,   186,  1061,   191,  1063,   191,     6,   191,
   889,  1549,   891,   191,   191,   191,     6,   186,   191,   191,
   191,   191,   186,   902,   903,   904,     6,  1361,   191,   908,
   909,   910,   911,   912,   913,   914,   191,   191,     4,   189,
   188,     6,     6,  1377,     6,     6,     6,     6,     6,  1383,
     6,     6,  1386,   164,   165,   166,   167,   168,     6,   170,
   171,   172,   173,   174,   175,   176,   177,   178,     6,     6,
     6,     6,     6,   184,     6,  1409,     6,  1411,     6,     6,
     6,    89,     7,     3,     6,     6,     3,     6,     6,     3,
     4,   176,     3,  1473,     6,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     6,
     3,     6,     6,     3,     6,     6,     3,     3,     3,     7,
  1009,   192,     6,     4,     6,   188,     3,     4,     6,  1519,
     6,  1521,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   189,     6,   192,   186,
    86,   193,  1552,   192,   164,   165,   166,   167,   168,  1513,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   192,
   104,   105,   106,   107,   184,   192,   192,   191,  1077,  1256,
   191,  1258,   191,  1260,   186,   191,  1085,   191,   186,   186,
   191,   186,   186,  1547,  1548,     6,   186,     6,   191,   191,
    89,    91,     6,   186,     3,  1104,     6,     3,     6,     6,
     5,  1565,     6,     6,     6,     6,     6,   104,   105,   106,
   107,  1120,   164,   165,   166,   167,   168,     8,   170,   171,
   172,   173,   174,   175,   176,   177,   178,     3,     6,  1316,
   174,   175,   184,   192,     6,     5,   180,     6,     6,   193,
     6,   185,     6,   186,   188,     6,   190,   192,   192,   164,
   165,   166,   167,   168,   192,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   191,   193,   153,     6,   191,   184,
   191,   191,   191,   191,     6,   191,     6,   174,   175,     6,
     6,     6,     6,   180,     6,     6,     6,     6,   185,     6,
     6,   188,   186,   190,   186,   192,     3,     4,     6,   192,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     5,     5,   191,   193,
   192,   192,   191,   191,   191,   186,   186,   191,   191,     6,
  1249,  1250,   191,   164,   165,   166,   167,   168,   192,   170,
   171,   172,   173,   174,   175,   176,   177,   178,  1267,     6,
     6,     6,  1271,   184,     6,     6,     6,     6,    86,     6,
     5,   193,     6,   164,   165,   166,   167,   168,  1287,   170,
   171,   172,   173,   174,   175,   176,   177,   178,     5,   186,
   153,   186,   191,   184,   192,     3,     4,   104,   105,   106,
   107,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   164,   165,   166,   167,   168,
   192,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   164,   165,   166,   167,   168,   184,   170,   171,   172,   173,
   174,   175,   176,   177,   178,   192,   192,   191,   193,  1368,
   184,     8,  1371,  1372,   192,     6,     6,   174,   175,     6,
  1379,     6,    86,   180,     6,     6,     6,     6,   185,   193,
   192,  1390,  1391,   190,     6,   192,     6,     8,   191,   191,
     6,     6,     6,   158,   191,   191,   104,   105,   106,   107,
     6,   159,   191,   186,  1413,  1414,  1415,     6,     6,   191,
   191,     3,     4,     5,   191,     7,   186,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     6,    34,    35,    36,    37,     0,     0,    40,  1458,
   663,  1014,  1361,     4,  1463,     4,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,    -1,    -1,
    -1,    -1,   180,    -1,    -1,    -1,     8,   185,    -1,    -1,
    -1,    -1,   190,    -1,   192,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1506,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1516,    -1,    -1,
    -1,    -1,   104,   105,   106,   107,    -1,   164,   165,   166,
   167,   168,     8,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
    -1,    -1,  1551,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,  1568,
    -1,    -1,    -1,   184,    -1,    -1,    -1,  1576,   160,   161,
   162,   163,  1581,    -1,  1583,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   174,   175,    -1,    -1,    -1,    -1,   180,   181,
   182,    -1,    -1,   185,    -1,   187,    -1,   189,   190,     3,
     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,   164,   165,   166,   167,   168,    41,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,    63,
    64,    65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   104,   105,   106,   107,     3,     4,     5,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    34,    35,    36,    37,     3,
     4,    40,    -1,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
   174,   175,    -1,    -1,    -1,    -1,   180,    -1,    -1,    -1,
    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,     4,   104,   105,   106,   107,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    44,    50,    -1,    52,    53,
    54,    -1,    56,    57,    -1,   174,   175,    -1,    62,    -1,
    -1,   180,    -1,    -1,    -1,    -1,   185,    -1,    -1,    -1,
    74,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,
    84,    85,    -1,    -1,   104,   105,   106,   107,    -1,    -1,
   174,   175,    -1,    -1,    -1,    -1,   180,   101,    -1,    -1,
    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,   108,
   109,   110,    -1,    -1,    -1,    -1,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
     0,     1,    -1,     3,     4,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,    -1,   145,   146,   147,   148,
   149,   150,    -1,    -1,   174,   175,    -1,    -1,    -1,    -1,
   180,    -1,    -1,    33,    -1,   185,    -1,    -1,    38,    39,
   190,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    51,    52,    53,    54,    55,    56,    57,    -1,   193,
    -1,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
    70,    71,    72,    73,    74,    -1,    76,    77,    -1,    -1,
    -1,    -1,    82,    83,    84,    85,    -1,    -1,    -1,    -1,
    90,    -1,    92,    -1,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    -1,    52,    53,    54,    -1,    56,
    57,    -1,    -1,    -1,    -1,    62,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    -1,
    -1,   151,   152,    -1,   154,    -1,    41,    42,    43,    44,
    45,    46,    47,    48,   101,    50,    -1,    52,    53,    54,
    -1,    56,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    74,
    50,    -1,    52,    53,    54,    -1,    56,    57,    83,    84,
    85,    -1,    62,    -1,    -1,    -1,    41,    42,    43,    44,
    45,    46,    47,    48,    74,    50,   101,    52,    53,    54,
    -1,    56,    57,    83,    84,    85,    -1,    62,    -1,    -1,
    -1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    74,
    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,
    85,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
    -1,    -1,    33,    -1,    -1,    -1,   101,    38,    39,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    51,    52,    53,    54,    55,    56,    57,    -1,    -1,    -1,
    61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
    71,    72,    73,    74,    -1,    76,    77,    -1,   193,    -1,
    -1,    82,    83,    84,    85,    -1,    -1,    -1,    -1,    90,
    -1,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   193,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    -1,    52,    53,    54,    -1,    56,
    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,   193,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   101,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,   164,   165,   166,   167,   168,   193,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,   165,   166,
   167,   168,   193,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
    -1,   164,   165,   166,   167,   168,   193,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,    -1,    -1,   164,   165,   166,   167,   168,
   193,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,
   165,   166,   167,   168,   193,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,   164,   165,   166,   167,   168,   193,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,   165,   166,
   167,   168,   193,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
    -1,   164,   165,   166,   167,   168,   193,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,    -1,    -1,   164,   165,   166,   167,   168,
   193,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,
   165,   166,   167,   168,   193,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,   164,   165,   166,   167,   168,   193,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,   165,   166,
   167,   168,   193,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
    -1,   164,   165,   166,   167,   168,   193,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,    -1,    -1,   164,   165,   166,   167,   168,
   193,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,
   165,   166,   167,   168,   193,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,   164,   165,   166,   167,   168,   193,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,   165,   166,
   167,   168,   193,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
    -1,   164,   165,   166,   167,   168,   193,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,    -1,    -1,   164,   165,   166,   167,   168,
   193,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,
   165,   166,   167,   168,   193,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,   164,   165,   166,   167,   168,   193,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,   165,   166,
   167,   168,   193,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
    -1,   164,   165,   166,   167,   168,   193,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,    -1,    -1,   164,   165,   166,   167,   168,
   193,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,   164,
   165,   166,   167,   168,   193,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,    -1,    -1,   164,   165,   166,   167,   168,   193,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,    -1,    -1,    -1,    -1,
   191,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   164,   165,   166,   167,   168,
   191,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,   165,   166,
   167,   168,   191,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   164,
   165,   166,   167,   168,   191,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   164,   165,   166,   167,   168,   191,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   164,   165,   166,   167,   168,   191,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,    -1,    -1,   188,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
    -1,    -1,   188,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,
   168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   186,   164,   165,   166,   167,   168,    -1,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,   168,
    -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   164,   165,   166,   167,   168,    -1,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,
   167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
   164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,
   168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   186,   164,   165,   166,   167,   168,    -1,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,   168,
    -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   164,   165,   166,   167,   168,    -1,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,
   167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
   164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,
   168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   186,   164,   165,   166,   167,   168,    -1,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,   168,
    -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   164,   165,   166,   167,   168,    -1,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,
   167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
   164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,
   168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   186,   164,   165,   166,   167,   168,    -1,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,   168,
    -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   164,   165,   166,   167,   168,    -1,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,
   167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
   164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,
   168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   186,   164,   165,   166,   167,   168,    -1,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,   168,
    -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   164,   165,   166,   167,   168,    -1,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,
   167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
   164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,
   168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,
   165,   166,   167,   168,    -1,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,
    -1,   186,   164,   165,   166,   167,   168,    -1,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,   184,    -1,   186,   164,   165,   166,   167,   168,
    -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,
   166,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   164,   165,   166,   167,   168,    -1,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,   184,    -1,   186,   164,   165,   166,
   167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
   164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   164,   165,   166,   167,   168,    -1,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,   184
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 163 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 169 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 170 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 180 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 193 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 199 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 218 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 219 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 225 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 230 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 241 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 244 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 248 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 254 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 260 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 267 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 273 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 277 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 281 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 288 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 292 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 297 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 301 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 309 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 313 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 317 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 321 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 325 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 331 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 337 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 341 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 345 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 349 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 353 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 358 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 365 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 372 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 375 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 394 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 395 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 399 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 408 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 413 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 431 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 438 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 448 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 81:
#line 463 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 82:
#line 465 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 83:
#line 470 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 84:
#line 472 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 85:
#line 477 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 86:
#line 667 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 87:
#line 685 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 88:
#line 696 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 89:
#line 701 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 90:
#line 709 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 91:
#line 716 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 92:
#line 723 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 93:
#line 728 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 94:
#line 736 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 95:
#line 743 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 96:
#line 751 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 97:
#line 758 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 98:
#line 762 "Gmsh.y"
{
    ;
    break;}
case 99:
#line 769 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 100:
#line 770 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 101:
#line 771 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 102:
#line 772 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 103:
#line 773 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 104:
#line 777 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 105:
#line 778 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 106:
#line 786 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 107:
#line 817 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 108:
#line 856 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 109:
#line 910 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 110:
#line 927 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 111:
#line 938 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 112:
#line 957 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 113:
#line 971 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 114:
#line 988 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 115:
#line 1014 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 116:
#line 1041 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 117:
#line 1055 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 118:
#line 1072 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 119:
#line 1086 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 120:
#line 1103 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 121:
#line 1123 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 122:
#line 1146 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 123:
#line 1156 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 124:
#line 1175 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 125:
#line 1191 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 126:
#line 1207 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 127:
#line 1226 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 128:
#line 1245 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 129:
#line 1263 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 130:
#line 1281 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 131:
#line 1299 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 132:
#line 1325 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 133:
#line 1343 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 134:
#line 1370 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 135:
#line 1389 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 136:
#line 1413 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 137:
#line 1437 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 138:
#line 1463 "Gmsh.y"
{
      // define a new line
      int num = (int)yyvsp[-7].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_DISCRETE, 1, NULL, NULL, -1, -1, 0, 1);
	c->theSegmRep = new SEGM_rep((int)yyvsp[-3].d, yyvsp[-1].l);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 139:
#line 1480 "Gmsh.y"
{
      // add a poly rep to an existing line
      int num = (int)yyvsp[-7].d, type = 0;
      Curve *c = FindCurve(num, THEM);
      if(!c) {
	yymsg(GERROR, "Unknown curve %d", num);
	List_Delete(yyvsp[-1].l);
      }
      else{
	c->theSegmRep = new SEGM_rep((int)yyvsp[-3].d, yyvsp[-1].l);
	type = c->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 140:
#line 1496 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 141:
#line 1513 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 142:
#line 1531 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 143:
#line 1550 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 144:
#line 1569 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 145:
#line 1608 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 146:
#line 1634 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 147:
#line 1654 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 148:
#line 1673 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 149:
#line 1691 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 150:
#line 1710 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 151:
#line 1727 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 152:
#line 1743 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 153:
#line 1763 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 154:
#line 1780 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 155:
#line 1797 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 156:
#line 1818 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 157:
#line 1823 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 158:
#line 1828 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 159:
#line 1833 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 160:
#line 1840 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 161:
#line 1841 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 162:
#line 1842 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 163:
#line 1847 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 164:
#line 1851 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 165:
#line 1855 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 166:
#line 1871 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 167:
#line 1887 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 168:
#line 1903 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 169:
#line 1924 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 170:
#line 1938 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 171:
#line 1944 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 172:
#line 1950 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 173:
#line 1962 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 174:
#line 1971 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 175:
#line 1981 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 176:
#line 1991 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 177:
#line 2010 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 178:
#line 2024 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 179:
#line 2032 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 180:
#line 2038 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 181:
#line 2049 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 182:
#line 2063 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 183:
#line 2107 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 184:
#line 2122 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 185:
#line 2138 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 186:
#line 2148 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 187:
#line 2159 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 188:
#line 2163 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 189:
#line 2167 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 190:
#line 2171 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 191:
#line 2184 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 192:
#line 2199 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 193:
#line 2215 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 194:
#line 2241 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 195:
#line 2268 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 196:
#line 2300 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 197:
#line 2307 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 198:
#line 2312 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 199:
#line 2318 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 200:
#line 2322 "Gmsh.y"
{
    ;
    break;}
case 201:
#line 2333 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 202:
#line 2349 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 203:
#line 2365 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 204:
#line 2381 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 205:
#line 2386 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 206:
#line 2402 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 207:
#line 2407 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 208:
#line 2423 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 209:
#line 2428 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 210:
#line 2446 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 211:
#line 2469 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 212:
#line 2492 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 213:
#line 2515 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 214:
#line 2520 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 215:
#line 2543 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 216:
#line 2548 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 217:
#line 2571 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 218:
#line 2576 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 219:
#line 2602 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 220:
#line 2625 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 221:
#line 2648 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 222:
#line 2671 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 223:
#line 2676 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 224:
#line 2699 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 225:
#line 2705 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 226:
#line 2728 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 227:
#line 2734 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 228:
#line 2760 "Gmsh.y"
{
    ;
    break;}
case 229:
#line 2763 "Gmsh.y"
{
    ;
    break;}
case 230:
#line 2769 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 231:
#line 2795 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 232:
#line 2819 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 233:
#line 2828 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 234:
#line 2846 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 235:
#line 2864 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 236:
#line 2882 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 237:
#line 2909 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 238:
#line 2935 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 239:
#line 2961 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 240:
#line 2975 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 241:
#line 2994 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 242:
#line 2998 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 243:
#line 3007 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 244:
#line 3008 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 245:
#line 3009 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 246:
#line 3010 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 247:
#line 3011 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 248:
#line 3015 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 249:
#line 3016 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 250:
#line 3017 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 251:
#line 3018 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 252:
#line 3019 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 253:
#line 3020 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 254:
#line 3021 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 255:
#line 3022 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 256:
#line 3024 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 257:
#line 3030 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 258:
#line 3031 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 259:
#line 3032 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 260:
#line 3033 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 261:
#line 3034 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 262:
#line 3035 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 263:
#line 3036 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 264:
#line 3037 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 265:
#line 3038 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 266:
#line 3039 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 267:
#line 3040 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 268:
#line 3041 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 269:
#line 3042 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 270:
#line 3043 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 271:
#line 3044 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 272:
#line 3045 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 273:
#line 3046 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 274:
#line 3047 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 275:
#line 3048 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 276:
#line 3049 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 277:
#line 3050 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 278:
#line 3051 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 279:
#line 3052 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 3053 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 3054 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 282:
#line 3055 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 283:
#line 3056 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 284:
#line 3057 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 285:
#line 3058 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 286:
#line 3059 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 287:
#line 3060 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 288:
#line 3061 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 289:
#line 3063 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 290:
#line 3064 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 291:
#line 3065 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 292:
#line 3066 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 293:
#line 3067 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 294:
#line 3068 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 295:
#line 3069 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 296:
#line 3070 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 297:
#line 3071 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 298:
#line 3072 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 299:
#line 3073 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 300:
#line 3074 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 301:
#line 3075 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 302:
#line 3076 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 303:
#line 3077 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 304:
#line 3078 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 305:
#line 3079 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 306:
#line 3080 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 307:
#line 3081 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 308:
#line 3082 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 309:
#line 3083 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 310:
#line 3092 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 311:
#line 3093 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 312:
#line 3094 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 313:
#line 3095 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 314:
#line 3096 "Gmsh.y"
{ yyval.d = GMSH_MAJOR_VERSION; ;
    break;}
case 315:
#line 3097 "Gmsh.y"
{ yyval.d = GMSH_MINOR_VERSION; ;
    break;}
case 316:
#line 3098 "Gmsh.y"
{ yyval.d = GMSH_PATCH_VERSION; ;
    break;}
case 317:
#line 3103 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 318:
#line 3116 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 319:
#line 3136 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 320:
#line 3150 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 321:
#line 3163 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 322:
#line 3186 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 323:
#line 3204 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 324:
#line 3222 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 325:
#line 3240 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 326:
#line 3258 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 327:
#line 3266 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 328:
#line 3270 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 329:
#line 3274 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 330:
#line 3278 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 331:
#line 3282 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 332:
#line 3289 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 333:
#line 3293 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 334:
#line 3297 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 335:
#line 3301 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 336:
#line 3308 "Gmsh.y"
{
    ;
    break;}
case 337:
#line 3311 "Gmsh.y"
{
    ;
    break;}
case 338:
#line 3317 "Gmsh.y"
{
    ;
    break;}
case 339:
#line 3320 "Gmsh.y"
{
    ;
    break;}
case 340:
#line 3326 "Gmsh.y"
{
    ;
    break;}
case 341:
#line 3329 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 342:
#line 3333 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 343:
#line 3340 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 344:
#line 3345 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 345:
#line 3353 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 346:
#line 3358 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 347:
#line 3362 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 348:
#line 3366 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 349:
#line 3378 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 350:
#line 3384 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 351:
#line 3395 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 352:
#line 3415 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 353:
#line 3425 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 354:
#line 3435 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 355:
#line 3447 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 356:
#line 3464 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 357:
#line 3483 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 358:
#line 3507 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 359:
#line 3536 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 360:
#line 3541 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 361:
#line 3545 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 362:
#line 3549 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 363:
#line 3562 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 364:
#line 3566 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 365:
#line 3578 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 366:
#line 3585 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 367:
#line 3607 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 368:
#line 3611 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 369:
#line 3626 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 370:
#line 3631 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 371:
#line 3638 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 372:
#line 3642 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 373:
#line 3650 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 374:
#line 3658 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 375:
#line 3672 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 376:
#line 3686 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 377:
#line 3690 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 378:
#line 3709 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 379:
#line 3731 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3754 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
