
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tCombine	352
#define	tBSpline	353
#define	tBezier	354
#define	tNurbs	355
#define	tOrder	356
#define	tWith	357
#define	tBounds	358
#define	tKnots	359
#define	tColor	360
#define	tColorTable	361
#define	tFor	362
#define	tIn	363
#define	tEndFor	364
#define	tIf	365
#define	tEndIf	366
#define	tExit	367
#define	tReturn	368
#define	tCall	369
#define	tFunction	370
#define	tMesh	371
#define	tTrimmed	372
#define	tB_SPLINE_SURFACE_WITH_KNOTS	373
#define	tB_SPLINE_CURVE_WITH_KNOTS	374
#define	tCARTESIAN_POINT	375
#define	tTRUE	376
#define	tFALSE	377
#define	tUNSPECIFIED	378
#define	tU	379
#define	tV	380
#define	tEDGE_CURVE	381
#define	tVERTEX_POINT	382
#define	tORIENTED_EDGE	383
#define	tPLANE	384
#define	tFACE_OUTER_BOUND	385
#define	tEDGE_LOOP	386
#define	tADVANCED_FACE	387
#define	tVECTOR	388
#define	tDIRECTION	389
#define	tAXIS2_PLACEMENT_3D	390
#define	tISO	391
#define	tENDISO	392
#define	tENDSEC	393
#define	tDATA	394
#define	tHEADER	395
#define	tFILE_DESCRIPTION	396
#define	tFILE_SCHEMA	397
#define	tFILE_NAME	398
#define	tMANIFOLD_SOLID_BREP	399
#define	tCLOSED_SHELL	400
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	401
#define	tFACE_BOUND	402
#define	tCYLINDRICAL_SURFACE	403
#define	tCONICAL_SURFACE	404
#define	tCIRCLE	405
#define	tTRIMMED_CURVE	406
#define	tGEOMETRIC_SET	407
#define	tCOMPOSITE_CURVE_SEGMENT	408
#define	tCONTINUOUS	409
#define	tCOMPOSITE_CURVE	410
#define	tTOROIDAL_SURFACE	411
#define	tPRODUCT_DEFINITION	412
#define	tPRODUCT_DEFINITION_SHAPE	413
#define	tSHAPE_DEFINITION_REPRESENTATION	414
#define	tELLIPSE	415
#define	tSolid	416
#define	tEndSolid	417
#define	tVertex	418
#define	tFacet	419
#define	tNormal	420
#define	tOuter	421
#define	tLoopSTL	422
#define	tEndLoop	423
#define	tEndFacet	424
#define	tAFFECTPLUS	425
#define	tAFFECTMINUS	426
#define	tAFFECTTIMES	427
#define	tAFFECTDIVIDE	428
#define	tOR	429
#define	tAND	430
#define	tEQUAL	431
#define	tNOTEQUAL	432
#define	tAPPROXEQUAL	433
#define	tLESSOREQUAL	434
#define	tGREATEROREQUAL	435
#define	tCROSSPRODUCT	436
#define	tPLUSPLUS	437
#define	tMINUSMINUS	438
#define	UNARYPREC	439

#line 1 "Gmsh.y"
 
// $Id: Gmsh.tab.cpp,v 1.171 2003-11-29 01:38:51 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);
 void FixRelativePath(char *in, char *out);

#line 82 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2302
#define	YYFLAG		-32768
#define	YYNTBASE	204

#define YYTRANSLATE(x) ((unsigned)(x) <= 439 ? yytranslate[x] : 337)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   191,     2,     2,     2,   189,     2,     2,   196,
   197,   187,   185,   201,   186,   200,   188,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   181,
     2,   183,   175,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   198,     2,   199,   195,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   202,     2,   203,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   176,   177,
   178,   179,   180,   182,   184,   190,   192,   193,   194
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   533,   541,
   548,   557,   558,   561,   564,   567,   570,   573,   576,   579,
   582,   585,   588,   591,   594,   597,   600,   603,   606,   609,
   612,   615,   618,   621,   624,   627,   630,   633,   636,   638,
   642,   643,   657,   659,   663,   664,   678,   680,   684,   685,
   699,   701,   705,   706,   726,   728,   732,   733,   753,   755,
   759,   760,   780,   782,   786,   787,   813,   815,   819,   820,
   846,   848,   852,   853,   879,   881,   885,   886,   918,   920,
   924,   925,   957,   959,   963,   964,   996,   998,  1002,  1003,
  1035,  1037,  1041,  1042,  1074,  1076,  1080,  1081,  1113,  1115,
  1119,  1120,  1176,  1178,  1182,  1183,  1239,  1241,  1245,  1246,
  1302,  1304,  1308,  1309,  1353,  1355,  1359,  1360,  1404,  1406,
  1410,  1411,  1455,  1457,  1461,  1462,  1500,  1502,  1506,  1507,
  1545,  1547,  1551,  1552,  1590,  1592,  1596,  1597,  1611,  1613,
  1617,  1618,  1634,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
  1653,  1661,  1671,  1678,  1682,  1689,  1696,  1706,  1713,  1723,
  1729,  1738,  1747,  1759,  1766,  1776,  1786,  1796,  1804,  1813,
  1826,  1833,  1841,  1849,  1862,  1870,  1878,  1888,  1906,  1915,
  1924,  1932,  1940,  1952,  1961,  1974,  1983,  1998,  2021,  2042,
  2051,  2060,  2069,  2077,  2086,  2092,  2104,  2110,  2120,  2122,
  2124,  2126,  2127,  2130,  2137,  2144,  2151,  2156,  2163,  2168,
  2175,  2179,  2185,  2189,  2197,  2201,  2209,  2213,  2216,  2219,
  2226,  2235,  2244,  2255,  2257,  2260,  2262,  2266,  2271,  2273,
  2282,  2295,  2310,  2311,  2324,  2325,  2342,  2343,  2362,  2371,
  2384,  2399,  2400,  2413,  2414,  2431,  2432,  2451,  2460,  2473,
  2488,  2489,  2502,  2503,  2520,  2521,  2540,  2542,  2545,  2555,
  2563,  2566,  2573,  2583,  2593,  2602,  2611,  2620,  2627,  2632,
  2635,  2638,  2640,  2642,  2644,  2646,  2648,  2650,  2654,  2657,
  2660,  2663,  2667,  2671,  2675,  2679,  2683,  2687,  2691,  2695,
  2699,  2703,  2707,  2711,  2715,  2719,  2725,  2730,  2735,  2740,
  2745,  2750,  2755,  2760,  2765,  2770,  2775,  2782,  2787,  2792,
  2797,  2802,  2807,  2812,  2819,  2826,  2833,  2838,  2843,  2848,
  2853,  2858,  2863,  2868,  2873,  2878,  2883,  2888,  2895,  2900,
  2905,  2910,  2915,  2920,  2925,  2932,  2939,  2946,  2951,  2953,
  2955,  2957,  2959,  2961,  2966,  2969,  2975,  2979,  2986,  2991,
  2999,  3001,  3004,  3007,  3011,  3015,  3027,  3037,  3045,  3053,
  3054,  3058,  3060,  3064,  3065,  3069,  3073,  3075,  3079,  3081,
  3083,  3087,  3092,  3096,  3102,  3107,  3109,  3111,  3113,  3117,
  3122,  3129,  3137,  3139,  3141,  3145,  3149,  3159,  3167,  3169,
  3175,  3179,  3186,  3188,  3192,  3194,  3201,  3206,  3211,  3218,
  3225
};

static const short yyrhs[] = {   207,
     0,   206,     0,   212,     0,     1,     6,     0,     3,     0,
   186,     3,     0,   162,     0,   165,   166,   205,   205,   205,
   167,   168,   164,   205,   205,   205,   164,   205,   205,   205,
   164,   205,   205,   205,   169,   170,     0,   163,     0,     0,
   207,   208,     0,   209,     0,   211,     0,   210,     0,   137,
     6,     0,   138,     6,     0,   140,     6,     0,   139,     6,
     0,   141,     6,     0,   142,   196,   326,   201,     5,   197,
     6,     0,   143,   196,   326,   197,     6,     0,   144,   196,
     5,   201,     5,   201,   326,   201,   326,   201,     5,   201,
     5,   201,     5,   197,     6,     0,     3,     7,   121,   196,
     5,   201,   324,   197,     6,     0,     3,     7,   120,   196,
     5,   201,   322,   201,   330,   201,   321,   201,   321,   201,
   321,   201,   330,   201,   330,   201,   321,   197,     6,     0,
     3,     7,   119,   196,     5,   201,   322,   201,   322,   201,
   328,   201,   321,   201,   321,   201,   321,   201,   321,   201,
   330,   201,   330,   201,   330,   201,   330,   201,   321,   197,
     6,     0,     3,     7,   127,   196,     5,   201,     3,   201,
     3,   201,     3,   201,   321,   197,     6,     0,     3,     7,
   131,   196,     5,   201,     3,   201,   321,   197,     6,     0,
     3,     7,   148,   196,     5,   201,     3,   201,   321,   197,
     6,     0,     3,     7,   129,   196,     5,   201,   187,   201,
   187,   201,   322,   201,   321,   197,     6,     0,     3,     7,
   132,   196,     5,   201,   330,   197,     6,     0,     3,     7,
   133,   196,     5,   201,   330,   201,     3,   201,   321,   197,
     6,     0,     3,     7,   128,   196,     5,   201,     3,   197,
     6,     0,     3,     7,   134,   196,     5,   201,     3,   201,
   322,   197,     6,     0,     3,     7,   136,   196,     5,   201,
     3,   201,     3,   201,     3,   197,     6,     0,     3,     7,
   135,   196,     5,   201,   324,   197,     6,     0,     3,     7,
   130,   196,     5,   201,     3,   197,     6,     0,     3,     7,
    41,   196,     5,   201,     3,   201,     3,   197,     6,     0,
     3,     7,   146,   196,     5,   201,   330,   197,     6,     0,
     3,     7,   147,   196,     5,   201,   330,   201,     3,   197,
     6,     0,     3,     7,   145,   196,     5,   201,     3,   197,
     6,     0,     3,     7,   149,   196,     5,   201,     3,   201,
   322,   197,     6,     0,     3,     7,   150,   196,     5,   201,
     3,   201,   322,   201,   322,   197,     6,     0,     3,     7,
   157,   196,     5,   201,     3,   201,   322,   201,   322,   197,
     6,     0,     3,     7,   151,   196,     5,   201,     3,   201,
   322,   197,     6,     0,     3,     7,   161,   196,     5,   201,
     3,   201,   322,   201,   322,   197,     6,     0,     3,     7,
   152,   196,     5,   201,     3,   201,   330,   201,   330,   201,
   321,   201,   321,   197,     6,     0,     3,     7,   153,   196,
     5,   201,   330,   197,     6,     0,     3,     7,   154,   196,
   155,   201,   321,   201,     3,   197,     6,     0,     3,     7,
   156,   196,     5,   201,   330,   201,   321,   197,     6,     0,
     3,     7,   158,   196,     5,   201,     5,   201,     3,   201,
     3,   197,     6,     0,     3,     7,   159,   196,     5,   201,
     5,   201,     3,   197,     6,     0,     3,     7,   160,   196,
     3,   201,     3,   197,     6,     0,     0,   212,   213,     0,
   215,     0,   214,     0,   297,     0,   298,     0,   299,     0,
   302,     0,   303,     0,   304,     0,   307,     0,   319,     0,
   320,     0,   306,     0,   305,     0,    33,   196,     5,   197,
     6,     0,    33,   196,     5,   201,   332,   197,     6,     0,
     4,     5,   202,   216,   203,     6,     0,     4,     5,     4,
   324,   202,   216,   203,     6,     0,     0,   216,   218,     0,
   216,   221,     0,   216,   224,     0,   216,   227,     0,   216,
   230,     0,   216,   233,     0,   216,   236,     0,   216,   239,
     0,   216,   242,     0,   216,   245,     0,   216,   248,     0,
   216,   251,     0,   216,   254,     0,   216,   257,     0,   216,
   260,     0,   216,   263,     0,   216,   266,     0,   216,   269,
     0,   216,   272,     0,   216,   275,     0,   216,   278,     0,
   216,   281,     0,   216,   284,     0,   216,   287,     0,   216,
   290,     0,   216,   293,     0,   322,     0,   217,   201,   322,
     0,     0,    72,   196,   322,   201,   322,   201,   322,   197,
   219,   202,   217,   203,     6,     0,   322,     0,   220,   201,
   322,     0,     0,    73,   196,   322,   201,   322,   201,   322,
   197,   222,   202,   220,   203,     6,     0,   322,     0,   223,
   201,   322,     0,     0,    74,   196,   322,   201,   322,   201,
   322,   197,   225,   202,   223,   203,     6,     0,   322,     0,
   226,   201,   322,     0,     0,    75,   196,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   197,   228,
   202,   226,   203,     6,     0,   322,     0,   229,   201,   322,
     0,     0,    76,   196,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   197,   231,   202,   229,   203,
     6,     0,   322,     0,   232,   201,   322,     0,     0,    77,
   196,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   197,   234,   202,   232,   203,     6,     0,   322,
     0,   235,   201,   322,     0,     0,    78,   196,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   197,   237,   202,   235,   203,
     6,     0,   322,     0,   238,   201,   322,     0,     0,    79,
   196,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   197,   240,
   202,   238,   203,     6,     0,   322,     0,   241,   201,   322,
     0,     0,    80,   196,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   197,   243,   202,   241,   203,     6,     0,   322,     0,
   244,   201,   322,     0,     0,    81,   196,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   197,   246,   202,   244,   203,     6,     0,   322,     0,   247,
   201,   322,     0,     0,    82,   196,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   197,
   249,   202,   247,   203,     6,     0,   322,     0,   250,   201,
   322,     0,     0,    83,   196,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   197,   252,
   202,   250,   203,     6,     0,   322,     0,   253,   201,   322,
     0,     0,    84,   196,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   197,   255,   202,
   253,   203,     6,     0,   322,     0,   256,   201,   322,     0,
     0,    85,   196,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   197,   258,   202,   256,
   203,     6,     0,   322,     0,   259,   201,   322,     0,     0,
    86,   196,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   197,   261,   202,   259,   203,
     6,     0,   322,     0,   262,   201,   322,     0,     0,    87,
   196,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   197,   264,
   202,   262,   203,     6,     0,   322,     0,   265,   201,   322,
     0,     0,    88,   196,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   197,   267,   202,   265,   203,     6,     0,   322,     0,
   268,   201,   322,     0,     0,    89,   196,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   197,   270,   202,   268,   203,     6,
     0,   322,     0,   271,   201,   322,     0,     0,    90,   196,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   197,   273,   202,   271,   203,
     6,     0,   322,     0,   274,   201,   322,     0,     0,    91,
   196,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   197,   276,   202,   274,
   203,     6,     0,   322,     0,   277,   201,   322,     0,     0,
    92,   196,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   197,   279,   202,
   277,   203,     6,     0,   322,     0,   280,   201,   322,     0,
     0,    93,   196,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   197,   282,   202,   280,   203,     6,     0,   322,
     0,   283,   201,   322,     0,     0,    94,   196,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   201,   322,   201,
   322,   201,   322,   201,   322,   201,   322,   197,   285,   202,
   283,   203,     6,     0,   322,     0,   286,   201,   322,     0,
     0,    95,   196,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   201,   322,   201,   322,   201,   322,
   201,   322,   197,   288,   202,   286,   203,     6,     0,   336,
     0,   289,   201,   336,     0,     0,    96,   196,   322,   201,
   322,   201,   322,   197,   291,   202,   289,   203,     6,     0,
   336,     0,   292,   201,   336,     0,     0,    97,   196,   322,
   201,   322,   201,   322,   201,   322,   197,   294,   202,   292,
   203,     6,     0,     7,     0,   171,     0,   172,     0,   173,
     0,   174,     0,   192,     0,   193,     0,     4,   295,   322,
     6,     0,     4,   198,   322,   199,   295,   322,     6,     0,
     4,   198,   202,   332,   203,   199,   295,   330,     6,     0,
     4,   198,   199,     7,   330,     6,     0,     4,   296,     6,
     0,     4,   198,   322,   199,   296,     6,     0,     4,   200,
     4,     7,   336,     6,     0,     4,   198,   322,   199,   200,
     4,     7,   336,     6,     0,     4,   200,     4,   295,   322,
     6,     0,     4,   198,   322,   199,   200,     4,   295,   322,
     6,     0,     4,   200,     4,   296,     6,     0,     4,   198,
   322,   199,   200,     4,   296,     6,     0,     4,   200,   106,
   200,     4,     7,   333,     6,     0,     4,   198,   322,   199,
   200,   106,   200,     4,     7,   333,     6,     0,     4,   200,
   107,     7,   334,     6,     0,     4,   198,   322,   199,   200,
   107,     7,   334,     6,     0,    58,   196,     4,   197,   200,
     4,     7,   322,     6,     0,    58,   196,     4,   197,   200,
     4,     7,   336,     6,     0,    38,   196,   322,   197,     7,
   324,     6,     0,    54,    38,   196,   322,   197,     7,   330,
     6,     0,    70,    38,   330,     7,   202,   322,   201,   322,
   201,   322,   203,     6,     0,    45,    46,   330,     7,   322,
     6,     0,    41,   196,   322,   197,     7,   330,     6,     0,
    43,   196,   322,   197,     7,   330,     6,     0,    70,    41,
   330,     7,   202,   322,   201,   322,   201,   322,   203,     6,
     0,    39,   196,   322,   197,     7,   330,     6,     0,    40,
   196,   322,   197,     7,   330,     6,     0,    39,   196,   322,
   197,     7,   330,    49,   324,     6,     0,    47,   196,   322,
   197,     7,   202,   322,   201,   322,   201,     5,   201,     5,
   201,     5,   203,     6,     0,    54,    41,   196,   322,   197,
     7,   330,     6,     0,    41,    65,   196,   322,   197,     7,
   330,     6,     0,    99,   196,   322,   197,     7,   330,     6,
     0,   100,   196,   322,   197,     7,   330,     6,     0,   101,
   196,   322,   197,     7,   330,   105,   330,   102,   322,     6,
     0,    49,    42,   196,   322,   197,     7,   330,     6,     0,
   118,    42,   196,   322,   197,     7,   202,   322,   201,   330,
   203,     6,     0,    50,    42,   196,   322,   197,     7,   330,
     6,     0,    51,    42,   196,   322,   197,     7,   196,   322,
   201,   322,   197,   330,   330,     6,     0,   101,    42,   103,
   104,   196,   322,   197,     7,   328,   105,   202,   330,   201,
   330,   203,   102,   202,   322,   201,   322,   203,     6,     0,
   101,    42,   196,   322,   197,     7,   328,   105,   202,   330,
   201,   330,   203,   102,   202,   322,   201,   322,   203,     6,
     0,    54,    42,   196,   322,   197,     7,   330,     6,     0,
    42,    65,   196,   322,   197,     7,   330,     6,     0,    53,
    44,   196,   322,   197,     7,   330,     6,     0,    44,   196,
   322,   197,     7,   330,     6,     0,    54,    44,   196,   322,
   197,     7,   330,     6,     0,    60,   324,   202,   300,   203,
     0,    59,   202,   324,   201,   324,   201,   322,   203,   202,
   300,   203,     0,    61,   324,   202,   300,   203,     0,    62,
   202,   324,   201,   322,   203,   202,   300,   203,     0,   302,
     0,   301,     0,   299,     0,     0,   301,   298,     0,   301,
    38,   202,   332,   203,     6,     0,   301,    41,   202,   332,
   203,     6,     0,   301,    42,   202,   332,   203,     6,     0,
    64,   202,   301,   203,     0,    64,     4,   198,   322,   199,
     6,     0,    67,   202,   301,   203,     0,    67,     4,   198,
   322,   199,     6,     0,    67,   117,     6,     0,   106,   333,
   202,   301,   203,     0,     4,   336,     6,     0,     4,     4,
   198,   322,   199,   336,     6,     0,     4,   322,     6,     0,
    58,   196,     4,   197,   200,     4,     6,     0,    98,     4,
     6,     0,   113,     6,     0,    37,     6,     0,   108,   196,
   322,     8,   322,   197,     0,   108,   196,   322,     8,   322,
     8,   322,   197,     0,   108,     4,   109,   202,   322,     8,
   322,   203,     0,   108,     4,   109,   202,   322,     8,   322,
     8,   322,   203,     0,   110,     0,   116,     4,     0,   114,
     0,   115,     4,     6,     0,   111,   196,   322,   197,     0,
   112,     0,    63,    38,   202,   322,   201,   324,   203,     6,
     0,    63,    38,   202,   322,   201,   324,   201,   324,   201,
   322,   203,     6,     0,    63,    38,   202,   322,   201,   324,
   201,   324,   201,   324,   201,   322,   203,     6,     0,     0,
    63,    38,   202,   322,   201,   324,   203,   308,   202,   317,
   203,     6,     0,     0,    63,    38,   202,   322,   201,   324,
   201,   324,   201,   322,   203,   309,   202,   317,   203,     6,
     0,     0,    63,    38,   202,   322,   201,   324,   201,   324,
   201,   324,   201,   322,   203,   310,   202,   317,   203,     6,
     0,    63,    41,   202,   322,   201,   324,   203,     6,     0,
    63,    41,   202,   322,   201,   324,   201,   324,   201,   322,
   203,     6,     0,    63,    41,   202,   322,   201,   324,   201,
   324,   201,   324,   201,   322,   203,     6,     0,     0,    63,
    41,   202,   322,   201,   324,   203,   311,   202,   317,   203,
     6,     0,     0,    63,    41,   202,   322,   201,   324,   201,
   324,   201,   322,   203,   312,   202,   317,   203,     6,     0,
     0,    63,    41,   202,   322,   201,   324,   201,   324,   201,
   324,   201,   322,   203,   313,   202,   317,   203,     6,     0,
    63,    42,   202,   322,   201,   324,   203,     6,     0,    63,
    42,   202,   322,   201,   324,   201,   324,   201,   322,   203,
     6,     0,    63,    42,   202,   322,   201,   324,   201,   324,
   201,   324,   201,   322,   203,     6,     0,     0,    63,    42,
   202,   322,   201,   324,   203,   314,   202,   317,   203,     6,
     0,     0,    63,    42,   202,   322,   201,   324,   201,   324,
   201,   322,   203,   315,   202,   317,   203,     6,     0,     0,
    63,    42,   202,   322,   201,   324,   201,   324,   201,   324,
   201,   322,   203,   316,   202,   317,   203,     6,     0,   318,
     0,   317,   318,     0,    71,   202,   330,   201,   330,   201,
   330,   203,     6,     0,    71,   202,   330,   201,   330,   203,
     6,     0,    66,     6,     0,    52,    41,   330,     7,   322,
     6,     0,    52,    41,   330,     7,   322,    55,    57,   322,
     6,     0,    52,    41,   330,     7,   322,    55,    56,   322,
     6,     0,    52,    42,   202,   322,   203,     7,   330,     6,
     0,    48,    42,   202,   322,   203,     7,   330,     6,     0,
    52,    44,   202,   322,   203,     7,   330,     6,     0,    66,
    42,   330,     7,   322,     6,     0,    66,    42,   330,     6,
     0,    68,     6,     0,    69,     6,     0,   122,     0,   123,
     0,   124,     0,   125,     0,   126,     0,   323,     0,   196,
   322,   197,     0,   186,   322,     0,   185,   322,     0,   191,
   322,     0,   322,   186,   322,     0,   322,   185,   322,     0,
   322,   187,   322,     0,   322,   188,   322,     0,   322,   189,
   322,     0,   322,   195,   322,     0,   322,   181,   322,     0,
   322,   183,   322,     0,   322,   182,   322,     0,   322,   184,
   322,     0,   322,   178,   322,     0,   322,   179,   322,     0,
   322,   177,   322,     0,   322,   176,   322,     0,   322,   175,
   322,     8,   322,     0,    12,   196,   322,   197,     0,    13,
   196,   322,   197,     0,    14,   196,   322,   197,     0,    15,
   196,   322,   197,     0,    16,   196,   322,   197,     0,    17,
   196,   322,   197,     0,    18,   196,   322,   197,     0,    19,
   196,   322,   197,     0,    20,   196,   322,   197,     0,    22,
   196,   322,   197,     0,    23,   196,   322,   201,   322,   197,
     0,    24,   196,   322,   197,     0,    25,   196,   322,   197,
     0,    26,   196,   322,   197,     0,    27,   196,   322,   197,
     0,    28,   196,   322,   197,     0,    29,   196,   322,   197,
     0,    30,   196,   322,   201,   322,   197,     0,    31,   196,
   322,   201,   322,   197,     0,    32,   196,   322,   201,   322,
   197,     0,    21,   196,   322,   197,     0,    12,   198,   322,
   199,     0,    13,   198,   322,   199,     0,    14,   198,   322,
   199,     0,    15,   198,   322,   199,     0,    16,   198,   322,
   199,     0,    17,   198,   322,   199,     0,    18,   198,   322,
   199,     0,    19,   198,   322,   199,     0,    20,   198,   322,
   199,     0,    22,   198,   322,   199,     0,    23,   198,   322,
   201,   322,   199,     0,    24,   198,   322,   199,     0,    25,
   198,   322,   199,     0,    26,   198,   322,   199,     0,    27,
   198,   322,   199,     0,    28,   198,   322,   199,     0,    29,
   198,   322,   199,     0,    30,   198,   322,   201,   322,   199,
     0,    31,   198,   322,   201,   322,   199,     0,    32,   198,
   322,   201,   322,   199,     0,    21,   198,   322,   199,     0,
     3,     0,     9,     0,    10,     0,    11,     0,     4,     0,
     4,   198,   322,   199,     0,     4,   296,     0,     4,   198,
   322,   199,   296,     0,     4,   200,     4,     0,     4,   198,
   322,   199,   200,     4,     0,     4,   200,     4,   296,     0,
     4,   198,   322,   199,   200,     4,   296,     0,   325,     0,
   186,   324,     0,   185,   324,     0,   324,   186,   324,     0,
   324,   185,   324,     0,   202,   322,   201,   322,   201,   322,
   201,   322,   201,   322,   203,     0,   202,   322,   201,   322,
   201,   322,   201,   322,   203,     0,   202,   322,   201,   322,
   201,   322,   203,     0,   196,   322,   201,   322,   201,   322,
   197,     0,     0,   196,   327,   197,     0,     5,     0,   327,
   201,     5,     0,     0,   202,   329,   203,     0,   196,   329,
   197,     0,   330,     0,   329,   201,   330,     0,   322,     0,
   331,     0,   202,   332,   203,     0,   186,   202,   332,   203,
     0,   322,     8,   322,     0,   322,     8,   322,     8,   322,
     0,    38,   202,   322,   203,     0,   299,     0,   302,     0,
   307,     0,     4,   198,   199,     0,   186,     4,   198,   199,
     0,     4,   198,   202,   332,   203,   199,     0,   186,     4,
   198,   202,   332,   203,   199,     0,   322,     0,   331,     0,
   332,   201,   322,     0,   332,   201,   331,     0,   202,   322,
   201,   322,   201,   322,   201,   322,   203,     0,   202,   322,
   201,   322,   201,   322,   203,     0,     4,     0,     4,   200,
   106,   200,     4,     0,   202,   335,   203,     0,     4,   198,
   322,   199,   200,   107,     0,   333,     0,   335,   201,   333,
     0,     5,     0,    35,   196,   336,   201,   336,   197,     0,
    36,   196,   336,   197,     0,    34,   196,   336,   197,     0,
    34,   196,   336,   201,   332,   197,     0,    34,   196,     4,
   200,     4,   197,     0,    34,   196,     4,   198,   322,   199,
   200,     4,   197,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   167,   169,   170,   171,   176,   178,   181,   189,   203,   213,
   215,   218,   220,   221,   224,   230,   235,   236,   237,   240,
   244,   247,   253,   258,   264,   272,   277,   281,   287,   292,
   296,   301,   305,   308,   313,   317,   321,   325,   330,   334,
   337,   341,   345,   349,   353,   357,   361,   364,   368,   371,
   375,   378,   385,   389,   395,   397,   398,   399,   400,   401,
   402,   403,   404,   405,   406,   407,   408,   411,   416,   431,
   436,   442,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   475,   478,
   482,   488,   494,   497,   501,   507,   513,   516,   520,   526,
   532,   535,   539,   547,   553,   556,   560,   568,   574,   577,
   581,   589,   595,   598,   602,   614,   620,   623,   627,   639,
   645,   648,   652,   664,   670,   673,   677,   690,   696,   699,
   703,   716,   722,   725,   729,   742,   748,   751,   755,   768,
   774,   777,   781,   794,   800,   803,   807,   820,   826,   829,
   833,   856,   862,   865,   869,   892,   898,   901,   905,   928,
   934,   937,   941,   959,   965,   968,   972,   990,   996,   999,
  1003,  1021,  1027,  1030,  1034,  1051,  1057,  1060,  1064,  1081,
  1087,  1090,  1094,  1111,  1117,  1123,  1130,  1138,  1144,  1150,
  1157,  1165,  1174,  1176,  1177,  1178,  1179,  1182,  1184,  1187,
  1218,  1252,  1299,  1314,  1323,  1338,  1350,  1364,  1387,  1411,
  1423,  1437,  1449,  1463,  1483,  1505,  1517,  1533,  1544,  1550,
  1569,  1583,  1589,  1595,  1614,  1620,  1626,  1642,  1649,  1655,
  1661,  1672,  1683,  1708,  1714,  1733,  1755,  1761,  1769,  1775,
  1781,  1790,  1796,  1802,  1812,  1818,  1823,  1828,  1835,  1837,
  1838,  1841,  1846,  1850,  1864,  1878,  1896,  1907,  1917,  1925,
  1929,  1937,  1949,  1989,  2002,  2019,  2024,  2031,  2035,  2055,
  2067,  2077,  2098,  2119,  2140,  2146,  2151,  2156,  2160,  2168,
  2181,  2191,  2201,  2206,  2216,  2221,  2231,  2236,  2248,  2265,
  2282,  2299,  2304,  2321,  2326,  2343,  2348,  2368,  2384,  2400,
  2416,  2421,  2438,  2444,  2461,  2467,  2486,  2490,  2495,  2522,
  2546,  2554,  2573,  2591,  2609,  2631,  2652,  2673,  2687,  2706,
  2711,  2720,  2722,  2723,  2724,  2725,  2728,  2730,  2731,  2732,
  2733,  2734,  2735,  2736,  2737,  2744,  2745,  2746,  2747,  2748,
  2749,  2750,  2751,  2752,  2753,  2754,  2755,  2756,  2757,  2758,
  2759,  2760,  2761,  2762,  2763,  2764,  2765,  2766,  2767,  2768,
  2769,  2770,  2771,  2772,  2773,  2774,  2775,  2777,  2778,  2779,
  2780,  2781,  2782,  2783,  2784,  2785,  2786,  2787,  2788,  2789,
  2790,  2791,  2792,  2793,  2794,  2795,  2796,  2797,  2802,  2807,
  2808,  2809,  2813,  2824,  2841,  2852,  2871,  2887,  2903,  2919,
  2936,  2941,  2945,  2949,  2953,  2959,  2964,  2968,  2972,  2978,
  2982,  2987,  2991,  2996,  3000,  3004,  3010,  3016,  3023,  3029,
  3033,  3037,  3047,  3054,  3065,  3085,  3094,  3103,  3114,  3128,
  3144,  3164,  3188,  3194,  3198,  3202,  3213,  3218,  3229,  3234,
  3252,  3257,  3270,  3276,  3282,  3287,  3295,  3308,  3312,  3330,
  3344
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tTrimmed","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Command","Loop",
"Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35","ExtrudeParameters",
"ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   204,   204,   204,   204,   205,   205,   206,   206,   206,   207,
   207,   208,   208,   208,   209,   209,   209,   209,   209,   210,
   210,   210,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   212,   212,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   214,   214,   215,
   215,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   217,   217,
   219,   218,   220,   220,   222,   221,   223,   223,   225,   224,
   226,   226,   228,   227,   229,   229,   231,   230,   232,   232,
   234,   233,   235,   235,   237,   236,   238,   238,   240,   239,
   241,   241,   243,   242,   244,   244,   246,   245,   247,   247,
   249,   248,   250,   250,   252,   251,   253,   253,   255,   254,
   256,   256,   258,   257,   259,   259,   261,   260,   262,   262,
   264,   263,   265,   265,   267,   266,   268,   268,   270,   269,
   271,   271,   273,   272,   274,   274,   276,   275,   277,   277,
   279,   278,   280,   280,   282,   281,   283,   283,   285,   284,
   286,   286,   288,   287,   289,   289,   291,   290,   292,   292,
   294,   293,   295,   295,   295,   295,   295,   296,   296,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   298,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   299,   299,   299,   299,   300,   300,
   300,   301,   301,   301,   301,   301,   302,   302,   303,   303,
   303,   304,   305,   305,   305,   305,   305,   305,   305,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   307,
   307,   307,   308,   307,   309,   307,   310,   307,   307,   307,
   307,   311,   307,   312,   307,   313,   307,   307,   307,   307,
   314,   307,   315,   307,   316,   307,   317,   317,   318,   318,
   318,   319,   319,   319,   319,   319,   319,   319,   319,   320,
   320,   321,   321,   321,   321,   321,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   323,   323,
   323,   323,   323,   323,   323,   323,   323,   323,   323,   323,
   324,   324,   324,   324,   324,   325,   325,   325,   325,   326,
   326,   327,   327,   328,   328,   328,   329,   329,   330,   330,
   330,   330,   331,   331,   331,   331,   331,   331,   331,   331,
   331,   331,   332,   332,   332,   332,   333,   333,   333,   333,
   334,   334,   335,   335,   336,   336,   336,   336,   336,   336,
   336
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    31,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    55,     1,     3,     0,    55,     1,     3,     0,    55,
     1,     3,     0,    43,     1,     3,     0,    43,     1,     3,
     0,    43,     1,     3,     0,    37,     1,     3,     0,    37,
     1,     3,     0,    37,     1,     3,     0,    13,     1,     3,
     0,    15,     1,     1,     1,     1,     1,     1,     1,     4,
     7,     9,     6,     3,     6,     6,     9,     6,     9,     5,
     8,     8,    11,     6,     9,     9,     9,     7,     8,    12,
     6,     7,     7,    12,     7,     7,     9,    17,     8,     8,
     7,     7,    11,     8,    12,     8,    14,    22,    20,     8,
     8,     8,     7,     8,     5,    11,     5,     9,     1,     1,
     1,     0,     2,     6,     6,     6,     4,     6,     4,     6,
     3,     5,     3,     7,     3,     7,     3,     2,     2,     6,
     8,     8,    10,     1,     2,     1,     3,     4,     1,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     1,     2,     9,     7,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     4,     2,     5,     3,     6,     4,     7,
     1,     2,     2,     3,     3,    11,     9,     7,     7,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     1,     1,
     3,     4,     3,     5,     4,     1,     1,     1,     3,     4,
     6,     7,     1,     1,     3,     3,     9,     7,     1,     5,
     3,     6,     1,     3,     1,     6,     4,     4,     6,     6,
     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   284,
     0,   289,     0,   286,     0,     0,     0,    54,    56,    55,
    57,    58,    59,    60,    61,    62,    67,    66,    63,    64,
    65,     5,     0,     0,     0,    15,    16,    18,    17,    19,
   420,   420,     0,   399,   403,   455,   203,   400,   401,   402,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,   205,   206,   207,     0,     0,
     0,   208,   209,     0,     0,     0,     0,     0,     0,   337,
     0,     0,   279,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   411,     0,     0,     0,     0,     0,     0,   262,
     0,     0,     0,   262,   330,   331,     0,     0,     0,     0,
     0,     0,     0,   449,     0,     0,     0,     0,     0,   278,
     0,   285,     0,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   405,     0,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   403,
   340,   339,   341,     0,     0,     0,     0,     0,     0,     0,
     0,   214,   275,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   273,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   403,     0,
     0,     0,   436,   437,   438,   429,     0,   430,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   413,   412,     0,     0,     0,     0,   262,
   262,     0,     0,     0,     0,     0,     0,     0,     0,   271,
     0,     0,     0,   277,     0,     0,     0,     0,     0,     0,
     0,   262,     0,     0,     0,   287,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   422,     0,
     0,     0,     0,     0,   407,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   455,     0,     0,     0,     0,   338,     0,     0,   443,   444,
     0,     0,   203,     0,     0,     0,     0,   210,     0,   355,
   354,   352,   353,   348,   350,   349,   351,   343,   342,   344,
   345,   346,   347,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   403,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   415,   414,   261,
     0,   260,   259,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   267,   263,   329,     0,     0,   269,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   288,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   421,     0,     0,    21,     0,   404,   409,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,   357,   378,   358,   379,   359,   380,
   360,   381,   361,   382,   362,   383,   363,   384,   364,   385,
   365,   386,   377,   398,   366,   387,     0,     0,   368,   389,
   369,   390,   370,   391,   371,   392,   372,   393,   373,   394,
     0,     0,     0,     0,     0,     0,     0,     0,   458,     0,
     0,   457,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   220,     0,     0,     0,     0,     0,    68,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     0,     0,   431,   433,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   255,   257,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   272,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   423,     0,
   420,     0,   406,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    70,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   404,   213,   445,   446,     0,     0,
     0,     0,     0,   215,   216,   218,     0,     0,   453,     0,
   224,   356,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   435,   440,     0,   432,     0,   231,     0,     0,
     0,     0,     0,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   268,     0,     0,     0,   328,   270,     0,     0,     0,     0,
     0,   424,     0,   450,     0,     0,     0,   280,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   332,   333,   334,   335,   336,     0,     0,
     0,     0,     0,     0,     0,    20,     0,   408,   274,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   367,   388,   374,   395,
   375,   396,   376,   397,     0,   460,   459,   456,     0,   203,
     0,     0,     0,     0,   211,     0,     0,     0,   451,    69,
   228,   235,     0,   236,     0,   232,     0,   233,   253,     0,
     0,   434,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   276,     0,     0,     0,
     0,   262,     0,   293,     0,   302,     0,   311,     0,     0,
     0,     0,     0,   241,   242,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   420,   410,    71,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   221,     0,
     0,   222,     0,   454,     0,   240,   251,   441,     0,     0,
   326,   244,   246,     0,     0,     0,   325,   327,   252,   229,
   239,   250,   254,     0,     0,     0,   419,     0,   418,     0,
     0,   290,     0,     0,   299,     0,     0,   308,     0,   264,
   265,   266,     0,     0,   424,     0,   427,     0,     0,     0,
     0,   448,     0,   282,   281,     0,     0,     0,     0,     0,
    23,     0,    32,     0,    36,     0,    30,     0,     0,    35,
     0,    40,    38,     0,     0,     0,     0,     0,     0,    47,
     0,     0,     0,     0,     0,    52,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   212,   217,   219,     0,   225,
     0,   237,   442,     0,     0,   324,   323,   226,   227,   262,
     0,   258,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   426,     0,   425,     0,     0,     0,     0,     0,     0,
     0,   424,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   461,     0,
   452,     0,     0,     0,     0,   417,     0,     0,     0,     0,
     0,     0,     0,     0,   317,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   428,     0,     0,   447,   283,     0,
     0,    37,     0,     0,     0,     0,    27,     0,    33,     0,
    39,    28,    41,     0,    44,     0,    48,    49,     0,     0,
    51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   223,
     0,     0,   256,     0,     0,   295,     0,   321,     0,     0,
   318,   304,     0,     0,   313,     0,     0,     0,     0,     0,
     0,   243,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   101,   105,   109,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   197,     0,     0,     0,   416,   291,     0,     0,     0,   294,
   300,     0,     0,   303,   309,     0,     0,   312,   230,   234,
     0,     0,   245,     0,     0,     0,     0,     0,    31,    34,
    42,     0,    43,    50,    45,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   297,     0,     0,   306,     0,
   315,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   201,     0,   247,     0,   292,
     0,     0,     0,   301,     0,     0,   310,     0,     0,     0,
     0,     0,     0,    26,    29,     0,     0,     0,    99,     0,
   103,     0,   107,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   195,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   296,     0,     0,   320,   305,     0,
   314,     0,     0,     0,     0,     0,     0,    46,    22,   100,
   102,   104,   106,   108,   110,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   196,   198,     0,   199,
   238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   113,   117,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   298,   319,   307,   316,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   200,   202,     0,     0,     8,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   249,     0,     0,     0,   111,     0,   115,     0,
   119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   248,     0,    24,   112,
   114,   116,   118,   120,   122,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,   129,   133,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   123,     0,   127,     0,   131,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   124,   126,   128,   130,   132,
   134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,   141,   145,
   149,   153,   157,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   135,     0,   139,     0,   143,     0,
   147,     0,   151,     0,   155,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   136,   138,   140,   142,   144,
   146,   148,   150,   152,   154,   156,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   185,   189,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   183,     0,   187,     0,   191,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   184,   186,   188,   190,   192,   194,     0,
     0,     0,   173,   177,   181,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   171,     0,   175,     0,   179,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   172,   174,
   176,   178,   180,   182,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   161,   165,   169,     0,     0,     0,     0,     0,
     0,     0,   159,     0,   163,     0,   167,     0,     0,     0,
     0,     0,     0,   160,   162,   164,   166,   168,   170,     0,
     0,     0
};

static const short yydefgoto[] = {  2300,
    84,     5,     6,    19,    20,    21,    22,     7,    68,    69,
    70,   427,  1618,   639,  1527,  1620,   640,  1528,  1622,   641,
  1529,  1836,   642,  1783,  1838,   643,  1784,  1840,   644,  1785,
  1972,   645,  1934,  1974,   646,  1935,  1976,   647,  1936,  2084,
   648,  2054,  2086,   649,  2055,  2088,   650,  2056,  2090,   651,
  2057,  2092,   652,  2058,  2094,   653,  2059,  2282,   654,  2276,
  2284,   655,  2277,  2286,   656,  2278,  2231,   657,  2219,  2233,
   658,  2220,  2235,   659,  2221,  2180,   660,  2162,  2182,   661,
  2163,  2184,   662,  2164,  1645,   663,  1551,  1739,   664,  1647,
   137,   242,    71,   554,   333,   541,   542,   334,    75,    76,
    77,    78,   335,  1183,  1497,  1601,  1186,  1502,  1605,  1189,
  1506,  1608,  1364,  1365,    80,    81,   969,   336,   140,   354,
   173,   237,   420,  1079,  1196,  1197,   338,   481,   196,   726,
   880,   141
};

static const short yypact[] = {  2807,
    32,-32768,-32768,  -116,-32768,   417,  3078,-32768,    11,    50,
    68,    90,    96,   112,   146,   -86,   -34,   -31,-32768,-32768,
-32768,-32768,  2299,   -27,   195,    20,    25,    73,   -45,   142,
    76,   116,   293,   136,   318,   342,   353,   380,   256,   371,
    31,   237,   238,   -87,   -87,   246,     5,     4,   402,    17,
   462,   484,   104,   477,   297,   306,   -25,     6,    24,-32768,
   315,-32768,   502,-32768,   537,   541,   486,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   529,    11,  2919,-32768,-32768,-32768,-32768,-32768,
   356,   356,   544,-32768,   -61,     7,-32768,-32768,-32768,-32768,
    -9,   156,   179,   206,   216,   311,   319,   320,   325,   333,
   344,   352,   372,   373,   376,   377,   422,   426,   429,   447,
   448,   357,   383,   384,-32768,-32768,-32768,-32768,  2583,  2583,
  2583,-32768,-32768,  2583,  1173,    29,  2583,   570,   428,-32768,
   613,   592,-32768,  2583,  2583,  2583,   405,  2583,   430,  2583,
  2583,   948,  2583,   431,   451,   458,   471,   948,   483,   491,
   479,   481,   490,   494,   506,   717,   -87,   -87,   -87,  2583,
  2583,  -125,-32768,   -69,   -87,   533,   534,   548,   547,-32768,
   948,   553,   755,-32768,-32768,-32768,   948,   948,   759,  2583,
  2583,   -67,  2583,   566,  2583,   567,   661,  2583,  2583,-32768,
   776,-32768,   636,-32768,    11,   650,   657,   666,   684,   694,
   698,   709,   710,   711,   713,   719,   720,   721,   722,   723,
   724,   726,   732,   742,   743,   744,   745,   746,   749,   750,
   751,   752,   753,   754,   757,   790,   644,   714,   780,  2583,
   940,-32768,   -87,-32768,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,    54,    57,    57,   249,
   760,   760,   760, 10632,   975,  2359,  2217,   258,   783,   977,
   453,-32768,-32768,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,-32768,   -19,
 10655, 10678, 10701,  2583, 10724,  2583, 10747, 10770,   286,   785,
  1807,  2359,-32768,-32768,-32768,  1527,   978,-32768, 10793,  2583,
  2583,  2583,  2583,   981,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,   792,   -81,-32768,-32768,  3405,  3426,   -87,   -87,   475,
   475,   130,  2583,  2583,  2583,  2583,  2387,   273,  2583,-32768,
  2609,   985,   986,-32768, 10816, 10839,   887,  2583, 10862,   888,
  3447,-32768,   793,  1577, 10885,-32768,  2583,   829,   992,   994,
   995,   996,   997,   998,  1000,  1001,  1008,  1009,  1010,  1011,
  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1022,  1024,  1025,
  1026,   877,  1028,  1032,  1034,  1035,  1038,  1037,-32768,    74,
  1039,  1040,  1042,  9957,   261,   -36,  2901, 10908,  9982, 10931,
 10007, 10954, 10032, 10977, 10057, 11000, 10082, 11023, 10107, 11046,
 10132, 11069, 10157, 11092, 10182, 11115, 10207, 11138, 10232,  3468,
  3489, 11161, 10257, 11184, 10282, 11207, 10307, 11230, 10332, 11253,
 10357, 11276, 10382,  3510,  3531,  3552,  3573,  3594,  3615,   174,
-32768,   110,   842,   848,  2583,-32768,   948,  2613,  1527,-32768,
   465,   176,    57,  2583,  1045,  1044,     8,-32768,  1689,   652,
   700,   715,   715,   250,   250,   250,   250,   300,   300,   760,
   760,   760,   760,  1046,  2359,  1047,  1048,  1049, 11299,  1050,
 11322,  1052,  1055,  1203,  2583,   312,  2359,   469,  2583,  2583,
  1056,  1302, 11345, 11368, 11391,  2583,  1928,  2910, 11414, 11437,
 11460, 11483, 11506,   865,   -87,  2583,  2583,-32768,-32768,-32768,
   863,  2653,-32768,   864,  2583,  3636,  3657,  3678, 10407,  -102,
   -38,   -28,-32768,-32768,-32768,  2583, 10432,-32768,   867,   868,
  1064,  1065,   879, 11529,  1066,   876,  2583,  2631,  2583,  2583,
-32768, 11552,   909,   878,   883,   884,   885,   886,   889,   890,
   892,   893,   894,   921,   922,   923,   924,   925,   926,   927,
   928,   929,   930,   931,   934,   935,   937,   939,   941,   942,
   944,   945,   946,-32768,  1073,   951,-32768,   950,   121,-32768,
-32768,   953,   956,   957,   958,   960,   961,   962,   968,  1057,
  1059,  1063,  1067,  1069,  1072,  1074,  1075,  1076,  1078,  1079,
  1081,  1083,  1084,  1085,  1087,  1088,  1089,  1135,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2583,  2583,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  1170,-32768,  2359,
    57,-32768, 10457,  1175,  2359,   881,    37,  2583,  1202,  1204,
   474,-32768,  1082,  1071,     6,  1205,  2583,-32768,   164,   -87,
   948,   948,  1229,   948,  1235,   948,   948,-32768,  2359,  2977,
  1499,   470,-32768,  1773,   602,  1007,  1254,  1279,  1280,  1281,
   407,  1282,  1284,  1285,  1286,  1287,  1289,  1290,  1295,   150,
  3699,  3720,-32768,-32768,  3025,   -87,   -87,   -87,  1320,  2359,
  2359,  2359,   682,  1321,  2583,  2583,   948,   948,  2583,  1324,
   948,  1329,  3741,-32768,  1886,   288,  1330,  1164,  1335,  2583,
  2583,   -87,  1336,  1337,  1154,  1339,  1340,   948,   948,  1341,
   -87,  1342,  1343,   948,   948,  1344,  1345,  1347,  1348,  1349,
   948,   440,   948,  1350,  1351,  1352,  1357,  1358,-32768,  1356,
   356,  1359,-32768,  1360,  2940,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,-32768, 11575, 10482, 11598, 10507, 11621, 10532, 11644, 10557,
 10582,  1157,   169,  1158,   -39,-32768,  1527,-32768,    22,   327,
  1165,  1361,   748,-32768,-32768,-32768,     6,  2583,-32768,   473,
-32768, 12495,  1364,    13,    38,  1365,   948,  1367,   948,  1368,
  1370,   488,-32768,-32768,  2359,-32768,  2583,-32768,  2583,   948,
   948,   948,  1171,-32768,   468,   948,   948,   948,   948,   948,
   948,   948,   299,  2583,  2583,  2583,  1176,  -119,  -106,  -100,
-32768,   493,   496,   497,-32768,-32768,  3762,  3783,  1371,  1373,
 11667,   -83,  1275,-32768,  2583,  2583,  2583,-32768,  1179,    11,
  1181,  3804,  3825,    -5,  1182,  1187,  1184,  1189,  1186,  1193,
  1190,  1191,    81,  1192,  1198,  1199,  1196,  1197,  1200,  1206,
  1207,  1208,  1209,-32768,-32768,-32768,-32768,-32768,  1211,  1212,
  1214,  1215,  1216,  1213,  1217,-32768,  1218,   261,-32768,  1394,
  3846,  3867,  3888,  3909,  3930,  3951,  3972,  3993,  4014,  4035,
  4056,  4077,  4098,  4119,  4140,  4161,  4182,  4203,  4224,  4245,
  4266,  4287,  4308,  4329,  4350,  4371,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1221,-32768,-32768,-32768,   948,    57,
  2583,  1397,  1400,     8,-32768,  1418, 10607,     6,-32768,-32768,
-32768,-32768,   -87,-32768,  1419,-32768,  1421,-32768,-32768,  1230,
   504, 12495,  4392,  1424,  1425,  1426,  2583,  2583,  2583,  1428,
  1429,  1430,  1431,  1432,  1433,  1434,-32768,  2549,  3048, 11690,
  2325,   475,   -87,  1435,   -87,  1436,   -87,  1437,  1438,  1439,
  1440,  2583,  2583,-32768,-32768,  1461,   948,   948,  1366,   948,
  2638,   204, 11713,  2583,    11,  1467,  2583,   948,  1466,  1470,
  1468,  1288,  1486,   440,  1487,  1473,  2583,  1488,  1492,  1490,
  1494,  1495,   440,  2583,  2583,  2583,   948,  1498,  1503,   440,
  2583,  1529,  1530,  1528,  2583,   356,-32768,-32768,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  1497,  1531,  1532,   984,-32768,  1533,
  1535,-32768,  1346,-32768,    19,-32768,-32768,-32768,  1374,  2583,
-32768,-32768,-32768,  4413,  1062,  1405,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1427,  1536,  1334,-32768,  2583,-32768,  1369,
   152,-32768,  1372,   177,-32768,  1375,   220,-32768,  1376,-32768,
-32768,-32768,  4434,  4455,   -83,   200,-32768,   505,  1393,  1441,
  2583,-32768,  2583,-32768,-32768,  4476,    11,  1378,  4497,  1338,
-32768,  1395,-32768,  1396,-32768,  1379,-32768,  1398, 11736,-32768,
  1416,-32768,-32768,  1401,  1422, 11759,  4518, 11782,  1417,-32768,
  1423,  1442,  4539,  1420,  1443,-32768,  4560,  1445,  4581,  4602,
  4623,  4644,  4665,  4686,  4707,  4728,  4749,  4770,  4791,  4812,
  4833,  4854,  4875,  4896,  4917,  4938,  4959,  4980,  5001,  5022,
  5043,  5064,  5085,  5106,  1447,-32768,-32768,-32768,     6,-32768,
  1516,-32768,-32768,  5127,  2583,-32768,-32768,-32768,-32768,   475,
  2708,-32768,  2267,   113,  2267,   113,  2267,   113,  2583,  2583,
  1519,-32768,   948,-32768,   948,  2583,  3084,  3113,   948,  1380,
  1539,   -83,   440,  1544,  2583,  1619,   440,  1620,  1625,  1623,
  1626,  1627,  2583,  1628,   948,  1632,  1636,  2583,  1680,  1681,
  2583,  1684,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,-32768,  1685,
-32768,  1687, 11805,  1483,  2583,-32768,  2267,  2267,  2583,  3136,
   223,  1688,  1491,   -40,-32768,  3159,   225,   -26,  3189,   242,
   -18,  3221,  3244,  1505,-32768,  1517,  1493,-32768,-32768,  1496,
    11,-32768,  1518,  1520,  1524,  5148,-32768,  1523,-32768,  1552,
-32768,-32768,-32768, 11828,-32768,  1525,-32768,-32768, 11851,  1553,
-32768, 11874,  1526, 11897, 11920, 11943,  5169,  5190,  5211,  5232,
  5253,  5274,  5295,  5316,  5337,  5358,  5379,  5400,  5421,  5442,
  5463,  5484,  5505,  5526,  5547,  5568,  5589, 11966,  5610,-32768,
  1550,   948,-32768,  3267,  2605,  1690,  2583,-32768,   948,  1694,
-32768,  1711,  2583,  1722,  1723,  2583,  1724,  1751,  1761,   948,
   948,-32768,  1762,    11,   440,   440,   440,   440,  1763,  1764,
  1765,   440,  1767,  1768,  1769,  1771,-32768,-32768,-32768,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
-32768,  2583,  1772,   948,-32768,-32768,  1576,  3290,  1578,-32768,
-32768,  1580,  3313,-32768,-32768,  1582,  3336,-32768,-32768,-32768,
  1579,  1583,-32768,    11,  1584,  1586,  1612,  1615,-32768,-32768,
-32768,  1613,-32768,-32768,-32768,  1614,  1611,  1639,  1641,  5631,
  5652,  5673,  5694,  5715,  5736,  5757,  5778,  5799,  5820,  5841,
  5862,  5883,  5904,  5925,  5946,  5967,  5988,  6009,  6030,  6051,
  1643, 11989,  1668,  1873,   113,  1874,   948,   113,  1875,   113,
  1876,   948,  1781,  1721,   440,   440,  1880,  1881,   440,  1883,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,    57,-32768,  1884,-32768,   -17,-32768,
  1691,   508,   -15,-32768,  1708,    -3,-32768,  1709,  1710,  1712,
    11,  1714,  1715,-32768,-32768,  1693,  1695,   511, 12495,   512,
 12495,   516, 12495,  6072,  6093,  6114,  6135,  6156,  6177,  6198,
  6219,  6240,  6261,  6282,  6303,  6324,  6345,  6366,  6387,  6408,
  6429,  6450,  6471,  6492,   519,-32768,  1716,  1717,  1885,   113,
   948,  1906,  1911,   113,  1913,   113,  1819,  2583,    11,   440,
   948,  1916,  1917,  2583,  1918,  2583,  1919,  2583,  1921,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
    57,  1922,    57,  1923,-32768,    -1,  1750,-32768,-32768,    10,
-32768,    12,  1770,  6513,    11,  1766,  1775,-32768,-32768, 12495,
-32768, 12495,-32768, 12495,-32768, 12012, 12035, 12058,  6534,  6555,
  6576,  6597,  6618,  6639,  6660,  6681,  6702,  6723,  6744,  6765,
  6786,  6807,  6828,  6849,  6870,  6891,-32768,-32768,   523,-32768,
-32768,  1957,  1958,  1959,  1960,  2583,  2583,  1462,   440,   948,
-32768,-32768,-32768,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,    57,  1963,-32768,-32768,-32768,-32768,  6912,  3359,  1800,
  1793,  1794,  1795,  1797,  1798,  6933,  6954,  6975,  6996,  7017,
  7038,  7059,  7080,  7101,  7122,  7143,  7164,  7185,  7206,  7227,
  7248,  7269,  7290,-32768,-32768,  2583,  1968,-32768,   948,   440,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  3382,-32768,  1801,  1799,   524, 12495,   527, 12495,   528,
 12495,  7311,  7332,  7353,  7374,  7395,  7416,  7437,  7458,  7479,
  7500,  7521,  7542,  7563,  7584,  7605,  7626,  7647,  7668,  1995,
   948,  1998,  2583,  1999,  2583,  2000,  2583,  2001,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,-32768,  1809,-32768, 12495,
-32768, 12495,-32768, 12495,-32768, 12081, 12104, 12127,  7689,  7710,
  7731,  7752,  7773,  7794,  7815,  7836,  7857,  7878,  7899,  7920,
  7941,  7962,  7983,   948,-32768,-32768,-32768,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  1810,  1806,  1811,  1812,  8004,  8025,  8046,  8067,
  8088,  8109,  8130,  8151,  8172,  8193,  8214,  8235,  8256,  8277,
  8298,   948,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  1814,   531, 12495,   539, 12495,   540, 12495,  8319,  8340,  8361,
  8382,  8403,  8424,  8445,  8466,  8487,  8508,  8529,  8550,  8571,
  8592,  8613,   440,  2583,  2006,  2583,  2010,  2583,  2011,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  1821, 12495,-32768, 12495,-32768, 12495,
-32768, 12150, 12173, 12196, 12219, 12242, 12265,  8634,  8655,  8676,
  8697,  8718,  8739,  8760,  8781,  8802,  2013,-32768,-32768,-32768,
-32768,-32768,-32768,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,-32768,  1818,  1828,  1829,  1830,  1831,  1832,  8823,
  8844,  8865,  8886,  8907,  8928,  8949,  8970,  8991,  2583,  2583,
  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,   543, 12495,   556, 12495,   557, 12495,   561,
 12495,   572, 12495,   573, 12495,  9012,  9033,  9054,  9075,  9096,
  9117,  9138,  9159,  9180,  2583,  2029,  2583,  2030,  2583,  2031,
  2583,  2032,  2583,  2033,  2583,  2034,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  2583,  2583, 12495,-32768, 12495,-32768, 12495,
-32768, 12495,-32768, 12495,-32768, 12495,-32768,  9201,  9222,  9243,
  9264,  9285,  9306, 12288, 12311, 12334,  2583,  2583,  2583,  2583,
  2583,  2583,-32768,-32768,-32768,  9327,  9348,  9369,  9390,  9411,
  9432,  1839,  1840,  1841,  2583,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2583,  9453,  9474,  9495,  9516,  9537,  9558,   591,
 12495,   595, 12495,   598, 12495,  2583,  2583,  2583,  2583,  2583,
  2583,  2583,  2038,  2583,  2039,  2583,  2060,  9579,  9600,  9621,
 12357, 12380, 12403, 12495,-32768, 12495,-32768, 12495,-32768,  2583,
  2583,  2583,-32768,-32768,-32768,  9642,  9663,  9684,  1877,  1878,
  1887,  2583,  2583,  2583,  2583,  2583,  2583,  9705,  9726,  9747,
   599, 12495,   641, 12495,   648, 12495,  2583,  2583,  2583,  2583,
  2070,  2583,  2071,  2583,  2072,  9768,  9789,  9810, 12495,-32768,
 12495,-32768, 12495,-32768,  2583,  2583,  2583,  9831,  9852,  9873,
  2583,  2583,  2583,  9894,  9915,  9936,  2583,  2583,  2583, 12426,
 12449, 12472,-32768,-32768,-32768,  1889,  1891,  1920,  2583,  2583,
  2583,   649, 12495,   653, 12495,   672, 12495,  2583,  2077,  2583,
  2079,  2583,  2081, 12495,-32768, 12495,-32768, 12495,-32768,  2108,
  2118,-32768
};

static const short yypgoto[] = {-32768,
   -32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1508,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -292,   -22,-32768,  2113,    -4,  -359,  -171,    -2,-32768,-32768,
-32768,-32768,  2114,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768, -1256, -1329,-32768,-32768, -1039,   -23,-32768,   -29,
-32768,   -88,-32768, -1161,  1054,  1449,  -172,  -314,  -718,  1106,
-32768,  -265
};


#define	YYLAST		12690


static const short yytable[] = {   139,
   138,   544,    73,   238,    74,   484,   879,   179,   367,   194,
   243,   724,   371,    82,   172,   174,   192,   518,  1031,   147,
   182,   472,   473,   474,  1272,  1362,   147,   197,    97,  1368,
  1363,  1371,   298,  1291,  1441,   377,   149,     8,  1441,  1362,
   870,  1441,   176,  1032,  1363,   177,   178,  1362,  1362,     9,
  1362,   205,  1363,  1363,  1216,  1363,    85,   470,   471,   358,
   359,   471,  1362,  1225,  1362,   358,   359,  1363,   162,  1363,
  1232,   163,   164,    86,   165,  1362,   360,  1362,   358,   359,
  1363,  1063,  1363,  1064,   358,   359,  1033,   122,   123,   124,
   122,   123,   124,   144,  1065,    87,  1066,   168,   169,   770,
  1067,    88,  1068,   358,   359,   291,   292,   293,   170,    91,
   294,   297,  1077,   301,   171,   358,   359,    89,  1078,   535,
   321,   322,   323,   480,   325,   471,   327,   328,   378,   339,
   132,   133,   361,   183,   299,   300,   240,   353,   241,   355,
  1383,   187,   871,   872,   188,   362,   356,   357,   358,   359,
   148,    90,   132,   133,   122,   123,   124,   148,  1026,   480,
   822,    92,  1440,   771,    93,   611,   375,   376,   142,   379,
   193,   381,   388,   772,   384,   385,  1444,   504,  1362,   358,
   359,   505,    97,  1363,  1447,  1649,   245,  1653,   246,   718,
   729,  1089,   125,   126,   127,   128,    83,   358,   359,  1655,
   143,  1742,   742,   358,   359,   180,   149,   195,   244,   725,
   568,  1203,  1744,   426,  1745,   144,   424,   720,   184,   198,
   145,   428,   429,   430,   431,   432,   433,   434,   435,   436,
   437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
   447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
   457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
   467,   468,   469,  1384,   483,   358,   359,  1388,   146,  1441,
   604,   150,   479,  1441,   605,   485,  1441,  1098,   555,   556,
   489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
   499,   500,   501,   502,   503,   937,   158,   159,  1599,   160,
   509,  1603,   511,  1606,  1057,  1058,   709,   292,   479,  1154,
   710,   151,   132,   133,   358,   359,   522,   523,   524,   525,
   822,   527,   528,   529,   530,   531,   532,   533,   538,   539,
   545,   153,   480,  1020,   358,   359,   358,   359,   152,   546,
   547,   548,   549,   824,   480,   557,   125,   126,   127,   128,
   914,   247,  1283,   248,   564,   540,   540,   543,   543,   154,
   883,   358,   359,   572,   715,  1017,  1441,   132,   133,   715,
  1441,   707,  1441,   708,   249,   717,   250,  1285,   304,   305,
   306,   307,   308,   155,   309,   310,   311,   312,   313,   314,
   315,   316,   317,  1696,   156,   863,  1292,  1700,   318,  1702,
  1293,   251,   610,   252,   358,   359,  1204,   358,   359,   358,
   359,   253,   904,   254,   161,  1515,  1516,  1517,  1518,    10,
  1287,   157,  1522,  1437,   892,  1443,   358,   359,   125,   126,
   127,   128,   166,   303,   313,   314,   315,   316,   317,   167,
   132,   133,  1446,   181,   318,   864,   475,   175,   241,   132,
   133,   713,   132,   133,   292,   922,   923,   924,   488,   719,
   721,   905,   304,   305,   306,   307,   308,   185,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   132,   133,   876,
   189,   479,   318,   514,   938,   241,   315,   316,   317,   186,
   713,   740,   190,   479,   318,   744,   745,   125,   126,   127,
   128,   191,   751,   132,   133,   760,   255,   200,   256,   741,
   199,   241,   761,   762,   257,   259,   258,   260,   132,   133,
   261,   765,   262,  1048,  1049,  1612,  1613,   203,   263,  1616,
   264,   204,   773,    43,    44,    45,    46,   480,    48,   265,
   201,   266,   868,   783,   202,   785,   786,   267,   239,   268,
  1350,   236,   287,    11,    12,    13,    14,    15,    16,    17,
    18,   964,   965,   966,   967,   968,   480,   269,   271,   270,
   272,   273,   275,   274,   276,   302,  1019,  1021,   288,   289,
  1041,   304,   305,   306,   307,   308,   823,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   320,   480,   480,   480,
   324,   318,   304,   305,   306,   307,   308,   898,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   277,   319,   278,
  1706,   279,   318,   280,   281,   326,   282,   304,   305,   306,
   307,   308,   340,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   283,   285,   284,   286,   341,   318,   304,   305,
   306,   307,   308,   342,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   853,   854,   715,   343,   716,   318,   715,
   715,   743,   896,  1028,   347,  1029,   348,   855,   856,   857,
   858,   859,   860,   861,   345,   349,   479,   925,   715,   350,
  1040,   867,   346,   715,   873,  1069,   715,   715,  1070,  1071,
   884,   351,  1180,   882,   715,  1293,  1159,  1294,  1651,  1781,
  1652,  1664,  1666,  1665,  1667,   479,  1668,   713,  1669,  1691,
   352,  1692,   480,  1772,  1863,  1773,  1864,  1865,  1867,  1866,
  1868,  1994,   977,  1995,   363,   364,   918,   919,   920,  1996,
  1998,  1997,  1999,  2105,   366,  2106,   479,   479,   479,   365,
   369,   927,   928,  1025,  1147,   931,  2107,  2109,  2108,  2110,
   370,  2111,   944,  2112,   374,   380,   942,   943,   382,   383,
  1835,   953,  2113,  2115,  2114,  2116,   304,   305,   306,   307,
   308,   386,   309,   310,   311,   312,   313,   314,   315,   316,
   317,  2192,  1175,  2193,   419,  2194,   318,  2195,  2196,  2240,
  2197,  2241,   981,   982,   983,   984,   985,   986,   987,   988,
   989,   990,   991,   992,   993,   994,   995,   996,   997,   998,
   999,  1000,  1001,  1002,  1003,  1004,  1005,  1006,   306,   307,
   308,   387,   309,   310,   311,   312,   313,   314,   315,   316,
   317,  2242,   823,  2243,   421,   389,   318,  1022,  2244,  2288,
  2245,  2289,   390,  2290,  1027,  2291,   304,   305,   306,   307,
   308,   391,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   479,  2292,  1042,  2293,  1043,   318,   307,   308,   392,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   393,
  1059,  1060,  1061,   394,   318,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   395,   396,   397,  1085,   398,   318,
   422,  1081,  1082,  1083,   399,   400,   401,   402,   403,   404,
  1354,   405,   304,   305,   306,   307,   308,   406,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   407,   408,   409,
   410,   411,   318,   425,   412,   413,   414,   415,   416,   417,
    94,   329,   418,  2015,   318,  1117,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   423,   477,   486,   487,   520,   330,   515,   526,   534,  1268,
   563,   559,   560,   566,   569,   573,   574,  1148,   575,   576,
   577,   578,   579,  1155,   580,   581,    43,    44,    45,    46,
    47,    48,   582,   583,   584,   585,   586,   587,   588,   589,
   590,   591,   592,  1164,  1165,  1166,   593,  1238,   594,   595,
   596,   597,   598,  1181,  1174,  1184,   599,  1187,   600,   601,
   602,   603,   711,   606,   712,   607,   608,   723,  1193,  1194,
   722,   728,  1207,   730,   731,   732,   734,   540,   736,   543,
  1206,   737,   746,  1209,   759,   763,   764,  1276,   775,   776,
   777,   778,   781,  1219,   779,   782,   788,   819,   789,   869,
  1226,  1227,  1228,   790,   791,   792,   793,  1233,   877,   794,
   795,  1237,   796,   797,   798,  1239,  1240,  1241,  1242,  1243,
  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,
  1264,   799,   800,   801,   802,   803,   804,   805,   806,   807,
   808,   809,   129,   331,   810,   811,  1274,   812,   131,   813,
   852,   814,   815,   134,   816,   817,   818,   820,   826,   332,
   821,   827,   828,   829,  1281,   830,   831,   832,   304,   305,
   306,   307,   308,   833,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   862,  1300,    94,   290,  1297,   318,  1298,
   866,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    94,   290,   874,   899,   875,
   881,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   887,   304,   305,   306,   307,
   308,   889,   309,   310,   311,   312,   313,   314,   315,   316,
   317,  1353,   834,  1361,   835,  1367,   318,  1370,   836,  1360,
   900,  1366,   837,  1369,   838,  1372,  1373,   839,   878,   840,
   841,   842,  1377,   843,   844,   540,   845,   543,   846,   847,
   848,  1386,   849,   850,   851,   901,   902,   903,   906,  1394,
   907,   908,   909,   910,  1399,   911,   912,  1402,   913,  1404,
  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,
  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,
  1425,  1426,  1427,  1428,  1429,   921,   926,   940,   355,  1646,
   932,  1434,   934,   291,   292,  1435,   939,   941,   945,   946,
   947,   948,   949,   952,   954,   955,   958,   959,  1454,   960,
   961,   962,   971,  1016,  1018,   972,   973,   129,   130,   974,
   975,   976,   978,   131,  1023,   979,  1047,  1024,   134,  1030,
  1034,   295,  1036,  1038,   296,  1039,  1074,  1062,  1075,  1080,
  1084,  1086,  1090,  1091,  1092,  1093,  1094,   129,   130,  1095,
  1096,  1097,  1099,   131,  1100,  1101,  1102,  1103,   134,  1118,
  1104,   738,  1149,  1150,   739,  1108,  1105,  1106,  1107,  1114,
  1277,  1109,  1110,  1498,  1111,  1112,  1113,  1115,  1116,  1503,
  1145,  1514,  1507,  1152,  1156,  1737,  1157,  1740,  1158,  1161,
  1162,  1163,  1278,  1167,  1168,  1169,  1170,  1171,  1172,  1173,
  1182,  1185,  1188,  1190,  1191,  1192,  1530,  1531,  1532,  1533,
  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,
  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1195,  1552,  1208,
  1199,  1211,  1212,  1213,  1214,  1218,   304,   305,   306,   307,
   308,  1564,   309,   310,   311,   312,   313,   314,   315,   316,
   317,  1215,  1217,  1220,  1221,  1222,   318,  1224,  1452,  1223,
  1265,    94,   290,  1230,   747,  1231,  1804,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,  1234,  1235,  1236,   519,  1280,  1266,  1267,  1303,  1269,
  1270,  1279,  1296,  1381,  1382,  1271,  1385,  1619,  1621,  1623,
  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,
  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,
  1644,  1282,  1273,  1284,  1301,  1306,  1286,  1288,  1659,   304,
   305,   306,   307,   308,   570,   309,   310,   311,   312,   313,
   314,   315,   316,   317,  1295,  1304,  1305,  1310,  1307,   318,
   337,   304,   305,   306,   307,   308,   344,   309,   310,   311,
   312,   313,   314,   315,   316,   317,  1309,  1315,  1311,  1316,
  1319,   318,  1351,  1374,  1387,  1389,  1705,  1390,  1391,   368,
  1780,  1392,  1393,  1395,  1704,   372,   373,  1397,  1317,  1320,
  1710,  1398,  1712,  1349,  1714,  1322,  1716,  1717,  1718,  1719,
  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,
  1730,  1731,  1732,  1733,  1734,  1735,  1736,   304,   305,   306,
   307,   308,  1748,   309,   310,   311,   312,   313,   314,   315,
   316,   317,  1400,   129,   130,  1433,  1401,   318,  1403,   131,
  1430,  1431,  1439,  1438,   134,  1496,   727,   894,  1453,  1500,
   895,   304,   305,   306,   307,   308,  1450,   309,   310,   311,
   312,   313,   314,   315,   316,   317,  1501,  1451,  1455,  1459,
  1456,   318,  1778,  1779,  1457,  1462,  1466,  1504,  1505,  1508,
  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1460,  1464,
  1493,   304,   305,   306,   307,   308,  1509,   309,   310,   311,
   312,   313,   314,   315,   316,   317,  1510,  1513,  1519,  1520,
  1521,   318,  1523,  1524,  1525,  1526,  1553,  1555,  1557,  1562,
   897,  1558,  1832,  1560,  1565,  1563,  1566,  1837,  1839,  1841,
  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,
  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,  1567,    94,
   516,  1568,  1571,  1569,  1570,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,  1890,
  1572,  1892,  1573,  1894,  1595,  1896,  1897,  1898,  1899,  1900,
  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,
  1911,  1912,  1913,   304,   305,   306,   307,   308,  1597,   309,
   310,   311,   312,   313,   314,   315,   316,   317,  1598,  1600,
  1604,  1607,  1610,   318,  1611,  1614,  1615,  1617,  1648,  1662,
  1695,  1663,  1650,   936,  1937,  1938,  1939,  1940,  1941,  1942,
  1943,  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1654,
  1656,  1698,  1657,  1658,  1660,  1661,  1699,  1693,  1701,  1694,
  1703,  1708,  1709,  1711,  1713,   714,  1715,  1738,  1741,  1973,
  1975,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,
  1986,  1987,  1988,  1989,  1990,  1991,  1992,   304,   305,   306,
   307,   308,  1743,   309,   310,   311,   312,   313,   314,   315,
   316,   317,  1774,  1775,  1776,  1777,  1749,   318,  1805,  1808,
  2016,  1746,  2018,  1833,  2020,  1750,  2022,  2023,  2024,  2025,
  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
  2036,   129,   130,  1809,  1810,  1862,  1811,   131,  1812,  1813,
  1887,  1861,   134,  1889,  1891,  1893,  1895,  1953,   517,  1914,
  1952,  2017,  1954,  1955,  1993,  2019,  2021,  2037,  2053,  2069,
  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,  2070,
  2071,  2072,  2073,  2074,  2127,  2129,  2131,  2133,  2135,  2137,
  2171,  2172,  2173,  2205,  2207,  2085,  2087,  2089,  2091,  2093,
  2095,  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,  2104,
   304,   305,   306,   307,   308,  2209,   309,   310,   311,   312,
   313,   314,   315,   316,   317,  2250,  2252,  2254,  2225,  2226,
   318,  2126,  2295,  2128,  2297,  2130,  2299,  2132,  2227,  2134,
  2279,  2136,  2280,  2138,  2139,  2140,  2141,  2142,  2143,  2144,
  2145,  2146,   304,   305,   306,   307,   308,  2301,   309,   310,
   311,   312,   313,   314,   315,   316,   317,  2302,   825,    72,
    79,  2281,   318,  2156,  2157,  2158,  2159,  2160,  2161,  1151,
   752,  1198,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2174,  2175,  2176,  2177,  2178,  2179,  2181,  2183,  2185,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  2198,  2199,  2200,  2201,  2202,  2203,  2204,     0,
  2206,     0,  2208,     0,     0,     0,     0,     0,     0,   885,
   886,     0,   888,     0,   890,   891,  2216,  2217,  2218,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  2228,  2229,
  2230,  2232,  2234,  2236,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2246,  2247,  2248,  2249,     0,  2251,     0,
  2253,     0,     0,     0,     0,   929,   930,     0,     0,   933,
     0,  2258,  2259,  2260,     0,     0,     0,  2264,  2265,  2266,
     0,     0,     0,  2270,  2271,  2272,   950,   951,     0,     0,
     0,     0,   956,   957,     0,  2283,  2285,  2287,     0,   963,
     0,   970,     0,     0,  2294,     0,  2296,     0,  2298,    94,
   290,     0,     0,     0,     0,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     0,
     0,    94,    95,    96,     0,    97,     0,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,     0,   122,   123,   124,  1035,     0,  1037,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1044,  1045,
  1046,     0,     0,     0,  1050,  1051,  1052,  1053,  1054,  1055,
  1056,    94,   329,     0,     0,     0,     0,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   304,   305,   306,   307,   308,   330,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   482,     0,    43,    44,    45,
    46,    47,    48,     0,   550,    27,    28,   551,   552,    31,
    32,    33,     0,    34,     0,    36,    37,    38,     0,    40,
    41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1357,  1358,     0,     0,     0,    53,   131,     0,     0,
     0,     0,  1359,     0,     0,     0,     0,  1146,   171,   125,
   126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   129,   130,    55,    56,    57,     0,   131,
   132,   133,     0,     0,   134,     0,   135,     0,   136,   304,
   305,   306,   307,   308,    67,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,     0,     0,     0,     0,  1178,     0,  1179,  1200,     0,
     0,     0,     0,     0,     0,     0,  1210,     0,     0,     0,
     0,     0,     0,   129,   478,     0,     0,     0,     0,   131,
     0,    94,   290,   471,   134,  1229,     0,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,     0,   122,   123,   124,    94,   290,     0,     0,   553,
     0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    94,   516,     0,     0,     0,
     0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,     0,   550,    27,    28,   551,
   552,    31,    32,    33,     0,    34,     0,    36,    37,    38,
     0,    40,    41,     0,     0,     0,     0,     0,   550,    27,
    28,   551,   552,    31,    32,    33,     0,    34,    53,    36,
    37,    38,     0,    40,    41,     0,     0,     0,     0,     0,
   550,    27,    28,   551,   552,    31,    32,    33,     0,    34,
    53,    36,    37,    38,     0,    40,    41,    55,    56,    57,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,     0,     0,     0,    67,     0,     0,    55,
    56,    57,     0,   129,   130,     0,     0,     0,     0,   131,
     0,  1375,     0,  1376,   134,     0,     0,  1380,    67,     0,
     0,    55,    56,    57,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1396,     0,     0,     0,   129,   130,     0,
    67,     0,     0,   131,     0,     0,     0,     0,   134,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,   129,   130,   318,
     0,   476,     0,   131,     0,   536,   -10,     1,   134,   -10,
   -53,   558,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   784,     0,     0,     0,     0,  1201,   -53,
  1202,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,     0,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,
  1494,     0,   304,   305,   306,   307,   308,  1499,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,  1511,  1512,
     0,     0,   318,     0,   -53,   -53,   -53,   -53,  1355,     0,
  1356,     0,   -53,     0,   -53,     0,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,     0,   -53,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1554,   -10,   -10,   -10,   -10,   -10,   -10,   -10,
   -10,     0,     0,     0,     0,     0,     0,     0,     0,   206,
     0,     0,     0,     0,     0,     0,     0,     0,     2,     3,
     0,     4,   612,   613,   614,   615,   616,   617,   618,   619,
   620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
   630,   631,   632,   633,   634,   635,   636,   637,     0,     0,
     0,     0,     0,     0,     0,  1602,     0,     0,     0,     0,
  1609,   612,   613,   614,   615,   616,   617,   618,   619,   620,
   621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
   631,   632,   633,   634,   635,   636,   637,   207,   208,   209,
     0,     0,     0,     0,     0,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,     0,     0,     0,     0,     0,
     0,     0,     0,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     0,    23,     0,     0,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,  1697,
     0,     0,     0,   638,   318,     0,     0,     0,     0,  1707,
    24,     0,   753,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,    41,     0,     0,     0,    42,    43,    44,    45,    46,
    47,    48,   980,    49,    50,    51,    52,    53,     0,     0,
     0,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,    54,    55,    56,    57,   893,
     0,     0,     0,    58,     0,    59,     0,    60,    61,    62,
    63,    64,    65,    66,     0,    67,     0,     0,  1782,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,     0,   304,   305,   306,   307,   308,   917,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,     0,     0,     0,     0,     0,     0,
  1176,     0,     0,     0,     0,     0,     0,  1834,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
     0,     0,     0,     0,     0,     0,  1378,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,  1888,
   304,   305,   306,   307,   308,  1379,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,     0,   304,   305,   306,   307,   308,  1436,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,     0,     0,     0,     0,     0,
     0,  1442,  1933,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,     0,     0,     0,     0,     0,
     0,  1445,     0,     0,     0,   304,   305,   306,   307,   308,
  1971,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,     0,   304,   305,
   306,   307,   308,  1448,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
     0,   304,   305,   306,   307,   308,  1449,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,   304,   305,   306,   307,   308,  1495,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,     0,   304,   305,   306,
   307,   308,  1556,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,     0,
   304,   305,   306,   307,   308,  1559,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,     0,   304,   305,   306,   307,   308,  1561,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,     0,   304,   305,   306,   307,
   308,  1807,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,   304,
   305,   306,   307,   308,  1860,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,   536,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,   537,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,   567,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,   687,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,   688,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
   701,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,   702,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,   703,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,   704,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,   705,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,   706,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,   766,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,   767,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,   768,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,   915,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
   916,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,   935,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1072,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1073,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1087,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1088,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1119,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1120,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1121,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1122,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1123,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1124,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1125,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1126,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1127,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1128,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1129,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1130,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1131,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1132,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1133,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1134,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1135,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1136,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1137,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1138,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1139,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1140,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1141,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1142,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1143,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1144,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1160,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1275,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1289,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1290,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1299,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1302,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1313,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1318,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1321,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1323,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1324,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1325,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1326,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1327,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1328,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1329,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1330,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1331,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1332,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1333,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1334,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1335,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1336,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1337,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1338,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1339,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1340,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1341,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1342,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1343,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1344,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1345,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1346,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1347,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1348,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1352,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1458,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1470,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1471,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1472,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1473,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1474,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1475,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1476,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1477,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1478,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1479,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1480,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1481,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1482,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1483,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1484,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1485,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1486,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1487,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1488,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1489,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1490,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1492,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1574,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1575,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1576,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1577,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1578,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1579,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1580,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1581,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1582,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1583,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1584,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1585,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1586,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1587,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1588,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1589,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1590,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1591,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1592,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1593,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1594,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1670,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1671,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1672,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1673,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1674,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1675,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1676,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1677,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1678,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1679,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1680,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1681,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1682,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1683,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1684,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1685,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1686,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1687,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1688,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1689,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1690,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1747,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1754,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1755,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1756,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1757,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1758,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1759,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1760,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1761,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1762,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1763,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1764,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1765,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1766,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1767,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1768,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1769,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1770,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1771,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1806,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1814,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1815,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1816,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1817,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1818,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1819,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1820,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1821,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1822,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1823,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1824,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1825,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1826,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1827,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1828,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1829,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1830,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1831,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1869,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1870,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1871,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1872,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1873,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1874,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1875,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1876,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1877,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1878,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1879,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1880,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1881,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1882,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1883,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1884,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1885,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1886,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1918,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1919,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1920,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1921,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1922,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1923,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1924,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1925,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1926,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1927,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1928,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1929,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1930,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1931,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1932,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1956,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1957,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1958,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1959,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1960,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  1961,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  1962,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  1963,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  1964,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  1965,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  1966,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  1967,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  1968,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  1969,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  1970,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2000,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2001,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2002,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2003,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2004,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2005,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2006,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2007,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2008,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2009,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2010,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2011,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2012,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2013,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2014,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2044,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2045,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2046,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2047,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2048,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2049,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2050,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2051,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2052,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2075,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2076,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2077,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2078,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2079,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2080,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2081,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2082,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2083,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2117,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2118,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2119,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2120,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2121,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2122,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2123,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2124,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2125,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2147,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2148,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2149,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2150,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2151,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2152,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2165,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2166,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2167,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2168,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2169,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2170,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2186,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2187,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2188,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2189,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2190,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2191,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2210,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2211,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2212,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2222,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2223,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2224,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2237,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2238,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,   304,   305,   306,   307,   308,  2239,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,   304,   305,   306,   307,   308,  2255,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,   304,   305,   306,   307,   308,  2256,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,   304,   305,   306,   307,   308,
  2257,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,   304,   305,   306,   307,
   308,  2261,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,   304,   305,   306,
   307,   308,  2262,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,   304,   305,
   306,   307,   308,  2263,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,   304,
   305,   306,   307,   308,  2267,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
   304,   305,   306,   307,   308,  2268,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,   304,   305,   306,   307,   308,  2269,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   609,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   666,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   668,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   670,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   672,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   674,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   676,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   678,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   680,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   682,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   684,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   686,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   690,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   692,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   694,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   696,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   698,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   700,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   769,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
   774,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,   865,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
  1008,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,  1010,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
  1012,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,  1014,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,     0,     0,
  1015,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,     0,     0,  1153,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,   476,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,   506,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,   507,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,   508,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
   510,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,   512,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,   513,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,   521,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,   561,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,   562,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,   565,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,   571,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,   665,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,   667,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
   669,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,   671,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,   673,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,   675,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,   677,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,   679,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,   681,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,   683,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,   685,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,   689,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
   691,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,   693,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,   695,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,   697,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,   699,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,   733,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,   735,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,   748,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,   749,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,   750,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
   754,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,   755,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,   756,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,   757,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,   758,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,   780,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,   787,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,  1007,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,  1009,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,  1011,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
  1013,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,  1076,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,  1177,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,  1205,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,  1308,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,  1312,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,  1314,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,  1432,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,  1461,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,  1463,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
  1465,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,  1467,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,  1468,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,  1469,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,  1491,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,  1596,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,  1751,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,  1752,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,  1753,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,  1915,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
  1916,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,  1917,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,  2038,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,  2039,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,  2040,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,  2041,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,  2042,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318,
     0,  2043,   304,   305,   306,   307,   308,     0,   309,   310,
   311,   312,   313,   314,   315,   316,   317,     0,     0,     0,
     0,     0,   318,     0,  2153,   304,   305,   306,   307,   308,
     0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     0,     0,     0,     0,     0,   318,     0,  2154,   304,   305,
   306,   307,   308,     0,   309,   310,   311,   312,   313,   314,
   315,   316,   317,     0,     0,     0,     0,     0,   318,     0,
  2155,   304,   305,   306,   307,   308,     0,   309,   310,   311,
   312,   313,   314,   315,   316,   317,     0,     0,     0,     0,
     0,   318,     0,  2213,   304,   305,   306,   307,   308,     0,
   309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     0,     0,     0,     0,   318,     0,  2214,   304,   305,   306,
   307,   308,     0,   309,   310,   311,   312,   313,   314,   315,
   316,   317,     0,     0,     0,     0,     0,   318,     0,  2215,
   304,   305,   306,   307,   308,     0,   309,   310,   311,   312,
   313,   314,   315,   316,   317,     0,     0,     0,     0,     0,
   318,     0,  2273,   304,   305,   306,   307,   308,     0,   309,
   310,   311,   312,   313,   314,   315,   316,   317,     0,     0,
     0,     0,     0,   318,     0,  2274,   304,   305,   306,   307,
   308,     0,   309,   310,   311,   312,   313,   314,   315,   316,
   317,     0,     0,     0,     0,     0,   318,     0,  2275,   304,
   305,   306,   307,   308,     0,   309,   310,   311,   312,   313,
   314,   315,   316,   317,     0,     0,     0,     0,     0,   318
};

static const short yycheck[] = {    23,
    23,   361,     7,    92,     7,   298,   725,     4,   180,     4,
     4,     4,   184,     3,    44,    45,    42,   332,     6,    65,
     4,   287,   288,   289,     6,    66,    65,     4,     7,  1286,
    71,  1288,     4,  1195,  1364,   103,    65,     6,  1368,    66,
     4,  1371,    38,     6,    71,    41,    42,    66,    66,   166,
    66,    84,    71,    71,  1094,    71,     7,     4,     5,   185,
   186,     5,    66,  1103,    66,   185,   186,    71,    38,    71,
  1110,    41,    42,     6,    44,    66,   202,    66,   185,   186,
    71,   201,    71,   203,   185,   186,    49,    34,    35,    36,
    34,    35,    36,   196,   201,     6,   203,   185,   186,   202,
   201,     6,   203,   185,   186,   129,   130,   131,   196,   196,
   134,   135,   196,   137,   202,   185,   186,     6,   202,   201,
   144,   145,   146,   296,   148,     5,   150,   151,   196,   153,
   192,   193,   202,   117,   106,   107,   198,   167,   200,   169,
  1302,    38,   106,   107,    41,   175,   170,   171,   185,   186,
   196,     6,   192,   193,    34,    35,    36,   196,   877,   332,
   200,   196,   203,   202,   196,   202,   190,   191,   196,   193,
   196,   195,   205,   202,   198,   199,   203,   197,    66,   185,
   186,   201,     7,    71,   203,   203,   196,   203,   198,   482,
   505,   197,   171,   172,   173,   174,   186,   185,   186,   203,
     6,   203,   517,   185,   186,   202,    65,   202,   202,   202,
   382,     8,   203,   243,   203,   196,   240,   483,   202,   196,
   196,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,  1303,     7,   185,   186,  1307,   196,  1599,
   197,   196,   296,  1603,   201,   298,  1606,   197,     6,     7,
   304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,     8,    41,    42,  1555,    44,
   324,  1558,   326,  1560,     6,     7,   197,   331,   332,  1028,
   201,   196,   192,   193,   185,   186,   340,   341,   342,   343,
   200,   345,   346,   347,   348,   349,   350,   351,   358,   359,
   201,   196,   505,     7,   185,   186,   185,   186,    46,   363,
   364,   365,   366,   609,   517,   369,   171,   172,   173,   174,
   201,   196,   201,   198,   378,   360,   361,   360,   361,    42,
   197,   185,   186,   387,   201,   197,  1696,   192,   193,   201,
  1700,   198,  1702,   200,   196,   200,   198,   201,   175,   176,
   177,   178,   179,    42,   181,   182,   183,   184,   185,   186,
   187,   188,   189,  1650,    42,   710,   197,  1654,   195,  1656,
   201,   196,   425,   198,   185,   186,   203,   185,   186,   185,
   186,   196,     6,   198,    44,  1455,  1456,  1457,  1458,     3,
   201,    42,  1462,   201,   739,   201,   185,   186,   171,   172,
   173,   174,   196,     6,   185,   186,   187,   188,   189,   202,
   192,   193,   201,    42,   195,   711,   198,   202,   200,   192,
   193,   475,   192,   193,   478,   770,   771,   772,     6,   482,
   484,    55,   175,   176,   177,   178,   179,     6,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   192,   193,     6,
     4,   505,   195,   198,   197,   200,   187,   188,   189,     6,
   514,   515,   196,   517,   195,   519,   520,   171,   172,   173,
   174,   196,   526,   192,   193,   535,   196,     6,   198,   198,
   196,   200,   536,   537,   196,   196,   198,   198,   192,   193,
   196,   545,   198,    56,    57,  1565,  1566,    42,   196,  1569,
   198,     3,   556,    59,    60,    61,    62,   710,    64,   196,
     4,   198,   715,   567,     4,   569,   570,   196,     5,   198,
  1269,   196,   196,   137,   138,   139,   140,   141,   142,   143,
   144,   122,   123,   124,   125,   126,   739,   196,   196,   198,
   198,   196,   196,   198,   198,     6,   869,   870,   196,   196,
   895,   175,   176,   177,   178,   179,   609,   181,   182,   183,
   184,   185,   186,   187,   188,   189,     5,   770,   771,   772,
   196,   195,   175,   176,   177,   178,   179,     6,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   196,     6,   198,
  1660,   196,   195,   198,   196,   196,   198,   175,   176,   177,
   178,   179,   202,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   196,   196,   198,   198,   196,   195,   175,   176,
   177,   178,   179,   196,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   687,   688,   201,   196,   203,   195,   201,
   201,   203,   203,   201,   196,   203,   196,   701,   702,   703,
   704,   705,   706,   707,   202,   196,   710,     6,   201,   196,
   203,   715,   202,   201,   718,   203,   201,   201,   203,   203,
   730,   196,  1062,   727,   201,   201,   203,   203,   201,  1749,
   203,   201,   201,   203,   203,   739,   201,   741,   203,   201,
     4,   203,   895,   201,   201,   203,   203,   201,   201,   203,
   203,   201,   821,   203,   202,   202,   766,   767,   768,   201,
   201,   203,   203,   201,   198,   203,   770,   771,   772,   202,
   198,   775,   776,     6,  1020,   779,   201,   201,   203,   203,
     6,   201,   792,   203,     6,   200,   790,   791,   202,   109,
  1810,   801,   201,   201,   203,   203,   175,   176,   177,   178,
   179,     6,   181,   182,   183,   184,   185,   186,   187,   188,
   189,   201,  1058,   203,     5,   201,   195,   203,   201,   201,
   203,   203,   826,   827,   828,   829,   830,   831,   832,   833,
   834,   835,   836,   837,   838,   839,   840,   841,   842,   843,
   844,   845,   846,   847,   848,   849,   850,   851,   177,   178,
   179,   196,   181,   182,   183,   184,   185,   186,   187,   188,
   189,   201,   865,   203,   201,   196,   195,   870,   201,   201,
   203,   203,   196,   201,   878,   203,   175,   176,   177,   178,
   179,   196,   181,   182,   183,   184,   185,   186,   187,   188,
   189,   895,   201,   897,   203,   899,   195,   178,   179,   196,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   196,
   914,   915,   916,   196,   195,   181,   182,   183,   184,   185,
   186,   187,   188,   189,   196,   196,   196,   940,   196,   195,
   197,   935,   936,   937,   196,   196,   196,   196,   196,   196,
  1280,   196,   175,   176,   177,   178,   179,   196,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   196,   196,   196,
   196,   196,   195,     4,   196,   196,   196,   196,   196,   196,
     3,     4,   196,  1993,   195,   978,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   201,     7,   200,     7,     7,    38,   202,     7,   197,     6,
   104,     7,     7,   106,   202,   167,     5,  1021,     5,     5,
     5,     5,     5,  1033,     5,     5,    59,    60,    61,    62,
    63,    64,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,  1047,  1048,  1049,     5,  1116,     5,     5,
     5,   155,     5,  1063,  1058,  1065,     5,  1067,     5,     5,
     3,     5,   201,     5,   197,     6,     5,     4,  1072,  1073,
     6,     6,  1085,     7,     7,     7,     7,  1062,     7,  1062,
  1084,     7,     7,  1087,   200,   203,   203,     6,   202,   202,
     7,     7,     7,  1097,   196,   200,   168,     5,   201,   199,
  1104,  1105,  1106,   201,   201,   201,   201,  1111,     7,   201,
   201,  1115,   201,   201,   201,  1119,  1120,  1121,  1122,  1123,
  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,
  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
  1144,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   185,   186,   201,   201,  1160,   201,   191,   201,
     6,   201,   201,   196,   201,   201,   201,   197,   196,   202,
   201,   196,   196,   196,  1178,   196,   196,   196,   175,   176,
   177,   178,   179,   196,   181,   182,   183,   184,   185,   186,
   187,   188,   189,     4,  1207,     3,     4,  1201,   195,  1203,
     6,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     3,     4,     6,   202,     6,
     6,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     7,   175,   176,   177,   178,
   179,     7,   181,   182,   183,   184,   185,   186,   187,   188,
   189,  1275,   196,  1283,   196,  1285,   195,  1287,   196,  1283,
     7,  1285,   196,  1287,   196,  1289,  1290,   196,   198,   196,
   196,   196,  1296,   196,   196,  1280,   196,  1280,   196,   196,
   196,  1305,   196,   196,   196,     7,     7,     7,     7,  1313,
     7,     7,     7,     7,  1318,     7,     7,  1321,     4,  1323,
  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,  1342,  1343,
  1344,  1345,  1346,  1347,  1348,     6,     6,   164,  1358,  1595,
     7,  1355,     4,  1357,  1358,  1359,     7,     3,     3,     3,
   187,     3,     3,     3,     3,     3,     3,     3,  1381,     3,
     3,     3,     3,   197,   197,     5,     5,   185,   186,     3,
     3,     6,     4,   191,   200,     6,   196,     7,   196,     6,
     6,   199,     6,     6,   202,     6,     6,   202,     6,   105,
   202,   201,   201,   197,   201,   197,   201,   185,   186,   197,
   201,   201,   201,   191,   197,   197,   201,   201,   196,     6,
   201,   199,     6,     4,   202,   197,   201,   201,   201,   197,
     6,   201,   201,  1437,   201,   201,   201,   201,   201,  1443,
   200,  1454,  1446,     6,     6,  1691,     6,  1693,   199,     6,
     6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
     6,     6,     6,     6,     6,     6,  1470,  1471,  1472,  1473,
  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,
  1484,  1485,  1486,  1487,  1488,  1489,  1490,     7,  1492,     3,
   105,     6,     3,     6,   187,     3,   175,   176,   177,   178,
   179,  1514,   181,   182,   183,   184,   185,   186,   187,   188,
   189,     6,     6,     6,     3,     6,   195,     3,     6,     6,
     4,     3,     4,     6,   203,     3,  1772,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     3,     3,     6,     8,   202,     6,     6,   201,     7,
     6,     6,   102,   164,     6,   200,     3,  1571,  1572,  1573,
  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
  1594,   203,   199,   202,   197,   197,   202,   202,  1611,   175,
   176,   177,   178,   179,     8,   181,   182,   183,   184,   185,
   186,   187,   188,   189,   202,   201,   201,   197,   201,   195,
   152,   175,   176,   177,   178,   179,   158,   181,   182,   183,
   184,   185,   186,   187,   188,   189,   201,   201,   197,   197,
   201,   195,   107,   105,     6,     6,  1659,     3,     6,   181,
   169,     6,     6,     6,  1658,   187,   188,     6,   197,   197,
  1664,     6,  1666,   197,  1668,   201,  1670,  1671,  1672,  1673,
  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
  1684,  1685,  1686,  1687,  1688,  1689,  1690,   175,   176,   177,
   178,   179,  1705,   181,   182,   183,   184,   185,   186,   187,
   188,   189,     3,   185,   186,   203,     6,   195,     5,   191,
     6,     5,   202,     6,   196,     6,     8,   199,   203,     6,
   202,   175,   176,   177,   178,   179,   202,   181,   182,   183,
   184,   185,   186,   187,   188,   189,     6,   201,   201,   197,
   201,   195,  1746,  1747,   201,   201,   201,     6,     6,     6,
  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,   197,   197,
   201,   175,   176,   177,   178,   179,     6,   181,   182,   183,
   184,   185,   186,   187,   188,   189,     6,     6,     6,     6,
     6,   195,     6,     6,     6,     5,     5,   202,   201,   201,
     8,   202,  1806,   202,   201,   203,   201,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,
  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,   197,     3,
     4,   197,   202,   201,   201,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,  1863,
   202,  1865,   202,  1867,   202,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
  1884,  1885,  1886,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,     6,     6,
     6,     6,   102,   195,   164,     6,     6,     5,     5,   197,
     6,   197,   202,     8,  1918,  1919,  1920,  1921,  1922,  1923,
  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,   202,
   202,     6,   203,   202,   201,   201,     6,   202,     6,   203,
   102,     6,     6,     6,     6,   477,     6,     6,     6,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,  1967,  1968,  1969,  1970,   175,   176,   177,
   178,   179,   203,   181,   182,   183,   184,   185,   186,   187,
   188,   189,     6,     6,     6,     6,   201,   195,     6,   170,
  1994,   202,  1996,     6,  1998,   201,  2000,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
  2014,   185,   186,   201,   201,   197,   202,   191,   202,   202,
     6,   201,   196,     6,     6,     6,     6,   202,   202,   201,
   201,     6,   202,   202,   201,     6,     6,   197,     6,   202,
  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,   202,
   202,   202,   202,   202,     6,     6,     6,     6,     6,     6,
   202,   202,   202,     6,     6,  2069,  2070,  2071,  2072,  2073,
  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,
   175,   176,   177,   178,   179,     6,   181,   182,   183,   184,
   185,   186,   187,   188,   189,     6,     6,     6,   202,   202,
   195,  2105,     6,  2107,     6,  2109,     6,  2111,   202,  2113,
   202,  2115,   202,  2117,  2118,  2119,  2120,  2121,  2122,  2123,
  2124,  2125,   175,   176,   177,   178,   179,     0,   181,   182,
   183,   184,   185,   186,   187,   188,   189,     0,   611,     7,
     7,   202,   195,  2147,  2148,  2149,  2150,  2151,  2152,  1024,
   203,  1078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2165,  2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  2186,  2187,  2188,  2189,  2190,  2191,  2192,    -1,
  2194,    -1,  2196,    -1,    -1,    -1,    -1,    -1,    -1,   731,
   732,    -1,   734,    -1,   736,   737,  2210,  2211,  2212,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2222,  2223,
  2224,  2225,  2226,  2227,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2237,  2238,  2239,  2240,    -1,  2242,    -1,
  2244,    -1,    -1,    -1,    -1,   777,   778,    -1,    -1,   781,
    -1,  2255,  2256,  2257,    -1,    -1,    -1,  2261,  2262,  2263,
    -1,    -1,    -1,  2267,  2268,  2269,   798,   799,    -1,    -1,
    -1,    -1,   804,   805,    -1,  2279,  2280,  2281,    -1,   811,
    -1,   813,    -1,    -1,  2288,    -1,  2290,    -1,  2292,     3,
     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,     3,     4,     5,    -1,     7,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,   887,    -1,   889,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   900,   901,
   902,    -1,    -1,    -1,   906,   907,   908,   909,   910,   911,
   912,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   175,   176,   177,   178,   179,    38,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,    -1,    59,    60,    61,
    62,    63,    64,    -1,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    -1,    49,    50,    51,    -1,    53,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,    -1,    -1,    -1,    70,   191,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,    -1,  1019,   202,   171,
   172,   173,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,    99,   100,   101,    -1,   191,
   192,   193,    -1,    -1,   196,    -1,   198,    -1,   200,   175,
   176,   177,   178,   179,   118,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,  1080,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1088,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,    -1,   191,
    -1,     3,     4,     5,   196,  1107,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,     3,     4,    -1,    -1,   203,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    47,    -1,    49,    50,    51,
    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    70,    49,
    50,    51,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
    70,    49,    50,    51,    -1,    53,    54,    99,   100,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,   118,    -1,    -1,    99,
   100,   101,    -1,   185,   186,    -1,    -1,    -1,    -1,   191,
    -1,  1293,    -1,  1295,   196,    -1,    -1,  1299,   118,    -1,
    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1315,    -1,    -1,    -1,   185,   186,    -1,
   118,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,   185,   186,   195,
    -1,   197,    -1,   191,    -1,   201,     0,     1,   196,     3,
     4,   203,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   203,    -1,    -1,    -1,    -1,   201,    33,
   203,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    48,    49,    50,    51,    52,    53,
    54,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63,
    64,    -1,    66,    67,    68,    69,    70,    -1,    -1,    -1,
  1432,    -1,   175,   176,   177,   178,   179,  1439,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,  1450,  1451,
    -1,    -1,   195,    -1,    98,    99,   100,   101,   201,    -1,
   203,    -1,   106,    -1,   108,    -1,   110,   111,   112,   113,
   114,   115,   116,    -1,   118,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1494,   137,   138,   139,   140,   141,   142,   143,
   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,   163,
    -1,   165,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1557,    -1,    -1,    -1,    -1,
  1562,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   119,   120,   121,
    -1,    -1,    -1,    -1,    -1,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,    -1,   156,   157,   158,   159,   160,   161,
    -1,     4,    -1,    -1,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,  1651,
    -1,    -1,    -1,   203,   195,    -1,    -1,    -1,    -1,  1661,
    33,    -1,   203,    -1,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
    53,    54,    -1,    -1,    -1,    58,    59,    60,    61,    62,
    63,    64,   203,    66,    67,    68,    69,    70,    -1,    -1,
    -1,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,    98,    99,   100,   101,   203,
    -1,    -1,    -1,   106,    -1,   108,    -1,   110,   111,   112,
   113,   114,   115,   116,    -1,   118,    -1,    -1,  1750,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,    -1,   175,   176,   177,   178,   179,   203,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   203,    -1,    -1,    -1,    -1,    -1,    -1,  1809,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   203,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,  1861,
   175,   176,   177,   178,   179,   203,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,    -1,   175,   176,   177,   178,   179,   203,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   203,  1914,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   175,   176,   177,   178,   179,
  1952,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,   175,   176,
   177,   178,   179,   203,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
    -1,   175,   176,   177,   178,   179,   203,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,   175,   176,   177,   178,   179,   203,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,    -1,   175,   176,   177,
   178,   179,   203,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,
   175,   176,   177,   178,   179,   203,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,    -1,   175,   176,   177,   178,   179,   203,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,    -1,   175,   176,   177,   178,
   179,   203,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,   175,
   176,   177,   178,   179,   203,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,   175,   176,   177,   178,   179,   201,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,   175,   176,   177,   178,   179,   201,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,   201,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,   179,
   201,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,   178,
   179,   201,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,   177,
   178,   179,   201,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,   176,
   177,   178,   179,   201,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,   175,
   176,   177,   178,   179,   201,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
   175,   176,   177,   178,   179,   201,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,   175,   176,   177,   178,   179,   201,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
   199,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,    -1,    -1,   199,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,
    -1,   197,   175,   176,   177,   178,   179,    -1,   181,   182,
   183,   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,   179,
    -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,
   177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,
   197,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
   184,   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,
    -1,   195,    -1,   197,   175,   176,   177,   178,   179,    -1,
   181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,
   178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
   188,   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
   175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
   185,   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
   195,    -1,   197,   175,   176,   177,   178,   179,    -1,   181,
   182,   183,   184,   185,   186,   187,   188,   189,    -1,    -1,
    -1,    -1,    -1,   195,    -1,   197,   175,   176,   177,   178,
   179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,   175,
   176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
   186,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,   195
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 171 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 177 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 178 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1, MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 197 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 204 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 219 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 226 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 231 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 242 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 249 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 255 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 261 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 268 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 274 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 278 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 28:
#line 282 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 29:
#line 289 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 30:
#line 293 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 31:
#line 298 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 302 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 306 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 310 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 314 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 318 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 322 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 326 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 338 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 342 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 346 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 350 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 354 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 373 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 387 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 390 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 413 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 69:
#line 417 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 70:
#line 433 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 71:
#line 437 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 72:
#line 444 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 99:
#line 477 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 484 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 489 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 103:
#line 496 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 503 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 106:
#line 508 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 107:
#line 515 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 522 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 527 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 111:
#line 534 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 542 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 548 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 115:
#line 555 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 563 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 569 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 119:
#line 576 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 584 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 590 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 123:
#line 597 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 606 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 615 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 127:
#line 622 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 631 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 640 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 131:
#line 647 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 656 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 134:
#line 665 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 135:
#line 672 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 136:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 682 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 138:
#line 691 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 139:
#line 698 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 708 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 142:
#line 717 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 143:
#line 724 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 734 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 146:
#line 743 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 147:
#line 750 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 148:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 760 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 150:
#line 769 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 151:
#line 776 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 152:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 786 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 154:
#line 795 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 155:
#line 802 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 156:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 812 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 158:
#line 821 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 159:
#line 828 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 160:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 842 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 162:
#line 857 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 163:
#line 864 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 878 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 166:
#line 893 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 167:
#line 900 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 168:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 914 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 170:
#line 929 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 171:
#line 936 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 172:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 948 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 174:
#line 960 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 175:
#line 967 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 176:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 979 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 178:
#line 991 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 179:
#line 998 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 180:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1010 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 182:
#line 1022 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 183:
#line 1029 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 184:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1040 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 186:
#line 1052 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 187:
#line 1059 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 188:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1070 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 190:
#line 1082 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 191:
#line 1089 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 192:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1100 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 194:
#line 1112 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 195:
#line 1119 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 196:
#line 1124 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1132 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 198:
#line 1139 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 199:
#line 1146 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1151 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1159 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 202:
#line 1166 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 203:
#line 1175 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 204:
#line 1176 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 205:
#line 1177 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 206:
#line 1178 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 207:
#line 1179 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 208:
#line 1183 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 209:
#line 1184 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 210:
#line 1192 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 211:
#line 1219 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 212:
#line 1253 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l, i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 213:
#line 1300 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1315 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 215:
#line 1324 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 216:
#line 1339 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 217:
#line 1351 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1365 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 219:
#line 1388 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 220:
#line 1412 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 221:
#line 1424 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1438 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 223:
#line 1450 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1464 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1484 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1506 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
	}
      }
    ;
    break;}
case 227:
#line 1518 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
	}
      }
    ;
    break;}
case 228:
#line 1538 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d, yyvsp[-1].v[0], yyvsp[-1].v[1], yyvsp[-1].v[2], yyvsp[-1].v[3], yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 229:
#line 1545 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_POINT, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1551 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        v = FindPoint(ip, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 231:
#line 1570 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 232:
#line 1584 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_LINE, 1, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 233:
#line 1590 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_SPLN, 3, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1596 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        c = FindCurve(ip, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 235:
#line 1615 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_CIRC, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 236:
#line 1621 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_ELLI, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1627 "Gmsh.y"
{
      List_T *temp;
      int i, j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l), 1, sizeof(int));
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
      	List_Read(yyvsp[-3].l, i, &d);
        j = (int)d;
        List_Add(temp, &j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 238:
#line 1644 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d, MSH_SEGM_PARAMETRIC, 2, NULL, NULL, -1, -1, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].c, yyvsp[-4].c, yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 239:
#line 1650 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_LINE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 240:
#line 1656 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1662 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BSPLN, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 242:
#line 1673 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BEZIER, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1684 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l), 1, sizeof(int));
	for(i = 0; i < List_Nbr(yyvsp[-5].l); i++) {
	  List_Read(yyvsp[-5].l, i, &d);
	  j = (int)d;
	  List_Add(Temp, &j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d, MSH_SEGM_NURBS, (int)yyvsp[-1].d, Temp, yyvsp[-3].l, -1, -1, 0., 1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 244:
#line 1709 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 245:
#line 1715 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-2].l, NULL);
	s = FindSurface((int)yyvsp[-8].d, THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 246:
#line 1734 "Gmsh.y"
{
      List_Read(yyvsp[-1].l, 0, &d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i, THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 247:
#line 1756 "Gmsh.y"
{
    AddTriangulationToSurface ((int) yyvsp[-10].d, (int) yyvsp[-6].d, (int) yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
    yyval.s.Num = (int)yyvsp[-10].d;
  ;
    break;}
case 248:
#line 1764 "Gmsh.y"
{
      CreateNurbsSurface ((int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 249:
#line 1772 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 250:
#line 1776 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_SURFACE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 251:
#line 1782 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_LOOP, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 252:
#line 1791 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 253:
#line 1797 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 254:
#line 1803 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 255:
#line 1814 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 256:
#line 1819 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1824 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1829 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 259:
#line 1836 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 260:
#line 1837 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1838 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 262:
#line 1843 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 263:
#line 1847 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 264:
#line 1851 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 265:
#line 1865 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 266:
#line 1879 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 267:
#line 1898 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 268:
#line 1908 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 269:
#line 1919 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
    ;
    break;}
case 270:
#line 1926 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 271:
#line 1930 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 272:
#line 1939 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
    ;
    break;}
case 273:
#line 1951 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	ParseFile(tmpstring, 0, 0);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblemWithBoundingBox(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Open")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	OpenProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 274:
#line 1990 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(0, v, tmpstring);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 275:
#line 2003 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	//Maillage_Dimension_0(THEM);
	//mai3d(THEM, (int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 276:
#line 2020 "Gmsh.y"
{
    if(CTX.default_plugins)
      GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0); 
   ;
    break;}
case 277:
#line 2025 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1);
      else
	yymsg(GERROR, "Unknown Combine command");
    ;
    break;}
case 278:
#line 2032 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 279:
#line 2036 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 280:
#line 2058 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 281:
#line 2068 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 282:
#line 2078 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 283:
#line 2099 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 284:
#line 2120 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 285:
#line 2141 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 286:
#line 2147 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 287:
#line 2152 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 288:
#line 2157 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 289:
#line 2161 "Gmsh.y"
{
    ;
    break;}
case 290:
#line 2172 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 291:
#line 2182 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 292:
#line 2192 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 293:
#line 2202 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 294:
#line 2207 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 295:
#line 2217 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 296:
#line 2222 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 297:
#line 2232 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 298:
#line 2237 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 299:
#line 2249 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 300:
#line 2266 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2283 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 302:
#line 2300 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 303:
#line 2305 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 304:
#line 2322 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 305:
#line 2327 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 306:
#line 2344 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 307:
#line 2349 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2369 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 309:
#line 2385 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2401 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 311:
#line 2417 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 312:
#line 2422 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 313:
#line 2439 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 314:
#line 2445 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 315:
#line 2462 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 316:
#line 2468 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 317:
#line 2488 "Gmsh.y"
{
    ;
    break;}
case 318:
#line 2491 "Gmsh.y"
{
    ;
    break;}
case 319:
#line 2497 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 320:
#line 2523 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 321:
#line 2547 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 322:
#line 2556 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 323:
#line 2574 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 324:
#line 2592 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 325:
#line 2610 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 326:
#line 2632 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 327:
#line 2653 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 328:
#line 2674 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)d;
	s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 329:
#line 2688 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read(yyvsp[-1].l, i, &d);
	j = (int)d;
        s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 330:
#line 2708 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 331:
#line 2712 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 332:
#line 2721 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 333:
#line 2722 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 334:
#line 2723 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 335:
#line 2724 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 336:
#line 2725 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 337:
#line 2729 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 338:
#line 2730 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 339:
#line 2731 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 340:
#line 2732 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 341:
#line 2733 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 342:
#line 2734 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 343:
#line 2735 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 344:
#line 2736 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 345:
#line 2738 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 346:
#line 2744 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 347:
#line 2745 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d) ;  ;
    break;}
case 348:
#line 2746 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 349:
#line 2747 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 350:
#line 2748 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 351:
#line 2749 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 352:
#line 2750 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 353:
#line 2751 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 354:
#line 2752 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 355:
#line 2753 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 356:
#line 2754 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 357:
#line 2755 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 358:
#line 2756 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 359:
#line 2757 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 360:
#line 2758 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 361:
#line 2759 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 362:
#line 2760 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 363:
#line 2761 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 364:
#line 2762 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 365:
#line 2763 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 366:
#line 2764 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 367:
#line 2765 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 368:
#line 2766 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2767 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 370:
#line 2768 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 371:
#line 2769 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 372:
#line 2770 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 373:
#line 2771 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 374:
#line 2772 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 375:
#line 2773 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 376:
#line 2774 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 377:
#line 2775 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 378:
#line 2777 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 379:
#line 2778 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 380:
#line 2779 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 381:
#line 2780 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 382:
#line 2781 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 383:
#line 2782 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 384:
#line 2783 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 385:
#line 2784 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 386:
#line 2785 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 387:
#line 2786 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 388:
#line 2787 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 389:
#line 2788 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2789 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 391:
#line 2790 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 392:
#line 2791 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 393:
#line 2792 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 394:
#line 2793 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 395:
#line 2794 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 396:
#line 2795 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 397:
#line 2796 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 398:
#line 2797 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 399:
#line 2806 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 400:
#line 2807 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 401:
#line 2808 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 402:
#line 2809 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 403:
#line 2814 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 404:
#line 2825 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 405:
#line 2842 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 406:
#line 2853 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 407:
#line 2872 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 408:
#line 2888 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 409:
#line 2904 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 410:
#line 2920 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 411:
#line 2938 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 412:
#line 2942 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 413:
#line 2946 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 414:
#line 2950 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 415:
#line 2954 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 416:
#line 2961 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 417:
#line 2965 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 418:
#line 2969 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 419:
#line 2973 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 420:
#line 2980 "Gmsh.y"
{
    ;
    break;}
case 421:
#line 2983 "Gmsh.y"
{
    ;
    break;}
case 422:
#line 2989 "Gmsh.y"
{
    ;
    break;}
case 423:
#line 2992 "Gmsh.y"
{
    ;
    break;}
case 424:
#line 2998 "Gmsh.y"
{
    ;
    break;}
case 425:
#line 3001 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 426:
#line 3005 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 427:
#line 3012 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 428:
#line 3017 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 429:
#line 3025 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 430:
#line 3030 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 431:
#line 3034 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 432:
#line 3038 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 433:
#line 3049 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      for(d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 434:
#line 3055 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 435:
#line 3066 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double)) ;      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d) ;
	double d = 0.0 ;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X) ;
	List_Add(yyval.l, &v->Pos.Y) ;
	List_Add(yyval.l, &v->Pos.Z) ;
      }
    ;
    break;}
case 436:
#line 3086 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 437:
#line 3095 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 438:
#line 3104 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 439:
#line 3115 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 440:
#line 3129 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 441:
#line 3145 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 442:
#line 3165 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 443:
#line 3190 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 444:
#line 3195 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 445:
#line 3199 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 446:
#line 3203 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[0].l); i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 447:
#line 3215 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 448:
#line 3219 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 449:
#line 3230 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 450:
#line 3235 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0) ;
	}
      }
    ;
    break;}
case 451:
#line 3254 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 452:
#line 3258 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 453:
#line 3272 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 454:
#line 3277 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 455:
#line 3284 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 456:
#line 3288 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 457:
#line 3296 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 458:
#line 3309 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 459:
#line 3313 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 460:
#line 3331 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 461:
#line 3345 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3360 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void FixRelativePath(char *in, char *out){
  if(in[0] == '/' || in[0] == '\\' || (strlen(in)>2 && in[1] == ':')){
    // do nothing: 'in' is an absolute path
    strcpy(out, in);
  }
  else{
    // append 'in' to the path of the parent file
    strcpy(out, yyname);
    int i = strlen(out)-1 ;
    while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
    out[i+1] = '\0';
    strcat(out, in);
  }
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


