
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tIntersect	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tColorTable	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tMesh	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.79 2001-03-22 22:10:28 geuzaine Exp $

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 67 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1510
#define	YYFLAG		-32768
#define	YYNTBASE	182

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 263)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   167,     2,     2,   174,
   175,   165,   163,   179,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   181,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   949,   951,   953,   955,   957,   959,   961,   966,   974,   984,
   991,   995,  1002,  1009,  1019,  1026,  1036,  1042,  1051,  1060,
  1072,  1079,  1089,  1097,  1106,  1119,  1126,  1132,  1140,  1148,
  1161,  1169,  1179,  1197,  1205,  1214,  1223,  1231,  1243,  1249,
  1258,  1271,  1280,  1303,  1324,  1333,  1342,  1348,  1357,  1365,
  1374,  1380,  1392,  1398,  1408,  1410,  1412,  1414,  1415,  1418,
  1423,  1428,  1435,  1439,  1443,  1447,  1450,  1453,  1460,  1469,
  1478,  1489,  1491,  1494,  1496,  1500,  1505,  1507,  1516,  1529,
  1538,  1551,  1560,  1573,  1585,  1601,  1603,  1606,  1616,  1619,
  1626,  1636,  1646,  1655,  1664,  1673,  1680,  1685,  1688,  1691,
  1693,  1696,  1698,  1700,  1702,  1704,  1706,  1708,  1712,  1715,
  1718,  1721,  1725,  1729,  1733,  1737,  1741,  1745,  1749,  1753,
  1757,  1761,  1765,  1769,  1773,  1777,  1783,  1788,  1793,  1798,
  1803,  1808,  1813,  1818,  1823,  1828,  1833,  1840,  1845,  1850,
  1855,  1860,  1865,  1870,  1877,  1884,  1891,  1896,  1898,  1900,
  1902,  1907,  1910,  1916,  1920,  1927,  1932,  1940,  1944,  1950,
  1952,  1955,  1958,  1962,  1966,  1978,  1988,  1996,  2004,  2005,
  2009,  2011,  2015,  2016,  2020,  2024,  2026,  2030,  2032,  2036,
  2043,  2047,  2049,  2051,  2055,  2062,  2066,  2070,  2076,  2085,
  2095,  2103,  2109,  2111,  2117,  2121,  2128,  2130,  2134,  2136,
  2141
};

static const short yyrhs[] = {   184,
     0,   183,     0,   189,     0,     1,     6,     0,   140,     0,
   143,   144,   246,   246,   246,   145,   146,   142,   246,   246,
   246,   142,   246,   246,   246,   142,   246,   246,   246,   147,
   148,     0,   141,     0,     0,   184,   185,     0,   186,     0,
   188,     0,   187,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   174,   253,   179,     5,   175,     6,     0,   120,   174,   253,
   175,     6,     0,   121,   174,     5,   179,     5,   179,   253,
   179,   253,   179,     5,   179,     5,   179,     5,   175,     6,
     0,     3,     7,    98,   174,     5,   179,   251,   175,     6,
     0,     3,     7,    97,   174,     5,   179,   248,   179,   257,
   179,   247,   179,   247,   179,   247,   179,   257,   179,   257,
   179,   247,   175,     6,     0,     3,     7,    96,   174,     5,
   179,   248,   179,   248,   179,   255,   179,   247,   179,   247,
   179,   247,   179,   247,   179,   257,   179,   257,   179,   257,
   179,   257,   179,   247,   175,     6,     0,     3,     7,   104,
   174,     5,   179,     3,   179,     3,   179,     3,   179,   247,
   175,     6,     0,     3,     7,   108,   174,     5,   179,     3,
   179,   247,   175,     6,     0,     3,     7,   125,   174,     5,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   106,
   174,     5,   179,   165,   179,   165,   179,   248,   179,   247,
   175,     6,     0,     3,     7,   109,   174,     5,   179,   257,
   175,     6,     0,     3,     7,   110,   174,     5,   179,   257,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   105,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   111,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   113,   174,     5,   179,     3,   179,     3,   179,     3,
   175,     6,     0,     3,     7,   112,   174,     5,   179,   251,
   175,     6,     0,     3,     7,   107,   174,     5,   179,     3,
   175,     6,     0,     3,     7,    37,   174,     5,   179,     3,
   179,     3,   175,     6,     0,     3,     7,   123,   174,     5,
   179,   257,   175,     6,     0,     3,     7,   124,   174,     5,
   179,   257,   179,     3,   175,     6,     0,     3,     7,   122,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   126,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   127,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   134,   174,     5,   179,     3,
   179,   248,   179,   248,   175,     6,     0,     3,     7,   128,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   138,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   129,   174,     5,   179,     3,
   179,   257,   179,   257,   179,   247,   179,   247,   175,     6,
     0,     3,     7,   130,   174,     5,   179,   257,   175,     6,
     0,     3,     7,   131,   174,   132,   179,   247,   179,     3,
   175,     6,     0,     3,     7,   133,   174,     5,   179,   257,
   179,   247,   175,     6,     0,     3,     7,   135,   174,     5,
   179,     5,   179,     3,   179,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   179,     5,   179,     3,   175,     6,
     0,     3,     7,   137,   174,     3,   179,     3,   175,     6,
     0,     0,   189,   190,     0,   192,     0,   191,     0,   232,
     0,   233,     0,   234,     0,   237,     0,   238,     0,   241,
     0,   244,     0,   245,     0,   240,     0,   239,     0,    31,
   174,     5,   175,     6,     0,    31,   174,     5,   179,   258,
   175,     6,     0,     4,     5,   180,   193,   181,     6,     0,
     4,     5,     4,   251,   180,   193,   181,     6,     0,     0,
   193,   195,     0,   193,   198,     0,   193,   201,     0,   193,
   204,     0,   193,   207,     0,   193,   210,     0,   193,   213,
     0,   193,   216,     0,   193,   219,     0,   193,   222,     0,
   193,   225,     0,   193,   228,     0,   248,     0,   194,   179,
   248,     0,     0,    75,   174,   248,   179,   248,   179,   248,
   175,   196,   180,   194,   181,     6,     0,   248,     0,   197,
   179,   248,     0,     0,    76,   174,   248,   179,   248,   179,
   248,   175,   199,   180,   197,   181,     6,     0,   248,     0,
   200,   179,   248,     0,     0,    77,   174,   248,   179,   248,
   179,   248,   175,   202,   180,   200,   181,     6,     0,   248,
     0,   203,   179,   248,     0,     0,    72,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   205,   180,   203,   181,     6,     0,   248,     0,   206,   179,
   248,     0,     0,    73,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   208,   180,   206,
   181,     6,     0,   248,     0,   209,   179,   248,     0,     0,
    74,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   175,   211,   180,   209,   181,     6,     0,
   248,     0,   212,   179,   248,     0,     0,    69,   174,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   214,   180,   212,
   181,     6,     0,   248,     0,   215,   179,   248,     0,     0,
    70,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   217,   180,   215,   181,     6,     0,   248,     0,   218,   179,
   248,     0,     0,    71,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   175,   220,   180,   218,   181,     6,     0,   248,
     0,   221,   179,   248,     0,     0,    66,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   175,   223,   180,   221,   181,     6,     0,   248,     0,
   224,   179,   248,     0,     0,    67,   174,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   175,   226,   180,   224,   181,     6,     0,   248,     0,   227,
   179,   248,     0,     0,    68,   174,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   229,   180,   227,   181,     6,     0,     7,     0,   149,     0,
   150,     0,   151,     0,   152,     0,   170,     0,   171,     0,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   230,
   248,     6,     0,     4,   176,   180,   258,   181,   177,   230,
   257,     6,     0,     4,   176,   177,     7,   257,     6,     0,
     4,   231,     6,     0,     4,   176,   248,   177,   231,     6,
     0,     4,   178,     4,     7,     5,     6,     0,     4,   176,
   248,   177,   178,     4,     7,     5,     6,     0,     4,   178,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   178,
     4,   230,   248,     6,     0,     4,   178,     4,   231,     6,
     0,     4,   176,   248,   177,   178,     4,   231,     6,     0,
     4,   178,    84,   178,     4,     7,   259,     6,     0,     4,
   176,   248,   177,   178,    84,   178,     4,     7,   259,     6,
     0,     4,   178,    85,     7,   260,     6,     0,     4,   176,
   248,   177,   178,    85,     7,   260,     6,     0,    34,   174,
   248,   175,     7,   251,     6,     0,    49,    34,   174,   248,
   175,     7,   257,     6,     0,    64,    34,   257,     7,   180,
   248,   179,   248,   179,   248,   181,     6,     0,    41,    42,
   257,     7,   248,     6,     0,    34,   180,   248,   181,     6,
     0,    37,   174,   248,   175,     7,   257,     6,     0,    39,
   174,   248,   175,     7,   257,     6,     0,    64,    37,   257,
     7,   180,   248,   179,   248,   179,   248,   181,     6,     0,
    35,   174,   248,   175,     7,   257,     6,     0,    35,   174,
   248,   175,     7,   257,    45,   251,     6,     0,    43,   174,
   248,   175,     7,   180,   248,   179,   248,   179,     5,   179,
     5,   179,     5,   181,     6,     0,    36,   174,   248,   175,
     7,   257,     6,     0,    49,    37,   174,   248,   175,     7,
   257,     6,     0,    37,    59,   174,   248,   175,     7,   257,
     6,     0,    78,   174,   248,   175,     7,   257,     6,     0,
    79,   174,   248,   175,     7,   257,    83,   257,    80,   248,
     6,     0,    37,   180,   248,   181,     6,     0,    45,    38,
   174,   248,   175,     7,   257,     6,     0,   139,    38,   174,
   248,   175,     7,   180,   248,   179,   257,   181,     6,     0,
    46,    38,   174,   248,   175,     7,   257,     6,     0,    79,
    38,    81,    82,   174,   248,   175,     7,   255,    83,   180,
   257,   179,   257,   181,    80,   180,   248,   179,   248,   181,
     6,     0,    79,    38,   174,   248,   175,     7,   255,    83,
   180,   257,   179,   257,   181,    80,   180,   248,   179,   248,
   181,     6,     0,    49,    38,   174,   248,   175,     7,   257,
     6,     0,    38,    59,   174,   248,   175,     7,   257,     6,
     0,    38,   180,   248,   181,     6,     0,    48,    40,   174,
   248,   175,     7,   257,     6,     0,    40,   174,   248,   175,
     7,   257,     6,     0,    49,    40,   174,   248,   175,     7,
   257,     6,     0,    54,   251,   180,   235,   181,     0,    53,
   180,   251,   179,   251,   179,   248,   181,   180,   235,   181,
     0,    55,   251,   180,   235,   181,     0,    56,   180,   251,
   179,   248,   181,   180,   235,   181,     0,   237,     0,   236,
     0,   234,     0,     0,   236,   233,     0,    58,   180,   236,
   181,     0,    61,   180,   236,   181,     0,    61,     4,   176,
   248,   177,     6,     0,    61,    95,     6,     0,     4,   262,
     6,     0,     4,   248,     6,     0,    91,     6,     0,    33,
     6,     0,    86,   174,   248,     8,   248,   175,     0,    86,
   174,   248,     8,   248,     8,   248,   175,     0,    86,     4,
    87,   180,   248,     8,   248,   181,     0,    86,     4,    87,
   180,   248,     8,   248,     8,   248,   181,     0,    88,     0,
    94,     4,     0,    92,     0,    93,     4,     6,     0,    89,
   174,   248,   175,     0,    90,     0,    57,    34,   180,   248,
   179,   251,   181,     6,     0,    57,    34,   180,   248,   179,
   251,   179,   251,   179,   248,   181,     6,     0,    57,    37,
   180,   248,   179,   251,   181,     6,     0,    57,    37,   180,
   248,   179,   251,   179,   251,   179,   248,   181,     6,     0,
    57,    38,   180,   248,   179,   251,   181,     6,     0,    57,
    38,   180,   248,   179,   251,   179,   251,   179,   248,   181,
     6,     0,    57,    38,   180,   248,   179,   251,   181,   180,
   242,   181,     6,     0,    57,    38,   180,   248,   179,   251,
   179,   251,   179,   248,   181,   180,   242,   181,     6,     0,
   243,     0,   242,   243,     0,    65,   180,   257,   179,   257,
   179,   257,   181,     6,     0,    60,     6,     0,    47,    37,
   257,     7,   248,     6,     0,    47,    37,   257,     7,   248,
    50,    52,   248,     6,     0,    47,    37,   257,     7,   248,
    50,    51,   248,     6,     0,    47,    38,   180,   248,   181,
     7,   257,     6,     0,    44,    38,   180,   248,   181,     7,
   257,     6,     0,    47,    40,   180,   248,   181,     7,   257,
     6,     0,    60,    38,   257,     7,   248,     6,     0,    60,
    38,   257,     6,     0,    62,     6,     0,    63,     6,     0,
     3,     0,   164,     3,     0,    99,     0,   100,     0,   101,
     0,   102,     0,   103,     0,   249,     0,   174,   248,   175,
     0,   164,   248,     0,   163,   248,     0,   169,   248,     0,
   248,   164,   248,     0,   248,   163,   248,     0,   248,   165,
   248,     0,   248,   166,   248,     0,   248,   167,   248,     0,
   248,   173,   248,     0,   248,   159,   248,     0,   248,   161,
   248,     0,   248,   160,   248,     0,   248,   162,   248,     0,
   248,   156,   248,     0,   248,   157,   248,     0,   248,   155,
   248,     0,   248,   154,   248,     0,   248,   153,   248,     8,
   248,     0,    10,   174,   248,   175,     0,    11,   174,   248,
   175,     0,    12,   174,   248,   175,     0,    13,   174,   248,
   175,     0,    14,   174,   248,   175,     0,    15,   174,   248,
   175,     0,    16,   174,   248,   175,     0,    17,   174,   248,
   175,     0,    18,   174,   248,   175,     0,    20,   174,   248,
   175,     0,    21,   174,   248,   179,   248,   175,     0,    22,
   174,   248,   175,     0,    23,   174,   248,   175,     0,    24,
   174,   248,   175,     0,    25,   174,   248,   175,     0,    26,
   174,   248,   175,     0,    27,   174,   248,   175,     0,    28,
   174,   248,   179,   248,   175,     0,    29,   174,   248,   179,
   248,   175,     0,    30,   174,   248,   179,   248,   175,     0,
    19,   174,   248,   175,     0,     3,     0,     9,     0,     4,
     0,     4,   176,   248,   177,     0,     4,   231,     0,     4,
   176,   248,   177,   231,     0,     4,   178,     4,     0,     4,
   176,   248,   177,   178,     4,     0,     4,   178,     4,   231,
     0,     4,   176,   248,   177,   178,     4,   231,     0,   248,
     8,   248,     0,   248,     8,   248,     8,   248,     0,   252,
     0,   164,   251,     0,   163,   251,     0,   251,   164,   251,
     0,   251,   163,   251,     0,   180,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   181,     0,   174,   248,   179,   248,   179,
   248,   175,     0,     0,   174,   254,   175,     0,     5,     0,
   254,   179,     5,     0,     0,   180,   256,   181,     0,   174,
   256,   175,     0,   257,     0,   256,   179,   257,     0,   248,
     0,     4,   176,   177,     0,     4,   176,   180,   258,   181,
   177,     0,   180,   258,   181,     0,   248,     0,   250,     0,
     4,   176,   177,     0,     4,   176,   180,   258,   181,   177,
     0,   258,   179,   248,     0,   258,   179,   250,     0,   258,
   179,     4,   176,   177,     0,   258,   179,     4,   176,   180,
   258,   181,   177,     0,   180,   248,   179,   248,   179,   248,
   179,   248,   181,     0,   180,   248,   179,   248,   179,   248,
   181,     0,   180,     4,   179,   248,   181,     0,     4,     0,
     4,   178,    84,   178,     4,     0,   180,   261,   181,     0,
     4,   176,   248,   177,   178,    85,     0,   259,     0,   261,
   179,   259,     0,     5,     0,    32,   174,     5,   175,     0,
    32,   174,     5,   179,   258,   175,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   150,   152,   153,   154,   161,   169,   183,   195,   197,   200,
   202,   203,   206,   212,   217,   218,   219,   222,   226,   229,
   235,   240,   246,   254,   259,   263,   269,   274,   278,   283,
   287,   290,   295,   299,   303,   307,   312,   316,   319,   323,
   327,   331,   335,   339,   343,   346,   350,   353,   357,   360,
   369,   373,   379,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   394,   399,   428,   434,   441,   446,
   447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
   457,   460,   463,   467,   473,   479,   482,   486,   492,   498,
   501,   505,   511,   517,   520,   524,   532,   538,   541,   545,
   553,   559,   562,   566,   574,   580,   583,   587,   599,   605,
   608,   612,   624,   630,   633,   637,   649,   655,   658,   662,
   675,   681,   684,   688,   701,   707,   710,   714,   727,   739,
   741,   742,   743,   744,   746,   748,   750,   781,   815,   862,
   877,   886,   901,   913,   927,   950,   974,   986,  1000,  1012,
  1026,  1042,  1064,  1075,  1081,  1100,  1111,  1119,  1125,  1131,
  1150,  1156,  1172,  1179,  1185,  1191,  1197,  1203,  1222,  1234,
  1240,  1259,  1280,  1288,  1294,  1300,  1306,  1318,  1324,  1330,
  1342,  1348,  1353,  1358,  1365,  1367,  1368,  1371,  1376,  1387,
  1405,  1413,  1418,  1429,  1484,  1504,  1508,  1528,  1544,  1558,
  1583,  1608,  1634,  1640,  1645,  1650,  1654,  1664,  1670,  1676,
  1680,  1684,  1688,  1692,  1697,  1704,  1708,  1713,  1734,  1744,
  1763,  1781,  1799,  1821,  1842,  1863,  1881,  1906,  1911,  1922,
  1924,  1927,  1929,  1930,  1931,  1932,  1935,  1937,  1938,  1939,
  1940,  1941,  1942,  1943,  1944,  1951,  1952,  1953,  1954,  1955,
  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  1965,
  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,  1974,  1975,
  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1987,  1992,  1996,
  2007,  2024,  2035,  2054,  2070,  2086,  2102,  2119,  2126,  2139,
  2144,  2148,  2152,  2156,  2161,  2166,  2170,  2174,  2180,  2184,
  2189,  2193,  2198,  2202,  2206,  2212,  2218,  2224,  2230,  2244,
  2264,  2271,  2277,  2281,  2293,  2311,  2315,  2322,  2333,  2352,
  2357,  2361,  2366,  2371,  2389,  2394,  2407,  2413,  2419,  2424,
  2428
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn",
"tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","SignedDouble","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","ColorExpr",
"ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   185,   186,   186,   186,   186,   186,   187,   187,   187,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   191,   191,   192,   192,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   196,   195,   197,   197,   199,   198,   200,
   200,   202,   201,   203,   203,   205,   204,   206,   206,   208,
   207,   209,   209,   211,   210,   212,   212,   214,   213,   215,
   215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
   222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
   230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   232,   232,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   234,   234,   234,   234,   235,   235,   235,   236,   236,   237,
   238,   238,   238,   239,   239,   239,   239,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   241,   241,   241,
   241,   241,   241,   241,   241,   242,   242,   243,   243,   244,
   244,   244,   244,   244,   244,   244,   244,   245,   245,   246,
   246,   247,   247,   247,   247,   247,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   249,   249,   249,
   249,   249,   249,   249,   249,   249,   249,   250,   250,   251,
   251,   251,   251,   251,   252,   252,   252,   252,   253,   253,
   254,   254,   255,   255,   255,   256,   256,   257,   257,   257,
   257,   258,   258,   258,   258,   258,   258,   258,   258,   259,
   259,   259,   259,   259,   260,   260,   261,   261,   262,   262,
   262
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     1,     1,     1,     1,     1,     1,     4,     7,     9,     6,
     3,     6,     6,     9,     6,     9,     5,     8,     8,    11,
     6,     9,     7,     8,    12,     6,     5,     7,     7,    12,
     7,     9,    17,     7,     8,     8,     7,    11,     5,     8,
    12,     8,    22,    20,     8,     8,     5,     8,     7,     8,
     5,    11,     5,     9,     1,     1,     1,     0,     2,     4,
     4,     6,     3,     3,     3,     2,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     8,    12,     8,
    12,     8,    12,    11,    15,     1,     2,     9,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     4,     2,     5,     3,     6,     4,     7,     3,     5,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     1,     3,     6,
     3,     1,     1,     3,     6,     3,     3,     5,     8,     9,
     7,     5,     1,     5,     3,     6,     1,     3,     1,     4,
     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   202,     0,   207,     0,   204,     0,
     0,     0,    52,    54,    53,    55,    56,    57,    58,    59,
    64,    63,    60,    61,    62,   230,     0,     0,     0,    13,
    14,    16,    15,    17,   299,   299,     0,   278,   280,   329,
   130,   279,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   131,   132,   133,   134,     0,     0,
     0,   135,   136,     0,     0,     0,     0,     0,     0,   237,
     0,     0,   197,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   290,     0,     0,     0,     0,     0,   188,
     0,     0,     0,   188,   228,   229,     0,     0,     0,     0,
     0,     0,     0,     0,   196,     0,   203,     0,   231,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   282,     0,    69,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   240,   239,   241,     0,     0,     0,     0,     0,     0,
     0,     0,   141,   195,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,   308,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   292,
   291,     0,     0,     0,     0,   188,   188,     0,     0,     0,
     0,     0,     0,     0,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   205,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     0,     0,     0,     0,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
     0,   280,   312,   313,     0,     0,   130,     0,     0,     0,
     0,   137,     0,   255,   254,   252,   253,   248,   250,   249,
   251,   243,   242,   244,   245,   246,   247,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   294,   293,
   187,     0,   186,   185,     0,     0,     0,     0,     0,   190,
   189,   227,     0,     0,   191,     0,     0,     0,     0,     0,
     0,     0,     0,   206,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   300,     0,     0,    19,
     0,   281,   286,    69,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   277,   266,
     0,   268,   269,   270,   271,   272,   273,     0,     0,     0,
   330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   147,     0,     0,     0,     0,     0,    65,     0,
     0,   157,     0,     0,     0,     0,   169,     0,   177,     0,
     0,   309,     0,   311,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   181,   183,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   302,     0,
   299,     0,   283,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    67,     0,     0,     0,
     0,     0,   140,   314,     0,   288,   280,   316,   317,     0,
     0,     0,     0,     0,   142,   143,   145,     0,     0,   323,
     0,   327,     0,   151,   256,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   156,     0,     0,     0,     0,
   220,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   226,   192,     0,     0,
     0,     0,   303,     0,     0,     0,   198,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   232,   233,   234,   235,   236,     0,     0,     0,
     0,     0,     0,     0,    18,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   267,   274,   275,   276,   331,     0,     0,     0,     0,   130,
     0,     0,     0,     0,   138,     0,     0,     0,   280,     0,
     0,   325,    66,   153,   161,     0,   164,     0,   158,     0,
   159,   179,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     0,     0,     0,     0,     0,     0,     0,     0,   167,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   299,   287,
    68,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   289,   318,     0,     0,     0,     0,
   148,     0,     0,   149,     0,     0,     0,     0,   328,     0,
   166,   176,   310,     0,   224,   170,   172,     0,     0,   223,
   225,   178,   154,   165,   175,   180,     0,   298,     0,   297,
     0,     0,   208,     0,   210,     0,   212,     0,     0,     0,
   303,     0,   306,     0,     0,     0,     0,   200,   199,     0,
     0,     0,     0,     0,    21,     0,    30,     0,    34,     0,
    28,     0,     0,    33,     0,    38,    36,     0,     0,     0,
     0,     0,     0,    45,     0,     0,     0,     0,     0,    50,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   315,     0,   139,   144,   146,     0,
   152,     0,     0,     0,     0,   162,     0,   222,   221,   188,
     0,   184,     0,     0,     0,     0,     0,     0,   216,     0,
     0,     0,   305,     0,   304,     0,     0,     0,     0,     0,
     0,   303,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   326,   324,   322,     0,
     0,     0,     0,   296,     0,     0,     0,   219,     0,     0,
   217,     0,     0,     0,   307,     0,     0,   201,     0,     0,
    35,     0,     0,     0,     0,    25,     0,    31,     0,    37,
    26,    39,     0,    42,     0,    46,    47,     0,     0,    49,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   319,   150,     0,     0,   182,     0,
     0,     0,     0,     0,   214,     0,     0,     0,     0,   168,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    84,    88,    92,     0,   321,     0,   295,
   209,   211,   213,     0,     0,   155,   160,     0,     0,   171,
     0,     0,     0,     0,     0,    29,    32,    40,     0,    41,
    48,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   320,     0,     0,     0,     0,     0,     0,     0,     0,    24,
    27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    82,     0,    86,     0,    90,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,    20,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    83,    85,    87,    89,    91,    93,   163,   218,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    96,   100,   104,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   174,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    94,     0,    98,     0,   102,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   173,     0,    22,     0,     0,     0,     0,     0,
     0,    95,    97,    99,   101,   103,   105,     0,     0,     0,
     0,   108,   112,   116,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   106,     0,   110,     0,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   107,   109,   111,   113,   115,   117,     0,   120,
   124,   128,    23,     0,     0,     0,     0,     0,     0,     0,
   118,     0,   122,     0,   126,     0,     0,     0,     0,     0,
     0,   119,   121,   123,   125,   127,   129,     0,     0,     0
};

static const short yydefgoto[] = {  1508,
     5,     6,    19,    20,    21,    22,     7,    63,    64,    65,
   377,  1283,   538,  1233,  1285,   539,  1234,  1287,   540,  1235,
  1392,   541,  1365,  1394,   542,  1366,  1396,   543,  1367,  1453,
   544,  1439,  1455,   545,  1440,  1457,   546,  1441,  1490,   547,
  1484,  1492,   548,  1485,  1494,   549,  1486,   127,   227,    66,
   471,   461,   462,   463,   464,    70,    71,    72,    73,  1048,
  1049,    74,    75,    78,   788,   295,   130,   404,   163,   164,
   222,   370,   873,   972,   973,   405,   712,   587,   713,   131
};

static const short yypact[] = {  2064,
    93,-32768,-32768,   -39,-32768,   312,  2197,-32768,    39,   111,
   122,   151,   192,   200,   227,    62,    64,    67,-32768,-32768,
-32768,-32768,   974,    88,   268,  -122,   104,   113,   -15,   -14,
   118,   154,   271,   186,   283,   333,   348,    89,   351,   230,
   224,   -30,   -30,   242,   138,   265,   370,     8,   447,   451,
   114,   309,     3,    57,-32768,   317,-32768,   480,-32768,   493,
   495,   462,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   499,    39,  1887,-32768,
-32768,-32768,-32768,-32768,   362,   362,   539,-32768,   219,     6,
-32768,-32768,   376,   380,   405,   407,   408,   409,   410,   411,
   413,   414,   415,   416,   422,   434,   436,   439,   446,   448,
   449,   450,   453,   454,-32768,-32768,-32768,-32768,  1089,  1089,
  1089,-32768,-32768,  1089,    10,    56,  1089,   606,   674,-32768,
   608,   620,-32768,  1089,  1089,  1089,  1089,   456,  1089,  1089,
   457,  1089,  1089,  1089,   744,  1089,   455,   459,   463,   744,
   458,   460,   465,   468,   469,   470,   471,   -30,   -30,   -30,
  1089,  1089,   -55,-32768,   -28,   -30,   466,   467,   486,-32768,
   744,   472,   630,-32768,-32768,-32768,   744,   744,  1089,   -64,
  1089,   562,  1089,  1089,-32768,   644,-32768,   477,-32768,    39,
   494,   497,   500,   502,   503,   505,   509,   511,   513,   515,
   525,   527,   533,   546,   552,   553,   555,   556,   557,   560,
   563,   564,   565,   566,   568,   569,   570,   571,   572,   575,
   662,   490,   498,   573,  1089,   747,-32768,   -30,-32768,  1089,
  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
   770,   603,   603,   603,  4967,   777,  1475,  4867,   228,   599,
   790,  1047,-32768,-32768,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,-32768,
    94,  4990,  1681,  5013,  5036,  1089,  5059,  2227,  1089,  2250,
  5082,  5105,   241,  1475,  2056,   793,  5128,  1089,  1089,  1089,
   795,  1089,  1089,  1089,  1089,  1089,  1089,  1089,     4,-32768,
-32768,  1917,  2641,   -30,   -30,   479,   479,   130,  1089,  1089,
  1089,  1894,   293,  1089,-32768,  1911,   800,   810,  5151,   736,
  1089,  5174,   639,  1529,  5197,-32768,  1089,   675,   816,   818,
   827,   837,   838,   841,   843,   844,   845,   846,   847,   848,
   863,   864,   865,   866,   868,   872,   873,   874,   875,   877,
   878,   752,   881,   882,   883,   896,   899,   898,-32768,   137,
   900,   903,   905,  4892,   322,    -9,     0,  5220,  5243,  5266,
  5289,  5312,  5335,  5358,  5381,  5404,  5427,  5450,  2662,  5473,
  5496,  5519,  5542,  5565,  5588,  2683,  2704,  2725,   144,-32768,
   744,   266,  1660,-32768,  -100,   223,   906,  1089,   910,   908,
    11,-32768,  1704,   649,   699,   549,   549,   203,   203,   203,
   203,    -3,    -3,   603,   603,   603,   603,   911,  1475,   912,
   914,   915,   916,  5611,   918,   920,  5634,   921,   922,   923,
   321,   184,  1089,   924,  2273,  5657,  5680,  1089,  2296,  2319,
  5703,  5726,  5749,  5772,  5795,   -30,  1089,  1089,-32768,-32768,
-32768,   751,   657,-32768,   753,  1089,  2746,  2767,  2788,-32768,
-32768,-32768,  1089,  4917,-32768,   748,   757,   926,   764,  5818,
   932,  1089,  1089,-32768,  5841,   794,   762,   765,   766,   767,
   769,   771,   772,   773,   774,   776,   778,   779,   780,   782,
   784,   786,   787,   788,   791,   792,   801,   803,   826,   828,
   829,   830,   831,   832,   833,   834,-32768,   938,   781,-32768,
   835,  -121,-32768,-32768,   775,   798,   799,   802,   842,   849,
   850,   851,   852,   856,   857,   858,   963,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1089,-32768,-32768,-32768,-32768,-32768,-32768,  1089,  1089,  1089,
-32768,  1475,  1009,   452,  1089,  1535,   840,    61,  1089,  1012,
  1013,  1140,-32768,  1026,   859,    12,  1030,  1089,-32768,   182,
   -30,-32768,   744,   744,  1031,   744,-32768,  1032,-32768,   744,
   744,-32768,  1475,-32768,  1175,   860,  1034,  1036,  1037,  1023,
  1039,  1040,  1041,  1042,  1044,  1045,  1049,   139,  2809,  2830,
-32768,-32768,  2342,   -30,   -30,   -30,  1441,  1048,  1089,  1089,
   744,  1089,  1050,   744,  1725,   626,  1052,   895,  1069,  1089,
  1089,   -30,  1071,  1072,   913,  1073,  1076,   744,   744,  1078,
   -30,  1079,  1080,   744,   744,  1081,  1082,  1083,  1084,  1085,
   744,   440,   744,  1086,  1090,  1091,  1087,  1088,-32768,  1114,
   362,  1117,-32768,    16,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  1089,  1089,  1089,  1089,  1089,-32768,  5864,  5887,  5910,
  5933,   213,-32768,-32768,  1475,  1754,   318,  1660,-32768,    44,
   232,   944,  1120,  1464,-32768,-32768,-32768,    12,  1089,   950,
  1563,-32768,   226,-32768,  2056,  1123,    37,    50,  1124,   744,
  1125,   744,  1126,  1127,   259,-32768,  1089,   744,   744,   744,
-32768,   303,   744,   744,   744,   744,   744,   744,   744,  1089,
  1089,  1089,   954,  -101,   -57,   -32,-32768,-32768,  2851,  2872,
  1129,  5956,   -80,  1011,  1089,  1089,-32768,   959,    39,   961,
  2893,  2914,    97,   962,   967,   968,   976,   970,   978,   975,
   977,   189,   979,   980,   982,   981,   992,   993,   994,   996,
  1014,   984,-32768,-32768,-32768,-32768,-32768,  1015,  1016,  1018,
  1020,  1038,   986,  1043,-32768,  1046,   322,  1185,  2935,  2956,
  2977,  2998,  3019,  3040,  3061,  3082,  3103,  3124,  3145,  3166,
-32768,-32768,-32768,-32768,-32768,   260,  1089,   501,   744,  1200,
  1089,  1209,  1212,    11,-32768,  1215,  4942,  1134,   245,  3187,
    12,-32768,-32768,-32768,-32768,   -30,-32768,  1217,-32768,  1218,
-32768,-32768,  1061,  3208,  1233,  1234,  1235,  1089,  1089,  1236,
  1238,  1239,  1240,  1241,  1242,  1243,  2365,  5979,  2139,   479,
   -30,  1244,   -30,  1245,   -30,    48,  1089,  1089,-32768,  1247,
   744,   744,  1172,   744,   438,  6002,  1089,    39,  1253,  1089,
   744,  1251,  1256,  1254,  1096,  1258,   440,  1259,  1263,  1089,
  1261,  1265,  1266,  1267,  1268,   440,  1089,  1089,  1089,   744,
  1269,  1271,   440,  1089,  1283,  1285,  1284,  1089,   362,-32768,
-32768,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  1089,  1089,  1092,  2056,-32768,  1475,  1286,  1292,  1500,
-32768,  1255,  1302,-32768,  1113,  1131,  1089,  1089,-32768,    41,
-32768,-32768,-32768,  1089,-32768,-32768,-32768,  1593,  1616,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1130,-32768,  1089,-32768,
  1133,   141,-32768,   143,-32768,   147,-32768,   172,  3229,  3250,
   -80,   221,-32768,   270,  1132,  1231,  1089,-32768,-32768,  3271,
    39,  1141,  3292,  1136,-32768,  1142,-32768,  1154,-32768,  1144,
-32768,  1164,  6025,-32768,  1165,-32768,-32768,  1145,  1171,  6048,
  3313,  6071,  1168,-32768,  1174,  1184,  3334,  1181,  1186,-32768,
  3355,  1183,  3376,  3397,  3418,  3439,  3460,  3481,  3502,  3523,
  3544,  3565,  3586,  3607,-32768,   273,-32768,-32768,-32768,    12,
-32768,  1278,  1360,  2388,  3628,-32768,  3649,-32768,-32768,   479,
  2168,-32768,  1089,  1089,  1089,  1359,  1187,   -12,-32768,  1089,
  1089,  1287,-32768,   744,-32768,   744,  1089,  2411,   744,  1224,
  1362,   -80,   440,  1366,  1089,  1365,   440,  1367,  1369,  1368,
  1370,  1371,  1089,  1379,   744,  1381,  1383,  1089,  1372,  1386,
  1089,  1389,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  1089,  1089,  1089,  1219,  1393,-32768,-32768,-32768,  1089,
  1390,  1220,  1089,-32768,  2434,  2457,  2480,-32768,   744,  1394,
-32768,  2503,  2526,  1222,-32768,  1225,  1637,-32768,  1228,    39,
-32768,  1226,  1232,  1237,  3670,-32768,  1252,-32768,  1257,-32768,
-32768,-32768,  6094,-32768,  1250,-32768,-32768,  6117,  1260,-32768,
  6140,  1262,  3691,  3712,  3733,  3754,  3775,  3796,  3817,  3838,
  3859,  6163,  6186,  6209,-32768,-32768,  2198,  1264,-32768,  2549,
  1397,  1404,    49,  1270,-32768,  1406,  1407,   744,   744,-32768,
  1408,    39,   440,   440,   440,   440,  1409,  1411,  1412,   440,
  1413,  1420,  1424,  1428,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  1089,  1089,-32768,-32768,-32768,  1089,-32768,  1429,-32768,
-32768,-32768,-32768,   172,   744,-32768,-32768,  1274,  1273,-32768,
    39,  1276,  1277,  1275,  1282,-32768,-32768,-32768,  1280,-32768,
-32768,-32768,  1288,  3880,  3901,  3922,  3943,  3964,  3985,  4006,
  4027,  4048,  1281,  1289,  1291,  2572,  1293,    -1,  1295,   744,
  1356,  1306,   440,   440,  1456,  1457,   440,  1463,  1089,  1089,
  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
-32768,  1471,  1474,   744,  1300,  1303,    39,  1328,  1329,-32768,
-32768,  1307,  1334,  4069,  4090,  4111,  4132,  4153,  4174,  4195,
  4216,  4237,   327,  2056,   328,  2056,   378,  2056,  1330,-32768,
  1331,  1430,  1089,    39,   440,   744,  1507,  1508,  1089,  1089,
  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1509,  1089,
  1510,  1089,  1512,  1514,  1515,  1342,  4258,    39,  1344,  1345,
-32768,-32768,  4279,  4300,  4321,  4342,  4363,  4384,  6232,  6255,
  6278,  2056,-32768,  2056,-32768,  2056,-32768,-32768,-32768,  1089,
  1089,  1382,   440,   744,  1089,  1089,  1089,  1089,  1089,  1089,
-32768,-32768,-32768,  4405,  2595,  1380,  1361,  1363,  4426,  4447,
  4468,  4489,  4510,  4531,  1388,  1391,  1431,  1089,  1537,-32768,
   744,   440,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
  1089,  2618,-32768,  1433,  1395,  4552,  4573,  4594,  4615,  4636,
  4657,   379,  2056,   382,  2056,   383,  2056,  1603,   744,  1604,
  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1607,  1089,  1609,
  1089,  1626,-32768,  1454,-32768,  4678,  4699,  4720,  6301,  6324,
  6347,  2056,-32768,  2056,-32768,  2056,-32768,   744,  1089,  1089,
  1089,-32768,-32768,-32768,  1455,  4741,  4762,  4783,  1460,  1461,
  1462,   744,  1089,  1089,  1089,  1089,  1089,  1089,  1466,  4804,
  4825,  4846,   387,  2056,   388,  2056,   391,  2056,   440,  1089,
  1089,  1089,  1089,  1629,  1089,  1630,  1089,  1640,  1472,  6370,
  6393,  6416,  2056,-32768,  2056,-32768,  2056,-32768,  1642,-32768,
-32768,-32768,-32768,  1470,  1478,  1489,  1089,  1089,  1089,   392,
  2056,   396,  2056,   397,  2056,  1089,  1645,  1089,  1646,  1089,
  1664,  2056,-32768,  2056,-32768,  2056,-32768,  1541,  1569,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1148,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -253,   -19,-32768,
  1667,  1668,  -312,    15,  1669,-32768,-32768,-32768,-32768,   473,
 -1039,-32768,-32768,   -75,  -885,   -23,-32768,  1103,    99,-32768,
   -85,-32768,  -925,   808,   797,  -286,  -701,   876,-32768,-32768
};


#define	YYLAST		6591


static const short yytable[] = {   129,
   223,   990,   190,   128,   465,   408,   826,   442,  1111,   228,
   999,   172,    88,    89,   585,   710,   330,  1006,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   180,    76,   834,   138,   141,  1052,  1036,  1046,   122,   123,
    91,   134,  1047,   967,  1203,   835,   672,   135,  1046,   259,
   182,   314,   315,  1047,   701,   525,   526,   527,   528,   529,
   530,   531,   532,   533,   534,   535,   536,   861,   576,   862,
   577,   525,   526,   527,   528,   529,   530,   531,   532,   533,
   534,   535,   536,   871,   836,   252,   253,   254,     8,   872,
   255,   258,   173,   262,     9,   314,   315,   314,   315,   331,
   282,   283,   284,   285,   338,   287,   288,    79,   290,   291,
   292,   863,   297,   864,   316,   150,   151,    80,   152,   939,
   314,   315,   159,   160,   314,   315,  1122,   312,   313,   260,
   261,   165,   590,   161,   702,   703,   865,   177,   866,   162,
   178,   317,   579,   314,   315,   329,    81,   332,   139,   334,
   335,   276,   277,   278,   140,   142,   314,   315,  1110,   279,
   524,   167,   119,   120,   168,   169,   181,  1123,   121,  1263,
   537,  1127,   456,   124,   322,   229,   256,   174,   326,   257,
   586,   711,   115,   116,   117,   118,   798,    82,  1111,   314,
   315,   374,    77,   314,   315,    83,   378,   379,   380,   381,
   382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
   392,   393,   394,   395,   396,   397,   398,   968,  1204,    91,
   183,  1046,    84,   403,   407,    85,  1047,    86,   820,   409,
    87,   413,   414,   415,   416,   417,   418,   419,   420,   421,
   422,   423,   424,   425,   426,   427,   309,   310,   311,   314,
   315,   132,   434,   154,   318,   437,   155,   156,   428,   157,
   403,   882,   429,   133,   445,   446,   447,   136,   449,   450,
   451,   452,   453,   454,   455,   692,   137,  1212,  1213,  1214,
  1215,   143,   314,   315,  1219,   467,   468,   469,   472,   473,
   474,   314,   315,   314,   315,   314,   315,   480,   466,   314,
   315,   517,   145,   485,    10,   518,   725,   740,   571,  1043,
   147,  1044,   572,    88,    89,  1045,   376,   144,  1096,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   314,   315,   848,   849,   523,   716,  1268,  1269,   146,
   576,  1272,   576,   891,   604,   274,   275,   276,   277,   278,
   148,   115,   116,   117,   118,   279,   115,   116,   117,   118,
   115,   116,   117,   118,   582,   149,   580,   815,   122,   123,
   153,   576,   122,   123,   225,  1053,   226,   122,   123,  1054,
   578,   122,   123,   158,   831,   403,   832,   171,   816,  1319,
   122,   123,   459,   460,   122,   123,   441,   374,   226,   605,
   225,   166,   226,   937,   610,    11,    12,    13,    14,    15,
    16,    17,    18,   619,   620,   122,   123,   576,   576,   843,
   924,   574,   623,   226,   170,   977,   819,   821,  1054,   627,
  1055,   576,   175,  1095,    88,    89,   176,  1357,   635,   636,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   179,   119,   120,   185,  1385,   122,   123,   121,
   184,   122,   123,   818,   124,   226,   186,   602,   187,   188,
   603,   189,   673,    88,    89,  1308,  1310,  1309,  1311,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    41,    42,    43,    44,   221,    46,   688,   783,   784,
   785,   786,   787,   224,   689,   690,   691,   961,   403,   230,
   374,   696,   698,   231,   618,   704,  1312,  1407,  1313,  1408,
  1409,  1411,  1410,  1412,   715,  1463,  1465,  1464,  1466,  1467,
  1496,  1468,  1497,  1469,  1498,  1500,  1499,  1501,   232,   403,
   233,   234,   235,   236,   237,   796,   238,   239,   240,   241,
   265,   266,   267,   268,   269,   242,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   749,   750,   243,   752,   244,
   279,   263,   245,   280,   119,   120,   761,   762,   978,   246,
   121,   247,   248,   249,   281,   124,   250,   251,   694,   286,
   289,   695,   299,   756,   298,   325,   300,   302,   304,   303,
  1026,   305,   306,   307,   308,   319,   320,   324,   333,   336,
   337,   799,   800,   801,   802,   803,   804,   805,   806,   807,
   808,   809,   810,   119,   120,   321,   369,   339,   371,   121,
   340,   403,   372,   341,   124,   342,   343,   926,   344,   264,
   927,   822,   345,   878,   346,   827,   347,   830,   348,   717,
    26,    27,    28,    29,    30,    31,    32,    33,   349,    34,
   350,    36,    37,   844,    39,    40,   351,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   857,   858,   859,   352,
    51,   279,   744,   745,   746,   353,   354,  1102,   355,   356,
   357,   875,   876,   358,    52,    53,   359,   360,   361,   362,
   763,   363,   364,   365,   366,   367,    88,   293,   368,   772,
   375,   373,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   399,   279,   410,   910,   265,   266,
   267,   268,   269,   401,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   925,   374,    62,   411,   930,   279,   443,
   757,   448,   981,   267,   268,   269,   476,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   477,   479,   482,   486,
   487,   279,   488,  1012,   948,   949,   265,   266,   267,   268,
   269,   489,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   490,   491,   969,   970,   492,   279,   493,   494,   495,
   496,   497,   498,   980,   268,   269,   983,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   993,   499,   500,   501,
   502,   279,   503,  1000,  1001,  1002,   504,   505,   506,   507,
  1007,   508,   509,   510,  1011,   511,   512,   513,  1013,  1014,
  1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,
   514,   515,   516,   403,   519,  1060,   119,   120,   520,   521,
   581,   584,   121,  1034,  1035,   583,   589,   124,   591,   592,
  1037,   593,   594,   294,   596,   597,   599,   629,   600,   601,
   606,   621,   631,   622,   940,  1041,   630,   632,   634,   638,
   639,   296,   669,   640,   641,   642,   301,   643,   675,   644,
   645,   646,   647,  1058,   648,   670,   649,   650,   651,   962,
   652,   964,   653,   966,   654,   655,   656,   323,   687,   657,
   658,   676,   677,   327,   328,   678,    88,    89,    90,   659,
    91,   660,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   661,   114,   662,   663,   664,   665,
   666,   667,   668,   671,   693,   679,   700,   705,   706,  1105,
  1106,  1107,   680,   681,   682,   683,  1112,  1113,   731,   684,
   685,   686,   708,  1117,   709,   714,   759,   720,   722,   727,
   728,  1125,   729,   730,  1172,   733,   734,   735,   736,  1133,
   737,   738,   412,   748,  1138,   739,   753,  1141,   758,  1143,
  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
  1154,   760,   732,   764,   765,   767,  1157,   766,   768,  1160,
   771,   773,   774,   777,   778,   779,   780,   781,   790,   793,
   794,    88,    89,   874,   791,   792,  1211,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   795,
   797,   823,   115,   116,   117,   118,   824,   828,   833,   837,
   839,   841,   842,   860,   869,  1242,   119,   120,   877,   879,
   883,   884,   121,   122,   123,   707,   885,   124,   887,   125,
   886,   126,   888,   889,   893,   890,   894,   892,   901,   895,
   907,  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,
   896,   897,   898,  1236,   899,   265,   266,   267,   268,   269,
   726,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   911,  1294,   900,   902,   903,   279,   904,   573,   905,   265,
   266,   267,   268,   269,   929,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   931,   932,   906,   936,  1318,   279,
   934,   908,   941,   942,   909,  1274,  1275,  1276,  1277,  1278,
  1279,  1280,  1281,  1282,  1284,  1286,  1288,   943,   945,   946,
   947,   950,  1342,   951,   952,   953,   954,   955,   956,   963,
   965,   119,   120,   971,   975,   982,   985,   121,   986,   987,
   988,  1030,   124,   989,   991,   992,   994,   995,  1025,  1317,
   998,   996,   997,  1005,  1004,  1323,  1324,  1325,  1326,  1327,
  1328,  1329,  1330,  1331,  1332,  1008,  1334,  1009,  1336,  1010,
  1032,  1027,   265,   266,   267,   268,   269,  1028,   270,   271,
   272,   273,   274,   275,   276,   277,   278,  1031,  1033,  1040,
  1057,  1056,   279,  1042,  1063,  1061,  1354,  1355,  1066,  1070,
  1064,  1359,  1360,  1361,  1362,  1363,  1364,   265,   266,   267,
   268,   269,  1065,   270,   271,   272,   273,   274,   275,   276,
   277,   278,  1067,  1069,  1382,  1071,  1075,   279,  1076,  1386,
  1387,  1388,  1389,  1390,  1391,  1393,  1395,  1397,  1077,  1079,
  1080,  1082,  1097,  1098,  1108,  1120,  1109,  1121,  1124,  1114,
  1126,  1129,  1128,  1130,  1139,  1131,  1132,  1416,  1417,  1418,
  1419,  1420,  1421,  1422,  1134,  1424,  1136,  1426,  1137,   718,
   719,  1140,   721,  1142,  1158,  1155,   723,   724,  1156,  1165,
  1159,  1168,  1201,  1169,  1173,  1436,  1437,  1438,  1171,  1202,
  1174,  1206,  1207,  1210,  1216,  1175,  1217,  1218,  1220,  1450,
  1451,  1452,  1454,  1456,  1458,  1221,  1177,   751,  1180,  1222,
   754,  1178,  1223,  1237,  1182,  1266,  1470,  1471,  1472,  1473,
  1184,  1475,  1199,  1477,   769,   770,   747,  1267,  1205,  1245,
   775,   776,  1240,  1241,  1243,  1244,  1246,   782,  1247,   789,
  1258,  1270,  1271,  1491,  1493,  1495,  1248,  1273,  1259,   825,
  1260,  1262,  1502,  1264,  1504,  1289,  1506,    88,   402,  1290,
  1292,  1297,  1293,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,  1029,  1295,  1296,  1298,  1316,
  1314,  1315,  1321,  1322,  1333,  1335,   838,  1337,   840,  1338,
  1339,  1340,  1343,  1344,   845,   846,   847,  1370,  1356,   850,
   851,   852,   853,   854,   855,   856,   483,    88,   697,  1371,
  1509,  1372,  1383,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,    88,   829,  1379,  1510,  1400,
  1380,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   265,   266,   267,   268,   269,  1038,   270,
   271,   272,   273,   274,   275,   276,   277,   278,  1413,  1415,
  1381,  1399,  1423,   279,  1425,   928,   265,   266,   267,   268,
   269,  1039,   270,   271,   272,   273,   274,   275,   276,   277,
   278,  1427,  1428,  1442,  1474,  1476,   279,   119,   120,  1446,
  1447,  1448,  1170,   121,  1459,  1478,  1479,  1483,   124,  1487,
  1503,  1505,   265,   266,   267,   268,   269,  1488,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   575,  1489,  1507,
   976,   674,   279,    67,    68,    69,  1238,   984,   699,   974,
     0,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,  1003,   119,   120,   933,
     0,   279,     0,   121,     0,     0,     0,     0,   124,     0,
     0,   588,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   119,   120,     0,     0,     0,
     0,   121,   755,     0,     0,     0,   124,     0,     0,     0,
     0,     0,     0,     0,     0,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,   817,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
  1115,     0,  1116,   279,     0,  1119,   265,   266,   267,   268,
   269,   431,   270,   271,   272,   273,   274,   275,   276,   277,
   278,  1135,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
     0,     0,     0,     0,     0,  1164,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,   191,     0,     0,   279,    26,    27,    28,
    29,    30,    31,    32,    33,     0,    34,     0,    36,    37,
     0,    39,    40,     0,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,    51,    39,    40,
     0,     0,     0,     0,  1208,  1209,     0,     0,     0,     0,
     0,    52,    53,     0,    51,     0,     0,     0,     0,     0,
     0,     0,   192,   193,   194,     0,     0,     0,    52,    53,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     0,  1239,     0,     0,     0,     0,     0,     0,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
   216,   217,   218,   219,   220,     0,     0,     0,     0,     0,
     0,     0,    62,     0,     0,     0,  1265,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    62,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1291,     0,     0,    -8,     1,     0,    -8,   -51,     0,   265,
   266,   267,   268,   269,   470,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   475,  1320,     0,   -51,   457,   -51,   -51,   -51,   -51,
   -51,   -51,   -51,   -51,   -51,     0,   -51,   -51,   -51,   -51,
   -51,   -51,   -51,     0,     0,     0,   -51,   -51,   -51,   -51,
   -51,   -51,     0,   -51,   -51,   -51,   -51,   -51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1358,   -51,   -51,     0,     0,     0,     0,     0,     0,   -51,
     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1384,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    -8,    -8,    -8,
    -8,    -8,    -8,    -8,    -8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1414,     0,     0,     0,     0,
    23,     0,   -51,     2,     3,     0,     4,     0,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,  1435,     0,     0,    24,   279,    25,
    26,    27,    28,    29,    30,    31,    32,    33,  1449,    34,
    35,    36,    37,    38,    39,    40,     0,     0,     0,    41,
    42,    43,    44,    45,    46,     0,    47,    48,    49,    50,
    51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,     0,     0,     0,     0,
     0,     0,    54,     0,    55,    56,    57,    58,    59,    60,
    61,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,     0,     0,     0,   959,     0,   960,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,    62,     0,     0,     0,     0,
   279,     0,     0,     0,     0,     0,  1103,     0,  1104,     0,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,     0,     0,     0,  1197,     0,  1198,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,   436,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,     0,   265,   266,   267,   268,   269,
   438,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,   607,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,   265,   266,   267,   268,   269,   611,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,   265,   266,   267,   268,   269,   612,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,   265,   266,   267,
   268,   269,   743,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
   265,   266,   267,   268,   269,   957,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,   265,   266,   267,   268,   269,  1099,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,   265,   266,   267,   268,
   269,  1118,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,   265,
   266,   267,   268,   269,  1161,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,  1162,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,     0,   265,   266,   267,   268,   269,
  1163,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,  1166,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,   265,   266,   267,   268,   269,  1167,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,   265,   266,   267,   268,   269,  1200,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,   265,   266,   267,
   268,   269,  1261,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
   265,   266,   267,   268,   269,  1369,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,   265,   266,   267,   268,   269,  1398,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   458,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   561,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   568,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   569,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   570,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   624,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   625,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   626,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   741,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   742,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   867,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   868,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   880,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   881,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   912,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   913,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   914,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   915,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   916,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   917,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   918,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   920,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   921,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   922,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   923,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   938,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   944,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1050,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1051,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1059,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1062,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1073,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1078,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1081,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1083,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1084,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1085,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1086,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1087,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1088,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1089,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1090,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1091,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1092,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1093,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1094,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1100,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1101,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1176,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1185,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1186,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1187,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1188,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1189,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1190,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1191,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1192,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1193,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1249,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1250,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1251,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1252,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1253,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1254,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1255,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1256,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1257,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1299,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1300,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1301,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1302,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1303,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1304,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1305,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1306,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1307,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1341,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1345,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1346,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1347,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1348,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1349,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1350,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1368,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1373,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1374,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1375,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1376,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1377,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1378,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1401,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1402,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1403,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1404,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1405,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1406,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1429,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1430,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1431,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1443,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1444,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1445,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1460,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1461,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1462,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,   406,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,     0,   522,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,   628,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,     0,   935,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   400,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   430,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   432,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   433,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   435,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   439,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   440,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   444,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   478,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   481,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   484,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   550,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   551,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   552,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   553,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   554,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   555,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   556,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   557,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   558,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   559,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   560,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   562,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   563,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   564,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   565,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   566,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   567,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   595,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   598,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   608,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   609,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   613,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   614,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   615,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   616,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   617,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   633,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   637,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   811,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   812,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   813,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   814,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   870,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   958,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   979,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,  1068,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,  1072,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,  1074,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,  1179,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,  1181,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,  1183,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,  1194,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
  1195,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,  1196,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,  1351,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,  1352,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,  1353,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,  1432,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,  1433,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,  1434,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,  1480,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,  1481,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
  1482
};

static const short yycheck[] = {    23,
    86,   887,    78,    23,   317,   259,   708,   294,  1048,     4,
   896,     4,     3,     4,     4,     4,    81,   903,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    38,     3,     6,    59,    59,   971,     6,    60,   170,   171,
     7,   174,    65,     6,     6,     6,   178,   180,    60,     4,
     4,   163,   164,    65,     4,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,   179,   179,   181,
   181,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   174,    45,   119,   120,   121,     6,   180,
   124,   125,    95,   127,   144,   163,   164,   163,   164,   174,
   134,   135,   136,   137,   190,   139,   140,     7,   142,   143,
   144,   179,   146,   181,   180,    37,    38,     6,    40,   831,
   163,   164,   163,   164,   163,   164,  1062,   161,   162,    84,
    85,    43,   429,   174,    84,    85,   179,    34,   181,   180,
    37,   180,   406,   163,   164,   179,     6,   181,   174,   183,
   184,   165,   166,   167,   180,   180,   163,   164,   181,   173,
   180,    34,   163,   164,    37,    38,   174,  1063,   169,   181,
   181,  1067,   179,   174,   170,   180,   177,   180,   174,   180,
   180,   180,   149,   150,   151,   152,   181,     6,  1238,   163,
   164,   225,   164,   163,   164,     6,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   180,   180,     7,
   174,    60,     6,   257,     7,   174,    65,   174,     7,   259,
   174,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   158,   159,   160,   163,
   164,   174,   286,    34,   166,   289,    37,    38,   175,    40,
   294,   175,   179,     6,   298,   299,   300,   174,   302,   303,
   304,   305,   306,   307,   308,   572,   174,  1173,  1174,  1175,
  1176,   174,   163,   164,  1180,   319,   320,   321,     6,     7,
   324,   163,   164,   163,   164,   163,   164,   331,   179,   163,
   164,   175,    42,   337,     3,   179,   603,   179,   175,   179,
    38,   179,   179,     3,     4,   179,   228,   174,  1030,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   163,   164,    51,    52,   375,   175,  1243,  1244,   174,
   179,  1247,   179,   175,   181,   163,   164,   165,   166,   167,
    38,   149,   150,   151,   152,   173,   149,   150,   151,   152,
   149,   150,   151,   152,   408,    38,   406,   175,   170,   171,
    40,   179,   170,   171,   176,   175,   178,   170,   171,   179,
   178,   170,   171,   180,   179,   429,   181,    38,   695,  1295,
   170,   171,   314,   315,   170,   171,   176,   441,   178,   443,
   176,   180,   178,   179,   448,   114,   115,   116,   117,   118,
   119,   120,   121,   457,   458,   170,   171,   179,   179,   181,
   181,   176,   466,   178,   180,     8,   700,   701,   179,   473,
   181,   179,     6,   181,     3,     4,     6,  1343,   482,   483,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   174,   163,   164,     6,  1372,   170,   171,   169,
   174,   170,   171,   176,   174,   178,     4,   177,     4,    38,
   180,     3,   522,     3,     4,   179,   179,   181,   181,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    53,    54,    55,    56,   174,    58,   561,    99,   100,
   101,   102,   103,     5,   568,   569,   570,   860,   572,   174,
   574,   575,   576,   174,   456,   579,   179,   179,   181,   181,
   179,   179,   181,   181,   588,   179,   179,   181,   181,   179,
   179,   181,   181,  1459,   179,   179,   181,   181,   174,   603,
   174,   174,   174,   174,   174,   671,   174,   174,   174,   174,
   153,   154,   155,   156,   157,   174,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   629,   630,   174,   632,   174,
   173,     6,   174,     6,   163,   164,   640,   641,   181,   174,
   169,   174,   174,   174,     5,   174,   174,   174,   177,   174,
   174,   180,   174,     8,   180,     6,   174,   180,   174,   180,
   927,   174,   174,   174,   174,   180,   180,   176,    87,     6,
   174,   675,   676,   677,   678,   679,   680,   681,   682,   683,
   684,   685,   686,   163,   164,   180,     5,   174,   179,   169,
   174,   695,   175,   174,   174,   174,   174,   177,   174,     6,
   180,   701,   174,   759,   174,   709,   174,   711,   174,   591,
    34,    35,    36,    37,    38,    39,    40,    41,   174,    43,
   174,    45,    46,   727,    48,    49,   174,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   740,   741,   742,   174,
    64,   173,   624,   625,   626,   174,   174,  1040,   174,   174,
   174,   755,   756,   174,    78,    79,   174,   174,   174,   174,
   642,   174,   174,   174,   174,   174,     3,     4,   174,   651,
     4,   179,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     5,   173,   178,   797,   153,   154,
   155,   156,   157,     7,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   817,   818,   139,     7,   821,   173,     7,
   175,     7,   878,   155,   156,   157,     7,   159,   160,   161,
   162,   163,   164,   165,   166,   167,     7,    82,   180,   145,
     5,   173,     5,   909,   848,   849,   153,   154,   155,   156,
   157,     5,   159,   160,   161,   162,   163,   164,   165,   166,
   167,     5,     5,   867,   868,     5,   173,     5,     5,     5,
     5,     5,     5,   877,   156,   157,   880,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   890,     5,     5,     5,
     5,   173,     5,   897,   898,   899,     5,     5,     5,     5,
   904,     5,     5,   132,   908,     5,     5,     5,   912,   913,
   914,   915,   916,   917,   918,   919,   920,   921,   922,   923,
     5,     3,     5,   927,     5,   981,   163,   164,     6,     5,
     5,     4,   169,   937,   938,     6,     6,   174,     7,     6,
   944,     7,     7,   180,     7,     6,     6,   180,     7,     7,
     7,   181,     7,   181,   836,   959,   180,   174,     7,   146,
   179,   145,     5,   179,   179,   179,   150,   179,   174,   179,
   179,   179,   179,   977,   179,   175,   179,   179,   179,   861,
   179,   863,   179,   865,   179,   179,   179,   171,     6,   179,
   179,   174,   174,   177,   178,   174,     3,     4,     5,   179,
     7,   179,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   179,    32,   179,   179,   179,   179,
   179,   179,   179,   179,     6,   174,   177,     6,     6,  1043,
  1044,  1045,   174,   174,   174,   174,  1050,  1051,     6,   174,
   174,   174,     7,  1057,   176,     6,   142,     7,     7,   180,
     7,  1065,     7,     7,  1120,     7,     7,     7,     7,  1073,
     7,     7,     6,     6,  1078,     7,     7,  1081,     7,  1083,
  1084,  1085,  1086,  1087,  1088,  1089,  1090,  1091,  1092,  1093,
  1094,     3,    50,     3,     3,     3,  1100,   165,     3,  1103,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     4,    83,     5,     5,  1172,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,     6,
     4,   178,   149,   150,   151,   152,     7,   178,     6,     6,
     6,     6,     6,   180,     6,  1211,   163,   164,   180,   179,
   179,   175,   169,   170,   171,     6,   179,   174,   179,   176,
   175,   178,   175,   179,   175,   179,   175,   179,   175,   179,
   175,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
   179,   179,   179,  1197,   179,   153,   154,   155,   156,   157,
     6,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     6,  1267,   179,   179,   179,   173,   179,   401,   179,   153,
   154,   155,   156,   157,     5,   159,   160,   161,   162,   163,
   164,   165,   166,   167,     6,     4,   179,    84,  1294,   173,
     6,   179,     6,     6,   179,  1249,  1250,  1251,  1252,  1253,
  1254,  1255,  1256,  1257,  1258,  1259,  1260,   177,     6,     6,
     6,     6,  1318,     6,     6,     6,     6,     6,     6,     6,
     6,   163,   164,     7,    83,     3,     6,   169,     3,     6,
   165,     7,   174,     6,     6,     3,     6,     3,   177,  1293,
     3,     6,     6,     3,     6,  1299,  1300,  1301,  1302,  1303,
  1304,  1305,  1306,  1307,  1308,     3,  1310,     3,  1312,     6,
   178,     6,   153,   154,   155,   156,   157,     6,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     6,   178,   180,
    80,   180,   173,   181,   179,   175,  1340,  1341,   175,   175,
   179,  1345,  1346,  1347,  1348,  1349,  1350,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   179,   179,  1368,   175,   179,   173,   175,  1373,
  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,   175,   179,
   175,   179,    85,     4,     6,   142,   180,     6,     3,    83,
     6,     3,     6,     6,     3,     6,     6,  1401,  1402,  1403,
  1404,  1405,  1406,  1407,     6,  1409,     6,  1411,     6,   593,
   594,     6,   596,     5,     5,   177,   600,   601,     6,     6,
   181,   180,     6,   179,   179,  1429,  1430,  1431,   181,     6,
   179,     6,     6,     6,     6,   179,     6,     6,     6,  1443,
  1444,  1445,  1446,  1447,  1448,     6,   175,   631,   179,     6,
   634,   175,     5,     5,   175,    80,  1460,  1461,  1462,  1463,
   179,  1465,   179,  1467,   648,   649,     6,   142,   179,   175,
   654,   655,   179,   181,   179,   179,   175,   661,   179,   663,
   180,     6,     6,  1487,  1488,  1489,   179,     5,   180,     6,
   180,   179,  1496,   179,  1498,     5,  1500,     3,     4,     6,
   181,   175,   180,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     6,   179,   179,   175,    80,
   181,   181,     6,     6,     6,     6,   720,     6,   722,     6,
     6,   180,   179,   179,   728,   729,   730,   148,   147,   733,
   734,   735,   736,   737,   738,   739,     8,     3,     4,   179,
     0,   179,     6,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     3,     4,   180,     0,   175,
   180,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   153,   154,   155,   156,   157,     6,   159,
   160,   161,   162,   163,   164,   165,   166,   167,     6,     6,
   180,   179,     6,   173,     6,   819,   153,   154,   155,   156,
   157,     6,   159,   160,   161,   162,   163,   164,   165,   166,
   167,     6,   179,   179,     6,     6,   173,   163,   164,   180,
   180,   180,     6,   169,   179,     6,   175,     6,   174,   180,
     6,     6,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     8,   180,     6,
   874,   524,   173,     7,     7,     7,  1204,   881,   576,   872,
    -1,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   900,   163,   164,   824,
    -1,   173,    -1,   169,    -1,    -1,    -1,    -1,   174,    -1,
    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,    -1,    -1,
    -1,   169,     8,    -1,    -1,    -1,   174,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,     8,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
  1054,    -1,  1056,   173,    -1,  1059,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,  1075,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1109,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    37,    -1,    -1,   173,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    -1,    45,    46,
    -1,    48,    49,    -1,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    64,    48,    49,
    -1,    -1,    -1,    -1,  1168,  1169,    -1,    -1,    -1,    -1,
    -1,    78,    79,    -1,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    78,    79,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
    -1,  1205,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,   133,
   134,   135,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,    -1,    -1,    -1,  1240,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1264,    -1,    -1,     0,     1,    -1,     3,     4,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   181,  1296,    -1,    31,   179,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    44,    45,    46,
    47,    48,    49,    -1,    -1,    -1,    53,    54,    55,    56,
    57,    58,    -1,    60,    61,    62,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1344,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,
    -1,    88,    89,    90,    91,    92,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1371,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1399,    -1,    -1,    -1,    -1,
     4,    -1,   139,   140,   141,    -1,   143,    -1,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,  1428,    -1,    -1,    31,   173,    33,
    34,    35,    36,    37,    38,    39,    40,    41,  1442,    43,
    44,    45,    46,    47,    48,    49,    -1,    -1,    -1,    53,
    54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    78,    79,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    -1,    88,    89,    90,    91,    92,    93,
    94,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   139,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,    -1,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 154 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 163 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 177 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 184 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 201 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 202 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 203 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 208 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 213 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 224 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 227 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 231 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 237 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 243 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 250 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 256 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 260 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 264 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 271 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 275 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 280 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 284 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 288 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 292 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 296 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 300 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 304 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 308 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 314 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 317 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 320 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 324 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 328 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 332 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 336 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 355 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 358 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 371 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 374 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 396 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 66:
#line 400 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 67:
#line 430 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-4].c); 
    ;
    break;}
case 68:
#line 435 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-6].c);
    ;
    break;}
case 69:
#line 443 "Gmsh.y"
{
      BeginView(1, Force_ViewNumber); 
    ;
    break;}
case 82:
#line 462 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 464 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 469 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 474 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 481 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 483 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 488 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 493 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 500 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 502 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 507 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 512 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 519 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 521 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 527 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 533 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 540 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 542 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 548 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 554 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 561 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 563 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 569 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 575 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 582 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 584 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 591 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 600 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 607 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 609 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 616 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 625 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 632 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 634 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 641 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 650 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 657 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 659 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 667 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 676 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 683 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 685 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 693 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 702 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 709 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 711 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 719 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 728 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 740 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 131:
#line 741 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 132:
#line 742 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 133:
#line 743 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 134:
#line 744 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 135:
#line 747 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 136:
#line 748 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 137:
#line 755 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 138:
#line 782 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 139:
#line 816 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	      List_Add(Symbol_L, &TheSymbol);
	    }
	  }
	  else
	    vyyerror("Unknown Variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 140:
#line 863 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 141:
#line 878 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 142:
#line 887 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 143:
#line 902 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 144:
#line 914 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 145:
#line 928 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 146:
#line 951 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by Zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 147:
#line 975 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 148:
#line 987 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 149:
#line 1001 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 150:
#line 1013 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 151:
#line 1027 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 152:
#line 1043 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 153:
#line 1069 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 1076 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 155:
#line 1082 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 156:
#line 1101 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 157:
#line 1112 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 158:
#line 1120 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 1126 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 160:
#line 1132 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 161:
#line 1151 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1157 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 163:
#line 1174 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 164:
#line 1180 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 165:
#line 1186 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1192 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1198 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1204 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 169:
#line 1223 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 170:
#line 1235 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1241 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 172:
#line 1260 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 173:
#line 1283 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 174:
#line 1291 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 175:
#line 1295 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1301 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1307 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 178:
#line 1319 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 179:
#line 1325 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1331 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1344 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 182:
#line 1349 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 183:
#line 1354 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 184:
#line 1359 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 185:
#line 1366 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 186:
#line 1367 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 187:
#line 1368 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 188:
#line 1373 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 189:
#line 1377 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1389 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 191:
#line 1407 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 192:
#line 1414 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 193:
#line 1419 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 194:
#line 1431 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing System Call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 195:
#line 1485 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 196:
#line 1505 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 197:
#line 1509 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 198:
#line 1531 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 199:
#line 1545 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 200:
#line 1559 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 201:
#line 1584 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 202:
#line 1609 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 203:
#line 1635 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 204:
#line 1641 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 205:
#line 1646 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 206:
#line 1651 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 207:
#line 1655 "Gmsh.y"
{
    ;
    break;}
case 208:
#line 1666 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 209:
#line 1671 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 210:
#line 1677 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 211:
#line 1681 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 212:
#line 1685 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 213:
#line 1689 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 214:
#line 1693 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 215:
#line 1698 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 216:
#line 1706 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 1709 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 1715 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 219:
#line 1735 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 220:
#line 1746 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 221:
#line 1764 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 222:
#line 1782 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 223:
#line 1800 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 224:
#line 1822 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1843 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1864 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 227:
#line 1882 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1908 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 229:
#line 1912 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 230:
#line 1923 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 231:
#line 1924 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 232:
#line 1928 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 233:
#line 1929 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 234:
#line 1930 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 1931 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 1932 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 1936 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 238:
#line 1937 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 239:
#line 1938 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 240:
#line 1939 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 241:
#line 1940 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 242:
#line 1941 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 243:
#line 1942 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 244:
#line 1943 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 245:
#line 1945 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 246:
#line 1951 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 247:
#line 1952 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 248:
#line 1953 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 249:
#line 1954 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 250:
#line 1955 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 251:
#line 1956 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 252:
#line 1957 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 253:
#line 1958 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 254:
#line 1959 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 255:
#line 1960 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 256:
#line 1961 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 257:
#line 1962 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 258:
#line 1963 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 259:
#line 1964 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 260:
#line 1965 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 261:
#line 1966 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 262:
#line 1967 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 263:
#line 1968 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 264:
#line 1969 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1970 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 266:
#line 1971 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1972 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 268:
#line 1973 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1974 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 1975 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 1976 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 272:
#line 1977 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 273:
#line 1978 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 274:
#line 1979 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 275:
#line 1980 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 276:
#line 1981 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 277:
#line 1982 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 278:
#line 1991 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 279:
#line 1992 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 280:
#line 1997 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 281:
#line 2008 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 282:
#line 2025 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 283:
#line 2036 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 284:
#line 2055 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 285:
#line 2071 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 286:
#line 2087 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 287:
#line 2103 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 288:
#line 2121 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 289:
#line 2127 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 290:
#line 2141 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 291:
#line 2145 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2149 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 293:
#line 2153 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2157 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2163 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 296:
#line 2167 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2171 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2175 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2182 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2185 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2191 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2194 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2200 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2203 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 305:
#line 2207 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 306:
#line 2214 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 307:
#line 2219 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 308:
#line 2226 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 309:
#line 2231 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 310:
#line 2245 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 311:
#line 2265 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 312:
#line 2273 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 313:
#line 2278 "Gmsh.y"
{ 
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 314:
#line 2282 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 315:
#line 2294 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 316:
#line 2312 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2316 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
    ;
    break;}
case 318:
#line 2323 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 319:
#line 2334 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 320:
#line 2354 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 2358 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 2362 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 323:
#line 2367 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 324:
#line 2372 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 325:
#line 2391 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 326:
#line 2395 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 327:
#line 2409 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 328:
#line 2414 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 329:
#line 2421 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 330:
#line 2425 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 331:
#line 2429 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring)+1);
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2454 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


