
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tToday	293
#define	tPoint	294
#define	tCircle	295
#define	tEllipse	296
#define	tLine	297
#define	tSurface	298
#define	tSpline	299
#define	tVolume	300
#define	tCharacteristic	301
#define	tLength	302
#define	tParametric	303
#define	tElliptic	304
#define	tPlane	305
#define	tRuled	306
#define	tTriangulation	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tDiscrete	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tIntersect	326
#define	tAttractor	327
#define	tLayers	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tScalarLine	332
#define	tVectorLine	333
#define	tTensorLine	334
#define	tScalarTriangle	335
#define	tVectorTriangle	336
#define	tTensorTriangle	337
#define	tScalarQuadrangle	338
#define	tVectorQuadrangle	339
#define	tTensorQuadrangle	340
#define	tScalarTetrahedron	341
#define	tVectorTetrahedron	342
#define	tTensorTetrahedron	343
#define	tScalarHexahedron	344
#define	tVectorHexahedron	345
#define	tTensorHexahedron	346
#define	tScalarPrism	347
#define	tVectorPrism	348
#define	tTensorPrism	349
#define	tScalarPyramid	350
#define	tVectorPyramid	351
#define	tTensorPyramid	352
#define	tText2D	353
#define	tText3D	354
#define	tInterpolationScheme	355
#define	tTime	356
#define	tCombine	357
#define	tBSpline	358
#define	tBezier	359
#define	tNurbs	360
#define	tOrder	361
#define	tWith	362
#define	tBounds	363
#define	tKnots	364
#define	tColor	365
#define	tColorTable	366
#define	tFor	367
#define	tIn	368
#define	tEndFor	369
#define	tIf	370
#define	tEndIf	371
#define	tExit	372
#define	tReturn	373
#define	tCall	374
#define	tFunction	375
#define	tTrimmed	376
#define	tShow	377
#define	tHide	378
#define	tGetValue	379
#define	tB_SPLINE_SURFACE_WITH_KNOTS	380
#define	tB_SPLINE_CURVE_WITH_KNOTS	381
#define	tCARTESIAN_POINT	382
#define	tTRUE	383
#define	tFALSE	384
#define	tUNSPECIFIED	385
#define	tU	386
#define	tV	387
#define	tEDGE_CURVE	388
#define	tVERTEX_POINT	389
#define	tORIENTED_EDGE	390
#define	tPLANE	391
#define	tFACE_OUTER_BOUND	392
#define	tEDGE_LOOP	393
#define	tADVANCED_FACE	394
#define	tVECTOR	395
#define	tDIRECTION	396
#define	tAXIS2_PLACEMENT_3D	397
#define	tISO	398
#define	tENDISO	399
#define	tENDSEC	400
#define	tDATA	401
#define	tHEADER	402
#define	tFILE_DESCRIPTION	403
#define	tFILE_SCHEMA	404
#define	tFILE_NAME	405
#define	tMANIFOLD_SOLID_BREP	406
#define	tCLOSED_SHELL	407
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	408
#define	tFACE_BOUND	409
#define	tCYLINDRICAL_SURFACE	410
#define	tCONICAL_SURFACE	411
#define	tCIRCLE	412
#define	tTRIMMED_CURVE	413
#define	tGEOMETRIC_SET	414
#define	tCOMPOSITE_CURVE_SEGMENT	415
#define	tCONTINUOUS	416
#define	tCOMPOSITE_CURVE	417
#define	tTOROIDAL_SURFACE	418
#define	tPRODUCT_DEFINITION	419
#define	tPRODUCT_DEFINITION_SHAPE	420
#define	tSHAPE_DEFINITION_REPRESENTATION	421
#define	tELLIPSE	422
#define	tSolid	423
#define	tEndSolid	424
#define	tVertex	425
#define	tFacet	426
#define	tNormal	427
#define	tOuter	428
#define	tLoopSTL	429
#define	tEndLoop	430
#define	tEndFacet	431
#define	tAFFECTPLUS	432
#define	tAFFECTMINUS	433
#define	tAFFECTTIMES	434
#define	tAFFECTDIVIDE	435
#define	tOR	436
#define	tAND	437
#define	tEQUAL	438
#define	tNOTEQUAL	439
#define	tAPPROXEQUAL	440
#define	tLESSOREQUAL	441
#define	tGREATEROREQUAL	442
#define	tCROSSPRODUCT	443
#define	tPLUSPLUS	444
#define	tMINUSMINUS	445
#define	UNARYPREC	446

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.226 2005-01-08 20:15:13 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 74 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2396
#define	YYFLAG		-32768
#define	YYNTBASE	212

#define YYTRANSLATE(x) ((unsigned)(x) <= 446 ? yytranslate[x] : 350)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   198,     2,   208,     2,   196,     2,     2,   203,
   204,   194,   192,   209,   193,   207,   195,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   188,
     2,   190,   182,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   205,     2,   206,   202,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   210,     2,   211,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   183,   184,   185,   186,   187,
   189,   191,   197,   199,   200,   201
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2071,
  2094,  2115,  2124,  2133,  2142,  2150,  2159,  2165,  2177,  2183,
  2193,  2195,  2197,  2199,  2200,  2203,  2210,  2217,  2224,  2231,
  2236,  2243,  2248,  2255,  2259,  2264,  2270,  2274,  2278,  2283,
  2288,  2292,  2300,  2304,  2312,  2316,  2319,  2322,  2338,  2341,
  2348,  2357,  2366,  2377,  2379,  2382,  2384,  2388,  2393,  2395,
  2404,  2417,  2432,  2433,  2446,  2447,  2464,  2465,  2484,  2493,
  2506,  2521,  2522,  2535,  2536,  2553,  2554,  2573,  2582,  2595,
  2610,  2611,  2624,  2625,  2642,  2643,  2662,  2664,  2667,  2677,
  2685,  2688,  2695,  2705,  2715,  2724,  2733,  2742,  2749,  2754,
  2757,  2760,  2762,  2764,  2766,  2768,  2770,  2772,  2776,  2779,
  2782,  2785,  2789,  2793,  2797,  2801,  2805,  2809,  2813,  2817,
  2821,  2825,  2829,  2833,  2837,  2841,  2847,  2852,  2857,  2862,
  2867,  2872,  2877,  2882,  2887,  2892,  2897,  2904,  2909,  2914,
  2919,  2924,  2929,  2934,  2941,  2948,  2955,  2960,  2965,  2970,
  2975,  2980,  2985,  2990,  2995,  3000,  3005,  3010,  3017,  3022,
  3027,  3032,  3037,  3042,  3047,  3054,  3061,  3068,  3073,  3075,
  3077,  3079,  3081,  3083,  3088,  3093,  3096,  3102,  3106,  3113,
  3118,  3126,  3133,  3135,  3138,  3141,  3145,  3149,  3161,  3171,
  3179,  3187,  3188,  3192,  3194,  3198,  3199,  3203,  3207,  3209,
  3213,  3215,  3217,  3221,  3226,  3230,  3236,  3241,  3243,  3245,
  3247,  3251,  3256,  3263,  3271,  3273,  3275,  3279,  3283,  3293,
  3301,  3303,  3309,  3313,  3320,  3322,  3326,  3328,  3330,  3337,
  3342,  3347,  3354,  3361
};

static const short yyrhs[] = {   216,
     0,   214,     0,   221,     0,     1,     6,     0,     3,     0,
   193,     3,     0,     0,   214,   215,     0,   169,     0,   172,
   173,   213,   213,   213,   174,   175,   171,   213,   213,   213,
   171,   213,   213,   213,   171,   213,   213,   213,   176,   177,
     0,   170,     0,     0,   216,   217,     0,   218,     0,   220,
     0,   219,     0,   144,     6,     0,   145,     6,     0,   147,
     6,     0,   146,     6,     0,   148,     6,     0,   149,   203,
   339,   209,     5,   204,     6,     0,   150,   203,   339,   204,
     6,     0,   151,   203,     5,   209,     5,   209,   339,   209,
   339,   209,     5,   209,     5,   209,     5,   204,     6,     0,
     3,     7,   128,   203,     5,   209,   337,   204,     6,     0,
     3,     7,   127,   203,     5,   209,   335,   209,   343,   209,
   334,   209,   334,   209,   334,   209,   343,   209,   343,   209,
   334,   204,     6,     0,     3,     7,   126,   203,     5,   209,
   335,   209,   335,   209,   341,   209,   334,   209,   334,   209,
   334,   209,   334,   209,   343,   209,   343,   209,   343,   209,
   343,   209,   334,   204,     6,     0,     3,     7,   134,   203,
     5,   209,     3,   209,     3,   209,     3,   209,   334,   204,
     6,     0,     3,     7,   138,   203,     5,   209,     3,   209,
   334,   204,     6,     0,     3,     7,   155,   203,     5,   209,
     3,   209,   334,   204,     6,     0,     3,     7,   136,   203,
     5,   209,   194,   209,   194,   209,   335,   209,   334,   204,
     6,     0,     3,     7,   139,   203,     5,   209,   343,   204,
     6,     0,     3,     7,   140,   203,     5,   209,   343,   209,
     3,   209,   334,   204,     6,     0,     3,     7,   135,   203,
     5,   209,     3,   204,     6,     0,     3,     7,   141,   203,
     5,   209,     3,   209,   335,   204,     6,     0,     3,     7,
   143,   203,     5,   209,     3,   209,     3,   209,     3,   204,
     6,     0,     3,     7,   142,   203,     5,   209,   337,   204,
     6,     0,     3,     7,   137,   203,     5,   209,     3,   204,
     6,     0,     3,     7,    43,   203,     5,   209,     3,   209,
     3,   204,     6,     0,     3,     7,   153,   203,     5,   209,
   343,   204,     6,     0,     3,     7,   154,   203,     5,   209,
   343,   209,     3,   204,     6,     0,     3,     7,   152,   203,
     5,   209,     3,   204,     6,     0,     3,     7,   156,   203,
     5,   209,     3,   209,   335,   204,     6,     0,     3,     7,
   157,   203,     5,   209,     3,   209,   335,   209,   335,   204,
     6,     0,     3,     7,   164,   203,     5,   209,     3,   209,
   335,   209,   335,   204,     6,     0,     3,     7,   158,   203,
     5,   209,     3,   209,   335,   204,     6,     0,     3,     7,
   168,   203,     5,   209,     3,   209,   335,   209,   335,   204,
     6,     0,     3,     7,   159,   203,     5,   209,     3,   209,
   343,   209,   343,   209,   334,   209,   334,   204,     6,     0,
     3,     7,   160,   203,     5,   209,   343,   204,     6,     0,
     3,     7,   161,   203,   162,   209,   334,   209,     3,   204,
     6,     0,     3,     7,   163,   203,     5,   209,   343,   209,
   334,   204,     6,     0,     3,     7,   165,   203,     5,   209,
     5,   209,     3,   209,     3,   204,     6,     0,     3,     7,
   166,   203,     5,   209,     5,   209,     3,   204,     6,     0,
     3,     7,   167,   203,     3,   209,     3,   204,     6,     0,
     0,   221,   222,     0,   224,     0,   223,     0,   309,     0,
   310,     0,   311,     0,   314,     0,   315,     0,   316,     0,
   317,     0,   320,     0,   332,     0,   333,     0,   319,     0,
   318,     0,    33,   203,     5,   204,     6,     0,    33,   203,
     5,   209,   345,   204,     6,     0,     4,     5,   210,   225,
   211,     6,     0,     4,     5,     4,   337,   210,   225,   211,
     6,     0,     0,   225,   227,     0,   225,   230,     0,   225,
   233,     0,   225,   236,     0,   225,   239,     0,   225,   242,
     0,   225,   245,     0,   225,   248,     0,   225,   251,     0,
   225,   254,     0,   225,   257,     0,   225,   260,     0,   225,
   263,     0,   225,   266,     0,   225,   269,     0,   225,   272,
     0,   225,   275,     0,   225,   278,     0,   225,   281,     0,
   225,   284,     0,   225,   287,     0,   225,   290,     0,   225,
   293,     0,   225,   296,     0,   225,   299,     0,   225,   302,
     0,   225,   304,     0,   225,   306,     0,   335,     0,   226,
   209,   335,     0,     0,    75,   203,   335,   209,   335,   209,
   335,   204,   228,   210,   226,   211,     6,     0,   335,     0,
   229,   209,   335,     0,     0,    76,   203,   335,   209,   335,
   209,   335,   204,   231,   210,   229,   211,     6,     0,   335,
     0,   232,   209,   335,     0,     0,    77,   203,   335,   209,
   335,   209,   335,   204,   234,   210,   232,   211,     6,     0,
   335,     0,   235,   209,   335,     0,     0,    78,   203,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   204,   237,   210,   235,   211,     6,     0,   335,     0,   238,
   209,   335,     0,     0,    79,   203,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   204,   240,   210,
   238,   211,     6,     0,   335,     0,   241,   209,   335,     0,
     0,    80,   203,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   204,   243,   210,   241,   211,     6,
     0,   335,     0,   244,   209,   335,     0,     0,    81,   203,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   204,   246,   210,
   244,   211,     6,     0,   335,     0,   247,   209,   335,     0,
     0,    82,   203,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   204,   249,   210,   247,   211,     6,     0,   335,     0,   250,
   209,   335,     0,     0,    83,   203,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   204,   252,   210,   250,   211,     6,     0,
   335,     0,   253,   209,   335,     0,     0,    84,   203,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   204,   255,   210,   253,   211,     6,     0,   335,
     0,   256,   209,   335,     0,     0,    85,   203,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   204,   258,   210,   256,   211,     6,     0,   335,     0,
   259,   209,   335,     0,     0,    86,   203,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   204,   261,   210,   259,   211,     6,     0,   335,     0,   262,
   209,   335,     0,     0,    87,   203,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   204,
   264,   210,   262,   211,     6,     0,   335,     0,   265,   209,
   335,     0,     0,    88,   203,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   204,   267,
   210,   265,   211,     6,     0,   335,     0,   268,   209,   335,
     0,     0,    89,   203,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   204,   270,   210,
   268,   211,     6,     0,   335,     0,   271,   209,   335,     0,
     0,    90,   203,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   204,   273,   210,   271,   211,     6,     0,   335,     0,   274,
   209,   335,     0,     0,    91,   203,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   204,   276,   210,   274,   211,     6,     0,
   335,     0,   277,   209,   335,     0,     0,    92,   203,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   204,   279,   210,   277,
   211,     6,     0,   335,     0,   280,   209,   335,     0,     0,
    93,   203,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   204,   282,   210,
   280,   211,     6,     0,   335,     0,   283,   209,   335,     0,
     0,    94,   203,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   204,   285,
   210,   283,   211,     6,     0,   335,     0,   286,   209,   335,
     0,     0,    95,   203,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   204,
   288,   210,   286,   211,     6,     0,   335,     0,   289,   209,
   335,     0,     0,    96,   203,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   204,   291,   210,   289,   211,     6,
     0,   335,     0,   292,   209,   335,     0,     0,    97,   203,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   209,
   335,   209,   335,   209,   335,   209,   335,   209,   335,   204,
   294,   210,   292,   211,     6,     0,   335,     0,   295,   209,
   335,     0,     0,    98,   203,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   204,   297,   210,   295,   211,     6,
     0,   349,     0,   298,   209,   349,     0,     0,    99,   203,
   335,   209,   335,   209,   335,   204,   300,   210,   298,   211,
     6,     0,   349,     0,   301,   209,   349,     0,     0,   100,
   203,   335,   209,   335,   209,   335,   209,   335,   204,   303,
   210,   301,   211,     6,     0,   101,   210,   342,   211,   210,
   342,   211,     6,     0,   335,     0,   305,   209,   335,     0,
   102,   210,   305,   211,     6,     0,     7,     0,   178,     0,
   179,     0,   180,     0,   181,     0,   199,     0,   200,     0,
     4,   307,   335,     6,     0,     4,   205,   335,   206,   307,
   335,     6,     0,     4,   205,   210,   345,   211,   206,   307,
   343,     6,     0,     4,   205,   206,     7,   343,     6,     0,
     4,   308,     6,     0,     4,   205,   335,   206,   308,     6,
     0,     4,   207,     4,     7,   349,     6,     0,     4,   205,
   335,   206,   207,     4,     7,   349,     6,     0,     4,   207,
     4,   307,   335,     6,     0,     4,   205,   335,   206,   207,
     4,   307,   335,     6,     0,     4,   207,     4,   308,     6,
     0,     4,   205,   335,   206,   207,     4,   308,     6,     0,
     4,   207,   111,   207,     4,     7,   346,     6,     0,     4,
   205,   335,   206,   207,   111,   207,     4,     7,   346,     6,
     0,     4,   207,   112,     7,   347,     6,     0,     4,   205,
   335,   206,   207,   112,     7,   347,     6,     0,    60,   203,
     4,   204,   207,     4,     7,   335,     6,     0,    60,   203,
     4,   204,   207,     4,     7,   349,     6,     0,    40,   203,
   335,   204,     7,   337,     6,     0,    56,    40,   203,   335,
   204,     7,   343,     6,     0,    73,    40,   343,     7,   210,
   335,   209,   335,   209,   335,   211,     6,     0,    47,    48,
   343,     7,   335,     6,     0,    43,   203,   335,   204,     7,
   343,     6,     0,    45,   203,   335,   204,     7,   343,     6,
     0,    41,   203,   335,   204,     7,   343,     6,     0,    41,
   203,   335,   204,     7,   343,    51,   337,     6,     0,    42,
   203,   335,   204,     7,   343,     6,     0,    42,   203,   335,
   204,     7,   343,    51,   337,     6,     0,    49,   203,   335,
   204,     7,   210,   335,   209,   335,   209,     5,   209,     5,
   209,     5,   211,     6,     0,   104,   203,   335,   204,     7,
   343,     6,     0,   105,   203,   335,   204,     7,   343,     6,
     0,   106,   203,   335,   204,     7,   343,   110,   343,   107,
   335,     6,     0,    43,    68,   203,   335,   204,     7,   343,
     6,     0,    73,    43,   343,     7,   210,   335,   209,   335,
   209,   335,   211,     6,     0,    56,    43,   203,   335,   204,
     7,   343,     6,     0,    51,    44,   203,   335,   204,     7,
   343,     6,     0,    52,    44,   203,   335,   204,     7,   343,
     6,     0,   122,    44,   203,   335,   204,     7,   210,   335,
   209,   343,   211,     6,     0,    61,    44,   203,   335,   204,
     7,   210,   335,   209,   335,   211,   343,   343,     6,     0,
    61,    44,   210,   335,   211,     7,   210,   335,   209,   335,
   211,   343,   343,     6,     0,    53,    44,   203,   335,   204,
     7,   203,   335,   209,   335,   204,   343,   343,     6,     0,
   106,    44,   108,   109,   203,   335,   204,     7,   341,   110,
   210,   343,   209,   343,   211,   107,   210,   335,   209,   335,
   211,     6,     0,   106,    44,   203,   335,   204,     7,   341,
   110,   210,   343,   209,   343,   211,   107,   210,   335,   209,
   335,   211,     6,     0,    44,    68,   203,   335,   204,     7,
   343,     6,     0,    56,    44,   203,   335,   204,     7,   343,
     6,     0,    55,    46,   203,   335,   204,     7,   343,     6,
     0,    46,   203,   335,   204,     7,   343,     6,     0,    56,
    46,   203,   335,   204,     7,   343,     6,     0,    63,   337,
   210,   312,   211,     0,    62,   210,   337,   209,   337,   209,
   335,   211,   210,   312,   211,     0,    64,   337,   210,   312,
   211,     0,    65,   210,   337,   209,   335,   211,   210,   312,
   211,     0,   314,     0,   313,     0,   311,     0,     0,   313,
   310,     0,   313,    40,   210,   345,   211,     6,     0,   313,
    43,   210,   345,   211,     6,     0,   313,    44,   210,   345,
   211,     6,     0,   313,    46,   210,   345,   211,     6,     0,
    67,   210,   313,   211,     0,    67,     4,   205,   335,   206,
     6,     0,    70,   210,   313,   211,     0,    70,     4,   205,
   335,   206,     6,     0,    70,     4,     6,     0,    70,     4,
     4,     6,     0,   111,   346,   210,   313,   211,     0,   123,
   349,     6,     0,   124,   349,     6,     0,   123,   210,   313,
   211,     0,   124,   210,   313,   211,     0,     4,   349,     6,
     0,     4,     4,   205,   335,   206,   349,     6,     0,     4,
   335,     6,     0,    60,   203,     4,   204,   207,     4,     6,
     0,   103,     4,     6,     0,   118,     6,     0,    37,     6,
     0,    37,   210,   335,   209,   335,   209,   335,   209,   335,
   209,   335,   209,   335,   211,     6,     0,    38,     6,     0,
   113,   203,   335,     8,   335,   204,     0,   113,   203,   335,
     8,   335,     8,   335,   204,     0,   113,     4,   114,   210,
   335,     8,   335,   211,     0,   113,     4,   114,   210,   335,
     8,   335,     8,   335,   211,     0,   115,     0,   121,     4,
     0,   119,     0,   120,     4,     6,     0,   116,   203,   335,
   204,     0,   117,     0,    66,    40,   210,   335,   209,   337,
   211,     6,     0,    66,    40,   210,   335,   209,   337,   209,
   337,   209,   335,   211,     6,     0,    66,    40,   210,   335,
   209,   337,   209,   337,   209,   337,   209,   335,   211,     6,
     0,     0,    66,    40,   210,   335,   209,   337,   211,   321,
   210,   330,   211,     6,     0,     0,    66,    40,   210,   335,
   209,   337,   209,   337,   209,   335,   211,   322,   210,   330,
   211,     6,     0,     0,    66,    40,   210,   335,   209,   337,
   209,   337,   209,   337,   209,   335,   211,   323,   210,   330,
   211,     6,     0,    66,    43,   210,   335,   209,   337,   211,
     6,     0,    66,    43,   210,   335,   209,   337,   209,   337,
   209,   335,   211,     6,     0,    66,    43,   210,   335,   209,
   337,   209,   337,   209,   337,   209,   335,   211,     6,     0,
     0,    66,    43,   210,   335,   209,   337,   211,   324,   210,
   330,   211,     6,     0,     0,    66,    43,   210,   335,   209,
   337,   209,   337,   209,   335,   211,   325,   210,   330,   211,
     6,     0,     0,    66,    43,   210,   335,   209,   337,   209,
   337,   209,   337,   209,   335,   211,   326,   210,   330,   211,
     6,     0,    66,    44,   210,   335,   209,   337,   211,     6,
     0,    66,    44,   210,   335,   209,   337,   209,   337,   209,
   335,   211,     6,     0,    66,    44,   210,   335,   209,   337,
   209,   337,   209,   337,   209,   335,   211,     6,     0,     0,
    66,    44,   210,   335,   209,   337,   211,   327,   210,   330,
   211,     6,     0,     0,    66,    44,   210,   335,   209,   337,
   209,   337,   209,   335,   211,   328,   210,   330,   211,     6,
     0,     0,    66,    44,   210,   335,   209,   337,   209,   337,
   209,   337,   209,   335,   211,   329,   210,   330,   211,     6,
     0,   331,     0,   330,   331,     0,    74,   210,   343,   209,
   343,   209,   343,   211,     6,     0,    74,   210,   343,   209,
   343,   211,     6,     0,    69,     6,     0,    54,    43,   343,
     7,   335,     6,     0,    54,    43,   343,     7,   335,    57,
    59,   335,     6,     0,    54,    43,   343,     7,   335,    57,
    58,   335,     6,     0,    54,    44,   210,   335,   211,     7,
   343,     6,     0,    50,    44,   210,   335,   211,     7,   343,
     6,     0,    54,    46,   210,   335,   211,     7,   343,     6,
     0,    69,    44,   343,     7,   335,     6,     0,    69,    44,
   343,     6,     0,    71,     6,     0,    72,     6,     0,   129,
     0,   130,     0,   131,     0,   132,     0,   133,     0,   336,
     0,   203,   335,   204,     0,   193,   335,     0,   192,   335,
     0,   198,   335,     0,   335,   193,   335,     0,   335,   192,
   335,     0,   335,   194,   335,     0,   335,   195,   335,     0,
   335,   196,   335,     0,   335,   202,   335,     0,   335,   188,
   335,     0,   335,   190,   335,     0,   335,   189,   335,     0,
   335,   191,   335,     0,   335,   185,   335,     0,   335,   186,
   335,     0,   335,   184,   335,     0,   335,   183,   335,     0,
   335,   182,   335,     8,   335,     0,    12,   203,   335,   204,
     0,    13,   203,   335,   204,     0,    14,   203,   335,   204,
     0,    15,   203,   335,   204,     0,    16,   203,   335,   204,
     0,    17,   203,   335,   204,     0,    18,   203,   335,   204,
     0,    19,   203,   335,   204,     0,    20,   203,   335,   204,
     0,    22,   203,   335,   204,     0,    23,   203,   335,   209,
   335,   204,     0,    24,   203,   335,   204,     0,    25,   203,
   335,   204,     0,    26,   203,   335,   204,     0,    27,   203,
   335,   204,     0,    28,   203,   335,   204,     0,    29,   203,
   335,   204,     0,    30,   203,   335,   209,   335,   204,     0,
    31,   203,   335,   209,   335,   204,     0,    32,   203,   335,
   209,   335,   204,     0,    21,   203,   335,   204,     0,    12,
   205,   335,   206,     0,    13,   205,   335,   206,     0,    14,
   205,   335,   206,     0,    15,   205,   335,   206,     0,    16,
   205,   335,   206,     0,    17,   205,   335,   206,     0,    18,
   205,   335,   206,     0,    19,   205,   335,   206,     0,    20,
   205,   335,   206,     0,    22,   205,   335,   206,     0,    23,
   205,   335,   209,   335,   206,     0,    24,   205,   335,   206,
     0,    25,   205,   335,   206,     0,    26,   205,   335,   206,
     0,    27,   205,   335,   206,     0,    28,   205,   335,   206,
     0,    29,   205,   335,   206,     0,    30,   205,   335,   209,
   335,   206,     0,    31,   205,   335,   209,   335,   206,     0,
    32,   205,   335,   209,   335,   206,     0,    21,   205,   335,
   206,     0,     3,     0,     9,     0,    10,     0,    11,     0,
     4,     0,     4,   205,   335,   206,     0,   208,     4,   205,
   206,     0,     4,   308,     0,     4,   205,   335,   206,   308,
     0,     4,   207,     4,     0,     4,   205,   335,   206,   207,
     4,     0,     4,   207,     4,   308,     0,     4,   205,   335,
   206,   207,     4,   308,     0,   125,   203,     5,   209,   335,
   204,     0,   338,     0,   193,   337,     0,   192,   337,     0,
   337,   193,   337,     0,   337,   192,   337,     0,   210,   335,
   209,   335,   209,   335,   209,   335,   209,   335,   211,     0,
   210,   335,   209,   335,   209,   335,   209,   335,   211,     0,
   210,   335,   209,   335,   209,   335,   211,     0,   203,   335,
   209,   335,   209,   335,   204,     0,     0,   203,   340,   204,
     0,     5,     0,   340,   209,     5,     0,     0,   210,   342,
   211,     0,   203,   342,   204,     0,   343,     0,   342,   209,
   343,     0,   335,     0,   344,     0,   210,   345,   211,     0,
   193,   210,   345,   211,     0,   335,     8,   335,     0,   335,
     8,   335,     8,   335,     0,    40,   210,   335,   211,     0,
   311,     0,   314,     0,   320,     0,     4,   205,   206,     0,
   193,     4,   205,   206,     0,     4,   205,   210,   345,   211,
   206,     0,   193,     4,   205,   210,   345,   211,   206,     0,
   335,     0,   344,     0,   345,   209,   335,     0,   345,   209,
   344,     0,   210,   335,   209,   335,   209,   335,   209,   335,
   211,     0,   210,   335,   209,   335,   209,   335,   211,     0,
     4,     0,     4,   207,   111,   207,     4,     0,   210,   348,
   211,     0,     4,   205,   335,   206,   207,   112,     0,   346,
     0,   348,   209,   346,     0,     5,     0,    39,     0,    35,
   203,   349,   209,   349,   204,     0,    36,   203,   349,   204,
     0,    34,   203,   349,   204,     0,    34,   203,   349,   209,
   345,   204,     0,    34,   203,     4,   207,     4,   204,     0,
    34,   203,     4,   205,   335,   206,   207,     4,   204,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   160,   162,   163,   164,   169,   171,   174,   176,   179,   186,
   199,   213,   215,   218,   220,   221,   224,   230,   235,   236,
   237,   240,   244,   247,   253,   258,   264,   272,   277,   281,
   287,   292,   296,   301,   305,   308,   313,   317,   321,   325,
   330,   334,   337,   341,   345,   349,   353,   357,   361,   364,
   368,   371,   375,   378,   385,   387,   390,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
   407,   413,   430,   438,   447,   455,   456,   457,   458,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   485,   488,   492,   498,   504,   507,   511,
   518,   525,   528,   532,   539,   546,   549,   553,   562,   569,
   572,   576,   585,   592,   595,   599,   608,   615,   618,   622,
   635,   642,   645,   649,   662,   669,   672,   676,   689,   696,
   699,   703,   717,   724,   727,   731,   745,   752,   755,   759,
   773,   780,   783,   787,   801,   808,   811,   815,   829,   836,
   839,   843,   857,   864,   867,   871,   895,   902,   905,   909,
   933,   940,   943,   947,   971,   978,   981,   985,  1004,  1011,
  1014,  1018,  1037,  1044,  1047,  1051,  1070,  1077,  1080,  1084,
  1102,  1109,  1112,  1116,  1134,  1141,  1144,  1148,  1166,  1173,
  1179,  1186,  1194,  1200,  1206,  1213,  1221,  1227,  1235,  1238,
  1242,  1250,  1252,  1253,  1254,  1255,  1258,  1260,  1263,  1298,
  1337,  1391,  1408,  1419,  1438,  1452,  1469,  1495,  1522,  1536,
  1553,  1567,  1584,  1604,  1627,  1637,  1652,  1672,  1688,  1707,
  1726,  1744,  1762,  1780,  1806,  1824,  1850,  1870,  1894,  1918,
  1944,  1961,  1979,  1998,  2017,  2056,  2081,  2101,  2120,  2137,
  2156,  2175,  2191,  2210,  2227,  2244,  2264,  2270,  2275,  2280,
  2287,  2289,  2290,  2293,  2298,  2302,  2318,  2334,  2350,  2370,
  2384,  2395,  2405,  2415,  2425,  2443,  2457,  2466,  2472,  2483,
  2496,  2541,  2556,  2572,  2582,  2593,  2597,  2601,  2605,  2616,
  2633,  2649,  2675,  2702,  2734,  2741,  2746,  2752,  2756,  2764,
  2783,  2799,  2815,  2820,  2836,  2841,  2857,  2862,  2880,  2903,
  2926,  2949,  2954,  2977,  2982,  3005,  3010,  3036,  3059,  3082,
  3105,  3110,  3133,  3139,  3162,  3168,  3193,  3197,  3202,  3229,
  3253,  3261,  3280,  3298,  3316,  3343,  3369,  3395,  3409,  3427,
  3432,  3441,  3443,  3444,  3445,  3446,  3449,  3451,  3452,  3453,
  3454,  3455,  3456,  3457,  3458,  3465,  3466,  3467,  3468,  3469,
  3470,  3471,  3472,  3473,  3474,  3475,  3476,  3477,  3478,  3479,
  3480,  3481,  3482,  3483,  3484,  3485,  3486,  3487,  3488,  3489,
  3490,  3491,  3492,  3493,  3494,  3495,  3496,  3498,  3499,  3500,
  3501,  3502,  3503,  3504,  3505,  3506,  3507,  3508,  3509,  3510,
  3511,  3512,  3513,  3514,  3515,  3516,  3517,  3518,  3523,  3528,
  3529,  3530,  3534,  3547,  3567,  3581,  3594,  3617,  3635,  3653,
  3671,  3689,  3696,  3701,  3705,  3709,  3713,  3719,  3724,  3728,
  3732,  3738,  3742,  3747,  3751,  3756,  3760,  3764,  3770,  3776,
  3783,  3789,  3793,  3797,  3808,  3815,  3826,  3846,  3856,  3866,
  3878,  3895,  3914,  3938,  3966,  3972,  3976,  3980,  3992,  3997,
  4009,  4016,  4037,  4042,  4056,  4062,  4068,  4073,  4081,  4089,
  4103,  4107,  4126,  4142
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers",
"tScalarPoint","tVectorPoint","tTensorPoint","tScalarLine","tVectorLine","tTensorLine",
"tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle",
"tTensorQuadrangle","tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron",
"tScalarHexahedron","tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism",
"tTensorPrism","tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D",
"tText3D","tInterpolationScheme","tTime","tCombine","tBSpline","tBezier","tNurbs",
"tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn","tEndFor",
"tIf","tEndIf","tExit","tReturn","tCall","tFunction","tTrimmed","tShow","tHide",
"tGetValue","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter","tLoopSTL",
"tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","SignedDouble","StlFormatItems","StlFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeoFormatItems",
"GeoFormatItem","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarQuadrangleValues",
"ScalarQuadrangle","@10","VectorQuadrangleValues","VectorQuadrangle","@11","TensorQuadrangleValues",
"TensorQuadrangle","@12","ScalarTetrahedronValues","ScalarTetrahedron","@13",
"VectorTetrahedronValues","VectorTetrahedron","@14","TensorTetrahedronValues",
"TensorTetrahedron","@15","ScalarHexahedronValues","ScalarHexahedron","@16",
"VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues","TensorHexahedron",
"@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues","VectorPrism",
"@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues","ScalarPyramid",
"@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues","TensorPyramid",
"@24","Text2DValues","Text2D","@25","Text3DValues","Text3D","@26","InterpolationMatrix",
"TimeValues","Time","NumericAffectation","NumericIncrement","Affectation","Shape",
"Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   212,   212,   212,   212,   213,   213,   214,   214,   215,   215,
   215,   216,   216,   217,   217,   217,   218,   218,   218,   218,
   218,   219,   219,   219,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   221,   221,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   223,   223,   224,   224,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   226,   226,   228,   227,   229,   229,   231,
   230,   232,   232,   234,   233,   235,   235,   237,   236,   238,
   238,   240,   239,   241,   241,   243,   242,   244,   244,   246,
   245,   247,   247,   249,   248,   250,   250,   252,   251,   253,
   253,   255,   254,   256,   256,   258,   257,   259,   259,   261,
   260,   262,   262,   264,   263,   265,   265,   267,   266,   268,
   268,   270,   269,   271,   271,   273,   272,   274,   274,   276,
   275,   277,   277,   279,   278,   280,   280,   282,   281,   283,
   283,   285,   284,   286,   286,   288,   287,   289,   289,   291,
   290,   292,   292,   294,   293,   295,   295,   297,   296,   298,
   298,   300,   299,   301,   301,   303,   302,   304,   305,   305,
   306,   307,   307,   307,   307,   307,   308,   308,   309,   309,
   309,   309,   309,   309,   309,   309,   309,   309,   309,   309,
   309,   309,   309,   309,   309,   309,   310,   310,   310,   310,
   310,   310,   310,   310,   310,   310,   310,   310,   310,   310,
   310,   310,   310,   310,   310,   310,   310,   310,   310,   310,
   310,   310,   310,   310,   310,   310,   311,   311,   311,   311,
   312,   312,   312,   313,   313,   313,   313,   313,   313,   314,
   314,   315,   315,   315,   315,   316,   317,   317,   317,   317,
   318,   318,   318,   318,   318,   318,   318,   318,   318,   319,
   319,   319,   319,   319,   319,   319,   319,   319,   319,   320,
   320,   320,   321,   320,   322,   320,   323,   320,   320,   320,
   320,   324,   320,   325,   320,   326,   320,   320,   320,   320,
   327,   320,   328,   320,   329,   320,   330,   330,   331,   331,
   331,   332,   332,   332,   332,   332,   332,   332,   332,   333,
   333,   334,   334,   334,   334,   334,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   337,   337,   337,   337,   337,   338,   338,   338,
   338,   339,   339,   340,   340,   341,   341,   341,   342,   342,
   343,   343,   343,   343,   344,   344,   344,   344,   344,   344,
   344,   344,   344,   344,   345,   345,   345,   345,   346,   346,
   346,   346,   347,   347,   348,   348,   349,   349,   349,   349,
   349,   349,   349,   349
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    14,    22,
    20,     8,     8,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     6,     6,     6,     6,     4,
     6,     4,     6,     3,     4,     5,     3,     3,     4,     4,
     3,     7,     3,     7,     3,     2,     2,    15,     2,     6,
     8,     8,    10,     1,     2,     1,     3,     4,     1,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     1,     2,     9,     7,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     4,     4,     2,     5,     3,     6,     4,
     7,     6,     1,     2,     2,     3,     3,    11,     9,     7,
     7,     0,     3,     1,     3,     0,     3,     3,     1,     3,
     1,     1,     3,     4,     3,     5,     4,     1,     1,     1,
     3,     4,     6,     7,     1,     1,     3,     3,     9,     7,
     1,     5,     3,     6,     1,     3,     1,     1,     6,     4,
     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,     0,   309,     0,   306,     0,     0,     0,     0,
     0,    56,    58,    57,    59,    60,    61,    62,    63,    64,
    65,    70,    69,    66,    67,    68,     0,     0,    17,    18,
    20,    19,    21,   442,   442,     0,   419,   423,   477,   212,
   420,   421,   422,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   478,     0,   213,
   214,   215,   216,     0,     0,     0,   217,   218,     0,     0,
     0,     0,     0,     0,     0,   357,     0,     0,   297,     0,
   299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   433,     0,     0,     0,     0,     0,     0,   274,     0,
     0,   274,   350,   351,     0,     0,     0,     0,     0,     0,
     0,   471,     0,     0,     0,     0,     0,   296,     0,   305,
     0,   477,   274,     0,   274,     0,     5,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   426,     0,    75,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   423,   360,   359,   361,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   223,   293,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   291,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   423,     0,     0,     0,   458,
   459,   460,   451,     0,   452,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   435,   434,     0,     0,     0,     0,   274,   274,
     0,     0,     0,     0,     0,     0,     0,     0,   284,     0,
     0,     0,     0,   295,     0,     0,     0,     0,     0,     0,
     0,   274,     0,     0,     0,   307,     0,     0,   287,     0,
   288,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   444,     0,     0,     0,     0,     0,   428,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   358,     0,     0,   465,   466,     0,     0,   212,     0,     0,
     0,     0,     0,   219,     0,   375,   374,   372,   373,   368,
   370,   369,   371,   363,   362,   364,   365,   366,   367,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   423,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   437,   436,   273,     0,
   272,   271,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,   275,   349,     0,   285,     0,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   308,     0,   289,   290,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   443,     0,     0,    23,
     0,   424,   430,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   377,   398,   378,   399,   379,   400,   380,   401,   381,
   402,   382,   403,   383,   404,   384,   405,   385,   406,   397,
   418,   386,   407,     0,     0,   388,   409,   389,   410,   390,
   411,   391,   412,   392,   413,   393,   414,     0,     0,     0,
     0,     0,     0,     0,     0,   481,     0,     0,   480,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   229,
     0,     0,     0,     0,   425,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   461,     0,     0,
     0,     0,   453,   455,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   267,   269,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   286,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   445,     0,   442,     0,   427,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   424,   222,   467,   468,     0,     0,     0,     0,     0,   224,
   225,   227,     0,     0,   475,     0,   233,   376,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   457,
   462,     0,   454,     0,   240,     0,     0,     0,     0,     0,
   342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   281,
     0,     0,     0,     0,   348,   283,     0,     0,     0,     0,
     0,   446,     0,   472,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   352,   353,   354,   355,   356,     0,     0,
     0,     0,     0,     0,     0,    22,     0,   429,   292,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   449,     0,   209,
   387,   408,   394,   415,   395,   416,   396,   417,     0,   483,
   482,   479,   432,     0,   212,     0,     0,     0,     0,   220,
     0,     0,     0,   473,    72,     0,   237,   243,     0,   245,
     0,     0,   241,     0,   242,   265,     0,     0,   456,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   294,     0,     0,     0,     0,     0,     0,
   274,     0,   313,     0,   322,     0,   331,     0,     0,     0,
     0,     0,     0,   248,   249,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   442,   431,    74,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   230,     0,     0,   231,     0,   476,     0,     0,
     0,   251,   262,   463,     0,     0,   346,   254,   255,     0,
     0,     0,   345,   347,   264,   238,   253,   263,   266,     0,
     0,     0,     0,     0,   441,     0,   440,     0,     0,   310,
     0,     0,   319,     0,     0,   328,     0,   276,   277,   278,
   279,     0,     0,   446,     0,     0,     0,     0,     0,   470,
     0,   302,   301,     0,     0,     0,     0,     0,    25,     0,
    34,     0,    38,     0,    32,     0,     0,    37,     0,    42,
    40,     0,     0,     0,     0,     0,     0,    49,     0,     0,
     0,     0,     0,    54,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   450,     0,   210,   211,     0,   221,   226,   228,
     0,   234,     0,     0,   244,   246,   464,     0,     0,   344,
   343,   235,   236,     0,     0,   274,     0,   270,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   448,   447,     0,
     0,     0,     0,     0,     0,     0,   446,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   484,     0,   474,     0,     0,     0,
     0,     0,     0,     0,   439,     0,     0,     0,     0,     0,
     0,     0,     0,   337,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   469,   303,     0,     0,    39,
     0,     0,     0,     0,    29,     0,    35,     0,    41,    30,
    43,     0,    46,     0,    50,    51,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   232,     0,
     0,     0,     0,     0,   268,     0,     0,   315,     0,   341,
     0,     0,   338,   324,     0,     0,   333,     0,     0,     0,
     0,     0,     0,   250,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   106,   110,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   202,     0,   208,     0,     0,     0,     0,     0,
   438,   311,     0,     0,     0,   314,   320,     0,     0,   323,
   329,     0,     0,   332,   239,   252,     0,     0,   256,     0,
     0,     0,     0,     0,    33,    36,    44,     0,    45,    52,
    47,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   317,     0,     0,   326,     0,   335,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   206,     0,     0,   259,   257,   258,
     0,   312,     0,     0,     0,   321,     0,     0,   330,     0,
     0,     0,     0,     0,     0,    28,    31,     0,     0,     0,
   104,     0,   108,     0,   112,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   200,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   316,     0,     0,
   340,   325,     0,   334,     0,     0,     0,     0,     0,     0,
    48,    24,   105,   107,   109,   111,   113,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
   203,     0,   204,   247,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   118,   122,   126,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   318,   339,   327,   336,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   205,   207,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   261,    10,     0,     0,     0,
   116,     0,   120,     0,   124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,     0,    26,   117,   119,   121,   123,   125,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   130,   134,
   138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   128,     0,   132,     0,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   129,
   131,   133,   135,   137,   139,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   142,   146,   150,   154,   158,   162,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   140,     0,
   144,     0,   148,     0,   152,     0,   156,     0,   160,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   141,
   143,   145,   147,   149,   151,   153,   155,   157,   159,   161,
   163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   190,   194,   198,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   188,     0,   192,     0,   196,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   189,   191,   193,
   195,   197,   199,     0,     0,     0,   178,   182,   186,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   176,     0,   180,     0,   184,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   177,   179,   181,   183,   185,   187,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   166,   170,   174,     0,
     0,     0,     0,     0,     0,     0,   164,     0,   168,     0,
   172,     0,     0,     0,     0,     0,     0,   165,   167,   169,
   171,   173,   175,     0,     0,     0
};

static const short yydefgoto[] = {  2394,
   219,     2,     9,     3,    19,    20,    21,    22,     4,    72,
    73,    74,   452,  1710,   674,  1613,  1712,   675,  1614,  1714,
   676,  1615,  1930,   677,  1876,  1932,   678,  1877,  1934,   679,
  1878,  2066,   680,  2028,  2068,   681,  2029,  2070,   682,  2030,
  2178,   683,  2148,  2180,   684,  2149,  2182,   685,  2150,  2184,
   686,  2151,  2186,   687,  2152,  2188,   688,  2153,  2376,   689,
  2370,  2378,   690,  2371,  2380,   691,  2372,  2325,   692,  2313,
  2327,   693,  2314,  2329,   694,  2315,  2274,   695,  2256,  2276,
   696,  2257,  2278,   697,  2258,  1737,   698,  1637,  1832,   699,
  1739,   700,  1059,   701,   143,   256,    75,   584,   350,   570,
   571,   351,    79,    80,    81,    82,    83,   352,  1251,  1583,
  1693,  1254,  1588,  1697,  1257,  1592,  1700,  1443,  1444,    85,
    86,  1019,   353,   146,   373,   182,   251,   445,  1139,  1057,
  1058,   355,   506,   204,   764,   926,   147
};

static const short yypact[] = {  3175,
    30,   275,   279,  3577,-32768,-32768,-32768,  -133,-32768,    75,
   109,   128,   149,   167,   200,   -84,   -36,    26,-32768,-32768,
-32768,-32768,  2505,   110,    12,   364,   147,   170,   173,   -41,
   314,   189,   231,   168,   307,   402,   434,   435,   438,   424,
   442,   573,   308,   473,   221,   161,   161,   334,   148,     7,
   527,     8,   570,   579,   323,   587,   396,   404,     1,    10,
    16,-32768,   429,-32768,   636,-32768,   696,   703,   653,    14,
    20,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    18,  2627,-32768,-32768,
-32768,-32768,-32768,   510,   510,   717,-32768,  -127,    11,-32768,
-32768,-32768,-32768,   251,   257,   284,   317,   344,   347,   359,
   367,   381,   385,   399,   403,   449,   450,   453,   456,   457,
   460,   463,   464,   467,   525,   526,   552,-32768,   558,-32768,
-32768,-32768,-32768,  2862,  2862,  2862,-32768,-32768,  2862,   809,
    40,   740,  2862,   748,   343,-32768,   781,   788,-32768,  2862,
-32768,  2862,  2862,  2862,   591,  2862,   594,  2862,  2862,  1241,
  2862,   599,   613,   639,   671,  1241,   670,   690,   694,   714,
   729,   736,   741,   925,  -100,   161,   161,   161,  2862,  2862,
  -117,-32768,   -92,   161,   733,   750,   751,   745,-32768,  1241,
    79,-32768,-32768,-32768,  1241,  1241,   964,  2862,  2862,   -66,
  2862,   768,  2862,   784,   878,  2862,  2862,-32768,   989,-32768,
   796,-32768,-32768,   991,-32768,   994,-32768,  1000,    18,   802,
   805,   806,   810,   811,   813,   815,   822,   832,   833,   834,
   835,   836,   842,   844,   860,   861,   862,   863,   864,   867,
   868,   869,   870,   871,   872,   873,   874,   876,   877,  1036,
   875,   882,   879,  2862,  1083,-32768,   161,-32768,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
    53,    63,    63,  1084,   276,   888,   888,   888, 11578,  1088,
  2711, 10878,    15,   884,  1089,   892,   492,-32768,-32768,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,-32768,   -81,  3266, 11601, 11624, 11647,
  2862, 11670,  2862, 11693, 11716,   341,   889,  2418,  2711,-32768,
-32768,-32768,  1579,  1091,-32768, 11739,  2862,  2862,  2862,  2862,
  1095,  2862,  2862,  2862,  2862,  2862,  2862,  2862,   897,  2862,
  2862,   -67,-32768,-32768,  3332,  3904,   161,   161,   559,   559,
   129,  2862,  2862,  2862,  2862,  2053,    88,  1097,-32768,  2862,
  2924,  1098,  1099,-32768, 11762, 11785,   995,  2862, 11808,   996,
  3926,-32768,   898,  1616, 11831,-32768,  2862,  3076,-32768,  3308,
-32768,-32768,    18,  1106,  1107,  1108,  1109,  1110,  1111,  1112,
  1113,  1114,  1117,  1118,  1120,  1121,  1123,  1124,  1126,  1127,
  1128,  1130,  1131,  1132,  1133,  1134,   968,  1139,  1140,  1141,
  1142,  1146,  1145,-32768,   -60,  1148,  1149,  1177, 10903,  -130,
   -52,  3402, 11854, 10928, 11877, 10953, 11900, 10978, 11923, 11003,
 11946, 11028, 11969, 11053, 11992, 11078, 12015, 11103, 12038, 11128,
 12061, 11153, 12084, 11178,  3948,  3970, 12107, 11203, 12130, 11228,
 12153, 11253, 12176, 11278, 12199, 11303, 12222, 11328,  3992,  4014,
  4036,  4058,  4080,  4102,   309,    -2,   942,   950,   974,  2862,
-32768,  1241,  3074,  1579,-32768,   409,   285,    63,  2862,  1179,
  1182,    13,   981,-32768,  1721,  1125,   546,   365,   365,   387,
   387,   387,   387,   -31,   -31,   888,   888,   888,   888,  1183,
  2711,  2862,  1181,  1184,  1185, 12245,  1186, 12268,  1187,  1188,
  1663,  2862,   398,  2711,   462,  2862,  2862,  1190,  1416, 12291,
 12314, 12337,  2862,  2300,  2363, 12360, 12383, 12406, 12429, 12452,
   983, 12475,  2623,   161,  2862,  2862,-32768,-32768,-32768,  1002,
  2884,-32768,  1003,  2862,  4124,  4146,  4168, 11353,   -89,   -44,
   -25,   -64,-32768,-32768,-32768,  2862,-32768, 11378,-32768,  1005,
  1006,  1210,  1212,  1017, 12498,  1214,  1015,  2862,  3331,  2862,
  2862,-32768, 12521,-32768,-32768,  1050,  1019,  1020,  1021,  1022,
  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1030,  1033,  1034,
  1038,  1040,  1065,  1066,  1085,  1086,  1090,  1092,  1093,  1103,
  1115,  1119,  1135,  1136,  1137,  1138,-32768,  1221,  1096,-32768,
  1143,    28,-32768,-32768,  1147,  1150,  1151,  1156,  1158,  1160,
  1161,  1164,  1165,  1166,  1168,  1169,  1171,  1199,  1200,  1201,
  1203,  1204,  1205,  1206,  1207,  1209,  1213,  1219,  1229,  1232,
  1082,  1087,  1287,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2862,  2862,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  1294,-32768,  2711,    63,-32768,  2862,
 11403,  1316,  2711,  1129,    42,  2862,  1323,  1324,   586,-32768,
  1326,  1144,    10,  1328,-32768,  2862,-32768,   124,  4190,   161,
  1241,  1241,  1330,  1241,  1332,  1241,  1241,-32768,  2711,  2962,
  2388,   480,-32768,  1776,   693,  1226,  1334,  1344,  1431,  1433,
   455,  1434,  1435,  1436,  1438,  1439,  1440,  1441,  1446,  1445,
  1447,   163,  4212,  4234,-32768,-32768,  3394,   161,   161,   161,
  1449,  2711,  2711,  2711,  2711,   720,  1450,  2862,  2862,  1241,
  1241,  2862,  1451,  1241,  1453,  4256,-32768,  1860,   311,  1452,
  1278,  1457,  2862,  2862,   161,  1458,  1459,  1269,  1461,  1463,
  1241,  1241,  1469,   161,  1479,  1480,  1241,  1241,  1481,  1482,
  1483,  1485,  1486,  1241,   498,  1241,  1487,  1488,  1489,  1492,
  1494,-32768,  1493,   510,  1496,-32768,  1495,  3468,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  1241,  2862,-32768, 12544, 11428, 12567,
 11453, 12590, 11478, 12613, 11503, 11528,  1288,   142,  1299, 12636,
   -39,-32768,  1579,-32768,    19,   415,  1284,  1491,   794,-32768,
-32768,-32768,    10,  2862,-32768,   481,-32768, 13487,  1498,  2862,
    17,    35,    45,  1241,  1500,  1241,  1501,  1502,   484,-32768,
-32768,  2711,-32768,  2862,-32768,  2862,  1241,  1241,  1241,  1306,
-32768,   272,  1241,  1241,  1241,  1241,  1241,  1241,  1241,   407,
  1300,  1301,  2862,  2862,  2862,  1302,  -132,  -102,   -87,-32768,
   487,   494,   495,   499,-32768,-32768,  4278,  4300,  1507,  1508,
 12659,     2,  1405,-32768,  2862,  2862,  2862,-32768,  1307,  1345,
  1310,  4322,  4344,   176,  1311,  1317,  1313,  1319,  1315,  1321,
  1318,  1341,   216,  1343,  1322,  1355,  1360,  1361,  1362,  1363,
  1364,  1366,  1373,-32768,-32768,-32768,-32768,-32768,  1367,  1369,
  1370,  1371,  1375,  1378,  1376,-32768,  1377,  -130,-32768,  1522,
  4366,  4388,  4410,  4432,  4454,  4476,  4498,  4520,  4542,  4564,
  4586,  4608,  4630,  4652,  4674,  4696,  4718,  4740,  4762,  4784,
  4806,  4828,  4850,  4872,  4894,  4916,   500,-32768,   503, 13487,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1381,-32768,
-32768,-32768,-32768,  1241,    63,  2862,  1583,  1587,    13,-32768,
  1586, 11553,    10,-32768,-32768,  4938,-32768,-32768,   161,-32768,
   161,  1588,-32768,  1597,-32768,-32768,  1407,   514, 13487,  4960,
  1608,  1610,  1613,  2862,  2862,  2862,  1615,  1617,  1622,  1623,
  1624,  1625,  1626,-32768,  2828,  2862,  2862,  3473, 12682,   763,
   559,   161,  1627,   161,  1628,   161,  1629,  1630,  1655,  1656,
  1658,  2862,  2862,-32768,-32768,  1661,  1241,  1241,  1512,  1241,
  1016,   205, 12705,  2862,    18,  1662,  2862,  1241,  1664,  1666,
  1690,  1503,  1692,   498,  1693,  1697,  2862,  1695,  1699,  1698,
  1701,  1700,   498,  2862,  2862,  2862,  1241,  1702,  1706,   498,
  2862,  1707,  1708,  1710,  2862,   510,-32768,-32768,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  1241,  1504,  2862,  1712,  1709,  1713,
  1714,   838,-32768,  1705,  1715,-32768,  1515,-32768,  2862,    98,
   102,-32768,-32768,-32768,  1499,  2862,-32768,-32768,-32768,  4982,
   866,  1094,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1235,
  1717,  5004,  5026,  1514,-32768,  2862,-32768,  1516,   165,-32768,
  1520,   210,-32768,  1521,   212,-32768,  1523,-32768,-32768,-32768,
-32768,  5048,  5070,     2,   228,   536,  1525,  1618,  2862,-32768,
  2862,-32768,-32768,  5092,    18,  1528,  5114,  1517,-32768,  1530,
-32768,  1557,-32768,  1533,-32768,  1567, 12728,-32768,  1568,-32768,
-32768,  1574,  1575, 12751,  5136, 12774,  1571,-32768,  1578,  1581,
  5158,  1577,  1585,-32768,  5180,  1582,  5202,  5224,  5246,  5268,
  5290,  5312,  5334,  5356,  5378,  5400,  5422,  5444,  5466,  5488,
  5510,  5532,  5554,  5576,  5598,  5620,  5642,  5664,  5686,  5708,
  5730,  5752,-32768,  1241, 13487,-32768,  1589,-32768,-32768,-32768,
    10,-32768,  1671,  5774,-32768,-32768,-32768,  5796,  2862,-32768,
-32768,-32768,-32768,  2862,  2862,   559,  1372,-32768,  2448,   384,
  2448,   384,  2448,   384,  2862,  2862,  1677,-32768,-32768,  1241,
  2862,  3520,  3544,  1241,    18,  1784,     2,   498,  1789,  2862,
  1788,   498,  1791,  1792,  1797,  1807,  1808,  2862,  1809,  1241,
  1813,  1814,  2862,  1818,  1816,  2862,  1837,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,   540,-32768,  1817,-32768,  2862,  1838, 12797,
  3568,  3592,  1633,  2862,-32768,  2448,  2448,  2862,  3616,   243,
  1839,  1636,   -22,-32768,  3640,   248,    -3,  3664,   250,    74,
  3688,  3712,  1637,  1639,  1285,-32768,-32768,  1638,  1679,-32768,
  1642,  1643,  1644,  5818,-32768,  1650,-32768,  1653,-32768,-32768,
-32768, 12820,-32768,  1649,-32768,-32768, 12843,  1659,-32768, 12866,
  1651, 12889, 12912, 12935,  5840,  5862,  5884,  5906,  5928,  5950,
  5972,  5994,  6016,  6038,  6060,  6082,  6104,  6126,  6148,  6170,
  6192,  6214,  6236,  6258,  6280, 12958,  6302,  1853,-32768,  6324,
  1665,  1241,  1241,  1241,-32768,  3736,  3067,  1856,  2862,-32768,
  1241,  1858,-32768,  1859,  2862,  1861,  1864,  2862,  1866,  1869,
  1871,  1241,  1241,-32768,  1872,    18,   498,   498,   498,   498,
  1873,  1874,  1896,   498,  1902,  1912,  1913,  1915,-32768,-32768,
-32768,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,-32768,  2862,-32768,  2862,  1916,  1241,  1241,  1241,
-32768,-32768,  1716,  3760,  1718,-32768,-32768,  1719,  3784,-32768,
-32768,  1720,  3808,-32768,-32768,-32768,  1722,  1711,-32768,    18,
  1724,  1726,  1733,  1735,-32768,-32768,-32768,  1754,-32768,-32768,
-32768,  1764,  1765,  1766,  1767,  6346,  6368,  6390,  6412,  6434,
  6456,  6478,  6500,  6522,  6544,  6566,  6588,  6610,  6632,  6654,
  6676,  6698,  6720,  6742,  6764,  6786,  1769, 12981,  3832,  1771,
  1918,  1919,  1922,   384,  1968,  1241,   384,  1975,   384,  1976,
  1241,  1876,    18,   498,   498,  1978,  1979,   498,  1981,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,    63,-32768,  1982,  1999,-32768,-32768,-32768,
    76,-32768,  1777,   541,   103,-32768,  1795,   105,-32768,  1796,
  1798,  1800,  1836,  1799,  1802,-32768,-32768,  1810,  1811,   548,
 13487,   551, 13487,   555, 13487,  6808,  6830,  6852,  6874,  6896,
  6918,  6940,  6962,  6984,  7006,  7028,  7050,  7072,  7094,  7116,
  7138,  7160,  7182,  7204,  7226,  7248,   556,-32768,  1803,-32768,
  1801,  2010,   384,  1241,  2011,  2012,   384,  2013,   384,  1914,
  2862,    18,   498,  1241,  2014,  2016,  2862,  2017,  2862,  2041,
  2862,  2051,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,    63,  2052,    63,  2054,-32768,   112,  1848,
-32768,-32768,   113,-32768,   258,  1851,  7270,    18,  1854,  1855,
-32768,-32768, 13487,-32768, 13487,-32768, 13487,-32768, 13004, 13027,
 13050,  7292,  7314,  7336,  7358,  7380,  7402,  7424,  7446,  7468,
  7490,  7512,  7534,  7556,  7578,  7600,  7622,  7644,  7666,-32768,
-32768,   574,-32768,-32768,  2060,  2062,  2064,  2080,  2862,  2862,
    18,   498,  1241,-32768,-32768,-32768,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,    63,  2081,-32768,-32768,-32768,-32768,
  7688,  3856,  1925,  1879,  1880,  1881,  1882,  1893,  7710,  7732,
  7754,  7776,  7798,  7820,  7842,  7864,  7886,  7908,  7930,  7952,
  7974,  7996,  8018,  8040,  8062,  8084,-32768,-32768,  2862,  2084,
  1930,  1241,   498,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  3880,-32768,-32768,  1901,  1907,   575,
 13487,   592, 13487,   593, 13487,  8106,  8128,  8150,  8172,  8194,
  8216,  8238,  8260,  8282,  8304,  8326,  8348,  8370,  8392,  8414,
  8436,  8458,  8480,  2106,  1241,  2107,  2862,  2118,  2862,  2119,
  2862,  2121,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
-32768,  1920,-32768, 13487,-32768, 13487,-32768, 13487,-32768, 13073,
 13096, 13119,  8502,  8524,  8546,  8568,  8590,  8612,  8634,  8656,
  8678,  8700,  8722,  8744,  8766,  8788,  8810,  1241,-32768,-32768,
-32768,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  1921,  1923,  1924,  1926,
  8832,  8854,  8876,  8898,  8920,  8942,  8964,  8986,  9008,  9030,
  9052,  9074,  9096,  9118,  9140,  1241,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  1928,   596, 13487,   597, 13487,   606,
 13487,  9162,  9184,  9206,  9228,  9250,  9272,  9294,  9316,  9338,
  9360,  9382,  9404,  9426,  9448,  9470,   498,  2862,  2122,  2862,
  2125,  2862,  2126,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  1931, 13487,
-32768, 13487,-32768, 13487,-32768, 13142, 13165, 13188, 13211, 13234,
 13257,  9492,  9514,  9536,  9558,  9580,  9602,  9624,  9646,  9668,
  2132,-32768,-32768,-32768,-32768,-32768,-32768,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,-32768,  1929,  1945,  1946,
  1950,  1951,  1952,  9690,  9712,  9734,  9756,  9778,  9800,  9822,
  9844,  9866,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,   634, 13487,   681,
 13487,   682, 13487,   687, 13487,   709, 13487,   715, 13487,  9888,
  9910,  9932,  9954,  9976,  9998, 10020, 10042, 10064,  2862,  2157,
  2862,  2158,  2862,  2159,  2862,  2160,  2862,  2161,  2862,  2162,
  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862,  2862, 13487,
-32768, 13487,-32768, 13487,-32768, 13487,-32768, 13487,-32768, 13487,
-32768, 10086, 10108, 10130, 10152, 10174, 10196, 13280, 13303, 13326,
  2862,  2862,  2862,  2862,  2862,  2862,-32768,-32768,-32768, 10218,
 10240, 10262, 10284, 10306, 10328,  1959,  1960,  1961,  2862,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2862, 10350, 10372, 10394,
 10416, 10438, 10460,   716, 13487,   719, 13487,   722, 13487,  2862,
  2862,  2862,  2862,  2862,  2862,  2862,  2166,  2862,  2167,  2862,
  2168, 10482, 10504, 10526, 13349, 13372, 13395, 13487,-32768, 13487,
-32768, 13487,-32768,  2862,  2862,  2862,-32768,-32768,-32768, 10548,
 10570, 10592,  1967,  1969,  1971,  2862,  2862,  2862,  2862,  2862,
  2862, 10614, 10636, 10658,   726, 13487,   727, 13487,   757, 13487,
  2862,  2862,  2862,  2862,  2177,  2862,  2179,  2862,  2181, 10680,
 10702, 10724, 13487,-32768, 13487,-32768, 13487,-32768,  2862,  2862,
  2862, 10746, 10768, 10790,  2862,  2862,  2862, 10812, 10834, 10856,
  2862,  2862,  2862, 13418, 13441, 13464,-32768,-32768,-32768,  1987,
  1988,  1989,  2862,  2862,  2862,   758, 13487,   762, 13487,   782,
 13487,  2862,  2194,  2862,  2197,  2862,  2199, 13487,-32768, 13487,
-32768, 13487,-32768,  2208,  2209,-32768
};

static const short yypgoto[] = {-32768,
  -135,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1566,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -306,   -17,-32768,  2207,    -1,  -375,
  -176,     6,-32768,-32768,-32768,-32768,-32768,  2210,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1332, -1412,-32768,
-32768, -1089,   -23,-32768,   234,-32768,   -91,-32768, -1230, -1109,
  1430,  -179,  -341,  -754,  1152,-32768,   -69
};


#define	YYLAST		13689


static const short yytable[] = {   145,
   214,   216,    77,   252,   573,   144,   509,   545,   925,    78,
   188,   191,   386,   202,   257,   391,   762,   149,   212,   205,
   217,   508,  1087,   155,   212,   100,   155,  1265,  1266,  1447,
  1523,  1450,   212,  1367,  1523,     5,   408,  1523,   410,    87,
  1088,   397,   157,   313,   200,   916,  1441,   125,   126,   127,
  1090,  1442,   128,   125,   126,   127,   495,   212,   128,   377,
   378,   125,   126,   127,  1284,  1441,   128,   212,   137,   138,
  1442,   137,   138,  1293,   377,   378,  1122,   254,  1123,   255,
  1300,    88,   388,   413,   389,  1089,   125,   126,   127,   377,
   378,   128,   379,   585,   586,  1091,   125,   126,   127,   377,
   378,   128,   370,  1345,   377,   378,  1124,  1346,  1125,   371,
   306,   307,   308,   152,    89,   309,   312,   380,    94,   317,
   812,  1126,   530,  1127,   377,   378,   337,   531,   338,   339,
   340,   505,   342,    90,   344,   345,   398,   356,   159,   377,
   378,   564,  1441,   637,  1441,   815,  1461,  1442,   638,  1442,
   314,   315,   917,   918,    91,   375,   376,   644,   156,   137,
   138,   156,   331,   332,   333,   813,    95,   865,  1081,   505,
   334,  1441,    92,  1441,   395,   396,  1442,   399,  1442,   401,
  1441,  1441,   404,   405,   814,  1442,  1442,   185,  1522,   768,
   186,   187,   130,   131,   132,   133,   130,   131,   132,   133,
   756,   746,   782,   201,  1137,    93,   747,  1526,   377,   378,
   218,  1138,  1271,   137,   138,   160,   189,   192,   206,   203,
   258,   150,   763,   213,  1424,   599,   137,   138,    96,   215,
   449,   496,   497,   498,   865,   453,   454,   455,   456,   457,
   458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
   478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
   488,   489,   490,   491,   492,   493,   494,   606,  1523,   181,
   183,    10,  1523,   390,  1529,  1523,  1742,   504,  1462,   377,
   378,   100,  1466,   377,   378,   510,   515,   516,   517,   518,
   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
   529,  1691,   148,  1746,  1695,  1748,  1698,   536,   987,   538,
   377,   378,  1835,  1837,   307,   504,  1441,   929,  1218,  1105,
  1106,  1442,   753,   549,   550,   551,   552,   574,   554,   555,
   556,   557,   558,   559,   560,  1071,   562,   563,   319,   152,
   753,   505,   177,   178,   377,   378,   377,   378,   575,   576,
   577,   578,   195,   179,   505,   196,   588,   377,   378,   151,
   180,   963,   153,  1359,   595,   154,  1523,   569,   569,  1149,
  1523,   157,  1523,   603,   572,   572,   320,   321,   322,   323,
   324,   158,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   377,   378,   377,   378,   908,   334,   377,   378,   372,
  1789,   374,  1114,  1115,  1793,  1272,  1795,   381,  1361,  1158,
  1363,  1075,    11,    12,    13,    14,    15,    16,    17,    18,
   176,  1368,   643,   159,   377,   378,  1205,   939,   758,   377,
   378,   377,   378,     6,     7,   162,     8,  1601,  1602,  1603,
  1604,  1519,  1441,   259,  1608,   260,  1525,  1442,  1528,   261,
   951,   262,   130,   131,   132,   133,   166,   167,  1838,   168,
   971,   972,   973,   974,   137,   138,   751,   163,   164,   307,
   500,   165,   255,   137,   138,   759,   263,   169,   264,   757,
   451,   755,   320,   321,   322,   323,   324,   514,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   504,   769,   161,
   174,   952,   334,   744,   988,   745,   175,   751,   780,   265,
   504,   266,   784,   785,   320,   321,   322,   323,   324,   791,
   325,   326,   327,   328,   329,   330,   331,   332,   333,   137,
   138,   803,   804,   184,   334,   541,   267,   255,   268,   269,
   807,   270,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   271,   816,   272,  1704,  1705,   334,   505,  1708,   273,
   190,   274,   867,   914,   826,   193,   828,   829,   329,   330,
   331,   332,   333,   275,   194,   276,  1426,   277,   334,   278,
   197,   922,   130,   131,   132,   133,   137,   138,   198,   505,
  1098,   279,   781,   280,   255,   281,   199,   282,  1074,  1076,
   567,   568,   170,   137,   138,   171,   172,   753,   173,   754,
    45,    46,    47,    48,   866,    50,  1014,  1015,  1016,  1017,
  1018,   207,   505,   505,   505,   505,   320,   321,   322,   323,
   324,   208,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   283,   285,   284,   286,   287,   334,   288,   289,   291,
   290,   292,   293,  1799,   294,   295,   297,   296,   298,   299,
   753,   300,   783,   320,   321,   322,   323,   324,   909,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   753,  1083,
   943,  1084,   753,   334,  1097,   753,   211,  1128,   945,   209,
   898,   899,   753,   753,  1129,  1130,   210,   753,  1205,  1131,
  1206,  1207,   250,  1208,   900,   901,   902,   903,   904,   905,
   906,   253,   753,   504,  1225,   975,   910,   301,   302,   913,
   323,   324,   919,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   928,   316,  1205,  1248,  1369,   334,  1205,  1744,
  1508,  1745,  1874,   318,   303,   504,  1757,   751,  1758,  1759,
   304,  1760,   505,  1761,  1784,  1762,  1785,   320,   321,   322,
   323,   324,  1027,   325,   326,   327,   328,   329,   330,   331,
   332,   333,  1865,  1957,  1866,  1958,   335,   334,   504,   504,
   504,   504,   336,   341,   977,   978,   343,   802,   981,  1080,
  1959,  1961,  1960,  1962,  2088,  2090,  2089,  2091,   357,   992,
   993,    97,   305,  1929,  2092,   358,  2093,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   359,  2199,  1340,  2200,  1031,  1032,  1033,  1034,  1035,
  1036,  1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,
  1046,  1047,  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,
  1056,  1350,  1060,   360,   320,   321,   322,   323,   324,   362,
   325,   326,   327,   328,   329,   330,   331,   332,   333,  2201,
  2203,  2202,  2204,   866,   334,  2205,   364,  2206,  1077,   363,
  1082,   320,   321,   322,   323,   324,  1086,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   365,  2207,   504,  2208,
  1099,   334,  1100,  2209,  2286,  2210,  2287,  2288,   369,  2289,
  2290,   366,  2291,   129,  2334,  2336,  2335,  2337,   367,  1118,
  1119,  1120,   382,   368,   320,   321,   322,   323,   324,   385,
   325,   326,   327,   328,   329,   330,   331,   332,   333,   383,
   384,  1141,  1142,  1143,   334,  2338,  2382,  2339,  2383,   394,
  2384,  1246,  2385,  1247,   400,   320,   321,   322,   323,   324,
  1433,   325,   326,   327,   328,   329,   330,   331,   332,   333,
  2386,   403,  2387,   402,   406,   334,   409,  2109,   407,   411,
   134,   135,   412,   931,   414,  1211,   136,   415,   416,  1275,
  1177,   139,   417,   418,   310,   419,   142,   420,   311,   320,
   321,   322,   323,   324,   421,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   422,   423,   424,   425,   426,   334,
   444,   967,   968,   969,   427,  1241,   428,   320,   321,   322,
   323,   324,  1212,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   429,   430,   431,   432,   433,   334,   994,   434,
   435,   436,   437,   438,   439,   440,   441,  1003,   442,   443,
  1230,  1231,  1232,   446,  1306,   447,   450,   448,   499,   334,
   511,  1240,  1242,  1243,   502,   512,   513,   547,   542,  1351,
   561,   553,   587,   594,   590,   591,   597,   600,  1262,  1263,
   607,   608,   609,   610,   611,   612,   613,   614,   615,   569,
  1274,   616,   617,  1277,   618,   619,   572,   620,   621,   630,
   622,   623,   624,  1287,   625,   626,   627,   628,   629,  1375,
  1294,  1295,  1296,   631,   632,   633,   634,  1301,   635,   636,
   748,  1305,   639,   749,   640,  1307,  1308,  1309,  1310,  1311,
  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,
  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
  1332,   641,   750,  1335,   760,   761,   765,   770,   767,   799,
   771,   772,   774,   776,   777,  1344,   786,   320,   321,   322,
   323,   324,  1348,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   805,   806,   818,   819,   820,   334,   821,   822,
   824,   825,  1357,   831,  1269,   862,  1270,   832,   833,   834,
   835,   836,   837,   838,   839,   840,   841,   842,   843,  1459,
  1352,   844,   845,    97,   346,  1372,   846,  1373,   847,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   848,   849,   320,   321,   322,   323,   324,
   347,   325,   326,   327,   328,   329,   330,   331,   332,   333,
  1534,   895,   897,   850,   851,   334,   896,   907,   852,   863,
   853,   854,    45,    46,    47,    48,    49,    50,   322,   323,
   324,   855,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   912,  1220,   856,  1221,  1430,   334,   857,   920,   921,
  1431,  1432,   923,   927,   915,  1439,   934,  1445,   936,  1448,
   947,  1451,  1452,   858,   859,   860,   861,  1455,   924,   869,
   948,   864,   870,   871,   569,  1249,  1464,  1252,   872,  1255,
   873,   572,   874,   875,  1472,   129,   876,   877,   878,  1477,
   879,   880,  1480,   881,  1482,  1483,  1484,  1485,  1486,  1487,
  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,
  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
  1600,   882,   883,   884,  1510,   885,   886,   887,   888,   889,
  1516,   890,   306,   307,  1517,   891,   320,   321,   322,   323,
   324,   892,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   893,   134,   348,   894,   946,   334,   949,   136,   950,
   953,   954,   955,   139,   956,   957,   958,   959,   142,   960,
   349,   961,   990,   962,   970,   976,   984,   982,   989,   991,
   995,   996,   997,   998,  1653,   999,   320,   321,   322,   323,
   324,  1002,   325,   326,   327,   328,   329,   330,   331,   332,
   333,  1004,  1005,  1008,  1009,  1010,   334,  1011,  1012,  1021,
  1078,  1070,  1022,  1023,  1024,  1584,  1025,  1079,  1026,  1028,
  1029,  1589,  1072,  1085,  1593,  1093,  1095,  1096,  1104,  1116,
  1117,  1121,  1134,  1135,  1140,  1145,  1144,  1703,  1146,  1150,
  1151,  1152,  1153,  1154,  1155,  1160,  1156,  1178,  1616,  1617,
  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,
  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,  1636,  1157,
  1638,  1159,  1639,   320,   321,   322,   323,   324,  1161,   325,
   326,   327,   328,   329,   330,   331,   332,   333,  1162,  1163,
  1164,  1165,  1166,   334,  1167,  1169,  1168,  1170,  1171,  1172,
  1434,  1174,  1435,  1173,  1175,  1176,   546,  1209,  1213,   354,
  1214,  1216,  1440,  1222,  1446,   361,  1449,   320,   321,   322,
   323,   324,  1223,   325,   326,   327,   328,   329,   330,   331,
   332,   333,  1224,  1227,  1738,  1228,  1798,   334,  1229,   387,
  1233,  1267,  1234,   601,   392,   393,   787,  1235,  1236,  1237,
  1238,  1239,  1250,  1253,  1256,  1258,  1711,  1713,  1715,  1716,
  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,
  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,
  1259,  1260,  1841,  1261,  1276,    97,   305,  1264,  1280,  1279,
   374,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,  1281,  1282,  1283,  1285,  1286,
  1288,  1289,  1292,  1290,  1347,  1873,  1291,  1298,  1299,  1302,
  1303,  1341,  1337,  1334,  1830,  1304,  1833,  1336,  1338,  1339,
  1342,  1343,  1353,  1356,  1371,  1378,  1358,  1797,   766,  1360,
  1362,  1376,  1364,  1803,  1370,  1805,  1381,  1807,  1379,  1809,
  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,
  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,
   320,   321,   322,   323,   324,  1380,   325,   326,   327,   328,
   329,   330,   331,   332,   333,  1382,  1384,  1385,  1386,  1390,
   334,  1391,  1427,   944,  1392,  1394,  1453,   129,  1395,  1460,
  1397,  1463,  1425,  1465,  1468,  1897,  1467,   320,   321,   322,
   323,   324,  1469,   325,   326,   327,   328,   329,   330,   331,
   332,   333,  1470,  1471,  1473,  1871,  1872,   334,  1475,  1476,
  1478,  1479,  1509,  1879,  1880,  1881,  1882,  1883,  1884,  1885,
  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,
  1896,  1481,  1511,  1515,  1520,  1521,  1532,  1533,  1535,  1536,
  1537,  1538,  1539,  1541,   134,   135,  1542,  1544,  1575,  1548,
   136,  1582,  1546,  1586,  1587,   139,  1590,   986,   778,  1591,
   142,  1594,   779,  1577,  1595,  1925,  1596,  1599,  1605,  1606,
  1931,  1933,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,
  1943,  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,
  1953,  1607,   320,   321,   322,   323,   324,  1609,   325,   326,
   327,   328,   329,   330,   331,   332,   333,  1610,  1611,  1612,
  1640,  1652,   334,  1688,  1689,  1644,  1646,  1690,  1647,  1649,
  1651,   752,  1654,  1984,  1655,  1986,  1656,  1988,  1657,  1990,
  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,
  2001,  2002,  2003,  2004,  2005,  2006,  2007,   320,   321,   322,
   323,   324,  1658,   325,   326,   327,   328,   329,   330,   331,
   332,   333,  1659,  1692,  1660,  1661,  1662,   334,  1684,  1687,
  1696,  1699,  1702,  1706,  1707,  1709,  1743,  1740,  2031,  2032,
  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,
  2043,  2044,  2045,  1741,  1747,  1749,  1752,  1753,  1750,  1751,
  1754,  1787,  1786,  1755,  1756,  1788,  1791,  1792,  1794,  1801,
  1796,  1802,  1804,  2067,  2069,  2071,  2072,  2073,  2074,  2075,
  2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
  2086,   320,   321,   322,   323,   324,  1806,   325,   326,   327,
   328,   329,   330,   331,   332,   333,  1808,  1831,  1836,  1834,
  1839,   334,  1842,  1843,  2110,  1867,  2112,  1868,  2114,  1869,
  2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,  2124,  2125,
  2126,  2127,  2128,  2129,  2130,  1870,  1898,  1902,  1903,  1926,
  1904,  1905,   579,    28,    29,   580,   581,    32,   582,    34,
  1901,    35,  1906,    37,    38,    39,  1927,    41,    42,  1955,
  1956,  1981,  1983,    44,  2154,  2155,  2156,  2157,  2158,  2159,
  2160,  2161,  2162,  1985,  1987,    55,  1989,  2111,  2008,  2046,
  2113,  2115,  2047,  2048,  2131,  2049,  2087,  2147,  2163,  2179,
  2181,  2183,  2185,  2187,  2189,  2190,  2191,  2192,  2193,  2194,
  2195,  2196,  2197,  2198,  2164,  2165,    57,    58,    59,  2166,
  2167,  2168,  2221,  2223,  2225,  2227,  2229,  2231,  2265,  2266,
  2267,  2299,  2301,  2303,    69,  2220,  2319,  2222,  2320,  2224,
  2321,  2226,  2344,  2228,  2346,  2230,  2348,  2232,  2233,  2234,
  2235,  2236,  2237,  2238,  2239,  2240,  2373,  2374,  2375,  2389,
   932,   933,  2391,   935,  2393,   937,   938,  2395,  2396,   868,
    76,     0,     0,    84,     0,     0,     0,  2250,  2251,  2252,
  2253,  2254,  2255,     0,     0,     0,     0,     0,     0,     0,
  1215,     0,     0,     0,     0,  2268,  2269,  2270,  2271,  2272,
  2273,  2275,  2277,  2279,     0,     0,     0,     0,     0,   979,
   980,     0,     0,   983,     0,     0,  2292,  2293,  2294,  2295,
  2296,  2297,  2298,   583,  2300,     0,  2302,     0,     0,     0,
  1000,  1001,     0,     0,     0,     0,  1006,  1007,     0,     0,
  2310,  2311,  2312,  1013,     0,  1020,     0,     0,     0,     0,
     0,     0,  2322,  2323,  2324,  2326,  2328,  2330,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  2340,  2341,  2342,
  2343,     0,  2345,     0,  2347,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  2352,  2353,  2354,     0,     0,
     0,  2358,  2359,  2360,     0,     0,     0,  2364,  2365,  2366,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  2377,
  2379,  2381,     0,     0,     0,     0,     0,     0,  2388,     0,
  2390,     0,  2392,  1092,     0,  1094,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1101,  1102,  1103,     0,
     0,     0,  1107,  1108,  1109,  1110,  1111,  1112,  1113,     0,
    97,   305,     0,     0,     0,     0,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    97,   543,     0,     0,     0,     0,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    97,   305,     0,     0,     0,     0,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     0,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,  1210,     0,     0,     0,    97,    98,    99,
   792,   100,   129,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,     0,   125,   126,
   127,     0,   129,   128,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,     0,  1268,
     0,     0,   129,   793,     0,     0,     0,  1278,     0,   134,
   135,     0,     0,     0,     0,   136,     0,     0,     0,     0,
   139,     0,     0,   941,     0,   142,  1297,   942,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
   135,     0,     0,     0,     0,   136,     0,     0,     0,     0,
   139,     0,     0,     0,     0,   142,     0,   544,     0,   129,
     0,     0,     0,     0,  1333,     0,     0,     0,     0,  1436,
  1437,     0,     0,     0,     0,   136,     0,     0,     0,     0,
  1438,     0,     0,     0,     0,   142,     0,   180,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   130,   131,   132,   133,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   134,   135,     0,     0,
     0,     0,   136,   137,   138,     0,     0,   139,     0,   140,
     0,   141,   142,    97,   346,     0,     0,     0,     0,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,     0,     0,     0,     0,     0,     0,     0,
   347,     0,   221,   222,   223,     0,     0,     0,     0,     0,
   224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     0,     0,    45,    46,    47,    48,    49,    50,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   243,     0,   244,
   245,   246,   247,   248,   249,     0,     0,     0,     0,  1454,
     0,     0,     0,  1458,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,  1474,
     0,     0,     0,     0,   334,     0,     0,     0,     0,     0,
    97,   305,   212,   801,     0,   129,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     0,   125,   126,   127,    97,   305,   128,     0,     0,     0,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,     0,     0,     0,     0,     0,     0,
     0,     0,   134,   503,     0,     0,     0,     0,   136,     0,
     0,     0,     0,   139,     0,     0,     0,     0,   142,     0,
     0,     0,     0,   579,    28,    29,   580,   581,    32,   582,
    34,     0,    35,     0,    37,    38,    39,     0,    41,    42,
     0,  1578,  1579,  1580,    44,     0,     0,     0,     0,     0,
  1585,     0,   129,     0,     0,     0,    55,     0,     0,     0,
     0,  1597,  1598,   579,    28,    29,   580,   581,    32,   582,
    34,     0,    35,     0,    37,    38,    39,     0,    41,    42,
     0,     0,     0,     0,    44,     0,   129,    57,    58,    59,
     0,     0,     0,     0,     0,     0,    55,     0,     0,     0,
     0,     0,     0,     0,     0,    69,     0,  1641,  1642,  1643,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
   135,     0,     0,     0,     0,   136,     0,    57,    58,    59,
   139,     0,     0,     0,     0,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    69,     0,     0,     0,     0,
     0,     0,     0,   134,   135,     0,     0,     0,     0,   136,
     0,     0,     0,     0,   139,     0,     0,     0,     0,   142,
     0,     0,     0,     0,     0,  1694,    97,   543,     0,     0,
  1701,     0,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   579,    28,    29,   580,   581,
    32,   582,    34,     0,    35,     0,    37,    38,    39,     0,
    41,    42,     0,     0,   589,     0,    44,     0,     0,     0,
     0,     0,     0,   320,   321,   322,   323,   324,    55,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,     0,     0,     0,     0,     0,
     0,     0,   940,  1790,    -7,     1,     0,   -12,   -55,    57,
    58,    59,     0,  1800,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    69,   129,     0,
     0,     0,     0,     0,     0,     0,     0,   -55,     0,     0,
     0,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,     0,     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,   134,   135,     0,   334,     0,
   501,   136,  1875,     0,     0,   565,   139,   -55,   -55,   -55,
   -55,   142,     0,     0,     0,   -55,   604,   -55,     0,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -12,   -12,
   -12,   -12,   -12,   -12,   -12,   -12,     0,     0,     0,     0,
     0,  1928,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    -7,    -7,     0,    -7,   579,    28,    29,
   580,   581,    32,   582,    34,     0,    35,     0,    37,    38,
    39,     0,    41,    42,     0,     0,     0,     0,    44,     0,
   579,    28,    29,   580,   581,    32,   582,    34,     0,    35,
    55,    37,    38,    39,  1982,    41,    42,     0,     0,     0,
     0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,     0,     0,     0,     0,     0,     0,
     0,    57,    58,    59,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    69,
     0,     0,     0,     0,    57,    58,    59,  2027,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   320,   321,   322,
   323,   324,    69,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,     0,
     0,     0,     0,     0,   532,  2065,   645,   646,   647,   648,
   649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
   659,   660,   661,   662,   663,   664,   665,   666,   667,   668,
   669,   670,   671,   672,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   320,   321,   322,   323,   324,   605,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,     0,     0,     0,     0,     0,
   565,   827,   645,   646,   647,   648,   649,   650,   651,   652,
   653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
   663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     0,     0,     0,     0,     0,   320,   321,   322,   323,   324,
    23,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,     0,     0,     0,
     0,     0,     0,     0,   966,     0,     0,     0,     0,    24,
     0,     0,   673,    25,    26,     0,    27,    28,    29,    30,
    31,    32,    33,    34,     0,    35,    36,    37,    38,    39,
    40,    41,    42,     0,     0,     0,    43,    44,    45,    46,
    47,    48,    49,    50,     0,    51,    52,    53,    54,    55,
     0,     0,     0,     0,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,  1030,    56,
    57,    58,    59,  1244,     0,     0,     0,    60,     0,    61,
     0,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,     0,     0,   320,   321,   322,   323,   324,
  1456,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,     0,     0,   320,
   321,   322,   323,   324,  1457,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   320,   321,   322,   323,   324,  1513,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,     0,     0,   320,   321,   322,
   323,   324,  1514,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,     0,
     0,   320,   321,   322,   323,   324,  1518,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,     0,     0,   320,   321,   322,   323,   324,
  1524,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,     0,     0,   320,
   321,   322,   323,   324,  1527,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   320,   321,   322,   323,   324,  1530,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,     0,     0,   320,   321,   322,
   323,   324,  1531,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,     0,
     0,   320,   321,   322,   323,   324,  1581,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,     0,     0,   320,   321,   322,   323,   324,
  1645,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,     0,     0,   320,
   321,   322,   323,   324,  1648,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   320,   321,   322,   323,   324,  1650,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,     0,     0,   320,   321,   322,
   323,   324,  1686,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,     0,
     0,   320,   321,   322,   323,   324,  1900,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,     0,     0,   320,   321,   322,   323,   324,
  1954,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,   566,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,   598,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,   724,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,   725,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
   738,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,   739,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,   740,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,   741,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,   742,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
   743,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,   808,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,   809,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,   810,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,   930,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
   964,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,   965,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,   985,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1132,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1133,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1147,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1148,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1179,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1180,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1181,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1182,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1183,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1184,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1185,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1186,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1187,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1188,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1189,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1190,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1191,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1192,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1193,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1194,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1195,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1196,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1197,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1198,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1199,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1200,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1201,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1202,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1203,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1204,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1219,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1226,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1349,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1354,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1355,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1365,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1366,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1374,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1377,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1388,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1393,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1396,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1398,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1399,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1400,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1401,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1402,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1403,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1404,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1405,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1406,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1407,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1408,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1409,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1410,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1411,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1412,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1413,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1414,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1415,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1416,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1417,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1418,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1419,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1420,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1421,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1422,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1423,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1428,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1429,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1540,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1552,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1553,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1554,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1555,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1556,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1557,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1558,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1559,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1560,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1561,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1562,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1563,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1564,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1565,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1566,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1567,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1568,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1569,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1570,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1571,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1572,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1574,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1576,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1663,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1664,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1665,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1666,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1667,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1668,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1669,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1670,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1671,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1672,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1673,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1674,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1675,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1676,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1677,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1678,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1679,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1680,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1681,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1682,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1683,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1763,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1764,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1765,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1766,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1767,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1768,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1769,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1770,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1771,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1772,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1773,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1774,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1775,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1776,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1777,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1778,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1779,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1780,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1781,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1782,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1783,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1840,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1847,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1848,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1849,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1850,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1851,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1852,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1853,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1854,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1855,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1856,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1857,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1858,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1859,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1860,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1861,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1862,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1863,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1864,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1899,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1907,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1908,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1909,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1910,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1911,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1912,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1913,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1914,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1915,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1916,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1917,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1918,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1919,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1920,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1921,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1922,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1923,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1924,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1963,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1964,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1965,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1966,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1967,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1968,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1969,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1970,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1971,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1972,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1973,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1974,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1975,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  1976,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  1977,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  1978,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  1979,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  1980,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2012,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2013,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2014,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2015,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2016,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2017,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2018,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2019,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2020,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2021,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2022,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2023,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2024,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2025,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2026,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2050,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2051,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2052,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2053,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2054,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2055,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2056,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2057,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2058,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2059,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2060,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2061,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2062,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2063,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2064,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2094,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2095,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2096,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2097,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2098,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2099,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2100,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2101,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2102,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2103,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2104,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2105,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2106,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2107,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2108,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2138,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2139,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2140,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2141,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2142,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2143,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2144,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2145,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2146,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2169,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2170,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2171,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2172,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2173,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2174,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2175,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2176,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2177,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2211,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2212,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2213,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2214,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2215,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2216,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2217,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2218,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2219,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2241,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2242,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2243,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2244,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2245,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2246,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2259,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2260,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2261,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2262,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2263,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2264,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2280,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2281,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2282,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2283,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2284,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2285,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2304,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2305,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2306,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2316,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2317,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2318,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2331,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2332,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2333,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2349,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2350,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2351,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2355,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   320,   321,   322,   323,   324,  2356,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   320,   321,   322,   323,   324,  2357,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   320,   321,   322,   323,   324,
  2361,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   320,   321,   322,
   323,   324,  2362,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   320,
   321,   322,   323,   324,  2363,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   507,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   642,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   703,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   705,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   707,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   709,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   711,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   713,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   715,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   717,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   719,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   721,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   723,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   727,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   729,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   731,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   733,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   735,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   737,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   811,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,   817,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   911,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,  1062,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,  1064,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,  1066,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,  1068,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,     0,     0,  1069,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,     0,     0,  1217,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   501,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,   533,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   534,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
   535,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   537,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,   539,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   540,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,   548,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   592,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,   593,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   596,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,   602,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   702,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
   704,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   706,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,   708,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   710,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,   712,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   714,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,   716,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   718,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,   720,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   722,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
   726,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   728,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,   730,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   732,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,   734,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   736,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,   773,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   775,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,   788,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,   789,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
   790,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,   794,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,   795,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,   796,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,   797,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,   798,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,   800,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,   823,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,   830,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,  1061,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
  1063,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,  1065,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,  1067,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,  1073,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,  1136,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,  1245,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,  1273,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,  1383,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,  1387,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,  1389,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
  1512,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,  1543,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,  1545,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,  1547,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,  1549,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,  1550,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,  1551,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,  1573,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,  1685,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,  1844,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
  1845,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,  1846,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,  2009,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,  2010,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,  2011,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,  2132,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,  2133,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,  2134,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,  2135,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,  2136,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334,     0,
  2137,   320,   321,   322,   323,   324,     0,   325,   326,   327,
   328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
     0,   334,     0,  2247,   320,   321,   322,   323,   324,     0,
   325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     0,     0,     0,     0,   334,     0,  2248,   320,   321,   322,
   323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
   332,   333,     0,     0,     0,     0,     0,   334,     0,  2249,
   320,   321,   322,   323,   324,     0,   325,   326,   327,   328,
   329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
   334,     0,  2307,   320,   321,   322,   323,   324,     0,   325,
   326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     0,     0,     0,   334,     0,  2308,   320,   321,   322,   323,
   324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
   333,     0,     0,     0,     0,     0,   334,     0,  2309,   320,
   321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
   330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     0,  2367,   320,   321,   322,   323,   324,     0,   325,   326,
   327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     0,     0,   334,     0,  2368,   320,   321,   322,   323,   324,
     0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     0,     0,     0,     0,     0,   334,     0,  2369,   320,   321,
   322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
   331,   332,   333,     0,     0,     0,     0,     0,   334
};

static const short yycheck[] = {    23,
    70,    71,     4,    95,   380,    23,   313,   349,   763,     4,
     4,     4,   189,     4,     4,   192,     4,     6,     5,     4,
     3,     7,     6,    68,     5,     7,    68,  1137,  1138,  1362,
  1443,  1364,     5,  1264,  1447,     6,   213,  1450,   215,   173,
     6,   108,    68,     4,    44,     4,    69,    34,    35,    36,
     6,    74,    39,    34,    35,    36,     4,     5,    39,   192,
   193,    34,    35,    36,  1154,    69,    39,     5,   199,   200,
    74,   199,   200,  1163,   192,   193,   209,   205,   211,   207,
  1170,     7,     4,   219,     6,    51,    34,    35,    36,   192,
   193,    39,   210,     6,     7,    51,    34,    35,    36,   192,
   193,    39,   203,     6,   192,   193,   209,     6,   211,   210,
   134,   135,   136,   203,     6,   139,   140,   210,   203,   143,
   210,   209,   204,   211,   192,   193,   150,   209,   152,   153,
   154,   311,   156,     6,   158,   159,   203,   161,   203,   192,
   193,   209,    69,   204,    69,   210,  1377,    74,   209,    74,
   111,   112,   111,   112,     6,   179,   180,   210,   203,   199,
   200,   203,   194,   195,   196,   210,   203,   207,   923,   349,
   202,    69,     6,    69,   198,   199,    74,   201,    74,   203,
    69,    69,   206,   207,   210,    74,    74,    40,   211,   531,
    43,    44,   178,   179,   180,   181,   178,   179,   180,   181,
   507,   204,   544,   203,   203,     6,   209,   211,   192,   193,
   193,   210,     8,   199,   200,    48,   210,   210,   203,   210,
   210,   210,   210,   210,  1334,   402,   199,   200,   203,   210,
   254,   301,   302,   303,   207,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   413,  1691,    46,
    47,     3,  1695,   205,   211,  1698,   211,   311,  1378,   192,
   193,     7,  1382,   192,   193,   313,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,  1644,   203,   211,  1647,   211,  1649,   341,     8,   343,
   192,   193,   211,   211,   348,   349,    69,   204,  1083,    58,
    59,    74,   209,   357,   358,   359,   360,   209,   362,   363,
   364,   365,   366,   367,   368,   204,   370,   371,     6,   203,
   209,   531,   192,   193,   192,   193,   192,   193,   382,   383,
   384,   385,    40,   203,   544,    43,   390,   192,   193,     6,
   210,   209,   203,   209,   398,   203,  1789,   379,   380,   204,
  1793,    68,  1795,   407,   379,   380,   182,   183,   184,   185,
   186,   203,   188,   189,   190,   191,   192,   193,   194,   195,
   196,   192,   193,   192,   193,   747,   202,   192,   193,   176,
  1743,   178,     6,     7,  1747,   211,  1749,   184,   209,   204,
   209,     7,   144,   145,   146,   147,   148,   149,   150,   151,
   210,   204,   450,   203,   192,   193,   209,   779,   508,   192,
   193,   192,   193,   169,   170,    44,   172,  1537,  1538,  1539,
  1540,   209,    69,   203,  1544,   205,   209,    74,   209,   203,
     6,   205,   178,   179,   180,   181,    43,    44,   211,    46,
   812,   813,   814,   815,   199,   200,   500,    44,    44,   503,
   205,    44,   207,   199,   200,   509,   203,    46,   205,   507,
   257,   207,   182,   183,   184,   185,   186,     6,   188,   189,
   190,   191,   192,   193,   194,   195,   196,   531,   532,   203,
   203,    57,   202,   205,   204,   207,    44,   541,   542,   203,
   544,   205,   546,   547,   182,   183,   184,   185,   186,   553,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   199,
   200,   565,   566,   210,   202,   205,   203,   207,   205,   203,
   574,   205,   188,   189,   190,   191,   192,   193,   194,   195,
   196,   203,   586,   205,  1654,  1655,   202,   747,  1658,   203,
    44,   205,   642,   753,   598,     6,   600,   601,   192,   193,
   194,   195,   196,   203,     6,   205,  1341,   203,   202,   205,
     4,     6,   178,   179,   180,   181,   199,   200,   203,   779,
   942,   203,   205,   205,   207,   203,   203,   205,   915,   916,
   377,   378,    40,   199,   200,    43,    44,   209,    46,   211,
    62,    63,    64,    65,   642,    67,   129,   130,   131,   132,
   133,   203,   812,   813,   814,   815,   182,   183,   184,   185,
   186,     6,   188,   189,   190,   191,   192,   193,   194,   195,
   196,   203,   203,   205,   205,   203,   202,   205,   203,   203,
   205,   205,   203,  1753,   205,   203,   203,   205,   205,   203,
   209,   205,   211,   182,   183,   184,   185,   186,   748,   188,
   189,   190,   191,   192,   193,   194,   195,   196,   209,   209,
   211,   211,   209,   202,   211,   209,    44,   211,     6,     4,
   724,   725,   209,   209,   211,   211,     4,   209,   209,   211,
   211,   209,   203,   211,   738,   739,   740,   741,   742,   743,
   744,     5,   209,   747,   211,     6,   750,   203,   203,   753,
   185,   186,   756,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   766,     4,   209,  1121,   211,   202,   209,   209,
   211,   211,  1842,     6,   203,   779,   209,   781,   211,   209,
   203,   211,   942,   209,   209,   211,   211,   182,   183,   184,
   185,   186,   864,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   209,   209,   211,   211,     6,   202,   812,   813,
   814,   815,     5,   203,   818,   819,   203,   564,   822,     6,
   209,   209,   211,   211,   209,   209,   211,   211,   210,   833,
   834,     3,     4,  1903,   209,   203,   211,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   203,   209,     6,   211,   869,   870,   871,   872,   873,
   874,   875,   876,   877,   878,   879,   880,   881,   882,   883,
   884,   885,   886,   887,   888,   889,   890,   891,   892,   893,
   894,     6,   896,   203,   182,   183,   184,   185,   186,   210,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   209,
   209,   211,   211,   911,   202,   209,   203,   211,   916,   210,
   924,   182,   183,   184,   185,   186,   930,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   203,   209,   942,   211,
   944,   202,   946,   209,   209,   211,   211,   209,     4,   211,
   209,   203,   211,   125,   209,   209,   211,   211,   203,   963,
   964,   965,   210,   203,   182,   183,   184,   185,   186,   205,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   210,
   210,   985,   986,   987,   202,   209,   209,   211,   211,     6,
   209,   209,   211,   211,   207,   182,   183,   184,   185,   186,
  1356,   188,   189,   190,   191,   192,   193,   194,   195,   196,
   209,   114,   211,   210,     6,   202,     6,  2087,   203,     6,
   192,   193,     3,   770,   203,  1075,   198,   203,   203,  1145,
  1028,   203,   203,   203,   206,   203,   208,   203,   210,   182,
   183,   184,   185,   186,   203,   188,   189,   190,   191,   192,
   193,   194,   195,   196,   203,   203,   203,   203,   203,   202,
     5,   808,   809,   810,   203,  1115,   203,   182,   183,   184,
   185,   186,  1076,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   203,   203,   203,   203,   203,   202,   835,   203,
   203,   203,   203,   203,   203,   203,   203,   844,   203,   203,
  1104,  1105,  1106,   209,  1176,   204,     4,   209,     5,   202,
   207,  1115,  1116,  1117,     7,     7,   205,     7,   210,     6,
   204,     7,     6,   109,     7,     7,   111,   210,  1132,  1133,
     5,     5,     5,     5,     5,     5,     5,     5,     5,  1121,
  1144,     5,     5,  1147,     5,     5,  1121,     5,     5,   162,
     5,     5,     5,  1157,     5,     5,     5,     5,     5,  1275,
  1164,  1165,  1166,     5,     5,     5,     5,  1171,     3,     5,
   209,  1175,     5,   204,     6,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
  1204,     5,   209,  1207,     6,     4,   206,     7,     6,   207,
     7,     7,     7,     7,     7,  1219,     7,   182,   183,   184,
   185,   186,  1226,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   211,   211,   210,   210,     7,   202,     7,   203,
     7,   207,  1246,   174,   209,     5,   211,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,  1375,
     6,   209,   209,     3,     4,  1269,   209,  1271,   209,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   209,   209,   182,   183,   184,   185,   186,
    40,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     6,   210,     6,   209,   209,   202,   210,     4,   209,   204,
   209,   209,    62,    63,    64,    65,    66,    67,   184,   185,
   186,   209,   188,   189,   190,   191,   192,   193,   194,   195,
   196,     6,  1089,   209,  1091,  1349,   202,   209,     6,     6,
  1354,  1355,     7,     6,   206,  1359,     7,  1361,     7,  1363,
     7,  1365,  1366,   209,   209,   209,   209,  1371,   205,   203,
     7,   209,   203,   203,  1356,  1122,  1380,  1124,   203,  1126,
   203,  1356,   203,   203,  1388,   125,   203,   203,   203,  1393,
   203,   203,  1396,   203,  1398,  1399,  1400,  1401,  1402,  1403,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,
  1536,   203,   203,   203,  1428,   203,   203,   203,   203,   203,
  1434,   203,  1436,  1437,  1438,   203,   182,   183,   184,   185,
   186,   203,   188,   189,   190,   191,   192,   193,   194,   195,
   196,   203,   192,   193,   203,   210,   202,     7,   198,     7,
     7,     7,     7,   203,     7,     7,     7,     7,   208,     4,
   210,     7,   175,     7,     6,     6,     4,     7,     7,     3,
     3,     3,   194,     3,  1600,     3,   182,   183,   184,   185,
   186,     3,   188,   189,   190,   191,   192,   193,   194,   195,
   196,     3,     3,     3,     3,     3,   202,     3,     3,     3,
   207,   204,     5,     5,     3,  1519,     3,     7,     6,     4,
     6,  1525,   204,     6,  1528,     6,     6,     6,   203,   210,
   210,   210,     6,     6,   110,   171,   210,  1653,   209,   209,
   204,   209,   204,   209,   204,   204,   209,     6,  1552,  1553,
  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,   209,
  1574,   209,  1576,   182,   183,   184,   185,   186,   204,   188,
   189,   190,   191,   192,   193,   194,   195,   196,   209,   209,
   209,   209,   209,   202,   209,   209,   204,   209,   209,   209,
   209,   204,   211,   209,   209,   209,     8,   207,     6,   160,
     4,     6,  1359,     6,  1361,   166,  1363,   182,   183,   184,
   185,   186,     6,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   206,     6,  1684,     6,  1752,   202,     6,   190,
     6,   110,     6,     8,   195,   196,   211,     6,     6,     6,
     6,     6,     6,     6,     6,     6,  1660,  1661,  1662,  1663,
  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
     6,     6,  1798,     6,     3,     3,     4,     7,     3,     6,
  1437,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     6,   194,     6,     6,     3,
     6,     3,     3,     6,   206,  1841,     6,     6,     3,     3,
     3,     7,     4,   210,  1784,     6,  1786,     6,     6,     6,
     6,   207,     6,   210,   107,   209,   211,  1751,     8,   210,
   210,   204,   210,  1757,   210,  1759,   204,  1761,   209,  1763,
  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,
  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
   182,   183,   184,   185,   186,   209,   188,   189,   190,   191,
   192,   193,   194,   195,   196,   209,   209,   204,   204,   209,
   202,   204,   112,     8,   204,   209,   110,   125,   204,     6,
   209,     3,   204,     6,     3,  1865,     6,   182,   183,   184,
   185,   186,     6,   188,   189,   190,   191,   192,   193,   194,
   195,   196,     6,     6,     6,  1839,  1840,   202,     6,     6,
     3,     6,     6,  1847,  1848,  1849,  1850,  1851,  1852,  1853,
  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
  1864,     5,     5,   211,     6,   210,   210,   209,   211,   171,
   209,   209,   209,   204,   192,   193,   204,   209,     6,   209,
   198,     6,   204,     6,     6,   203,     6,     8,   206,     6,
   208,     6,   210,   209,     6,  1899,     6,     6,     6,     6,
  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,
  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
  1924,     6,   182,   183,   184,   185,   186,     6,   188,   189,
   190,   191,   192,   193,   194,   195,   196,     6,     6,     5,
     5,   211,   202,     6,     6,   210,   209,     6,   210,   210,
   209,   502,   209,  1957,   209,  1959,   204,  1961,   204,  1963,
  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   209,     6,   210,   210,   210,   202,   210,   209,
     6,     6,   107,     6,     6,     5,   210,     6,  2012,  2013,
  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
  2024,  2025,  2026,     5,   210,   210,   171,   209,   211,   210,
   209,   211,   210,   204,   204,     6,     6,     6,     6,     6,
   107,     6,     6,  2047,  2048,  2049,  2050,  2051,  2052,  2053,
  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,
  2064,   182,   183,   184,   185,   186,     6,   188,   189,   190,
   191,   192,   193,   194,   195,   196,     6,     6,   211,     6,
   210,   202,   209,   209,  2088,     6,  2090,     6,  2092,     6,
  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,
  2104,  2105,  2106,  2107,  2108,     6,     6,   209,   209,     6,
   210,   210,    40,    41,    42,    43,    44,    45,    46,    47,
   176,    49,   210,    51,    52,    53,   177,    55,    56,   209,
   204,     6,     6,    61,  2138,  2139,  2140,  2141,  2142,  2143,
  2144,  2145,  2146,     6,     6,    73,     6,     6,   209,   209,
     6,     6,   210,   210,   204,   210,   209,     6,   210,  2163,
  2164,  2165,  2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,
  2174,  2175,  2176,  2177,   210,   210,   104,   105,   106,   210,
   210,   210,     6,     6,     6,     6,     6,     6,   210,   210,
   210,     6,     6,     6,   122,  2199,   210,  2201,   210,  2203,
   210,  2205,     6,  2207,     6,  2209,     6,  2211,  2212,  2213,
  2214,  2215,  2216,  2217,  2218,  2219,   210,   210,   210,     6,
   771,   772,     6,   774,     6,   776,   777,     0,     0,   644,
     4,    -1,    -1,     4,    -1,    -1,    -1,  2241,  2242,  2243,
  2244,  2245,  2246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1079,    -1,    -1,    -1,    -1,  2259,  2260,  2261,  2262,  2263,
  2264,  2265,  2266,  2267,    -1,    -1,    -1,    -1,    -1,   820,
   821,    -1,    -1,   824,    -1,    -1,  2280,  2281,  2282,  2283,
  2284,  2285,  2286,   211,  2288,    -1,  2290,    -1,    -1,    -1,
   841,   842,    -1,    -1,    -1,    -1,   847,   848,    -1,    -1,
  2304,  2305,  2306,   854,    -1,   856,    -1,    -1,    -1,    -1,
    -1,    -1,  2316,  2317,  2318,  2319,  2320,  2321,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2331,  2332,  2333,
  2334,    -1,  2336,    -1,  2338,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2349,  2350,  2351,    -1,    -1,
    -1,  2355,  2356,  2357,    -1,    -1,    -1,  2361,  2362,  2363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2373,
  2374,  2375,    -1,    -1,    -1,    -1,    -1,    -1,  2382,    -1,
  2384,    -1,  2386,   934,    -1,   936,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   947,   948,   949,    -1,
    -1,    -1,   953,   954,   955,   956,   957,   958,   959,    -1,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,  1074,    -1,    -1,    -1,     3,     4,     5,
   211,     7,   125,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
    36,    -1,   125,    39,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,  1140,
    -1,    -1,   125,   211,    -1,    -1,    -1,  1148,    -1,   192,
   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,
   203,    -1,    -1,   206,    -1,   208,  1167,   210,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,
   203,    -1,    -1,    -1,    -1,   208,    -1,   210,    -1,   125,
    -1,    -1,    -1,    -1,  1205,    -1,    -1,    -1,    -1,   192,
   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,
   203,    -1,    -1,    -1,    -1,   208,    -1,   210,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   178,   179,   180,   181,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   192,   193,    -1,    -1,
    -1,    -1,   198,   199,   200,    -1,    -1,   203,    -1,   205,
    -1,   207,   208,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    40,    -1,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
    -1,    -1,    62,    63,    64,    65,    66,    67,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
   164,   165,   166,   167,   168,    -1,    -1,    -1,    -1,  1370,
    -1,    -1,    -1,  1374,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,  1390,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,
     3,     4,     5,   211,    -1,   125,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,     3,     4,    39,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   192,   193,    -1,    -1,    -1,    -1,   198,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,
    -1,    -1,    -1,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    49,    -1,    51,    52,    53,    -1,    55,    56,
    -1,  1512,  1513,  1514,    61,    -1,    -1,    -1,    -1,    -1,
  1521,    -1,   125,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,  1532,  1533,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    49,    -1,    51,    52,    53,    -1,    55,    56,
    -1,    -1,    -1,    -1,    61,    -1,   125,   104,   105,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   122,    -1,  1578,  1579,  1580,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
   193,    -1,    -1,    -1,    -1,   198,    -1,   104,   105,   106,
   203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   192,   193,    -1,    -1,    -1,    -1,   198,
    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,    -1,    -1,  1646,     3,     4,    -1,    -1,
  1651,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    49,    -1,    51,    52,    53,    -1,
    55,    56,    -1,    -1,   211,    -1,    61,    -1,    -1,    -1,
    -1,    -1,    -1,   182,   183,   184,   185,   186,    73,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   211,  1744,     0,     1,    -1,     3,     4,   104,
   105,   106,    -1,  1754,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
    -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    69,    70,    71,    72,    73,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,   192,   193,    -1,   202,    -1,
   204,   198,  1843,    -1,    -1,   209,   203,   103,   104,   105,
   106,   208,    -1,    -1,    -1,   111,   211,   113,    -1,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   145,
   146,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,  1902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   169,   170,    -1,   172,    40,    41,    42,
    43,    44,    45,    46,    47,    -1,    49,    -1,    51,    52,
    53,    -1,    55,    56,    -1,    -1,    -1,    -1,    61,    -1,
    40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
    73,    51,    52,    53,  1955,    55,    56,    -1,    -1,    -1,
    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
    -1,    -1,    -1,    -1,   104,   105,   106,  2008,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,
   185,   186,   122,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,
    -1,    -1,    -1,    -1,   209,  2046,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   182,   183,   184,   185,   186,   211,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
   209,   211,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,   182,   183,   184,   185,   186,
     4,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,    33,
    -1,    -1,   211,    37,    38,    -1,    40,    41,    42,    43,
    44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    -1,    -1,    -1,    60,    61,    62,    63,
    64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
    -1,    -1,    -1,    -1,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   211,   103,
   104,   105,   106,   211,    -1,    -1,    -1,   111,    -1,   113,
    -1,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,    -1,    -1,   182,   183,   184,   185,   186,
   211,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   182,
   183,   184,   185,   186,   211,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   182,   183,   184,   185,   186,   211,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,    -1,    -1,   182,   183,   184,
   185,   186,   211,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,
    -1,   182,   183,   184,   185,   186,   211,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,    -1,    -1,   182,   183,   184,   185,   186,
   211,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   182,
   183,   184,   185,   186,   211,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   182,   183,   184,   185,   186,   211,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,    -1,    -1,   182,   183,   184,
   185,   186,   211,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,
    -1,   182,   183,   184,   185,   186,   211,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,    -1,    -1,   182,   183,   184,   185,   186,
   211,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   182,
   183,   184,   185,   186,   211,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   182,   183,   184,   185,   186,   211,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,    -1,    -1,   182,   183,   184,
   185,   186,   211,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,
    -1,   182,   183,   184,   185,   186,   211,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,    -1,    -1,   182,   183,   184,   185,   186,
   211,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   182,   183,   184,   185,   186,   209,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   182,   183,   184,   185,   186,   209,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   182,   183,   184,   185,   186,
   209,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,   183,   184,
   185,   186,   209,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   182,
   183,   184,   185,   186,   209,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,   206,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   206,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,
   204,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
    -1,   202,    -1,   204,   182,   183,   184,   185,   186,    -1,
   188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,
   185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
   195,   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
   182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
   192,   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,
   202,    -1,   204,   182,   183,   184,   185,   186,    -1,   188,
   189,   190,   191,   192,   193,   194,   195,   196,    -1,    -1,
    -1,    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,
   186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,
   183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
   193,   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202,
    -1,   204,   182,   183,   184,   185,   186,    -1,   188,   189,
   190,   191,   192,   193,   194,   195,   196,    -1,    -1,    -1,
    -1,    -1,   202,    -1,   204,   182,   183,   184,   185,   186,
    -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,   182,   183,
   184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
   194,   195,   196,    -1,    -1,    -1,    -1,    -1,   202
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 164 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 170 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 171 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 181 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 194 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 200 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 219 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 226 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 231 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 242 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 249 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 255 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 261 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 268 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 274 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 278 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 282 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 289 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 293 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 298 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 302 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 306 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 310 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 314 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 318 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 322 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 326 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 338 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 342 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 346 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 350 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 354 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 373 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 395 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 396 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 400 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 409 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 414 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 432 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 449 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 487 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 489 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 494 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 499 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 506 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 508 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 513 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 519 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 527 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 529 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 534 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 540 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 548 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 550 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 556 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 563 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 571 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 573 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 579 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 586 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 594 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 596 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 602 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 609 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 617 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 619 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 626 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 636 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 644 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 646 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 653 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 663 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 671 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 673 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 680 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 690 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 698 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 700 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 708 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 718 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 728 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 736 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 746 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 754 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 756 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 764 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 774 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 782 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 784 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 792 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 802 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 810 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 812 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 820 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 830 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 838 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 840 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 848 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 858 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 868 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 880 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 896 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 904 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 906 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 918 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 934 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 942 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 944 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 956 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 972 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 980 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 982 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 992 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1005 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1013 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1015 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1025 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1038 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1046 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1048 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1058 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1071 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1079 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1081 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1090 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1103 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1111 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1113 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1122 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1135 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1143 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1145 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1154 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1167 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1175 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1180 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1188 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1195 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1202 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1207 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1215 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1222 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1230 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1237 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1239 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1244 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1251 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1252 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1253 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1254 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1255 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1259 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1260 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1268 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1299 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1338 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1392 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1409 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1420 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1439 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1453 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1470 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1496 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1523 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1537 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1554 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1568 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1585 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1605 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1628 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1638 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1657 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1673 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1689 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1708 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1727 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1745 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1763 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1781 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1807 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1825 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1852 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1871 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1895 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1919 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1945 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1962 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1980 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1999 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2018 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2057 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2083 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2103 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2122 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2140 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2159 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2176 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2192 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2211 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2228 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2245 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 267:
#line 2266 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2271 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2276 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2281 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 271:
#line 2288 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2289 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2290 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 274:
#line 2295 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 275:
#line 2299 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 276:
#line 2303 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2319 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2335 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2351 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 280:
#line 2372 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 281:
#line 2385 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 282:
#line 2397 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 283:
#line 2406 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 284:
#line 2416 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 285:
#line 2426 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 286:
#line 2445 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 287:
#line 2459 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 288:
#line 2467 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2473 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 290:
#line 2484 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 291:
#line 2498 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 292:
#line 2542 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 293:
#line 2557 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 294:
#line 2573 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 295:
#line 2583 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 296:
#line 2594 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 297:
#line 2598 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 298:
#line 2602 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 299:
#line 2606 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 300:
#line 2619 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 301:
#line 2634 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 302:
#line 2650 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 303:
#line 2676 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 304:
#line 2703 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 305:
#line 2735 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 306:
#line 2742 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 307:
#line 2747 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 308:
#line 2753 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 309:
#line 2757 "Gmsh.y"
{
    ;
    break;}
case 310:
#line 2768 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 311:
#line 2784 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 312:
#line 2800 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 313:
#line 2816 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 314:
#line 2821 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2837 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 316:
#line 2842 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 317:
#line 2858 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2863 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2881 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 320:
#line 2904 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2927 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 322:
#line 2950 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 323:
#line 2955 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 2978 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 325:
#line 2983 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 326:
#line 3006 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 327:
#line 3011 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3037 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 329:
#line 3060 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3083 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 331:
#line 3106 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 332:
#line 3111 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 333:
#line 3134 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 334:
#line 3140 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 335:
#line 3163 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 336:
#line 3169 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 337:
#line 3195 "Gmsh.y"
{
    ;
    break;}
case 338:
#line 3198 "Gmsh.y"
{
    ;
    break;}
case 339:
#line 3204 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 340:
#line 3230 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 341:
#line 3254 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 342:
#line 3263 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 343:
#line 3281 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 344:
#line 3299 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 345:
#line 3317 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 346:
#line 3344 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 347:
#line 3370 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 348:
#line 3396 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 349:
#line 3410 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 350:
#line 3429 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 351:
#line 3433 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 352:
#line 3442 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 353:
#line 3443 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 354:
#line 3444 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 355:
#line 3445 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 356:
#line 3446 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 357:
#line 3450 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 358:
#line 3451 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 359:
#line 3452 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 360:
#line 3453 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 361:
#line 3454 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 362:
#line 3455 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 363:
#line 3456 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 364:
#line 3457 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 365:
#line 3459 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 366:
#line 3465 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 367:
#line 3466 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 368:
#line 3467 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 369:
#line 3468 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 370:
#line 3469 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 371:
#line 3470 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 372:
#line 3471 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 373:
#line 3472 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 374:
#line 3473 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 375:
#line 3474 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 376:
#line 3475 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 377:
#line 3476 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 378:
#line 3477 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 379:
#line 3478 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 380:
#line 3479 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 381:
#line 3480 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 382:
#line 3481 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3482 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 384:
#line 3483 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3484 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 386:
#line 3485 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 387:
#line 3486 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 388:
#line 3487 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3488 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 3489 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3490 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 392:
#line 3491 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 393:
#line 3492 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3493 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 395:
#line 3494 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 396:
#line 3495 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 397:
#line 3496 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 398:
#line 3498 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 399:
#line 3499 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 400:
#line 3500 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 401:
#line 3501 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 402:
#line 3502 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 403:
#line 3503 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3504 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 405:
#line 3505 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3506 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 407:
#line 3507 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 408:
#line 3508 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 409:
#line 3509 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3510 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 411:
#line 3511 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3512 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 413:
#line 3513 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 414:
#line 3514 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 415:
#line 3515 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 416:
#line 3516 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 417:
#line 3517 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 418:
#line 3518 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 419:
#line 3527 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 420:
#line 3528 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 421:
#line 3529 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 422:
#line 3530 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 423:
#line 3535 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 424:
#line 3548 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 425:
#line 3568 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 426:
#line 3582 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 427:
#line 3595 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 428:
#line 3618 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 429:
#line 3636 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 430:
#line 3654 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 431:
#line 3672 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 432:
#line 3690 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 433:
#line 3698 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 434:
#line 3702 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 435:
#line 3706 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 436:
#line 3710 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 437:
#line 3714 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 438:
#line 3721 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 439:
#line 3725 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 440:
#line 3729 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 441:
#line 3733 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 442:
#line 3740 "Gmsh.y"
{
    ;
    break;}
case 443:
#line 3743 "Gmsh.y"
{
    ;
    break;}
case 444:
#line 3749 "Gmsh.y"
{
    ;
    break;}
case 445:
#line 3752 "Gmsh.y"
{
    ;
    break;}
case 446:
#line 3758 "Gmsh.y"
{
    ;
    break;}
case 447:
#line 3761 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 448:
#line 3765 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 449:
#line 3772 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 450:
#line 3777 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 451:
#line 3785 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 452:
#line 3790 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 453:
#line 3794 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 454:
#line 3798 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 455:
#line 3810 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 456:
#line 3816 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 457:
#line 3827 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 458:
#line 3847 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 459:
#line 3857 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 460:
#line 3867 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 461:
#line 3879 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 462:
#line 3896 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 463:
#line 3915 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 464:
#line 3939 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 465:
#line 3968 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 466:
#line 3973 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 467:
#line 3977 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 468:
#line 3981 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 469:
#line 3994 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 470:
#line 3998 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 471:
#line 4010 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 472:
#line 4017 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 473:
#line 4039 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 474:
#line 4043 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 475:
#line 4058 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 476:
#line 4063 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 477:
#line 4070 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 478:
#line 4074 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 479:
#line 4082 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 480:
#line 4090 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 481:
#line 4104 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 482:
#line 4108 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 483:
#line 4127 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 484:
#line 4143 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4160 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
