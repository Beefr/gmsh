
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tIntersect	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tColorTable	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tMesh	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.71 2001-02-12 17:38:03 geuzaine Exp $

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 69 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1487
#define	YYFLAG		-32768
#define	YYNTBASE	182

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 263)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   167,     2,     2,   174,
   175,   165,   163,   179,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   181,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   949,   951,   953,   955,   957,   959,   961,   966,   974,   981,
   985,   992,   999,  1009,  1016,  1026,  1032,  1041,  1050,  1062,
  1072,  1080,  1089,  1102,  1109,  1115,  1123,  1131,  1144,  1152,
  1162,  1180,  1188,  1197,  1206,  1214,  1226,  1232,  1241,  1254,
  1263,  1286,  1307,  1316,  1325,  1331,  1340,  1348,  1357,  1363,
  1375,  1381,  1391,  1393,  1395,  1397,  1398,  1401,  1406,  1411,
  1418,  1422,  1426,  1430,  1433,  1436,  1443,  1452,  1461,  1472,
  1474,  1477,  1479,  1483,  1488,  1490,  1499,  1512,  1521,  1534,
  1543,  1556,  1568,  1584,  1586,  1589,  1599,  1602,  1609,  1619,
  1629,  1638,  1647,  1656,  1663,  1668,  1671,  1674,  1676,  1679,
  1681,  1683,  1685,  1687,  1689,  1691,  1695,  1698,  1701,  1704,
  1708,  1712,  1716,  1720,  1724,  1728,  1732,  1736,  1740,  1744,
  1748,  1752,  1756,  1760,  1766,  1771,  1776,  1781,  1786,  1791,
  1796,  1801,  1806,  1811,  1816,  1823,  1828,  1833,  1838,  1843,
  1848,  1853,  1860,  1867,  1874,  1879,  1881,  1883,  1885,  1890,
  1893,  1899,  1903,  1910,  1915,  1923,  1927,  1933,  1935,  1938,
  1941,  1945,  1949,  1961,  1971,  1979,  1987,  1988,  1992,  1994,
  1998,  1999,  2003,  2007,  2009,  2013,  2014,  2016,  2020,  2024,
  2026,  2028,  2032,  2036,  2040,  2046,  2056,  2064,  2070,  2072,
  2078,  2082,  2089,  2091,  2095,  2097,  2102
};

static const short yyrhs[] = {   184,
     0,   183,     0,   189,     0,     1,     6,     0,   140,     0,
   143,   144,   246,   246,   246,   145,   146,   142,   246,   246,
   246,   142,   246,   246,   246,   142,   246,   246,   246,   147,
   148,     0,   141,     0,     0,   184,   185,     0,   186,     0,
   188,     0,   187,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   174,   253,   179,     5,   175,     6,     0,   120,   174,   253,
   175,     6,     0,   121,   174,     5,   179,     5,   179,   253,
   179,   253,   179,     5,   179,     5,   179,     5,   175,     6,
     0,     3,     7,    98,   174,     5,   179,   251,   175,     6,
     0,     3,     7,    97,   174,     5,   179,   248,   179,   257,
   179,   247,   179,   247,   179,   247,   179,   257,   179,   257,
   179,   247,   175,     6,     0,     3,     7,    96,   174,     5,
   179,   248,   179,   248,   179,   255,   179,   247,   179,   247,
   179,   247,   179,   247,   179,   257,   179,   257,   179,   257,
   179,   257,   179,   247,   175,     6,     0,     3,     7,   104,
   174,     5,   179,     3,   179,     3,   179,     3,   179,   247,
   175,     6,     0,     3,     7,   108,   174,     5,   179,     3,
   179,   247,   175,     6,     0,     3,     7,   125,   174,     5,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   106,
   174,     5,   179,   165,   179,   165,   179,   248,   179,   247,
   175,     6,     0,     3,     7,   109,   174,     5,   179,   257,
   175,     6,     0,     3,     7,   110,   174,     5,   179,   257,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   105,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   111,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   113,   174,     5,   179,     3,   179,     3,   179,     3,
   175,     6,     0,     3,     7,   112,   174,     5,   179,   251,
   175,     6,     0,     3,     7,   107,   174,     5,   179,     3,
   175,     6,     0,     3,     7,    37,   174,     5,   179,     3,
   179,     3,   175,     6,     0,     3,     7,   123,   174,     5,
   179,   257,   175,     6,     0,     3,     7,   124,   174,     5,
   179,   257,   179,     3,   175,     6,     0,     3,     7,   122,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   126,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   127,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   134,   174,     5,   179,     3,
   179,   248,   179,   248,   175,     6,     0,     3,     7,   128,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   138,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   129,   174,     5,   179,     3,
   179,   257,   179,   257,   179,   247,   179,   247,   175,     6,
     0,     3,     7,   130,   174,     5,   179,   257,   175,     6,
     0,     3,     7,   131,   174,   132,   179,   247,   179,     3,
   175,     6,     0,     3,     7,   133,   174,     5,   179,   257,
   179,   247,   175,     6,     0,     3,     7,   135,   174,     5,
   179,     5,   179,     3,   179,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   179,     5,   179,     3,   175,     6,
     0,     3,     7,   137,   174,     3,   179,     3,   175,     6,
     0,     0,   189,   190,     0,   192,     0,   191,     0,   232,
     0,   233,     0,   234,     0,   237,     0,   238,     0,   241,
     0,   244,     0,   245,     0,   240,     0,   239,     0,    31,
   174,     5,   175,     6,     0,    31,   174,     5,   179,   258,
   175,     6,     0,     4,     5,   180,   193,   181,     6,     0,
     4,     5,     4,   251,   180,   193,   181,     6,     0,     0,
   193,   195,     0,   193,   198,     0,   193,   201,     0,   193,
   204,     0,   193,   207,     0,   193,   210,     0,   193,   213,
     0,   193,   216,     0,   193,   219,     0,   193,   222,     0,
   193,   225,     0,   193,   228,     0,   248,     0,   194,   179,
   248,     0,     0,    75,   174,   248,   179,   248,   179,   248,
   175,   196,   180,   194,   181,     6,     0,   248,     0,   197,
   179,   248,     0,     0,    76,   174,   248,   179,   248,   179,
   248,   175,   199,   180,   197,   181,     6,     0,   248,     0,
   200,   179,   248,     0,     0,    77,   174,   248,   179,   248,
   179,   248,   175,   202,   180,   200,   181,     6,     0,   248,
     0,   203,   179,   248,     0,     0,    72,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   205,   180,   203,   181,     6,     0,   248,     0,   206,   179,
   248,     0,     0,    73,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   208,   180,   206,
   181,     6,     0,   248,     0,   209,   179,   248,     0,     0,
    74,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   175,   211,   180,   209,   181,     6,     0,
   248,     0,   212,   179,   248,     0,     0,    69,   174,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   214,   180,   212,
   181,     6,     0,   248,     0,   215,   179,   248,     0,     0,
    70,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   217,   180,   215,   181,     6,     0,   248,     0,   218,   179,
   248,     0,     0,    71,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   175,   220,   180,   218,   181,     6,     0,   248,
     0,   221,   179,   248,     0,     0,    66,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   175,   223,   180,   221,   181,     6,     0,   248,     0,
   224,   179,   248,     0,     0,    67,   174,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   175,   226,   180,   224,   181,     6,     0,   248,     0,   227,
   179,   248,     0,     0,    68,   174,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   229,   180,   227,   181,     6,     0,     7,     0,   149,     0,
   150,     0,   151,     0,   152,     0,   170,     0,   171,     0,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   230,
   248,     6,     0,     4,   176,   177,     7,   257,     6,     0,
     4,   231,     6,     0,     4,   176,   248,   177,   231,     6,
     0,     4,   178,     4,     7,     5,     6,     0,     4,   176,
   248,   177,   178,     4,     7,     5,     6,     0,     4,   178,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   178,
     4,   230,   248,     6,     0,     4,   178,     4,   231,     6,
     0,     4,   176,   248,   177,   178,     4,   231,     6,     0,
     4,   178,    84,   178,     4,     7,   259,     6,     0,     4,
   176,   248,   177,   178,    84,   178,     4,     7,   259,     6,
     0,     4,   176,   248,   177,   178,    85,     7,   260,     6,
     0,    34,   174,   248,   175,     7,   251,     6,     0,    49,
    34,   174,   248,   175,     7,   257,     6,     0,    64,    34,
   257,     7,   180,   248,   179,   248,   179,   248,   181,     6,
     0,    41,    42,   257,     7,   248,     6,     0,    34,   180,
   248,   181,     6,     0,    37,   174,   248,   175,     7,   257,
     6,     0,    39,   174,   248,   175,     7,   257,     6,     0,
    64,    37,   257,     7,   180,   248,   179,   248,   179,   248,
   181,     6,     0,    35,   174,   248,   175,     7,   257,     6,
     0,    35,   174,   248,   175,     7,   257,    45,   251,     6,
     0,    43,   174,   248,   175,     7,   180,   248,   179,   248,
   179,     5,   179,     5,   179,     5,   181,     6,     0,    36,
   174,   248,   175,     7,   257,     6,     0,    49,    37,   174,
   248,   175,     7,   257,     6,     0,    37,    59,   174,   248,
   175,     7,   257,     6,     0,    78,   174,   248,   175,     7,
   257,     6,     0,    79,   174,   248,   175,     7,   257,    83,
   257,    80,   248,     6,     0,    37,   180,   248,   181,     6,
     0,    45,    38,   174,   248,   175,     7,   257,     6,     0,
   139,    38,   174,   248,   175,     7,   180,   248,   179,   257,
   181,     6,     0,    46,    38,   174,   248,   175,     7,   257,
     6,     0,    79,    38,    81,    82,   174,   248,   175,     7,
   255,    83,   180,   257,   179,   257,   181,    80,   180,   248,
   179,   248,   181,     6,     0,    79,    38,   174,   248,   175,
     7,   255,    83,   180,   257,   179,   257,   181,    80,   180,
   248,   179,   248,   181,     6,     0,    49,    38,   174,   248,
   175,     7,   257,     6,     0,    38,    59,   174,   248,   175,
     7,   257,     6,     0,    38,   180,   248,   181,     6,     0,
    48,    40,   174,   248,   175,     7,   257,     6,     0,    40,
   174,   248,   175,     7,   257,     6,     0,    49,    40,   174,
   248,   175,     7,   257,     6,     0,    54,   251,   180,   235,
   181,     0,    53,   180,   251,   179,   251,   179,   248,   181,
   180,   235,   181,     0,    55,   251,   180,   235,   181,     0,
    56,   180,   251,   179,   248,   181,   180,   235,   181,     0,
   237,     0,   236,     0,   234,     0,     0,   236,   233,     0,
    58,   180,   236,   181,     0,    61,   180,   236,   181,     0,
    61,     4,   176,   248,   177,     6,     0,    61,    95,     6,
     0,     4,   262,     6,     0,     4,   248,     6,     0,    91,
     6,     0,    33,     6,     0,    86,   174,   248,     8,   248,
   175,     0,    86,   174,   248,     8,   248,     8,   248,   175,
     0,    86,     4,    87,   180,   248,     8,   248,   181,     0,
    86,     4,    87,   180,   248,     8,   248,     8,   248,   181,
     0,    88,     0,    94,     4,     0,    92,     0,    93,     4,
     6,     0,    89,   174,   248,   175,     0,    90,     0,    57,
    34,   180,   248,   179,   251,   181,     6,     0,    57,    34,
   180,   248,   179,   251,   179,   251,   179,   248,   181,     6,
     0,    57,    37,   180,   248,   179,   251,   181,     6,     0,
    57,    37,   180,   248,   179,   251,   179,   251,   179,   248,
   181,     6,     0,    57,    38,   180,   248,   179,   251,   181,
     6,     0,    57,    38,   180,   248,   179,   251,   179,   251,
   179,   248,   181,     6,     0,    57,    38,   180,   248,   179,
   251,   181,   180,   242,   181,     6,     0,    57,    38,   180,
   248,   179,   251,   179,   251,   179,   248,   181,   180,   242,
   181,     6,     0,   243,     0,   242,   243,     0,    65,   180,
   257,   179,   257,   179,   257,   181,     6,     0,    60,     6,
     0,    47,    37,   257,     7,   248,     6,     0,    47,    37,
   257,     7,   248,    50,    52,   248,     6,     0,    47,    37,
   257,     7,   248,    50,    51,   248,     6,     0,    47,    38,
   180,   248,   181,     7,   257,     6,     0,    44,    38,   180,
   248,   181,     7,   257,     6,     0,    47,    40,   180,   248,
   181,     7,   257,     6,     0,    60,    38,   257,     7,   248,
     6,     0,    60,    38,   257,     6,     0,    62,     6,     0,
    63,     6,     0,     3,     0,   164,     3,     0,    99,     0,
   100,     0,   101,     0,   102,     0,   103,     0,   249,     0,
   174,   248,   175,     0,   164,   248,     0,   163,   248,     0,
   169,   248,     0,   248,   164,   248,     0,   248,   163,   248,
     0,   248,   165,   248,     0,   248,   166,   248,     0,   248,
   167,   248,     0,   248,   173,   248,     0,   248,   159,   248,
     0,   248,   161,   248,     0,   248,   160,   248,     0,   248,
   162,   248,     0,   248,   156,   248,     0,   248,   157,   248,
     0,   248,   155,   248,     0,   248,   154,   248,     0,   248,
   153,   248,     8,   248,     0,    10,   174,   248,   175,     0,
    11,   174,   248,   175,     0,    12,   174,   248,   175,     0,
    13,   174,   248,   175,     0,    14,   174,   248,   175,     0,
    15,   174,   248,   175,     0,    16,   174,   248,   175,     0,
    17,   174,   248,   175,     0,    18,   174,   248,   175,     0,
    20,   174,   248,   175,     0,    21,   174,   248,   179,   248,
   175,     0,    22,   174,   248,   175,     0,    23,   174,   248,
   175,     0,    24,   174,   248,   175,     0,    25,   174,   248,
   175,     0,    26,   174,   248,   175,     0,    27,   174,   248,
   175,     0,    28,   174,   248,   179,   248,   175,     0,    29,
   174,   248,   179,   248,   175,     0,    30,   174,   248,   179,
   248,   175,     0,    19,   174,   248,   175,     0,     3,     0,
     9,     0,     4,     0,     4,   176,   248,   177,     0,     4,
   231,     0,     4,   176,   248,   177,   231,     0,     4,   178,
     4,     0,     4,   176,   248,   177,   178,     4,     0,     4,
   178,     4,   231,     0,     4,   176,   248,   177,   178,     4,
   231,     0,   248,     8,   248,     0,   248,     8,   248,     8,
   248,     0,   252,     0,   164,   251,     0,   163,   251,     0,
   251,   164,   251,     0,   251,   163,   251,     0,   180,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   181,     0,
   180,   248,   179,   248,   179,   248,   179,   248,   181,     0,
   180,   248,   179,   248,   179,   248,   181,     0,   174,   248,
   179,   248,   179,   248,   175,     0,     0,   174,   254,   175,
     0,     5,     0,   254,   179,     5,     0,     0,   180,   256,
   181,     0,   174,   256,   175,     0,   257,     0,   256,   179,
   257,     0,     0,   248,     0,     4,   176,   177,     0,   180,
   258,   181,     0,   248,     0,   250,     0,     4,   176,   177,
     0,   258,   179,   248,     0,   258,   179,   250,     0,   258,
   179,     4,   176,   177,     0,   180,   248,   179,   248,   179,
   248,   179,   248,   181,     0,   180,   248,   179,   248,   179,
   248,   181,     0,   180,     4,   179,   248,   181,     0,     4,
     0,     4,   178,    84,   178,     4,     0,   180,   261,   181,
     0,     4,   176,   248,   177,   178,    85,     0,   259,     0,
   261,   179,   259,     0,     5,     0,    32,   174,     5,   175,
     0,    32,   174,     5,   179,   258,   175,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   150,   151,   152,   159,   167,   181,   193,   195,   198,
   200,   201,   204,   210,   215,   216,   217,   220,   224,   227,
   233,   238,   244,   252,   257,   261,   267,   272,   276,   281,
   285,   288,   293,   297,   301,   305,   310,   314,   317,   321,
   325,   329,   333,   337,   341,   344,   348,   351,   355,   358,
   367,   371,   377,   379,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   392,   397,   425,   431,   438,   443,
   444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
   454,   457,   460,   464,   470,   476,   479,   483,   489,   495,
   498,   502,   508,   514,   517,   521,   529,   535,   538,   542,
   550,   556,   559,   563,   571,   577,   580,   584,   596,   602,
   605,   609,   621,   627,   630,   634,   646,   652,   655,   659,
   672,   678,   681,   685,   698,   704,   707,   711,   724,   736,
   738,   739,   740,   741,   743,   745,   747,   778,   812,   826,
   835,   850,   862,   876,   899,   923,   935,   949,   961,   973,
   994,  1005,  1011,  1030,  1041,  1049,  1055,  1061,  1080,  1086,
  1102,  1109,  1115,  1121,  1127,  1133,  1152,  1164,  1170,  1189,
  1210,  1218,  1224,  1230,  1236,  1248,  1254,  1260,  1272,  1278,
  1283,  1288,  1295,  1297,  1298,  1301,  1306,  1317,  1335,  1343,
  1348,  1359,  1414,  1433,  1437,  1457,  1473,  1487,  1512,  1537,
  1563,  1569,  1574,  1579,  1583,  1593,  1599,  1605,  1609,  1613,
  1617,  1621,  1626,  1633,  1637,  1642,  1660,  1670,  1688,  1705,
  1722,  1743,  1763,  1783,  1800,  1824,  1829,  1840,  1842,  1845,
  1847,  1848,  1849,  1850,  1853,  1855,  1856,  1857,  1858,  1859,
  1860,  1861,  1862,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,
  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,
  1896,  1897,  1898,  1899,  1900,  1905,  1910,  1914,  1925,  1942,
  1953,  1972,  1988,  2004,  2020,  2037,  2044,  2057,  2062,  2066,
  2070,  2074,  2079,  2084,  2088,  2092,  2098,  2102,  2107,  2111,
  2116,  2120,  2124,  2130,  2136,  2142,  2146,  2152,  2167,  2174,
  2180,  2189,  2201,  2205,  2213,  2226,  2231,  2235,  2240,  2245,
  2263,  2268,  2285,  2294,  2300,  2305,  2309
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn",
"tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","SignedDouble","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","ColorExpr",
"ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   185,   186,   186,   186,   186,   186,   187,   187,   187,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   191,   191,   192,   192,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   196,   195,   197,   197,   199,   198,   200,
   200,   202,   201,   203,   203,   205,   204,   206,   206,   208,
   207,   209,   209,   211,   210,   212,   212,   214,   213,   215,
   215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
   222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
   230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   234,   234,
   234,   234,   235,   235,   235,   236,   236,   237,   238,   238,
   238,   239,   239,   239,   239,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   241,   241,   241,   241,   241,
   241,   241,   241,   242,   242,   243,   243,   244,   244,   244,
   244,   244,   244,   244,   244,   245,   245,   246,   246,   247,
   247,   247,   247,   247,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   249,   249,   249,   249,   249,
   249,   249,   249,   249,   249,   250,   250,   251,   251,   251,
   251,   251,   252,   252,   252,   252,   253,   253,   254,   254,
   255,   255,   255,   256,   256,   257,   257,   257,   257,   258,
   258,   258,   258,   258,   258,   259,   259,   259,   259,   259,
   260,   260,   261,   261,   262,   262,   262
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     1,     1,     1,     1,     1,     1,     4,     7,     6,     3,
     6,     6,     9,     6,     9,     5,     8,     8,    11,     9,
     7,     8,    12,     6,     5,     7,     7,    12,     7,     9,
    17,     7,     8,     8,     7,    11,     5,     8,    12,     8,
    22,    20,     8,     8,     5,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     4,     4,     6,
     3,     3,     3,     2,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     8,    12,     8,    12,     8,
    12,    11,    15,     1,     2,     9,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     2,     1,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     1,     1,     1,     4,     2,
     5,     3,     6,     4,     7,     3,     5,     1,     2,     2,
     3,     3,    11,     9,     7,     7,     0,     3,     1,     3,
     0,     3,     3,     1,     3,     0,     1,     3,     3,     1,
     1,     3,     3,     3,     5,     9,     7,     5,     1,     5,
     3,     6,     1,     3,     1,     4,     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   200,     0,   205,     0,   202,     0,
     0,     0,    52,    54,    53,    55,    56,    57,    58,    59,
    64,    63,    60,    61,    62,   228,     0,     0,     0,    13,
    14,    16,    15,    17,   297,   297,     0,   276,   278,   325,
   130,   277,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   131,   132,   133,   134,     0,     0,
     0,   135,   136,     0,     0,     0,     0,     0,     0,   235,
     0,     0,   195,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,     0,     0,     0,   306,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   288,     0,     0,     0,     0,     0,   186,
   306,     0,     0,   186,   226,   227,   306,   306,     0,     0,
     0,     0,     0,     0,   194,     0,   201,     0,   229,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   280,     0,    69,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   238,   237,   239,     0,     0,     0,     0,     0,     0,
   140,   193,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   278,     0,   307,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   290,   289,     0,
     0,     0,     0,   186,   186,     0,     0,     0,     0,     0,
     0,     0,   191,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   203,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   236,   306,     0,
   130,     0,     0,     0,   137,     0,   253,   252,   250,   251,
   246,   248,   247,   249,   241,   240,   242,   243,   244,   245,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   278,   310,   311,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   292,   291,   185,     0,   184,   183,
     0,     0,     0,     0,     0,   188,   187,   225,     0,     0,
   189,     0,     0,     0,     0,     0,     0,     0,     0,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   298,     0,     0,    19,     0,   279,   284,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   275,   264,     0,   266,   267,   268,
   269,   270,   271,     0,     0,     0,   326,     0,     0,     0,
     0,     0,     0,     0,   146,     0,     0,    65,     0,     0,
   155,   306,   306,     0,   306,   167,     0,   175,   306,   306,
   308,     0,     0,     0,   309,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   179,   181,     0,     0,     0,     0,     0,     0,     0,
     0,   306,     0,     0,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   306,   306,
     0,     0,     0,     0,   306,   306,     0,     0,     0,     0,
     0,   306,     0,   306,     0,     0,     0,     0,     0,   300,
     0,   297,     0,   281,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    67,     0,     0,
     0,     0,     0,   139,     0,     0,     0,     0,   141,   142,
   144,     0,   254,     0,     0,     0,     0,   306,     0,   306,
     0,     0,   312,   286,   278,   313,   314,   154,     0,   306,
   306,   306,   218,     0,   306,   306,   306,   306,   306,   306,
   306,     0,     0,     0,     0,     0,     0,     0,   224,   190,
     0,     0,     0,     0,   301,     0,     0,     0,   196,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   230,   231,   232,   233,   234,     0,
     0,     0,     0,     0,     0,     0,    18,     0,   283,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   265,   272,   273,   274,   327,   130,     0,     0,
     0,     0,   138,   319,     0,     0,    66,   151,   159,     0,
   162,     0,   156,     0,   157,   177,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   186,     0,     0,     0,     0,     0,
     0,     0,     0,   165,     0,   306,   306,     0,   306,     0,
     0,     0,     0,     0,     0,   306,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,     0,     0,     0,     0,
     0,     0,     0,   297,   285,    68,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   147,     0,     0,     0,     0,     0,   278,     0,   148,     0,
   164,   174,   287,   315,     0,   222,   168,   170,     0,     0,
   221,   223,   176,   152,   163,   173,   178,     0,   296,     0,
   295,     0,     0,   206,     0,   208,     0,   210,     0,     0,
     0,   301,     0,   304,     0,     0,     0,     0,   198,   197,
     0,     0,     0,     0,     0,    21,     0,    30,     0,    34,
     0,    28,     0,     0,    33,     0,    38,    36,     0,     0,
     0,     0,     0,     0,    45,     0,     0,     0,     0,     0,
    50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   143,   145,     0,     0,   323,
     0,   150,     0,     0,     0,   160,     0,   220,   219,   186,
     0,   182,     0,     0,     0,     0,     0,     0,   214,     0,
     0,     0,   303,   306,   302,   306,     0,     0,   306,     0,
     0,   301,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
     0,     0,     0,     0,   294,     0,     0,     0,   217,   306,
     0,   215,     0,     0,     0,   305,     0,     0,   199,     0,
     0,    35,     0,     0,     0,     0,    25,     0,    31,     0,
    37,    26,    39,     0,    42,     0,    46,    47,     0,     0,
    49,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   149,     0,   324,   320,   318,
     0,     0,   180,     0,     0,     0,     0,     0,   212,     0,
     0,   306,   306,   166,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    84,    88,    92,
     0,     0,     0,   293,   207,   209,   211,     0,   306,   153,
   158,     0,     0,   169,     0,     0,     0,     0,     0,    29,
    32,    40,     0,    41,    48,    43,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     0,   317,     0,     0,     0,   306,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   306,
     0,     0,     0,     0,     0,    24,    27,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    82,
     0,    86,     0,    90,   316,     0,   213,     0,     0,     0,
     0,     0,   306,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    44,    20,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,    85,
    87,    89,    91,    93,   161,   216,     0,     0,     0,     0,
   306,     0,     0,     0,     0,     0,     0,    96,   100,   104,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     6,   306,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
     0,    98,     0,   102,     0,   306,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   171,
     0,    22,     0,     0,     0,     0,     0,     0,    95,    97,
    99,   101,   103,   105,   306,     0,     0,     0,   108,   112,
   116,     0,     0,     0,     0,     0,     0,     0,   306,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   106,     0,   110,     0,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   107,
   109,   111,   113,   115,   117,     0,   120,   124,   128,    23,
     0,     0,     0,     0,     0,     0,     0,   118,     0,   122,
     0,   126,     0,     0,     0,     0,     0,     0,   119,   121,
   123,   125,   127,   129,     0,     0,     0
};

static const short yydefgoto[] = {  1485,
     5,     6,    19,    20,    21,    22,     7,    63,    64,    65,
   375,  1259,   534,  1207,  1261,   535,  1208,  1263,   536,  1209,
  1369,   537,  1342,  1371,   538,  1343,  1373,   539,  1344,  1430,
   540,  1416,  1432,   541,  1417,  1434,   542,  1418,  1467,   543,
  1461,  1469,   544,  1462,  1471,   545,  1463,   127,   227,    66,
   467,   457,   458,   459,   460,    70,    71,    72,    73,  1018,
  1019,    74,    75,    78,   770,   293,   130,   437,   163,   164,
   222,   368,   848,   943,   944,   438,   806,   905,  1001,   131
};

static const short yypact[] = {  2025,
    67,-32768,-32768,  -112,-32768,   235,  2171,-32768,     8,   111,
   124,   134,   183,   200,   225,   102,   114,   139,-32768,-32768,
-32768,-32768,   311,   145,   249,   -15,   194,   195,   -39,   -37,
   201,   204,   343,   221,   229,   260,   369,   117,   384,   512,
   265,   -32,   -32,   274,   199,   296,   403,     4,   444,   447,
    73,   284,   -24,     6,-32768,   309,-32768,   478,-32768,   511,
   531,   498,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   536,     8,  2193,-32768,
-32768,-32768,-32768,-32768,   370,   370,   542,-32768,   187,     2,
-32768,-32768,   394,   398,   402,   407,   414,   421,   425,   427,
   428,   429,   432,   433,   436,   437,   438,   439,   442,   443,
   445,   468,   482,   483,-32768,-32768,-32768,-32768,    65,    65,
    65,-32768,-32768,    65,   611,    19,    65,   552,   508,-32768,
   612,   653,-32768,    65,    65,    65,    65,   485,    65,    65,
   486,    65,    65,    65,    24,    65,   496,   503,   504,    24,
   499,   500,   510,   513,   514,   515,   516,   -32,   -32,   -32,
    65,    65,   -36,-32768,   -11,   -32,   502,   505,   518,-32768,
    24,   517,   685,-32768,-32768,-32768,    24,    24,    65,   -52,
    65,   605,    65,    65,-32768,   688,-32768,   521,-32768,     8,
   522,   528,   529,   530,   532,   533,   534,   535,   538,   539,
   543,   546,   547,   548,   549,   580,   592,   593,   594,   598,
   607,   609,   610,   613,   616,   617,   618,   619,   622,   623,
   700,   537,   595,   600,    65,   706,-32768,   -32,-32768,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
   781,   625,   625,   625,  4940,   800,  4840,   252,   639,   649,
-32768,-32768,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,-32768,   -50,  4963,
  1638,  4986,  5009,    65,  5032,  2179,    65,  2202,  5055,  5078,
   362,   715,  6412,   811,  5101,    65,    65,    65,   814,    65,
    65,    65,    65,    65,    65,    65,   129,-32768,-32768,  2593,
  2614,   -32,   -32,   141,   141,   198,    65,    65,    65,  1864,
    60,    65,-32768,  1910,   816,   817,  5124,   743,    65,  5147,
   646,   757,  5170,-32768,    65,   682,   823,   838,   839,   840,
   841,   843,   847,   848,   849,   850,   852,   853,   854,   856,
   857,   858,   871,   875,   876,   877,   878,   880,   881,   755,
   883,   885,   886,   900,   903,   904,-32768,    26,   910,   902,
   921,  4865,   115,   107,   424,  5193,  5216,  5239,  5262,  5285,
  5308,  5331,  5354,  5377,  5400,  5423,  2635,  5446,  5469,  5492,
  5515,  5538,  5561,  2656,  2677,  2698,    93,-32768,    24,   196,
   922,    65,   925,   924,-32768,  1661,   400,   674,   305,   305,
   340,   340,   340,   340,   144,   144,   625,   625,   625,   625,
   926,   715,   928,   927,   944,   945,  5584,   946,   948,  5607,
   951,   952,   953,  1063,   404,  1682,-32768,   -13,    65,   956,
  2225,  5630,  5653,    65,  2248,  2271,  5676,  5699,  5722,  5745,
  5768,   -32,    65,    65,-32768,-32768,-32768,   777,  1956,-32768,
   785,    65,  2719,  2740,  2761,-32768,-32768,-32768,    65,  4890,
-32768,   788,   790,   965,   791,  5791,   966,    65,    65,-32768,
  5814,   828,   796,   798,   799,   801,   804,   805,   806,   807,
   808,   809,   810,   815,   821,   822,   824,   826,   830,   831,
   832,   834,   835,   836,   842,   844,   845,   863,   864,   865,
   866,   867,-32768,   974,   818,-32768,   868,  -107,-32768,-32768,
   833,   855,   874,   879,   882,   884,   887,   888,   889,   890,
   891,   894,   989,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    65,-32768,-32768,-32768,
-32768,-32768,-32768,    65,    65,    65,-32768,   715,   990,    52,
    65,   996,  1000,   783,-32768,  1010,    65,-32768,   185,   -32,
-32768,    24,    24,  1011,    24,-32768,  1012,-32768,    24,    24,
-32768,  1503,    65,  1559,-32768,   958,   846,  1015,  1020,  1042,
   364,  1043,  1045,  1047,  1048,  1050,  1052,  1053,   233,  2782,
  2803,-32768,-32768,  2294,   -32,   -32,   -32,   993,  1064,    65,
    65,    24,    65,  1062,    24,  1706,   596,  1087,   954,  1092,
    65,    65,   -32,  1094,  1095,   934,  1097,  1098,    24,    24,
  1099,   -32,  1100,  1101,    24,    24,  1102,  1103,  1104,  1106,
  1113,    24,   409,    24,  1124,  1123,  1125,  1126,  1129,-32768,
  1127,   370,  1130,-32768,   827,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,-32768,  5837,  5860,
  5883,  5906,   230,-32768,   277,   957,  1138,  1120,-32768,-32768,
-32768,     3,  6412,  1145,     7,    20,  1155,    24,  1156,    24,
  1157,  1158,-32768,  1721,   408,  1682,-32768,-32768,    65,    24,
    24,    24,-32768,   253,    24,    24,    24,    24,    24,    24,
    24,    65,    65,    65,   985,   -55,   -30,     0,-32768,-32768,
  2824,  2845,  1161,  5929,    -7,  1086,    65,    65,-32768,   991,
     8,   994,  2866,  2887,  -105,   995,   997,   998,  1001,   999,
  1004,  1002,  1003,  -103,  1005,  1014,  1016,  1006,  1007,  1008,
  1013,  1018,  1019,  1024,-32768,-32768,-32768,-32768,-32768,  1021,
  1022,  1035,  1036,  1037,  1044,  1038,-32768,  1039,   115,  1164,
  2908,  2929,  2950,  2971,  2992,  3013,  3034,  3055,  3076,  3097,
  3118,  3139,-32768,-32768,-32768,-32768,-32768,  1170,    65,  1174,
  1186,     5,-32768,  1017,  1587,  1187,-32768,-32768,-32768,   -32,
-32768,  1188,-32768,  1215,-32768,-32768,    65,  1531,  3160,  1216,
  1217,  1218,    65,    65,  1219,  1222,  1223,  1224,  1225,  1227,
  1228,  2317,  5952,  1581,   141,   -32,  1229,   -32,  1230,   -32,
    11,    65,    65,-32768,  1231,    24,    24,  1159,    24,   227,
  5975,    65,     8,  1236,    65,    24,  1235,  1240,  1238,  1080,
  1242,   409,  1243,  1247,    65,  1245,  1249,  1257,  1259,  1264,
   409,    65,    65,    65,    24,  1262,  1266,   409,    65,  1267,
  1268,  1272,    65,   370,-32768,-32768,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,  1282,  1302,
-32768,  1239,  1096,     3,  1283,  1206,    87,  3181,-32768,    13,
-32768,-32768,  6412,-32768,    65,-32768,-32768,-32768,  1465,  1491,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1111,-32768,    65,
-32768,  1115,   254,-32768,   256,-32768,   273,-32768,    40,  3202,
  3223,    -7,   231,-32768,    51,  1112,  1226,    65,-32768,-32768,
  3244,     8,  1122,  3265,  1119,-32768,  1128,-32768,  1131,-32768,
  1134,-32768,  1132,  5998,-32768,  1133,-32768,-32768,  1139,  1140,
  6021,  3286,  6044,  1137,-32768,  1142,  1143,  3307,  1141,  1144,
-32768,  3328,  1146,  3349,  3370,  3391,  3412,  3433,  3454,  3475,
  3496,  3517,  3538,  3559,  3580,-32768,-32768,     3,    65,-32768,
    81,-32768,  1135,    65,    65,-32768,  3601,-32768,-32768,   141,
  2017,-32768,    65,    65,    65,  1299,  1160,   -35,-32768,    65,
    65,  1241,-32768,    24,-32768,    24,    65,  2340,    24,  1179,
  1317,    -7,   409,  1323,    65,  1330,   409,  1331,  1335,  1333,
  1336,  1337,    65,  1338,    24,  1339,  1340,    65,  1344,  1342,
    65,  1345,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,  1343,  4915,     3,-32768,  1347,  2363,
  3622,  1348,  1171,    65,-32768,  2386,  2409,  2432,-32768,    24,
  1356,-32768,  2455,  2478,  1184,-32768,  1162,  1617,-32768,  1173,
     8,-32768,  1189,  1191,  1192,  3643,-32768,  1197,-32768,  1200,
-32768,-32768,-32768,  6067,-32768,  1198,-32768,-32768,  6090,  1201,
-32768,  6113,  1199,  3664,  3685,  3706,  3727,  3748,  3769,  3790,
  3811,  3832,  6136,  6159,  6182,-32768,  1202,-32768,-32768,-32768,
    65,  1203,-32768,  2501,  1373,  1375,    12,  1207,-32768,  1381,
  1382,    24,    24,-32768,  1383,     8,   409,   409,   409,   409,
  1384,  1385,  1386,   409,  1387,  1388,  1389,  1391,    65,    65,
    65,    65,    65,    65,    65,    65,    65,-32768,-32768,-32768,
  1318,  2113,  1399,-32768,-32768,-32768,-32768,    40,    24,-32768,
-32768,  1232,  1237,-32768,     8,  1233,  1234,  1250,  1251,-32768,
-32768,-32768,  1248,-32768,-32768,-32768,  1252,  3853,  3874,  3895,
  3916,  3937,  3958,  3979,  4000,  4021,  1253,  1254,  1255,-32768,
    65,-32768,  1258,    -3,  1260,    24,  1325,  1265,   409,   409,
  1402,  1404,   409,  1415,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,  2524,  1417,  1422,    24,
  1263,  1269,     8,  1261,  1274,-32768,-32768,  1270,  1271,  4042,
  4063,  4084,  4105,  4126,  4147,  4168,  4189,  4210,   163,  6412,
   234,  6412,   261,  6412,-32768,  1279,-32768,  1289,  1352,    65,
     8,   409,    24,  1441,  1442,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,  1445,    65,  1466,    65,  1467,
  1468,  1470,  1297,  4231,     8,  1300,  1301,-32768,-32768,  4252,
  4273,  4294,  4315,  4336,  4357,  6205,  6228,  6251,  6412,-32768,
  6412,-32768,  6412,-32768,-32768,-32768,    65,    65,  1334,   409,
    24,    65,    65,    65,    65,    65,    65,-32768,-32768,-32768,
  4378,  2547,  1341,  1304,  1306,  4399,  4420,  4441,  4462,  4483,
  4504,  1298,  1307,  1308,    65,  1480,-32768,    24,   409,    65,
    65,    65,    65,    65,    65,    65,    65,    65,  2570,-32768,
  1311,  1316,  4525,  4546,  4567,  4588,  4609,  4630,   270,  6412,
   278,  6412,   298,  6412,  1486,    24,  1487,    65,    65,    65,
    65,    65,    65,    65,  1492,    65,  1502,    65,  1504,-32768,
  1332,-32768,  4651,  4672,  4693,  6274,  6297,  6320,  6412,-32768,
  6412,-32768,  6412,-32768,    24,    65,    65,    65,-32768,-32768,
-32768,  1357,  4714,  4735,  4756,  1329,  1358,  1359,    24,    65,
    65,    65,    65,    65,    65,  1413,  4777,  4798,  4819,   307,
  6412,   372,  6412,   406,  6412,   409,    65,    65,    65,    65,
  1558,    65,  1560,    65,  1561,  1362,  6343,  6366,  6389,  6412,
-32768,  6412,-32768,  6412,-32768,  1588,-32768,-32768,-32768,-32768,
  1454,  1455,  1456,    65,    65,    65,   411,  6412,   412,  6412,
   415,  6412,    65,  1589,    65,  1631,    65,  1633,  6412,-32768,
  6412,-32768,  6412,-32768,  1565,  1593,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1121,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -253,    -2,-32768,
  1635,  1636,  -313,   264,  1642,-32768,-32768,-32768,-32768,   484,
 -1014,-32768,-32768,   -75,  -847,   -23,-32768,  1066,   131,-32768,
   -85,-32768,  -887,   829,   784,  -406,  -892,-32768,-32768,-32768
};


#define	YYLAST		6585


static const short yytable[] = {   129,
   223,   461,   190,  1082,   402,   228,   804,   172,   903,   182,
    76,  1000,   808,   180,   961,   579,   938,  1177,  1006,   138,
   128,   141,   258,   970,  1016,   809,    88,   291,   328,  1017,
   977,     9,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,  1022,   685,  1016,   312,   313,   312,
   313,  1017,   122,   123,   810,   468,   469,    88,    89,   857,
   663,   866,     8,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   252,   253,   254,   173,  1016,
   255,   257,   259,   260,  1017,  1065,   177,   312,   313,   178,
   280,   281,   282,   283,   336,   285,   286,    79,   288,   289,
   290,   329,   295,   836,   421,   837,   312,   313,   422,    80,
   159,   160,   312,   313,   139,   686,   687,   310,   311,    81,
   140,   161,   142,   314,  1093,  1081,   571,   162,   838,   181,
   839,   312,   313,   150,   151,   327,   152,   330,   134,   332,
   333,   683,   312,   313,   135,   594,   846,   595,   315,   312,
   313,    77,   847,   165,  1128,   312,   313,  1239,   840,   183,
   841,   229,   805,   174,   904,  1094,   119,   120,    82,  1098,
   939,  1178,   121,    41,    42,    43,    44,   124,    46,  1082,
   513,   372,    91,   292,   514,    83,   376,   377,   378,   379,
   380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   119,   120,  1024,
    84,  1025,   167,   121,   948,   168,   169,    10,   124,   406,
   407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
   417,   418,   419,   420,   133,   403,   122,   123,   401,  1067,
   427,  1068,   225,   430,   226,  1004,   147,   567,   436,   312,
   313,   568,   441,   442,   443,    85,   445,   446,   447,   448,
   449,   450,   451,   798,   122,   123,   520,    86,   307,   308,
   309,   312,   313,   463,   464,   465,   316,   148,   470,  1186,
  1187,  1188,  1189,   823,   824,   476,  1193,   452,   274,   275,
   276,   481,    87,    88,    89,    90,   277,    91,   132,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,  1285,   114,  1286,   115,   116,   117,   118,    11,    12,
    13,    14,    15,    16,    17,    18,   122,   123,   374,   694,
   312,   313,   225,   594,   226,   122,   123,   136,   137,   713,
   519,  1244,  1245,   570,   143,  1248,   462,   144,   574,   263,
   264,   265,   266,   267,   145,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   146,   312,   313,   572,   436,   277,
   115,   116,   117,   118,   797,  1023,   149,   949,   594,  1024,
   372,   722,  1287,   714,  1288,   596,   312,   313,   312,   313,
   601,   122,   123,   153,  1296,   115,   116,   117,   118,   610,
   611,   799,  1013,   320,  1014,   312,   313,   324,   614,  1289,
   171,  1290,   455,   456,   158,   618,   122,   123,  1384,   175,
  1385,  1015,   176,   166,   626,   627,  1386,   179,  1387,   115,
   116,   117,   118,   268,   269,   270,   271,   272,   273,   274,
   275,   276,  1334,   119,   120,   170,  1388,   277,  1389,   121,
   122,   123,   184,   185,   124,  1440,   125,  1441,   126,   521,
   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
   532,  1362,   272,   273,   274,   275,   276,   765,   766,   767,
   768,   769,   277,   262,   186,   664,   263,   264,   265,   266,
   267,   932,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   122,   123,   679,   187,   188,   277,   434,   189,   226,
   680,   681,   682,   221,   436,   154,   224,   688,   155,   156,
  1442,   157,  1443,   693,   265,   266,   267,   261,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   230,   372,   704,
   706,   231,   277,   122,   123,   232,   778,   122,   123,   592,
   233,   226,   609,   818,  1444,   226,  1445,   234,  1446,  1473,
  1475,  1474,  1476,  1477,   235,  1478,   731,   732,   236,   734,
   237,   238,   239,   738,   533,   240,   241,   743,   744,   242,
   243,   244,   245,    88,    89,   246,   247,   278,   248,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   249,   781,   782,   783,   784,   785,   786,   787,   788,
   789,   790,   791,   792,   405,   250,   251,   279,   284,   287,
   263,   264,   265,   266,   267,   853,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   296,   297,   298,   300,   301,
   277,   317,   800,   302,   318,   819,   303,   304,   305,   306,
   323,   331,   322,   334,   335,   337,  1073,   319,   832,   833,
   834,   338,   339,   340,   367,   341,   342,   343,   344,   373,
   695,   345,   346,   850,   851,   369,   347,    88,   435,   348,
   349,   350,   351,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   726,   727,   728,   263,   264,
   265,   266,   267,   352,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   745,   479,   353,   354,   355,   277,   370,
   739,   356,   754,   119,   120,   900,   885,   952,   371,   121,
   357,   908,   358,   359,   124,   397,   360,   256,   691,   361,
   362,   363,   364,   913,   372,   365,   366,   277,   983,   919,
   920,   263,   264,   265,   266,   267,   399,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   404,   439,   940,   941,
   444,   277,   472,   473,   475,   478,   482,   483,   951,   266,
   267,   954,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   964,   484,   485,   486,   487,   277,   488,   971,   972,
   973,   489,   490,   491,   492,   978,   493,   494,   495,   982,
   496,   497,   498,   984,   985,   986,   987,   988,   989,   990,
   991,   992,   993,   994,   995,   499,  1030,   119,   120,   500,
   501,   502,   503,   121,   504,   505,   506,   507,   124,   508,
   509,  1007,   521,   522,   523,   524,   525,   526,   527,   528,
   529,   530,   531,   532,   510,   511,  1011,   516,   512,   263,
   264,   265,   266,   267,   515,   268,   269,   270,   271,   272,
   273,   274,   275,   276,  1028,   517,   573,   576,   294,   277,
   575,   578,   581,   299,   580,   263,   264,   265,   266,   267,
   910,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   582,   583,   585,   586,   321,   277,   588,   612,   589,   590,
   325,   326,   597,   708,   623,   613,   933,   620,   935,   621,
   937,   622,   625,   629,   630,  1066,   631,   632,   660,   633,
  1070,  1071,   634,   635,   636,   637,   638,   639,   640,  1076,
  1077,  1078,   661,   641,   678,   684,  1083,  1084,   729,   642,
   643,   689,   644,  1088,   645,   690,   666,   780,   646,   647,
   648,  1096,   649,   650,   651,  1146,   692,   698,   700,  1104,
   652,   710,   653,   654,  1109,   709,   711,  1112,   667,  1114,
  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,
  1125,   655,   656,   657,   658,   659,   662,   668,   712,   715,
  1134,   716,   669,   717,   718,   670,   719,   671,   720,   721,
   672,   673,   674,   675,   676,    88,    89,   677,   735,   730,
  1185,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   740,   742,   741,   746,   747,   748,   749,
   750,   753,   755,   756,   759,   760,   761,  1172,   762,  1218,
   263,   264,   265,   266,   267,   763,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   803,   772,   773,   775,   774,
   277,   776,   777,   779,   801,  1198,  1199,  1200,  1201,  1202,
  1203,  1204,  1205,  1206,   802,   263,   264,   265,   266,   267,
   807,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   811,   813,   815,   816,   835,   277,   844,  1271,   849,   886,
   852,   859,   854,   858,   899,   861,   860,   862,   863,   901,
   864,   865,   569,   867,   870,   871,   872,  1237,   868,   902,
   869,   873,   909,   911,   906,  1295,   874,   875,   876,   877,
   878,  1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,  1258,
  1260,  1262,  1264,   879,   880,   881,   883,   884,   882,  1319,
   912,   916,   917,   918,   921,   119,   120,   922,   923,   924,
   925,   121,   926,   927,   934,   936,   124,   942,   953,   591,
   956,   946,   957,   958,   959,   998,  1294,   960,   962,   963,
   965,   966,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,
  1308,  1309,   967,  1311,   968,  1313,   969,   975,   976,   979,
   980,   999,   263,   264,   265,   266,   267,   981,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   996,  1002,  1003,
  1010,  1026,   277,  1331,  1332,  1012,  1031,  1033,  1336,  1337,
  1338,  1339,  1340,  1341,  1079,  1027,  1034,   997,  1036,  1035,
  1037,  1039,  1069,  1040,  1041,  1045,  1046,  1047,  1050,  1049,
  1091,  1359,  1092,  1085,  1052,  1095,  1363,  1364,  1365,  1366,
  1367,  1368,  1370,  1372,  1374,  1097,  1099,  1100,  1101,  1080,
  1143,  1102,  1103,  1105,  1107,  1108,  1110,  1111,  1126,  1113,
  1129,  1133,  1132,  1145,  1393,  1394,  1395,  1396,  1397,  1398,
  1399,  1139,  1401,  1142,  1403,   696,   697,  1147,   699,  1148,
  1149,  1151,   701,   702,  1152,  1156,  1154,  1158,  1175,  1171,
  1176,  1173,  1413,  1414,  1415,  1179,  1180,  1181,  1184,  1190,
  1191,  1192,  1194,  1195,  1196,  1197,  1427,  1428,  1429,  1431,
  1433,  1435,  1210,  1213,  1242,   733,  1243,  1246,   736,  1247,
  1216,  1219,  1220,  1447,  1448,  1449,  1450,  1217,  1452,  1249,
  1454,  1266,   751,   752,  1221,  1222,  1223,  1267,   757,   758,
  1224,  1293,  1234,  1235,  1236,   764,  1238,   771,  1240,  1272,
  1468,  1470,  1472,  1269,  1274,  1275,  1298,  1299,  1270,  1479,
  1310,  1481,  1273,  1483,   263,   264,   265,   266,   267,  1291,
   268,   269,   270,   271,   272,   273,   274,   275,   276,  1292,
  1008,  1312,  1314,  1315,   277,  1316,  1317,  1356,  1320,  1321,
  1333,   812,  1348,   814,  1349,  1360,  1357,  1358,  1347,  1376,
  1377,  1390,  1392,   820,   821,   822,  1009,  1400,   825,   826,
   827,   828,   829,   830,   831,    88,    89,  1402,  1423,  1404,
  1405,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,    88,    89,  1419,  1456,  1424,  1425,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    88,   705,  1451,  1486,  1453,  1455,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,    88,
   907,  1436,  1487,  1460,  1480,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   263,   264,   265,
   266,   267,  1144,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   947,  1464,  1465,  1466,  1482,   277,  1484,   955,
   665,    67,    68,   263,   264,   265,   266,   267,    69,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   974,   707,
     0,  1214,     0,   277,     0,   119,   120,     0,   577,     0,
     0,   121,     0,     0,     0,   945,   124,     0,     0,   703,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
     0,     0,     0,   119,   120,     0,     0,     0,     0,   121,
     0,     0,     0,     0,   124,     0,     0,   914,     0,     0,
     0,     0,     0,   737,     0,     0,     0,     0,     0,     0,
     0,   119,   120,     0,     0,     0,     0,   121,   817,     0,
     0,     0,   124,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,   119,
   120,     0,     0,   277,     0,   121,     0,     0,     0,   930,
   124,   931,     0,     0,     0,     0,     0,     0,     0,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,  1086,     0,  1087,
   277,     0,  1090,   263,   264,   265,   266,   267,   424,   268,
   269,   270,   271,   272,   273,   274,   275,   276,  1106,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,     0,     0,   263,   264,
   265,   266,   267,  1138,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   263,   264,   265,   266,   267,   277,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,    26,    27,    28,
    29,    30,    31,    32,    33,     0,    34,     0,    36,    37,
     0,    39,    40,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1182,  1183,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    52,    53,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,     0,    36,    37,     0,    39,    40,     0,
     0,     0,  1215,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    52,    53,    26,
    27,    28,    29,    30,    31,    32,    33,     0,    34,  1241,
    36,    37,    62,    39,    40,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    51,
     0,     0,     0,  1268,    -8,     1,     0,    -8,   -51,     0,
     0,     0,     0,    52,    53,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   466,     0,     0,     0,    62,     0,
     0,     0,     0,     0,     0,   -51,  1297,   -51,   -51,   -51,
   -51,   -51,   -51,   -51,   -51,   -51,     0,   -51,   -51,   -51,
   -51,   -51,   -51,   -51,     0,     0,     0,   -51,   -51,   -51,
   -51,   -51,   -51,     0,   -51,   -51,   -51,   -51,   -51,     0,
   471,     0,     0,     0,    62,     0,     0,     0,     0,     0,
     0,     0,   -51,   -51,  1335,     0,     0,     0,     0,     0,
   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1361,     0,     0,     0,     0,     0,     0,    -8,    -8,
    -8,    -8,    -8,    -8,    -8,    -8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1391,
     0,     0,     0,   -51,     2,     3,     0,     4,     0,   263,
   264,   265,   266,   267,    23,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,  1412,   277,
     0,     0,     0,     0,     0,  1074,     0,  1075,     0,     0,
     0,    24,  1426,    25,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,    35,    36,    37,    38,    39,    40,
     0,     0,     0,    41,    42,    43,    44,    45,    46,   191,
    47,    48,    49,    50,    51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    52,    53,
     0,     0,     0,     0,     0,     0,    54,     0,    55,    56,
    57,    58,    59,    60,    61,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,     0,   192,   193,
   194,  1211,     0,  1212,     0,     0,   195,   196,   197,   198,
   199,   200,   201,   202,   203,   204,     0,     0,     0,    62,
     0,     0,     0,     0,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,     0,   215,   216,   217,   218,   219,
   220,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,     0,   263,   264,   265,   266,   267,   429,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,     0,   263,   264,   265,
   266,   267,   431,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
   263,   264,   265,   266,   267,   598,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,     0,   263,   264,   265,   266,   267,   602,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,   263,   264,   265,   266,
   267,   603,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,     0,   263,
   264,   265,   266,   267,   725,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,     0,   263,   264,   265,   266,   267,   928,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,   263,   264,   265,   266,   267,
  1089,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,     0,   263,   264,
   265,   266,   267,  1130,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
     0,   263,   264,   265,   266,   267,  1135,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,     0,   263,   264,   265,   266,   267,  1136,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,     0,   263,   264,   265,
   266,   267,  1137,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
   263,   264,   265,   266,   267,  1140,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,     0,   263,   264,   265,   266,   267,  1141,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,   263,   264,   265,   266,
   267,  1174,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,     0,   263,
   264,   265,   266,   267,  1265,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,     0,   263,   264,   265,   266,   267,  1346,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,   263,   264,   265,   266,   267,
  1375,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,   453,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,   454,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,   557,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,   564,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,   565,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,   566,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,   615,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,   616,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,   617,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
   723,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,   724,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,   842,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,   843,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,   855,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,   856,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,   887,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,   888,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,   889,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,   890,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
   891,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,   892,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,   893,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,   894,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,   895,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,   896,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,   897,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,   898,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,   915,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1005,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1020,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1021,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1029,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1032,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1043,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1048,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1051,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1053,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1054,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1055,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1056,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1057,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1058,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1059,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1060,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1061,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1062,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1063,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1064,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1072,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1131,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1150,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1159,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1160,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1161,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1162,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1163,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1164,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1165,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1166,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1167,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1225,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1226,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1227,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1228,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1229,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1230,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1231,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1232,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1233,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1276,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1277,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1278,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1279,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1280,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1281,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1282,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1283,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1284,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1318,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1322,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1323,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1324,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1325,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1326,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1327,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1345,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1350,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1351,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1352,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1353,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1354,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1355,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1378,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1379,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1380,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1381,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1382,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,   263,   264,   265,   266,   267,  1383,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,   263,   264,   265,   266,   267,  1406,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,   263,   264,   265,   266,   267,
  1407,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,   263,   264,   265,   266,
   267,  1408,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,   263,   264,   265,
   266,   267,  1420,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,   263,   264,
   265,   266,   267,  1421,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,   263,
   264,   265,   266,   267,  1422,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
   263,   264,   265,   266,   267,  1437,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,   263,   264,   265,   266,   267,  1438,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,   263,   264,   265,   266,   267,  1439,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   400,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   518,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   619,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,  1127,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   398,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   423,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   425,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   426,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   428,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   432,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   433,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   440,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   474,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   477,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   480,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   546,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   547,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   548,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   549,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   550,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   551,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   552,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   553,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   554,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   555,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   556,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   558,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   559,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   560,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   561,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   562,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   563,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   584,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   587,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   599,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   600,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   604,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   605,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   606,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   607,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   608,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   624,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   628,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   793,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   794,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   795,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   796,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   845,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   929,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   950,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,  1038,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,  1042,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,  1044,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,  1153,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,  1155,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,  1157,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
  1168,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,  1169,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,  1170,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,  1328,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,  1329,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,  1330,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,  1409,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,  1410,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,  1411,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,  1457,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
  1458,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,  1459,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277
};

static const short yycheck[] = {    23,
    86,   315,    78,  1018,   258,     4,     4,     4,     4,     4,
     3,   904,     6,    38,   862,   422,     6,     6,     6,    59,
    23,    59,     4,   871,    60,     6,     3,     4,    81,    65,
   878,   144,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   942,     4,    60,   163,   164,   163,
   164,    65,   170,   171,    45,     6,     7,     3,     4,   175,
   178,   175,     6,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   119,   120,   121,    95,    60,
   124,   125,    84,   127,    65,   998,    34,   163,   164,    37,
   134,   135,   136,   137,   190,   139,   140,     7,   142,   143,
   144,   174,   146,   179,   175,   181,   163,   164,   179,     6,
   163,   164,   163,   164,   174,    84,    85,   161,   162,     6,
   180,   174,   180,   180,  1032,   181,   400,   180,   179,   174,
   181,   163,   164,    37,    38,   179,    40,   181,   174,   183,
   184,   568,   163,   164,   180,   179,   174,   181,   180,   163,
   164,   164,   180,    43,  1067,   163,   164,   181,   179,   174,
   181,   180,   180,   180,   180,  1033,   163,   164,     6,  1037,
   180,   180,   169,    53,    54,    55,    56,   174,    58,  1214,
   175,   225,     7,   180,   179,     6,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   163,   164,   179,
     6,   181,    34,   169,     8,    37,    38,     3,   174,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     6,   258,   170,   171,     7,   179,
   284,   181,   176,   287,   178,   179,    38,   175,   292,   163,
   164,   179,   296,   297,   298,   174,   300,   301,   302,   303,
   304,   305,   306,     7,   170,   171,   180,   174,   158,   159,
   160,   163,   164,   317,   318,   319,   166,    38,   322,  1147,
  1148,  1149,  1150,    51,    52,   329,  1154,   179,   165,   166,
   167,   335,   174,     3,     4,     5,   173,     7,   174,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   179,    32,   181,   149,   150,   151,   152,   114,   115,
   116,   117,   118,   119,   120,   121,   170,   171,   228,   175,
   163,   164,   176,   179,   178,   170,   171,   174,   174,     6,
   373,  1219,  1220,   178,   174,  1223,   179,   174,   402,   153,
   154,   155,   156,   157,    42,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   174,   163,   164,   400,   422,   173,
   149,   150,   151,   152,   175,   175,    38,   181,   179,   179,
   434,   179,   179,    50,   181,   439,   163,   164,   163,   164,
   444,   170,   171,    40,  1272,   149,   150,   151,   152,   453,
   454,   685,   179,   170,   179,   163,   164,   174,   462,   179,
    38,   181,   312,   313,   180,   469,   170,   171,   179,     6,
   181,   179,     6,   180,   478,   479,   179,   174,   181,   149,
   150,   151,   152,   159,   160,   161,   162,   163,   164,   165,
   166,   167,  1320,   163,   164,   180,   179,   173,   181,   169,
   170,   171,   174,     6,   174,   179,   176,   181,   178,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,  1349,   163,   164,   165,   166,   167,    99,   100,   101,
   102,   103,   173,     6,     4,   518,   153,   154,   155,   156,
   157,   835,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   170,   171,   557,     4,    38,   173,   176,     3,   178,
   564,   565,   566,   174,   568,    34,     5,   571,    37,    38,
   179,    40,   181,   577,   155,   156,   157,     6,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   174,   592,   593,
   594,   174,   173,   170,   171,   174,   662,   170,   171,   176,
   174,   178,   452,   176,   179,   178,   181,   174,  1436,   179,
   179,   181,   181,   179,   174,   181,   620,   621,   174,   623,
   174,   174,   174,     8,   181,   174,   174,   631,   632,   174,
   174,   174,   174,     3,     4,   174,   174,     6,   174,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   174,   666,   667,   668,   669,   670,   671,   672,   673,
   674,   675,   676,   677,     6,   174,   174,     5,   174,   174,
   153,   154,   155,   156,   157,   741,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   180,   174,   174,   180,   180,
   173,   180,   685,   174,   180,   709,   174,   174,   174,   174,
     6,    87,   176,     6,   174,   174,  1010,   180,   722,   723,
   724,   174,   174,   174,     5,   174,   174,   174,   174,     4,
   580,   174,   174,   737,   738,   179,   174,     3,     4,   174,
   174,   174,   174,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   615,   616,   617,   153,   154,
   155,   156,   157,   174,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   633,     8,   174,   174,   174,   173,   175,
   175,   174,   642,   163,   164,   799,   779,   853,   179,   169,
   174,   805,   174,   174,   174,     5,   174,   177,     6,   174,
   174,   174,   174,   817,   818,   174,   174,   173,   884,   823,
   824,   153,   154,   155,   156,   157,     7,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   178,     7,   842,   843,
     7,   173,     7,     7,    82,   180,   145,     5,   852,   156,
   157,   855,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   865,     5,     5,     5,     5,   173,     5,   872,   873,
   874,     5,     5,     5,     5,   879,     5,     5,     5,   883,
     5,     5,     5,   887,   888,   889,   890,   891,   892,   893,
   894,   895,   896,   897,   898,     5,   952,   163,   164,     5,
     5,     5,     5,   169,     5,     5,   132,     5,   174,     5,
     5,   915,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,     5,     3,   930,     6,     5,   153,
   154,   155,   156,   157,     5,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   948,     5,     5,     4,   145,   173,
     6,     6,     6,   150,     7,   153,   154,   155,   156,   157,
   810,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     7,     7,     7,     6,   171,   173,     6,   181,     7,     7,
   177,   178,     7,     6,   174,   181,   836,   180,   838,   180,
   840,     7,     7,   146,   179,   999,   179,   179,     5,   179,
  1004,  1005,   179,   179,   179,   179,   179,   179,   179,  1013,
  1014,  1015,   175,   179,     6,     6,  1020,  1021,     6,   179,
   179,     6,   179,  1027,   179,     6,   174,   181,   179,   179,
   179,  1035,   179,   179,   179,  1091,     7,     7,     7,  1043,
   179,     7,   179,   179,  1048,   180,     7,  1051,   174,  1053,
  1054,  1055,  1056,  1057,  1058,  1059,  1060,  1061,  1062,  1063,
  1064,   179,   179,   179,   179,   179,   179,   174,     7,     7,
  1074,     7,   174,     7,     7,   174,     7,   174,     7,     7,
   174,   174,   174,   174,   174,     3,     4,   174,     7,     6,
  1146,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     7,     3,   142,     3,     3,   165,     3,
     3,     3,     3,     3,     3,     3,     3,  1131,     3,  1185,
   153,   154,   155,   156,   157,     3,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     6,     3,     5,     3,     5,
   173,     3,     6,     4,   178,  1159,  1160,  1161,  1162,  1163,
  1164,  1165,  1166,  1167,     7,   153,   154,   155,   156,   157,
     6,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     6,     6,     6,     6,   180,   173,     6,  1243,    83,     6,
   180,   175,   179,   179,     5,   175,   179,   179,   175,     6,
   179,   179,   399,   179,   179,   179,   179,  1211,   175,     4,
   175,   179,     6,     6,   178,  1271,   179,   179,   175,   179,
   179,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
  1234,  1235,  1236,   179,   179,   179,   179,   179,   175,  1295,
     6,     6,     6,     6,     6,   163,   164,     6,     6,     6,
     6,   169,     6,     6,     6,     6,   174,     7,     3,   177,
     6,    83,     3,     6,   165,     7,  1270,     6,     6,     3,
     6,     3,  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,
  1284,  1285,     6,  1287,     6,  1289,     3,     6,     3,     3,
     3,   176,   153,   154,   155,   156,   157,     6,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     6,     6,    84,
   180,   180,   173,  1317,  1318,   181,   175,   179,  1322,  1323,
  1324,  1325,  1326,  1327,     6,    80,   179,     6,   175,   179,
   179,   179,   178,   175,   175,   179,   175,   175,   175,   179,
   142,  1345,     6,    83,   179,     3,  1350,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,     6,     6,     3,     6,   180,
   179,     6,     6,     6,     6,     6,     3,     6,     6,     5,
     4,   181,     5,   181,  1378,  1379,  1380,  1381,  1382,  1383,
  1384,     6,  1386,   180,  1388,   582,   583,   179,   585,   179,
   179,   175,   589,   590,   175,   175,   179,   179,     6,   178,
     6,   179,  1406,  1407,  1408,   179,     6,     6,     6,     6,
     6,     6,     6,     6,     6,     5,  1420,  1421,  1422,  1423,
  1424,  1425,    85,     5,    80,   622,   142,     6,   625,     6,
   179,   179,   179,  1437,  1438,  1439,  1440,   181,  1442,     5,
  1444,     5,   639,   640,   175,   175,   179,     6,   645,   646,
   179,    80,   180,   180,   180,   652,   179,   654,   179,   179,
  1464,  1465,  1466,   181,   175,   175,     6,     6,   180,  1473,
     6,  1475,   179,  1477,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   181,
     6,     6,     6,     6,   173,     6,   180,   180,   179,   179,
   147,   698,   179,   700,   179,     6,   180,   180,   148,   179,
   175,     6,     6,   710,   711,   712,     6,     6,   715,   716,
   717,   718,   719,   720,   721,     3,     4,     6,   180,     6,
   179,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     3,     4,   179,   175,   180,   180,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,     3,     4,     6,     0,     6,     6,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,     3,
     4,   179,     0,     6,     6,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,   153,   154,   155,
   156,   157,     6,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   849,   180,   180,   180,     6,   173,     6,   856,
   520,     7,     7,   153,   154,   155,   156,   157,     7,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   875,   594,
    -1,  1178,    -1,   173,    -1,   163,   164,    -1,     8,    -1,
    -1,   169,    -1,    -1,    -1,   847,   174,    -1,    -1,   177,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   163,   164,    -1,    -1,    -1,    -1,   169,
    -1,    -1,    -1,    -1,   174,    -1,    -1,   177,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   163,   164,    -1,    -1,    -1,    -1,   169,     8,    -1,
    -1,    -1,   174,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,   163,
   164,    -1,    -1,   173,    -1,   169,    -1,    -1,    -1,   179,
   174,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,  1024,    -1,  1026,
   173,    -1,  1029,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,  1045,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,
   155,   156,   157,  1080,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   153,   154,   155,   156,   157,   173,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    -1,    45,    46,
    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1142,  1143,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    34,    35,    36,    37,    38,    39,    40,
    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,    -1,
    -1,    -1,  1179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    34,
    35,    36,    37,    38,    39,    40,    41,    -1,    43,  1216,
    45,    46,   139,    48,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,
    -1,    -1,    -1,  1240,     0,     1,    -1,     3,     4,    -1,
    -1,    -1,    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   139,    -1,
    -1,    -1,    -1,    -1,    -1,    31,  1273,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    -1,    43,    44,    45,
    46,    47,    48,    49,    -1,    -1,    -1,    53,    54,    55,
    56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
   181,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    78,    79,  1321,    -1,    -1,    -1,    -1,    -1,
    86,    -1,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1348,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1376,
    -1,    -1,    -1,   139,   140,   141,    -1,   143,    -1,   153,
   154,   155,   156,   157,     4,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,  1405,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,    -1,    -1,
    -1,    31,  1419,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
    -1,    -1,    -1,    53,    54,    55,    56,    57,    58,    37,
    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    88,    89,
    90,    91,    92,    93,    94,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    96,    97,
    98,   179,    -1,   181,    -1,    -1,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,   139,
    -1,    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,   133,   134,   135,   136,   137,
   138,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,   177,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,   177,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 152 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 161 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 175 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 182 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 199 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 200 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 201 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 206 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 211 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 222 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 225 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 229 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 235 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 241 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 248 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 254 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 258 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 262 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 269 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 273 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 278 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 282 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 286 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 290 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 294 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 298 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 302 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 306 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 315 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 318 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 322 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 326 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 330 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 334 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 342 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 353 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 356 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 369 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 372 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 394 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 66:
#line 398 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(ListOfDouble_L,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
    ;
    break;}
case 67:
#line 427 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-4].c); 
    ;
    break;}
case 68:
#line 432 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-6].c);
    ;
    break;}
case 69:
#line 440 "Gmsh.y"
{
      BeginView(1, Force_ViewNumber); 
    ;
    break;}
case 82:
#line 459 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 461 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 466 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 471 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 478 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 480 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 485 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 490 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 497 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 499 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 504 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 509 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 516 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 518 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 524 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 530 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 537 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 539 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 545 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 551 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 558 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 560 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 566 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 572 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 579 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 581 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 588 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 597 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 604 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 606 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 613 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 622 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 629 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 631 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 638 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 647 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 654 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 656 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 664 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 673 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 680 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 682 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 690 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 699 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 706 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 708 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 716 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 725 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 737 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 131:
#line 738 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 132:
#line 739 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 133:
#line 740 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 134:
#line 741 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 135:
#line 744 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 136:
#line 745 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 137:
#line 752 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 138:
#line 779 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;	  
	}
      }
    ;
    break;}
case 139:
#line 813 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
    ;
    break;}
case 140:
#line 827 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 141:
#line 836 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 142:
#line 851 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 143:
#line 863 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 144:
#line 877 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 145:
#line 900 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by Zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 146:
#line 924 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 147:
#line 936 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 148:
#line 950 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 149:
#line 962 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 150:
#line 974 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
    ;
    break;}
case 151:
#line 999 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 1006 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 1012 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 154:
#line 1031 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 155:
#line 1042 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 156:
#line 1050 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 1056 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 1062 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 159:
#line 1081 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 160:
#line 1087 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 161:
#line 1104 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 162:
#line 1110 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1116 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1122 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 165:
#line 1128 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1134 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 167:
#line 1153 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 168:
#line 1165 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1171 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 170:
#line 1190 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 171:
#line 1213 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 172:
#line 1221 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 173:
#line 1225 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1231 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1237 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 176:
#line 1249 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 177:
#line 1255 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 178:
#line 1261 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1274 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 180:
#line 1279 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 181:
#line 1284 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 182:
#line 1289 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 183:
#line 1296 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 184:
#line 1297 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 185:
#line 1298 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 186:
#line 1303 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 187:
#line 1307 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 188:
#line 1319 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 189:
#line 1337 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 190:
#line 1344 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 191:
#line 1349 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 192:
#line 1361 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.interactive) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing System Call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 193:
#line 1415 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 194:
#line 1434 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 195:
#line 1438 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 196:
#line 1460 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 197:
#line 1474 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 198:
#line 1488 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 199:
#line 1513 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 200:
#line 1538 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 201:
#line 1564 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 202:
#line 1570 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 203:
#line 1575 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 204:
#line 1580 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 205:
#line 1584 "Gmsh.y"
{
    ;
    break;}
case 206:
#line 1595 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 207:
#line 1600 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 208:
#line 1606 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 209:
#line 1610 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 210:
#line 1614 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 211:
#line 1618 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 212:
#line 1622 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 213:
#line 1627 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 214:
#line 1635 "Gmsh.y"
{
    ;
    break;}
case 215:
#line 1638 "Gmsh.y"
{
    ;
    break;}
case 216:
#line 1644 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 217:
#line 1661 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 218:
#line 1672 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 219:
#line 1689 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 220:
#line 1706 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 221:
#line 1723 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 222:
#line 1744 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 223:
#line 1764 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 224:
#line 1784 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 225:
#line 1801 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 226:
#line 1826 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 227:
#line 1830 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 228:
#line 1841 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 229:
#line 1842 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 230:
#line 1846 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 231:
#line 1847 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 232:
#line 1848 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 233:
#line 1849 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 234:
#line 1850 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 1854 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 236:
#line 1855 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 237:
#line 1856 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 238:
#line 1857 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 239:
#line 1858 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 240:
#line 1859 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 241:
#line 1860 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 242:
#line 1861 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 243:
#line 1863 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 244:
#line 1869 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 245:
#line 1870 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 246:
#line 1871 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 247:
#line 1872 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 248:
#line 1873 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 249:
#line 1874 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 250:
#line 1875 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 251:
#line 1876 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 252:
#line 1877 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 253:
#line 1878 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 254:
#line 1879 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 255:
#line 1880 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 256:
#line 1881 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 257:
#line 1882 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 258:
#line 1883 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 259:
#line 1884 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 260:
#line 1885 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 261:
#line 1886 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 262:
#line 1887 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 263:
#line 1888 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 264:
#line 1889 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1890 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 266:
#line 1891 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1892 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 268:
#line 1893 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1894 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 270:
#line 1895 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 271:
#line 1896 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 272:
#line 1897 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 273:
#line 1898 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 274:
#line 1899 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 275:
#line 1900 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 276:
#line 1909 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 277:
#line 1910 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 278:
#line 1915 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 279:
#line 1926 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 280:
#line 1943 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 281:
#line 1954 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 282:
#line 1973 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 283:
#line 1989 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 284:
#line 2005 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 285:
#line 2021 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 286:
#line 2039 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 287:
#line 2045 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 288:
#line 2059 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 289:
#line 2063 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 290:
#line 2067 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 291:
#line 2071 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2075 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 293:
#line 2081 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 294:
#line 2085 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 295:
#line 2089 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 296:
#line 2093 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2100 "Gmsh.y"
{
    ;
    break;}
case 298:
#line 2103 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2109 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2112 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2118 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2121 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 303:
#line 2125 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 304:
#line 2132 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 305:
#line 2137 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 306:
#line 2144 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2147 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 308:
#line 2153 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(ListOfDouble_L, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 309:
#line 2168 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 310:
#line 2176 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 311:
#line 2181 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 312:
#line 2190 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 313:
#line 2202 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 314:
#line 2206 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 315:
#line 2214 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 316:
#line 2228 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 317:
#line 2232 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 318:
#line 2236 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 319:
#line 2241 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 320:
#line 2246 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 321:
#line 2265 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 322:
#line 2269 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(ListOfColor_L, &ct->table[i]);
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 323:
#line 2287 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 324:
#line 2295 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 325:
#line 2302 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 326:
#line 2306 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 327:
#line 2310 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(ListOfDouble_L,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring)+1);
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2334 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


