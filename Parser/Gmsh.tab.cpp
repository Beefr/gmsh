
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tView	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tFor	339
#define	tIn	340
#define	tEndFor	341
#define	tIf	342
#define	tEndIf	343
#define	tExit	344
#define	tMerge	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tB_SPLINE_SURFACE_WITH_KNOTS	349
#define	tB_SPLINE_CURVE_WITH_KNOTS	350
#define	tCARTESIAN_POINT	351
#define	tTRUE	352
#define	tFALSE	353
#define	tUNSPECIFIED	354
#define	tU	355
#define	tV	356
#define	tEDGE_CURVE	357
#define	tVERTEX_POINT	358
#define	tORIENTED_EDGE	359
#define	tPLANE	360
#define	tFACE_OUTER_BOUND	361
#define	tEDGE_LOOP	362
#define	tADVANCED_FACE	363
#define	tVECTOR	364
#define	tDIRECTION	365
#define	tAXIS2_PLACEMENT_3D	366
#define	tISO	367
#define	tENDISO	368
#define	tENDSEC	369
#define	tDATA	370
#define	tHEADER	371
#define	tFILE_DESCRIPTION	372
#define	tFILE_SCHEMA	373
#define	tFILE_NAME	374
#define	tMANIFOLD_SOLID_BREP	375
#define	tCLOSED_SHELL	376
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	377
#define	tFACE_BOUND	378
#define	tCYLINDRICAL_SURFACE	379
#define	tCONICAL_SURFACE	380
#define	tCIRCLE	381
#define	tTRIMMED_CURVE	382
#define	tGEOMETRIC_SET	383
#define	tCOMPOSITE_CURVE_SEGMENT	384
#define	tCONTINUOUS	385
#define	tCOMPOSITE_CURVE	386
#define	tTOROIDAL_SURFACE	387
#define	tPRODUCT_DEFINITION	388
#define	tPRODUCT_DEFINITION_SHAPE	389
#define	tSHAPE_DEFINITION_REPRESENTATION	390
#define	tELLIPSE	391
#define	tTrimmed	392
#define	tSolid	393
#define	tEndSolid	394
#define	tVertex	395
#define	tFacet	396
#define	tNormal	397
#define	tOuter	398
#define	tLoopSTL	399
#define	tEndLoop	400
#define	tEndFacet	401
#define	tAND	402
#define	tOR	403
#define	tNOTEQUAL	404
#define	tEQUAL	405
#define	tAPPROXEQUAL	406
#define	tAFFECTPLUS	407
#define	tAFFECTMINUS	408
#define	tAFFECTTIMES	409
#define	tAFFECTDIVIDE	410
#define	tLESSOREQUAL	411
#define	tGREATEROREQUAL	412
#define	tCROSSPRODUCT	413
#define	UNARYPREC	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.39 2000-12-09 22:26:12 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void yyerror (char *s);
void vyyerror (char *fmt, ...);
void skip_until (char *until);


#line 64 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1529
#define	YYFLAG		-32768
#define	YYNTBASE	181

#define YYTRANSLATE(x) ((unsigned)(x) <= 416 ? yytranslate[x] : 259)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   166,     2,     2,   173,
   175,   164,   162,   174,   163,   178,   165,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   158,
     2,   159,   148,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   179,     2,   180,   170,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   176,     2,   177,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   160,   161,   167,   168,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   523,   529,   537,   544,   553,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   590,   592,   596,   597,   611,   613,   617,   618,
   632,   634,   638,   639,   653,   655,   659,   660,   680,   682,
   686,   687,   707,   709,   713,   714,   734,   736,   740,   741,
   767,   769,   773,   774,   800,   802,   806,   807,   833,   835,
   839,   840,   872,   874,   878,   879,   911,   913,   917,   918,
   950,   955,   959,   963,   968,   973,   978,   983,   990,  1002,
  1009,  1021,  1028,  1040,  1047,  1059,  1066,  1078,  1085,  1097,
  1103,  1115,  1121,  1133,  1140,  1152,  1159,  1171,  1178,  1190,
  1199,  1211,  1219,  1228,  1241,  1248,  1254,  1262,  1270,  1283,
  1291,  1301,  1319,  1327,  1336,  1345,  1353,  1365,  1371,  1380,
  1390,  1399,  1422,  1443,  1452,  1461,  1467,  1476,  1484,  1493,
  1499,  1511,  1517,  1527,  1529,  1531,  1533,  1534,  1537,  1542,
  1547,  1551,  1555,  1558,  1561,  1568,  1577,  1586,  1597,  1599,
  1601,  1605,  1608,  1613,  1615,  1624,  1637,  1646,  1659,  1668,
  1681,  1693,  1709,  1711,  1714,  1724,  1727,  1734,  1744,  1754,
  1763,  1772,  1781,  1788,  1793,  1796,  1798,  1800,  1802,  1804,
  1806,  1808,  1812,  1815,  1818,  1821,  1825,  1829,  1833,  1837,
  1841,  1845,  1849,  1853,  1857,  1861,  1865,  1869,  1873,  1877,
  1883,  1888,  1893,  1898,  1903,  1908,  1913,  1918,  1923,  1928,
  1933,  1940,  1945,  1950,  1955,  1960,  1965,  1970,  1977,  1984,
  1991,  1996,  1998,  2000,  2002,  2006,  2015,  2020,  2030,  2035,
  2045,  2049,  2055,  2057,  2060,  2063,  2067,  2071,  2083,  2093,
  2101,  2109,  2113,  2122,  2123,  2127,  2129,  2133,  2134,  2138,
  2142,  2144,  2148,  2149,  2151,  2155,  2157,  2159,  2163,  2167,
  2177,  2185,  2191,  2193,  2199,  2203,  2212,  2214,  2218,  2220,
  2225
};

static const short yyrhs[] = {   183,
     0,   182,     0,   188,     0,   139,     0,   142,   143,   244,
   244,   244,   144,   145,   141,   244,   244,   244,   141,   244,
   244,   244,   141,   244,   244,   244,   146,   147,     0,   140,
     0,     0,   183,   184,     0,   185,     0,   187,     0,   186,
     0,     1,     6,     0,   113,     6,     0,   114,     6,     0,
   116,     6,     0,   115,     6,     0,   117,     6,     0,   118,
   173,   249,   174,     5,   175,     6,     0,   119,   173,   249,
   175,     6,     0,   120,   173,     5,   174,     5,   174,   249,
   174,   249,   174,     5,   174,     5,   174,     5,   175,     6,
     0,     3,     7,    97,   173,     5,   174,   247,   175,     6,
     0,     3,     7,    96,   173,     5,   174,   244,   174,   253,
   174,   243,   174,   243,   174,   243,   174,   253,   174,   253,
   174,   243,   175,     6,     0,     3,     7,    95,   173,     5,
   174,   244,   174,   244,   174,   251,   174,   243,   174,   243,
   174,   243,   174,   243,   174,   253,   174,   253,   174,   253,
   174,   253,   174,   243,   175,     6,     0,     3,     7,   103,
   173,     5,   174,     3,   174,     3,   174,     3,   174,   243,
   175,     6,     0,     3,     7,   107,   173,     5,   174,     3,
   174,   243,   175,     6,     0,     3,     7,   124,   173,     5,
   174,     3,   174,   243,   175,     6,     0,     3,     7,   105,
   173,     5,   174,   164,   174,   164,   174,   244,   174,   243,
   175,     6,     0,     3,     7,   108,   173,     5,   174,   253,
   175,     6,     0,     3,     7,   109,   173,     5,   174,   253,
   174,     3,   174,   243,   175,     6,     0,     3,     7,   104,
   173,     5,   174,     3,   175,     6,     0,     3,     7,   110,
   173,     5,   174,     3,   174,   244,   175,     6,     0,     3,
     7,   112,   173,     5,   174,     3,   174,     3,   174,     3,
   175,     6,     0,     3,     7,   111,   173,     5,   174,   247,
   175,     6,     0,     3,     7,   106,   173,     5,   174,     3,
   175,     6,     0,     3,     7,    37,   173,     5,   174,     3,
   174,     3,   175,     6,     0,     3,     7,   122,   173,     5,
   174,   253,   175,     6,     0,     3,     7,   123,   173,     5,
   174,   253,   174,     3,   175,     6,     0,     3,     7,   121,
   173,     5,   174,     3,   175,     6,     0,     3,     7,   125,
   173,     5,   174,     3,   174,   244,   175,     6,     0,     3,
     7,   126,   173,     5,   174,     3,   174,   244,   174,   244,
   175,     6,     0,     3,     7,   133,   173,     5,   174,     3,
   174,   244,   174,   244,   175,     6,     0,     3,     7,   127,
   173,     5,   174,     3,   174,   244,   175,     6,     0,     3,
     7,   137,   173,     5,   174,     3,   174,   244,   174,   244,
   175,     6,     0,     3,     7,   128,   173,     5,   174,     3,
   174,   253,   174,   253,   174,   243,   174,   243,   175,     6,
     0,     3,     7,   129,   173,     5,   174,   253,   175,     6,
     0,     3,     7,   130,   173,   131,   174,   243,   174,     3,
   175,     6,     0,     3,     7,   132,   173,     5,   174,   253,
   174,   243,   175,     6,     0,     3,     7,   134,   173,     5,
   174,     5,   174,     3,   174,     3,   175,     6,     0,     3,
     7,   135,   173,     5,   174,     5,   174,     3,   175,     6,
     0,     3,     7,   136,   173,     3,   174,     3,   175,     6,
     0,     0,   188,   189,     0,   191,     0,   190,     0,   229,
     0,   230,     0,   231,     0,   234,     0,   235,     0,   238,
     0,   241,     0,   242,     0,   237,     0,   236,     0,     1,
     6,     0,    31,   173,     5,   175,     6,     0,    31,   173,
     5,   174,   244,   175,     6,     0,    63,     5,   176,   192,
   177,     6,     0,    63,     5,     4,   247,   176,   192,   177,
     6,     0,     0,   192,   194,     0,   192,   197,     0,   192,
   200,     0,   192,   203,     0,   192,   206,     0,   192,   209,
     0,   192,   212,     0,   192,   215,     0,   192,   218,     0,
   192,   221,     0,   192,   224,     0,   192,   227,     0,   244,
     0,   193,   174,   244,     0,     0,    75,   173,   244,   174,
   244,   174,   244,   175,   195,   176,   193,   177,     6,     0,
   244,     0,   196,   174,   244,     0,     0,    76,   173,   244,
   174,   244,   174,   244,   175,   198,   176,   196,   177,     6,
     0,   244,     0,   199,   174,   244,     0,     0,    77,   173,
   244,   174,   244,   174,   244,   175,   201,   176,   199,   177,
     6,     0,   244,     0,   202,   174,   244,     0,     0,    72,
   173,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   174,   244,   175,   204,   176,   202,   177,     6,     0,   244,
     0,   205,   174,   244,     0,     0,    73,   173,   244,   174,
   244,   174,   244,   174,   244,   174,   244,   174,   244,   175,
   207,   176,   205,   177,     6,     0,   244,     0,   208,   174,
   244,     0,     0,    74,   173,   244,   174,   244,   174,   244,
   174,   244,   174,   244,   174,   244,   175,   210,   176,   208,
   177,     6,     0,   244,     0,   211,   174,   244,     0,     0,
    69,   173,   244,   174,   244,   174,   244,   174,   244,   174,
   244,   174,   244,   174,   244,   174,   244,   174,   244,   175,
   213,   176,   211,   177,     6,     0,   244,     0,   214,   174,
   244,     0,     0,    70,   173,   244,   174,   244,   174,   244,
   174,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   174,   244,   175,   216,   176,   214,   177,     6,     0,   244,
     0,   217,   174,   244,     0,     0,    71,   173,   244,   174,
   244,   174,   244,   174,   244,   174,   244,   174,   244,   174,
   244,   174,   244,   174,   244,   175,   219,   176,   217,   177,
     6,     0,   244,     0,   220,   174,   244,     0,     0,    66,
   173,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   174,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   174,   244,   174,   244,   175,   222,   176,   220,   177,     6,
     0,   244,     0,   223,   174,   244,     0,     0,    67,   173,
   244,   174,   244,   174,   244,   174,   244,   174,   244,   174,
   244,   174,   244,   174,   244,   174,   244,   174,   244,   174,
   244,   174,   244,   175,   225,   176,   223,   177,     6,     0,
   244,     0,   226,   174,   244,     0,     0,    68,   173,   244,
   174,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   174,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   174,   244,   175,   228,   176,   226,   177,     6,     0,     4,
     7,   244,     6,     0,     4,   171,     6,     0,     4,   172,
     6,     0,     4,   154,   244,     6,     0,     4,   155,   244,
     6,     0,     4,   156,   244,     6,     0,     4,   157,   244,
     6,     0,     4,   178,     4,     7,     5,     6,     0,     4,
   178,    63,   179,   244,   180,   178,     4,     7,     5,     6,
     0,     4,   178,     4,     7,   244,     6,     0,     4,   178,
    63,   179,   244,   180,   178,     4,     7,   244,     6,     0,
     4,   178,     4,   154,   244,     6,     0,     4,   178,    63,
   179,   244,   180,   178,     4,   154,   244,     6,     0,     4,
   178,     4,   155,   244,     6,     0,     4,   178,    63,   179,
   244,   180,   178,     4,   155,   244,     6,     0,     4,   178,
     4,   156,   244,     6,     0,     4,   178,    63,   179,   244,
   180,   178,     4,   156,   244,     6,     0,     4,   178,     4,
   157,   244,     6,     0,     4,   178,    63,   179,   244,   180,
   178,     4,   157,   244,     6,     0,     4,   178,     4,   171,
     6,     0,     4,   178,    63,   179,   244,   180,   178,     4,
   171,   244,     6,     0,     4,   178,     4,   172,     6,     0,
     4,   178,    63,   179,   244,   180,   178,     4,   172,   244,
     6,     0,     4,   178,     4,     7,   247,     6,     0,     4,
   178,    63,   179,   244,   180,   178,     4,     7,   247,     6,
     0,     4,   178,     4,   154,   247,     6,     0,     4,   178,
    63,   179,   244,   180,   178,     4,   154,   247,     6,     0,
     4,   178,     4,   155,   247,     6,     0,     4,   178,    63,
   179,   244,   180,   178,     4,   155,   247,     6,     0,     4,
   178,    84,   178,     4,     7,   255,     6,     0,     4,   178,
    63,   179,   244,   180,   178,    84,     7,   256,     6,     0,
    34,   173,   244,   175,     7,   247,     6,     0,    49,    34,
   173,   244,   175,     7,   253,     6,     0,    64,    34,   253,
     7,   176,   244,   174,   244,   174,   244,   177,     6,     0,
    41,    42,   253,     7,   244,     6,     0,    34,   176,   244,
   177,     6,     0,    37,   173,   244,   175,     7,   253,     6,
     0,    39,   173,   244,   175,     7,   253,     6,     0,    64,
    37,   253,     7,   176,   244,   174,   244,   174,   244,   177,
     6,     0,    35,   173,   244,   175,     7,   253,     6,     0,
    35,   173,   244,   175,     7,   253,    45,   247,     6,     0,
    43,   173,   244,   175,     7,   176,   244,   174,   244,   174,
     5,   174,     5,   174,     5,   177,     6,     0,    36,   173,
   244,   175,     7,   253,     6,     0,    49,    37,   173,   244,
   175,     7,   253,     6,     0,    37,    59,   173,   244,   175,
     7,   253,     6,     0,    78,   173,   244,   175,     7,   253,
     6,     0,    79,   173,   244,   175,     7,   253,    83,   253,
    80,   244,     6,     0,    37,   176,   244,   177,     6,     0,
    45,    38,   173,   244,   175,     7,   253,     6,     0,   138,
    38,   173,   244,   175,     7,   244,   253,     6,     0,    46,
    38,   173,   244,   175,     7,   253,     6,     0,    79,    38,
    81,    82,   173,   244,   175,     7,   251,    83,   176,   253,
   174,   253,   177,    80,   176,   244,   174,   244,   177,     6,
     0,    79,    38,   173,   244,   175,     7,   251,    83,   176,
   253,   174,   253,   177,    80,   176,   244,   174,   244,   177,
     6,     0,    49,    38,   173,   244,   175,     7,   253,     6,
     0,    38,    59,   173,   244,   175,     7,   253,     6,     0,
    38,   176,   244,   177,     6,     0,    48,    40,   173,   244,
   175,     7,   253,     6,     0,    40,   173,   244,   175,     7,
   253,     6,     0,    49,    40,   173,   244,   175,     7,   253,
     6,     0,    54,   247,   176,   232,   177,     0,    53,   176,
   247,   174,   247,   174,   244,   177,   176,   232,   177,     0,
    55,   247,   176,   232,   177,     0,    56,   176,   247,   174,
   244,   177,   176,   232,   177,     0,   234,     0,   233,     0,
   231,     0,     0,   233,   230,     0,    58,   176,   233,   177,
     0,    61,   176,   233,   177,     0,     4,   258,     6,     0,
     4,   244,     6,     0,    90,     6,     0,    33,     6,     0,
    85,   173,   244,     8,   244,   175,     0,    85,   173,   244,
     8,   244,     8,   244,   175,     0,    85,     4,    86,   176,
   244,     8,   244,   177,     0,    85,     4,    86,   176,   244,
     8,   244,     8,   244,   177,     0,    87,     0,    92,     0,
    93,     4,     6,     0,    94,     4,     0,    88,   173,   244,
   175,     0,    89,     0,    57,    34,   176,   244,   174,   247,
   177,     6,     0,    57,    34,   176,   244,   174,   247,   174,
   247,   174,   244,   177,     6,     0,    57,    37,   176,   244,
   174,   247,   177,     6,     0,    57,    37,   176,   244,   174,
   247,   174,   247,   174,   244,   177,     6,     0,    57,    38,
   176,   244,   174,   247,   177,     6,     0,    57,    38,   176,
   244,   174,   247,   174,   247,   174,   244,   177,     6,     0,
    57,    38,   176,   244,   174,   247,   177,   176,   239,   177,
     6,     0,    57,    38,   176,   244,   174,   247,   174,   247,
   174,   244,   177,   176,   239,   177,     6,     0,   240,     0,
   239,   240,     0,    65,   176,   253,   174,   253,   174,   253,
   177,     6,     0,    60,     6,     0,    47,    37,   253,     7,
   244,     6,     0,    47,    37,   253,     7,   244,    50,    52,
   244,     6,     0,    47,    37,   253,     7,   244,    50,    51,
   244,     6,     0,    47,    38,   176,   244,   177,     7,   253,
     6,     0,    44,    38,   176,   244,   177,     7,   253,     6,
     0,    47,    40,   176,   244,   177,     7,   253,     6,     0,
    60,    38,   253,     7,   244,     6,     0,    60,    38,   253,
     6,     0,    62,     6,     0,    98,     0,    99,     0,   100,
     0,   101,     0,   102,     0,   245,     0,   173,   244,   175,
     0,   163,   244,     0,   162,   244,     0,   169,   244,     0,
   244,   163,   244,     0,   244,   162,   244,     0,   244,   164,
   244,     0,   244,   165,   244,     0,   244,   166,   244,     0,
   244,   170,   244,     0,   244,   158,   244,     0,   244,   159,
   244,     0,   244,   160,   244,     0,   244,   161,   244,     0,
   244,   152,   244,     0,   244,   151,   244,     0,   244,   149,
   244,     0,   244,   150,   244,     0,   244,   148,   244,     8,
   244,     0,    10,   173,   244,   175,     0,    11,   173,   244,
   175,     0,    12,   173,   244,   175,     0,    13,   173,   244,
   175,     0,    14,   173,   244,   175,     0,    15,   173,   244,
   175,     0,    16,   173,   244,   175,     0,    17,   173,   244,
   175,     0,    18,   173,   244,   175,     0,    20,   173,   244,
   175,     0,    21,   173,   244,   174,   244,   175,     0,    22,
   173,   244,   175,     0,    23,   173,   244,   175,     0,    24,
   173,   244,   175,     0,    25,   173,   244,   175,     0,    26,
   173,   244,   175,     0,    27,   173,   244,   175,     0,    28,
   173,   244,   174,   244,   175,     0,    29,   173,   244,   174,
   244,   175,     0,    30,   173,   244,   174,   244,   175,     0,
    19,   173,   244,   175,     0,     3,     0,     9,     0,     4,
     0,     4,   178,     4,     0,     4,   178,    63,   179,   244,
   180,   178,     4,     0,     4,   178,     4,   171,     0,     4,
   178,    63,   179,   244,   180,   178,     4,   171,     0,     4,
   178,     4,   172,     0,     4,   178,    63,   179,   244,   180,
   178,     4,   172,     0,   244,     8,   244,     0,   244,     8,
   244,     8,   244,     0,   248,     0,   163,   247,     0,   162,
   247,     0,   247,   163,   247,     0,   247,   162,   247,     0,
   176,   244,   174,   244,   174,   244,   174,   244,   174,   244,
   177,     0,   176,   244,   174,   244,   174,   244,   174,   244,
   177,     0,   176,   244,   174,   244,   174,   244,   177,     0,
   173,   244,   174,   244,   174,   244,   175,     0,     4,   178,
     4,     0,     4,   178,    63,   179,   244,   180,   178,     4,
     0,     0,   173,   250,   175,     0,     5,     0,   250,   174,
     5,     0,     0,   176,   252,   177,     0,   173,   252,   175,
     0,   253,     0,   252,   174,   253,     0,     0,   244,     0,
   176,   254,   177,     0,   244,     0,   246,     0,   254,   174,
   244,     0,   254,   174,   246,     0,   176,   244,   174,   244,
   174,   244,   174,   244,   177,     0,   176,   244,   174,   244,
   174,   244,   177,     0,   176,     4,   174,   244,   177,     0,
     4,     0,     4,   178,    84,   178,     4,     0,   176,   257,
   177,     0,     4,   178,    63,   179,   244,   180,   178,    84,
     0,   255,     0,   257,   174,   255,     0,     5,     0,    32,
   173,     5,   175,     0,    32,   173,     5,   174,   244,   175,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   145,   147,   148,   155,   163,   177,   189,   191,   194,   196,
   197,   198,   201,   207,   212,   213,   214,   217,   221,   224,
   230,   235,   241,   249,   254,   258,   264,   269,   273,   278,
   282,   285,   290,   294,   298,   302,   307,   311,   314,   318,
   322,   326,   330,   334,   338,   341,   345,   348,   352,   355,
   364,   368,   374,   376,   377,   378,   379,   380,   381,   382,
   383,   384,   385,   387,   388,   391,   396,   406,   411,   417,
   422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
   432,   433,   436,   439,   443,   449,   455,   458,   462,   468,
   474,   477,   481,   487,   493,   496,   500,   508,   514,   517,
   521,   529,   535,   538,   542,   550,   556,   559,   563,   575,
   581,   584,   588,   600,   606,   609,   613,   625,   631,   634,
   638,   651,   657,   660,   664,   677,   683,   686,   690,   703,
   715,   725,   733,   741,   749,   757,   765,   776,   789,   807,
   824,   845,   862,   883,   900,   921,   938,   959,   976,   997,
  1014,  1035,  1052,  1075,  1100,  1129,  1154,  1183,  1208,  1239,
  1252,  1277,  1288,  1294,  1313,  1324,  1332,  1338,  1344,  1363,
  1369,  1385,  1392,  1398,  1404,  1410,  1416,  1435,  1447,  1453,
  1472,  1493,  1501,  1507,  1513,  1519,  1531,  1537,  1543,  1555,
  1561,  1566,  1571,  1578,  1580,  1581,  1584,  1589,  1600,  1618,
  1633,  1702,  1722,  1726,  1745,  1761,  1775,  1797,  1819,  1844,
  1849,  1854,  1861,  1865,  1875,  1881,  1887,  1891,  1895,  1899,
  1903,  1908,  1915,  1919,  1924,  1942,  1952,  1970,  1987,  2004,
  2025,  2045,  2065,  2082,  2106,  2119,  2121,  2122,  2123,  2124,
  2127,  2129,  2130,  2131,  2132,  2133,  2134,  2135,  2136,  2137,
  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,
  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2156,  2157,
  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,  2166,  2167,
  2168,  2171,  2173,  2174,  2183,  2200,  2221,  2238,  2259,  2276,
  2298,  2305,  2318,  2323,  2327,  2331,  2335,  2340,  2345,  2349,
  2353,  2357,  2383,  2415,  2419,  2424,  2428,  2433,  2437,  2441,
  2447,  2453,  2459,  2463,  2469,  2476,  2482,  2491,  2495,  2505,
  2510,  2514,  2519,  2524,  2539,  2544,  2565,  2574,  2580,  2585,
  2589
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tIn","tEndFor",
"tIf","tEndIf","tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Command","Loop","Extrude",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr",
"FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   181,   181,   181,   182,   182,   182,   183,   183,   184,   184,
   184,   184,   185,   185,   185,   185,   185,   186,   186,   186,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   190,   190,   191,   191,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   193,   195,   194,   196,   196,   198,   197,
   199,   199,   201,   200,   202,   202,   204,   203,   205,   205,
   207,   206,   208,   208,   210,   209,   211,   211,   213,   212,
   214,   214,   216,   215,   217,   217,   219,   218,   220,   220,
   222,   221,   223,   223,   225,   224,   226,   226,   228,   227,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   231,
   231,   231,   231,   232,   232,   232,   233,   233,   234,   235,
   236,   236,   236,   236,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   238,   238,   238,   238,   238,   238,
   238,   238,   239,   239,   240,   240,   241,   241,   241,   241,
   241,   241,   241,   241,   242,   243,   243,   243,   243,   243,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   246,   246,   247,   247,   247,   247,   247,   248,   248,   248,
   248,   248,   248,   249,   249,   250,   250,   251,   251,   251,
   252,   252,   253,   253,   253,   254,   254,   254,   254,   255,
   255,   255,   255,   255,   256,   256,   257,   257,   258,   258,
   258
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     5,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
    11,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,     9,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     3,     3,     2,     2,     6,     8,     8,    10,     1,     1,
     3,     2,     4,     1,     8,    12,     8,    12,     8,    12,
    11,    15,     1,     2,     9,     2,     6,     9,     9,     8,
     8,     8,     6,     4,     2,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     1,     1,     1,     3,     8,     4,     9,     4,     9,
     3,     5,     1,     2,     2,     3,     3,    11,     9,     7,
     7,     3,     8,     0,     3,     1,     3,     0,     3,     3,
     1,     3,     0,     1,     3,     1,     1,     3,     3,     9,
     7,     5,     1,     5,     3,     8,     1,     3,     1,     4,
     6
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   209,     0,   214,     0,   210,     0,
     0,     0,    52,    54,    53,    55,    56,    57,    58,    59,
    64,    63,    60,    61,    62,   282,   284,   283,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   241,    12,     0,    13,    14,    16,
    15,    17,   304,   304,     0,    65,   329,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   313,     0,     0,     0,     0,   313,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   293,     0,     0,     0,     0,     0,   197,   313,   197,
   235,     0,   313,   313,     0,     0,     0,     0,     0,     0,
   203,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   244,   243,   245,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
     0,   202,     0,     0,   201,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   314,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   295,   294,     0,     0,     0,     0,
   197,   197,     0,     0,     0,     0,     0,     0,     0,     0,
    70,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   211,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   242,     0,   258,   259,   257,
   256,   252,   253,   254,   255,   244,   243,   248,   249,   250,
   251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   306,     0,     0,     0,     0,   131,     0,   134,
   135,   136,   137,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   247,   246,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   316,   317,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   302,     0,     0,     0,   297,   296,
   196,     0,   195,   194,     0,     0,     0,     0,     0,   199,
   198,   234,     0,   200,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   213,     0,   287,   289,     0,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   281,   270,
     0,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   305,     0,    19,     0,     0,   330,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   150,   152,     0,     0,     0,    66,     0,   166,
   313,   313,     0,   313,   178,     0,   186,   313,   313,     0,
     0,   315,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   190,
   192,     0,     0,     0,     0,     0,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,     0,     0,   313,     0,     0,   313,     0,     0,
     0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   313,   313,     0,
     0,     0,     0,   313,   313,     0,     0,     0,     0,     0,
   313,     0,   313,     0,     0,     0,     0,     0,   307,     0,
   304,     0,     0,   138,     0,   140,   154,   142,   156,   144,
   158,   146,   148,     0,     0,     0,     0,     0,     0,   313,
     0,   313,     0,     0,   291,   318,   319,   165,     0,   313,
   313,   313,   227,     0,   313,   313,   313,   313,   313,   313,
   313,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,     0,     0,     0,     0,   308,     0,
     0,     0,   205,     0,     0,   271,   278,   279,   280,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   236,   237,   238,   239,   240,     0,     0,
     0,     0,     0,     0,     0,    18,     0,   331,   285,     0,
     0,   323,     0,     0,    67,   162,   170,     0,   173,     0,
   167,     0,   168,   188,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   197,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   176,     0,   313,   313,     0,   313,
     0,     0,   313,     0,     0,     0,     0,   313,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
     0,     0,     0,     0,     0,   304,     0,     0,     0,     0,
   284,     0,   160,     0,   175,   185,   292,     0,   231,   179,
   181,     0,     0,   230,   232,   187,   163,   174,   184,   189,
     0,     0,   301,     0,   300,     0,     0,   215,     0,   217,
     0,   219,     0,    69,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   308,     0,
   311,     0,     0,     0,     0,   207,   206,     0,   286,     0,
     0,     0,     0,    21,     0,    30,     0,    34,     0,    28,
     0,     0,    33,     0,    38,    36,     0,     0,     0,     0,
     0,     0,    45,     0,     0,     0,     0,     0,    50,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,     0,   229,   228,   197,   303,     0,
   193,     0,     0,     0,     0,     0,     0,   223,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   313,   310,   309,   313,     0,     0,   180,
   288,   290,     0,     0,   308,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   299,     0,     0,     0,
   226,   313,     0,   224,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   312,
     0,     0,   208,     0,    35,     0,     0,     0,     0,    25,
     0,    31,     0,    37,    26,    39,     0,    42,     0,    46,
    47,     0,     0,    49,     0,     0,     0,   139,   141,   155,
   143,   157,   145,   159,   147,   149,   151,   153,     0,   327,
     0,   161,   324,   322,     0,     0,   191,     0,     0,     0,
     0,     0,   221,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   313,   313,   177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   286,     0,     0,   325,     0,     0,   298,
   216,   218,   220,     0,   313,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    85,    89,    93,   164,   169,     0,
     0,     0,     0,     0,     0,     0,    29,    32,    40,     0,
    41,    48,    43,     0,     0,   328,     0,   321,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    24,    27,     0,     0,     0,   320,
     0,   222,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    83,     0,    87,     0,    91,     0,     0,
     0,     0,   313,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    44,    20,
   326,   172,   225,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    84,    86,    88,    90,    92,    94,     0,     0,
     0,     0,   313,     0,     0,     0,     0,     0,     0,    97,
   101,   105,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     5,   313,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   183,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    95,     0,    99,     0,   103,     0,   313,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,    22,     0,     0,     0,     0,     0,     0,
    96,    98,   100,   102,   104,   106,   313,     0,     0,     0,
   109,   113,   117,     0,     0,     0,     0,     0,     0,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   107,     0,   111,     0,   115,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   110,   112,   114,   116,   118,     0,   121,   125,
   129,    23,     0,     0,     0,     0,     0,     0,     0,   119,
     0,   123,     0,   127,     0,     0,     0,     0,     0,     0,
   120,   122,   124,   126,   128,   130,     0,     0,     0
};

static const short yydefgoto[] = {  1527,
     4,     5,    18,    19,    20,    21,     6,    63,    64,    65,
   476,  1303,   621,  1251,  1305,   622,  1252,  1307,   623,  1253,
  1411,   624,  1384,  1413,   625,  1385,  1415,   626,  1386,  1472,
   627,  1458,  1474,   628,  1459,  1476,   629,  1460,  1509,   630,
  1503,  1511,   631,  1504,  1513,   632,  1505,    66,   471,   461,
   462,   463,   464,    70,    71,    72,    73,  1017,  1018,    74,
    75,   789,   289,   105,   439,   305,   162,   258,   404,   859,
   950,   951,   440,   804,  1080,  1151,   128
};

static const short yypact[] = {   412,
-32768,-32768,   -78,-32768,   420,  2319,  1609,    69,    78,   100,
   112,   129,   135,   142,    -2,    52,    79,-32768,-32768,-32768,
-32768,   163,   219,   109,   169,    77,   115,   124,   -45,   -37,
   141,   145,   228,   151,   235,   242,   264,   123,   114,    83,
   153,    96,    96,   186,   394,   194,   349,   250,   427,   432,
    -4,   270,   -31,    30,-32768,   276,-32768,   483,-32768,   489,
   496,   480,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   366,-32768,   383,   384,
   386,   387,   389,   390,   391,   392,   393,   396,   397,   398,
   399,   402,   403,   404,   405,   406,   407,   408,   414,  1609,
  1609,  1609,  1609,  1581,-32768,-32768,  2341,-32768,-32768,-32768,
-32768,-32768,   415,   415,   545,-32768,-32768,  1609,   416,  1609,
  1609,  1609,  1609,   561,   585,     8,   640,   595,   597,-32768,
  1609,  1609,  1609,  1609,   430,  1609,  1609,   435,  1609,  1609,
  1609,  1518,  1609,   429,   436,   439,  1518,   431,   437,   441,
   443,   444,   445,   446,    96,   447,    96,    96,  1609,  1609,
   -85,-32768,   -75,    96,   448,   454,   455,-32768,  1518,-32768,
-32768,     1,  1518,  1518,  1609,   -64,  1609,   535,  1609,  1609,
-32768,   616,-32768,   450,     9,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,   458,   458,   458,  3001,
  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1581,   459,   460,   461,   462,
   463,   465,   466,   467,   472,   474,   475,   476,   477,   484,
   485,   486,   497,   501,   502,   527,   528,   530,   531,   532,
   533,   534,   540,   541,   543,   546,   651,   547,   548,   550,
   703,   715,   744,   850,   910,  1061,-32768,-32768,   144,   529,
   544,-32768,  1609,  1609,-32768,   148,  3029,  2536,  3057,  3085,
  1609,  3113,  2559,  1609,  2582,  3141,  3169,  1609,  7757,   730,
  3197,  1609,  1609,  1609,   731,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,   -19,    11,-32768,-32768,  4849,  4876,    96,    96,
   452,   452,    94,  1609,  1609,  1609,   320,   324,  1330,    96,
-32768,   732,   733,  3225,   659,  1609,  3253,   566,   995,  3281,
-32768,  1609,   207,   564,  3309,  3337,  3365,  3393,  3421,  3449,
  3477,  3505,  3533,  3561,  3589,  4903,  3617,  3645,  3673,  3701,
  3729,  3757,  4930,  4957,  4984,-32768,  2093,   309,   309,  1179,
  1179,   282,   282,   282,   282,   -90,   -68,   458,   458,   458,
   458,  5011,   741,   743,   746,   747,   749,   750,   751,   752,
   753,   760,   761,   762,   764,   774,   775,   776,   779,   780,
   781,   788,   789,   790,   792,   618,   802,   804,   806,   807,
   812,   816,-32768,   221,   817,   818,   820,-32768,   229,-32768,
-32768,-32768,-32768,   323,  1552,  1552,  1609,  1609,   829,   830,
  1609,   819,   236,   236,  1609,   833,   835,   834,   836,   838,
  3785,   841,   843,  3813,   844,   852,   864,  2117,-32768,  -114,
  1609,   865,  2605,  3841,  3869,  1609,  2628,  2651,  3897,  3925,
  3953,  3981,  4009,    96,-32768,   678,  1609,  1609,-32768,-32768,
-32768,   697,  1721,-32768,   698,  1609,  5034,  5061,  5088,-32768,
-32768,-32768,  1609,-32768,   -73,   -30,   700,   704,   874,   709,
  4037,   876,  1609,  1609,-32768,  4065,-32768,-32768,  1609,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1609,-32768,-32768,-32768,-32768,-32768,-32768,  1609,  1609,  1609,
  1609,   740,   712,   713,   717,   723,   724,   725,   726,   737,
   738,   739,   745,   748,   766,   768,   770,   772,   773,   778,
   803,   805,   808,   809,   810,   811,   823,   845,   847,   848,
   849,   853,   884,-32768,   842,-32768,   854,  1609,-32768,   742,
   912,  1552,  1552,  1609,  1128,     2,  1547,     4,  1676,    58,
  1712,  1742,-32768,-32768,  2331,   914,  4093,-32768,    96,-32768,
  1518,  1518,   916,  1518,-32768,   917,-32768,  1518,  1518,  1609,
  1609,-32768,  1773,   828,   918,   919,   920,   503,   947,   971,
   973,   974,   986,   987,  1011,   209,  1609,  5115,  5142,-32768,
-32768,  2674,    96,    96,    96,  1797,-32768,   856,   857,   859,
   860,   861,   862,   863,   870,   871,   872,   875,   877,  1020,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1609,  1609,  1518,  1609,  1030,  1518,  2143,   612,
  1031,  2354,  4121,  4149,  4177,  4205,  7757,   911,  1048,  1609,
  1609,    96,  1050,  1052,   892,  1060,  1062,  1518,  1518,  1063,
    96,  1074,  1075,  1518,  1518,  1078,  1079,  1080,  1081,  1082,
  1518,   355,  1518,  1083,  1059,  1099,  1084,  1102,-32768,  1104,
   415,  4233,    20,-32768,  2973,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   933,    24,  1106,    92,    21,  1107,  1518,
  1108,  1518,  1110,  1111,  2166,  2117,-32768,-32768,  1609,  1518,
  1518,  1518,-32768,   491,  1518,  1518,  1518,  1518,  1518,  1518,
  1518,  1609,  2377,  1609,  1609,   942,  -101,   -95,   -93,-32768,
   -18,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,-32768,  5169,  5196,  1114,  4261,   191,  1038,
  1609,  1609,-32768,  1609,   945,-32768,-32768,-32768,-32768,  1609,
   950,  5223,  5250,   -17,   951,   953,   955,   956,   961,   962,
   964,   966,   121,   968,   975,   976,   978,   988,   989,   990,
   992,   993,   994,-32768,-32768,-32768,-32768,-32768,   997,   998,
   999,  1001,  1002,  1006,  1003,-32768,  1008,-32768,   207,   957,
    15,   952,  1639,  1143,-32768,-32768,-32768,    96,-32768,  1184,
-32768,  1185,-32768,-32768,  1609,  5277,  1186,  1187,  1188,  1609,
  1609,  1189,  1190,  1191,  1192,  1202,  1208,  1210,  2697,  1039,
  4289,  2446,   452,    96,  1212,    96,  1226,    96,     0,  1227,
  5304,  5331,  5358,  5385,  5412,  5439,  5466,  5493,  5520,  5547,
  5574,  5601,  1609,  1609,-32768,  1228,  1518,  1518,  1151,  1518,
   434,  4317,   668,  1237,  1581,  1239,  1609,  1518,  1238,  1240,
  1249,  1092,  1251,   355,  1253,  1242,  1609,  1254,  1270,  1268,
  1275,  1279,   355,  1609,  1609,  1609,  1518,  1277,  1281,   355,
  1609,  1282,  1292,  1290,  1609,   415,  1609,   149,  1293,  1213,
  -143,  5628,-32768,    98,-32768,-32768,  7757,  1609,-32768,-32768,
-32768,  1823,  1846,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1123,  1297,-32768,  1609,-32768,  1125,   231,-32768,   262,-32768,
   267,-32768,    97,-32768,  1609,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,  5655,  5682,   191,   289,
-32768,   203,  1129,  1229,  1609,-32768,-32768,  1300,   377,  1581,
  1132,  5709,  1134,-32768,  1136,-32768,  1137,-32768,  1147,-32768,
  1150,  4345,-32768,  1152,-32768,-32768,  1155,  1157,  4373,  5736,
  4401,  1153,-32768,  1158,  1159,  5763,  1161,  1171,-32768,  5790,
  1173,  2400,   946,  1552,  1552,  1609,  1609,  1609,  1609,    25,
  1170,  1609,  1609,-32768,  5817,-32768,-32768,   452,-32768,  2476,
-32768,  1609,  1609,  1609,  1344,  1175,   -40,-32768,  5844,  5871,
  5898,  5925,  5952,  5979,  6006,  6033,  6060,  6087,  6114,  6141,
  1609,  1609,  1271,  1518,-32768,-32768,  1518,  1609,  2720,-32768,
-32768,-32768,  1088,  1350,   191,   355,  1360,  1609,  1366,   355,
  1368,  1374,  1375,  1376,  1377,  1609,  1378,  1518,  1389,  1390,
  1609,  1394,  1392,  1609,  1395,  1221,  1396,  1873,   101,  1903,
   113,  1934,   116,  1958,  1984,  2007,  2034,  1223,    24,  1397,
  1400,  2743,  6168,  1401,  1230,  1609,-32768,  2766,  2789,  2812,
-32768,  1518,  1399,-32768,  1609,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,  2835,  2858,  1234,-32768,
  1246,  2064,-32768,  1609,-32768,  1248,  1250,  1252,  6195,-32768,
  1236,-32768,  1255,-32768,-32768,-32768,  4429,-32768,  1257,-32768,
-32768,  4457,  1258,-32768,  4485,  1260,  1408,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1362,-32768,
   245,-32768,-32768,-32768,  1609,  1261,-32768,  2881,  1421,  1422,
    26,  1262,-32768,  6222,  6249,  6276,  6303,  6330,  6357,  6384,
  6411,  6438,  4513,  4541,  4569,  1423,  1426,  1518,  1518,-32768,
  1581,   355,   355,   355,   355,  1431,  1432,  1433,   355,  1434,
  1438,  1439,  1441,   377,  1269,    24,-32768,  2506,  1442,-32768,
-32768,-32768,-32768,    97,  1518,  1609,  1609,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,-32768,-32768,-32768,-32768,-32768,  1276,
  1272,  1581,  1278,  1280,  1286,  1287,-32768,-32768,-32768,  1289,
-32768,-32768,-32768,  1291,  1609,-32768,  1609,-32768,  1295,   -39,
  1296,  6465,  6492,  6519,  6546,  6573,  6600,  6627,  6654,  6681,
  1288,  1302,  1304,  1518,  1371,  2269,   355,   355,  1447,  1460,
   355,  1462,  2423,  2904,  1466,  1470,  1518,  1609,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1305,
  1307,  1609,  1310,  1311,-32768,-32768,  1306,  1312,  1308,-32768,
  1313,-32768,  1314,  6708,  6735,  6762,  6789,  6816,  6843,  6870,
  6897,  6924,   261,  7757,   288,  7757,   304,  7757,  1409,  1609,
  1581,   355,  1518,  1482,  1486,  1410,  1487,  1489,  1609,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1490,  1609,
  1491,  1609,  1492,  1327,  6951,  1581,  1332,  1335,-32768,-32768,
-32768,-32768,-32768,  6978,  7005,  7032,  7059,  7086,  7113,  4597,
  4625,  4653,  7757,-32768,  7757,-32768,  7757,-32768,  1609,  1609,
  7734,   355,  1518,  1609,  1609,  1609,  1609,  1609,  1609,-32768,
-32768,-32768,  7140,  2927,  1357,  1337,  1339,  7167,  7194,  7221,
  7248,  7275,  7302,  1338,  1340,  1341,  1609,  1509,-32768,  1518,
   355,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,
  2950,-32768,  1345,  1343,  7329,  7356,  7383,  7410,  7437,  7464,
   306,  7757,   310,  7757,   314,  7757,  1514,  1518,  1517,  1609,
  1609,  1609,  1609,  1609,  1609,  1609,  1519,  1609,  1543,  1609,
  1544,-32768,  1380,-32768,  7491,  7518,  7545,  4681,  4709,  4737,
  7757,-32768,  7757,-32768,  7757,-32768,  1518,  1609,  1609,  1609,
-32768,-32768,-32768,  1383,  7572,  7599,  7626,  1348,  1382,  1407,
  1518,  1609,  1609,  1609,  1609,  1609,  1609,  1385,  7653,  7680,
  7707,   321,  7757,   337,  7757,   338,  7757,   355,  1609,  1609,
  1609,  1609,  1545,  1609,  1546,  1609,  1580,  1412,  4765,  4793,
  4821,  7757,-32768,  7757,-32768,  7757,-32768,  1582,-32768,-32768,
-32768,-32768,  1413,  1440,  1464,  1609,  1609,  1609,   339,  7757,
   343,  7757,   381,  7757,  1609,  1608,  1609,  1611,  1609,  1635,
  7757,-32768,  7757,-32768,  7757,-32768,  1615,  1644,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1064,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1664,  1666,
  -309,   -58,  1668,-32768,-32768,-32768,-32768,   471, -1013,-32768,
-32768,  -872,    -7,-32768,  1095,   107,-32768,  -113,-32768,  -940,
   787,   468,-32768, -1056,-32768,-32768,-32768
};


#define	YYLAST		7927


static const short yytable[] = {   104,
   259,   969,   465,  1094,   320,   932,   176,   687,  1033,   689,
   978,   269,   333,   135,   455,   127,   325,   985,   898,  1015,
  1015,   138,  1150,   799,  1016,  1016,   807,   802,  1078,   173,
  1002,  1203,   174,   178,   185,   608,   609,   610,   611,   612,
   613,   614,   615,   616,   617,   618,   619,   608,   609,   610,
   611,   612,   613,   614,   615,   616,   617,   618,   619,   581,
   309,   310,   582,   691,     7,   808,   309,   310,   309,   310,
   270,   334,   834,   456,   106,   835,   309,   310,   836,   225,
   838,   837,   800,   839,   107,  -247,   309,   310,   309,   310,
   311,   271,   207,   208,   209,   210,   226,   806,   899,   156,
   312,   225,   607,  1004,  1116,   108,  1140,  -246,   326,   317,
   261,   319,   263,   264,   265,   266,   151,   109,  1142,   152,
   153,  1144,   154,   277,   278,   279,   280,   136,   282,   283,
   137,   285,   286,   287,   110,   291,  1093,  1266,   139,  1236,
   111,   177,   309,   310,   309,   310,   620,   112,   161,   163,
   414,   307,   308,   150,   454,   993,  1015,   869,   840,   147,
   148,  1016,   149,   309,   310,   309,   310,   324,   116,   327,
   113,   329,   330,  1117,   130,   933,   321,  1121,   335,   336,
   337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   803,
  1079,  1204,   179,   357,   358,   359,   360,   361,   362,   363,
   364,   365,   366,   367,   368,   369,   370,   371,   372,   309,
   310,    76,    77,   117,   114,   118,  1094,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   131,
   119,   115,   132,   309,   310,   309,   310,   157,   158,   309,
   310,   303,   309,   310,   306,   423,   424,   466,   159,   142,
   313,   160,   144,   431,   309,   310,   434,   309,   310,   145,
   438,   129,   309,   310,   443,   444,   445,   133,   447,   448,
   449,   450,   451,   452,   453,   878,   134,   415,   416,   417,
   418,   146,   994,   995,   996,   997,   467,   468,   469,  1223,
  1224,  1225,  1226,   140,   419,   420,  1230,   141,   481,   998,
   999,   425,   426,   143,   486,    76,   550,   551,   155,   472,
   473,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    26,    27,    28,    29,    30,    31,    32,
    33,   164,    34,   857,    36,    37,   858,    39,    40,   168,
   309,   310,   120,   121,   122,   123,  1034,   487,   488,  1036,
   100,   101,   722,    51,  1283,  1284,   169,   102,  1287,   124,
   125,   103,   309,   310,   543,   544,   126,    52,    53,   222,
   223,   224,   548,   549,  1012,   225,   555,   557,   559,   561,
   562,    -7,    -7,   565,    -7,   459,   460,   567,  1196,    -1,
     8,  1197,     9,   309,   310,   170,   475,   165,   309,   310,
   166,   167,   171,   583,  1328,  1013,   172,  1329,   588,  1337,
  1014,   955,   175,   273,   274,   222,   223,   224,   180,   598,
   599,   225,   784,   785,   786,   787,   788,    62,   602,   214,
   215,  1330,  1034,  1035,  1331,   606,   216,   217,   218,   219,
   273,   274,   222,   223,   224,   639,   640,  1332,   225,  1426,
  1333,   642,  1427,  1428,   552,   553,  1429,  1430,   181,  1376,
  1431,   102,   182,   643,  1482,   554,   470,  1483,   160,   183,
   644,   645,   646,   647,    41,    42,    43,    44,   713,    46,
  1484,  1486,  1515,  1485,  1487,  1516,  1517,   184,  1404,  1518,
   556,   558,   560,   926,    -7,    -7,    -7,    -7,    -7,    -7,
    -7,    -7,    10,    11,    12,    13,    14,    15,    16,    17,
   682,   820,   821,   185,   207,   208,   685,  1041,  1042,   260,
     1,     2,   714,     3,  1519,   186,   187,  1520,   188,   189,
   596,   190,   191,   192,   193,   194,   267,   797,   195,   196,
   197,   198,   705,   706,   199,   200,   201,   202,   203,   204,
   205,   211,   212,   213,   214,   215,   206,   257,   262,   723,
   268,   216,   217,   218,   219,   273,   274,   222,   223,   224,
   275,   276,   281,   225,   292,  1488,   296,   284,   293,   290,
   956,   294,   297,   298,   295,   299,   300,   301,   302,   752,
   328,   331,   332,   314,   304,   745,   746,   225,   748,   315,
   316,   373,   374,   375,   376,   377,   318,   378,   379,   380,
   322,   323,   762,   763,   381,   272,   382,   383,   384,   385,
   211,   212,   213,   214,   215,   403,   386,   387,   388,   306,
   216,   217,   218,   219,   273,   274,   222,   223,   224,   389,
    76,    77,   225,   390,   391,   697,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,  1085,   392,
   393,   816,   394,   395,   396,   397,   398,   421,   408,   727,
   728,   729,   399,   400,   829,   401,   831,   832,   402,   409,
   405,   422,   406,   407,   841,   842,   843,   844,   845,   846,
   847,   848,   849,   850,   851,   852,   441,   446,   477,   478,
   480,   483,   489,   861,   862,   513,   863,   514,   536,   410,
   515,   516,   865,   517,   518,   519,   520,   521,   764,   211,
   212,   213,   214,   215,   522,   523,   524,   773,   525,   216,
   217,   218,   219,   273,   274,   222,   223,   224,   526,   527,
   528,   225,   991,   529,   530,   531,   753,   211,   212,   213,
   214,   215,   532,   533,   534,   902,   535,   216,   217,   218,
   219,   273,   274,   222,   223,   224,   537,   907,   538,   225,
   539,   540,   912,   913,   541,   211,   212,   213,   214,   215,
   542,   545,   566,   546,   547,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   563,   564,   102,   225,   568,   570,
   103,   569,   571,   288,   572,   947,   948,   574,   575,   577,
   211,   212,   213,   214,   215,   411,   597,   960,   578,   962,
   216,   217,   218,   219,   273,   274,   222,   223,   224,   972,
   579,   584,   225,   600,   601,   633,   979,   980,   981,   634,
   635,   636,   638,   986,   648,   649,   650,   990,   679,   992,
   651,   211,   212,   213,   214,   215,   652,   653,   654,   655,
  1005,   216,   217,   218,   219,   273,   274,   222,   223,   224,
   656,   657,   658,   225,   904,   412,  1010,   684,   659,   683,
   695,   660,   700,   702,   710,   711,   712,  1019,  1020,  1021,
  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1030,   661,
   927,   662,   929,   663,   931,   664,   665,  1039,    76,   550,
  1067,   666,  1043,   715,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   667,   716,   668,   717,
   718,   669,   670,   671,   672,  1068,  1070,  1072,  1074,  1075,
  1076,  1077,   719,   720,  1082,  1083,   673,   211,   212,   213,
   214,   215,   484,   709,  1088,  1089,  1090,   216,   217,   218,
   219,   273,   274,   222,   223,   224,   680,   721,   674,   225,
   675,   676,   677,  1107,  1108,   744,   678,   681,   732,   733,
  1112,   734,   735,   736,   737,   738,   749,   754,   698,   699,
  1119,   701,   739,   740,   741,   703,   704,   742,  1127,   743,
   761,   760,   765,  1132,   766,   767,  1135,   211,   212,   213,
   214,   215,   768,   792,   769,   772,   413,   216,   217,   218,
   219,   273,   274,   222,   223,   224,   774,   775,  1158,   225,
   778,   779,   780,   781,   782,   791,   794,  1164,  1165,  1166,
  1167,  1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,  1069,
  1071,  1073,   747,   793,   795,   750,  1181,   552,   553,   796,
   801,   805,   809,   811,   102,   813,   814,   833,   554,   855,
   860,   160,   864,   866,   870,   770,   771,   871,   872,   900,
   873,   776,   777,   686,   874,   897,   875,   876,   783,   877,
   790,   879,   211,   212,   213,   214,   215,  1198,   903,   880,
   881,   882,   216,   217,   218,   219,   273,   274,   222,   223,
   224,   883,   884,   885,   225,   886,   887,   810,   888,   812,
   889,   890,   891,  1222,   892,   893,   895,   817,   818,   819,
   894,   896,   822,   823,   824,   825,   826,   827,   828,   905,
   906,   909,   910,   911,   914,   915,   916,   917,  1242,  1243,
  1244,  1245,  1246,  1247,  1248,  1249,  1250,   918,   211,   212,
   213,   214,   215,   919,  1256,   920,   922,   928,   216,   217,
   218,   219,   273,   274,   222,   223,   224,  1263,  1114,  1264,
   225,   930,   934,   953,   949,   211,   212,   213,   214,   215,
   959,   961,   965,   964,   971,   216,   217,   218,   219,   273,
   274,   222,   223,   224,   966,   967,   968,   225,   970,   973,
  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,  1302,  1304,
  1306,  1308,   974,   975,  1311,   211,   212,   213,   214,   215,
   976,   977,   983,   984,   987,   216,   217,   218,   219,   273,
   274,   222,   223,   224,   988,   989,  1001,   225,  1008,  1000,
  1009,  1011,  1335,  1336,  1037,  1040,  1044,  1046,  1038,  1047,
  1048,  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,
  1353,  1049,  1355,  1050,  1357,  1052,  1058,   954,  1361,  1053,
   958,  1054,  1059,  1060,  1062,   963,   216,   217,   218,   219,
   273,   274,   222,   223,   224,  1063,  1065,  1081,   225,  1091,
  1092,  1373,  1374,  1109,   982,  1115,  1378,  1379,  1380,  1381,
  1382,  1383,  1118,    26,    27,    28,    29,    30,    31,    32,
    33,  1120,    34,  1122,    36,    37,  1123,    39,    40,  1401,
  1124,  1125,  1126,  1128,  1405,  1406,  1407,  1408,  1409,  1410,
  1412,  1414,  1416,    51,  1130,  1131,  1133,  1134,  1137,  1136,
  1149,  1138,  1152,  1153,  1163,  1156,  1157,    52,    53,  1178,
  1186,  1194,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1179,
  1443,  1182,  1445,  1183,  1195,  1184,  1201,  1202,  1218,  1187,
  1189,  1219,  1191,  1193,  1199,  1205,  1227,  1228,  1229,  1231,
  1455,  1456,  1457,  1232,  1233,  1234,  1239,  1235,  1255,  1254,
  1281,  1257,  1285,  1258,  1469,  1470,  1471,  1473,  1475,  1477,
  1259,  1260,  1261,  1277,  1262,  1286,  1288,    62,  1265,  1267,
  1291,  1489,  1490,  1491,  1492,  1292,  1494,  1278,  1496,  1279,
  1314,  1309,  1310,  1312,  1313,  1316,  1315,  1339,  1334,  1317,
  1318,  1340,  1342,  1341,  1343,  1354,  1356,  1358,  1510,  1512,
  1514,  1110,  1359,  1389,  1111,  1362,   474,  1521,  1363,  1523,
  1390,  1525,  1391,  1398,  1402,  1399,  1400,  1419,  1418,  1432,
    76,    77,  1434,  1465,  1442,  1129,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,  1444,  1446,
  1493,  1495,   688,  1447,    76,   550,  1461,  1466,  1478,  1162,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,  1467,    76,    77,  1497,  1498,  1502,  1506,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,    76,    77,  1522,  1528,  1507,  1524,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,  1508,
  1526,    76,   901,  1529,   952,  1220,  1221,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,    67,
   731,    68,  1241,    69,  1240,   707,     0,     0,     0,   100,
   101,   690,     0,     0,     0,     0,   102,     0,     0,     0,
   103,     0,     0,   288,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,   552,   553,     0,   225,   692,     0,     0,
   102,  1280,     0,     0,   554,     0,     0,   160,   211,   212,
   213,   214,   215,     0,  1293,     0,     0,     0,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   693,     0,   102,
   225,     0,     0,   103,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
   100,   101,     0,     0,     0,     0,     0,   102,   708,     0,
  1338,   103,     0,     0,    51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    52,    53,
   100,   101,   730,     0,     0,     0,     0,   102,     0,     0,
     0,   103,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   211,   212,   213,   214,   215,  1006,     0,
  1377,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,     0,
     0,  1007,     0,     0,     0,     0,     0,  1403,    62,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,  1139,     0,
     0,   225,     0,     0,     0,  1433,     0,     0,     0,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,  1141,     0,
     0,   225,     0,     0,  1454,     0,     0,     0,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,  1468,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,  1143,
     0,     0,   225,     0,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,  1145,     0,     0,   225,     0,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,  1146,
     0,     0,   225,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,  1147,     0,     0,   225,     0,     0,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,  1148,
     0,     0,   225,     0,     0,     0,     0,     0,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,  1180,
     0,     0,   225,     0,     0,     0,     0,     0,     0,     0,
     0,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
   511,     0,     0,   225,     0,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,   580,     0,     0,   225,     0,     0,
     0,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
   751,     0,     0,   225,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,   815,     0,     0,   225,     0,     0,     0,
     0,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,     0,     0,     0,
     0,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,     0,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,   211,   212,   213,   214,   215,    -3,    22,
     0,     0,    23,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,    35,    36,    37,    38,    39,    40,     0,     0,
     0,    41,    42,    43,    44,    45,    46,   227,    47,    48,
    49,    50,    51,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    52,    53,     0,     0,
     0,     0,     0,    54,     0,    55,    56,    57,    58,  1282,
    59,    60,    61,     0,     0,     0,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,   228,   229,   230,   225,     0,
     0,     0,     0,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,     0,     0,     0,    62,     0,     0,     0,
     0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,     0,   251,   252,   253,   254,   255,   256,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,   211,   212,   213,   214,   215,     0,     0,     0,     0,
   694,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,   211,   212,   213,   214,   215,     0,
     0,     0,     0,   755,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,   211,   212,   213,
   214,   215,     0,     0,     0,     0,   830,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
   211,   212,   213,   214,   215,     0,     0,     0,     0,  1066,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,   211,   212,   213,   214,   215,     0,     0,
     0,     0,  1289,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   924,
     0,     0,   925,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1086,
     0,     0,  1087,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1237,
     0,     0,  1238,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,   211,   212,   213,   214,
   215,     0,   428,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,   211,
   212,   213,   214,   215,     0,   433,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,   211,   212,   213,   214,   215,     0,   435,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,   211,   212,   213,   214,   215,
     0,   585,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,   211,   212,
   213,   214,   215,     0,   589,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,   211,   212,   213,   214,   215,     0,   590,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,   211,   212,   213,   214,   215,     0,
   726,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,   211,   212,   213,
   214,   215,     0,   921,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
   211,   212,   213,   214,   215,     0,  1113,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,   211,   212,   213,   214,   215,     0,  1154,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,   211,   212,   213,   214,
   215,     0,  1159,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,   211,
   212,   213,   214,   215,     0,  1160,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,   211,   212,   213,   214,   215,     0,  1161,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,   211,   212,   213,   214,   215,
     0,  1176,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,   211,   212,
   213,   214,   215,     0,  1177,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,   211,   212,   213,   214,   215,     0,  1200,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,   211,   212,   213,   214,   215,     0,
  1290,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,   211,   212,   213,
   214,   215,     0,  1388,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
   211,   212,   213,   214,   215,     0,  1417,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   457,   356,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   356,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   427,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   429,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   430,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   432,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   436,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   437,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   442,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   479,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   482,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   485,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   490,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   491,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   492,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   493,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   494,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   495,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   496,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   497,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   498,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   499,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   500,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   502,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   503,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   504,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   505,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   506,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   507,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   573,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   576,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   586,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   587,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   591,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   592,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   593,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   594,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   595,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   637,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   641,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   696,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   756,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   757,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   758,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   759,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   798,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   856,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   923,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   957,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1051,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1055,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1057,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,  1188,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1190,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1192,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1215,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1216,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,  1217,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1370,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1371,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1372,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1451,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,  1452,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1453,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1499,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1500,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1501,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,   457,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   458,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   501,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,   508,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   509,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,   512,     0,     0,   510,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,   603,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   604,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,   605,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,   724,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,   725,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,   853,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   854,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   867,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,   868,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   908,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,   935,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   936,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,   937,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,   938,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,   939,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,   940,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   941,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   942,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,   943,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   944,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,   945,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   946,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1003,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1031,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1032,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1045,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1056,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1061,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1064,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1084,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1095,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1096,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1097,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1098,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1099,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1100,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1101,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1102,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1103,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1104,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1105,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1106,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1155,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1185,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1206,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1207,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1208,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1209,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1210,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1211,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1212,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1213,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1214,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1268,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1269,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1270,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1271,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1272,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1273,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1274,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1275,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1276,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1319,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1320,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1321,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1322,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1323,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1324,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1325,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1326,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1327,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1360,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1364,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1365,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1366,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1367,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1368,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1369,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1387,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1392,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1393,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1394,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1395,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1396,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1397,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1420,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1421,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1422,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1423,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1424,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1425,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   273,   274,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1448,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   273,
   274,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1449,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   273,   274,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1450,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   273,   274,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1462,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   273,   274,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1463,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   273,   274,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1464,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   273,   274,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1479,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   273,   274,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1480,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225,     0,     0,  1375,
  1481,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   273,   274,   222,   223,   224,
     0,     0,     0,   225,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   273,   274,
   222,   223,   224,     0,     0,     0,   225
};

static const short yycheck[] = {     7,
   114,   874,   312,  1017,     4,     6,    38,     6,   949,     6,
   883,     4,     4,    59,     4,    23,    81,   890,     4,    60,
    60,    59,  1079,     4,    65,    65,     6,     4,     4,    34,
   174,     6,    37,     4,   178,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,   174,
   162,   163,   177,     6,   143,    45,   162,   163,   162,   163,
    63,    63,   174,    63,     6,   177,   162,   163,   174,   170,
   174,   177,    63,   177,     7,   176,   162,   163,   162,   163,
   176,    84,   100,   101,   102,   103,   104,     6,    84,     4,
   176,   170,   176,     6,  1045,     6,     6,   176,   173,   168,
   118,   170,   120,   121,   122,   123,    34,     6,     6,    37,
    38,     6,    40,   131,   132,   133,   134,   173,   136,   137,
   176,   139,   140,   141,     6,   143,   177,   177,   176,  1196,
     6,   173,   162,   163,   162,   163,   177,     6,    42,    43,
     7,   159,   160,    40,   174,     7,    60,   175,   177,    37,
    38,    65,    40,   162,   163,   162,   163,   175,     6,   177,
   173,   179,   180,  1046,     6,   176,   176,  1050,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   176,
   176,   176,   173,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   162,
   163,     3,     4,     5,   173,     7,  1240,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   173,
    32,   173,   176,   162,   163,   162,   163,   162,   163,   162,
   163,   155,   162,   163,   158,   273,   274,   174,   173,    42,
   164,   176,    38,   281,   162,   163,   284,   162,   163,    38,
   288,   173,   162,   163,   292,   293,   294,   173,   296,   297,
   298,   299,   300,   301,   302,   175,   173,   154,   155,   156,
   157,    38,   154,   155,   156,   157,   314,   315,   316,  1182,
  1183,  1184,  1185,   173,   171,   172,  1189,   173,   326,   171,
   172,   174,   175,   173,   332,     3,     4,     5,   176,     6,
     7,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    34,    35,    36,    37,    38,    39,    40,
    41,   176,    43,   173,    45,    46,   176,    48,    49,   176,
   162,   163,   154,   155,   156,   157,   174,   171,   172,   177,
   162,   163,   174,    64,  1257,  1258,    38,   169,  1261,   171,
   172,   173,   162,   163,   174,   175,   178,    78,    79,   164,
   165,   166,   174,   175,   174,   170,   414,   415,   416,   417,
   418,     0,     1,   421,     3,   309,   310,   425,   174,     0,
     1,   177,     3,   162,   163,   176,   320,    34,   162,   163,
    37,    38,     6,   441,   174,   174,     5,   177,   446,  1312,
   174,     8,   173,   162,   163,   164,   165,   166,   173,   457,
   458,   170,    98,    99,   100,   101,   102,   138,   466,   151,
   152,   174,   174,   175,   177,   473,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   483,   484,   174,   170,   174,
   177,   489,   177,   174,   162,   163,   177,   174,     6,  1362,
   177,   169,     4,   501,   174,   173,   177,   177,   176,     4,
   508,   509,   510,   511,    53,    54,    55,    56,     6,    58,
   174,   174,   174,   177,   177,   177,   174,    38,  1391,   177,
   414,   415,   416,   833,   113,   114,   115,   116,   117,   118,
   119,   120,   113,   114,   115,   116,   117,   118,   119,   120,
   548,    51,    52,   178,   552,   553,   554,   171,   172,     5,
   139,   140,    50,   142,   174,   173,   173,   177,   173,   173,
   454,   173,   173,   173,   173,   173,     6,   681,   173,   173,
   173,   173,   580,   581,   173,   173,   173,   173,   173,   173,
   173,   148,   149,   150,   151,   152,   173,   173,   173,   597,
     6,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     6,     5,   173,   170,   176,  1478,   176,   173,   173,   142,
   177,   173,   176,   173,   147,   173,   173,   173,   173,     8,
    86,     6,   173,   176,   178,   633,   634,   170,   636,   176,
   176,   173,   173,   173,   173,   173,   169,   173,   173,   173,
   173,   174,   650,   651,   173,     6,   173,   173,   173,   173,
   148,   149,   150,   151,   152,     5,   173,   173,   173,   553,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   173,
     3,     4,   170,   173,   173,   569,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,  1008,   173,
   173,   709,   173,   173,   173,   173,   173,   179,     6,   603,
   604,   605,   173,   173,   722,   173,   724,   725,   173,     5,
   174,   178,   175,   174,   732,   733,   734,   735,   736,   737,
   738,   739,   740,   741,   742,   743,     7,     7,     7,     7,
    82,   176,   179,   751,   752,     5,   754,     5,   131,     6,
     5,     5,   760,     5,     5,     5,     5,     5,   652,   148,
   149,   150,   151,   152,     5,     5,     5,   661,     5,   158,
   159,   160,   161,   162,   163,   164,   165,   166,     5,     5,
     5,   170,   896,     5,     5,     5,   175,   148,   149,   150,
   151,   152,     5,     5,     5,   803,     5,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     5,   815,     5,   170,
     5,     5,   820,   821,     3,   148,   149,   150,   151,   152,
     5,     5,     4,     6,     5,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,     6,   169,   170,     6,     6,
   173,     7,     7,   176,     7,   853,   854,     7,     6,     6,
   148,   149,   150,   151,   152,     6,   179,   865,     7,   867,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   877,
     7,     7,   170,   177,   177,   176,   884,   885,   886,   176,
     7,   173,     7,   891,   145,   174,   174,   895,     5,   897,
   174,   148,   149,   150,   151,   152,   174,   174,   174,   174,
   908,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   174,   174,   174,   170,   808,     6,   924,     6,   174,   178,
     7,   174,     7,     7,     7,     7,     7,   935,   936,   937,
   938,   939,   940,   941,   942,   943,   944,   945,   946,   174,
   834,   174,   836,   174,   838,   174,   174,   955,     3,     4,
     5,   174,   960,     7,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   174,     7,   174,     7,
     7,   174,   174,   174,   174,   993,   994,   995,   996,   997,
   998,   999,     7,     7,  1002,  1003,   174,   148,   149,   150,
   151,   152,     8,   176,  1012,  1013,  1014,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   175,     7,   174,   170,
   174,   174,   174,  1031,  1032,     6,   174,   174,   173,   173,
  1038,   173,   173,   173,   173,   173,     7,     7,   571,   572,
  1048,   574,   173,   173,   173,   578,   579,   173,  1056,   173,
     3,   141,     3,  1061,     3,   164,  1064,   148,   149,   150,
   151,   152,     3,     5,     3,     3,     6,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     3,     3,  1086,   170,
     3,     3,     3,     3,     3,     3,     3,  1095,  1096,  1097,
  1098,  1099,  1100,  1101,  1102,  1103,  1104,  1105,  1106,   993,
   994,   995,   635,     5,     3,   638,  1114,   162,   163,     6,
   178,     6,     6,     6,   169,     6,     6,   176,   173,     6,
    83,   176,   178,   174,   174,   658,   659,   175,   174,   178,
   175,   664,   665,     6,   174,   179,   175,   174,   671,   174,
   673,   174,   148,   149,   150,   151,   152,  1155,     6,   175,
   175,   174,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   174,   174,   174,   170,   174,   174,   700,   175,   702,
   174,   174,   174,  1181,   174,   174,   174,   710,   711,   712,
   175,   174,   715,   716,   717,   718,   719,   720,   721,     6,
     6,     6,     6,     6,     6,     6,     6,     6,  1206,  1207,
  1208,  1209,  1210,  1211,  1212,  1213,  1214,     6,   148,   149,
   150,   151,   152,     6,  1222,     6,   178,     6,   158,   159,
   160,   161,   162,   163,   164,   165,   166,  1235,   141,  1237,
   170,     6,     6,    83,     7,   148,   149,   150,   151,   152,
     4,     3,     3,     6,     3,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,   164,     6,   170,     6,     6,
  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,
  1278,  1279,     3,     6,  1282,   148,   149,   150,   151,   152,
     6,     3,     6,     3,     3,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     3,     6,    84,   170,   176,     7,
     4,   177,  1310,  1311,   176,     6,   175,   174,    80,   174,
   174,  1319,  1320,  1321,  1322,  1323,  1324,  1325,  1326,  1327,
  1328,   175,  1330,   174,  1332,   174,   174,   860,  1336,   175,
   863,   175,   175,   175,   174,   868,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   175,   174,   178,   170,     6,
   176,  1359,  1360,    83,   887,     6,  1364,  1365,  1366,  1367,
  1368,  1369,     3,    34,    35,    36,    37,    38,    39,    40,
    41,     6,    43,     6,    45,    46,     3,    48,    49,  1387,
     6,     6,     6,     6,  1392,  1393,  1394,  1395,  1396,  1397,
  1398,  1399,  1400,    64,     6,     6,     3,     6,   178,     5,
   178,     6,     6,     4,     6,     5,   177,    78,    79,   176,
   175,     4,  1420,  1421,  1422,  1423,  1424,  1425,  1426,   174,
  1428,   174,  1430,   174,    63,   174,     6,     6,     6,   175,
   174,     6,   175,   174,   174,   174,     6,     6,     6,     6,
  1448,  1449,  1450,     6,     6,     5,     5,   179,   177,   174,
    80,   174,     6,   174,  1462,  1463,  1464,  1465,  1466,  1467,
   175,   175,   174,   176,   174,     6,     5,   138,   174,   174,
     5,  1479,  1480,  1481,  1482,     6,  1484,   176,  1486,   176,
   175,   177,   176,   174,   174,   178,   175,     6,    80,   177,
   177,     6,     6,    84,     6,     6,     6,     6,  1506,  1507,
  1508,  1034,   176,   147,  1037,   174,   177,  1515,   174,  1517,
   174,  1519,   174,   176,     6,   176,   176,   175,   174,     6,
     3,     4,     6,   176,     6,  1058,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     6,     6,
     6,     6,     6,   174,     3,     4,   174,   176,   174,  1092,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   176,     3,     4,     6,   175,     6,   176,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,     3,     4,     6,     0,   176,     6,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   176,
     6,     3,     4,     0,   858,  1178,  1179,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,     6,
   607,     6,  1205,     6,  1204,   581,    -1,    -1,    -1,   162,
   163,     6,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,    -1,    -1,   176,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   162,   163,    -1,   170,     6,    -1,    -1,
   169,  1254,    -1,    -1,   173,    -1,    -1,   176,   148,   149,
   150,   151,   152,    -1,  1267,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,     6,    -1,   169,
   170,    -1,    -1,   173,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,
   162,   163,    -1,    -1,    -1,    -1,    -1,   169,     6,    -1,
  1313,   173,    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
   162,   163,     6,    -1,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   148,   149,   150,   151,   152,     6,    -1,
  1363,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,    -1,    -1,  1390,   138,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,     6,    -1,
    -1,   170,    -1,    -1,    -1,  1418,    -1,    -1,    -1,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,     6,    -1,
    -1,   170,    -1,    -1,  1447,    -1,    -1,    -1,    -1,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,  1461,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     6,
    -1,    -1,   170,    -1,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     6,    -1,    -1,   170,    -1,    -1,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     6,
    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,     6,    -1,    -1,   170,    -1,    -1,    -1,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     6,
    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     6,
    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     8,    -1,    -1,   170,    -1,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     8,    -1,    -1,   170,    -1,    -1,
    -1,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     8,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     8,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,   148,   149,   150,   151,   152,     0,     1,
    -1,    -1,     4,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
    -1,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    -1,    43,    44,    45,    46,    47,    48,    49,    -1,    -1,
    -1,    53,    54,    55,    56,    57,    58,    37,    60,    61,
    62,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    -1,    -1,
    -1,    -1,    -1,    85,    -1,    87,    88,    89,    90,   141,
    92,    93,    94,    -1,    -1,    -1,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    95,    96,    97,   170,    -1,
    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,   138,    -1,    -1,    -1,
    -1,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,   132,   133,   134,   135,   136,   137,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
   180,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,   180,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,   180,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,   180,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,   180,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
    -1,    -1,   177,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
    -1,    -1,   177,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
    -1,    -1,   177,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,
   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,
   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   148,   149,   150,   151,   152,    -1,   177,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,
    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,
   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,
   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,   177,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,
   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,
   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   148,   149,   150,   151,   152,    -1,   177,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,
    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,
   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,
   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   144,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,   146,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 157 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 171 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 178 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 195 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 196 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 197 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 198 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 203 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 208 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 219 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 222 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 226 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 232 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 238 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 245 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 251 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 255 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 259 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 266 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 270 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 275 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 279 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 283 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 287 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 291 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 295 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 299 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 303 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 309 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 315 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 319 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 323 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 327 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 331 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 350 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 353 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 356 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 366 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 369 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 385 "Gmsh.y"
{return 1;;
    break;}
case 64:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 388 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 66:
#line 393 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-2].c); 
    ;
    break;}
case 67:
#line 397 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 408 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 412 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 419 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 438 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 440 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 445 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 450 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 457 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 459 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 464 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 469 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 476 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 478 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 483 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 488 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 495 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 497 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 503 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 509 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 516 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 518 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 524 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 530 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 537 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 539 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 545 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 551 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 558 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 560 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 567 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 576 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 583 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 585 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 592 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 601 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 608 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 610 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 617 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 626 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 633 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 635 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 643 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 652 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 659 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 661 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 669 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 678 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 685 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 687 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 695 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 704 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 720 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 726 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 734 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 742 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 750 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 758 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 766 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 777 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 790 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 140:
#line 808 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 825 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 846 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 863 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 884 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 901 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 922 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 939 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 960 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 977 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 998 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1015 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1036 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1053 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1076 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1101 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1130 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1155 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1184 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1209 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1240 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1253 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 162:
#line 1282 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1289 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1295 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1314 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 166:
#line 1325 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 167:
#line 1333 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1339 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1345 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1364 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1370 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 172:
#line 1387 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 173:
#line 1393 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1399 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1405 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1411 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1417 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 178:
#line 1436 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 179:
#line 1448 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1454 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 181:
#line 1473 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 182:
#line 1496 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 183:
#line 1504 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 184:
#line 1508 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1514 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1520 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 187:
#line 1532 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 188:
#line 1538 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1544 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1557 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1562 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1567 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1572 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1579 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1580 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1581 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1586 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 198:
#line 1590 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1602 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 200:
#line 1620 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 201:
#line 1635 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;
	strcpy(tmpstring, ThePathForIncludes);
	if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,yyvsp[-1].c);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){

	if(!CTX.interactive){ // we're in interactive mode
	  char ext[6];
	  strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
	  Replot();
	  extern void CreateImage (char *name, FILE *fp);
	  FILE *fp = 0;
	  if(!strcmp(ext,".gif")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type = PRINT_GL2GIF;
	  }
	  else if(!strcmp(ext,".eps")){
	    fp = fopen(yyvsp[-1].c,"w");
	    CTX.print.type =  PRINT_GL2PS_RECURSIVE;
	  } 
	  else if(!strcmp(ext,".xpm")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type =  PRINT_XDUMP;
	    CTX.print.format = FORMAT_XPM;
	  } 
	  if(fp){
	    CreateImage(yyvsp[-1].c,fp);
	    fclose(fp);
	  }
	}
	
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Save")){

	Print_Mesh(THEM, yyvsp[-1].c, CTX.mesh.format);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 202:
#line 1703 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	extern long Get_AnimTime();
	long sleep_time = Get_AnimTime();
	while(1){
	  if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 203:
#line 1723 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 204:
#line 1727 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	}
	else{
	  Init();
	  Draw();
	}
      }
    ;
    break;}
case 205:
#line 1748 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 206:
#line 1762 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 207:
#line 1776 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      TheSymbol.val  = yyvsp[-3].d;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	List_Add(Symbol_L,&TheSymbol);
      else
	pSymbol->val = yyvsp[-3].d;
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 208:
#line 1798 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;
      
      TheSymbol.Name = yyvsp[-8].c;
      TheSymbol.val  = yyvsp[-5].d;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	List_Add(Symbol_L,&TheSymbol);
      else
	pSymbol->val = yyvsp[-5].d;
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 209:
#line 1820 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  pSymbol->val += LoopControlVariablesTab[ImbricatedLoop-1][2];
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 210:
#line 1845 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 211:
#line 1850 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 212:
#line 1855 "Gmsh.y"
{
      // skip everything until return is found
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until("Return");
    ;
    break;}
case 213:
#line 1862 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("EndIf");
    ;
    break;}
case 214:
#line 1866 "Gmsh.y"
{
    ;
    break;}
case 215:
#line 1877 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 216:
#line 1882 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 217:
#line 1888 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 218:
#line 1892 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 219:
#line 1896 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 220:
#line 1900 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 221:
#line 1904 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 222:
#line 1909 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 223:
#line 1917 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1920 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 1926 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 226:
#line 1943 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 227:
#line 1954 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 228:
#line 1971 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 229:
#line 1988 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 230:
#line 2005 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 231:
#line 2026 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 232:
#line 2046 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 233:
#line 2066 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 234:
#line 2083 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 235:
#line 2108 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 236:
#line 2120 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 237:
#line 2121 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 238:
#line 2122 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 2123 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 240:
#line 2124 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 241:
#line 2128 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 2129 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 243:
#line 2130 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 244:
#line 2131 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 245:
#line 2132 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 246:
#line 2133 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 247:
#line 2134 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 248:
#line 2135 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 249:
#line 2136 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 250:
#line 2137 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 251:
#line 2138 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 252:
#line 2139 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 253:
#line 2140 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 254:
#line 2141 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 255:
#line 2142 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 256:
#line 2143 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 257:
#line 2144 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 258:
#line 2145 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 259:
#line 2146 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 260:
#line 2147 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 261:
#line 2148 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2149 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2150 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 2151 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2152 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2153 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2154 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2155 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2156 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2157 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2158 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 272:
#line 2159 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2160 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2161 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2162 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2163 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 2164 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2165 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 279:
#line 2166 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 2167 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 281:
#line 2168 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 282:
#line 2172 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 283:
#line 2173 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 284:
#line 2175 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 285:
#line 2184 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2201 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2222 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2239 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 289:
#line 2260 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 290:
#line 2277 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 291:
#line 2300 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 292:
#line 2306 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 293:
#line 2320 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 294:
#line 2324 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2328 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 296:
#line 2332 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 297:
#line 2336 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 298:
#line 2342 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 299:
#line 2346 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 300:
#line 2350 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 301:
#line 2354 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 302:
#line 2358 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 303:
#line 2384 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 304:
#line 2417 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2420 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2426 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2429 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2435 "Gmsh.y"
{
    ;
    break;}
case 309:
#line 2438 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 310:
#line 2442 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 311:
#line 2449 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 312:
#line 2454 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 313:
#line 2461 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2464 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 315:
#line 2470 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 316:
#line 2478 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2483 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 318:
#line 2492 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 319:
#line 2496 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 320:
#line 2507 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 2511 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 2515 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 323:
#line 2520 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 324:
#line 2525 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 325:
#line 2541 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 326:
#line 2545 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 327:
#line 2567 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 328:
#line 2575 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 329:
#line 2582 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 330:
#line 2586 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 331:
#line 2590 "Gmsh.y"
{
      sprintf(tmpstring, yyvsp[-3].c, yyvsp[-1].d);
      yyval.c = (char*)Malloc(strlen(tmpstring));
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2597 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

