
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tPower	302
#define	tBump	303
#define	tProgression	304
#define	tAssociation	305
#define	tRotate	306
#define	tTranslate	307
#define	tSymetry	308
#define	tDilate	309
#define	tExtrude	310
#define	tDuplicata	311
#define	tLoop	312
#define	tInclude	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tView	317
#define	tOffset	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarSimplex	321
#define	tVectorSimplex	322
#define	tTensorSimplex	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tGeneral	340
#define	tGeometry	341
#define	tMesh	342
#define	tB_SPLINE_SURFACE_WITH_KNOTS	343
#define	tB_SPLINE_CURVE_WITH_KNOTS	344
#define	tCARTESIAN_POINT	345
#define	tTRUE	346
#define	tFALSE	347
#define	tUNSPECIFIED	348
#define	tU	349
#define	tV	350
#define	tEDGE_CURVE	351
#define	tVERTEX_POINT	352
#define	tORIENTED_EDGE	353
#define	tPLANE	354
#define	tFACE_OUTER_BOUND	355
#define	tEDGE_LOOP	356
#define	tADVANCED_FACE	357
#define	tVECTOR	358
#define	tDIRECTION	359
#define	tAXIS2_PLACEMENT_3D	360
#define	tISO	361
#define	tENDISO	362
#define	tENDSEC	363
#define	tDATA	364
#define	tHEADER	365
#define	tFILE_DESCRIPTION	366
#define	tFILE_SCHEMA	367
#define	tFILE_NAME	368
#define	tMANIFOLD_SOLID_BREP	369
#define	tCLOSED_SHELL	370
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	371
#define	tFACE_BOUND	372
#define	tCYLINDRICAL_SURFACE	373
#define	tCONICAL_SURFACE	374
#define	tCIRCLE	375
#define	tTRIMMED_CURVE	376
#define	tGEOMETRIC_SET	377
#define	tCOMPOSITE_CURVE_SEGMENT	378
#define	tCONTINUOUS	379
#define	tCOMPOSITE_CURVE	380
#define	tTOROIDAL_SURFACE	381
#define	tPRODUCT_DEFINITION	382
#define	tPRODUCT_DEFINITION_SHAPE	383
#define	tSHAPE_DEFINITION_REPRESENTATION	384
#define	tELLIPSE	385
#define	tTrimmed	386
#define	tSolid	387
#define	tEndSolid	388
#define	tVertex	389
#define	tFacet	390
#define	tNormal	391
#define	tOuter	392
#define	tLoopSTL	393
#define	tEndLoop	394
#define	tEndFacet	395
#define	UMINUS	396

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.5 2000-11-24 09:44:00 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Colors.h"
#include "Parser.h"

#ifdef __DECCXX
#include <alloca.h>
#endif

extern Mesh    *THEM;
extern char    ThePathForIncludes[NAME_STR_L];

FILE           *yyinTab[MAX_OPEN_FILES];
int             yylinenoTab[MAX_OPEN_FILES];
char            yynameTab[MAX_OPEN_FILES][NAME_STR_L];
char            tmpstring[NAME_STR_L];
Symbol          TheSymbol;
Surface        *STL_Surf;
Shape           TheShape;
unsigned int    *ptr ;
int             i,j,k,flag,RecursionLevel=0,Loop[4];
double          d;
ExtrudeParams   extr;
List_T         *Symbol_L;
List_T         *ListOfDouble_L,*ListOfDouble2_L;
List_T         *ListOfListOfDouble_L;
StringXPointer *ColorField ;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
int   Get_ColorForString(StringX4Int SX4I[], int alpha, 
			 char * string, int * FlagError);
void  Get_ColorPointerForString(StringXPointer SXP[], char * string,
				int * FlagError, unsigned int **Pointer);


#line 50 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1275
#define	YYFLAG		-32768
#define	YYNTBASE	157

#define YYTRANSLATE(x) ((unsigned)(x) <= 396 ? yytranslate[x] : 213)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   147,     2,     2,   150,
   152,   145,   143,   151,   144,     2,   146,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   141,
     2,   142,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   155,     2,   156,   149,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   153,     2,   154,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   148
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   521,   528,   537,   538,   541,   544,
   547,   550,   553,   556,   559,   562,   565,   568,   571,   574,
   603,   632,   661,   684,   707,   730,   747,   764,   781,   792,
   803,   814,   819,   827,   836,   849,   856,   862,   870,   878,
   891,   899,   909,   927,   935,   944,   953,   959,   967,   979,
   988,   998,  1007,  1030,  1051,  1060,  1069,  1075,  1084,  1092,
  1101,  1109,  1121,  1129,  1139,  1141,  1143,  1145,  1146,  1149,
  1154,  1159,  1163,  1171,  1180,  1192,  1205,  1218,  1227,  1240,
  1249,  1261,  1277,  1279,  1282,  1292,  1295,  1302,  1312,  1322,
  1332,  1341,  1350,  1359,  1366,  1371,  1380,  1383,  1388,  1389,
  1392,  1393,  1399,  1400,  1406,  1407,  1413,  1414,  1417,  1422,
  1431,  1436,  1446,  1454,  1456,  1458,  1460,  1462,  1464,  1466,
  1470,  1474,  1478,  1482,  1486,  1490,  1493,  1496,  1501,  1506,
  1511,  1516,  1521,  1526,  1531,  1536,  1541,  1546,  1553,  1558,
  1563,  1568,  1573,  1578,  1583,  1590,  1597,  1604,  1606,  1608,
  1610,  1614,  1621,  1633,  1643,  1651,  1659,  1660,  1664,  1666,
  1670,  1671,  1675,  1679,  1681,  1685,  1686,  1688,  1692,  1694,
  1696,  1700
};

static const short yyrhs[] = {   164,
     0,   159,     0,   158,     0,   132,     0,   135,   136,     3,
     3,     3,   137,   138,   134,     3,     3,     3,   134,     3,
     3,     3,   134,     3,     3,     3,   139,   140,     0,   133,
     0,     0,   159,   160,     0,   161,     0,   163,     0,   162,
     0,     1,     6,     0,   106,     6,     0,   107,     6,     0,
   109,     6,     0,   108,     6,     0,   110,     6,     0,   111,
   150,   207,   151,     5,   152,     6,     0,   112,   150,   207,
   152,     6,     0,   113,   150,     5,   151,     5,   151,   207,
   151,   207,   151,     5,   151,     5,   151,     5,   152,     6,
     0,     3,     7,    90,   150,     5,   151,   206,   152,     6,
     0,     3,     7,    89,   150,     5,   151,   203,   151,   211,
   151,   202,   151,   202,   151,   202,   151,   211,   151,   211,
   151,   202,   152,     6,     0,     3,     7,    88,   150,     5,
   151,   203,   151,   203,   151,   209,   151,   202,   151,   202,
   151,   202,   151,   202,   151,   211,   151,   211,   151,   211,
   151,   211,   151,   202,   152,     6,     0,     3,     7,    96,
   150,     5,   151,     3,   151,     3,   151,     3,   151,   202,
   152,     6,     0,     3,     7,   100,   150,     5,   151,     3,
   151,   202,   152,     6,     0,     3,     7,   117,   150,     5,
   151,     3,   151,   202,   152,     6,     0,     3,     7,    98,
   150,     5,   151,   145,   151,   145,   151,   203,   151,   202,
   152,     6,     0,     3,     7,   101,   150,     5,   151,   211,
   152,     6,     0,     3,     7,   102,   150,     5,   151,   211,
   151,     3,   151,   202,   152,     6,     0,     3,     7,    97,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   103,
   150,     5,   151,     3,   151,   203,   152,     6,     0,     3,
     7,   105,   150,     5,   151,     3,   151,     3,   151,     3,
   152,     6,     0,     3,     7,   104,   150,     5,   151,   206,
   152,     6,     0,     3,     7,    99,   150,     5,   151,     3,
   152,     6,     0,     3,     7,    33,   150,     5,   151,     3,
   151,     3,   152,     6,     0,     3,     7,   115,   150,     5,
   151,   211,   152,     6,     0,     3,     7,   116,   150,     5,
   151,   211,   151,     3,   152,     6,     0,     3,     7,   114,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   118,
   150,     5,   151,     3,   151,   203,   152,     6,     0,     3,
     7,   119,   150,     5,   151,     3,   151,   203,   151,   203,
   152,     6,     0,     3,     7,   126,   150,     5,   151,     3,
   151,   203,   151,   203,   152,     6,     0,     3,     7,   120,
   150,     5,   151,     3,   151,   203,   152,     6,     0,     3,
     7,   130,   150,     5,   151,     3,   151,   203,   151,   203,
   152,     6,     0,     3,     7,   121,   150,     5,   151,     3,
   151,   211,   151,   211,   151,   202,   151,   202,   152,     6,
     0,     3,     7,   122,   150,     5,   151,   211,   152,     6,
     0,     3,     7,   123,   150,   124,   151,   202,   151,     3,
   152,     6,     0,     3,     7,   125,   150,     5,   151,   211,
   151,   202,   152,     6,     0,     3,     7,   127,   150,     5,
   151,     5,   151,     3,   151,     3,   152,     6,     0,     3,
     7,   128,   150,     5,   151,     5,   151,     3,   152,     6,
     0,     3,     7,   129,   150,     3,   151,     3,   152,     6,
     0,     0,   164,   165,     0,   166,     0,   180,     0,   181,
     0,   182,     0,   185,     0,   186,     0,   188,     0,   191,
     0,   192,     0,   187,     0,   193,     0,     1,     6,     0,
    62,     5,   153,   167,   154,     6,     0,    62,     5,    63,
   206,   153,   167,   154,     6,     0,     0,   167,   168,     0,
   167,   169,     0,   167,   170,     0,   167,   171,     0,   167,
   172,     0,   167,   173,     0,   167,   174,     0,   167,   175,
     0,   167,   176,     0,   167,   177,     0,   167,   178,     0,
   167,   179,     0,    66,   150,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   152,   211,
     6,     0,    67,   150,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   152,   211,     6,
     0,    68,   150,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   152,   211,     6,     0,
    69,   150,   203,   151,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   152,
   211,     6,     0,    70,   150,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   152,   211,     6,     0,    71,   150,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   152,   211,     6,     0,    72,
   150,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   152,   211,     6,     0,    73,   150,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   152,
   211,     6,     0,    74,   150,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   152,   211,     6,     0,
    75,   150,   203,   151,   203,   151,   203,   152,   211,     6,
     0,    76,   150,   203,   151,   203,   151,   203,   152,   211,
     6,     0,    77,   150,   203,   151,   203,   151,   203,   152,
   211,     6,     0,     4,     7,   203,     6,     0,    30,   150,
   203,   152,     7,   206,     6,     0,    45,    30,   150,   203,
   152,     7,   211,     6,     0,    64,    30,   150,   203,   151,
   203,   151,   203,   152,     7,   211,     6,     0,    37,    38,
   211,     7,   203,     6,     0,    30,   150,   203,   152,     6,
     0,    33,   150,   203,   152,     7,   211,     6,     0,    35,
   150,   203,   152,     7,   211,     6,     0,    64,    33,   150,
   203,   151,   203,   151,   203,   152,     7,   211,     6,     0,
    31,   150,   203,   152,     7,   211,     6,     0,    31,   150,
   203,   152,     7,   211,    41,   206,     6,     0,    39,   150,
   203,   152,     7,   150,   203,   151,   203,   151,     5,   151,
     5,   151,     5,   152,     6,     0,    32,   150,   203,   152,
     7,   211,     6,     0,    45,    33,   150,   203,   152,     7,
   211,     6,     0,    33,    57,   150,   203,   152,     7,   211,
     6,     0,    33,   150,   203,   152,     6,     0,    78,   150,
   203,   152,     7,   211,     6,     0,    79,   150,   203,   152,
     7,   211,    83,   211,    80,   203,     6,     0,    41,    34,
   150,   203,   152,     7,   211,     6,     0,   131,    34,   150,
   203,   152,     7,   203,   211,     6,     0,    42,    34,   150,
   203,   152,     7,   211,     6,     0,    79,    34,    81,    82,
   150,   203,   152,     7,   209,    83,   153,   211,   151,   211,
   154,    80,   153,   203,   151,   203,   154,     6,     0,    79,
    34,   150,   203,   152,     7,   209,    83,   153,   211,   151,
   211,   154,    80,   153,   203,   151,   203,   154,     6,     0,
    45,    34,   150,   203,   152,     7,   211,     6,     0,    34,
    57,   150,   203,   152,     7,   211,     6,     0,    34,   150,
   203,   152,     6,     0,    44,    36,   150,   203,   152,     7,
   211,     6,     0,    36,   150,   203,   152,     7,   211,     6,
     0,    45,    36,   150,   203,   152,     7,   211,     6,     0,
    52,   150,   206,   152,   153,   183,   154,     0,    51,   150,
   206,   151,   206,   151,   203,   152,   153,   183,   154,     0,
    53,   150,   206,   152,   153,   183,   154,     0,    54,   150,
   206,   151,   203,   152,   153,   183,   154,     0,   185,     0,
   184,     0,   182,     0,     0,   184,   181,     0,    56,   153,
   184,   154,     0,    60,   153,   184,   154,     0,    58,     5,
     6,     0,    55,   150,   203,   151,   206,   152,     6,     0,
    55,    34,   150,   203,   151,   206,   152,     6,     0,    55,
   150,   203,   151,   206,   151,   206,   151,   203,   152,     6,
     0,    55,    34,   150,   203,   151,   206,   151,   206,   151,
   203,   152,     6,     0,    55,    30,   150,   203,   151,   206,
   151,   206,   151,   203,   152,     6,     0,    55,    30,   150,
   203,   151,   206,   152,     6,     0,    55,    33,   150,   203,
   151,   206,   151,   206,   151,   203,   152,     6,     0,    55,
    33,   150,   203,   151,   206,   152,     6,     0,    55,    34,
   150,   203,   151,   206,   152,   153,   189,   154,     6,     0,
    55,    34,   150,   203,   151,   206,   151,   206,   151,   203,
   152,   153,   189,   154,     6,     0,   190,     0,   189,   190,
     0,    65,   153,   211,   151,   211,   151,   211,   154,     6,
     0,    59,     6,     0,    43,    33,   211,     7,   203,     6,
     0,    43,    33,   211,     7,   203,    46,    47,   203,     6,
     0,    43,    33,   211,     7,   203,    46,    48,   203,     6,
     0,    43,    33,   211,     7,   203,    46,    49,   203,     6,
     0,    43,    34,   153,   203,   154,     7,   211,     6,     0,
    40,    34,   153,   203,   154,     7,   211,     6,     0,    43,
    36,   153,   203,   154,     7,   211,     6,     0,    59,    34,
   211,     7,   203,     6,     0,    59,    34,   211,     6,     0,
    45,    50,   150,   203,   152,     7,   211,     6,     0,    61,
     6,     0,    84,   153,   194,   154,     0,     0,   194,   195,
     0,     0,    85,   196,   153,   199,   154,     0,     0,    86,
   197,   153,   199,   154,     0,     0,    87,   198,   153,   199,
   154,     0,     0,   200,   199,     0,     4,     7,     4,     6,
     0,     4,     7,   153,     4,   151,   203,   154,     6,     0,
     4,     7,   201,     6,     0,   153,   203,   151,   203,   151,
   203,   151,   203,   154,     0,   153,   203,   151,   203,   151,
   203,   154,     0,    91,     0,    92,     0,    93,     0,    94,
     0,    95,     0,   204,     0,   150,   203,   152,     0,   203,
   144,   203,     0,   203,   143,   203,     0,   203,   145,   203,
     0,   203,   146,   203,     0,   203,   149,   203,     0,   144,
   203,     0,   143,   203,     0,    10,   150,   203,   152,     0,
    11,   150,   203,   152,     0,    12,   150,   203,   152,     0,
    13,   150,   203,   152,     0,    14,   150,   203,   152,     0,
    15,   150,   203,   152,     0,    16,   150,   203,   152,     0,
    17,   150,   203,   152,     0,    18,   150,   203,   152,     0,
    19,   150,   203,   152,     0,    20,   150,   203,   151,   203,
   152,     0,    21,   150,   203,   152,     0,    22,   150,   203,
   152,     0,    23,   150,   203,   152,     0,    24,   150,   203,
   152,     0,    25,   150,   203,   152,     0,    26,   150,   203,
   152,     0,    27,   150,   203,   151,   203,   152,     0,    28,
   150,   203,   151,   203,   152,     0,    29,   150,   203,   151,
   203,   152,     0,     3,     0,     9,     0,     4,     0,   203,
     8,   203,     0,   203,     8,   155,   203,   156,   203,     0,
   153,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   154,     0,   153,   203,   151,   203,   151,   203,   151,   203,
   154,     0,   153,   203,   151,   203,   151,   203,   154,     0,
   150,   203,   151,   203,   151,   203,   152,     0,     0,   150,
   208,   152,     0,     5,     0,   208,   151,     5,     0,     0,
   153,   210,   154,     0,   150,   210,   152,     0,   211,     0,
   210,   151,   211,     0,     0,   203,     0,   153,   212,   154,
     0,   203,     0,   205,     0,   212,   151,   203,     0,   212,
   151,   205,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   109,   111,   112,   119,   127,   141,   153,   155,   158,   160,
   161,   162,   165,   171,   176,   177,   178,   181,   185,   188,
   194,   199,   205,   213,   218,   222,   228,   233,   237,   242,
   246,   249,   254,   258,   262,   266,   271,   275,   278,   282,
   286,   290,   294,   298,   302,   305,   309,   312,   316,   319,
   328,   330,   336,   338,   339,   340,   341,   342,   343,   344,
   345,   346,   347,   348,   355,   360,   366,   371,   372,   373,
   374,   375,   376,   377,   378,   379,   380,   381,   382,   385,
   395,   405,   415,   424,   433,   442,   450,   458,   466,   473,
   480,   491,   505,   516,   522,   541,   552,   560,   566,   572,
   591,   597,   613,   620,   626,   632,   638,   647,   653,   673,
   679,   698,   717,   725,   731,   737,   743,   755,   761,   767,
   779,   785,   790,   795,   802,   804,   805,   808,   813,   824,
   842,   857,   888,   893,   897,   901,   905,   911,   916,   920,
   924,   929,   937,   941,   946,   964,   974,   992,  1009,  1026,
  1043,  1063,  1082,  1101,  1116,  1131,  1142,  1153,  1157,  1159,
  1162,  1165,  1166,  1168,  1169,  1171,  1174,  1176,  1179,  1190,
  1200,  1210,  1218,  1294,  1296,  1297,  1298,  1299,  1302,  1304,
  1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,
  1315,  1316,  1317,  1318,  1319,  1320,  1321,  1322,  1323,  1324,
  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1334,  1336,  1337,
  1348,  1355,  1368,  1377,  1385,  1393,  1403,  1407,  1412,  1416,
  1421,  1425,  1429,  1435,  1441,  1447,  1451,  1457,  1470,  1476,
  1485,  1489
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPoint","tCircle","tEllipsis",
"tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tPower","tBump","tProgression","tAssociation","tRotate","tTranslate","tSymetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tOffset","tAttractor","tLayers","tScalarSimplex","tVectorSimplex",
"tTensorSimplex","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tGeneral","tGeometry",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'<'","'>'","'+'","'-'","'*'","'/'","'%'",
"UMINUS","'^'","'('","','","')'","'{'","'}'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","View","Views","ScalarSimplex","VectorSimplex",
"TensorSimplex","ScalarTriangle","VectorTriangle","TensorTriangle","ScalarLine",
"VectorLine","TensorLine","ScalarPoint","VectorPoint","TensorPoint","Affectation",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Macro",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","Colors",
"ColorSections","ColorSection","@1","@2","@3","ColorAffects","ColorAffect","RGBAExpr",
"BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble", NULL
};
#endif

static const short yyr1[] = {     0,
   157,   157,   157,   158,   158,   158,   159,   159,   160,   160,
   160,   160,   161,   161,   161,   161,   161,   162,   162,   162,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   164,   164,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   166,   166,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   186,   187,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   189,   189,   190,   190,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   192,   193,   194,   194,
   196,   195,   197,   195,   198,   195,   199,   199,   200,   200,
   200,   201,   201,   202,   202,   202,   202,   202,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   204,   204,   204,
   205,   205,   206,   206,   206,   206,   207,   207,   208,   208,
   209,   209,   209,   210,   210,   211,   211,   211,   212,   212,
   212,   212
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     6,     8,     0,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    28,
    28,    28,    22,    22,    22,    16,    16,    16,    10,    10,
    10,     4,     7,     8,    12,     6,     5,     7,     7,    12,
     7,     9,    17,     7,     8,     8,     5,     7,    11,     8,
     9,     8,    22,    20,     8,     8,     5,     8,     7,     8,
     7,    11,     7,     9,     1,     1,     1,     0,     2,     4,
     4,     3,     7,     8,    11,    12,    12,     8,    12,     8,
    11,    15,     1,     2,     9,     2,     6,     9,     9,     9,
     8,     8,     8,     6,     4,     8,     2,     4,     0,     2,
     0,     5,     0,     5,     0,     5,     0,     2,     4,     8,
     4,     9,     7,     1,     1,     1,     1,     1,     1,     3,
     3,     3,     3,     3,     3,     2,     2,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     1,     1,     1,
     3,     6,    11,     9,     7,     7,     0,     3,     1,     3,
     0,     3,     3,     1,     3,     0,     1,     3,     1,     1,
     3,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     3,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
    58,    62,    59,    60,    61,    63,     0,    12,     0,    13,
    14,    16,    15,    17,   217,   217,     0,    64,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   226,     0,
     0,     0,     0,   226,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,     0,   226,   128,   157,     0,     0,     0,     0,     0,
     0,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   208,   210,
   209,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   179,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   227,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   132,     0,     0,     0,    67,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   219,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   187,   186,     0,    92,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   229,
   230,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   130,   129,   155,
     0,   131,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   163,   165,   158,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
    19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   180,   182,   181,   183,   184,   185,    97,     0,
   226,   226,     0,   107,   226,     0,   117,   226,   226,     0,
     0,   228,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
   128,     0,     0,     0,     0,     0,     0,    67,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,   226,     0,     0,   226,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   226,   226,     0,     0,     0,     0,   226,
   226,     0,     0,     0,     0,     0,   226,     0,   226,     0,
     0,     0,     0,     0,   220,     0,   217,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,     0,   199,   200,
   201,   202,   203,   204,     0,     0,     0,     0,     0,     0,
   226,     0,   226,     0,     0,     0,   211,   231,   232,    96,
     0,   226,   226,   226,   147,     0,   226,   226,   226,   226,
   226,   226,   226,   226,     0,     0,     0,   127,     0,   126,
   125,     0,     0,     0,     0,     0,     0,     0,   154,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    65,     0,     0,     0,     0,   221,     0,   167,
   167,   167,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   174,   175,   176,
   177,   178,     0,     0,     0,     0,     0,     0,     0,    18,
     0,     0,     0,     0,     0,    93,   101,     0,   104,     0,
    98,     0,    99,   119,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   123,   128,     0,     0,     0,     0,
     0,     0,     0,   133,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     0,   226,   226,     0,   226,     0,     0,   167,     0,     0,
   226,     0,     0,     0,   226,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   226,     0,     0,     0,     0,     0,     0,
     0,     0,   217,   198,   205,   206,   207,     0,   106,   116,
     0,     0,   152,   110,   112,     0,     0,     0,   151,   153,
   118,    94,   105,   115,   120,   156,     0,     0,     0,     0,
     0,   138,     0,   140,     0,   134,     0,     0,    66,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   221,     0,   224,     0,     0,     0,     0,
   162,   168,   164,   166,     0,     0,     0,     0,     0,     0,
     0,    21,     0,    30,     0,    34,     0,    28,     0,     0,
    33,     0,    38,    36,     0,     0,     0,     0,     0,     0,
    45,     0,     0,     0,     0,     0,    50,     0,     0,   102,
   212,     0,   148,   149,   150,   216,     0,   215,   128,   124,
     0,     0,     0,     0,     0,     0,   143,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   226,   223,   222,   226,     0,     0,     0,
     0,   182,   181,   111,     0,     0,   221,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   226,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   146,   226,     0,   144,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   226,   226,     0,   225,     0,     0,   169,   210,     0,   171,
     0,    35,     0,     0,     0,     0,    25,     0,    31,     0,
    37,    26,    39,     0,    42,     0,    46,    47,     0,     0,
    49,     0,     0,     0,     0,   214,   122,     0,     0,     0,
     0,   141,   135,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   226,   226,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,   139,   136,
     0,   226,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   226,   226,   226,    95,   100,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    29,    32,    40,     0,    41,
    48,    43,     0,     0,   213,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   226,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   226,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    89,    90,    91,     0,     0,   170,     0,     0,
     0,     0,    24,    27,     0,     0,     0,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   173,     0,     0,   226,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    44,    20,   103,   145,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
     0,     0,   226,     0,     0,     0,     0,     0,     0,   226,
   226,   226,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     5,   226,
     0,     0,     0,     0,     0,     0,     0,    86,    87,    88,
     0,   114,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   226,     0,     0,     0,     0,     0,     0,     0,   113,
     0,    22,     0,     0,     0,     0,     0,     0,   226,     0,
     0,     0,   226,   226,   226,     0,     0,     0,     0,     0,
     0,     0,   226,     0,     0,     0,    83,    84,    85,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   226,   226,   226,    23,     0,     0,     0,    80,
    81,    82,     0,     0,     0
};

static const short yydefgoto[] = {  1273,
     4,     5,    18,    19,    20,    21,     6,    55,    56,   344,
   472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
   482,   483,    57,   339,   578,   579,   580,   581,    61,    62,
    63,   866,   867,    64,    65,    66,   234,   355,   490,   491,
   492,   717,   718,   891,   643,   197,   186,   311,   214,   156,
   268,   714,   805,   806,   312
};

static const short yypact[] = {   451,
-32768,-32768,  -111,-32768,   157,  1182,    31,    23,    34,    59,
    66,   108,   110,   114,   -26,   -13,    -6,-32768,-32768,-32768,
-32768,   168,   184,    64,    74,    78,     9,    12,    80,    92,
   206,   141,   226,   246,   248,    37,   280,   193,   178,   217,
   236,   241,   -12,   239,   393,   365,   249,   395,   399,    82,
   263,    -7,   267,   385,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   418,-32768,  1174,-32768,
-32768,-32768,-32768,-32768,   273,   273,   419,-32768,   321,   321,
   321,   321,   275,   321,   276,   321,   321,   321,    72,   321,
   278,   282,   285,    72,   283,   286,   288,   290,   296,   297,
   306,   307,   101,   101,   101,   101,   310,   311,   312,   321,
-32768,   443,    72,-32768,-32768,   -43,   313,   319,   321,   -48,
   321,-32768,   326,   455,   330,   345,   347,   361,   374,   375,
   416,   422,   423,   428,   429,   438,   440,   444,   445,   447,
   449,   462,   464,   467,   474,   475,   482,   487,   498,   499,
   500,   504,   510,   515,   563,   328,   495,   430,-32768,-32768,
-32768,   516,   517,   518,   522,   524,   525,   526,   528,   529,
   530,   539,   540,   541,   550,   552,   558,   560,   573,   575,
   577,   321,   321,   321,   103,-32768,     2,   329,   383,   321,
   586,   321,   622,   719,   729,   321,    43,   562,   739,   321,
   321,   321,   594,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   582,   572,   587,   583,   321,   321,   321,
   853,   574,-32768,   265,   662,   101,-32768,   321,   321,   763,
   545,   321,   775,    21,   321,   613,   747,   750,   757,   758,
   765,   767,   768,   770,   772,   774,   776,   780,   789,   790,
   791,   793,   798,   799,   801,   802,   803,   812,   814,   696,
   817,   826,   827,   828,   777,   831,-32768,   -73,   837,   822,
   840,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   697,   697,   785,-32768,   321,   321,   321,   321,   321,
   308,   841,   859,   811,   315,   823,   861,   862,   863,   251,
-32768,     1,   321,   869,   490,   833,   871,   321,   497,   615,
   917,   929,   948,   958,   976,   998,  1557,  1669,   101,   694,
   724,   321,  1678,  1687,  1696,   101,   323,-32768,-32768,-32768,
   321,-32768,   726,   417,  1705,  1714,   873,   736,  1011,   880,
-32768,-32768,-32768,-32768,-32768,  1044,   751,   741,   742,   743,
   744,   748,   749,   752,   759,   760,   762,   766,   781,   782,
   784,   787,   788,   792,   807,   808,   810,   813,   819,   820,
   832,   838,   839,   849,   850,   852,   867,   885,-32768,   764,
-32768,   868,  1059,  1104,  1162,  1172,  1183,  1193,  1203,  1213,
  1223,  1233,  1723,  1244,  1254,  1264,  1276,  1286,  1296,  1732,
  1741,  1750,-32768,    27,    27,   697,   697,   697,-32768,   101,
    72,    72,   895,-32768,    72,   907,-32768,    72,    72,    35,
   321,-32768,   112,   786,   918,   919,   933,    22,   934,   935,
   946,   966,   967,   977,   981,   984,   321,   321,   870,   605,
   605,  1306,   101,   101,   101,    85,   130,-32768,   842,   872,
   874,   875,   876,   878,   881,   882,   883,   884,   886,   887,
  1024,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   321,   321,    72,   321,  1028,    72,   911,
   912,   914,  1061,   936,  1068,   321,   321,   101,  1073,  1074,
   937,  1080,  1081,    72,    72,  1092,   101,  1093,  1095,    72,
    72,  1096,  1102,  1103,  1106,  1108,    72,   593,    72,  1109,
  1118,  1119,  1123,  1124,-32768,  1125,   273,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   321,-32768,-32768,
-32768,-32768,-32768,-32768,   321,   321,   321,  1126,    26,  1127,
    72,  1128,    72,  1139,  1140,   321,    43,   251,-32768,-32768,
   321,    72,    72,    72,-32768,   135,    72,    72,    72,    72,
    72,    72,    72,    72,  1759,  1768,   321,-32768,   975,   712,
-32768,   994,   996,   175,   209,   214,   101,  1152,-32768,   433,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,-32768,  1777,  1786,  1153,  1316,   139,  1047,  1157,
  1157,  1157,   321,  1159,  1013,  1795,  1804,  1016,  1018,  1019,
  1021,  1022,  1029,  1023,  1030,  1033,  1027,  1034,  1040,  1042,
  1048,  1049,  1055,  1058,  1077,  1078,  1043,-32768,-32768,-32768,
-32768,-32768,  1079,  1088,  1094,  1100,  1101,  1046,  1107,-32768,
  1114,  1327,  1337,  1347,  1368,-32768,-32768,   101,-32768,  1164,
-32768,  1167,-32768,-32768,   266,  1813,  1204,  1225,  1226,   321,
   321,   321,  1248,  1249,  1251,  1253,  1261,  1262,  1263,  1274,
   321,   321,  1378,-32768,-32768,   605,   101,  1275,   101,  1277,
   101,    10,  1131,-32768,  1278,  1822,  1831,  1840,  1849,  1858,
  1867,  1876,  1885,  1894,  1903,  1912,  1921,   321,   321,-32768,
  1279,    72,    72,  1202,    72,  1280,  1144,  1157,  1155,  1156,
   284,  1309,  1317,   321,    72,  1313,  1319,  1324,  1178,  1325,
   593,  1328,  1322,   321,  1334,  1330,  1335,  1338,  1340,   593,
   321,   321,   321,    72,  1344,  1348,   593,   321,  1350,  1351,
  1355,   321,   273,-32768,-32768,-32768,-32768,  1358,-32768,-32768,
   321,   321,-32768,-32768,-32768,   174,   227,   234,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1388,   299,  1217,  1219,
  1220,-32768,  1229,-32768,  1230,-32768,   -22,   321,-32768,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,  1398,  1408,   139,   223,-32768,   230,  1221,  1303,     8,
-32768,-32768,-32768,-32768,   321,   321,  1385,  1381,  1240,  1930,
  1243,-32768,  1260,-32768,  1272,-32768,  1250,-32768,  1273,  1418,
-32768,  1282,-32768,-32768,  1252,  1284,  1428,  1939,  1438,  1283,
-32768,  1285,  1291,  1948,  1293,  1294,-32768,  1957,  1302,-32768,
    43,  1966,-32768,-32768,-32768,-32768,   321,-32768,   605,-32768,
   321,   321,   321,  1389,  1259,   -35,-32768,  1448,  1975,  1984,
  1993,  2002,  2011,  2020,  2029,  2038,  2047,  2056,  2065,  2074,
  1407,  1419,  1332,    72,-32768,-32768,    72,   321,  1399,   527,
  1421,    86,   132,-32768,  1320,  1441,   139,   593,  1453,   321,
  1451,   593,  1457,  1461,  1460,  1463,  1471,   321,  1472,    72,
  1478,  1481,   321,  1464,  1482,   321,  1480,  1490,   431,  1343,
  1459,  1469,  1479,-32768,    72,  1488,-32768,  1494,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
    72,    72,  1349,-32768,  1352,   244,-32768,  1353,  2083,-32768,
  1498,-32768,  1354,  1356,  1364,  2092,-32768,  1366,-32768,  1367,
-32768,-32768,-32768,  1489,-32768,  1365,-32768,-32768,  1506,  1373,
-32768,  1516,  1375,  1377,   321,-32768,-32768,  1500,  1523,    11,
  1384,-32768,-32768,  2101,  2110,  2119,  2128,  2137,  2146,  2155,
  2164,  2173,  1526,  1537,  1547,  1530,  1532,    72,    72,-32768,
   321,   321,  1536,   593,   593,   593,   593,  1539,  1542,  1543,
   593,  1549,  1550,  1552,  1560,  1561,   643,-32768,-32768,-32768,
   -22,    72,   321,   321,   321,   321,   321,   321,   321,   321,
   321,    72,    72,    72,-32768,-32768,  1417,  1415,   656,  2182,
  1572,  1425,  1427,  1433,  1434,-32768,-32768,-32768,  1437,-32768,
-32768,-32768,  1444,  1445,-32768,    15,  1447,  2191,  2200,  2209,
  2218,  2227,  2236,  2245,  2254,  2263,  1573,  1583,  1593,    72,
  1527,  1600,   321,  1475,   593,   593,  1604,  1610,   593,  1612,
  1614,  1620,    72,   321,   321,   321,   321,   321,   321,   321,
   321,   321,-32768,-32768,-32768,  1466,  1474,-32768,   477,  1626,
  1485,  1486,-32768,-32768,  1491,  1492,  1493,-32768,  1476,  2272,
  2281,  2290,  2299,  2308,  2317,  2326,  2335,  2344,  1562,   321,
   321,-32768,  1637,   593,    72,  1647,  1648,  1650,  1651,   321,
   321,   321,   321,   321,   321,   321,   321,   321,  1510,  2353,
   669,  1661,  1522,  1525,-32768,-32768,-32768,-32768,  2362,  2371,
  2380,  2389,  2398,  2407,  1569,  1579,  1599,   321,   321,-32768,
  1528,   593,    72,   321,   321,   321,   321,   321,   321,    72,
    72,    72,  2416,   681,  1534,  1533,  1544,  2425,  2434,  2443,
  2452,  2461,  2470,  1671,  1673,  1679,   321,  1681,-32768,    72,
   593,   321,   321,   321,   321,   321,   321,-32768,-32768,-32768,
   695,-32768,  1546,  1555,  2479,  2488,  2497,  2506,  2515,  2524,
  1688,    72,  1692,   321,   321,   321,   321,   321,   321,-32768,
  1553,-32768,  2533,  2542,  2551,  1609,  1619,  1629,    72,   321,
   321,   321,    72,    72,    72,  1565,  2560,  2569,  2578,  1711,
  1720,  1721,    72,   321,   321,   321,-32768,-32768,-32768,  1578,
  2587,  2596,  2605,   593,   321,   321,   321,  1568,  1639,  1649,
  1659,  1724,    72,    72,    72,-32768,  1726,  1727,  1728,-32768,
-32768,-32768,  1735,  1736,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1288,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1731,  1743,  -445,   271,  1744,-32768,-32768,
-32768,   717,  -843,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -576,-32768,-32768,  -721,   -79,-32768,  1326,   -91,   -72,
-32768,  -727,  1053,   476,-32768
};


#define	YYLAST		2756


static const short yytable[] = {   185,
   187,   188,   189,   157,   191,   582,   193,   194,   195,   827,
   199,   889,   215,   216,   217,   786,  1020,   107,   836,   226,
   108,   109,   927,   864,     7,   843,   120,   565,    68,   865,
   221,   657,   231,    67,   719,   720,   864,   159,   160,   230,
    69,   233,   865,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   181,    70,    83,   658,   566,    85,    94,
    95,    71,    96,   864,   159,   160,   883,   388,   389,   865,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   232,   292,   293,   294,   351,   352,   353,   295,   227,
   304,   117,   306,    72,   118,    73,   310,   560,   926,    74,
   315,   316,   317,    75,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   343,   589,    76,   110,   333,   334,
   335,   812,   121,    77,   296,   297,   298,   299,   345,   346,
   300,   431,   349,   301,   432,   356,    -2,     8,    84,     9,
   890,    86,   787,  1021,   296,   297,   298,   299,  1082,   953,
   300,   298,   299,    78,   354,   300,   954,   182,   183,   853,
   958,   670,   671,   672,   184,   296,   297,   298,   299,   556,
    79,   300,   393,   394,   395,   396,   397,   398,   399,   400,
   401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
   411,   412,   927,    80,   182,   183,   414,   415,   416,   417,
   418,   184,    98,    81,   196,    99,   100,    82,   101,    87,
  -187,  -187,   854,   433,   300,   587,   588,   449,   438,   855,
   780,    88,   102,    89,   456,   296,   297,   298,   299,  1000,
   212,   300,   452,   213,   296,   297,   298,   299,   430,    91,
   300,   457,    10,    11,    12,    13,    14,    15,    16,    17,
   340,   341,   296,   297,   298,   299,  -186,  -186,   300,    92,
   300,    93,  1042,  1043,  1044,  1045,   159,   160,   712,  1049,
    90,   713,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   419,   420,    97,   296,   297,   298,   299,
   424,   425,   300,   159,   160,   687,   688,   103,   548,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
   557,   558,    98,  1101,  1102,    99,   100,  1105,   101,   689,
   690,   584,   585,   586,   691,   692,   104,   575,   576,   296,
   297,   298,   299,   884,   885,   300,   296,   297,   298,   299,
   884,   222,   300,   886,   225,   105,   296,   297,   298,   299,
   106,   111,   300,   296,   297,   298,   299,   112,   113,   300,
   115,   114,  1143,   116,   604,   605,   618,   607,   296,   297,
   298,   299,   119,   920,   300,   627,   616,   617,   123,   122,
   124,   761,   155,   158,   190,   192,   815,   816,   298,   299,
   200,   201,   300,   184,   202,   204,   196,   206,   205,   207,
  1176,   296,   297,   298,   299,   208,   209,   300,   223,   857,
    -7,    -7,   858,    -7,   651,   210,   211,   236,   652,   218,
   219,   220,   228,   182,   183,   653,   654,   655,   229,  1204,
   184,   296,   297,   298,   299,   235,   665,   300,   269,   237,
   302,   666,   459,   460,   461,   462,   463,   464,   465,   466,
   467,   468,   469,   470,   238,   693,   239,   683,   459,   460,
   461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
   240,   696,   697,   698,   699,   700,   701,   702,   703,   704,
   705,   706,   707,   241,   242,   296,   297,   298,   299,   159,
   948,   300,  1258,   721,   303,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,   179,   180,   181,    -7,    -7,    -7,    -7,
    -7,    -7,    -7,    -7,   198,   243,   758,   267,   313,   203,
   471,   244,   245,   296,   297,   298,   299,   246,   247,   300,
   271,   975,     1,     2,   976,     3,   695,   248,   224,   249,
   766,   767,   768,   250,   251,   781,   252,   783,   253,   785,
   318,   777,   778,    24,    25,    26,    27,    28,    29,    30,
    31,   254,    32,   255,    34,    35,   256,    37,   337,   296,
   297,   298,   299,   257,   258,   300,   348,  1121,   802,   803,
  1122,   259,   296,   297,   298,   299,   260,    50,   300,   296,
   297,   298,   299,   435,   820,   300,   270,   261,   262,   263,
   439,    51,    52,   264,   830,    39,    40,    41,    42,   265,
    44,   837,   838,   839,   266,   272,   273,   274,   844,   182,
   183,   275,   848,   276,   277,   278,   184,   279,   280,   281,
   849,   851,   852,   638,   639,   640,   641,   642,   282,   283,
   284,    24,    25,    26,    27,    28,    29,    30,    31,   285,
    32,   286,    34,    35,    54,    37,   337,   287,   868,   288,
   869,   870,   871,   872,   873,   874,   875,   876,   877,   878,
   879,   880,   289,   330,   290,    50,   291,   338,   296,   297,
   298,   299,   329,   332,   300,   892,   893,   305,   331,    51,
    52,    24,    25,    26,    27,    28,    29,    30,    31,   357,
    32,   358,    34,    35,   359,    37,   337,   296,   297,   298,
   299,   360,   361,   300,   296,   297,   298,   299,   440,   362,
   300,   363,   364,   307,   365,    50,   366,   919,   367,   386,
   368,   921,   922,   923,   369,   296,   297,   298,   299,    51,
    52,   300,    54,   370,   371,   372,  1055,   373,   296,   297,
   298,   299,   374,   375,   300,   376,   377,   378,   946,  1072,
   949,   296,   297,   298,   299,   342,   379,   300,   380,   381,
   956,   382,  1160,   296,   297,   298,   299,   391,   964,   300,
   383,   384,   385,   969,  1188,   387,   972,   296,   297,   298,
   299,   390,    54,   300,   392,   300,   450,   421,  1211,   984,
   985,   986,   987,   988,   989,   990,   991,   992,   993,   994,
   995,   296,   297,   298,   299,   422,   427,   300,   428,   429,
   308,   296,   297,   298,   299,   434,   451,   300,   458,   486,
   309,   296,   297,   298,   299,   487,   489,   300,   494,   525,
   314,   495,   496,   497,   498,  1017,   549,   550,   499,   500,
   552,   551,   501,   554,   555,   296,   297,   298,   299,   502,
   503,   300,   504,   553,   347,   526,   505,   296,   297,   298,
   299,  1039,  1040,   300,   562,   563,   350,   296,   297,   298,
   299,   506,   507,   300,   508,   561,   413,   509,   510,   564,
   567,   568,   511,  1058,  1059,  1060,  1061,  1062,  1063,  1064,
  1065,  1066,   569,   296,   297,   298,   299,   512,   513,   300,
   514,   606,   423,   515,   609,   296,   297,   298,   299,   516,
   517,   300,   570,   571,   426,   296,   297,   298,   299,   624,
   625,   300,   518,   572,   436,   630,   631,   573,   519,   520,
   574,   591,   637,  1099,   644,   296,   297,   298,   299,   521,
   522,   300,   523,   336,  1110,  1111,  1112,  1113,  1114,  1115,
  1116,  1117,  1118,   296,   297,   298,   299,   524,   527,   300,
   577,   592,   437,   593,   594,   595,   660,   596,   662,   603,
   597,   598,   599,   600,   608,   601,   602,   667,   668,   669,
  1140,  1141,   673,   674,   675,   676,   677,   678,   679,   680,
  1149,  1150,  1151,  1152,  1153,  1154,  1155,  1156,  1157,   296,
   297,   298,   299,   610,   611,   300,   612,   613,   441,   614,
   615,   296,   297,   298,   299,   619,   620,   300,  1173,  1174,
   442,   621,   622,   623,  1178,  1179,  1180,  1181,  1182,  1183,
   296,   297,   298,   299,   626,   628,   300,   629,   632,   443,
   296,   297,   298,   299,   633,   634,   300,  1201,   635,   444,
   636,   645,  1205,  1206,  1207,  1208,  1209,  1210,   296,   297,
   298,   299,   646,   647,   300,   648,   649,   445,   684,   715,
   650,   656,   659,   661,  1223,  1224,  1225,  1226,  1227,  1228,
   296,   297,   298,   299,   663,   664,   300,   685,   686,   446,
  1237,  1238,  1239,   296,   297,   298,   299,   694,   710,   300,
   716,   722,   488,   723,  1251,  1252,  1253,   726,   727,   759,
   728,   729,   760,   730,   732,  1259,  1260,  1261,   735,   731,
   733,    -1,    22,   734,   736,    23,   296,   297,   298,   299,
   809,   737,   300,   738,   745,   493,   817,   751,   739,   740,
   821,   296,   297,   298,   299,   741,   125,   300,   742,   763,
   528,    24,    25,    26,    27,    28,    29,    30,    31,   840,
    32,    33,    34,    35,    36,    37,    38,   743,   744,   746,
   764,   765,    39,    40,    41,    42,    43,    44,   747,    45,
    46,    47,    48,    49,   748,    50,   296,   297,   298,   299,
   749,   750,   300,   769,   770,   529,   771,   752,   772,    51,
    52,   126,   127,   128,   753,    53,   773,   774,   775,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   776,
   782,   788,   784,   789,   808,   804,   810,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   811,   149,   150,
   151,   152,   153,   154,   296,   297,   298,   299,   813,   814,
   300,   818,    54,   530,   296,   297,   298,   299,   822,   819,
   300,   823,   825,   531,   829,   296,   297,   298,   299,   824,
   826,   300,   832,   828,   532,   296,   297,   298,   299,   831,
   833,   300,   835,   834,   533,   296,   297,   298,   299,   841,
   842,   300,   845,   846,   534,   296,   297,   298,   299,   944,
   847,   300,   945,   850,   535,   296,   297,   298,   299,   859,
   861,   300,   860,   887,   536,   296,   297,   298,   299,   862,
   863,   300,   888,   895,   537,   966,   296,   297,   298,   299,
   894,   896,   300,   898,   924,   539,   296,   297,   298,   299,
   981,   901,   300,   905,   947,   540,   296,   297,   298,   299,
   899,   925,   300,   941,   943,   541,   996,   997,   296,   297,
   298,   299,   900,   902,   300,   942,   950,   542,   296,   297,
   298,   299,   904,   910,   300,   906,   911,   543,   296,   297,
   298,   299,   912,   914,   300,   915,   952,   544,   296,   297,
   298,   299,   917,   951,   300,   955,   957,   583,   296,   297,
   298,   299,   959,   960,   300,   961,   970,   711,   962,   296,
   297,   298,   299,  1037,  1038,   300,   963,   965,   754,   296,
   297,   298,   299,   967,   973,   300,   968,   971,   755,   296,
   297,   298,   299,   982,   974,   300,   977,  1057,   756,   983,
  1003,   998,   999,  1001,  1004,  1018,  1005,  1067,  1068,  1069,
   296,   297,   298,   299,  1006,  1011,   300,  1008,  1009,   757,
   296,   297,   298,   299,  1013,  1015,   300,  1016,  1019,   779,
   296,   297,   298,   299,  1022,  1035,   300,  1036,  1041,   856,
   296,   297,   298,   299,  1046,  1096,   300,  1047,  1048,   881,
   296,   297,   298,   299,  1050,  1051,   300,  1052,  1109,   882,
   296,   297,   298,   299,  1053,  1054,   300,  1070,  1071,   903,
   296,   297,   298,   299,  1074,  1075,   300,  1076,  1093,   907,
   296,   297,   298,   299,  1077,  1078,   300,  1079,  1094,   909,
   296,   297,   298,   299,  1080,  1081,   300,  1083,  1095,   928,
  1144,   296,   297,   298,   299,  1098,  1097,   300,  1100,  1103,
   978,   296,   297,   298,   299,  1104,  1106,   300,  1107,  1119,
   979,   296,   297,   298,   299,  1108,  1120,   300,  1123,  1129,
   980,   296,   297,   298,   299,  1124,  1125,   300,  1177,  1142,
  1010,  1139,  1126,  1127,  1128,  1184,  1185,  1186,   296,   297,
   298,   299,  1145,  1146,   300,  1147,  1148,  1012,   296,   297,
   298,   299,  1158,  1161,   300,  1203,  1175,  1014,   296,   297,
   298,   299,  1162,  1189,   300,  1163,  1198,  1032,  1199,   296,
   297,   298,   299,  1190,  1200,   300,  1202,  1221,  1033,   296,
   297,   298,   299,  1220,  1191,   300,  1212,  1222,  1034,   296,
   297,   298,   299,  1229,  1236,   300,  1213,   447,  1240,  1241,
  1242,   296,   297,   298,   299,  1243,  1247,   300,  1250,  1262,
  1170,   296,   297,   298,   299,  1248,  1249,   300,  1254,  1266,
  1171,  1270,  1271,  1272,  1274,  1275,    58,  1056,  1267,  1268,
  1269,   296,   297,   298,   299,   590,     0,   300,    59,    60,
  1172,   296,   297,   298,   299,     0,   559,   300,     0,     0,
  1233,   296,   297,   298,   299,   807,     0,   300,     0,     0,
  1234,   296,   297,   298,   299,     0,     0,   300,     0,     0,
  1235,   296,   297,   298,   299,     0,     0,   300,     0,     0,
  1263,   296,   297,   298,   299,     0,     0,   300,     0,     0,
  1264,   296,   297,   298,   299,     0,     0,   300,     0,     0,
  1265,   296,   297,   298,   299,     0,     0,   300,     0,   448,
   296,   297,   298,   299,     0,     0,   300,     0,   453,   296,
   297,   298,   299,     0,     0,   300,     0,   454,   296,   297,
   298,   299,     0,     0,   300,     0,   455,   296,   297,   298,
   299,     0,     0,   300,     0,   484,   296,   297,   298,   299,
     0,     0,   300,     0,   485,   296,   297,   298,   299,     0,
     0,   300,     0,   538,   296,   297,   298,   299,     0,     0,
   300,     0,   545,   296,   297,   298,   299,     0,     0,   300,
     0,   546,   296,   297,   298,   299,     0,     0,   300,     0,
   547,   296,   297,   298,   299,     0,     0,   300,     0,   681,
   296,   297,   298,   299,     0,     0,   300,     0,   682,   296,
   297,   298,   299,     0,     0,   300,     0,   708,   296,   297,
   298,   299,     0,     0,   300,     0,   709,   296,   297,   298,
   299,     0,     0,   300,     0,   724,   296,   297,   298,   299,
     0,     0,   300,     0,   725,   296,   297,   298,   299,     0,
     0,   300,     0,   762,   296,   297,   298,   299,     0,     0,
   300,     0,   790,   296,   297,   298,   299,     0,     0,   300,
     0,   791,   296,   297,   298,   299,     0,     0,   300,     0,
   792,   296,   297,   298,   299,     0,     0,   300,     0,   793,
   296,   297,   298,   299,     0,     0,   300,     0,   794,   296,
   297,   298,   299,     0,     0,   300,     0,   795,   296,   297,
   298,   299,     0,     0,   300,     0,   796,   296,   297,   298,
   299,     0,     0,   300,     0,   797,   296,   297,   298,   299,
     0,     0,   300,     0,   798,   296,   297,   298,   299,     0,
     0,   300,     0,   799,   296,   297,   298,   299,     0,     0,
   300,     0,   800,   296,   297,   298,   299,     0,     0,   300,
     0,   801,   296,   297,   298,   299,     0,     0,   300,     0,
   897,   296,   297,   298,   299,     0,     0,   300,     0,   908,
   296,   297,   298,   299,     0,     0,   300,     0,   913,   296,
   297,   298,   299,     0,     0,   300,     0,   916,   296,   297,
   298,   299,     0,     0,   300,     0,   918,   296,   297,   298,
   299,     0,     0,   300,     0,   929,   296,   297,   298,   299,
     0,     0,   300,     0,   930,   296,   297,   298,   299,     0,
     0,   300,     0,   931,   296,   297,   298,   299,     0,     0,
   300,     0,   932,   296,   297,   298,   299,     0,     0,   300,
     0,   933,   296,   297,   298,   299,     0,     0,   300,     0,
   934,   296,   297,   298,   299,     0,     0,   300,     0,   935,
   296,   297,   298,   299,     0,     0,   300,     0,   936,   296,
   297,   298,   299,     0,     0,   300,     0,   937,   296,   297,
   298,   299,     0,     0,   300,     0,   938,   296,   297,   298,
   299,     0,     0,   300,     0,   939,   296,   297,   298,   299,
     0,     0,   300,     0,   940,   296,   297,   298,   299,     0,
     0,   300,     0,  1002,   296,   297,   298,   299,     0,     0,
   300,     0,  1007,   296,   297,   298,   299,     0,     0,   300,
     0,  1023,   296,   297,   298,   299,     0,     0,   300,     0,
  1024,   296,   297,   298,   299,     0,     0,   300,     0,  1025,
   296,   297,   298,   299,     0,     0,   300,     0,  1026,   296,
   297,   298,   299,     0,     0,   300,     0,  1027,   296,   297,
   298,   299,     0,     0,   300,     0,  1028,   296,   297,   298,
   299,     0,     0,   300,     0,  1029,   296,   297,   298,   299,
     0,     0,   300,     0,  1030,   296,   297,   298,   299,     0,
     0,   300,     0,  1031,   296,   297,   298,   299,     0,     0,
   300,     0,  1073,   296,   297,   298,   299,     0,     0,   300,
     0,  1084,   296,   297,   298,   299,     0,     0,   300,     0,
  1085,   296,   297,   298,   299,     0,     0,   300,     0,  1086,
   296,   297,   298,   299,     0,     0,   300,     0,  1087,   296,
   297,   298,   299,     0,     0,   300,     0,  1088,   296,   297,
   298,   299,     0,     0,   300,     0,  1089,   296,   297,   298,
   299,     0,     0,   300,     0,  1090,   296,   297,   298,   299,
     0,     0,   300,     0,  1091,   296,   297,   298,   299,     0,
     0,   300,     0,  1092,   296,   297,   298,   299,     0,     0,
   300,     0,  1130,   296,   297,   298,   299,     0,     0,   300,
     0,  1131,   296,   297,   298,   299,     0,     0,   300,     0,
  1132,   296,   297,   298,   299,     0,     0,   300,     0,  1133,
   296,   297,   298,   299,     0,     0,   300,     0,  1134,   296,
   297,   298,   299,     0,     0,   300,     0,  1135,   296,   297,
   298,   299,     0,     0,   300,     0,  1136,   296,   297,   298,
   299,     0,     0,   300,     0,  1137,   296,   297,   298,   299,
     0,     0,   300,     0,  1138,   296,   297,   298,   299,     0,
     0,   300,     0,  1159,   296,   297,   298,   299,     0,     0,
   300,     0,  1164,   296,   297,   298,   299,     0,     0,   300,
     0,  1165,   296,   297,   298,   299,     0,     0,   300,     0,
  1166,   296,   297,   298,   299,     0,     0,   300,     0,  1167,
   296,   297,   298,   299,     0,     0,   300,     0,  1168,   296,
   297,   298,   299,     0,     0,   300,     0,  1169,   296,   297,
   298,   299,     0,     0,   300,     0,  1187,   296,   297,   298,
   299,     0,     0,   300,     0,  1192,   296,   297,   298,   299,
     0,     0,   300,     0,  1193,   296,   297,   298,   299,     0,
     0,   300,     0,  1194,   296,   297,   298,   299,     0,     0,
   300,     0,  1195,   296,   297,   298,   299,     0,     0,   300,
     0,  1196,   296,   297,   298,   299,     0,     0,   300,     0,
  1197,   296,   297,   298,   299,     0,     0,   300,     0,  1214,
   296,   297,   298,   299,     0,     0,   300,     0,  1215,   296,
   297,   298,   299,     0,     0,   300,     0,  1216,   296,   297,
   298,   299,     0,     0,   300,     0,  1217,   296,   297,   298,
   299,     0,     0,   300,     0,  1218,   296,   297,   298,   299,
     0,     0,   300,     0,  1219,   296,   297,   298,   299,     0,
     0,   300,     0,  1230,   296,   297,   298,   299,     0,     0,
   300,     0,  1231,   296,   297,   298,   299,     0,     0,   300,
     0,  1232,   296,   297,   298,   299,     0,     0,   300,     0,
  1244,   296,   297,   298,   299,     0,     0,   300,     0,  1245,
   296,   297,   298,   299,     0,     0,   300,     0,  1246,   296,
   297,   298,   299,     0,     0,   300,     0,  1255,   296,   297,
   298,   299,     0,     0,   300,     0,  1256,   296,   297,   298,
   299,     0,     0,   300,     0,  1257
};

static const short yycheck[] = {    79,
    80,    81,    82,    76,    84,   451,    86,    87,    88,   731,
    90,     4,   104,   105,   106,     6,     6,    30,   740,    63,
    33,    34,   866,    59,   136,   747,    34,     6,     6,    65,
   110,     6,    81,     3,   611,   612,    59,     3,     4,   119,
     7,   121,    65,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,     6,    57,    41,    46,    57,    33,
    34,     6,    36,    59,     3,     4,   804,   151,   152,    65,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   150,   182,   183,   184,    85,    86,    87,     6,   153,
   190,    30,   192,     6,    33,     6,   196,     6,   154,     6,
   200,   201,   202,   150,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   226,     6,   150,   150,   218,   219,
   220,   718,   150,   150,   143,   144,   145,   146,   228,   229,
   149,   151,   232,   152,   154,   235,     0,     1,   150,     3,
   153,   150,   153,   153,   143,   144,   145,   146,   154,   897,
   149,   145,   146,     6,   154,   149,   898,   143,   144,     6,
   902,    47,    48,    49,   150,   143,   144,   145,   146,   155,
     7,   149,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,  1056,   150,   143,   144,   296,   297,   298,   299,
   300,   150,    30,   150,   153,    33,    34,   150,    36,   150,
   145,   146,     6,   313,   149,   151,   152,   329,   318,     6,
   686,   150,    50,    38,   336,   143,   144,   145,   146,     6,
   150,   149,   332,   153,   143,   144,   145,   146,     8,    34,
   149,   341,   106,   107,   108,   109,   110,   111,   112,   113,
     6,     7,   143,   144,   145,   146,   145,   146,   149,    34,
   149,    34,  1004,  1005,  1006,  1007,     3,     4,   150,  1011,
   150,   153,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,     6,     7,    36,   143,   144,   145,   146,
     6,     7,   149,     3,     4,   151,   152,   150,   420,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
   430,   431,    30,  1075,  1076,    33,    34,  1079,    36,   151,
   152,   453,   454,   455,   151,   152,   150,   447,   448,   143,
   144,   145,   146,   151,   152,   149,   143,   144,   145,   146,
   151,   111,   149,   154,   114,   150,   143,   144,   145,   146,
   150,   153,   149,   143,   144,   145,   146,     5,    34,   149,
     6,   153,  1124,     5,   484,   485,   498,   487,   143,   144,
   145,   146,   150,   859,   149,   507,   496,   497,    34,   153,
     3,   156,   150,     5,   150,   150,   143,   144,   145,   146,
   153,   150,   149,   150,   150,   153,   153,   150,   153,   150,
  1162,   143,   144,   145,   146,   150,   150,   149,     6,   151,
     0,     1,   154,     3,   527,   150,   150,     3,   538,   150,
   150,   150,   150,   143,   144,   545,   546,   547,   150,  1191,
   150,   143,   144,   145,   146,   150,   556,   149,   151,   150,
   152,   561,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,   150,   587,   150,   577,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
   150,   591,   592,   593,   594,   595,   596,   597,   598,   599,
   600,   601,   602,   150,   150,   143,   144,   145,   146,     3,
     4,   149,  1254,   613,   152,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   106,   107,   108,   109,
   110,   111,   112,   113,    89,   150,   658,     5,     7,    94,
   154,   150,   150,   143,   144,   145,   146,   150,   150,   149,
   151,   151,   132,   133,   154,   135,   154,   150,   113,   150,
   670,   671,   672,   150,   150,   687,   150,   689,   150,   691,
     7,   681,   682,    30,    31,    32,    33,    34,    35,    36,
    37,   150,    39,   150,    41,    42,   150,    44,    45,   143,
   144,   145,   146,   150,   150,   149,    82,   151,   708,   709,
   154,   150,   143,   144,   145,   146,   150,    64,   149,   143,
   144,   145,   146,   154,   724,   149,   152,   150,   150,   150,
   154,    78,    79,   150,   734,    51,    52,    53,    54,   150,
    56,   741,   742,   743,   150,   150,   150,   150,   748,   143,
   144,   150,   752,   150,   150,   150,   150,   150,   150,   150,
   753,   761,   762,    91,    92,    93,    94,    95,   150,   150,
   150,    30,    31,    32,    33,    34,    35,    36,    37,   150,
    39,   150,    41,    42,   131,    44,    45,   150,   788,   150,
   790,   791,   792,   793,   794,   795,   796,   797,   798,   799,
   800,   801,   150,   152,   150,    64,   150,   154,   143,   144,
   145,   146,   151,   151,   149,   815,   816,   152,   152,    78,
    79,    30,    31,    32,    33,    34,    35,    36,    37,   137,
    39,     5,    41,    42,     5,    44,    45,   143,   144,   145,
   146,     5,     5,   149,   143,   144,   145,   146,   154,     5,
   149,     5,     5,   152,     5,    64,     5,   857,     5,     3,
     5,   861,   862,   863,     5,   143,   144,   145,   146,    78,
    79,   149,   131,     5,     5,     5,   154,     5,   143,   144,
   145,   146,     5,     5,   149,     5,     5,     5,   888,   154,
   890,   143,   144,   145,   146,   154,     5,   149,     5,   124,
   900,     5,   154,   143,   144,   145,   146,     6,   908,   149,
     5,     5,     5,   913,   154,     5,   916,   143,   144,   145,
   146,     5,   131,   149,     5,   149,   153,     7,   154,   929,
   930,   931,   932,   933,   934,   935,   936,   937,   938,   939,
   940,   143,   144,   145,   146,     7,     6,   149,     7,     7,
   152,   143,   144,   145,   146,     7,   153,   149,   153,     7,
   152,   143,   144,   145,   146,   150,     7,   149,   138,     5,
   152,   151,   151,   151,   151,   975,   421,   422,   151,   151,
   425,     7,   151,   428,   429,   143,   144,   145,   146,   151,
   151,   149,   151,     7,   152,   152,   151,   143,   144,   145,
   146,  1001,  1002,   149,     7,     7,   152,   143,   144,   145,
   146,   151,   151,   149,   151,   150,   152,   151,   151,     7,
     7,     7,   151,  1023,  1024,  1025,  1026,  1027,  1028,  1029,
  1030,  1031,     7,   143,   144,   145,   146,   151,   151,   149,
   151,   486,   152,   151,   489,   143,   144,   145,   146,   151,
   151,   149,     7,     7,   152,   143,   144,   145,   146,   504,
   505,   149,   151,     7,   152,   510,   511,     7,   151,   151,
     7,   150,   517,  1073,   519,   143,   144,   145,   146,   151,
   151,   149,   151,   151,  1084,  1085,  1086,  1087,  1088,  1089,
  1090,  1091,  1092,   143,   144,   145,   146,   151,   151,   149,
   151,   150,   152,   150,   150,   150,   551,   150,   553,     6,
   150,   150,   150,   150,     7,   150,   150,   562,   563,   564,
  1120,  1121,   567,   568,   569,   570,   571,   572,   573,   574,
  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,   143,
   144,   145,   146,   153,   153,   149,   153,     7,   152,   134,
     3,   143,   144,   145,   146,     3,     3,   149,  1158,  1159,
   152,   145,     3,     3,  1164,  1165,  1166,  1167,  1168,  1169,
   143,   144,   145,   146,     3,     3,   149,     3,     3,   152,
   143,   144,   145,   146,     3,     3,   149,  1187,     3,   152,
     3,     3,  1192,  1193,  1194,  1195,  1196,  1197,   143,   144,
   145,   146,     5,     5,   149,     3,     3,   152,   154,    83,
     6,     6,     6,     6,  1214,  1215,  1216,  1217,  1218,  1219,
   143,   144,   145,   146,     6,     6,   149,   154,   153,   152,
  1230,  1231,  1232,   143,   144,   145,   146,     6,     6,   149,
     4,     3,   152,   151,  1244,  1245,  1246,   152,   151,     6,
   152,   151,     6,   152,   152,  1255,  1256,  1257,   152,   151,
   151,     0,     1,   151,   151,     4,   143,   144,   145,   146,
   715,   152,   149,   152,   152,   152,   721,   152,   151,   151,
   725,   143,   144,   145,   146,   151,    33,   149,   151,     6,
   152,    30,    31,    32,    33,    34,    35,    36,    37,   744,
    39,    40,    41,    42,    43,    44,    45,   151,   151,   151,
     6,     6,    51,    52,    53,    54,    55,    56,   151,    58,
    59,    60,    61,    62,   151,    64,   143,   144,   145,   146,
   151,   151,   149,     6,     6,   152,     6,   151,     6,    78,
    79,    88,    89,    90,   151,    84,     6,     6,     6,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,     6,
     6,   151,     6,     6,    83,     7,     7,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   154,   125,   126,
   127,   128,   129,   130,   143,   144,   145,   146,   154,   154,
   149,     3,   131,   152,   143,   144,   145,   146,     6,     3,
   149,     3,   145,   152,     3,   143,   144,   145,   146,     6,
     6,   149,     3,     6,   152,   143,   144,   145,   146,     6,
     6,   149,     3,     6,   152,   143,   144,   145,   146,     6,
     3,   149,     3,     3,   152,   143,   144,   145,   146,   884,
     6,   149,   887,     6,   152,   143,   144,   145,   146,   153,
   151,   149,   154,   153,   152,   143,   144,   145,   146,   151,
   151,   149,    80,     3,   152,   910,   143,   144,   145,   146,
     6,   152,   149,   151,     6,   152,   143,   144,   145,   146,
   925,   152,   149,   152,     6,   152,   143,   144,   145,   146,
   151,   153,   149,     7,    83,   152,   941,   942,   143,   144,
   145,   146,   151,   151,   149,     7,     6,   152,   143,   144,
   145,   146,   151,   151,   149,   152,   152,   152,   143,   144,
   145,   146,   152,   151,   149,   152,     6,   152,   143,   144,
   145,   146,   151,   134,   149,     3,     6,   152,   143,   144,
   145,   146,     6,     3,   149,     6,     3,   152,     6,   143,
   144,   145,   146,   998,   999,   149,     6,     6,   152,   143,
   144,   145,   146,     6,     5,   149,     6,     6,   152,   143,
   144,   145,   146,     6,     5,   149,   154,  1022,   152,     6,
     3,   153,   151,   151,   151,     6,   151,  1032,  1033,  1034,
   143,   144,   145,   146,   151,   151,   149,   152,   152,   152,
   143,   144,   145,   146,   152,   151,   149,   151,     6,   152,
   143,   144,   145,   146,   151,     6,   149,     6,     3,   152,
   143,   144,   145,   146,     6,  1070,   149,     6,     6,   152,
   143,   144,   145,   146,     6,     6,   149,     6,  1083,   152,
   143,   144,   145,   146,     5,     5,   149,   151,   154,   152,
   143,   144,   145,   146,     3,   151,   149,   151,     6,   152,
   143,   144,   145,   146,   152,   152,   149,   151,     6,   152,
   143,   144,   145,   146,   151,   151,   149,   151,     6,   152,
  1125,   143,   144,   145,   146,     6,    80,   149,   134,     6,
   152,   143,   144,   145,   146,     6,     5,   149,     5,   154,
   152,   143,   144,   145,   146,     6,   153,   149,     3,   154,
   152,   143,   144,   145,   146,   151,   151,   149,  1163,     3,
   152,    80,   152,   152,   152,  1170,  1171,  1172,   143,   144,
   145,   146,     6,     6,   149,     6,     6,   152,   143,   144,
   145,   146,   153,     3,   149,  1190,   139,   152,   143,   144,
   145,   146,   151,   140,   149,   151,     6,   152,     6,   143,
   144,   145,   146,   151,     6,   149,     6,  1212,   152,   143,
   144,   145,   146,     6,   151,   149,   151,     6,   152,   143,
   144,   145,   146,   151,  1229,   149,   152,   151,  1233,  1234,
  1235,   143,   144,   145,   146,   151,     6,   149,  1243,   152,
   152,   143,   144,   145,   146,     6,     6,   149,   151,     6,
   152,     6,     6,     6,     0,     0,     6,  1021,  1263,  1264,
  1265,   143,   144,   145,   146,   458,    -1,   149,     6,     6,
   152,   143,   144,   145,   146,    -1,   431,   149,    -1,    -1,
   152,   143,   144,   145,   146,   713,    -1,   149,    -1,    -1,
   152,   143,   144,   145,   146,    -1,    -1,   149,    -1,    -1,
   152,   143,   144,   145,   146,    -1,    -1,   149,    -1,    -1,
   152,   143,   144,   145,   146,    -1,    -1,   149,    -1,    -1,
   152,   143,   144,   145,   146,    -1,    -1,   149,    -1,    -1,
   152,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 121 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 135 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 142 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 167 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 172 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 183 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 186 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 190 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 196 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 202 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 209 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 215 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 219 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 223 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 230 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 234 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 239 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 243 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 251 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 255 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 259 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 263 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 267 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 273 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 276 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 279 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 283 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 287 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 291 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 295 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 300 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 303 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 310 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 314 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 317 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 320 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 331 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 337 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 338 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 339 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 340 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 341 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 342 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 343 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 344 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 345 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 346 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 347 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 348 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 65:
#line 357 "Gmsh.y"
{ 
      EndView(yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 66:
#line 361 "Gmsh.y"
{
      EndView(yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 67:
#line 368 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 80:
#line 390 "Gmsh.y"
{
      AddView_ScalarSimplex(yyvsp[-25].d,yyvsp[-23].d,yyvsp[-21].d,yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 81:
#line 400 "Gmsh.y"
{
      AddView_VectorSimplex(yyvsp[-25].d,yyvsp[-23].d,yyvsp[-21].d,yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 82:
#line 410 "Gmsh.y"
{
      AddView_TensorSimplex(yyvsp[-25].d,yyvsp[-23].d,yyvsp[-21].d,yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 83:
#line 419 "Gmsh.y"
{
      AddView_ScalarTriangle(yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 84:
#line 428 "Gmsh.y"
{
      AddView_VectorTriangle(yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 85:
#line 437 "Gmsh.y"
{
      AddView_TensorTriangle(yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 86:
#line 445 "Gmsh.y"
{
      AddView_ScalarLine(yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 87:
#line 453 "Gmsh.y"
{
      AddView_VectorLine(yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 88:
#line 461 "Gmsh.y"
{
      AddView_TensorLine(yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 89:
#line 468 "Gmsh.y"
{
      AddView_ScalarPoint(yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 90:
#line 475 "Gmsh.y"
{
      AddView_VectorPoint(yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 91:
#line 482 "Gmsh.y"
{
      AddView_TensorPoint(yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 92:
#line 493 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 93:
#line 510 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 94:
#line 517 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 95:
#line 523 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      	List_Read(yyvsp[-1].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-8].d,yyvsp[-6].d,yyvsp[-4].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 96:
#line 542 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 97:
#line 553 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 98:
#line 561 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 99:
#line 567 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 100:
#line 573 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      	List_Read(yyvsp[-1].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-8].d,yyvsp[-6].d,yyvsp[-4].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 101:
#line 592 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 102:
#line 598 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 103:
#line 615 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 104:
#line 621 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 105:
#line 627 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 106:
#line 633 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 107:
#line 639 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 108:
#line 648 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 109:
#line 654 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yyerror("wrong nurbs curve definition (deg + 1 + nbpts != nbknots)");
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 110:
#line 674 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 111:
#line 680 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 112:
#line 699 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Ruled surface %d has not 3 or 4 borders", yyvsp[-4].d);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 113:
#line 720 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 114:
#line 728 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 115:
#line 732 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 116:
#line 738 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 117:
#line 744 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 118:
#line 756 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 119:
#line 762 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 120:
#line 768 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 121:
#line 781 "Gmsh.y"
{
      TranslateShapes (yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 122:
#line 786 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 123:
#line 791 "Gmsh.y"
{
      SymetryShapes(yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-4].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 124:
#line 796 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 125:
#line 803 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 126:
#line 804 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 127:
#line 805 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 128:
#line 810 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 129:
#line 814 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 130:
#line 826 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 131:
#line 844 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 132:
#line 859 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown file: %s", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 133:
#line 890 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 134:
#line 894 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 135:
#line 898 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 136:
#line 902 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 137:
#line 906 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 138:
#line 912 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 139:
#line 917 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 140:
#line 921 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 141:
#line 925 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 142:
#line 931 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 143:
#line 939 "Gmsh.y"
{
    ;
    break;}
case 144:
#line 942 "Gmsh.y"
{
    ;
    break;}
case 145:
#line 948 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 146:
#line 965 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 147:
#line 976 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 148:
#line 993 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Power : code 1 ou -1 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 149:
#line 1010 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 150:
#line 1027 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 3*sign(d); /* Progresion : code 3 ou -3 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 151:
#line 1044 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Bad Number of Points for Transfinite Surface %d", yyvsp[-4].d) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1064 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
          vyyerror("Bad Number of Points for Elliptic Surface %d", yyvsp[-4].d) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1083 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Bad Number of Points for Transfinite Volume %d", yyvsp[-4].d) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1102 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", j);
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 155:
#line 1117 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", j);
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 156:
#line 1132 "Gmsh.y"
{
      Msg(PARSER_ERROR, "Physical Associations do not exist anymore!");
    ;
    break;}
case 157:
#line 1144 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 161:
#line 1164 "Gmsh.y"
{ ColorField = ColorGeneral; ;
    break;}
case 163:
#line 1167 "Gmsh.y"
{ ColorField = ColorGeometry; ;
    break;}
case 165:
#line 1170 "Gmsh.y"
{ ColorField = ColorMesh; ;
    break;}
case 169:
#line 1181 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, -1, yyvsp[-1].c, &flag);
      if(flag) vyyerror("Unknown Color: %s", yyvsp[-1].c);
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field: %s", yyvsp[-3].c);
      else
	*ptr = i ;
    ;
    break;}
case 170:
#line 1191 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, (int)yyvsp[-2].d, yyvsp[-4].c, &flag);
      if(flag) vyyerror("Unknown Color: %s", yyvsp[-4].c);
      Get_ColorPointerForString(ColorField, yyvsp[-7].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field: %s", yyvsp[-7].c);
      else
	*ptr = i ;
    ;
    break;}
case 171:
#line 1201 "Gmsh.y"
{
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field: %s", yyvsp[-1].v);
      else
	*ptr = PACK_COLOR((int)yyvsp[-1].v[0], (int)yyvsp[-1].v[1], (int)yyvsp[-1].v[2], (int)yyvsp[-1].v[3]);
    ;
    break;}
case 172:
#line 1212 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
    ;
    break;}
case 173:
#line 1219 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=255.;
    ;
    break;}
case 174:
#line 1295 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 175:
#line 1296 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 176:
#line 1297 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 177:
#line 1298 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 178:
#line 1299 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 179:
#line 1303 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 180:
#line 1304 "Gmsh.y"
{ yyval.d = yyvsp[-1].d; ;
    break;}
case 181:
#line 1305 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d; ;
    break;}
case 182:
#line 1306 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d; ;
    break;}
case 183:
#line 1307 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d; ;
    break;}
case 184:
#line 1308 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d; ;
    break;}
case 185:
#line 1309 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d); ;
    break;}
case 186:
#line 1310 "Gmsh.y"
{ yyval.d = - yyvsp[0].d; ;
    break;}
case 187:
#line 1311 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 188:
#line 1312 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 189:
#line 1313 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 190:
#line 1314 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 191:
#line 1315 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 192:
#line 1316 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 193:
#line 1317 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 194:
#line 1318 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 195:
#line 1319 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 196:
#line 1320 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 197:
#line 1321 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 198:
#line 1322 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 199:
#line 1323 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 200:
#line 1324 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 201:
#line 1325 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 202:
#line 1326 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 203:
#line 1327 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 204:
#line 1328 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 205:
#line 1329 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 206:
#line 1330 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 207:
#line 1331 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 208:
#line 1335 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 209:
#line 1336 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 210:
#line 1338 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable: %s", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 211:
#line 1350 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 212:
#line 1356 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 213:
#line 1370 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-9].d;
      yyval.v[1]=yyvsp[-7].d;
      yyval.v[2]=yyvsp[-5].d;
      yyval.v[3]=yyvsp[-3].d;
      yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 214:
#line 1378 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
      yyval.v[4]=1.0;
    ;
    break;}
case 215:
#line 1386 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 216:
#line 1394 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 217:
#line 1405 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 1408 "Gmsh.y"
{
    ;
    break;}
case 219:
#line 1414 "Gmsh.y"
{
    ;
    break;}
case 220:
#line 1417 "Gmsh.y"
{
    ;
    break;}
case 221:
#line 1423 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 1426 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 223:
#line 1430 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 224:
#line 1437 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 225:
#line 1442 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 226:
#line 1449 "Gmsh.y"
{
    ;
    break;}
case 227:
#line 1452 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 228:
#line 1458 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 229:
#line 1472 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 230:
#line 1477 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 231:
#line 1486 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 232:
#line 1490 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1500 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void  vyyerror (char *fmt, ...){
  va_list args;
  char    tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

int Get_ColorForString(StringX4Int SX4I[], int alpha, 
		       char * string, int * FlagError) {
  int  i = 0 ;
  while ((SX4I[i].string != NULL) && (strcmp(SX4I[i].string, string)))  i++ ;
  *FlagError = (SX4I[i].string == NULL)? 1 : 0 ;
  if(alpha > 0)
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,alpha) ;
  else
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,SX4I[i].int4) ;
}

void Get_ColorPointerForString(StringXPointer SXP[], char * string,
			  int * FlagError, unsigned int **Pointer) {
  int  i = 0 ;
  while ((SXP[i].string != NULL) && (strcmp(SXP[i].string, string)))  i++ ;
  *FlagError = (SXP[i].string == NULL)? 1 : 0 ;
  *Pointer = (unsigned int *)SXP[i].Pointer ;
}

