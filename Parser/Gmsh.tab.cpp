
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tPoint	293
#define	tCircle	294
#define	tEllipse	295
#define	tLine	296
#define	tSurface	297
#define	tSpline	298
#define	tVolume	299
#define	tCharacteristic	300
#define	tLength	301
#define	tParametric	302
#define	tElliptic	303
#define	tPlane	304
#define	tRuled	305
#define	tTriangulation	306
#define	tTransfinite	307
#define	tComplex	308
#define	tPhysical	309
#define	tUsing	310
#define	tBump	311
#define	tProgression	312
#define	tPlugin	313
#define	tRotate	314
#define	tTranslate	315
#define	tSymmetry	316
#define	tDilate	317
#define	tExtrude	318
#define	tDuplicata	319
#define	tLoop	320
#define	tRecombine	321
#define	tDelete	322
#define	tCoherence	323
#define	tIntersect	324
#define	tAttractor	325
#define	tLayers	326
#define	tScalarPoint	327
#define	tVectorPoint	328
#define	tTensorPoint	329
#define	tScalarLine	330
#define	tVectorLine	331
#define	tTensorLine	332
#define	tScalarTriangle	333
#define	tVectorTriangle	334
#define	tTensorTriangle	335
#define	tScalarQuadrangle	336
#define	tVectorQuadrangle	337
#define	tTensorQuadrangle	338
#define	tScalarTetrahedron	339
#define	tVectorTetrahedron	340
#define	tTensorTetrahedron	341
#define	tScalarHexahedron	342
#define	tVectorHexahedron	343
#define	tTensorHexahedron	344
#define	tScalarPrism	345
#define	tVectorPrism	346
#define	tTensorPrism	347
#define	tScalarPyramid	348
#define	tVectorPyramid	349
#define	tTensorPyramid	350
#define	tText2D	351
#define	tText3D	352
#define	tInterpolationMatrix	353
#define	tCombine	354
#define	tBSpline	355
#define	tBezier	356
#define	tNurbs	357
#define	tOrder	358
#define	tWith	359
#define	tBounds	360
#define	tKnots	361
#define	tColor	362
#define	tColorTable	363
#define	tFor	364
#define	tIn	365
#define	tEndFor	366
#define	tIf	367
#define	tEndIf	368
#define	tExit	369
#define	tReturn	370
#define	tCall	371
#define	tFunction	372
#define	tTrimmed	373
#define	tShow	374
#define	tHide	375
#define	tB_SPLINE_SURFACE_WITH_KNOTS	376
#define	tB_SPLINE_CURVE_WITH_KNOTS	377
#define	tCARTESIAN_POINT	378
#define	tTRUE	379
#define	tFALSE	380
#define	tUNSPECIFIED	381
#define	tU	382
#define	tV	383
#define	tEDGE_CURVE	384
#define	tVERTEX_POINT	385
#define	tORIENTED_EDGE	386
#define	tPLANE	387
#define	tFACE_OUTER_BOUND	388
#define	tEDGE_LOOP	389
#define	tADVANCED_FACE	390
#define	tVECTOR	391
#define	tDIRECTION	392
#define	tAXIS2_PLACEMENT_3D	393
#define	tISO	394
#define	tENDISO	395
#define	tENDSEC	396
#define	tDATA	397
#define	tHEADER	398
#define	tFILE_DESCRIPTION	399
#define	tFILE_SCHEMA	400
#define	tFILE_NAME	401
#define	tMANIFOLD_SOLID_BREP	402
#define	tCLOSED_SHELL	403
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	404
#define	tFACE_BOUND	405
#define	tCYLINDRICAL_SURFACE	406
#define	tCONICAL_SURFACE	407
#define	tCIRCLE	408
#define	tTRIMMED_CURVE	409
#define	tGEOMETRIC_SET	410
#define	tCOMPOSITE_CURVE_SEGMENT	411
#define	tCONTINUOUS	412
#define	tCOMPOSITE_CURVE	413
#define	tTOROIDAL_SURFACE	414
#define	tPRODUCT_DEFINITION	415
#define	tPRODUCT_DEFINITION_SHAPE	416
#define	tSHAPE_DEFINITION_REPRESENTATION	417
#define	tELLIPSE	418
#define	tSolid	419
#define	tEndSolid	420
#define	tVertex	421
#define	tFacet	422
#define	tNormal	423
#define	tOuter	424
#define	tLoopSTL	425
#define	tEndLoop	426
#define	tEndFacet	427
#define	tAFFECTPLUS	428
#define	tAFFECTMINUS	429
#define	tAFFECTTIMES	430
#define	tAFFECTDIVIDE	431
#define	tOR	432
#define	tAND	433
#define	tEQUAL	434
#define	tNOTEQUAL	435
#define	tAPPROXEQUAL	436
#define	tLESSOREQUAL	437
#define	tGREATEROREQUAL	438
#define	tCROSSPRODUCT	439
#define	tPLUSPLUS	440
#define	tMINUSMINUS	441
#define	UNARYPREC	442

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.206 2004-11-01 14:49:00 geuzaine Exp $
//
// Copyright (C) 1997-2004 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

// FIXME: most tSTRING and tBIGSTRING are leaked: Free() them!

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;
static int ntmp;

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

#if defined(HAVE_FLTK)
void UpdateViewsInGUI();
#endif

void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);

#line 79 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2359
#define	YYFLAG		-32768
#define	YYNTBASE	208

#define YYTRANSLATE(x) ((unsigned)(x) <= 442 ? yytranslate[x] : 344)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   194,     2,   204,     2,   192,     2,     2,   199,
   200,   190,   188,   205,   189,   203,   191,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   184,
     2,   186,   178,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   201,     2,   202,   198,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   206,     2,   207,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   179,   180,   181,   182,   183,   185,   187,   193,   195,
   196,   197
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   647,   651,   652,   666,   668,   672,   673,
   687,   689,   693,   694,   708,   710,   714,   715,   735,   737,
   741,   742,   762,   764,   768,   769,   789,   791,   795,   796,
   822,   824,   828,   829,   855,   857,   861,   862,   888,   890,
   894,   895,   927,   929,   933,   934,   966,   968,   972,   973,
  1005,  1007,  1011,  1012,  1044,  1046,  1050,  1051,  1083,  1085,
  1089,  1090,  1122,  1124,  1128,  1129,  1185,  1187,  1191,  1192,
  1248,  1250,  1254,  1255,  1311,  1313,  1317,  1318,  1362,  1364,
  1368,  1369,  1413,  1415,  1419,  1420,  1464,  1466,  1470,  1471,
  1509,  1511,  1515,  1516,  1554,  1556,  1560,  1561,  1599,  1601,
  1605,  1606,  1620,  1622,  1626,  1627,  1643,  1647,  1649,  1651,
  1653,  1655,  1657,  1659,  1661,  1666,  1674,  1684,  1691,  1695,
  1702,  1709,  1719,  1726,  1736,  1742,  1751,  1760,  1772,  1779,
  1789,  1799,  1809,  1817,  1826,  1839,  1846,  1854,  1862,  1870,
  1880,  1888,  1898,  1916,  1924,  1932,  1944,  1953,  1966,  1975,
  1984,  1993,  2006,  2021,  2036,  2059,  2080,  2089,  2098,  2107,
  2115,  2124,  2130,  2142,  2148,  2158,  2160,  2162,  2164,  2165,
  2168,  2175,  2182,  2189,  2196,  2201,  2208,  2213,  2220,  2224,
  2230,  2234,  2238,  2243,  2248,  2252,  2260,  2264,  2272,  2276,
  2279,  2282,  2298,  2301,  2308,  2317,  2326,  2337,  2339,  2342,
  2344,  2348,  2353,  2355,  2364,  2377,  2392,  2393,  2406,  2407,
  2424,  2425,  2444,  2453,  2466,  2481,  2482,  2495,  2496,  2513,
  2514,  2533,  2542,  2555,  2570,  2571,  2584,  2585,  2602,  2603,
  2622,  2624,  2627,  2637,  2645,  2648,  2655,  2665,  2675,  2684,
  2693,  2702,  2709,  2714,  2717,  2720,  2722,  2724,  2726,  2728,
  2730,  2732,  2736,  2739,  2742,  2745,  2749,  2753,  2757,  2761,
  2765,  2769,  2773,  2777,  2781,  2785,  2789,  2793,  2797,  2801,
  2807,  2812,  2817,  2822,  2827,  2832,  2837,  2842,  2847,  2852,
  2857,  2864,  2869,  2874,  2879,  2884,  2889,  2894,  2901,  2908,
  2915,  2920,  2925,  2930,  2935,  2940,  2945,  2950,  2955,  2960,
  2965,  2970,  2977,  2982,  2987,  2992,  2997,  3002,  3007,  3014,
  3021,  3028,  3033,  3035,  3037,  3039,  3041,  3043,  3048,  3053,
  3056,  3062,  3066,  3073,  3078,  3086,  3088,  3091,  3094,  3098,
  3102,  3114,  3124,  3132,  3140,  3141,  3145,  3147,  3151,  3152,
  3156,  3160,  3162,  3166,  3168,  3170,  3174,  3179,  3183,  3189,
  3194,  3196,  3198,  3200,  3204,  3209,  3216,  3224,  3226,  3228,
  3232,  3236,  3246,  3254,  3256,  3262,  3266,  3273,  3275,  3279,
  3281,  3288,  3293,  3298,  3305,  3312
};

static const short yyrhs[] = {   212,
     0,   210,     0,   217,     0,     1,     6,     0,     3,     0,
   189,     3,     0,     0,   210,   211,     0,   165,     0,   168,
   169,   209,   209,   209,   170,   171,   167,   209,   209,   209,
   167,   209,   209,   209,   167,   209,   209,   209,   172,   173,
     0,   166,     0,     0,   212,   213,     0,   214,     0,   216,
     0,   215,     0,   140,     6,     0,   141,     6,     0,   143,
     6,     0,   142,     6,     0,   144,     6,     0,   145,   199,
   333,   205,     5,   200,     6,     0,   146,   199,   333,   200,
     6,     0,   147,   199,     5,   205,     5,   205,   333,   205,
   333,   205,     5,   205,     5,   205,     5,   200,     6,     0,
     3,     7,   124,   199,     5,   205,   331,   200,     6,     0,
     3,     7,   123,   199,     5,   205,   329,   205,   337,   205,
   328,   205,   328,   205,   328,   205,   337,   205,   337,   205,
   328,   200,     6,     0,     3,     7,   122,   199,     5,   205,
   329,   205,   329,   205,   335,   205,   328,   205,   328,   205,
   328,   205,   328,   205,   337,   205,   337,   205,   337,   205,
   337,   205,   328,   200,     6,     0,     3,     7,   130,   199,
     5,   205,     3,   205,     3,   205,     3,   205,   328,   200,
     6,     0,     3,     7,   134,   199,     5,   205,     3,   205,
   328,   200,     6,     0,     3,     7,   151,   199,     5,   205,
     3,   205,   328,   200,     6,     0,     3,     7,   132,   199,
     5,   205,   190,   205,   190,   205,   329,   205,   328,   200,
     6,     0,     3,     7,   135,   199,     5,   205,   337,   200,
     6,     0,     3,     7,   136,   199,     5,   205,   337,   205,
     3,   205,   328,   200,     6,     0,     3,     7,   131,   199,
     5,   205,     3,   200,     6,     0,     3,     7,   137,   199,
     5,   205,     3,   205,   329,   200,     6,     0,     3,     7,
   139,   199,     5,   205,     3,   205,     3,   205,     3,   200,
     6,     0,     3,     7,   138,   199,     5,   205,   331,   200,
     6,     0,     3,     7,   133,   199,     5,   205,     3,   200,
     6,     0,     3,     7,    42,   199,     5,   205,     3,   205,
     3,   200,     6,     0,     3,     7,   149,   199,     5,   205,
   337,   200,     6,     0,     3,     7,   150,   199,     5,   205,
   337,   205,     3,   200,     6,     0,     3,     7,   148,   199,
     5,   205,     3,   200,     6,     0,     3,     7,   152,   199,
     5,   205,     3,   205,   329,   200,     6,     0,     3,     7,
   153,   199,     5,   205,     3,   205,   329,   205,   329,   200,
     6,     0,     3,     7,   160,   199,     5,   205,     3,   205,
   329,   205,   329,   200,     6,     0,     3,     7,   154,   199,
     5,   205,     3,   205,   329,   200,     6,     0,     3,     7,
   164,   199,     5,   205,     3,   205,   329,   205,   329,   200,
     6,     0,     3,     7,   155,   199,     5,   205,     3,   205,
   337,   205,   337,   205,   328,   205,   328,   200,     6,     0,
     3,     7,   156,   199,     5,   205,   337,   200,     6,     0,
     3,     7,   157,   199,   158,   205,   328,   205,     3,   200,
     6,     0,     3,     7,   159,   199,     5,   205,   337,   205,
   328,   200,     6,     0,     3,     7,   161,   199,     5,   205,
     5,   205,     3,   205,     3,   200,     6,     0,     3,     7,
   162,   199,     5,   205,     5,   205,     3,   200,     6,     0,
     3,     7,   163,   199,     3,   205,     3,   200,     6,     0,
     0,   217,   218,     0,   220,     0,   219,     0,   303,     0,
   304,     0,   305,     0,   308,     0,   309,     0,   310,     0,
   311,     0,   314,     0,   326,     0,   327,     0,   313,     0,
   312,     0,    33,   199,     5,   200,     6,     0,    33,   199,
     5,   205,   339,   200,     6,     0,     4,     5,   206,   221,
   207,     6,     0,     4,     5,     4,   331,   206,   221,   207,
     6,     0,     0,   221,   223,     0,   221,   226,     0,   221,
   229,     0,   221,   232,     0,   221,   235,     0,   221,   238,
     0,   221,   241,     0,   221,   244,     0,   221,   247,     0,
   221,   250,     0,   221,   253,     0,   221,   256,     0,   221,
   259,     0,   221,   262,     0,   221,   265,     0,   221,   268,
     0,   221,   271,     0,   221,   274,     0,   221,   277,     0,
   221,   280,     0,   221,   283,     0,   221,   286,     0,   221,
   289,     0,   221,   292,     0,   221,   295,     0,   221,   298,
     0,   221,   300,     0,   329,     0,   222,   205,   329,     0,
     0,    73,   199,   329,   205,   329,   205,   329,   200,   224,
   206,   222,   207,     6,     0,   329,     0,   225,   205,   329,
     0,     0,    74,   199,   329,   205,   329,   205,   329,   200,
   227,   206,   225,   207,     6,     0,   329,     0,   228,   205,
   329,     0,     0,    75,   199,   329,   205,   329,   205,   329,
   200,   230,   206,   228,   207,     6,     0,   329,     0,   231,
   205,   329,     0,     0,    76,   199,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   200,   233,   206,
   231,   207,     6,     0,   329,     0,   234,   205,   329,     0,
     0,    77,   199,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   200,   236,   206,   234,   207,     6,
     0,   329,     0,   237,   205,   329,     0,     0,    78,   199,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   200,   239,   206,   237,   207,     6,     0,   329,     0,
   240,   205,   329,     0,     0,    79,   199,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   200,   242,   206,   240,   207,     6,
     0,   329,     0,   243,   205,   329,     0,     0,    80,   199,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   200,   245,   206,
   243,   207,     6,     0,   329,     0,   246,   205,   329,     0,
     0,    81,   199,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   200,   248,   206,   246,   207,     6,     0,   329,     0,   249,
   205,   329,     0,     0,    82,   199,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   200,
   251,   206,   249,   207,     6,     0,   329,     0,   252,   205,
   329,     0,     0,    83,   199,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   200,   254,
   206,   252,   207,     6,     0,   329,     0,   255,   205,   329,
     0,     0,    84,   199,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   200,   257,   206,
   255,   207,     6,     0,   329,     0,   258,   205,   329,     0,
     0,    85,   199,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   200,   260,   206,   258,
   207,     6,     0,   329,     0,   261,   205,   329,     0,     0,
    86,   199,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   200,   263,   206,   261,   207,
     6,     0,   329,     0,   264,   205,   329,     0,     0,    87,
   199,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   200,   266,   206,   264,   207,     6,
     0,   329,     0,   267,   205,   329,     0,     0,    88,   199,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   200,   269,   206,
   267,   207,     6,     0,   329,     0,   270,   205,   329,     0,
     0,    89,   199,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   200,   272,   206,   270,   207,     6,     0,   329,     0,   273,
   205,   329,     0,     0,    90,   199,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   200,   275,   206,   273,   207,     6,     0,
   329,     0,   276,   205,   329,     0,     0,    91,   199,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   200,   278,   206,   276,   207,     6,
     0,   329,     0,   279,   205,   329,     0,     0,    92,   199,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   200,   281,   206,   279,   207,
     6,     0,   329,     0,   282,   205,   329,     0,     0,    93,
   199,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   200,   284,   206,   282,
   207,     6,     0,   329,     0,   285,   205,   329,     0,     0,
    94,   199,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   200,   287,   206,   285,   207,     6,     0,   329,     0,
   288,   205,   329,     0,     0,    95,   199,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   205,   329,   200,   290,   206,   288,
   207,     6,     0,   329,     0,   291,   205,   329,     0,     0,
    96,   199,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   205,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   200,   293,   206,   291,   207,     6,     0,   343,     0,
   294,   205,   343,     0,     0,    97,   199,   329,   205,   329,
   205,   329,   200,   296,   206,   294,   207,     6,     0,   343,
     0,   297,   205,   343,     0,     0,    98,   199,   329,   205,
   329,   205,   329,   205,   329,   200,   299,   206,   297,   207,
     6,     0,    99,   335,     6,     0,     7,     0,   174,     0,
   175,     0,   176,     0,   177,     0,   195,     0,   196,     0,
     4,   301,   329,     6,     0,     4,   201,   329,   202,   301,
   329,     6,     0,     4,   201,   206,   339,   207,   202,   301,
   337,     6,     0,     4,   201,   202,     7,   337,     6,     0,
     4,   302,     6,     0,     4,   201,   329,   202,   302,     6,
     0,     4,   203,     4,     7,   343,     6,     0,     4,   201,
   329,   202,   203,     4,     7,   343,     6,     0,     4,   203,
     4,   301,   329,     6,     0,     4,   201,   329,   202,   203,
     4,   301,   329,     6,     0,     4,   203,     4,   302,     6,
     0,     4,   201,   329,   202,   203,     4,   302,     6,     0,
     4,   203,   108,   203,     4,     7,   340,     6,     0,     4,
   201,   329,   202,   203,   108,   203,     4,     7,   340,     6,
     0,     4,   203,   109,     7,   341,     6,     0,     4,   201,
   329,   202,   203,   109,     7,   341,     6,     0,    59,   199,
     4,   200,   203,     4,     7,   329,     6,     0,    59,   199,
     4,   200,   203,     4,     7,   343,     6,     0,    39,   199,
   329,   200,     7,   331,     6,     0,    55,    39,   199,   329,
   200,     7,   337,     6,     0,    71,    39,   337,     7,   206,
   329,   205,   329,   205,   329,   207,     6,     0,    46,    47,
   337,     7,   329,     6,     0,    42,   199,   329,   200,     7,
   337,     6,     0,    44,   199,   329,   200,     7,   337,     6,
     0,    40,   199,   329,   200,     7,   337,     6,     0,    40,
   199,   329,   200,     7,   337,    50,   331,     6,     0,    41,
   199,   329,   200,     7,   337,     6,     0,    41,   199,   329,
   200,     7,   337,    50,   331,     6,     0,    48,   199,   329,
   200,     7,   206,   329,   205,   329,   205,     5,   205,     5,
   205,     5,   207,     6,     0,   101,   199,   329,   200,     7,
   337,     6,     0,   102,   199,   329,   200,     7,   337,     6,
     0,   103,   199,   329,   200,     7,   337,   107,   337,   104,
   329,     6,     0,    42,    66,   199,   329,   200,     7,   337,
     6,     0,    71,    42,   337,     7,   206,   329,   205,   329,
   205,   329,   207,     6,     0,    55,    42,   199,   329,   200,
     7,   337,     6,     0,    50,    43,   199,   329,   200,     7,
   337,     6,     0,    51,    43,   199,   329,   200,     7,   337,
     6,     0,   119,    43,   199,   329,   200,     7,   206,   329,
   205,   337,   207,     6,     0,    52,    43,   206,   329,   207,
     7,   199,   329,   205,   329,   200,   337,   337,     6,     0,
    52,    43,   199,   329,   200,     7,   199,   329,   205,   329,
   200,   337,   337,     6,     0,   103,    43,   105,   106,   199,
   329,   200,     7,   335,   107,   206,   337,   205,   337,   207,
   104,   206,   329,   205,   329,   207,     6,     0,   103,    43,
   199,   329,   200,     7,   335,   107,   206,   337,   205,   337,
   207,   104,   206,   329,   205,   329,   207,     6,     0,    43,
    66,   199,   329,   200,     7,   337,     6,     0,    55,    43,
   199,   329,   200,     7,   337,     6,     0,    54,    45,   199,
   329,   200,     7,   337,     6,     0,    45,   199,   329,   200,
     7,   337,     6,     0,    55,    45,   199,   329,   200,     7,
   337,     6,     0,    61,   331,   206,   306,   207,     0,    60,
   206,   331,   205,   331,   205,   329,   207,   206,   306,   207,
     0,    62,   331,   206,   306,   207,     0,    63,   206,   331,
   205,   329,   207,   206,   306,   207,     0,   308,     0,   307,
     0,   305,     0,     0,   307,   304,     0,   307,    39,   206,
   339,   207,     6,     0,   307,    42,   206,   339,   207,     6,
     0,   307,    43,   206,   339,   207,     6,     0,   307,    45,
   206,   339,   207,     6,     0,    65,   206,   307,   207,     0,
    65,     4,   201,   329,   202,     6,     0,    68,   206,   307,
   207,     0,    68,     4,   201,   329,   202,     6,     0,    68,
     4,     6,     0,   108,   340,   206,   307,   207,     0,   120,
   343,     6,     0,   121,   343,     6,     0,   120,   206,   307,
   207,     0,   121,   206,   307,   207,     0,     4,   343,     6,
     0,     4,     4,   201,   329,   202,   343,     6,     0,     4,
   329,     6,     0,    59,   199,     4,   200,   203,     4,     6,
     0,   100,     4,     6,     0,   115,     6,     0,    37,     6,
     0,    37,   206,   329,   205,   329,   205,   329,   205,   329,
   205,   329,   205,   329,   207,     6,     0,    38,     6,     0,
   110,   199,   329,     8,   329,   200,     0,   110,   199,   329,
     8,   329,     8,   329,   200,     0,   110,     4,   111,   206,
   329,     8,   329,   207,     0,   110,     4,   111,   206,   329,
     8,   329,     8,   329,   207,     0,   112,     0,   118,     4,
     0,   116,     0,   117,     4,     6,     0,   113,   199,   329,
   200,     0,   114,     0,    64,    39,   206,   329,   205,   331,
   207,     6,     0,    64,    39,   206,   329,   205,   331,   205,
   331,   205,   329,   207,     6,     0,    64,    39,   206,   329,
   205,   331,   205,   331,   205,   331,   205,   329,   207,     6,
     0,     0,    64,    39,   206,   329,   205,   331,   207,   315,
   206,   324,   207,     6,     0,     0,    64,    39,   206,   329,
   205,   331,   205,   331,   205,   329,   207,   316,   206,   324,
   207,     6,     0,     0,    64,    39,   206,   329,   205,   331,
   205,   331,   205,   331,   205,   329,   207,   317,   206,   324,
   207,     6,     0,    64,    42,   206,   329,   205,   331,   207,
     6,     0,    64,    42,   206,   329,   205,   331,   205,   331,
   205,   329,   207,     6,     0,    64,    42,   206,   329,   205,
   331,   205,   331,   205,   331,   205,   329,   207,     6,     0,
     0,    64,    42,   206,   329,   205,   331,   207,   318,   206,
   324,   207,     6,     0,     0,    64,    42,   206,   329,   205,
   331,   205,   331,   205,   329,   207,   319,   206,   324,   207,
     6,     0,     0,    64,    42,   206,   329,   205,   331,   205,
   331,   205,   331,   205,   329,   207,   320,   206,   324,   207,
     6,     0,    64,    43,   206,   329,   205,   331,   207,     6,
     0,    64,    43,   206,   329,   205,   331,   205,   331,   205,
   329,   207,     6,     0,    64,    43,   206,   329,   205,   331,
   205,   331,   205,   331,   205,   329,   207,     6,     0,     0,
    64,    43,   206,   329,   205,   331,   207,   321,   206,   324,
   207,     6,     0,     0,    64,    43,   206,   329,   205,   331,
   205,   331,   205,   329,   207,   322,   206,   324,   207,     6,
     0,     0,    64,    43,   206,   329,   205,   331,   205,   331,
   205,   331,   205,   329,   207,   323,   206,   324,   207,     6,
     0,   325,     0,   324,   325,     0,    72,   206,   337,   205,
   337,   205,   337,   207,     6,     0,    72,   206,   337,   205,
   337,   207,     6,     0,    67,     6,     0,    53,    42,   337,
     7,   329,     6,     0,    53,    42,   337,     7,   329,    56,
    58,   329,     6,     0,    53,    42,   337,     7,   329,    56,
    57,   329,     6,     0,    53,    43,   206,   329,   207,     7,
   337,     6,     0,    49,    43,   206,   329,   207,     7,   337,
     6,     0,    53,    45,   206,   329,   207,     7,   337,     6,
     0,    67,    43,   337,     7,   329,     6,     0,    67,    43,
   337,     6,     0,    69,     6,     0,    70,     6,     0,   125,
     0,   126,     0,   127,     0,   128,     0,   129,     0,   330,
     0,   199,   329,   200,     0,   189,   329,     0,   188,   329,
     0,   194,   329,     0,   329,   189,   329,     0,   329,   188,
   329,     0,   329,   190,   329,     0,   329,   191,   329,     0,
   329,   192,   329,     0,   329,   198,   329,     0,   329,   184,
   329,     0,   329,   186,   329,     0,   329,   185,   329,     0,
   329,   187,   329,     0,   329,   181,   329,     0,   329,   182,
   329,     0,   329,   180,   329,     0,   329,   179,   329,     0,
   329,   178,   329,     8,   329,     0,    12,   199,   329,   200,
     0,    13,   199,   329,   200,     0,    14,   199,   329,   200,
     0,    15,   199,   329,   200,     0,    16,   199,   329,   200,
     0,    17,   199,   329,   200,     0,    18,   199,   329,   200,
     0,    19,   199,   329,   200,     0,    20,   199,   329,   200,
     0,    22,   199,   329,   200,     0,    23,   199,   329,   205,
   329,   200,     0,    24,   199,   329,   200,     0,    25,   199,
   329,   200,     0,    26,   199,   329,   200,     0,    27,   199,
   329,   200,     0,    28,   199,   329,   200,     0,    29,   199,
   329,   200,     0,    30,   199,   329,   205,   329,   200,     0,
    31,   199,   329,   205,   329,   200,     0,    32,   199,   329,
   205,   329,   200,     0,    21,   199,   329,   200,     0,    12,
   201,   329,   202,     0,    13,   201,   329,   202,     0,    14,
   201,   329,   202,     0,    15,   201,   329,   202,     0,    16,
   201,   329,   202,     0,    17,   201,   329,   202,     0,    18,
   201,   329,   202,     0,    19,   201,   329,   202,     0,    20,
   201,   329,   202,     0,    22,   201,   329,   202,     0,    23,
   201,   329,   205,   329,   202,     0,    24,   201,   329,   202,
     0,    25,   201,   329,   202,     0,    26,   201,   329,   202,
     0,    27,   201,   329,   202,     0,    28,   201,   329,   202,
     0,    29,   201,   329,   202,     0,    30,   201,   329,   205,
   329,   202,     0,    31,   201,   329,   205,   329,   202,     0,
    32,   201,   329,   205,   329,   202,     0,    21,   201,   329,
   202,     0,     3,     0,     9,     0,    10,     0,    11,     0,
     4,     0,     4,   201,   329,   202,     0,   204,     4,   201,
   202,     0,     4,   302,     0,     4,   201,   329,   202,   302,
     0,     4,   203,     4,     0,     4,   201,   329,   202,   203,
     4,     0,     4,   203,     4,   302,     0,     4,   201,   329,
   202,   203,     4,   302,     0,   332,     0,   189,   331,     0,
   188,   331,     0,   331,   189,   331,     0,   331,   188,   331,
     0,   206,   329,   205,   329,   205,   329,   205,   329,   205,
   329,   207,     0,   206,   329,   205,   329,   205,   329,   205,
   329,   207,     0,   206,   329,   205,   329,   205,   329,   207,
     0,   199,   329,   205,   329,   205,   329,   200,     0,     0,
   199,   334,   200,     0,     5,     0,   334,   205,     5,     0,
     0,   206,   336,   207,     0,   199,   336,   200,     0,   337,
     0,   336,   205,   337,     0,   329,     0,   338,     0,   206,
   339,   207,     0,   189,   206,   339,   207,     0,   329,     8,
   329,     0,   329,     8,   329,     8,   329,     0,    39,   206,
   329,   207,     0,   305,     0,   308,     0,   314,     0,     4,
   201,   202,     0,   189,     4,   201,   202,     0,     4,   201,
   206,   339,   207,   202,     0,   189,     4,   201,   206,   339,
   207,   202,     0,   329,     0,   338,     0,   339,   205,   329,
     0,   339,   205,   338,     0,   206,   329,   205,   329,   205,
   329,   205,   329,   207,     0,   206,   329,   205,   329,   205,
   329,   207,     0,     4,     0,     4,   203,   108,   203,     4,
     0,   206,   342,   207,     0,     4,   201,   329,   202,   203,
   109,     0,   340,     0,   342,   205,   340,     0,     5,     0,
    35,   199,   343,   205,   343,   200,     0,    36,   199,   343,
   200,     0,    34,   199,   343,   200,     0,    34,   199,   343,
   205,   339,   200,     0,    34,   199,     4,   203,     4,   200,
     0,    34,   199,     4,   201,   329,   202,   203,     4,   200,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   165,   167,   168,   169,   174,   176,   179,   181,   184,   192,
   206,   223,   225,   228,   230,   231,   234,   240,   245,   246,
   247,   250,   254,   257,   263,   268,   274,   282,   287,   291,
   297,   302,   306,   311,   315,   318,   323,   327,   331,   335,
   340,   344,   347,   351,   355,   359,   363,   367,   371,   374,
   378,   381,   385,   388,   395,   397,   400,   402,   403,   404,
   405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   417,   422,   438,   443,   449,   454,   455,   456,   457,   458,
   459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
   479,   480,   483,   486,   490,   496,   502,   505,   509,   516,
   525,   528,   532,   539,   548,   551,   555,   564,   573,   576,
   580,   589,   598,   601,   605,   614,   623,   626,   630,   643,
   652,   655,   659,   672,   681,   684,   688,   701,   710,   713,
   717,   731,   740,   743,   747,   761,   770,   773,   777,   791,
   800,   803,   807,   821,   830,   833,   837,   851,   860,   863,
   867,   881,   890,   893,   897,   921,   930,   933,   937,   961,
   970,   973,   977,  1001,  1010,  1013,  1017,  1036,  1045,  1048,
  1052,  1071,  1080,  1083,  1087,  1106,  1115,  1118,  1122,  1140,
  1149,  1152,  1156,  1174,  1183,  1186,  1190,  1208,  1217,  1223,
  1230,  1238,  1244,  1250,  1257,  1265,  1271,  1280,  1282,  1283,
  1284,  1285,  1288,  1290,  1293,  1325,  1361,  1410,  1426,  1436,
  1454,  1467,  1483,  1508,  1534,  1547,  1563,  1576,  1592,  1611,
  1633,  1642,  1656,  1676,  1692,  1711,  1730,  1748,  1766,  1784,
  1810,  1828,  1854,  1873,  1897,  1921,  1947,  1964,  1982,  2001,
  2020,  2059,  2084,  2106,  2122,  2141,  2160,  2176,  2195,  2212,
  2229,  2249,  2255,  2260,  2265,  2272,  2274,  2275,  2278,  2283,
  2287,  2303,  2319,  2335,  2355,  2369,  2379,  2389,  2399,  2408,
  2422,  2430,  2435,  2446,  2459,  2503,  2517,  2532,  2541,  2551,
  2555,  2559,  2563,  2574,  2590,  2604,  2629,  2654,  2681,  2687,
  2692,  2697,  2701,  2709,  2728,  2744,  2760,  2765,  2781,  2786,
  2802,  2807,  2825,  2848,  2871,  2894,  2899,  2922,  2927,  2950,
  2955,  2981,  3004,  3027,  3050,  3055,  3078,  3084,  3107,  3113,
  3138,  3142,  3147,  3174,  3198,  3206,  3225,  3243,  3261,  3288,
  3314,  3340,  3354,  3372,  3377,  3386,  3388,  3389,  3390,  3391,
  3394,  3396,  3397,  3398,  3399,  3400,  3401,  3402,  3403,  3410,
  3411,  3412,  3413,  3414,  3415,  3416,  3417,  3418,  3419,  3420,
  3421,  3422,  3423,  3424,  3425,  3426,  3427,  3428,  3429,  3430,
  3431,  3432,  3433,  3434,  3435,  3436,  3437,  3438,  3439,  3440,
  3441,  3443,  3444,  3445,  3446,  3447,  3448,  3449,  3450,  3451,
  3452,  3453,  3454,  3455,  3456,  3457,  3458,  3459,  3460,  3461,
  3462,  3463,  3468,  3473,  3474,  3475,  3479,  3491,  3510,  3523,
  3535,  3557,  3574,  3591,  3608,  3627,  3632,  3636,  3640,  3644,
  3650,  3655,  3659,  3663,  3669,  3673,  3678,  3682,  3687,  3691,
  3695,  3701,  3707,  3714,  3720,  3724,  3728,  3739,  3746,  3757,
  3777,  3787,  3797,  3809,  3825,  3843,  3866,  3893,  3899,  3903,
  3907,  3919,  3924,  3936,  3942,  3962,  3967,  3980,  3986,  3992,
  3997,  4005,  4019,  4023,  4042,  4058
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationMatrix",
"tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn",
"tCall","tFunction","tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter","tLoopSTL",
"tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","SignedDouble","StlFormatItems","StlFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeoFormatItems",
"GeoFormatItem","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarQuadrangleValues",
"ScalarQuadrangle","@10","VectorQuadrangleValues","VectorQuadrangle","@11","TensorQuadrangleValues",
"TensorQuadrangle","@12","ScalarTetrahedronValues","ScalarTetrahedron","@13",
"VectorTetrahedronValues","VectorTetrahedron","@14","TensorTetrahedronValues",
"TensorTetrahedron","@15","ScalarHexahedronValues","ScalarHexahedron","@16",
"VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues","TensorHexahedron",
"@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues","VectorPrism",
"@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues","ScalarPyramid",
"@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues","TensorPyramid",
"@24","Text2DValues","Text2D","@25","Text3DValues","Text3D","@26","InterpolationMatrix",
"NumericAffectation","NumericIncrement","Affectation","Shape","Transform","MultipleShape",
"ListOfShapes","Duplicata","Delete","Colorify","Visibility","Command","Loop",
"Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35","ExtrudeParameters",
"ExtrudeParameter","Transfinite","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   208,   208,   208,   208,   209,   209,   210,   210,   211,   211,
   211,   212,   212,   213,   213,   213,   214,   214,   214,   214,
   214,   215,   215,   215,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   217,   217,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   219,   219,   220,   220,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   221,   222,   222,   224,   223,   225,   225,   227,   226,
   228,   228,   230,   229,   231,   231,   233,   232,   234,   234,
   236,   235,   237,   237,   239,   238,   240,   240,   242,   241,
   243,   243,   245,   244,   246,   246,   248,   247,   249,   249,
   251,   250,   252,   252,   254,   253,   255,   255,   257,   256,
   258,   258,   260,   259,   261,   261,   263,   262,   264,   264,
   266,   265,   267,   267,   269,   268,   270,   270,   272,   271,
   273,   273,   275,   274,   276,   276,   278,   277,   279,   279,
   281,   280,   282,   282,   284,   283,   285,   285,   287,   286,
   288,   288,   290,   289,   291,   291,   293,   292,   294,   294,
   296,   295,   297,   297,   299,   298,   300,   301,   301,   301,
   301,   301,   302,   302,   303,   303,   303,   303,   303,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   303,   303,
   303,   303,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   305,   305,   305,   305,   306,   306,   306,   307,   307,
   307,   307,   307,   307,   308,   308,   309,   309,   309,   310,
   311,   311,   311,   311,   312,   312,   312,   312,   312,   312,
   312,   312,   312,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   314,   314,   314,   315,   314,   316,   314,
   317,   314,   314,   314,   314,   318,   314,   319,   314,   320,
   314,   314,   314,   314,   321,   314,   322,   314,   323,   314,
   324,   324,   325,   325,   325,   326,   326,   326,   326,   326,
   326,   326,   326,   327,   327,   328,   328,   328,   328,   328,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   329,   330,   330,   330,   330,   330,   330,   330,   330,
   330,   330,   330,   330,   330,   331,   331,   331,   331,   331,
   332,   332,   332,   332,   333,   333,   334,   334,   335,   335,
   335,   336,   336,   337,   337,   337,   337,   338,   338,   338,
   338,   338,   338,   338,   338,   338,   338,   339,   339,   339,
   339,   340,   340,   340,   340,   341,   341,   342,   342,   343,
   343,   343,   343,   343,   343,   343
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    31,     1,     3,     0,    55,     1,     3,     0,    55,
     1,     3,     0,    55,     1,     3,     0,    43,     1,     3,
     0,    43,     1,     3,     0,    43,     1,     3,     0,    37,
     1,     3,     0,    37,     1,     3,     0,    37,     1,     3,
     0,    13,     1,     3,     0,    15,     3,     1,     1,     1,
     1,     1,     1,     1,     4,     7,     9,     6,     3,     6,
     6,     9,     6,     9,     5,     8,     8,    11,     6,     9,
     9,     9,     7,     8,    12,     6,     7,     7,     7,     9,
     7,     9,    17,     7,     7,    11,     8,    12,     8,     8,
     8,    12,    14,    14,    22,    20,     8,     8,     8,     7,
     8,     5,    11,     5,     9,     1,     1,     1,     0,     2,
     6,     6,     6,     6,     4,     6,     4,     6,     3,     5,
     3,     3,     4,     4,     3,     7,     3,     7,     3,     2,
     2,    15,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     8,    12,    14,     0,    12,     0,    16,
     0,    18,     8,    12,    14,     0,    12,     0,    16,     0,
    18,     8,    12,    14,     0,    12,     0,    16,     0,    18,
     1,     2,     9,     7,     2,     6,     9,     9,     8,     8,
     8,     6,     4,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     4,     4,     2,
     5,     3,     6,     4,     7,     1,     2,     2,     3,     3,
    11,     9,     7,     7,     0,     3,     1,     3,     0,     3,
     3,     1,     3,     1,     1,     3,     4,     3,     5,     4,
     1,     1,     1,     3,     4,     6,     7,     1,     1,     3,
     3,     9,     7,     1,     5,     3,     6,     1,     3,     1,
     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   298,     0,   303,     0,   300,     0,     0,     0,     0,     0,
    56,    58,    57,    59,    60,    61,    62,    63,    64,    65,
    70,    69,    66,    67,    68,     0,     0,    17,    18,    20,
    19,    21,   435,   435,     0,   413,   417,   470,   208,   414,
   415,   416,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   209,   210,   211,   212,
     0,     0,     0,   213,   214,     0,     0,     0,     0,     0,
     0,     0,   351,     0,     0,   291,     0,   293,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   426,     0,     0,
     0,     0,     0,     0,   269,     0,     0,   269,   344,   345,
     0,     0,     0,     0,     0,     0,     0,   464,     0,     0,
     0,     0,     0,   290,     0,   299,     0,   470,   269,     0,
   269,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   420,     0,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   417,
   354,   353,   355,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   219,   287,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   285,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   417,     0,     0,     0,   451,   452,   453,   444,     0,   445,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   428,   427,     0,     0,
     0,     0,   269,   269,     0,     0,     0,     0,     0,     0,
     0,   279,     0,     0,     0,     0,   289,     0,     0,     0,
     0,     0,     0,     0,   269,     0,     0,     0,   301,     0,
     0,   281,     0,   282,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   437,     0,     0,     0,
     0,     0,   422,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   352,     0,     0,   458,   459,     0,     0,   208,
     0,     0,     0,     0,     0,   215,     0,   369,   368,   366,
   367,   362,   364,   363,   365,   357,   356,   358,   359,   360,
   361,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   417,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   430,   429,   268,
     0,   267,   266,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   275,   270,   343,     0,     0,   277,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   302,     0,   283,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   436,     0,     0,    23,
     0,   418,   424,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   439,     0,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   371,
   392,   372,   393,   373,   394,   374,   395,   375,   396,   376,
   397,   377,   398,   378,   399,   379,   400,   391,   412,   380,
   401,     0,     0,   382,   403,   383,   404,   384,   405,   385,
   406,   386,   407,   387,   408,     0,     0,     0,     0,     0,
     0,     0,     0,   473,     0,     0,   472,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
     0,   419,     0,    71,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   454,     0,     0,     0,     0,   446,
   448,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   262,   264,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   438,     0,   435,
     0,   421,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   418,   218,   460,   461,
     0,     0,     0,     0,     0,   220,   221,   223,     0,     0,
   468,     0,   229,   370,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   450,   455,     0,   447,     0,
   236,     0,     0,     0,     0,     0,     0,   336,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   276,     0,     0,     0,     0,   342,
   278,     0,     0,     0,     0,     0,   439,     0,   465,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   346,   347,
   348,   349,   350,     0,     0,     0,     0,     0,     0,     0,
    22,     0,   423,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   442,     0,   207,   381,   402,   388,   409,   389,
   410,   390,   411,     0,   475,   474,   471,     0,   208,     0,
     0,     0,     0,   216,     0,     0,     0,   466,    72,     0,
   233,   239,     0,   241,     0,     0,   237,     0,   238,   260,
     0,     0,   449,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   288,     0,
     0,     0,     0,   269,     0,   307,     0,   316,     0,   325,
     0,     0,     0,     0,     0,     0,   244,   245,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   435,   425,    74,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   441,     0,   440,     0,     0,
     0,     0,   226,     0,     0,   227,     0,   469,     0,     0,
     0,   247,   257,   456,     0,     0,   340,   250,   251,     0,
     0,     0,     0,   339,   341,   259,   234,   249,   258,   261,
     0,     0,     0,   434,     0,   433,     0,     0,   304,     0,
     0,   313,     0,     0,   322,     0,   271,   272,   273,   274,
     0,     0,   439,     0,     0,     0,   463,     0,   296,   295,
     0,     0,     0,     0,     0,    25,     0,    34,     0,    38,
     0,    32,     0,     0,    37,     0,    42,    40,     0,     0,
     0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
    54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   443,
     0,   217,   222,   224,     0,   230,     0,     0,   240,   242,
   457,     0,     0,     0,   338,   337,   231,   232,   269,     0,
   265,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   476,     0,   467,     0,     0,     0,
     0,     0,     0,   432,     0,     0,     0,     0,     0,     0,
     0,     0,   331,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   462,   297,     0,     0,    39,     0,
     0,     0,     0,    29,     0,    35,     0,    41,    30,    43,
     0,    46,     0,    50,    51,     0,     0,    53,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   228,     0,     0,     0,
     0,   263,     0,     0,   309,     0,   335,     0,     0,   332,
   318,     0,     0,   327,     0,     0,     0,     0,     0,     0,
   246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   105,   109,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
     0,     0,     0,     0,     0,   431,   305,     0,     0,     0,
   308,   314,     0,     0,   317,   323,     0,     0,   326,   235,
   248,     0,     0,   252,     0,     0,     0,     0,     0,    33,
    36,    44,     0,    45,    52,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     0,   320,     0,   329,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,     0,
     0,   254,   253,     0,   306,     0,     0,     0,   315,     0,
     0,   324,     0,     0,     0,     0,     0,     0,    28,    31,
     0,     0,     0,   103,     0,   107,     0,   111,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   199,     0,   292,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   310,     0,     0,   334,   319,     0,   328,     0,     0,     0,
     0,     0,     0,    48,    24,   104,   106,   108,   110,   112,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   200,   202,     0,   203,   243,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   117,   121,   125,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   312,
   333,   321,   330,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
   206,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   256,    10,
     0,     0,     0,   115,     0,   119,     0,   123,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   255,     0,    26,   116,   118,   120,   122,
   124,   126,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   129,   133,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   127,
     0,   131,     0,   135,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   128,   130,   132,   134,   136,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,   145,   149,   153,   157,   161,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   139,     0,   143,     0,   147,     0,   151,     0,   155,
     0,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,   142,   144,   146,   148,   150,   152,   154,
   156,   158,   160,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   189,
   193,   197,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   187,     0,   191,
     0,   195,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   188,   190,   192,   194,   196,   198,     0,     0,     0,   177,
   181,   185,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
   179,     0,   183,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   176,   178,   180,   182,   184,
   186,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
   169,   173,     0,     0,     0,     0,     0,     0,     0,   163,
     0,   167,     0,   171,     0,     0,     0,     0,     0,     0,
   164,   166,   168,   170,   172,   174,     0,     0,     0
};

static const short yydefgoto[] = {  2357,
   215,     2,     9,     3,    19,    20,    21,    22,     4,    71,
    72,    73,   445,  1673,   663,  1578,  1675,   664,  1579,  1677,
   665,  1580,  1893,   666,  1839,  1895,   667,  1840,  1897,   668,
  1841,  2029,   669,  1991,  2031,   670,  1992,  2033,   671,  1993,
  2141,   672,  2111,  2143,   673,  2112,  2145,   674,  2113,  2147,
   675,  2114,  2149,   676,  2115,  2151,   677,  2116,  2339,   678,
  2333,  2341,   679,  2334,  2343,   680,  2335,  2288,   681,  2276,
  2290,   682,  2277,  2292,   683,  2278,  2237,   684,  2219,  2239,
   685,  2220,  2241,   686,  2221,  1700,   687,  1602,  1795,   688,
  1702,   689,   140,   252,    74,   575,   345,   561,   562,   346,
    78,    79,    80,    81,    82,   347,  1230,  1548,  1656,  1233,
  1553,  1660,  1236,  1557,  1663,  1412,  1413,    84,    85,  1004,
   348,   143,   367,   178,   247,   438,   883,  1042,  1043,   350,
   498,   200,   751,   912,   144
};

static const short yypact[] = {  2757,
    34,   273,   415,  3188,-32768,-32768,-32768,  -120,-32768,    88,
   110,   128,   132,   161,   180,   149,   186,   217,-32768,-32768,
-32768,-32768,  2356,   220,    68,   183,   230,   263,   290,   -37,
   262,   300,   303,   168,   319,   336,   363,   425,   434,   428,
   500,   151,   364,   360,  -101,  -101,   393,   283,     8,   541,
    10,   543,   609,   115,   639,   445,   467,   -15,    15,    77,
-32768,   485,-32768,   682,-32768,   706,   714,   671,    17,    20,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    23,  2949,-32768,-32768,-32768,
-32768,-32768,   527,   527,   727,-32768,   279,    16,-32768,-32768,
-32768,-32768,  -165,   -57,   162,   190,   214,   282,   304,   318,
   330,   351,   375,   378,   381,   382,   390,   391,   395,   396,
   399,   417,   460,   537,   542,   548,-32768,-32768,-32768,-32768,
  2492,  2492,  2492,-32768,-32768,  2492,   993,    28,   749,  2492,
   758,   680,-32768,   767,   774,-32768,  2492,-32768,  2492,  2492,
  2492,   581,  2492,   608,  2492,  2492,   610,  2492,   588,   627,
   629,  -124,   610,   623,   624,   632,   664,   674,   675,   676,
   811,  -101,  -101,  -101,  2492,  2492,   -77,-32768,   -28,  -101,
   670,   677,   678,   679,-32768,   610,    18,-32768,-32768,-32768,
   610,   610,   875,  2492,  2492,   -74,  2492,   683,  2492,   697,
   793,  2492,  2492,-32768,   879,-32768,   707,-32768,-32768,   909,
-32768,   922,-32768,   926,    23,   737,   747,   751,   755,   771,
   772,   773,   775,   790,   791,   799,   800,   801,   802,   827,
   828,   829,   830,   831,   832,   834,   835,   836,   837,   839,
   840,   841,   842,   843,   844,   947,   768,   776,   787,  2492,
  1041,-32768,  -101,-32768,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,    85,    65,    65,   311,
   849,   849,   849,   753,  1047,  2390, 10648,   170,   845,  1057,
   870,   710,-32768,-32768,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,-32768,
  -139,  3652, 11348, 11371, 11394,  2492, 11417,  2492, 11440, 11463,
   329,   866,  1622,  2390,-32768,-32768,-32768,   871,  1066,-32768,
 11486,  2492,  2492,  2492,  2492,  2492,  1067,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,   881,   -82,-32768,-32768,  3674,  3696,
  -101,  -101,   365,   365,     3,  2492,  2492,  2492,  2492,  2624,
   278,-32768,  2492,  2661,  1068,  1072,-32768, 11509, 11532,   976,
  2492, 11555,   975,  3718,-32768,   878,  1827, 11578,-32768,  2492,
  2887,-32768,  2923,-32768,-32768,    23,  1080,  1081,  1082,  1083,
  1084,  1085,  1086,  1089,  1090,  1091,  1092,  1093,  1094,  1095,
  1096,  1098,  1102,  1103,  1106,  1107,  1108,  1109,  1111,   951,
  1112,  1113,  1114,  1115,  1122,  1121,-32768,    -5,  1123,  1124,
  1126, 10673,  -104,    14,  3058, 11601, 10698, 11624, 10723, 11647,
 10748, 11670, 10773, 11693, 10798, 11716, 10823, 11739, 10848, 11762,
 10873, 11785, 10898, 11808, 10923, 11831, 10948,  3740,  3762, 11854,
 10973, 11877, 10998, 11900, 11023, 11923, 11048, 11946, 11073, 11969,
 11098,  3784,  3806,  3828,  3850,  3872,  3894,   459,   119,   927,
   934,  2492,-32768,   610,  2587,   871,-32768,   458,   175,    65,
  2492,  1129,  1132,    19,   925,-32768,  1940,   466,   796,   419,
   419,   254,   254,   254,   254,   345,   345,   849,   849,   849,
   849,  1157,  2390,  2492,  1158,  1159,  1160, 11992,  1161, 12015,
  1162,  1163,  1217,  2492,   343,  2390,   462,  2492,  2492,  1164,
  1344, 12038, 12061, 12084,  2385,  2492,  3151,  3175, 12107, 12130,
 12153, 12176, 12199,   961,  -101,  2492,  2492,-32768,-32768,-32768,
   965,  3273,-32768,   966,  2492,  3916,  3938,  3960, 11123,   -84,
   -36,   -19,   -40,-32768,-32768,-32768,  2492, 11148,-32768,   968,
   969,  1170,  1171,   980, 12222,  1173,   981,  2492,  2957,  2492,
  2492,-32768, 12245,-32768,-32768,  1015,   983,   984,   985,   986,
   988,   989,   991,   995,   996,   998,   999,  1000,  1001,  1002,
  1003,  1004,  1005,  1006,  1007,  1008,  1009,  1012,  1013,  1014,
  1017,  1019,  1048,  1049,  1050,  1075,-32768,  1181,  1052,-32768,
  1076,   113,-32768,-32768,  1088,  1099,  1100,  1105,  1118,  1119,
  1125,  1127,  1128,  1131,  1133,  1134,  1135,  1136,  1138,  1139,
  1140,  1141,  1143,  1144,  1146,  1174,  1177,  1179,  1180,  1182,
   -31,  1192,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2492,  2492,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  1293,-32768,  2390,    65,-32768, 11173,  1300,  2390,
  1110,    56,  2492,  1302,  1304,   732,-32768,  1307,  1120,    15,
  1314,-32768,  2492,-32768,   159,  3982,  -101,   610,   610,  1315,
   610,  1316,   610,   610,-32768,  2390,  3209,  1247,   471,-32768,
  2246,   777,  1187,  1318,  1378,  1379,  1380,  1396,   306,  1397,
  1400,  1402,  1403,  1405,  1406,  1407,  1411,   129,  4004,  4026,
-32768,-32768,  3240,  -101,  -101,  -101,  1412,  2390,  2390,  2390,
  2390,  1104,  1414,  2492,  2492,   610,   610,  2492,  1410,   610,
  1418,  4048,-32768,  2450,   570,  1417,  1254,  1423,  2492,  2492,
  -101,  1424,  1425,  1239,  1427,  1428,   610,   610,  1429,  -101,
  1430,  1434,   610,   610,  1435,  1436,  1437,  1439,  1440,   610,
   444,   610,  1441,  1442,  1443,  1447,  1449,-32768,  1448,   527,
  1451,-32768,  1450,  3092,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
   610,   610,  1452,-32768, 12268, 11198, 12291, 11223, 12314, 11248,
 12337, 11273, 11298,  1245,   167,  1257,   325,-32768,   871,-32768,
    30,   206,  1256,  1453,  1210,-32768,-32768,-32768,    15,  2492,
-32768,   472,-32768, 13211,  1455,  2492,    21,    33,    53,   610,
  1456,   610,  1458,  1459,   475,-32768,-32768,  2390,-32768,  2492,
-32768,  2492,   610,   610,   610,  1267,  1268,-32768,   451,   610,
   610,   610,   610,   610,   610,   610,   534,  2492,  2492,  2492,
  1262,  -111,  -103,   -49,-32768,   476,   480,   486,   487,-32768,
-32768,  4070,  4092,  1464,  1465, 12360,   -31,  1366,-32768,  2492,
  2492,  2492,-32768,  1269,  1309,  1272,  4114,  4136,  -121,  1273,
  1274,  1275,  1279,  1276,  1282,  1280,  1283,   169,  1284,  1287,
  1290,  1286,  1288,  1289,  1312,  1322,  1332,  1292,-32768,-32768,
-32768,-32768,-32768,  1333,  1334,  1335,  1336,  1338,  1295,  1339,
-32768,  1340,  -104,-32768,  1478,  4158,  4180,  4202,  4224,  4246,
  4268,  4290,  4312,  4334,  4356,  4378,  4400,  4422,  4444,  4466,
  4488,  4510,  4532,  4554,  4576,  4598,  4620,  4642,  4664,  4686,
  4708,   199,-32768,   490,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1317,-32768,-32768,-32768,   610,    65,  2492,
  1515,  1558,    19,-32768,  1557, 11323,    15,-32768,-32768,  4730,
-32768,-32768,  -101,-32768,  -101,  1561,-32768,  1562,-32768,-32768,
  1362,   491, 13211,  4752,  1563,  1564,  1566,  2492,  2492,  2492,
  2492,  1567,  1568,  1569,  1570,  1571,  1572,  1573,-32768,  2458,
  3264, 12383,  2656,   365,  -101,  1575,  -101,  1576,  -101,  1579,
  1580,  1581,  1582,  1583,  2492,  2492,-32768,-32768,  1584,  1483,
   610,  2859,   269, 12406,  2492,    23,  1589,  2492,   610,  1587,
  1592,  1590,  1438,  1591,   444,  1621,  1595,  2492,  1623,  1657,
  1664,  1665,  1669,   444,  2492,  2492,  2492,   610,  1668,  1673,
   444,  2492,  1674,  1675,  1676,  2492,   527,-32768,-32768,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,-32768,   610,-32768,  1679,  1678,
  1680,  1368,-32768,  1681,  1683,-32768,  1482,-32768,  2492,    29,
    91,-32768,-32768,-32768,  1485,  2492,-32768,-32768,-32768,  4774,
  4796,  1477,  1555,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1577,  1684,  1474,-32768,  2492,-32768,  1486,   198,-32768,  1488,
   205,-32768,  1489,   207,-32768,  1490,-32768,-32768,-32768,-32768,
  4818,  4840,   -31,  1492,  1588,  2492,-32768,  2492,-32768,-32768,
  4862,    23,  1500,  4884,  1497,-32768,  1519,-32768,  1520,-32768,
  1526,-32768,  1522, 12429,-32768,  1523,-32768,-32768,  1529,  1530,
 12452,  4906, 12475,  1527,-32768,  1531,  1538,  4928,  1543,  1550,
-32768,  4950,  1546,  4972,  4994,  5016,  5038,  5060,  5082,  5104,
  5126,  5148,  5170,  5192,  5214,  5236,  5258,  5280,  5302,  5324,
  5346,  5368,  5390,  5412,  5434,  5456,  5478,  5500,  5522,-32768,
  1552,-32768,-32768,-32768,    15,-32768,  1645,  5544,-32768,-32768,
-32768,  5566,  2492,  2492,-32768,-32768,-32768,-32768,   365,  3015,
-32768,  1862,   350,  1862,   350,  1862,   350,  2492,  2492,  1663,
   610,  2492,  3288,  3312,   610,    23,  1765,   -31,   444,  1769,
  2492,  1767,   444,  1768,  1773,  1771,  1772,  1775,  2492,  1776,
   610,  1777,  1778,  2492,  1782,  1780,  2492,  1800,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,-32768,  1801,-32768,  2492,  1803, 12498,
 12521,  1599,  2492,-32768,  1862,  1862,  2492,  3336,   209,  1806,
  1603,   -34,-32768,  3360,   219,   -26,  3384,   232,   -24,  3408,
  3432,  1607,  1609,  1743,-32768,-32768,  1608,  1650,-32768,  1613,
  1614,  1615,  5588,-32768,  1624,-32768,  1625,-32768,-32768,-32768,
 12544,-32768,  1617,-32768,-32768, 12567,  1627,-32768, 12590,  1618,
 12613, 12636, 12659,  5610,  5632,  5654,  5676,  5698,  5720,  5742,
  5764,  5786,  5808,  5830,  5852,  5874,  5896,  5918,  5940,  5962,
  5984,  6006,  6028,  6050, 12682,  6072,-32768,  6094,  1626,   610,
   610,-32768,  3456,  3624,  1823,  2492,-32768,   610,  1824,-32768,
  1826,  2492,  1828,  1830,  2492,  1831,  1832,  1834,   610,   610,
-32768,  1835,    23,   444,   444,   444,   444,  1836,  1837,  1861,
   444,  1863,  1864,  1889,  1891,-32768,-32768,-32768,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,-32768,
  2492,  2492,  1893,   610,   610,-32768,-32768,  1662,  3480,  1628,
-32768,-32768,  1694,  3504,-32768,-32768,  1720,  3528,-32768,-32768,
-32768,  1731,  1730,-32768,    23,  1733,  1734,  1740,  1742,-32768,
-32768,-32768,  1738,-32768,-32768,-32768,  1739,  1741,  1744,  1745,
  6116,  6138,  6160,  6182,  6204,  6226,  6248,  6270,  6292,  6314,
  6336,  6358,  6380,  6402,  6424,  6446,  6468,  6490,  6512,  6534,
  6556,  1761, 12705,  3552,  1763,  1939,  1943,   350,  1963,   610,
   350,  1964,   350,  1965,   610,  1842,    23,   444,   444,  1966,
  1967,   444,  1969,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,    65,-32768,  1970,
  1972,-32768,-32768,   -22,-32768,  1774,   494,   -10,-32768,  1779,
    -9,-32768,  1804,  1813,  1815,  1808,  1781,  1817,-32768,-32768,
  1783,  1784,   495, 13211,   506, 13211,   514, 13211,  6578,  6600,
  6622,  6644,  6666,  6688,  6710,  6732,  6754,  6776,  6798,  6820,
  6842,  6864,  6886,  6908,  6930,  6952,  6974,  6996,  7018,   517,
-32768,  1818,-32768,  1816,  1973,   350,   610,  1975,  1976,   350,
  2020,   350,  1874,  2492,    23,   444,   610,  2021,  2023,  2492,
  2025,  2492,  2027,  2492,  2043,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,    65,  2046,    65,  2047,
-32768,     4,  1847,-32768,-32768,    74,-32768,    83,  1849,  7040,
    23,  1852,  1853,-32768,-32768, 13211,-32768, 13211,-32768, 13211,
-32768, 12728, 12751, 12774,  7062,  7084,  7106,  7128,  7150,  7172,
  7194,  7216,  7238,  7260,  7282,  7304,  7326,  7348,  7370,  7392,
  7414,  7436,-32768,-32768,   518,-32768,-32768,  2053,  2054,  2056,
  2057,  2492,  2492,    23,   444,   610,-32768,-32768,-32768,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,    65,  2058,-32768,
-32768,-32768,-32768,  7458,  3576,  1895,  1860,  1865,  1866,  1867,
  1868,  7480,  7502,  7524,  7546,  7568,  7590,  7612,  7634,  7656,
  7678,  7700,  7722,  7744,  7766,  7788,  7810,  7832,  7854,-32768,
-32768,  2492,  2063,  1898,   610,   444,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  3600,-32768,-32768,
  1870,  1876,   522, 13211,   526, 13211,   532, 13211,  7876,  7898,
  7920,  7942,  7964,  7986,  8008,  8030,  8052,  8074,  8096,  8118,
  8140,  8162,  8184,  8206,  8228,  8250,  2071,   610,  2081,  2492,
  2082,  2492,  2083,  2492,  2084,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,-32768,  1886,-32768, 13211,-32768, 13211,-32768,
 13211,-32768, 12797, 12820, 12843,  8272,  8294,  8316,  8338,  8360,
  8382,  8404,  8426,  8448,  8470,  8492,  8514,  8536,  8558,  8580,
   610,-32768,-32768,-32768,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  1887,
  1888,  1890,  1892,  8602,  8624,  8646,  8668,  8690,  8712,  8734,
  8756,  8778,  8800,  8822,  8844,  8866,  8888,  8910,   610,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  1894,   535, 13211,
   539, 13211,   564, 13211,  8932,  8954,  8976,  8998,  9020,  9042,
  9064,  9086,  9108,  9130,  9152,  9174,  9196,  9218,  9240,   444,
  2492,  2087,  2492,  2089,  2492,  2091,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  1900, 13211,-32768, 13211,-32768, 13211,-32768, 12866, 12889,
 12912, 12935, 12958, 12981,  9262,  9284,  9306,  9328,  9350,  9372,
  9394,  9416,  9438,  2095,-32768,-32768,-32768,-32768,-32768,-32768,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,-32768,
  1896,  1917,  1927,  1928,  1929,  1930,  9460,  9482,  9504,  9526,
  9548,  9570,  9592,  9614,  9636,  2492,  2492,  2492,  2492,  2492,
  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
   567, 13211,   579, 13211,   582, 13211,   583, 13211,   586, 13211,
   595, 13211,  9658,  9680,  9702,  9724,  9746,  9768,  9790,  9812,
  9834,  2492,  2131,  2492,  2134,  2492,  2136,  2492,  2138,  2492,
  2140,  2492,  2142,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
  2492,  2492, 13211,-32768, 13211,-32768, 13211,-32768, 13211,-32768,
 13211,-32768, 13211,-32768,  9856,  9878,  9900,  9922,  9944,  9966,
 13004, 13027, 13050,  2492,  2492,  2492,  2492,  2492,  2492,-32768,
-32768,-32768,  9988, 10010, 10032, 10054, 10076, 10098,  1944,  1954,
  1955,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
 10120, 10142, 10164, 10186, 10208, 10230,   598, 13211,   601, 13211,
   605, 13211,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2156,
  2492,  2157,  2492,  2158, 10252, 10274, 10296, 13073, 13096, 13119,
 13211,-32768, 13211,-32768, 13211,-32768,  2492,  2492,  2492,-32768,
-32768,-32768, 10318, 10340, 10362,  1959,  1962,  1968,  2492,  2492,
  2492,  2492,  2492,  2492, 10384, 10406, 10428,   606, 13211,   612,
 13211,   613, 13211,  2492,  2492,  2492,  2492,  2164,  2492,  2167,
  2492,  2169, 10450, 10472, 10494, 13211,-32768, 13211,-32768, 13211,
-32768,  2492,  2492,  2492, 10516, 10538, 10560,  2492,  2492,  2492,
 10582, 10604, 10626,  2492,  2492,  2492, 13142, 13165, 13188,-32768,
-32768,-32768,  1971,  1974,  1981,  2492,  2492,  2492,   616, 13211,
   617, 13211,   620, 13211,  2492,  2170,  2492,  2172,  2492,  2173,
 13211,-32768, 13211,-32768, 13211,-32768,  2188,  2189,-32768
};

static const short yypgoto[] = {-32768,
  -131,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1556,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -300,   -20,-32768,  2187,     0,  -369,  -167,     2,
-32768,-32768,-32768,-32768,-32768,  2190,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768, -1322, -1347,-32768,-32768, -1071,
   -23,-32768,   -29,-32768,   -87,-32768,  -956,  1310,  1408,  -213,
  -335,  -740,  1130,-32768,   -68
};


#define	YYLAST		13409


static const short yytable[] = {   142,
   210,   212,   141,    76,   564,    77,   248,   501,   537,   911,
  1120,   184,  1416,   187,  1419,   177,   179,   380,   198,   253,
   384,   208,   749,   382,   208,   213,  1071,   196,   152,   152,
   390,   308,  1410,   255,  1319,   256,    99,  1411,  1072,     5,
  1410,   401,  1410,   403,  1410,  1411,   154,  1411,    86,  1411,
   124,   125,   126,   124,   125,   126,  1410,  1410,  1074,   902,
   522,  1411,  1411,  1261,  1490,   523,   371,   372,  1490,   208,
  1410,  1490,  1270,   146,   355,  1411,   371,   372,  1130,  1277,
   201,   356,  1073,   406,   371,   372,   173,   174,   488,   208,
   134,   135,   497,  1105,    87,  1106,  1320,   175,   124,   125,
   126,  1107,  1075,  1108,   176,   371,   372,   301,   302,   303,
   371,   372,   304,   307,   149,    88,   312,   208,   124,   125,
   126,   798,   555,   332,   391,   333,   334,   335,   373,   337,
   497,   339,   340,    89,   351,   309,   310,    90,   371,   372,
  1410,   257,   366,   258,   368,  1411,   124,   125,   126,  1410,
   375,   369,   370,   191,  1411,  1109,   192,  1110,   156,   371,
   372,   153,   153,   903,   904,   801,    91,   881,  1065,   799,
   388,   389,  1489,   392,   882,   394,   500,   374,   397,   398,
  1493,    99,  1496,   197,  1705,    92,   800,   755,   148,   167,
   371,   372,   168,   169,   627,   170,  1709,  1711,   743,   628,
   769,   371,   372,   127,   128,   129,   130,   565,   371,   372,
  1798,   214,  1059,   185,   157,   188,   371,   372,   383,   634,
   199,   254,   209,   444,   750,   211,   442,   589,   489,   490,
   491,   446,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
   475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
   485,   486,   487,   147,   596,   202,  1248,  1431,   371,   372,
  1800,  1435,   496,   576,   577,  1654,  1340,   502,  1658,  1801,
  1661,   507,   508,   509,   510,   511,   512,   513,   514,   515,
   516,   517,   518,   519,   520,   521,  1490,   134,   135,   497,
  1490,   938,   528,  1490,   530,   851,   371,   372,   734,   302,
   496,   181,   497,   735,   182,   183,  1198,   154,   541,   542,
   543,   544,   545,   948,   547,   548,   549,   550,   551,   552,
   553,   558,   559,   127,   128,   129,   130,    93,   127,   128,
   129,   130,   566,   567,   568,   569,   371,   372,   915,   578,
   259,   939,   260,   740,   134,   135,  1056,   585,  1139,   134,
   135,   740,   560,   560,   563,   563,   593,   742,   159,   127,
   128,   129,   130,  1752,    94,   371,   372,  1756,   261,  1758,
   262,  1430,   371,   372,   371,   372,   371,   372,  1186,   895,
   134,   135,  1332,  1187,  1490,   160,   371,   372,  1490,  1334,
  1490,  1336,   263,  1486,   264,    95,  1410,    10,   145,   371,
   372,  1411,   633,  1492,    44,    45,    46,    47,   149,    49,
   925,   745,  1566,  1567,  1568,  1569,  1495,     6,     7,  1573,
     8,   324,   325,   326,   327,   328,   315,   316,   317,   318,
   319,   329,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   150,   956,   957,   958,   959,   329,   161,   738,   163,
   164,   302,   165,   134,   135,  1249,   162,   746,   744,   250,
   265,   251,   266,   315,   316,   317,   318,   319,   151,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   155,   496,
   756,   156,   267,   329,   268,   134,   135,  1090,  1091,   738,
   767,   492,   496,   251,   771,   772,   269,   158,   270,   134,
   135,   497,   779,   134,   135,   788,   900,   851,   271,   533,
   272,   251,   789,   790,   326,   327,   328,   134,   135,  1099,
  1100,   793,   329,   768,   166,   251,  1667,  1668,   189,   273,
  1671,   274,   497,   802,    11,    12,    13,    14,    15,    16,
    17,    18,   171,   853,   812,   172,   814,   815,   999,  1000,
  1001,  1002,  1003,   275,  1396,   276,   277,   972,   278,   279,
   281,   280,   282,   186,   497,   497,   497,   497,   283,   285,
   284,   286,  1082,   287,   289,   288,   290,   291,   180,   292,
  1058,  1060,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   852,    96,   341,   190,   293,   329,   294,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   193,   194,  1762,   317,   318,   319,   342,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   295,   732,
   296,   733,   740,   329,   741,   195,   740,   896,   770,    44,
    45,    46,    47,    48,    49,   740,  1067,   929,  1068,   740,
   740,  1081,  1111,   203,   740,   314,  1112,   204,   885,   886,
   740,   740,  1113,  1114,  1187,   740,  1188,  1205,  1707,  1720,
  1708,  1721,   887,   888,   889,   890,   891,   892,   893,   205,
  1722,   496,  1723,   207,   497,   506,   899,   206,  1724,   905,
  1725,  1747,  1828,  1748,  1829,   246,  1920,   917,  1921,   914,
  1922,   249,  1923,  1837,  1227,   297,  1924,   908,  1925,  2051,
   298,  2052,   496,  2053,   738,  2054,   299,   315,   316,   317,
   318,   319,   311,   320,   321,   322,   323,   324,   325,   326,
   327,   328,  1012,   313,   952,   953,   954,   329,  2055,   973,
  2056,  2162,   330,  2163,   496,   496,   496,   496,   331,   336,
   962,   963,   931,  2164,   966,  2165,  2166,  2168,  2167,  2169,
  2170,   979,  2171,   352,  1892,   977,   978,   131,   343,  2172,
   988,  2173,  2249,   133,  2250,  2251,   338,  2252,   136,  2253,
  2297,  2254,  2298,   139,   365,   344,  2299,  2301,  2300,  2302,
  2345,  2347,  2346,  2348,  2349,   353,  2350,   354,   358,   359,
   360,  1016,  1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,
  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1032,  1033,  1034,
  1035,  1036,  1037,  1038,  1039,  1040,  1041,   315,   316,   317,
   318,   319,   361,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   362,   363,   364,   376,   852,   329,   538,   379,
   387,  1061,   377,   378,   399,   393,  1066,   315,   316,   317,
   318,   319,  1070,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   395,   396,   496,   400,  1083,   329,  1084,   315,
   316,   317,   318,   319,   402,   320,   321,   322,   323,   324,
   325,   326,   327,   328,  1101,  1102,  1103,   404,   405,   329,
   315,   316,   317,   318,   319,   407,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   408,  1122,  1123,  1124,   409,
   329,   437,   493,   410,   315,   316,   317,   318,   319,  1402,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   411,
   412,   413,   439,   414,   329,   440,   318,   319,  2072,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   415,   416,
  1191,   441,  1158,   329,  1252,    96,   300,   417,   418,   419,
   420,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   421,   422,   423,   424,   425,
   426,  1222,   427,   428,   429,   430,  1192,   431,   432,   433,
   434,   435,   436,  1200,   443,  1201,   329,   503,   315,   316,
   317,   318,   319,   494,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   504,  1210,  1211,  1212,  1213,   329,  1283,
   505,   534,   539,   546,   580,  1228,  1221,  1231,   581,  1234,
   554,   584,   587,   590,   597,   598,   599,   600,   601,   602,
   603,  1241,  1242,   604,   605,   606,   607,   608,   609,   610,
   611,  1251,   612,   560,  1254,   563,   613,   614,   620,   960,
   615,   616,   617,   618,  1264,   619,   621,   622,   623,   624,
  1346,  1271,  1272,  1273,   625,   626,   752,   629,  1278,   630,
   631,   736,  1282,   737,   747,   748,  1284,  1285,  1286,  1287,
  1288,  1289,  1290,  1291,  1292,  1293,  1294,  1295,  1296,  1297,
  1298,  1299,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,
  1308,  1309,   754,   787,   757,   758,   759,   761,   763,   764,
   773,   791,   792,   804,   805,  1318,   806,   807,   808,   810,
   131,   132,  1322,   811,   817,   848,   133,   818,   819,   820,
   821,   136,   822,   823,   305,   824,   139,   884,   306,   825,
   826,  1330,   827,   828,   829,   830,   831,   832,   833,   834,
   835,   836,   837,   838,  1428,  1064,   839,   840,   841,    96,
   300,   842,  1343,   843,  1344,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    96,
   300,   849,   844,   845,   846,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   847,
   850,   315,   316,   317,   318,   319,   855,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   894,   856,   857,  1400,
  1401,   329,  1409,   858,  1415,   898,  1418,   906,  1408,   907,
  1414,   901,  1417,   909,  1420,  1421,   859,   860,  1424,   913,
   910,   920,   922,   861,   933,   862,   863,  1433,   560,   864,
   563,   865,   866,   867,   868,  1441,   869,   870,   871,   872,
  1446,   873,   874,  1449,   875,  1451,  1452,  1453,  1454,  1455,
  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,
  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,
  1476,  1565,   876,  1314,  1478,   877,   368,   878,   879,  1483,
   880,   301,   302,  1484,   934,   935,   936,   315,   316,   317,
   318,   319,   932,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   937,   940,   131,   132,   941,   329,   942,   943,
   133,   944,   945,   946,   947,   136,   967,   955,   765,   961,
   139,   969,   766,   974,   975,   976,   980,   981,   982,   983,
   984,   987,   989,  1617,   131,   132,   990,   993,   994,   995,
   133,   996,   997,  1006,  1055,   136,  1007,  1008,   927,  1009,
   139,  1010,   928,  1011,  1013,  1014,  1057,  1045,  1062,  1063,
  1069,  1077,  1549,  1079,  1080,  1088,  1089,  1104,  1554,  1117,
  1118,  1558,  1121,  1132,  1125,  1126,  1127,  1131,  1134,  1133,
  1135,  1136,  1325,  1159,  1137,  1666,  1141,  1138,  1140,  1142,
  1143,  1149,  1144,  1145,  1155,  1581,  1582,  1583,  1584,  1585,
  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,
  1596,  1597,  1598,  1599,  1600,  1601,  1146,  1603,  1604,  1189,
  1193,   315,   316,   317,   318,   319,  1147,   320,   321,   322,
   323,   324,   325,   326,   327,   328,  1148,  1150,  1151,  1152,
  1153,   329,  1154,  1156,  1157,   315,   316,   317,   318,   319,
   774,   320,   321,   322,   323,   324,   325,   326,   327,   328,
  1326,  1194,  1196,  1204,   349,   329,  1202,  1203,  1207,  1208,
   357,  1209,  1214,  1215,  1216,  1217,  1218,  1219,  1220,  1701,
  1229,  1232,  1327,  1761,  1235,  1237,  1238,  1239,  1240,  1244,
  1243,  1253,  1256,   381,  1257,  1258,  1260,  1263,   385,   386,
  1674,  1676,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,
  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,  1695,
  1696,  1697,  1698,  1699,    96,   535,  1262,  1259,  1265,  1804,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   315,   316,   317,   318,   319,  1266,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1267,
  1268,  1269,  1836,  1275,   329,  1276,  1279,  1280,  1793,  1329,
  1796,  1281,  1311,  1312,  1317,  1313,  1321,  1315,  1316,  1328,
  1760,  1342,  1331,  1333,  1335,  1337,  1766,  1341,  1768,  1347,
  1770,  1349,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,
  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,
  1790,  1791,  1792,  1350,  1351,  1352,  1353,  1355,  1356,  1357,
  1362,  1361,   315,   316,   317,   318,   319,  1363,   320,   321,
   322,   323,   324,   325,   326,   327,   328,  1365,  1501,  1366,
  1368,  1395,   329,  1397,   315,   316,   317,   318,   319,  1860,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1422,
  1429,  1432,  1434,  1436,   329,  1437,  1438,  1439,  1834,  1835,
  1440,  1442,  1444,  1445,  1447,  1448,  1842,  1843,  1844,  1845,
  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
  1856,  1857,  1858,  1859,  1450,  1482,  1477,  1479,  1488,   131,
   132,  1487,  1499,  1500,  1502,   133,  1503,  1504,  1505,  1506,
   136,  1511,  1515,  1508,  1509,   139,  1513,   536,  1547,  1551,
  1543,  1552,  1610,  1555,   591,  1556,  1559,  1560,  1888,  1561,
  1564,  1570,  1571,  1894,  1896,  1898,  1899,  1900,  1901,  1902,
  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,
  1913,  1914,  1915,  1916,    96,   300,  1572,  1608,  1574,  1575,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,  1576,  1577,  1947,  1605,  1949,  1611,
  1951,   739,  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,
  1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,
   315,   316,   317,   318,   319,  1613,   320,   321,   322,   323,
   324,   325,   326,   327,   328,  1615,  1616,  1618,  1619,  1620,
   329,  1621,  1622,  1623,  1652,  1665,  1624,   753,  1653,  1625,
  1626,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,
  2003,  2004,  2005,  2006,  2007,  2008,  1648,  1651,  1655,  1659,
  1662,  1669,  1670,  1672,  1715,  1703,  1704,  1759,  1751,  1706,
  1754,  1755,  1718,  1719,  1710,  1716,  2030,  2032,  2034,  2035,
  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
  2046,  2047,  2048,  2049,   315,   316,   317,   318,   319,  1712,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1713,
  1714,  1717,  1750,  1749,   329,  1757,  1764,  2073,  1765,  2075,
  1767,  2077,  1769,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  1771,  1405,
  1406,  1794,  1797,  1799,  1802,   133,  1805,  1806,  1830,  1831,
  1407,  1832,  1833,  1861,  1865,   139,  1864,   176,  1889,  1866,
  1890,  1867,  1868,  1869,  1918,  1919,  1944,  2117,  2118,  2119,
  2120,  2121,  2122,  2123,  2124,  2125,  1946,  1948,  1950,  1952,
  1971,  2009,  2074,  2010,  2076,  2011,  2078,  2012,  2050,  2094,
  2110,  2126,  2142,  2144,  2146,  2148,  2150,  2152,  2153,  2154,
  2155,  2156,  2157,  2158,  2159,  2160,  2161,   315,   316,   317,
   318,   319,  2127,   320,   321,   322,   323,   324,   325,   326,
   327,   328,  2128,  2129,  2130,  2131,  2184,   329,  2183,  2186,
  2185,  2188,  2187,  2190,  2189,  2192,  2191,  2194,  2193,  2228,
  2195,  2196,  2197,  2198,  2199,  2200,  2201,  2202,  2203,  2229,
  2230,  2262,  2264,  2266,  2282,   918,   919,  2283,   921,  2307,
   923,   924,  2309,  2284,  2311,  2352,  2336,  2354,  2356,  2337,
  2213,  2214,  2215,  2216,  2217,  2218,  2338,  2358,  2359,   854,
    75,  1044,  1195,    83,     0,     0,     0,     0,  2231,  2232,
  2233,  2234,  2235,  2236,  2238,  2240,  2242,     0,     0,     0,
     0,     0,     0,   964,   965,     0,     0,   968,     0,  2255,
  2256,  2257,  2258,  2259,  2260,  2261,     0,  2263,     0,  2265,
     0,     0,     0,     0,   985,   986,     0,     0,     0,     0,
   991,   992,     0,  2273,  2274,  2275,     0,   998,     0,  1005,
     0,     0,     0,   930,     0,  2285,  2286,  2287,  2289,  2291,
  2293,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  2303,  2304,  2305,  2306,     0,  2308,     0,  2310,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  2315,  2316,
  2317,     0,     0,     0,  2321,  2322,  2323,     0,     0,     0,
  2327,  2328,  2329,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  2340,  2342,  2344,     0,     0,     0,     0,     0,
     0,  2351,     0,  2353,     0,  2355,     0,  1076,     0,  1078,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1085,  1086,  1087,     0,     0,     0,     0,  1092,  1093,  1094,
  1095,  1096,  1097,  1098,     0,     0,     0,     0,    96,    97,
    98,     0,    99,     0,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,     0,   124,
   125,   126,    96,   341,     0,     0,     0,     0,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,     0,   315,   316,   317,   318,   319,   342,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,     0,     0,    44,
    45,    46,    47,    48,    49,     0,     0,   971,     0,     0,
    96,   300,   208,     0,     0,  1190,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     0,   124,   125,   126,    96,   300,     0,     0,     0,     0,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,     0,     0,     0,     0,  1245,   127,
   128,   129,   130,     0,     0,     0,  1255,     0,     0,     0,
     0,     0,     0,   131,   132,     0,     0,     0,     0,   133,
   134,   135,     0,     0,   136,  1274,   137,     0,   138,   139,
     0,     0,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   131,   495,     0,
     0,     0,   329,   133,     0,     0,     0,     0,   136,    96,
   535,   778,     0,   139,  1310,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,     0,
     0,     0,     0,     0,     0,     0,     0,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,   131,   132,   329,     0,     0,
     0,   133,     0,     0,     0,     0,   136,     0,     0,     0,
     0,   139,   570,    28,    29,   571,   572,    32,   573,    34,
     0,    35,     0,    37,    38,    39,     0,    41,    42,   131,
   132,     0,     0,     0,     0,   133,     0,     0,     0,     0,
   136,     0,     0,     0,    54,   139,     0,     0,     0,   570,
    28,    29,   571,   572,    32,   573,    34,     0,    35,     0,
    37,    38,    39,     0,    41,    42,     0,     0,     0,     0,
     0,     0,     0,     0,    56,    57,    58,     0,     0,     0,
     0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    68,     0,     0,     0,     0,     0,  1423,     0,
     0,     0,  1427,     0,     0,     0,    -7,     1,     0,   -12,
   -55,    56,    57,    58,     0,     0,     0,     0,  1443,     0,
     0,     0,     0,     0,   131,   132,     0,     0,     0,    68,
   133,     0,     0,     0,     0,   136,     0,     0,     0,   -55,
   139,     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,     0,     0,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,     0,     0,
   574,     0,     0,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,   -55,   -55,   -55,   -55,
  1225,     0,  1226,     0,   -55,     0,   -55,   579,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1544,  1545,     0,
     0,     0,     0,     0,     0,  1550,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,   -12,     0,     0,  1562,  1563,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    -7,    -7,     0,    -7,   570,    28,    29,   571,   572,
    32,   573,    34,     0,    35,     0,    37,    38,    39,     0,
    41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1606,  1607,     0,     0,     0,     0,    54,     0,     0,
     0,   570,    28,    29,   571,   572,    32,   573,    34,     0,
    35,     0,    37,    38,    39,     0,    41,    42,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    56,    57,    58,
   216,     0,     0,    54,     0,   570,    28,    29,   571,   572,
    32,   573,    34,     0,    35,    68,    37,    38,    39,     0,
    41,    42,     0,     0,     0,     0,     0,  1657,     0,     0,
     0,     0,  1664,    56,    57,    58,     0,    54,     0,     0,
     0,     0,     0,     0,     0,     0,   315,   316,   317,   318,
   319,    68,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,    56,    57,    58,
     0,     0,     0,  1246,     0,  1247,     0,     0,     0,     0,
   217,   218,   219,     0,     0,    68,     0,     0,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,     0,     0,
     0,     0,     0,   594,     0,     0,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,     0,   240,   241,   242,
   243,   244,   245,     0,  1753,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1763,     0,     0,     0,     0,   595,
   635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
   645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
   655,   656,   657,   658,   659,   660,   661,     0,     0,     0,
     0,     0,     0,   813,   635,   636,   637,   638,   639,   640,
   641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
   651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
   661,    23,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,  1838,     0,     0,     0,     0,     0,  1403,
    24,  1404,     0,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,     0,    35,    36,    37,    38,    39,
    40,    41,    42,     0,     0,     0,    43,    44,    45,    46,
    47,    48,    49,     0,    50,    51,    52,    53,    54,     0,
     0,     0,     0,     0,   662,     0,     0,     0,     0,     0,
     0,     0,  1891,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,     0,     0,     0,     0,    59,     0,    60,  1015,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,     0,
     0,   570,    28,    29,   571,   572,    32,   573,    34,     0,
    35,     0,    37,    38,    39,  1945,    41,    42,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,    54,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,   780,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,    56,    57,    58,     0,     0,  1990,     0,
     0,   781,     0,     0,     0,     0,   315,   316,   317,   318,
   319,    68,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
     0,     0,     0,     0,     0,   926,  2028,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,     0,
     0,   315,   316,   317,   318,   319,   951,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,     0,     0,   315,   316,   317,   318,   319,
  1223,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   315,
   316,   317,   318,   319,  1425,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,     0,     0,   315,   316,   317,   318,   319,  1426,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   315,   316,   317,
   318,   319,  1485,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,     0,
     0,   315,   316,   317,   318,   319,  1491,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,     0,     0,   315,   316,   317,   318,   319,
  1494,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   315,
   316,   317,   318,   319,  1497,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,     0,     0,   315,   316,   317,   318,   319,  1498,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   315,   316,   317,
   318,   319,  1546,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,     0,
     0,   315,   316,   317,   318,   319,  1609,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,     0,     0,   315,   316,   317,   318,   319,
  1612,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   315,
   316,   317,   318,   319,  1614,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,     0,     0,   315,   316,   317,   318,   319,  1650,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   315,   316,   317,
   318,   319,  1863,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,     0,
     0,   315,   316,   317,   318,   319,  1917,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   493,     0,     0,     0,     0,   556,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,   524,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,   556,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
   557,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,   588,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,   712,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,   713,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,   726,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
   727,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,   728,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,   729,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,   730,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,   731,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
   794,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,   795,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,   796,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,   916,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,   949,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
   950,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,   970,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1115,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1116,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1128,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1129,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1160,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1161,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1162,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1163,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1164,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1165,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1166,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1167,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1168,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1169,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1170,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1171,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1172,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1173,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1174,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1175,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1176,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1177,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1178,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1179,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1180,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1181,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1182,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1183,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1184,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1185,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1199,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1206,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1323,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1324,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1338,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1339,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1345,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1348,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1359,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1364,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1367,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1369,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1370,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1371,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1372,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1373,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1374,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1375,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1376,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1377,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1378,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1379,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1380,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1381,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1382,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1383,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1384,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1385,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1386,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1387,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1388,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1389,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1390,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1391,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1392,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1393,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1394,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1398,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1399,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1507,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1519,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1520,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1521,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1522,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1523,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1524,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1525,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1526,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1527,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1528,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1529,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1530,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1531,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1532,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1533,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1534,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1535,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1536,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1537,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1538,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1539,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1541,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1542,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1627,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1628,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1629,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1630,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1631,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1632,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1633,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1634,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1635,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1636,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1637,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1638,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1639,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1640,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1641,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1642,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1643,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1644,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1645,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1646,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1647,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1726,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1727,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1728,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1729,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1730,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1731,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1732,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1733,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1734,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1735,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1736,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1737,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1738,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1739,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1740,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1741,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1742,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1743,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1744,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1745,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1746,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1803,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1810,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1811,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1812,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1813,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1814,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1815,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1816,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1817,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1818,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1819,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1820,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1821,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1822,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1823,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1824,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1825,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1826,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1827,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1862,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1870,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1871,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1872,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1873,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1874,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1875,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1876,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1877,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1878,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1879,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1880,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1881,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1882,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1883,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1884,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1885,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1886,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1887,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1926,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1927,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1928,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1929,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1930,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1931,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1932,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1933,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1934,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1935,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1936,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1937,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1938,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1939,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1940,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1941,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1942,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1943,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1975,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1976,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1977,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1978,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1979,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1980,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1981,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1982,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1983,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1984,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  1985,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  1986,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  1987,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  1988,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  1989,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2013,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2014,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2015,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2016,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2017,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2018,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2019,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2020,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2021,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2022,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2023,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2024,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2025,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2026,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2027,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2057,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2058,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2059,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2060,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2061,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2062,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2063,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2064,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2065,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2066,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2067,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2068,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2069,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2070,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2071,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2101,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2102,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2103,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2104,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2105,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2106,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2107,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2108,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2109,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2132,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2133,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2134,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2135,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2136,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2137,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2138,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2139,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2140,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2174,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2175,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2176,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2177,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2178,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2179,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2180,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2181,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2182,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2204,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2205,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2206,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2207,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2208,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2209,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2222,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2223,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2224,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2225,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2226,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2227,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2243,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2244,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2245,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2246,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2247,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2248,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2267,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2268,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2269,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2279,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2280,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2281,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2294,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2295,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2296,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2312,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2313,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2314,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2318,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   315,   316,   317,
   318,   319,  2319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   315,
   316,   317,   318,   319,  2320,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   315,   316,   317,   318,   319,  2324,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   315,   316,   317,   318,   319,  2325,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   315,   316,   317,   318,   319,
  2326,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   499,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   632,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   691,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   693,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   695,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   697,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   699,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   701,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   703,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   705,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   707,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   709,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   711,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   715,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   717,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   719,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   721,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   723,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   725,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   797,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   803,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   897,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,  1047,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,  1049,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,  1051,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,  1053,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,  1054,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,  1197,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   525,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   526,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   527,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   529,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   531,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   532,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   540,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   582,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   583,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   586,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   592,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   690,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   692,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   694,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   696,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   698,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   700,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   702,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   704,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   706,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   708,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   710,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   714,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   716,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   718,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   720,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   722,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   724,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   760,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   762,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   775,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   776,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   777,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   782,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   783,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   784,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   785,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   786,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   809,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   816,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1046,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1048,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1050,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1052,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1119,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1224,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1250,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1354,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1358,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1360,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1480,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1481,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1510,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1512,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1514,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1516,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1517,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1518,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1540,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1649,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1807,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1808,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1809,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1972,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1973,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1974,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  2095,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  2096,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  2097,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  2098,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  2099,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  2100,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  2210,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  2211,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  2212,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  2270,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  2271,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  2272,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  2330,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  2331,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  2332,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329
};

static const short yycheck[] = {    23,
    69,    70,    23,     4,   374,     4,    94,   308,   344,   750,
   967,     4,  1335,     4,  1337,    45,    46,   185,     4,     4,
   188,     5,     4,     6,     5,     3,     6,    43,    66,    66,
   105,     4,    67,   199,     6,   201,     7,    72,     6,     6,
    67,   209,    67,   211,    67,    72,    66,    72,   169,    72,
    34,    35,    36,    34,    35,    36,    67,    67,     6,     4,
   200,    72,    72,  1135,  1412,   205,   188,   189,  1416,     5,
    67,  1419,  1144,     6,   199,    72,   188,   189,   200,  1151,
     4,   206,    50,   215,   188,   189,   188,   189,     4,     5,
   195,   196,   306,   205,     7,   207,     6,   199,    34,    35,
    36,   205,    50,   207,   206,   188,   189,   131,   132,   133,
   188,   189,   136,   137,   199,     6,   140,     5,    34,    35,
    36,   206,   205,   147,   199,   149,   150,   151,   206,   153,
   344,   155,   156,     6,   158,   108,   109,     6,   188,   189,
    67,   199,   172,   201,   174,    72,    34,    35,    36,    67,
   180,   175,   176,    39,    72,   205,    42,   207,   199,   188,
   189,   199,   199,   108,   109,   206,     6,   199,   909,   206,
   194,   195,   207,   197,   206,   199,     7,   206,   202,   203,
   207,     7,   207,   199,   207,     6,   206,   523,     6,    39,
   188,   189,    42,    43,   200,    45,   207,   207,   499,   205,
   536,   188,   189,   174,   175,   176,   177,   205,   188,   189,
   207,   189,     7,   206,    47,   206,   188,   189,   201,   206,
   206,   206,   206,   253,   206,   206,   250,   395,   297,   298,
   299,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   206,   406,   199,     8,  1349,   188,   189,
   207,  1353,   306,     6,     7,  1608,  1243,   308,  1611,   207,
  1613,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,  1654,   195,   196,   523,
  1658,     6,   336,  1661,   338,   203,   188,   189,   200,   343,
   344,    39,   536,   205,    42,    43,  1067,    66,   352,   353,
   354,   355,   356,   205,   358,   359,   360,   361,   362,   363,
   364,   371,   372,   174,   175,   176,   177,   199,   174,   175,
   176,   177,   376,   377,   378,   379,   188,   189,   200,   383,
   199,    56,   201,   205,   195,   196,   200,   391,   200,   195,
   196,   205,   373,   374,   373,   374,   400,   203,    43,   174,
   175,   176,   177,  1706,   199,   188,   189,  1710,   199,  1712,
   201,  1348,   188,   189,   188,   189,   188,   189,   200,   735,
   195,   196,   205,   205,  1752,    43,   188,   189,  1756,   205,
  1758,   205,   199,   205,   201,   199,    67,     3,   199,   188,
   189,    72,   443,   205,    60,    61,    62,    63,   199,    65,
   766,   500,  1504,  1505,  1506,  1507,   205,   165,   166,  1511,
   168,   188,   189,   190,   191,   192,   178,   179,   180,   181,
   182,   198,   184,   185,   186,   187,   188,   189,   190,   191,
   192,   199,   798,   799,   800,   801,   198,    43,   492,    42,
    43,   495,    45,   195,   196,   207,    43,   501,   499,   201,
   199,   203,   201,   178,   179,   180,   181,   182,   199,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   199,   523,
   524,   199,   199,   198,   201,   195,   196,    57,    58,   533,
   534,   201,   536,   203,   538,   539,   199,   199,   201,   195,
   196,   735,   546,   195,   196,   555,   740,   203,   199,   201,
   201,   203,   556,   557,   190,   191,   192,   195,   196,     6,
     7,   565,   198,   201,    45,   203,  1618,  1619,     6,   199,
  1622,   201,   766,   577,   140,   141,   142,   143,   144,   145,
   146,   147,   199,   632,   588,   206,   590,   591,   125,   126,
   127,   128,   129,   199,  1315,   201,   199,     8,   201,   199,
   199,   201,   201,    43,   798,   799,   800,   801,   199,   199,
   201,   201,   928,   199,   199,   201,   201,   199,   206,   201,
   901,   902,   184,   185,   186,   187,   188,   189,   190,   191,
   192,   632,     3,     4,     6,   199,   198,   201,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     4,   199,  1716,   180,   181,   182,    39,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   199,   201,
   201,   203,   205,   198,   207,   199,   205,   736,   207,    60,
    61,    62,    63,    64,    65,   205,   205,   207,   207,   205,
   205,   207,   207,   199,   205,     6,   207,     6,   712,   713,
   205,   205,   207,   207,   205,   205,   207,   207,   205,   205,
   207,   207,   726,   727,   728,   729,   730,   731,   732,     4,
   205,   735,   207,    43,   928,     6,   740,     4,   205,   743,
   207,   205,   205,   207,   207,   199,   205,   757,   207,   753,
   205,     5,   207,  1805,  1104,   199,   205,     6,   207,   205,
   199,   207,   766,   205,   768,   207,   199,   178,   179,   180,
   181,   182,     4,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   850,     6,   794,   795,   796,   198,   205,   200,
   207,   205,     6,   207,   798,   799,   800,   801,     5,   199,
   804,   805,     6,   205,   808,   207,   205,   205,   207,   207,
   205,   821,   207,   206,  1866,   819,   820,   188,   189,   205,
   830,   207,   205,   194,   207,   205,   199,   207,   199,   205,
   205,   207,   207,   204,     4,   206,   205,   205,   207,   207,
   205,   205,   207,   207,   205,   199,   207,   199,   206,   206,
   199,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   873,
   874,   875,   876,   877,   878,   879,   880,   178,   179,   180,
   181,   182,   199,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   199,   199,   199,   206,   897,   198,     8,   201,
     6,   902,   206,   206,     6,   203,   910,   178,   179,   180,
   181,   182,   916,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   206,   111,   928,   199,   930,   198,   932,   178,
   179,   180,   181,   182,     6,   184,   185,   186,   187,   188,
   189,   190,   191,   192,   948,   949,   950,     6,     3,   198,
   178,   179,   180,   181,   182,   199,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   199,   970,   971,   972,   199,
   198,     5,   200,   199,   178,   179,   180,   181,   182,  1329,
   184,   185,   186,   187,   188,   189,   190,   191,   192,   199,
   199,   199,   205,   199,   198,   200,   181,   182,  2050,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   199,   199,
  1059,   205,  1013,   198,  1126,     3,     4,   199,   199,   199,
   199,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   199,   199,   199,   199,   199,
   199,  1100,   199,   199,   199,   199,  1060,   199,   199,   199,
   199,   199,   199,  1073,     4,  1075,   198,   203,   178,   179,
   180,   181,   182,     7,   184,   185,   186,   187,   188,   189,
   190,   191,   192,     7,  1088,  1089,  1090,  1091,   198,  1157,
   201,   206,     7,     7,     7,  1105,  1100,  1107,     7,  1109,
   200,   106,   108,   206,     5,     5,     5,     5,     5,     5,
     5,  1115,  1116,     5,     5,     5,     5,     5,     5,     5,
     5,  1125,     5,  1104,  1128,  1104,     5,     5,   158,     6,
     5,     5,     5,     5,  1138,     5,     5,     5,     5,     5,
  1252,  1145,  1146,  1147,     3,     5,   202,     5,  1152,     6,
     5,   205,  1156,   200,     6,     4,  1160,  1161,  1162,  1163,
  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,
  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,     6,   203,     7,     7,     7,     7,     7,     7,
     7,   207,   207,   206,   206,  1199,     7,     7,   199,     7,
   188,   189,  1206,   203,   170,     5,   194,   205,   205,   205,
   205,   199,   205,   205,   202,   205,   204,     6,   206,   205,
   205,  1225,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,  1346,     6,   205,   205,   205,     3,
     4,   205,  1246,   205,  1248,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     3,
     4,   200,   205,   205,   205,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   205,
   205,   178,   179,   180,   181,   182,   199,   184,   185,   186,
   187,   188,   189,   190,   191,   192,     4,   199,   199,  1323,
  1324,   198,  1332,   199,  1334,     6,  1336,     6,  1332,     6,
  1334,   202,  1336,     7,  1338,  1339,   199,   199,  1342,     6,
   201,     7,     7,   199,     7,   199,   199,  1351,  1329,   199,
  1329,   199,   199,   199,   199,  1359,   199,   199,   199,   199,
  1364,   199,   199,  1367,   199,  1369,  1370,  1371,  1372,  1373,
  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,  1383,
  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,
  1394,  1503,   199,     6,  1398,   199,  1406,   199,   199,  1403,
   199,  1405,  1406,  1407,     7,     7,     7,   178,   179,   180,
   181,   182,   206,   184,   185,   186,   187,   188,   189,   190,
   191,   192,     7,     7,   188,   189,     7,   198,     7,     7,
   194,     7,     7,     7,     4,   199,     7,     6,   202,     6,
   204,     4,   206,     7,   171,     3,     3,     3,   190,     3,
     3,     3,     3,  1565,   188,   189,     3,     3,     3,     3,
   194,     3,     3,     3,   200,   199,     5,     5,   202,     3,
   204,     3,   206,     6,     4,     6,   200,     6,   203,     7,
     6,     6,  1486,     6,     6,   199,   199,   206,  1492,     6,
     6,  1495,   107,   200,   206,   167,   205,   205,   200,   205,
   205,   200,     6,     6,   205,  1617,   200,   205,   205,   200,
   205,   200,   205,   205,   200,  1519,  1520,  1521,  1522,  1523,
  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
  1534,  1535,  1536,  1537,  1538,  1539,   205,  1541,  1542,   203,
     6,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   205,   205,   205,   205,
   205,   198,   205,   205,   205,   178,   179,   180,   181,   182,
   207,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     6,     4,     6,   202,   157,   198,     6,     6,     6,     6,
   163,     6,     6,     6,     6,     6,     6,     6,     6,  1648,
     6,     6,     6,  1715,     6,     6,     6,     6,     6,   107,
     7,     3,     6,   186,     3,     6,     6,     3,   191,   192,
  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,
  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,
  1644,  1645,  1646,  1647,     3,     4,     6,   190,     6,  1761,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   178,   179,   180,   181,   182,     3,
   184,   185,   186,   187,   188,   189,   190,   191,   192,     6,
     6,     3,  1804,     6,   198,     3,     3,     3,  1747,   206,
  1749,     6,     4,     6,   203,     6,   202,     7,     6,     6,
  1714,   104,   207,   206,   206,   206,  1720,   206,  1722,   200,
  1724,   205,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,  1743,
  1744,  1745,  1746,   205,   205,   200,   205,   205,   200,   200,
   200,   205,   178,   179,   180,   181,   182,   200,   184,   185,
   186,   187,   188,   189,   190,   191,   192,   205,     6,   200,
   205,   200,   198,   109,   178,   179,   180,   181,   182,  1828,
   184,   185,   186,   187,   188,   189,   190,   191,   192,   107,
     6,     3,     6,     6,   198,     3,     6,     6,  1802,  1803,
     6,     6,     6,     6,     3,     6,  1810,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,
  1824,  1825,  1826,  1827,     5,   207,     6,     5,   206,   188,
   189,     6,   206,   205,   207,   194,   167,   205,   205,   205,
   199,   205,   205,   200,   200,   204,   200,   206,     6,     6,
   205,     6,   205,     6,     8,     6,     6,     6,  1862,     6,
     6,     6,     6,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
  1884,  1885,  1886,  1887,     3,     4,     6,   206,     6,     6,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     6,     5,  1920,     5,  1922,   206,
  1924,   494,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,
  1934,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
   178,   179,   180,   181,   182,   206,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   205,   207,   205,   205,   200,
   198,   200,   205,   205,     6,   104,   206,     8,     6,   206,
   206,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,  1988,  1989,   206,   205,     6,     6,
     6,     6,     6,     5,   167,     6,     5,   104,     6,   206,
     6,     6,   200,   200,   206,   205,  2010,  2011,  2012,  2013,
  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
  2024,  2025,  2026,  2027,   178,   179,   180,   181,   182,   206,
   184,   185,   186,   187,   188,   189,   190,   191,   192,   207,
   206,   205,   207,   206,   198,     6,     6,  2051,     6,  2053,
     6,  2055,     6,  2057,  2058,  2059,  2060,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,     6,   188,
   189,     6,     6,   207,   206,   194,   205,   205,     6,     6,
   199,     6,     6,     6,   205,   204,   172,   206,     6,   205,
   173,   206,   206,   206,   205,   200,     6,  2101,  2102,  2103,
  2104,  2105,  2106,  2107,  2108,  2109,     6,     6,     6,     6,
   205,   205,     6,   206,     6,   206,     6,   206,   205,   200,
     6,   206,  2126,  2127,  2128,  2129,  2130,  2131,  2132,  2133,
  2134,  2135,  2136,  2137,  2138,  2139,  2140,   178,   179,   180,
   181,   182,   206,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   206,   206,   206,   206,     6,   198,  2162,     6,
  2164,     6,  2166,     6,  2168,     6,  2170,     6,  2172,   206,
  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,   206,
   206,     6,     6,     6,   206,   758,   759,   206,   761,     6,
   763,   764,     6,   206,     6,     6,   206,     6,     6,   206,
  2204,  2205,  2206,  2207,  2208,  2209,   206,     0,     0,   634,
     4,   882,  1063,     4,    -1,    -1,    -1,    -1,  2222,  2223,
  2224,  2225,  2226,  2227,  2228,  2229,  2230,    -1,    -1,    -1,
    -1,    -1,    -1,   806,   807,    -1,    -1,   810,    -1,  2243,
  2244,  2245,  2246,  2247,  2248,  2249,    -1,  2251,    -1,  2253,
    -1,    -1,    -1,    -1,   827,   828,    -1,    -1,    -1,    -1,
   833,   834,    -1,  2267,  2268,  2269,    -1,   840,    -1,   842,
    -1,    -1,    -1,     8,    -1,  2279,  2280,  2281,  2282,  2283,
  2284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  2294,  2295,  2296,  2297,    -1,  2299,    -1,  2301,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2312,  2313,
  2314,    -1,    -1,    -1,  2318,  2319,  2320,    -1,    -1,    -1,
  2324,  2325,  2326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  2336,  2337,  2338,    -1,    -1,    -1,    -1,    -1,
    -1,  2345,    -1,  2347,    -1,  2349,    -1,   920,    -1,   922,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   933,   934,   935,    -1,    -1,    -1,    -1,   940,   941,   942,
   943,   944,   945,   946,    -1,    -1,    -1,    -1,     3,     4,
     5,    -1,     7,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,   178,   179,   180,   181,   182,    39,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,    60,
    61,    62,    63,    64,    65,    -1,    -1,     8,    -1,    -1,
     3,     4,     5,    -1,    -1,  1058,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,    -1,  1121,   174,
   175,   176,   177,    -1,    -1,    -1,  1129,    -1,    -1,    -1,
    -1,    -1,    -1,   188,   189,    -1,    -1,    -1,    -1,   194,
   195,   196,    -1,    -1,   199,  1148,   201,    -1,   203,   204,
    -1,    -1,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,   188,   189,    -1,
    -1,    -1,   198,   194,    -1,    -1,    -1,    -1,   199,     3,
     4,   207,    -1,   204,  1187,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,   188,   189,   198,    -1,    -1,
    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
    -1,   204,    39,    40,    41,    42,    43,    44,    45,    46,
    -1,    48,    -1,    50,    51,    52,    -1,    54,    55,   188,
   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
   199,    -1,    -1,    -1,    71,   204,    -1,    -1,    -1,    39,
    40,    41,    42,    43,    44,    45,    46,    -1,    48,    -1,
    50,    51,    52,    -1,    54,    55,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   101,   102,   103,    -1,    -1,    -1,
    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,  1341,    -1,
    -1,    -1,  1345,    -1,    -1,    -1,     0,     1,    -1,     3,
     4,   101,   102,   103,    -1,    -1,    -1,    -1,  1361,    -1,
    -1,    -1,    -1,    -1,   188,   189,    -1,    -1,    -1,   119,
   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    33,
   204,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
    54,    55,    -1,    -1,    -1,    59,    60,    61,    62,    63,
    64,    65,    -1,    67,    68,    69,    70,    71,    -1,    -1,
   207,    -1,    -1,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,    -1,   100,   101,   102,   103,
   205,    -1,   207,    -1,   108,    -1,   110,   207,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1480,  1481,    -1,
    -1,    -1,    -1,    -1,    -1,  1488,   140,   141,   142,   143,
   144,   145,   146,   147,    -1,    -1,  1499,  1500,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   165,   166,    -1,   168,    39,    40,    41,    42,    43,
    44,    45,    46,    -1,    48,    -1,    50,    51,    52,    -1,
    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1544,  1545,    -1,    -1,    -1,    -1,    71,    -1,    -1,
    -1,    39,    40,    41,    42,    43,    44,    45,    46,    -1,
    48,    -1,    50,    51,    52,    -1,    54,    55,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,
    42,    -1,    -1,    71,    -1,    39,    40,    41,    42,    43,
    44,    45,    46,    -1,    48,   119,    50,    51,    52,    -1,
    54,    55,    -1,    -1,    -1,    -1,    -1,  1610,    -1,    -1,
    -1,    -1,  1615,   101,   102,   103,    -1,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   178,   179,   180,   181,
   182,   119,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,   101,   102,   103,
    -1,    -1,    -1,   205,    -1,   207,    -1,    -1,    -1,    -1,
   122,   123,   124,    -1,    -1,   119,    -1,    -1,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,    -1,  1707,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1717,    -1,    -1,    -1,    -1,   207,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,   207,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,     4,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,  1806,    -1,    -1,    -1,    -1,    -1,   205,
    33,   207,    -1,    -1,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
    53,    54,    55,    -1,    -1,    -1,    59,    60,    61,    62,
    63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1865,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,   108,    -1,   110,   207,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    39,    40,    41,    42,    43,    44,    45,    46,    -1,
    48,    -1,    50,    51,    52,  1918,    54,    55,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    71,    -1,    -1,    -1,    -1,   198,    -1,
    -1,    -1,   178,   179,   180,   181,   182,   207,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,   101,   102,   103,    -1,    -1,  1971,    -1,
    -1,   207,    -1,    -1,    -1,    -1,   178,   179,   180,   181,
   182,   119,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   207,  2009,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
    -1,   178,   179,   180,   181,   182,   207,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,    -1,    -1,   178,   179,   180,   181,   182,
   207,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   178,
   179,   180,   181,   182,   207,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,    -1,    -1,   178,   179,   180,   181,   182,   207,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,    -1,    -1,   178,   179,   180,
   181,   182,   207,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
    -1,   178,   179,   180,   181,   182,   207,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,    -1,    -1,   178,   179,   180,   181,   182,
   207,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   178,
   179,   180,   181,   182,   207,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,    -1,    -1,   178,   179,   180,   181,   182,   207,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,    -1,    -1,   178,   179,   180,
   181,   182,   207,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
    -1,   178,   179,   180,   181,   182,   207,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,    -1,    -1,   178,   179,   180,   181,   182,
   207,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   178,
   179,   180,   181,   182,   207,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,    -1,    -1,   178,   179,   180,   181,   182,   207,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,    -1,    -1,   178,   179,   180,
   181,   182,   207,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
    -1,   178,   179,   180,   181,   182,   207,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,   205,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,   179,   180,
   181,   182,   205,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   178,
   179,   180,   181,   182,   205,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   178,   179,   180,   181,   182,   205,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   178,   179,   180,   181,   182,   205,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   178,   179,   180,   181,   182,
   205,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,    -1,   202,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
   200,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,
    -1,   198,    -1,   200,   178,   179,   180,   181,   182,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,
   181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
   178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
   188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
   198,    -1,   200,   178,   179,   180,   181,   182,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,
   182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,
   179,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,
    -1,   200,   178,   179,   180,   181,   182,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,   198,    -1,   200,   178,   179,   180,   181,   182,
    -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   178,   179,
   180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 169 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 175 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 176 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 186 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 200 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 207 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 229 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 230 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 231 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 236 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 241 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 252 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 255 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 259 "Gmsh.y"
{
   ;
    break;}
case 25:
#line 265 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 271 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 278 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 284 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 288 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 292 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 299 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 303 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 308 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 312 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 316 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 320 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 324 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 328 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 332 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 336 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 342 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 345 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 348 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 352 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 356 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 360 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 364 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 372 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 383 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 386 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 389 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 405 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 406 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 410 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 411 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 412 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 413 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 414 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 419 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 72:
#line 423 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 440 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 74:
#line 444 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 75:
#line 451 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 103:
#line 485 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 104:
#line 487 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 492 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 106:
#line 497 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 107:
#line 504 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 108:
#line 506 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 511 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 110:
#line 517 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3)
	yymsg(GERROR, "Wrong number of values for vector point "
	      "(%d is not a multiple of 3)", List_Nbr(View->VP) - ntmp);
      View->NbVP++;
    ;
    break;}
case 111:
#line 527 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 112:
#line 529 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 534 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 114:
#line 540 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9)
	yymsg(GERROR, "Wrong number of values for tensor point "
	      "(%d is not a multiple of 9)", List_Nbr(View->TP) - ntmp);
      View->NbTP++;
    ;
    break;}
case 115:
#line 550 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 116:
#line 552 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 558 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 118:
#line 565 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2)
	yymsg(GERROR, "Wrong number of values for scalar line "
	      "(%d is not a multiple of 2)", List_Nbr(View->SL) - ntmp);
      View->NbSL++;
    ;
    break;}
case 119:
#line 575 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 120:
#line 577 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 583 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 122:
#line 590 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6)
	yymsg(GERROR, "Wrong number of values for vector line "
	      "(%d is not a multiple of 6)", List_Nbr(View->VL) - ntmp);
      View->NbVL++;
    ;
    break;}
case 123:
#line 600 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 124:
#line 602 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 608 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 126:
#line 615 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18)
	yymsg(GERROR, "Wrong number of values for tensor line "
	      "(%d is not a multiple of 18)", List_Nbr(View->TL) - ntmp);
      View->NbTL++;
    ;
    break;}
case 127:
#line 625 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 128:
#line 627 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 634 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 130:
#line 644 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3)
	yymsg(GERROR, "Wrong number of values for scalar triangle "
	      "(%d is not a multiple of 3)", List_Nbr(View->ST) - ntmp);
      View->NbST++;
    ;
    break;}
case 131:
#line 654 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 132:
#line 656 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 663 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 134:
#line 673 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9)
	yymsg(GERROR, "Wrong number of values for vector triangle "
	      "(%d is not a multiple of 9)", List_Nbr(View->VT) - ntmp);
      View->NbVT++;
    ;
    break;}
case 135:
#line 683 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 136:
#line 685 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 692 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 138:
#line 702 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27)
	yymsg(GERROR, "Wrong number of values for tensor triangle "
	      "(%d is not a multiple of 27)", List_Nbr(View->TT) - ntmp);
      View->NbTT++;
    ;
    break;}
case 139:
#line 712 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 140:
#line 714 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 722 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 142:
#line 732 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4)
	yymsg(GERROR, "Wrong number of values for scalar quadrangle "
	      "(%d is not a multiple of 4)", List_Nbr(View->SQ) - ntmp);
      View->NbSQ++;
    ;
    break;}
case 143:
#line 742 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 144:
#line 744 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 752 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 146:
#line 762 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12)
	yymsg(GERROR, "Wrong number of values for vector quadrangle "
	      "(%d is not a multiple of 12)", List_Nbr(View->VQ) - ntmp);
      View->NbVQ++;
    ;
    break;}
case 147:
#line 772 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 148:
#line 774 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 782 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 150:
#line 792 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36)
	yymsg(GERROR, "Wrong number of values for tensor quadrangle "
	      "(%d is not a multiple of 36)", List_Nbr(View->TQ) - ntmp);
      View->NbTQ++;
    ;
    break;}
case 151:
#line 802 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 152:
#line 804 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 812 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 154:
#line 822 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4)
	yymsg(GERROR, "Wrong number of values for scalar tetrahedron "
	      "(%d is not a multiple of 4)", List_Nbr(View->SS) - ntmp);
      View->NbSS++;
    ;
    break;}
case 155:
#line 832 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 156:
#line 834 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 842 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 158:
#line 852 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12)
	yymsg(GERROR, "Wrong number of values for vector tetrahedron "
	      "(%d is not a multiple of 12)", List_Nbr(View->VS) - ntmp);
      View->NbVS++;
    ;
    break;}
case 159:
#line 862 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 160:
#line 864 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 872 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 162:
#line 882 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36)
	yymsg(GERROR, "Wrong number of values for tensor tetrahedron "
	      "(%d is not a multiple of 36)", List_Nbr(View->TS) - ntmp);
      View->NbTS++;
    ;
    break;}
case 163:
#line 892 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 164:
#line 894 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 906 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 166:
#line 922 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8)
	yymsg(GERROR, "Wrong number of values for scalar hexahedron "
	      "(%d is not a multiple of 8)", List_Nbr(View->SH) - ntmp);
      View->NbSH++;
    ;
    break;}
case 167:
#line 932 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 168:
#line 934 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 946 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 170:
#line 962 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24)
	yymsg(GERROR, "Wrong number of values for vector hexahedron "
	      "(%d is not a multiple of 24)", List_Nbr(View->VH) - ntmp);
      View->NbVH++;
    ;
    break;}
case 171:
#line 972 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 172:
#line 974 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 986 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 174:
#line 1002 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72)
	yymsg(GERROR, "Wrong number of values for tensor hexahedron "
	      "(%d is not a multiple of 72)", List_Nbr(View->TH) - ntmp);
      View->NbTH++;
    ;
    break;}
case 175:
#line 1012 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 176:
#line 1014 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 1024 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 178:
#line 1037 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6)
	yymsg(GERROR, "Wrong number of values for scalar prism "
	      "(%d is not a multiple of 6)", List_Nbr(View->SI) - ntmp);
      View->NbSI++;
    ;
    break;}
case 179:
#line 1047 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 180:
#line 1049 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1059 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 182:
#line 1072 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18)
	yymsg(GERROR, "Wrong number of values for vector prism "
	      "(%d is not a multiple of 18)", List_Nbr(View->VI) - ntmp);
      View->NbVI++;
    ;
    break;}
case 183:
#line 1082 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 184:
#line 1084 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1094 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 186:
#line 1107 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54)
	yymsg(GERROR, "Wrong number of values for tensor prism "
	      "(%d is not a multiple of 54)", List_Nbr(View->TI) - ntmp);
      View->NbTI++;
    ;
    break;}
case 187:
#line 1117 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 188:
#line 1119 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1128 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 190:
#line 1141 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5)
	yymsg(GERROR, "Wrong number of values for scalar pyramid "
	      "(%d is not a multiple of 5)", List_Nbr(View->SY) - ntmp);
      View->NbSY++;
    ;
    break;}
case 191:
#line 1151 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 192:
#line 1153 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1162 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 194:
#line 1175 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15)
	yymsg(GERROR, "Wrong number of values for vector pyramid "
	      "(%d is not a multiple of 15)", List_Nbr(View->VY) - ntmp);
      View->NbVY++;
    ;
    break;}
case 195:
#line 1185 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 196:
#line 1187 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1196 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 198:
#line 1209 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45)
	yymsg(GERROR, "Wrong number of values for tensor pyramid "
	      "(%d is not a multiple of 45)", List_Nbr(View->TY) - ntmp);
      View->NbTY++;
    ;
    break;}
case 199:
#line 1219 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1224 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1232 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 202:
#line 1239 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 203:
#line 1246 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 204:
#line 1251 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1259 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 206:
#line 1266 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 207:
#line 1273 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View (View, yyvsp[-1].l);
    ;
    break;}
case 208:
#line 1281 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 209:
#line 1282 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 210:
#line 1283 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 211:
#line 1284 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 212:
#line 1285 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 213:
#line 1289 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1290 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 215:
#line 1298 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 216:
#line 1326 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
      }
    ;
    break;}
case 217:
#line 1362 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 218:
#line 1411 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 219:
#line 1427 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 220:
#line 1437 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
    ;
    break;}
case 221:
#line 1455 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 222:
#line 1468 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 223:
#line 1484 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 224:
#line 1509 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 225:
#line 1535 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 226:
#line 1548 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 227:
#line 1564 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 228:
#line 1577 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 229:
#line 1593 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 230:
#line 1612 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 231:
#line 1634 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 232:
#line 1643 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 233:
#line 1661 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 234:
#line 1677 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 235:
#line 1693 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 236:
#line 1712 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 237:
#line 1731 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1749 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1767 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 240:
#line 1785 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 241:
#line 1811 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1829 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1856 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1874 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1898 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1922 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1948 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1965 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 249:
#line 1983 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 2002 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 2021 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 2060 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 253:
#line 2086 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 254:
#line 2108 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 255:
#line 2125 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2144 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2161 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2177 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2196 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2213 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2230 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2251 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 263:
#line 2256 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 264:
#line 2261 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 265:
#line 2266 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 266:
#line 2273 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 267:
#line 2274 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 268:
#line 2275 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 269:
#line 2280 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 270:
#line 2284 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 271:
#line 2288 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 272:
#line 2304 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 273:
#line 2320 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 274:
#line 2336 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 275:
#line 2357 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 276:
#line 2370 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 277:
#line 2381 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 278:
#line 2390 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
#if defined(HAVE_FLTK)
	if(!CTX.batch)
	  UpdateViewsInGUI();
#endif
      }
    ;
    break;}
case 279:
#line 2400 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM);
    ;
    break;}
case 280:
#line 2410 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 281:
#line 2424 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 282:
#line 2431 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 283:
#line 2436 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 284:
#line 2447 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 285:
#line 2461 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 286:
#line 2504 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(v, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 287:
#line 2518 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 288:
#line 2533 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch(...) {
	yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 289:
#line 2542 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
    ;
    break;}
case 290:
#line 2552 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 291:
#line 2556 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 292:
#line 2560 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 293:
#line 2564 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 294:
#line 2577 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 295:
#line 2591 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 296:
#line 2605 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 297:
#line 2630 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 298:
#line 2655 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  Symbol TheSymbol;
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  Symbol *pSymbol;
	  if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	    yymsg(GERROR, "Unknown loop variable");
	  else
	    *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	      LoopControlVariablesTab[ImbricatedLoop-1][2];
	}
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
	if(ImbricatedLoop < 0){
	  yymsg(GERROR, "Problem with imbricated loops");
	  ImbricatedLoop = 0;
	}
      }
    ;
    break;}
case 299:
#line 2682 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 300:
#line 2688 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 301:
#line 2693 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 302:
#line 2698 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 303:
#line 2702 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2713 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 305:
#line 2729 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 306:
#line 2745 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 307:
#line 2761 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 308:
#line 2766 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 309:
#line 2782 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 310:
#line 2787 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 311:
#line 2803 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 312:
#line 2808 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 313:
#line 2826 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 314:
#line 2849 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2872 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 316:
#line 2895 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 317:
#line 2900 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 318:
#line 2923 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 319:
#line 2928 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 320:
#line 2951 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 321:
#line 2956 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 322:
#line 2982 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 3005 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 3028 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 325:
#line 3051 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 326:
#line 3056 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 327:
#line 3079 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 328:
#line 3085 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 329:
#line 3108 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 330:
#line 3114 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 331:
#line 3140 "Gmsh.y"
{
    ;
    break;}
case 332:
#line 3143 "Gmsh.y"
{
    ;
    break;}
case 333:
#line 3149 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 334:
#line 3175 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 335:
#line 3199 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 336:
#line 3208 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 337:
#line 3226 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 338:
#line 3244 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 339:
#line 3262 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 340:
#line 3289 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 341:
#line 3315 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 342:
#line 3341 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 343:
#line 3355 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 344:
#line 3374 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 345:
#line 3378 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 346:
#line 3387 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 347:
#line 3388 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 348:
#line 3389 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 349:
#line 3390 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 350:
#line 3391 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 351:
#line 3395 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 352:
#line 3396 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 353:
#line 3397 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 354:
#line 3398 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 355:
#line 3399 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 356:
#line 3400 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 357:
#line 3401 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 358:
#line 3402 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 359:
#line 3404 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 360:
#line 3410 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 361:
#line 3411 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 362:
#line 3412 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 363:
#line 3413 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 364:
#line 3414 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 365:
#line 3415 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 366:
#line 3416 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 367:
#line 3417 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 368:
#line 3418 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 369:
#line 3419 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 370:
#line 3420 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 371:
#line 3421 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 372:
#line 3422 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 373:
#line 3423 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 374:
#line 3424 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 375:
#line 3425 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 376:
#line 3426 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 377:
#line 3427 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 378:
#line 3428 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 379:
#line 3429 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 380:
#line 3430 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 381:
#line 3431 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 382:
#line 3432 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3433 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 384:
#line 3434 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3435 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 386:
#line 3436 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 387:
#line 3437 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 388:
#line 3438 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 389:
#line 3439 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 390:
#line 3440 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 391:
#line 3441 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 392:
#line 3443 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 393:
#line 3444 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 394:
#line 3445 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 395:
#line 3446 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3447 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 397:
#line 3448 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 398:
#line 3449 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 399:
#line 3450 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 400:
#line 3451 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 401:
#line 3452 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 402:
#line 3453 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 403:
#line 3454 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3455 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 405:
#line 3456 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3457 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 407:
#line 3458 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 408:
#line 3459 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 409:
#line 3460 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 410:
#line 3461 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 411:
#line 3462 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 412:
#line 3463 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 413:
#line 3472 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 414:
#line 3473 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 415:
#line 3474 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 416:
#line 3475 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 417:
#line 3480 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
    ;
    break;}
case 418:
#line 3492 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 419:
#line 3511 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
    ;
    break;}
case 420:
#line 3524 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
    ;
    break;}
case 421:
#line 3536 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 422:
#line 3558 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 423:
#line 3575 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 424:
#line 3592 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 425:
#line 3609 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 426:
#line 3629 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 427:
#line 3633 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 428:
#line 3637 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 429:
#line 3641 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 430:
#line 3645 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 431:
#line 3652 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 432:
#line 3656 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 433:
#line 3660 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 434:
#line 3664 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 435:
#line 3671 "Gmsh.y"
{
    ;
    break;}
case 436:
#line 3674 "Gmsh.y"
{
    ;
    break;}
case 437:
#line 3680 "Gmsh.y"
{
    ;
    break;}
case 438:
#line 3683 "Gmsh.y"
{
    ;
    break;}
case 439:
#line 3689 "Gmsh.y"
{
    ;
    break;}
case 440:
#line 3692 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 441:
#line 3696 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 442:
#line 3703 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 443:
#line 3708 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 444:
#line 3716 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 445:
#line 3721 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 446:
#line 3725 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 447:
#line 3729 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 448:
#line 3741 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 449:
#line 3747 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 450:
#line 3758 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 451:
#line 3778 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 452:
#line 3788 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 453:
#line 3798 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 454:
#line 3810 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
    ;
    break;}
case 455:
#line 3826 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
    ;
    break;}
case 456:
#line 3844 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 457:
#line 3867 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 458:
#line 3895 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 459:
#line 3900 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 460:
#line 3904 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 461:
#line 3908 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 462:
#line 3921 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 463:
#line 3925 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 464:
#line 3937 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 465:
#line 3943 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
    ;
    break;}
case 466:
#line 3964 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 467:
#line 3968 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 468:
#line 3982 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 469:
#line 3987 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 470:
#line 3994 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 471:
#line 3998 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);  
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 472:
#line 4006 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 473:
#line 4020 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 474:
#line 4024 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 475:
#line 4043 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 476:
#line 4059 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4076 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
