
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tToday	293
#define	tPoint	294
#define	tCircle	295
#define	tEllipse	296
#define	tLine	297
#define	tSurface	298
#define	tSpline	299
#define	tVolume	300
#define	tCharacteristic	301
#define	tLength	302
#define	tParametric	303
#define	tElliptic	304
#define	tPlane	305
#define	tRuled	306
#define	tTriangulation	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tDiscrete	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tIntersect	326
#define	tAttractor	327
#define	tLayers	328
#define	tAlias	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tScalarLine	333
#define	tVectorLine	334
#define	tTensorLine	335
#define	tScalarTriangle	336
#define	tVectorTriangle	337
#define	tTensorTriangle	338
#define	tScalarQuadrangle	339
#define	tVectorQuadrangle	340
#define	tTensorQuadrangle	341
#define	tScalarTetrahedron	342
#define	tVectorTetrahedron	343
#define	tTensorTetrahedron	344
#define	tScalarHexahedron	345
#define	tVectorHexahedron	346
#define	tTensorHexahedron	347
#define	tScalarPrism	348
#define	tVectorPrism	349
#define	tTensorPrism	350
#define	tScalarPyramid	351
#define	tVectorPyramid	352
#define	tTensorPyramid	353
#define	tText2D	354
#define	tText3D	355
#define	tInterpolationScheme	356
#define	tTime	357
#define	tCombine	358
#define	tBSpline	359
#define	tBezier	360
#define	tNurbs	361
#define	tOrder	362
#define	tWith	363
#define	tBounds	364
#define	tKnots	365
#define	tColor	366
#define	tColorTable	367
#define	tFor	368
#define	tIn	369
#define	tEndFor	370
#define	tIf	371
#define	tEndIf	372
#define	tExit	373
#define	tReturn	374
#define	tCall	375
#define	tFunction	376
#define	tTrimmed	377
#define	tShow	378
#define	tHide	379
#define	tGetValue	380
#define	tB_SPLINE_SURFACE_WITH_KNOTS	381
#define	tB_SPLINE_CURVE_WITH_KNOTS	382
#define	tCARTESIAN_POINT	383
#define	tTRUE	384
#define	tFALSE	385
#define	tUNSPECIFIED	386
#define	tU	387
#define	tV	388
#define	tEDGE_CURVE	389
#define	tVERTEX_POINT	390
#define	tORIENTED_EDGE	391
#define	tPLANE	392
#define	tFACE_OUTER_BOUND	393
#define	tEDGE_LOOP	394
#define	tADVANCED_FACE	395
#define	tVECTOR	396
#define	tDIRECTION	397
#define	tAXIS2_PLACEMENT_3D	398
#define	tISO	399
#define	tENDISO	400
#define	tENDSEC	401
#define	tDATA	402
#define	tHEADER	403
#define	tFILE_DESCRIPTION	404
#define	tFILE_SCHEMA	405
#define	tFILE_NAME	406
#define	tMANIFOLD_SOLID_BREP	407
#define	tCLOSED_SHELL	408
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	409
#define	tFACE_BOUND	410
#define	tCYLINDRICAL_SURFACE	411
#define	tCONICAL_SURFACE	412
#define	tCIRCLE	413
#define	tTRIMMED_CURVE	414
#define	tGEOMETRIC_SET	415
#define	tCOMPOSITE_CURVE_SEGMENT	416
#define	tCONTINUOUS	417
#define	tCOMPOSITE_CURVE	418
#define	tTOROIDAL_SURFACE	419
#define	tPRODUCT_DEFINITION	420
#define	tPRODUCT_DEFINITION_SHAPE	421
#define	tSHAPE_DEFINITION_REPRESENTATION	422
#define	tELLIPSE	423
#define	tSolid	424
#define	tEndSolid	425
#define	tVertex	426
#define	tFacet	427
#define	tNormal	428
#define	tOuter	429
#define	tLoopSTL	430
#define	tEndLoop	431
#define	tEndFacet	432
#define	tAFFECTPLUS	433
#define	tAFFECTMINUS	434
#define	tAFFECTTIMES	435
#define	tAFFECTDIVIDE	436
#define	tOR	437
#define	tAND	438
#define	tEQUAL	439
#define	tNOTEQUAL	440
#define	tAPPROXEQUAL	441
#define	tLESSOREQUAL	442
#define	tGREATEROREQUAL	443
#define	tCROSSPRODUCT	444
#define	tPLUSPLUS	445
#define	tMINUSMINUS	446
#define	UNARYPREC	447

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.227 2005-01-13 05:45:41 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 74 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2402
#define	YYFLAG		-32768
#define	YYNTBASE	213

#define YYTRANSLATE(x) ((unsigned)(x) <= 447 ? yytranslate[x] : 351)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   199,     2,   209,     2,   197,     2,     2,   204,
   205,   195,   193,   210,   194,   208,   196,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   189,
     2,   191,   183,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   206,     2,   207,   203,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   211,     2,   212,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   184,   185,   186,   187,
   188,   190,   192,   198,   200,   201,   202
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2071,
  2094,  2115,  2124,  2133,  2142,  2150,  2159,  2165,  2177,  2183,
  2193,  2195,  2197,  2199,  2200,  2203,  2210,  2217,  2224,  2231,
  2236,  2243,  2250,  2255,  2262,  2266,  2271,  2277,  2281,  2285,
  2290,  2295,  2299,  2307,  2311,  2319,  2323,  2326,  2329,  2345,
  2348,  2355,  2364,  2373,  2384,  2386,  2389,  2391,  2395,  2400,
  2402,  2411,  2424,  2439,  2440,  2453,  2454,  2471,  2472,  2491,
  2500,  2513,  2528,  2529,  2542,  2543,  2560,  2561,  2580,  2589,
  2602,  2617,  2618,  2631,  2632,  2649,  2650,  2669,  2671,  2674,
  2684,  2692,  2695,  2702,  2712,  2722,  2731,  2740,  2749,  2756,
  2761,  2764,  2767,  2769,  2771,  2773,  2775,  2777,  2779,  2783,
  2786,  2789,  2792,  2796,  2800,  2804,  2808,  2812,  2816,  2820,
  2824,  2828,  2832,  2836,  2840,  2844,  2848,  2854,  2859,  2864,
  2869,  2874,  2879,  2884,  2889,  2894,  2899,  2904,  2911,  2916,
  2921,  2926,  2931,  2936,  2941,  2948,  2955,  2962,  2967,  2972,
  2977,  2982,  2987,  2992,  2997,  3002,  3007,  3012,  3017,  3024,
  3029,  3034,  3039,  3044,  3049,  3054,  3061,  3068,  3075,  3080,
  3082,  3084,  3086,  3088,  3090,  3095,  3100,  3103,  3109,  3113,
  3120,  3125,  3133,  3140,  3142,  3145,  3148,  3152,  3156,  3168,
  3178,  3186,  3194,  3195,  3199,  3201,  3205,  3206,  3210,  3214,
  3216,  3220,  3222,  3224,  3228,  3233,  3237,  3243,  3248,  3250,
  3252,  3254,  3258,  3263,  3270,  3278,  3280,  3282,  3286,  3290,
  3300,  3308,  3310,  3316,  3320,  3327,  3329,  3333,  3335,  3337,
  3344,  3349,  3354,  3361,  3368
};

static const short yyrhs[] = {   217,
     0,   215,     0,   222,     0,     1,     6,     0,     3,     0,
   194,     3,     0,     0,   215,   216,     0,   170,     0,   173,
   174,   214,   214,   214,   175,   176,   172,   214,   214,   214,
   172,   214,   214,   214,   172,   214,   214,   214,   177,   178,
     0,   171,     0,     0,   217,   218,     0,   219,     0,   221,
     0,   220,     0,   145,     6,     0,   146,     6,     0,   148,
     6,     0,   147,     6,     0,   149,     6,     0,   150,   204,
   340,   210,     5,   205,     6,     0,   151,   204,   340,   205,
     6,     0,   152,   204,     5,   210,     5,   210,   340,   210,
   340,   210,     5,   210,     5,   210,     5,   205,     6,     0,
     3,     7,   129,   204,     5,   210,   338,   205,     6,     0,
     3,     7,   128,   204,     5,   210,   336,   210,   344,   210,
   335,   210,   335,   210,   335,   210,   344,   210,   344,   210,
   335,   205,     6,     0,     3,     7,   127,   204,     5,   210,
   336,   210,   336,   210,   342,   210,   335,   210,   335,   210,
   335,   210,   335,   210,   344,   210,   344,   210,   344,   210,
   344,   210,   335,   205,     6,     0,     3,     7,   135,   204,
     5,   210,     3,   210,     3,   210,     3,   210,   335,   205,
     6,     0,     3,     7,   139,   204,     5,   210,     3,   210,
   335,   205,     6,     0,     3,     7,   156,   204,     5,   210,
     3,   210,   335,   205,     6,     0,     3,     7,   137,   204,
     5,   210,   195,   210,   195,   210,   336,   210,   335,   205,
     6,     0,     3,     7,   140,   204,     5,   210,   344,   205,
     6,     0,     3,     7,   141,   204,     5,   210,   344,   210,
     3,   210,   335,   205,     6,     0,     3,     7,   136,   204,
     5,   210,     3,   205,     6,     0,     3,     7,   142,   204,
     5,   210,     3,   210,   336,   205,     6,     0,     3,     7,
   144,   204,     5,   210,     3,   210,     3,   210,     3,   205,
     6,     0,     3,     7,   143,   204,     5,   210,   338,   205,
     6,     0,     3,     7,   138,   204,     5,   210,     3,   205,
     6,     0,     3,     7,    43,   204,     5,   210,     3,   210,
     3,   205,     6,     0,     3,     7,   154,   204,     5,   210,
   344,   205,     6,     0,     3,     7,   155,   204,     5,   210,
   344,   210,     3,   205,     6,     0,     3,     7,   153,   204,
     5,   210,     3,   205,     6,     0,     3,     7,   157,   204,
     5,   210,     3,   210,   336,   205,     6,     0,     3,     7,
   158,   204,     5,   210,     3,   210,   336,   210,   336,   205,
     6,     0,     3,     7,   165,   204,     5,   210,     3,   210,
   336,   210,   336,   205,     6,     0,     3,     7,   159,   204,
     5,   210,     3,   210,   336,   205,     6,     0,     3,     7,
   169,   204,     5,   210,     3,   210,   336,   210,   336,   205,
     6,     0,     3,     7,   160,   204,     5,   210,     3,   210,
   344,   210,   344,   210,   335,   210,   335,   205,     6,     0,
     3,     7,   161,   204,     5,   210,   344,   205,     6,     0,
     3,     7,   162,   204,   163,   210,   335,   210,     3,   205,
     6,     0,     3,     7,   164,   204,     5,   210,   344,   210,
   335,   205,     6,     0,     3,     7,   166,   204,     5,   210,
     5,   210,     3,   210,     3,   205,     6,     0,     3,     7,
   167,   204,     5,   210,     5,   210,     3,   205,     6,     0,
     3,     7,   168,   204,     3,   210,     3,   205,     6,     0,
     0,   222,   223,     0,   225,     0,   224,     0,   310,     0,
   311,     0,   312,     0,   315,     0,   316,     0,   317,     0,
   318,     0,   321,     0,   333,     0,   334,     0,   320,     0,
   319,     0,    33,   204,     5,   205,     6,     0,    33,   204,
     5,   210,   346,   205,     6,     0,     4,     5,   211,   226,
   212,     6,     0,     4,     5,     4,   338,   211,   226,   212,
     6,     0,     0,   226,   228,     0,   226,   231,     0,   226,
   234,     0,   226,   237,     0,   226,   240,     0,   226,   243,
     0,   226,   246,     0,   226,   249,     0,   226,   252,     0,
   226,   255,     0,   226,   258,     0,   226,   261,     0,   226,
   264,     0,   226,   267,     0,   226,   270,     0,   226,   273,
     0,   226,   276,     0,   226,   279,     0,   226,   282,     0,
   226,   285,     0,   226,   288,     0,   226,   291,     0,   226,
   294,     0,   226,   297,     0,   226,   300,     0,   226,   303,
     0,   226,   305,     0,   226,   307,     0,   336,     0,   227,
   210,   336,     0,     0,    76,   204,   336,   210,   336,   210,
   336,   205,   229,   211,   227,   212,     6,     0,   336,     0,
   230,   210,   336,     0,     0,    77,   204,   336,   210,   336,
   210,   336,   205,   232,   211,   230,   212,     6,     0,   336,
     0,   233,   210,   336,     0,     0,    78,   204,   336,   210,
   336,   210,   336,   205,   235,   211,   233,   212,     6,     0,
   336,     0,   236,   210,   336,     0,     0,    79,   204,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   205,   238,   211,   236,   212,     6,     0,   336,     0,   239,
   210,   336,     0,     0,    80,   204,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   205,   241,   211,
   239,   212,     6,     0,   336,     0,   242,   210,   336,     0,
     0,    81,   204,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   205,   244,   211,   242,   212,     6,
     0,   336,     0,   245,   210,   336,     0,     0,    82,   204,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   205,   247,   211,
   245,   212,     6,     0,   336,     0,   248,   210,   336,     0,
     0,    83,   204,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   205,   250,   211,   248,   212,     6,     0,   336,     0,   251,
   210,   336,     0,     0,    84,   204,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   205,   253,   211,   251,   212,     6,     0,
   336,     0,   254,   210,   336,     0,     0,    85,   204,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   205,   256,   211,   254,   212,     6,     0,   336,
     0,   257,   210,   336,     0,     0,    86,   204,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   205,   259,   211,   257,   212,     6,     0,   336,     0,
   260,   210,   336,     0,     0,    87,   204,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   205,   262,   211,   260,   212,     6,     0,   336,     0,   263,
   210,   336,     0,     0,    88,   204,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   205,
   265,   211,   263,   212,     6,     0,   336,     0,   266,   210,
   336,     0,     0,    89,   204,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   205,   268,
   211,   266,   212,     6,     0,   336,     0,   269,   210,   336,
     0,     0,    90,   204,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   205,   271,   211,
   269,   212,     6,     0,   336,     0,   272,   210,   336,     0,
     0,    91,   204,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   205,   274,   211,   272,   212,     6,     0,   336,     0,   275,
   210,   336,     0,     0,    92,   204,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   205,   277,   211,   275,   212,     6,     0,
   336,     0,   278,   210,   336,     0,     0,    93,   204,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   205,   280,   211,   278,
   212,     6,     0,   336,     0,   281,   210,   336,     0,     0,
    94,   204,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   205,   283,   211,
   281,   212,     6,     0,   336,     0,   284,   210,   336,     0,
     0,    95,   204,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   205,   286,
   211,   284,   212,     6,     0,   336,     0,   287,   210,   336,
     0,     0,    96,   204,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   205,
   289,   211,   287,   212,     6,     0,   336,     0,   290,   210,
   336,     0,     0,    97,   204,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   205,   292,   211,   290,   212,     6,
     0,   336,     0,   293,   210,   336,     0,     0,    98,   204,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   205,
   295,   211,   293,   212,     6,     0,   336,     0,   296,   210,
   336,     0,     0,    99,   204,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   210,   336,   210,   336,   210,   336,
   210,   336,   210,   336,   205,   298,   211,   296,   212,     6,
     0,   350,     0,   299,   210,   350,     0,     0,   100,   204,
   336,   210,   336,   210,   336,   205,   301,   211,   299,   212,
     6,     0,   350,     0,   302,   210,   350,     0,     0,   101,
   204,   336,   210,   336,   210,   336,   210,   336,   205,   304,
   211,   302,   212,     6,     0,   102,   211,   343,   212,   211,
   343,   212,     6,     0,   336,     0,   306,   210,   336,     0,
   103,   211,   306,   212,     6,     0,     7,     0,   179,     0,
   180,     0,   181,     0,   182,     0,   200,     0,   201,     0,
     4,   308,   336,     6,     0,     4,   206,   336,   207,   308,
   336,     6,     0,     4,   206,   211,   346,   212,   207,   308,
   344,     6,     0,     4,   206,   207,     7,   344,     6,     0,
     4,   309,     6,     0,     4,   206,   336,   207,   309,     6,
     0,     4,   208,     4,     7,   350,     6,     0,     4,   206,
   336,   207,   208,     4,     7,   350,     6,     0,     4,   208,
     4,   308,   336,     6,     0,     4,   206,   336,   207,   208,
     4,   308,   336,     6,     0,     4,   208,     4,   309,     6,
     0,     4,   206,   336,   207,   208,     4,   309,     6,     0,
     4,   208,   112,   208,     4,     7,   347,     6,     0,     4,
   206,   336,   207,   208,   112,   208,     4,     7,   347,     6,
     0,     4,   208,   113,     7,   348,     6,     0,     4,   206,
   336,   207,   208,   113,     7,   348,     6,     0,    60,   204,
     4,   205,   208,     4,     7,   336,     6,     0,    60,   204,
     4,   205,   208,     4,     7,   350,     6,     0,    40,   204,
   336,   205,     7,   338,     6,     0,    56,    40,   204,   336,
   205,     7,   344,     6,     0,    73,    40,   344,     7,   211,
   336,   210,   336,   210,   336,   212,     6,     0,    47,    48,
   344,     7,   336,     6,     0,    43,   204,   336,   205,     7,
   344,     6,     0,    45,   204,   336,   205,     7,   344,     6,
     0,    41,   204,   336,   205,     7,   344,     6,     0,    41,
   204,   336,   205,     7,   344,    51,   338,     6,     0,    42,
   204,   336,   205,     7,   344,     6,     0,    42,   204,   336,
   205,     7,   344,    51,   338,     6,     0,    49,   204,   336,
   205,     7,   211,   336,   210,   336,   210,     5,   210,     5,
   210,     5,   212,     6,     0,   105,   204,   336,   205,     7,
   344,     6,     0,   106,   204,   336,   205,     7,   344,     6,
     0,   107,   204,   336,   205,     7,   344,   111,   344,   108,
   336,     6,     0,    43,    68,   204,   336,   205,     7,   344,
     6,     0,    73,    43,   344,     7,   211,   336,   210,   336,
   210,   336,   212,     6,     0,    56,    43,   204,   336,   205,
     7,   344,     6,     0,    51,    44,   204,   336,   205,     7,
   344,     6,     0,    52,    44,   204,   336,   205,     7,   344,
     6,     0,   123,    44,   204,   336,   205,     7,   211,   336,
   210,   344,   212,     6,     0,    61,    44,   204,   336,   205,
     7,   211,   336,   210,   336,   212,   344,   344,     6,     0,
    61,    44,   211,   336,   212,     7,   211,   336,   210,   336,
   212,   344,   344,     6,     0,    53,    44,   204,   336,   205,
     7,   204,   336,   210,   336,   205,   344,   344,     6,     0,
   107,    44,   109,   110,   204,   336,   205,     7,   342,   111,
   211,   344,   210,   344,   212,   108,   211,   336,   210,   336,
   212,     6,     0,   107,    44,   204,   336,   205,     7,   342,
   111,   211,   344,   210,   344,   212,   108,   211,   336,   210,
   336,   212,     6,     0,    44,    68,   204,   336,   205,     7,
   344,     6,     0,    56,    44,   204,   336,   205,     7,   344,
     6,     0,    55,    46,   204,   336,   205,     7,   344,     6,
     0,    46,   204,   336,   205,     7,   344,     6,     0,    56,
    46,   204,   336,   205,     7,   344,     6,     0,    63,   338,
   211,   313,   212,     0,    62,   211,   338,   210,   338,   210,
   336,   212,   211,   313,   212,     0,    64,   338,   211,   313,
   212,     0,    65,   211,   338,   210,   336,   212,   211,   313,
   212,     0,   315,     0,   314,     0,   312,     0,     0,   314,
   311,     0,   314,    40,   211,   346,   212,     6,     0,   314,
    43,   211,   346,   212,     6,     0,   314,    44,   211,   346,
   212,     6,     0,   314,    46,   211,   346,   212,     6,     0,
    67,   211,   314,   212,     0,    67,     4,   206,   336,   207,
     6,     0,    75,     4,   206,   336,   207,     6,     0,    70,
   211,   314,   212,     0,    70,     4,   206,   336,   207,     6,
     0,    70,     4,     6,     0,    70,     4,     4,     6,     0,
   112,   347,   211,   314,   212,     0,   124,   350,     6,     0,
   125,   350,     6,     0,   124,   211,   314,   212,     0,   125,
   211,   314,   212,     0,     4,   350,     6,     0,     4,     4,
   206,   336,   207,   350,     6,     0,     4,   336,     6,     0,
    60,   204,     4,   205,   208,     4,     6,     0,   104,     4,
     6,     0,   119,     6,     0,    37,     6,     0,    37,   211,
   336,   210,   336,   210,   336,   210,   336,   210,   336,   210,
   336,   212,     6,     0,    38,     6,     0,   114,   204,   336,
     8,   336,   205,     0,   114,   204,   336,     8,   336,     8,
   336,   205,     0,   114,     4,   115,   211,   336,     8,   336,
   212,     0,   114,     4,   115,   211,   336,     8,   336,     8,
   336,   212,     0,   116,     0,   122,     4,     0,   120,     0,
   121,     4,     6,     0,   117,   204,   336,   205,     0,   118,
     0,    66,    40,   211,   336,   210,   338,   212,     6,     0,
    66,    40,   211,   336,   210,   338,   210,   338,   210,   336,
   212,     6,     0,    66,    40,   211,   336,   210,   338,   210,
   338,   210,   338,   210,   336,   212,     6,     0,     0,    66,
    40,   211,   336,   210,   338,   212,   322,   211,   331,   212,
     6,     0,     0,    66,    40,   211,   336,   210,   338,   210,
   338,   210,   336,   212,   323,   211,   331,   212,     6,     0,
     0,    66,    40,   211,   336,   210,   338,   210,   338,   210,
   338,   210,   336,   212,   324,   211,   331,   212,     6,     0,
    66,    43,   211,   336,   210,   338,   212,     6,     0,    66,
    43,   211,   336,   210,   338,   210,   338,   210,   336,   212,
     6,     0,    66,    43,   211,   336,   210,   338,   210,   338,
   210,   338,   210,   336,   212,     6,     0,     0,    66,    43,
   211,   336,   210,   338,   212,   325,   211,   331,   212,     6,
     0,     0,    66,    43,   211,   336,   210,   338,   210,   338,
   210,   336,   212,   326,   211,   331,   212,     6,     0,     0,
    66,    43,   211,   336,   210,   338,   210,   338,   210,   338,
   210,   336,   212,   327,   211,   331,   212,     6,     0,    66,
    44,   211,   336,   210,   338,   212,     6,     0,    66,    44,
   211,   336,   210,   338,   210,   338,   210,   336,   212,     6,
     0,    66,    44,   211,   336,   210,   338,   210,   338,   210,
   338,   210,   336,   212,     6,     0,     0,    66,    44,   211,
   336,   210,   338,   212,   328,   211,   331,   212,     6,     0,
     0,    66,    44,   211,   336,   210,   338,   210,   338,   210,
   336,   212,   329,   211,   331,   212,     6,     0,     0,    66,
    44,   211,   336,   210,   338,   210,   338,   210,   338,   210,
   336,   212,   330,   211,   331,   212,     6,     0,   332,     0,
   331,   332,     0,    74,   211,   344,   210,   344,   210,   344,
   212,     6,     0,    74,   211,   344,   210,   344,   212,     6,
     0,    69,     6,     0,    54,    43,   344,     7,   336,     6,
     0,    54,    43,   344,     7,   336,    57,    59,   336,     6,
     0,    54,    43,   344,     7,   336,    57,    58,   336,     6,
     0,    54,    44,   211,   336,   212,     7,   344,     6,     0,
    50,    44,   211,   336,   212,     7,   344,     6,     0,    54,
    46,   211,   336,   212,     7,   344,     6,     0,    69,    44,
   344,     7,   336,     6,     0,    69,    44,   344,     6,     0,
    71,     6,     0,    72,     6,     0,   130,     0,   131,     0,
   132,     0,   133,     0,   134,     0,   337,     0,   204,   336,
   205,     0,   194,   336,     0,   193,   336,     0,   199,   336,
     0,   336,   194,   336,     0,   336,   193,   336,     0,   336,
   195,   336,     0,   336,   196,   336,     0,   336,   197,   336,
     0,   336,   203,   336,     0,   336,   189,   336,     0,   336,
   191,   336,     0,   336,   190,   336,     0,   336,   192,   336,
     0,   336,   186,   336,     0,   336,   187,   336,     0,   336,
   185,   336,     0,   336,   184,   336,     0,   336,   183,   336,
     8,   336,     0,    12,   204,   336,   205,     0,    13,   204,
   336,   205,     0,    14,   204,   336,   205,     0,    15,   204,
   336,   205,     0,    16,   204,   336,   205,     0,    17,   204,
   336,   205,     0,    18,   204,   336,   205,     0,    19,   204,
   336,   205,     0,    20,   204,   336,   205,     0,    22,   204,
   336,   205,     0,    23,   204,   336,   210,   336,   205,     0,
    24,   204,   336,   205,     0,    25,   204,   336,   205,     0,
    26,   204,   336,   205,     0,    27,   204,   336,   205,     0,
    28,   204,   336,   205,     0,    29,   204,   336,   205,     0,
    30,   204,   336,   210,   336,   205,     0,    31,   204,   336,
   210,   336,   205,     0,    32,   204,   336,   210,   336,   205,
     0,    21,   204,   336,   205,     0,    12,   206,   336,   207,
     0,    13,   206,   336,   207,     0,    14,   206,   336,   207,
     0,    15,   206,   336,   207,     0,    16,   206,   336,   207,
     0,    17,   206,   336,   207,     0,    18,   206,   336,   207,
     0,    19,   206,   336,   207,     0,    20,   206,   336,   207,
     0,    22,   206,   336,   207,     0,    23,   206,   336,   210,
   336,   207,     0,    24,   206,   336,   207,     0,    25,   206,
   336,   207,     0,    26,   206,   336,   207,     0,    27,   206,
   336,   207,     0,    28,   206,   336,   207,     0,    29,   206,
   336,   207,     0,    30,   206,   336,   210,   336,   207,     0,
    31,   206,   336,   210,   336,   207,     0,    32,   206,   336,
   210,   336,   207,     0,    21,   206,   336,   207,     0,     3,
     0,     9,     0,    10,     0,    11,     0,     4,     0,     4,
   206,   336,   207,     0,   209,     4,   206,   207,     0,     4,
   309,     0,     4,   206,   336,   207,   309,     0,     4,   208,
     4,     0,     4,   206,   336,   207,   208,     4,     0,     4,
   208,     4,   309,     0,     4,   206,   336,   207,   208,     4,
   309,     0,   126,   204,     5,   210,   336,   205,     0,   339,
     0,   194,   338,     0,   193,   338,     0,   338,   194,   338,
     0,   338,   193,   338,     0,   211,   336,   210,   336,   210,
   336,   210,   336,   210,   336,   212,     0,   211,   336,   210,
   336,   210,   336,   210,   336,   212,     0,   211,   336,   210,
   336,   210,   336,   212,     0,   204,   336,   210,   336,   210,
   336,   205,     0,     0,   204,   341,   205,     0,     5,     0,
   341,   210,     5,     0,     0,   211,   343,   212,     0,   204,
   343,   205,     0,   344,     0,   343,   210,   344,     0,   336,
     0,   345,     0,   211,   346,   212,     0,   194,   211,   346,
   212,     0,   336,     8,   336,     0,   336,     8,   336,     8,
   336,     0,    40,   211,   336,   212,     0,   312,     0,   315,
     0,   321,     0,     4,   206,   207,     0,   194,     4,   206,
   207,     0,     4,   206,   211,   346,   212,   207,     0,   194,
     4,   206,   211,   346,   212,   207,     0,   336,     0,   345,
     0,   346,   210,   336,     0,   346,   210,   345,     0,   211,
   336,   210,   336,   210,   336,   210,   336,   212,     0,   211,
   336,   210,   336,   210,   336,   212,     0,     4,     0,     4,
   208,   112,   208,     4,     0,   211,   349,   212,     0,     4,
   206,   336,   207,   208,   113,     0,   347,     0,   349,   210,
   347,     0,     5,     0,    39,     0,    35,   204,   350,   210,
   350,   205,     0,    36,   204,   350,   205,     0,    34,   204,
   350,   205,     0,    34,   204,   350,   210,   346,   205,     0,
    34,   204,     4,   208,     4,   205,     0,    34,   204,     4,
   206,   336,   207,   208,     4,   205,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   160,   162,   163,   164,   169,   171,   174,   176,   179,   186,
   199,   213,   215,   218,   220,   221,   224,   230,   235,   236,
   237,   240,   244,   247,   253,   258,   264,   272,   277,   281,
   287,   292,   296,   301,   305,   308,   313,   317,   321,   325,
   330,   334,   337,   341,   345,   349,   353,   357,   361,   364,
   368,   371,   375,   378,   385,   387,   390,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
   407,   413,   430,   438,   447,   455,   456,   457,   458,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   485,   488,   492,   498,   504,   507,   511,
   518,   525,   528,   532,   539,   546,   549,   553,   562,   569,
   572,   576,   585,   592,   595,   599,   608,   615,   618,   622,
   635,   642,   645,   649,   662,   669,   672,   676,   689,   696,
   699,   703,   717,   724,   727,   731,   745,   752,   755,   759,
   773,   780,   783,   787,   801,   808,   811,   815,   829,   836,
   839,   843,   857,   864,   867,   871,   895,   902,   905,   909,
   933,   940,   943,   947,   971,   978,   981,   985,  1004,  1011,
  1014,  1018,  1037,  1044,  1047,  1051,  1070,  1077,  1080,  1084,
  1102,  1109,  1112,  1116,  1134,  1141,  1144,  1148,  1166,  1173,
  1179,  1186,  1194,  1200,  1206,  1213,  1221,  1227,  1235,  1238,
  1242,  1250,  1252,  1253,  1254,  1255,  1258,  1260,  1263,  1298,
  1337,  1391,  1408,  1419,  1438,  1452,  1469,  1495,  1522,  1536,
  1553,  1567,  1584,  1604,  1627,  1637,  1652,  1672,  1688,  1707,
  1726,  1744,  1762,  1780,  1806,  1824,  1850,  1870,  1894,  1918,
  1944,  1961,  1979,  1998,  2017,  2056,  2081,  2101,  2120,  2137,
  2156,  2175,  2191,  2210,  2227,  2244,  2264,  2270,  2275,  2280,
  2287,  2289,  2290,  2293,  2298,  2302,  2318,  2334,  2350,  2370,
  2385,  2391,  2402,  2412,  2422,  2432,  2450,  2464,  2473,  2479,
  2490,  2503,  2548,  2563,  2579,  2589,  2600,  2604,  2608,  2612,
  2623,  2640,  2656,  2682,  2709,  2741,  2748,  2753,  2759,  2763,
  2771,  2790,  2806,  2822,  2827,  2843,  2848,  2864,  2869,  2887,
  2910,  2933,  2956,  2961,  2984,  2989,  3012,  3017,  3043,  3066,
  3089,  3112,  3117,  3140,  3146,  3169,  3175,  3200,  3204,  3209,
  3236,  3260,  3268,  3287,  3305,  3323,  3350,  3376,  3402,  3416,
  3434,  3439,  3448,  3450,  3451,  3452,  3453,  3456,  3458,  3459,
  3460,  3461,  3462,  3463,  3464,  3465,  3472,  3473,  3474,  3475,
  3476,  3477,  3478,  3479,  3480,  3481,  3482,  3483,  3484,  3485,
  3486,  3487,  3488,  3489,  3490,  3491,  3492,  3493,  3494,  3495,
  3496,  3497,  3498,  3499,  3500,  3501,  3502,  3503,  3505,  3506,
  3507,  3508,  3509,  3510,  3511,  3512,  3513,  3514,  3515,  3516,
  3517,  3518,  3519,  3520,  3521,  3522,  3523,  3524,  3525,  3530,
  3535,  3536,  3537,  3541,  3554,  3574,  3588,  3601,  3624,  3642,
  3660,  3678,  3696,  3703,  3708,  3712,  3716,  3720,  3726,  3731,
  3735,  3739,  3745,  3749,  3754,  3758,  3763,  3767,  3771,  3777,
  3783,  3790,  3796,  3800,  3804,  3815,  3822,  3833,  3853,  3863,
  3873,  3885,  3902,  3921,  3945,  3973,  3979,  3983,  3987,  3999,
  4004,  4016,  4023,  4044,  4049,  4063,  4069,  4075,  4080,  4088,
  4096,  4110,  4114,  4133,  4149
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers",
"tAlias","tScalarPoint","tVectorPoint","tTensorPoint","tScalarLine","tVectorLine",
"tTensorLine","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarQuadrangle",
"tVectorQuadrangle","tTensorQuadrangle","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarHexahedron","tVectorHexahedron","tTensorHexahedron",
"tScalarPrism","tVectorPrism","tTensorPrism","tScalarPyramid","tVectorPyramid",
"tTensorPyramid","tText2D","tText3D","tInterpolationScheme","tTime","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tGetValue","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","InterpolationMatrix","TimeValues","Time","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Colorify","Visibility","Command","Loop","Extrude","@27","@28","@29",
"@30","@31","@32","@33","@34","@35","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   213,   213,   213,   213,   214,   214,   215,   215,   216,   216,
   216,   217,   217,   218,   218,   218,   219,   219,   219,   219,
   219,   220,   220,   220,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   222,   222,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   224,   224,   225,   225,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   227,   227,   229,   228,   230,   230,   232,
   231,   233,   233,   235,   234,   236,   236,   238,   237,   239,
   239,   241,   240,   242,   242,   244,   243,   245,   245,   247,
   246,   248,   248,   250,   249,   251,   251,   253,   252,   254,
   254,   256,   255,   257,   257,   259,   258,   260,   260,   262,
   261,   263,   263,   265,   264,   266,   266,   268,   267,   269,
   269,   271,   270,   272,   272,   274,   273,   275,   275,   277,
   276,   278,   278,   280,   279,   281,   281,   283,   282,   284,
   284,   286,   285,   287,   287,   289,   288,   290,   290,   292,
   291,   293,   293,   295,   294,   296,   296,   298,   297,   299,
   299,   301,   300,   302,   302,   304,   303,   305,   306,   306,
   307,   308,   308,   308,   308,   308,   309,   309,   310,   310,
   310,   310,   310,   310,   310,   310,   310,   310,   310,   310,
   310,   310,   310,   310,   310,   310,   311,   311,   311,   311,
   311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
   311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
   311,   311,   311,   311,   311,   311,   312,   312,   312,   312,
   313,   313,   313,   314,   314,   314,   314,   314,   314,   315,
   315,   315,   316,   316,   316,   316,   317,   318,   318,   318,
   318,   319,   319,   319,   319,   319,   319,   319,   319,   319,
   320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
   321,   321,   321,   322,   321,   323,   321,   324,   321,   321,
   321,   321,   325,   321,   326,   321,   327,   321,   321,   321,
   321,   328,   321,   329,   321,   330,   321,   331,   331,   332,
   332,   332,   333,   333,   333,   333,   333,   333,   333,   333,
   334,   334,   335,   335,   335,   335,   335,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   338,   338,   338,   338,   338,   339,   339,
   339,   339,   340,   340,   341,   341,   342,   342,   342,   343,
   343,   344,   344,   344,   344,   345,   345,   345,   345,   345,
   345,   345,   345,   345,   345,   346,   346,   346,   346,   347,
   347,   347,   347,   348,   348,   349,   349,   350,   350,   350,
   350,   350,   350,   350,   350
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    14,    22,
    20,     8,     8,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     6,     6,     6,     6,     4,
     6,     6,     4,     6,     3,     4,     5,     3,     3,     4,
     4,     3,     7,     3,     7,     3,     2,     2,    15,     2,
     6,     8,     8,    10,     1,     2,     1,     3,     4,     1,
     8,    12,    14,     0,    12,     0,    16,     0,    18,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     1,     2,     9,
     7,     2,     6,     9,     9,     8,     8,     8,     6,     4,
     2,     2,     1,     1,     1,     1,     1,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     1,
     1,     1,     1,     1,     4,     4,     2,     5,     3,     6,
     4,     7,     6,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     1,     1,     3,     4,     3,     5,     4,     1,     1,
     1,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     1,     6,
     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   305,     0,   310,     0,   307,     0,     0,     0,
     0,     0,    56,    58,    57,    59,    60,    61,    62,    63,
    64,    65,    70,    69,    66,    67,    68,     0,     0,    17,
    18,    20,    19,    21,   443,   443,     0,   420,   424,   478,
   212,   421,   422,   423,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   479,     0,
   213,   214,   215,   216,     0,     0,     0,   217,   218,     0,
     0,     0,     0,     0,     0,     0,   358,     0,     0,   298,
     0,   300,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   434,     0,     0,     0,     0,     0,     0,   274,
     0,     0,   274,   351,   352,     0,     0,     0,     0,     0,
     0,     0,     0,   472,     0,     0,     0,     0,     0,   297,
     0,   306,     0,   478,   274,     0,   274,     0,     5,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   427,     0,    75,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   424,   361,   360,   362,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   223,
   294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   292,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   424,     0,     0,
     0,   459,   460,   461,   452,     0,   453,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   436,   435,     0,     0,     0,     0,
   274,   274,     0,     0,     0,     0,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,   296,     0,     0,     0,
     0,     0,     0,     0,   274,     0,     0,     0,   308,     0,
     0,   288,     0,   289,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   445,     0,     0,     0,
     0,     0,   429,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   359,     0,     0,   466,   467,     0,     0,
   212,     0,     0,     0,     0,     0,   219,     0,   376,   375,
   373,   374,   369,   371,   370,   372,   364,   363,   365,   366,
   367,   368,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   424,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   438,
   437,   273,     0,   272,   271,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   280,   275,   350,     0,   286,
     0,   283,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   309,     0,   290,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   444,     0,     0,    23,     0,   425,   431,    75,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   378,   399,   379,   400,   380,
   401,   381,   402,   382,   403,   383,   404,   384,   405,   385,
   406,   386,   407,   398,   419,   387,   408,     0,     0,   389,
   410,   390,   411,   391,   412,   392,   413,   393,   414,   394,
   415,     0,     0,     0,     0,     0,     0,     0,     0,   482,
     0,     0,   481,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   229,     0,     0,     0,     0,   426,     0,
    71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   462,     0,     0,     0,     0,   454,   456,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   267,   269,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   287,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   446,     0,   443,     0,
   428,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   425,   222,   468,   469,     0,
     0,     0,     0,     0,   224,   225,   227,     0,     0,   476,
     0,   233,   377,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   458,   463,     0,   455,     0,   240,
     0,     0,     0,     0,     0,   343,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   281,     0,     0,     0,     0,   349,
   284,     0,     0,   282,     0,     0,     0,   447,     0,   473,
     0,     0,     0,   301,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   353,
   354,   355,   356,   357,     0,     0,     0,     0,     0,     0,
     0,    22,     0,   430,   293,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   450,     0,   209,   388,   409,   395,   416,
   396,   417,   397,   418,     0,   484,   483,   480,   433,     0,
   212,     0,     0,     0,     0,   220,     0,     0,     0,   474,
    72,     0,   237,   243,     0,   245,     0,     0,   241,     0,
   242,   265,     0,     0,   457,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     0,     0,     0,     0,     0,     0,   274,     0,   314,     0,
   323,     0,   332,     0,     0,     0,     0,     0,     0,   248,
   249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   443,   432,    74,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
     0,   231,     0,   477,     0,     0,     0,   251,   262,   464,
     0,     0,   347,   254,   255,     0,     0,     0,   346,   348,
   264,   238,   253,   263,   266,     0,     0,     0,     0,     0,
   442,     0,   441,     0,     0,   311,     0,     0,   320,     0,
     0,   329,     0,   276,   277,   278,   279,     0,     0,   447,
     0,     0,     0,     0,     0,   471,     0,   303,   302,     0,
     0,     0,     0,     0,    25,     0,    34,     0,    38,     0,
    32,     0,     0,    37,     0,    42,    40,     0,     0,     0,
     0,     0,     0,    49,     0,     0,     0,     0,     0,    54,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   451,     0,
   210,   211,     0,   221,   226,   228,     0,   234,     0,     0,
   244,   246,   465,     0,     0,   345,   344,   235,   236,     0,
     0,   274,     0,   270,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   449,   448,     0,     0,     0,     0,     0,
     0,     0,   447,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   485,     0,   475,     0,     0,     0,     0,     0,     0,     0,
   440,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   470,   304,     0,     0,    39,     0,     0,     0,     0,
    29,     0,    35,     0,    41,    30,    43,     0,    46,     0,
    50,    51,     0,     0,    53,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   232,     0,     0,     0,     0,     0,
   268,     0,     0,   316,     0,   342,     0,     0,   339,   325,
     0,     0,   334,     0,     0,     0,     0,     0,     0,   250,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,   110,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   202,     0,
   208,     0,     0,     0,     0,     0,   439,   312,     0,     0,
     0,   315,   321,     0,     0,   324,   330,     0,     0,   333,
   239,   252,     0,     0,   256,     0,     0,     0,     0,     0,
    33,    36,    44,     0,    45,    52,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   318,     0,     0,   327,     0,   336,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   206,     0,     0,   259,   257,   258,     0,   313,     0,     0,
     0,   322,     0,     0,   331,     0,     0,     0,     0,     0,
     0,    28,    31,     0,     0,     0,   104,     0,   108,     0,
   112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   200,     0,   299,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   317,     0,     0,   341,   326,     0,   335,
     0,     0,     0,     0,     0,     0,    48,    24,   105,   107,
   109,   111,   113,   115,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   201,   203,     0,   204,   247,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
   122,   126,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,   340,   328,   337,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   205,   207,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   261,    10,     0,     0,     0,   116,     0,   120,     0,
   124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   260,     0,    26,   117,
   119,   121,   123,   125,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   130,   134,   138,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   128,     0,   132,     0,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   129,   131,   133,   135,   137,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   142,   146,   150,
   154,   158,   162,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   140,     0,   144,     0,   148,     0,
   152,     0,   156,     0,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   141,   143,   145,   147,   149,
   151,   153,   155,   157,   159,   161,   163,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   190,   194,   198,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   188,     0,   192,     0,   196,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   189,   191,   193,   195,   197,   199,     0,
     0,     0,   178,   182,   186,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   176,     0,   180,     0,   184,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   177,   179,
   181,   183,   185,   187,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   166,   170,   174,     0,     0,     0,     0,     0,
     0,     0,   164,     0,   168,     0,   172,     0,     0,     0,
     0,     0,     0,   165,   167,   169,   171,   173,   175,     0,
     0,     0
};

static const short yydefgoto[] = {  2400,
   221,     2,     9,     3,    19,    20,    21,    22,     4,    73,
    74,    75,   455,  1716,   678,  1619,  1718,   679,  1620,  1720,
   680,  1621,  1936,   681,  1882,  1938,   682,  1883,  1940,   683,
  1884,  2072,   684,  2034,  2074,   685,  2035,  2076,   686,  2036,
  2184,   687,  2154,  2186,   688,  2155,  2188,   689,  2156,  2190,
   690,  2157,  2192,   691,  2158,  2194,   692,  2159,  2382,   693,
  2376,  2384,   694,  2377,  2386,   695,  2378,  2331,   696,  2319,
  2333,   697,  2320,  2335,   698,  2321,  2280,   699,  2262,  2282,
   700,  2263,  2284,   701,  2264,  1743,   702,  1643,  1838,   703,
  1745,   704,  1065,   705,   144,   258,    76,   587,   352,   573,
   574,   353,    80,    81,    82,    83,    84,   354,  1257,  1589,
  1699,  1260,  1594,  1703,  1263,  1598,  1706,  1449,  1450,    86,
    87,  1025,   355,   147,   375,   183,   253,   448,  1145,  1063,
  1064,   357,   509,   206,   768,   931,   148
};

static const short yypact[] = {  3078,
    47,   385,   311,  3492,-32768,-32768,-32768,  -148,-32768,    66,
   104,   114,   123,   129,   137,   -25,    -6,    28,-32768,-32768,
-32768,-32768,  2512,    85,    16,   169,   113,   127,   144,   -16,
   150,   148,   162,   181,   168,   335,   342,   375,   378,   519,
   294,   408,   186,   381,   197,  -126,  -126,   201,   316,     6,
   384,     9,   432,   443,    19,   464,   487,   295,   302,   -20,
    11,    17,-32768,   312,-32768,   537,-32768,   540,   543,   397,
    15,    69,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    20,  3350,-32768,
-32768,-32768,-32768,-32768,   319,   319,   570,-32768,   203,    12,
-32768,-32768,-32768,-32768,   -52,   231,   249,   284,   299,   363,
   364,   367,   368,   372,   379,   380,   386,   390,   391,   394,
   398,   401,   414,   417,   435,   355,   376,   395,-32768,   405,
-32768,-32768,-32768,-32768,  2871,  2871,  2871,-32768,-32768,  2871,
   814,    51,   608,  2871,   607,   501,-32768,   611,   617,-32768,
  2871,-32768,  2871,  2871,  2871,   410,  2871,   447,  2871,  2871,
  1247,  2871,   439,   453,   461,   485,  1247,   500,   515,   513,
   528,   568,   572,   593,   740,   -66,  -126,  -126,  -126,  2871,
  2871,   -78,-32768,   -67,  -126,   547,   591,   594,   641,-32768,
  1247,    13,-32768,-32768,-32768,  1247,  1247,   673,   801,  2871,
  2871,   -63,  2871,   606,  2871,   674,   787,  2871,  2871,-32768,
   899,-32768,   718,-32768,-32768,   928,-32768,   930,-32768,   934,
    20,   734,   735,   737,   738,   739,   744,   745,   746,   752,
   762,   763,   769,   770,   771,   788,   802,   805,   810,   811,
   815,   816,   818,   820,   827,   837,   838,   839,   840,   841,
   847,   939,   781,   767,   859,  2871,  1049,-32768,  -126,-32768,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,    61,   346,   346,  1065,   270,   868,   868,   868,
 11564,  1066,  2719, 10839,    30,   864,  1068,   872,   595,-32768,
-32768,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,-32768,   -86,  1866, 11587,
 11610, 11633,  2871, 11656,  2871, 11679, 11702,   286,   866,  2424,
  2719,-32768,-32768,-32768,   793,  1072,-32768, 11725,  2871,  2871,
  2871,  2871,  1073,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
   876,  2871,  2871,  -146,-32768,-32768,  3843,  3865,  -126,  -126,
   402,   402,   -34,  2871,  2871,  2871,  2871,  2058,    76,  1076,
-32768,  2871,  3053,  1077,  1079,  2871,-32768, 11748, 11771,   973,
  2871, 11794,   979,  3887,-32768,   881,  1585, 11817,-32768,  2871,
  3191,-32768,  3226,-32768,-32768,    20,  1088,  1089,  1090,  1091,
  1092,  1096,  1112,  1113,  1114,  1116,  1117,  1118,  1119,  1120,
  1121,  1123,  1124,  1126,  1127,  1128,  1130,  1131,  1133,   976,
  1136,  1137,  1138,  1139,  1142,  1145,-32768,   -54,  1146,  1147,
  1150, 10864,   -99,   -22,  3328, 11840, 10889, 11863, 10914, 11886,
 10939, 11909, 10964, 11932, 10989, 11955, 11014, 11978, 11039, 12001,
 11064, 12024, 11089, 12047, 11114, 12070, 11139,  3909,  3931, 12093,
 11164, 12116, 11189, 12139, 11214, 12162, 11239, 12185, 11264, 12208,
 11289,  3953,  3975,  3997,  4019,  4041,  4063,   383,    82,   942,
   951,   947,  2871,-32768,  1247,  2963,   793,-32768,   396,   115,
   346,  2871,  1153,  1156,    14,   954,-32768,  1600,   917,   808,
   560,   560,   237,   237,   237,   237,   305,   305,   868,   868,
   868,   868,  1182,  2719,  2871,  1184,  1185,  1186, 12231,  1187,
 12254,  1188,  1189,  1672,  2871,   309,  2719,   430,  2871,  2871,
  1190,  2306, 12277, 12300, 12323,  2871,  2577,  2749, 12346, 12369,
 12392, 12415, 12438,   981, 12461,  2815,  -126,  2871,  2871,-32768,
-32768,-32768,   986,  1868,-32768,   987,  2871,  4085,  4107,  4129,
 11314,   -64,   -43,   -41,   -37,-32768,-32768,-32768,  2871,-32768,
 11339,-32768,   989,   990, 11364,  1196,  1197,  1001, 12484,  1199,
   999,  2871,  3264,  2871,  2871,-32768, 12507,-32768,-32768,  1033,
  1000,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,  1010,
  1011,  1012,  1013,  1029,  1030,  1031,  1032,  1037,  1038,  1039,
  1043,  1045,  1070,  1071,  1093,  1094,  1095,  1097,  1098,  1105,
-32768,  1206,  1101,-32768,  1106,   157,-32768,-32768,  1115,  1122,
  1125,  1132,  1135,  1141,  1143,  1148,  1149,  1151,  1152,  1154,
  1155,  1157,  1158,  1161,  1163,  1166,  1170,  1171,  1173,  1174,
  1176,  1204,  1205,  1208,  1087,  1107,  1237,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2871,  2871,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  1295,-32768,
  2719,   346,-32768,  2871, 11389,  1294,  2719,  1110,    53,  2871,
  1314,  1315,   697,-32768,  1316,  1129,    11,  1318,-32768,  2871,
-32768,   274,  4151,  -126,  1247,  1247,  1320,  1247,  1321,  1247,
  1247,-32768,  2719,  2864,  2394,   433,-32768,  1621,   724,  1140,
  1323,  1327,  1333,  1334,   441,  1336,  1343,  1350,  1353,  1403,
  1406,  1407,  1297,  1408,  1409,   125,  4173,  4195,-32768,-32768,
  3161,  -126,  -126,  -126,  1319,  2719,  2719,  2719,  2719,   768,
  1412,  2871,  2871,  1421,  1247,  1247,  2871,  1430,  1247,  1434,
  4217,-32768,  1665,   477,  1432,  1267,  1441,  2871,  2871,  -126,
  1442,  1444,  1253,  1446,  1447,  1247,  1247,  1449,  -126,  1450,
  1451,  1247,  1247,  1452,  1454,  1456,  1457,  1458,  1247,   419,
  1247,  1459,  1460,  1461,  1464,  1465,-32768,  1463,   319,  1466,
-32768,  1467,  3370,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  1247,
  2871,-32768, 12530, 11414, 12553, 11439, 12576, 11464, 12599, 11489,
 11514,  1258,   308,  1259, 12622,   296,-32768,   793,-32768,    26,
   195,  1264,  1472,   843,-32768,-32768,-32768,    11,  2871,-32768,
   436,-32768, 13473,  1483,  2871,    22,    36,    38,  1247,  1484,
  1247,  1485,  1486,   437,-32768,-32768,  2719,-32768,  2871,-32768,
  2871,  1247,  1247,  1247,  1289,-32768,   136,  1247,  1247,  1247,
  1247,  1247,  1247,  1247,   475,  1284,  1285,  2871,  2871,  2871,
  1286,  -122,  -101,   -87,-32768,   446,   465,   466,   469,-32768,
-32768,  4239,  4261,-32768,  1492,  1493, 12645,    -7,  1389,-32768,
  2871,  2871,  2871,-32768,  1290,  1331,  1296,  4283,  4305,  -114,
  1299,  1300,  1302,  1305,  1303,  1309,  1306,  1307,   212,  1308,
  1310,  1317,  1311,  1313,  1322,  1324,  1346,  1348,  1325,-32768,
-32768,-32768,-32768,-32768,  1355,  1365,  1366,  1367,  1368,  1326,
  1369,-32768,  1371,   -99,-32768,  1498,  4327,  4349,  4371,  4393,
  4415,  4437,  4459,  4481,  4503,  4525,  4547,  4569,  4591,  4613,
  4635,  4657,  4679,  4701,  4723,  4745,  4767,  4789,  4811,  4833,
  4855,  4877,   489,-32768,   490, 13473,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1312,-32768,-32768,-32768,-32768,  1247,
   346,  2871,  1501,  1515,    14,-32768,  1519, 11539,    11,-32768,
-32768,  4899,-32768,-32768,  -126,-32768,  -126,  1520,-32768,  1521,
-32768,-32768,  1375,   497, 13473,  4921,  1522,  1523,  1527,  2871,
  2871,  2871,  1577,  1578,  1579,  1580,  1582,  1584,  1588,-32768,
  2837,  2871,  2871,  3435, 12668,  1377,   402,  -126,  1589,  -126,
  1590,  -126,  1591,  1593,  1594,  1596,  1598,  2871,  2871,-32768,
-32768,  1599,  1247,  1247,  1480,  1247,  2369,   345, 12691,  2871,
    20,  1604,  2871,  1247,  1603,  1607,  1605,  1417,  1608,   419,
  1609,  1610,  2871,  1611,  1613,  1612,  1614,  1616,   419,  2871,
  2871,  2871,  1247,  1618,  1622,   419,  2871,  1623,  1627,  1625,
  2871,   319,-32768,-32768,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  1247,  1422,  2871,  1626,  1630,  1629,  1631,   871,-32768,  1632,
  1634,-32768,  1428,-32768,  2871,    92,   140,-32768,-32768,-32768,
  1435,  2871,-32768,-32768,-32768,  4943,  1041,  1099,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1239,  1635,  4965,  4987,  1427,
-32768,  2871,-32768,  1455,   161,-32768,  1469,   174,-32768,  1494,
   200,-32768,  1495,-32768,-32768,-32768,-32768,  5009,  5031,    -7,
   315,   498,  1496,  1560,  2871,-32768,  2871,-32768,-32768,  5053,
    20,  1473,  5075,  1462,-32768,  1499,-32768,  1500,-32768,  1503,
-32768,  1504, 12714,-32768,  1505,-32768,-32768,  1506,  1508, 12737,
  5097, 12760,  1507,-32768,  1511,  1513,  5119,  1509,  1517,-32768,
  5141,  1510,  5163,  5185,  5207,  5229,  5251,  5273,  5295,  5317,
  5339,  5361,  5383,  5405,  5427,  5449,  5471,  5493,  5515,  5537,
  5559,  5581,  5603,  5625,  5647,  5669,  5691,  5713,-32768,  1247,
 13473,-32768,  1524,-32768,-32768,-32768,    11,-32768,  1557,  5735,
-32768,-32768,-32768,  5757,  2871,-32768,-32768,-32768,-32768,  2871,
  2871,   402,  2485,-32768,  2454,   445,  2454,   445,  2454,   445,
  2871,  2871,  1563,-32768,-32768,  1247,  2871,  3459,  3483,  1247,
    20,  1671,    -7,   419,  1668,  2871,  1718,   419,  1719,  1723,
  1721,  1722,  1724,  2871,  1725,  1247,  1726,  1727,  2871,  1732,
  1730,  2871,  1733,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,   502,
-32768,  1731,-32768,  2871,  1734, 12783,  3507,  3531,  1529,  2871,
-32768,  2454,  2454,  2871,  3555,   204,  1737,  1534,   -39,-32768,
  3579,   206,   -31,  3603,   208,   -29,  3627,  3651,  1556,  1615,
  1291,-32768,-32768,  1561,  1628,-32768,  1617,  1619,  1643,  5779,
-32768,  1658,-32768,  1659,-32768,-32768,-32768, 12806,-32768,  1657,
-32768,-32768, 12829,  1664,-32768, 12852,  1660, 12875, 12898, 12921,
  5801,  5823,  5845,  5867,  5889,  5911,  5933,  5955,  5977,  5999,
  6021,  6043,  6065,  6087,  6109,  6131,  6153,  6175,  6197,  6219,
  6241, 12944,  6263,  1793,-32768,  6285,  1662,  1247,  1247,  1247,
-32768,  3675,  2629,  1795,  2871,-32768,  1247,  1803,-32768,  1813,
  2871,  1814,  1815,  2871,  1820,  1822,  1867,  1247,  1247,-32768,
  1869,    20,   419,   419,   419,   419,  1871,  1872,  1874,   419,
  1878,  1879,  1880,  1911,-32768,-32768,-32768,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,-32768,  2871,
-32768,  2871,  1913,  1247,  1247,  1247,-32768,-32768,  1663,  3699,
  1712,-32768,-32768,  1714,  3723,-32768,-32768,  1715,  3747,-32768,
-32768,-32768,  1717,  1716,-32768,    20,  1720,  1728,  1729,  1738,
-32768,-32768,-32768,  1735,-32768,-32768,-32768,  1754,  1755,  1756,
  1757,  6307,  6329,  6351,  6373,  6395,  6417,  6439,  6461,  6483,
  6505,  6527,  6549,  6571,  6593,  6615,  6637,  6659,  6681,  6703,
  6725,  6747,  1758, 12967,  3771,  1760,  1925,  1926,  1927,   445,
  1929,  1247,   445,  1931,   445,  1933,  1247,  1857,    20,   419,
   419,  1965,  1966,   419,  1971,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,   346,
-32768,  1972,  1974,-32768,-32768,-32768,   -13,-32768,  1766,   503,
   -11,-32768,  1769,     1,-32768,  1770,  1771,  1773,  1810,  1775,
  1776,-32768,-32768,  1782,  1783,   506, 13473,   517, 13473,   523,
 13473,  6769,  6791,  6813,  6835,  6857,  6879,  6901,  6923,  6945,
  6967,  6989,  7011,  7033,  7055,  7077,  7099,  7121,  7143,  7165,
  7187,  7209,   526,-32768,  1778,-32768,  1780,  1984,   445,  1247,
  1987,  1988,   445,  2004,   445,  1903,  2871,    20,   419,  1247,
  2006,  2007,  2871,  2008,  2871,  2009,  2871,  2010,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,   346,
  2011,   346,  2012,-32768,    25,  1807,-32768,-32768,    79,-32768,
    81,  1809,  7231,    20,  1811,  1812,-32768,-32768, 13473,-32768,
 13473,-32768, 13473,-32768, 12990, 13013, 13036,  7253,  7275,  7297,
  7319,  7341,  7363,  7385,  7407,  7429,  7451,  7473,  7495,  7517,
  7539,  7561,  7583,  7605,  7627,-32768,-32768,   529,-32768,-32768,
  2017,  2018,  2019,  2020,  2871,  2871,    20,   419,  1247,-32768,
-32768,-32768,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
   346,  2021,-32768,-32768,-32768,-32768,  7649,  3795,  1851,  1819,
  1838,  1843,  1853,  1854,  7671,  7693,  7715,  7737,  7759,  7781,
  7803,  7825,  7847,  7869,  7891,  7913,  7935,  7957,  7979,  8001,
  8023,  8045,-32768,-32768,  2871,  2060,  1889,  1247,   419,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  3819,-32768,-32768,  1858,  1865,   530, 13473,   533, 13473,   549,
 13473,  8067,  8089,  8111,  8133,  8155,  8177,  8199,  8221,  8243,
  8265,  8287,  8309,  8331,  8353,  8375,  8397,  8419,  8441,  2066,
  1247,  2068,  2871,  2086,  2871,  2087,  2871,  2088,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,-32768,  1885,-32768, 13473,
-32768, 13473,-32768, 13473,-32768, 13059, 13082, 13105,  8463,  8485,
  8507,  8529,  8551,  8573,  8595,  8617,  8639,  8661,  8683,  8705,
  8727,  8749,  8771,  1247,-32768,-32768,-32768,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  1886,  1895,  1897,  1901,  8793,  8815,  8837,  8859,
  8881,  8903,  8925,  8947,  8969,  8991,  9013,  9035,  9057,  9079,
  9101,  1247,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  1887,   554, 13473,   555, 13473,   558, 13473,  9123,  9145,  9167,
  9189,  9211,  9233,  9255,  9277,  9299,  9321,  9343,  9365,  9387,
  9409,  9431,   419,  2871,  2109,  2871,  2110,  2871,  2111,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  1915, 13473,-32768, 13473,-32768, 13473,
-32768, 13128, 13151, 13174, 13197, 13220, 13243,  9453,  9475,  9497,
  9519,  9541,  9563,  9585,  9607,  9629,  2112,-32768,-32768,-32768,
-32768,-32768,-32768,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,-32768,  1919,  1921,  1922,  1923,  1924,  1928,  9651,
  9673,  9695,  9717,  9739,  9761,  9783,  9805,  9827,  2871,  2871,
  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,   559, 13473,   563, 13473,   596, 13473,   600,
 13473,   601, 13473,   609, 13473,  9849,  9871,  9893,  9915,  9937,
  9959,  9981, 10003, 10025,  2871,  2130,  2871,  2131,  2871,  2132,
  2871,  2134,  2871,  2135,  2871,  2136,  2871,  2871,  2871,  2871,
  2871,  2871,  2871,  2871,  2871, 13473,-32768, 13473,-32768, 13473,
-32768, 13473,-32768, 13473,-32768, 13473,-32768, 10047, 10069, 10091,
 10113, 10135, 10157, 13266, 13289, 13312,  2871,  2871,  2871,  2871,
  2871,  2871,-32768,-32768,-32768, 10179, 10201, 10223, 10245, 10267,
 10289,  1932,  1934,  1950,  2871,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2871, 10311, 10333, 10355, 10377, 10399, 10421,   610,
 13473,   638, 13473,   685, 13473,  2871,  2871,  2871,  2871,  2871,
  2871,  2871,  2138,  2871,  2156,  2871,  2160, 10443, 10465, 10487,
 13335, 13358, 13381, 13473,-32768, 13473,-32768, 13473,-32768,  2871,
  2871,  2871,-32768,-32768,-32768, 10509, 10531, 10553,  1956,  1957,
  1958,  2871,  2871,  2871,  2871,  2871,  2871, 10575, 10597, 10619,
   686, 13473,   691, 13473,   713, 13473,  2871,  2871,  2871,  2871,
  2164,  2871,  2165,  2871,  2166, 10641, 10663, 10685, 13473,-32768,
 13473,-32768, 13473,-32768,  2871,  2871,  2871, 10707, 10729, 10751,
  2871,  2871,  2871, 10773, 10795, 10817,  2871,  2871,  2871, 13404,
 13427, 13450,-32768,-32768,-32768,  1962,  1963,  1964,  2871,  2871,
  2871,   719, 13473,   720, 13473,   723, 13473,  2871,  2170,  2871,
  2171,  2871,  2172, 13473,-32768, 13473,-32768, 13473,-32768,  2179,
  2180,-32768
};

static const short yypgoto[] = {-32768,
  -135,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1535,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -310,   -17,-32768,  2181,     7,  -381,
  -181,    10,-32768,-32768,-32768,-32768,-32768,  2183,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1329, -1372,-32768,
-32768, -1100,   -23,-32768,   236,-32768,   -92,-32768, -1241, -1112,
  1431,  -164,  -344,  -759,  1104,-32768,   -69
};


#define	YYLAST		13676


static const short yytable[] = {   146,
   576,   216,   218,   254,   512,   145,   548,   930,   388,   189,
    78,   393,   192,    79,   204,   259,   390,   766,   391,   214,
   207,   150,   219,   202,   156,    88,   158,  1093,  1373,  1447,
  1271,  1272,   101,   411,  1448,   413,   511,  1447,  1453,  1447,
  1456,  1094,  1448,  1096,  1448,   400,   379,   380,   126,   127,
   128,   156,     5,   129,   315,  1447,   921,  1447,   196,  1290,
  1448,   197,  1448,   567,   498,   214,   178,   179,  1299,  1447,
   379,   380,    89,   214,  1448,  1306,  1529,   180,   379,   380,
  1529,   588,   589,  1529,   181,   416,  1095,  1128,  1097,  1129,
  1155,   379,   380,  1447,   126,   127,   128,  1351,  1448,   129,
   138,   139,   126,   127,   128,   379,   380,   129,  1130,    90,
  1131,   308,   309,   310,   379,   380,   311,   314,   533,    91,
   319,   101,  1132,   534,  1133,   379,   380,   339,    92,   340,
   341,   342,   381,   344,    93,   346,   347,   372,   358,   153,
   401,  1467,    94,   382,   373,  1352,   816,  1447,   508,  1447,
   641,   261,  1448,   262,  1448,   642,   377,   378,   379,   380,
   157,   214,   316,   317,   922,   923,   160,   817,  1087,   818,
   379,   380,  1528,   819,   152,   577,   398,   399,    95,   402,
  1532,   404,  1535,   203,   407,   408,   508,   157,   648,   772,
   126,   127,   128,  1111,  1112,   129,  1143,    96,  1748,   760,
  1752,  1081,   786,  1144,   131,   132,   133,   134,   131,   132,
   133,   134,  1754,   220,   379,   380,   190,   158,   392,   193,
   208,   205,   260,   603,   767,   215,   151,  1430,   161,   138,
   139,    97,   452,   499,   500,   501,  1841,   456,   457,   458,
   459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
   479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
   489,   490,   491,   492,   493,   494,   495,   496,   497,   217,
   610,   182,   184,  1468,   379,   380,   750,  1472,   149,   507,
  1843,   751,  1844,   131,   132,   133,   134,   513,   518,   519,
   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
   530,   531,   532,    10,   138,   139,   153,   379,   380,   539,
  1697,   541,   759,  1701,  1529,  1704,   309,   507,  1529,  1224,
   154,  1529,   379,   380,   968,   552,   553,   554,   555,   170,
   557,   558,   559,   560,   561,   562,   563,   155,   565,   566,
   214,   159,  1277,   379,   380,   186,   138,   139,   187,   188,
   578,   579,   580,   581,   870,   160,   379,   380,   591,   508,
  1365,   162,   595,   131,   132,   133,   134,   599,   163,   126,
   127,   128,   508,  1367,   129,   164,   607,   572,   572,   175,
   575,   575,   379,   380,   138,   139,   379,   380,   379,   380,
   379,   380,   138,   139,   379,   380,   913,   177,   256,  1369,
   257,   185,   374,  1525,   376,  1531,  1164,  1534,   165,  1795,
   383,   166,  1529,  1799,   176,  1801,  1529,   191,  1529,   331,
   332,   333,   334,   335,   263,   647,   264,   194,   944,   336,
   213,   762,  1607,  1608,  1609,  1610,   956,   171,   195,  1614,
   172,   173,   265,   174,   266,    11,    12,    13,    14,    15,
    16,    17,    18,    45,    46,    47,    48,   198,    50,   138,
   139,   976,   977,   978,   979,   503,    56,   257,   934,   755,
  1120,  1121,   309,   757,   993,   138,   139,   267,   763,   268,
   199,   544,   761,   257,   454,   138,   139,   957,   200,   333,
   334,   335,   269,   870,   270,   201,   321,   336,   138,   139,
   507,   773,  1077,  1447,   785,   209,   257,   757,  1448,  1374,
   755,   784,   252,   507,  1211,   788,   789,   322,   323,   324,
   325,   326,   795,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   210,   211,   807,   808,   212,   336,  1020,  1021,
  1022,  1023,  1024,   811,     6,     7,  1278,     8,   303,  1710,
  1711,   167,   168,  1714,   169,   820,   271,   273,   272,   274,
   275,   277,   276,   278,   255,   279,   872,   280,   831,   304,
   833,   834,   281,   283,   282,   284,   508,  1432,   748,   285,
   749,   286,   919,   287,   289,   288,   290,   291,   305,   292,
   517,   293,  1104,   294,   295,   757,   296,   758,   306,  1080,
  1082,   318,   320,   343,   570,   571,   337,   297,   508,   298,
   299,   338,   300,   322,   323,   324,   325,   326,   871,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   301,   757,
   302,   787,   757,   336,   948,  1089,   757,  1090,  1103,   359,
   345,   508,   508,   508,   508,   757,   360,  1134,  1805,   322,
   323,   324,   325,   326,   361,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   757,   757,  1135,  1136,   757,   336,
  1137,   994,   914,   322,   323,   324,   325,   326,   362,   327,
   328,   329,   330,   331,   332,   333,   334,   335,  1211,  1213,
  1212,  1214,   927,   336,   903,   904,   757,  1211,  1231,  1375,
   364,  1211,  1750,  1514,  1751,  1763,   366,  1764,   905,   906,
   907,   908,   909,   910,   911,   365,  1765,   507,  1766,   950,
   915,   367,  1767,   918,  1768,  1790,   924,  1791,  1871,  1963,
  1872,  1964,  1965,   371,  1966,  1254,   933,  1880,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   384,  1967,   507,
  1968,   755,   336,  2094,  2096,  2095,  2097,  2098,  2205,  2099,
  2206,   368,  2207,   980,  2208,   369,  1033,   322,   323,   324,
   325,   326,   508,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   507,   507,   507,   507,   370,   336,   982,   983,
   549,   385,   806,   987,   386,  2209,   397,  2210,  1935,  2211,
  2213,  2212,  2214,   403,   998,   999,    98,   307,  2215,  2292,
  2216,  2293,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   387,  2294,  1086,  2295,
  1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,  1046,
  1047,  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,
  1057,  1058,  1059,  1060,  1061,  1062,  1346,  1066,   396,   322,
   323,   324,   325,   326,   405,   327,   328,   329,   330,   331,
   332,   333,   334,   335,  2296,  2340,  2297,  2341,   871,   336,
  2342,   406,  2343,  1083,   409,  1088,   322,   323,   324,   325,
   326,  1092,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   410,  2344,   507,  2345,  1105,   336,  1106,  2388,  2390,
  2389,  2391,  2392,   412,  2393,   414,   415,   417,   418,   130,
   419,   420,   421,   447,  1124,  1125,  1126,   422,   423,   424,
   322,   323,   324,   325,   326,   425,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   426,   427,  1147,  1148,  1149,
   336,   450,   428,   429,   430,   322,   323,   324,   325,   326,
  1439,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   449,   431,  2115,   325,   326,   336,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   432,   135,   136,   433,   936,
   336,  1217,   137,   434,   435,  1281,  1183,   140,   436,   437,
   312,   438,   143,   439,   313,   322,   323,   324,   325,   326,
   440,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   441,   442,   443,   444,   445,   336,  1356,   972,   973,   974,
   446,  1247,   453,   322,   323,   324,   325,   326,  1218,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   451,   502,
   336,   514,   505,   336,   515,  1000,   545,   516,   550,   556,
   564,   590,   598,   593,  1009,   594,  1236,  1237,  1238,  1312,
   601,   604,   611,   612,   613,   614,   615,  1246,  1248,  1249,
   616,   324,   325,   326,  1357,   327,   328,   329,   330,   331,
   332,   333,   334,   335,  1268,  1269,   617,   618,   619,   336,
   620,   621,   622,   623,   624,   625,  1280,   626,   627,  1283,
   628,   629,   630,   572,   631,   632,   575,   633,   634,  1293,
   635,   636,   637,   638,   639,  1381,  1300,  1301,  1302,   640,
   643,   752,   644,  1307,   645,   753,   754,  1311,   764,   765,
   769,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,
  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
  1332,  1333,  1334,  1335,  1336,  1337,  1338,   771,   803,  1341,
   774,   775,   776,   778,   780,   781,   790,   809,   810,   822,
   823,  1350,   825,   826,   827,   829,   830,   836,  1354,   837,
   867,   838,   839,   840,   841,   842,   843,   844,   845,   846,
   847,   848,   849,   322,   323,   324,   325,   326,  1363,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   850,   851,
   852,   853,   902,   336,  1358,  1465,   854,   855,   856,    98,
   348,  1378,   857,  1379,   858,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   859,
   860,   322,   323,   324,   325,   326,   349,   327,   328,   329,
   330,   331,   332,   333,   334,   335,  1540,   900,   912,   917,
   965,   336,   861,   862,   863,   868,   864,   865,    45,    46,
    47,    48,    49,    50,   866,   869,   920,   901,   874,   925,
   926,    56,   928,   932,   975,   875,   939,   941,   876,   952,
  1226,  1436,  1227,   953,   929,   877,  1437,  1438,   878,   954,
   955,  1445,   958,  1451,   879,  1454,   880,  1457,  1458,   959,
   951,   881,   882,  1461,   883,   884,   960,   885,   886,   961,
   887,   888,  1470,  1255,   889,  1258,   890,  1261,   572,   891,
  1478,   575,   130,   892,   893,  1483,   894,   895,  1486,   896,
  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,
  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
  1508,  1509,  1510,  1511,  1512,  1513,  1606,   897,   898,   962,
  1516,   899,   963,   964,   966,   967,  1522,   981,   308,   309,
  1523,   322,   323,   324,   325,   326,   984,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   988,   990,   995,   135,
   350,   336,   996,   997,  1001,   137,  1002,  1003,  1004,  1005,
   140,  1008,  1010,  1011,  1014,   143,  1015,   351,  1016,  1017,
  1018,  1027,  1076,  1078,  1028,  1029,  1030,  1031,  1032,  1034,
  1659,  1084,  1035,   322,   323,   324,   325,   326,  1085,   327,
   328,   329,   330,   331,   332,   333,   334,   335,  1091,  1099,
  1101,  1102,  1110,   336,  1122,  1123,  1127,  1140,  1141,  1146,
  1150,  1590,  1151,  1184,  1157,  1152,  1219,  1595,  1156,  1159,
  1599,  1158,  1160,  1161,  1166,  1162,  1163,  1165,  1220,  1215,
  1168,  1167,  1169,  1709,  1222,  1228,  1229,  1233,  1234,  1174,
  1180,  1170,  1235,  1171,  1622,  1623,  1624,  1625,  1626,  1627,
  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,
  1638,  1639,  1640,  1641,  1642,  1172,  1644,  1173,  1645,   322,
   323,   324,   325,   326,  1175,   327,   328,   329,   330,   331,
   332,   333,   334,   335,  1176,  1177,  1178,  1179,  1181,   336,
  1182,  1230,  1239,  1240,  1241,  1242,  1252,  1243,  1253,  1244,
  1273,   356,   605,  1245,  1256,  1259,  1262,   363,  1264,  1265,
  1446,  1266,  1452,  1267,  1455,  1270,  1282,   770,  1285,  1286,
  1287,  1288,  1292,  1289,  1291,  1295,  1294,  1296,  1298,  1297,
  1744,   389,  1804,  1304,  1305,  1308,   394,   395,   949,  1309,
  1310,  1342,  1340,  1343,  1344,  1349,  1345,  1362,  1347,  1348,
  1359,  1353,  1717,  1719,  1721,  1722,  1723,  1724,  1725,  1726,
  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,
  1737,  1738,  1739,  1740,  1741,  1742,  1364,  1377,  1847,  1433,
  1469,  1384,   992,  1459,    98,   307,  1466,  1382,   376,  1366,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,  1368,  1370,  1376,  1387,  1385,  1386,
  1391,  1879,  1392,  1388,  1390,  1397,  1396,  1398,  1400,  1403,
  1836,  1401,  1839,  1471,  1473,  1474,  1475,  1476,  1431,  1477,
  1479,  1481,  1482,  1803,  1484,  1485,  1515,  1487,  1517,  1809,
  1521,  1811,  1526,  1813,  1527,  1815,  1816,  1817,  1818,  1819,
  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,
  1830,  1831,  1832,  1833,  1834,  1835,  1538,   322,   323,   324,
   325,   326,  1541,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   322,   323,   324,   325,   326,   336,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   130,  1581,  1542,
  1588,  1903,   336,   322,   323,   324,   325,   326,  1592,   327,
   328,   329,   330,   331,   332,   333,   334,   335,  1593,  1596,
  1597,  1877,  1878,   336,  1539,  1600,  1543,  1601,  1544,  1885,
  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,
  1896,  1897,  1898,  1899,  1900,  1901,  1902,   322,   323,   324,
   325,   326,  1545,   327,   328,   329,   330,   331,   332,   333,
   334,   335,  1547,  1548,   135,   136,  1550,   336,  1552,  1554,
   137,  1583,  1602,  1650,  1605,   140,  1611,  1612,   782,  1613,
   143,  1931,   783,  1615,  1616,  1617,  1937,  1939,  1941,  1942,
  1943,  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,
  1953,  1954,  1955,  1956,  1957,  1958,  1959,   582,    28,    29,
   583,   584,    32,   585,    34,  1618,    35,  1646,    37,    38,
    39,  1652,    41,    42,  1653,  1655,  1657,  1658,    44,  1660,
  1694,  1695,  1696,  1662,  1698,   756,  1702,  1661,  1705,  1990,
    55,  1992,  1663,  1994,  1664,  1996,  1997,  1998,  1999,  2000,
  2001,  2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,
  2011,  2012,  2013,  1665,  1708,  1666,  1667,  1668,  1690,  1693,
  1712,  1713,    58,    59,    60,  1715,  1749,  1746,  1747,  1753,
  1755,  1758,  1756,  1757,  1759,  1760,  1761,  1762,  1792,  1794,
    70,  1793,  1797,  1798,  2037,  2038,  2039,  2040,  2041,  2042,
  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  1800,
  1802,  1807,  1808,  1810,  1812,  1814,  1837,  1840,  1842,  1845,
  1848,  1849,  1873,  1874,  1875,  1876,  1904,  1907,  1908,  2073,
  2075,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
  2086,  2087,  2088,  2089,  2090,  2091,  2092,  1909,   322,   323,
   324,   325,   326,  1910,   327,   328,   329,   330,   331,   332,
   333,   334,   335,  1911,  1912,  1932,  1933,  1961,   336,  1962,
  2116,  1987,  2118,  1989,  2120,   535,  2122,  2123,  2124,  2125,
  2126,  2127,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,
  2136,  1991,  1993,  1995,  2014,  2052,  2093,   582,    28,    29,
   583,   584,    32,   585,    34,  2053,    35,  2054,    37,    38,
    39,  2055,    41,    42,  2117,  2119,  2121,  2153,    44,  2137,
  2160,  2161,  2162,  2163,  2164,  2165,  2166,  2167,  2168,  2169,
    55,  2170,  2171,  2172,  2173,  2227,  2229,  2231,  2174,  2233,
  2235,  2237,  2271,  2305,  2272,  2185,  2187,  2189,  2191,  2193,
  2195,  2196,  2197,  2198,  2199,  2200,  2201,  2202,  2203,  2204,
  2273,  2307,    58,    59,    60,  2309,  2325,  2326,  2327,  2350,
  2352,  2354,  2379,  2380,  2381,  2395,  2397,  2399,  2401,  2402,
    70,  2226,   873,  2228,    77,  2230,    85,  2232,  1221,  2234,
     0,  2236,     0,  2238,  2239,  2240,  2241,  2242,  2243,  2244,
  2245,  2246,     0,     0,     0,   937,   938,     0,   940,     0,
   942,   943,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2256,  2257,  2258,  2259,  2260,  2261,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2274,  2275,  2276,  2277,  2278,  2279,  2281,  2283,  2285,
     0,     0,     0,     0,     0,   985,   986,     0,     0,   989,
     0,     0,  2298,  2299,  2300,  2301,  2302,  2303,  2304,   586,
  2306,     0,  2308,     0,     0,     0,  1006,  1007,     0,     0,
     0,     0,  1012,  1013,     0,     0,  2316,  2317,  2318,  1019,
     0,  1026,     0,     0,     0,     0,     0,     0,  2328,  2329,
  2330,  2332,  2334,  2336,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2346,  2347,  2348,  2349,     0,  2351,     0,
  2353,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2358,  2359,  2360,     0,     0,     0,  2364,  2365,  2366,
     0,     0,     0,  2370,  2371,  2372,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  2383,  2385,  2387,     0,     0,
     0,     0,     0,     0,  2394,     0,  2396,     0,  2398,  1098,
     0,  1100,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1107,  1108,  1109,     0,     0,     0,  1113,  1114,
  1115,  1116,  1117,  1118,  1119,     0,    98,   307,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    98,   546,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    98,   307,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,     0,     0,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
  1216,     0,     0,     0,    98,    99,   100,   791,   101,   130,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,     0,   126,   127,   128,     0,   130,
   129,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,     0,  1274,     0,  1275,   130,
  1276,     0,     0,     0,  1284,     0,   135,   136,     0,     0,
     0,     0,   137,     0,     0,     0,     0,   140,     0,     0,
   946,     0,   143,  1303,   947,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   135,   136,     0,     0,
     0,     0,   137,     0,     0,     0,     0,   140,     0,     0,
     0,     0,   143,     0,   547,     0,     0,   130,     0,     0,
     0,  1339,     0,     0,     0,     0,  1442,  1443,     0,     0,
     0,     0,   137,     0,     0,     0,     0,  1444,     0,     0,
     0,     0,   143,     0,   181,     0,     0,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,     0,
   131,   132,   133,   134,  1440,     0,  1441,     0,     0,     0,
     0,     0,     0,     0,   135,   136,     0,     0,     0,     0,
   137,   138,   139,     0,     0,   140,     0,   141,     0,   142,
   143,    98,   348,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,     0,     0,   349,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
    45,    46,    47,    48,    49,    50,     0,     0,   796,     0,
     0,     0,     0,    56,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1460,     0,     0,     0,
  1464,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,  1480,     0,     0,     0,
     0,   336,     0,   504,     0,     0,     0,     0,   568,    98,
   307,   214,     0,     0,   130,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
   126,   127,   128,    98,   307,   129,     0,     0,     0,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
     0,   135,   506,     0,     0,     0,     0,   137,     0,     0,
     0,     0,   140,     0,     0,     0,     0,   143,     0,     0,
     0,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,  1584,  1585,
  1586,   336,     0,     0,     0,     0,     0,  1591,     0,     0,
   797,     0,   130,     0,     0,    98,   546,     0,  1603,  1604,
     0,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,     0,   130,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,  1647,  1648,  1649,   336,     0,     0,
     0,     0,     0,     0,     0,     0,   805,     0,     0,   135,
   136,     0,     0,     0,     0,   137,     0,     0,     0,     0,
   140,     0,     0,     0,     0,   143,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,   135,   136,     0,   336,     0,     0,   137,
     0,     0,     0,     0,   140,   945,     0,    -7,     1,   143,
   -12,   -55,  1700,     0,     0,     0,     0,  1707,   130,     0,
     0,     0,   582,    28,    29,   583,   584,    32,   585,    34,
     0,    35,     0,    37,    38,    39,     0,    41,    42,     0,
   -55,     0,     0,    44,   -55,   -55,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,    55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,     0,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,
   -55,     0,   -55,     0,     0,   135,   136,    58,    59,    60,
     0,   137,     0,     0,     0,     0,   140,     0,     0,     0,
     0,   143,     0,     0,     0,    70,     0,     0,     0,     0,
  1796,   -55,   -55,   -55,   -55,     0,     0,     0,     0,   -55,
  1806,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
   582,    28,    29,   583,   584,    32,   585,    34,     0,    35,
     0,    37,    38,    39,     0,    41,    42,    -7,    -7,     0,
    -7,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,   592,   582,    28,    29,   583,   584,
    32,   585,    34,     0,    35,     0,    37,    38,    39,  1881,
    41,    42,     0,     0,     0,     0,    44,     0,     0,     0,
     0,     0,     0,     0,     0,    58,    59,    60,    55,     0,
     0,     0,     0,   582,    28,    29,   583,   584,    32,   585,
    34,     0,    35,    70,    37,    38,    39,     0,    41,    42,
     0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
    58,    59,    60,     0,     0,     0,    55,     0,  1934,     0,
     0,     0,     0,   322,   323,   324,   325,   326,    70,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,     0,     0,     0,    58,    59,
    60,     0,   971,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    70,     0,     0,     0,
     0,  1988,   222,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   608,   649,   650,   651,   652,   653,   654,   655,
   656,   657,   658,   659,   660,   661,   662,   663,   664,   665,
   666,   667,   668,   669,   670,   671,   672,   673,   674,   675,
   676,     0,     0,     0,     0,     0,     0,   609,     0,     0,
     0,     0,     0,     0,  2033,   649,   650,   651,   652,   653,
   654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
   664,   665,   666,   667,   668,   669,   670,   671,   672,   673,
   674,   675,   676,     0,     0,   832,   223,   224,   225,     0,
     0,     0,  2071,     0,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,     0,    23,     0,     0,     0,     0,
     0,     0,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     0,     0,     0,     0,    24,     0,     0,     0,    25,    26,
     0,    27,    28,    29,    30,    31,    32,    33,    34,   677,
    35,    36,    37,    38,    39,    40,    41,    42,     0,     0,
     0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
    51,    52,    53,    54,    55,     0,    56,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1036,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    57,    58,    59,    60,     0,
     0,     0,     0,    61,     0,    62,     0,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,     0,
     0,   322,   323,   324,   325,   326,  1250,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   322,   323,   324,   325,   326,
  1462,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,     0,     0,   322,
   323,   324,   325,   326,  1463,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,     0,     0,   322,   323,   324,   325,   326,  1519,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,     0,     0,   322,   323,   324,
   325,   326,  1520,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,     0,
     0,   322,   323,   324,   325,   326,  1524,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   322,   323,   324,   325,   326,
  1530,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,     0,     0,   322,
   323,   324,   325,   326,  1533,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,     0,     0,   322,   323,   324,   325,   326,  1536,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,     0,     0,   322,   323,   324,
   325,   326,  1537,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,     0,
     0,   322,   323,   324,   325,   326,  1587,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   322,   323,   324,   325,   326,
  1651,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,     0,     0,   322,
   323,   324,   325,   326,  1654,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,     0,     0,   322,   323,   324,   325,   326,  1656,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,     0,     0,   322,   323,   324,
   325,   326,  1692,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,     0,
     0,   322,   323,   324,   325,   326,  1906,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   322,   323,   324,   325,   326,
  1960,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,   568,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,   569,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,   602,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,   728,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
   729,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,   742,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,   743,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,   744,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,   745,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
   746,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,   747,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,   812,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,   813,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,   814,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
   935,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,   969,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,   970,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,   991,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1138,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1139,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1153,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1154,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1185,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1186,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1187,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1188,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1189,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1190,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1191,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1192,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1193,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1194,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1195,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1196,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1197,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1198,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1199,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1200,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1201,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1202,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1203,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1204,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1205,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1206,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1207,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1208,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1209,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1210,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1225,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1232,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1355,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1360,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1361,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1371,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1372,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1380,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1383,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1394,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1399,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1402,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1404,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1405,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1406,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1407,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1408,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1409,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1410,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1411,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1412,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1413,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1414,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1415,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1416,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1417,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1418,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1419,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1420,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1421,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1422,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1423,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1424,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1425,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1426,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1427,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1428,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1429,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1434,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1435,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1546,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1558,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1559,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1560,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1561,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1562,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1563,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1564,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1565,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1566,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1567,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1568,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1569,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1570,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1571,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1572,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1573,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1574,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1575,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1576,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1577,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1578,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1580,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1582,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1669,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1670,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1671,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1672,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1673,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1674,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1675,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1676,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1677,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1678,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1679,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1680,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1681,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1682,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1683,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1684,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1685,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1686,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1687,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1688,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1689,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1769,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1770,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1771,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1772,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1773,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1774,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1775,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1776,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1777,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1778,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1779,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1780,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1781,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1782,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1783,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1784,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1785,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1786,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1787,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1788,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1789,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1846,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1853,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1854,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1855,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1856,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1857,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1858,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1859,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1860,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1861,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1862,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1863,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1864,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1865,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1866,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1867,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1868,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1869,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1870,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1905,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1913,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1914,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1915,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1916,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1917,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1918,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1919,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1920,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1921,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1922,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1923,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1924,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1925,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1926,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1927,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1928,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1929,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1930,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1969,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1970,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1971,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1972,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1973,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1974,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1975,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1976,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1977,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1978,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1979,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1980,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1981,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  1982,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  1983,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  1984,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  1985,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  1986,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2018,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2019,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2020,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2021,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2022,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2023,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2024,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2025,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2026,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2027,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2028,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2029,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2030,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2031,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2032,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2056,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2057,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2058,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2059,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2060,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2061,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2062,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2063,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2064,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2065,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2066,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2067,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2068,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2069,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2070,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2100,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2101,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2102,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2103,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2104,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2105,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2106,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2107,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2108,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2109,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2110,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2111,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2112,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2113,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2114,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2144,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2145,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2146,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2147,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2148,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2149,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2150,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2151,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2152,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2175,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2176,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2177,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2178,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2179,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2180,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2181,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2182,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2183,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2217,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2218,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2219,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2220,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2221,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2222,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2223,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2224,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2225,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2247,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2248,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2249,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2250,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2251,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2252,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2265,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2266,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2267,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2268,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2269,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2270,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2286,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2287,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2288,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2289,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2290,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2291,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2310,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2311,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2312,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2322,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2323,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2324,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2337,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2338,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2339,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2355,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2356,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2357,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2361,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   322,   323,   324,   325,   326,  2362,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   322,   323,   324,   325,   326,
  2363,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   322,   323,   324,
   325,   326,  2367,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   322,
   323,   324,   325,   326,  2368,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   322,   323,   324,   325,   326,  2369,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   510,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   646,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   707,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   709,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   711,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   713,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   715,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   717,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   719,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   721,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   723,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   725,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   727,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   731,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   733,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   735,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   737,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   739,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   741,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   815,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   821,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
   824,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,   916,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
  1068,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,  1070,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
  1072,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,  1074,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,     0,     0,
  1075,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,     0,     0,  1223,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,   504,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   536,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,   537,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   538,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
   540,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   542,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,   543,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   551,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,   596,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   597,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,   600,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   606,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,   706,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   708,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
   710,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   712,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,   714,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   716,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,   718,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   720,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,   722,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   724,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,   726,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   730,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
   732,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   734,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,   736,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   738,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,   740,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   777,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,   779,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   792,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,   793,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,   794,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
   798,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,   799,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,   800,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,   801,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,   802,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,   804,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,   828,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,   835,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,  1067,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,  1069,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
  1071,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,  1073,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,  1079,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,  1142,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,  1251,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,  1279,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,  1389,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,  1393,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,  1395,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,  1518,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
  1549,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,  1551,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,  1553,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,  1555,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,  1556,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,  1557,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,  1579,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,  1691,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,  1850,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,  1851,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
  1852,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,  2015,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,  2016,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,  2017,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,  2138,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,  2139,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,  2140,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,  2141,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,  2142,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336,     0,  2143,   322,   323,
   324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
   333,   334,   335,     0,     0,     0,     0,     0,   336,     0,
  2253,   322,   323,   324,   325,   326,     0,   327,   328,   329,
   330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     0,   336,     0,  2254,   322,   323,   324,   325,   326,     0,
   327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     0,     0,     0,     0,   336,     0,  2255,   322,   323,   324,
   325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
   334,   335,     0,     0,     0,     0,     0,   336,     0,  2313,
   322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
   336,     0,  2314,   322,   323,   324,   325,   326,     0,   327,
   328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     0,     0,     0,   336,     0,  2315,   322,   323,   324,   325,
   326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
   335,     0,     0,     0,     0,     0,   336,     0,  2373,   322,
   323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
   332,   333,   334,   335,     0,     0,     0,     0,     0,   336,
     0,  2374,   322,   323,   324,   325,   326,     0,   327,   328,
   329,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     0,     0,   336,     0,  2375,   322,   323,   324,   325,   326,
     0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     0,     0,     0,     0,     0,   336
};

static const short yycheck[] = {    23,
   382,    71,    72,    96,   315,    23,   351,   767,   190,     4,
     4,   193,     4,     4,     4,     4,     4,     4,     6,     5,
     4,     6,     3,    44,    68,   174,    68,     6,  1270,    69,
  1143,  1144,     7,   215,    74,   217,     7,    69,  1368,    69,
  1370,     6,    74,     6,    74,   109,   193,   194,    34,    35,
    36,    68,     6,    39,     4,    69,     4,    69,    40,  1160,
    74,    43,    74,   210,     4,     5,   193,   194,  1169,    69,
   193,   194,     7,     5,    74,  1176,  1449,   204,   193,   194,
  1453,     6,     7,  1456,   211,   221,    51,   210,    51,   212,
   205,   193,   194,    69,    34,    35,    36,     6,    74,    39,
   200,   201,    34,    35,    36,   193,   194,    39,   210,     6,
   212,   135,   136,   137,   193,   194,   140,   141,   205,     6,
   144,     7,   210,   210,   212,   193,   194,   151,     6,   153,
   154,   155,   211,   157,     6,   159,   160,   204,   162,   204,
   204,  1383,     6,   211,   211,     6,   211,    69,   313,    69,
   205,   204,    74,   206,    74,   210,   180,   181,   193,   194,
   204,     5,   112,   113,   112,   113,   204,   211,   928,   211,
   193,   194,   212,   211,     6,   210,   200,   201,   204,   203,
   212,   205,   212,   204,   208,   209,   351,   204,   211,   534,
    34,    35,    36,    58,    59,    39,   204,   204,   212,   510,
   212,     7,   547,   211,   179,   180,   181,   182,   179,   180,
   181,   182,   212,   194,   193,   194,   211,    68,   206,   211,
   204,   211,   211,   405,   211,   211,   211,  1340,    48,   200,
   201,   204,   256,   303,   304,   305,   212,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   211,
   416,    46,    47,  1384,   193,   194,   205,  1388,   204,   313,
   212,   210,   212,   179,   180,   181,   182,   315,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,     3,   200,   201,   204,   193,   194,   343,
  1650,   345,   208,  1653,  1697,  1655,   350,   351,  1701,  1089,
   204,  1704,   193,   194,   210,   359,   360,   361,   362,    46,
   364,   365,   366,   367,   368,   369,   370,   204,   372,   373,
     5,   204,     8,   193,   194,    40,   200,   201,    43,    44,
   384,   385,   386,   387,   208,   204,   193,   194,   392,   534,
   210,   204,   396,   179,   180,   181,   182,   401,    44,    34,
    35,    36,   547,   210,    39,    44,   410,   381,   382,   204,
   381,   382,   193,   194,   200,   201,   193,   194,   193,   194,
   193,   194,   200,   201,   193,   194,   751,   211,   206,   210,
   208,   211,   177,   210,   179,   210,   205,   210,    44,  1749,
   185,    44,  1795,  1753,    44,  1755,  1799,    44,  1801,   193,
   194,   195,   196,   197,   204,   453,   206,     6,   783,   203,
    44,   511,  1543,  1544,  1545,  1546,     6,    40,     6,  1550,
    43,    44,   204,    46,   206,   145,   146,   147,   148,   149,
   150,   151,   152,    62,    63,    64,    65,     4,    67,   200,
   201,   816,   817,   818,   819,   206,    75,   208,   205,   503,
     6,     7,   506,   210,     8,   200,   201,   204,   512,   206,
     4,   206,   510,   208,   259,   200,   201,    57,   204,   195,
   196,   197,   204,   208,   206,   204,     6,   203,   200,   201,
   534,   535,   205,    69,   206,   204,   208,   210,    74,   205,
   544,   545,   204,   547,   210,   549,   550,   183,   184,   185,
   186,   187,   556,   189,   190,   191,   192,   193,   194,   195,
   196,   197,     6,     4,   568,   569,     4,   203,   130,   131,
   132,   133,   134,   577,   170,   171,   212,   173,   204,  1660,
  1661,    43,    44,  1664,    46,   589,   204,   204,   206,   206,
   204,   204,   206,   206,     5,   204,   646,   206,   602,   204,
   604,   605,   204,   204,   206,   206,   751,  1347,   206,   204,
   208,   206,   757,   204,   204,   206,   206,   204,   204,   206,
     6,   204,   947,   206,   204,   210,   206,   212,   204,   920,
   921,     4,     6,   204,   379,   380,     6,   204,   783,   206,
   204,     5,   206,   183,   184,   185,   186,   187,   646,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   204,   210,
   206,   212,   210,   203,   212,   210,   210,   212,   212,   211,
   204,   816,   817,   818,   819,   210,   204,   212,  1759,   183,
   184,   185,   186,   187,   204,   189,   190,   191,   192,   193,
   194,   195,   196,   197,   210,   210,   212,   212,   210,   203,
   212,   205,   752,   183,   184,   185,   186,   187,   204,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   210,   210,
   212,   212,     6,   203,   728,   729,   210,   210,   212,   212,
   211,   210,   210,   212,   212,   210,   204,   212,   742,   743,
   744,   745,   746,   747,   748,   211,   210,   751,   212,     6,
   754,   204,   210,   757,   212,   210,   760,   212,   210,   210,
   212,   212,   210,     4,   212,  1127,   770,  1848,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   211,   210,   783,
   212,   785,   203,   210,   210,   212,   212,   210,   210,   212,
   212,   204,   210,     6,   212,   204,   869,   183,   184,   185,
   186,   187,   947,   189,   190,   191,   192,   193,   194,   195,
   196,   197,   816,   817,   818,   819,   204,   203,   822,   823,
     8,   211,   567,   827,   211,   210,     6,   212,  1909,   210,
   210,   212,   212,   208,   838,   839,     3,     4,   210,   210,
   212,   212,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   206,   210,     6,   212,
   874,   875,   876,   877,   878,   879,   880,   881,   882,   883,
   884,   885,   886,   887,   888,   889,   890,   891,   892,   893,
   894,   895,   896,   897,   898,   899,     6,   901,   206,   183,
   184,   185,   186,   187,   211,   189,   190,   191,   192,   193,
   194,   195,   196,   197,   210,   210,   212,   212,   916,   203,
   210,   115,   212,   921,     6,   929,   183,   184,   185,   186,
   187,   935,   189,   190,   191,   192,   193,   194,   195,   196,
   197,   204,   210,   947,   212,   949,   203,   951,   210,   210,
   212,   212,   210,     6,   212,     6,     3,   204,   204,   126,
   204,   204,   204,     5,   968,   969,   970,   204,   204,   204,
   183,   184,   185,   186,   187,   204,   189,   190,   191,   192,
   193,   194,   195,   196,   197,   204,   204,   991,   992,   993,
   203,   205,   204,   204,   204,   183,   184,   185,   186,   187,
  1362,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   210,   204,  2093,   186,   187,   203,   189,   190,   191,   192,
   193,   194,   195,   196,   197,   204,   193,   194,   204,   774,
   203,  1081,   199,   204,   204,  1151,  1034,   204,   204,   204,
   207,   204,   209,   204,   211,   183,   184,   185,   186,   187,
   204,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   204,   204,   204,   204,   204,   203,     6,   812,   813,   814,
   204,  1121,     4,   183,   184,   185,   186,   187,  1082,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   210,     5,
   203,   208,     7,   203,     7,   840,   211,   206,     7,     7,
   205,     6,   110,     7,   849,     7,  1110,  1111,  1112,  1182,
   112,   211,     5,     5,     5,     5,     5,  1121,  1122,  1123,
     5,   185,   186,   187,     6,   189,   190,   191,   192,   193,
   194,   195,   196,   197,  1138,  1139,     5,     5,     5,   203,
     5,     5,     5,     5,     5,     5,  1150,     5,     5,  1153,
     5,     5,     5,  1127,     5,     5,  1127,     5,   163,  1163,
     5,     5,     5,     5,     3,  1281,  1170,  1171,  1172,     5,
     5,   210,     6,  1177,     5,   205,   210,  1181,     6,     4,
   207,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
  1204,  1205,  1206,  1207,  1208,  1209,  1210,     6,   208,  1213,
     7,     7,     7,     7,     7,     7,     7,   212,   212,   211,
   211,  1225,     7,     7,   204,     7,   208,   175,  1232,   210,
     5,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   183,   184,   185,   186,   187,  1252,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   210,   210,
   210,   210,     6,   203,     6,  1381,   210,   210,   210,     3,
     4,  1275,   210,  1277,   210,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   210,
   210,   183,   184,   185,   186,   187,    40,   189,   190,   191,
   192,   193,   194,   195,   196,   197,     6,   211,     4,     6,
     4,   203,   210,   210,   210,   205,   210,   210,    62,    63,
    64,    65,    66,    67,   210,   210,   207,   211,   204,     6,
     6,    75,     7,     6,     6,   204,     7,     7,   204,     7,
  1095,  1355,  1097,     7,   206,   204,  1360,  1361,   204,     7,
     7,  1365,     7,  1367,   204,  1369,   204,  1371,  1372,     7,
   211,   204,   204,  1377,   204,   204,     7,   204,   204,     7,
   204,   204,  1386,  1128,   204,  1130,   204,  1132,  1362,   204,
  1394,  1362,   126,   204,   204,  1399,   204,   204,  1402,   204,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,
  1424,  1425,  1426,  1427,  1428,  1429,  1542,   204,   204,     7,
  1434,   204,     7,     7,     7,     7,  1440,     6,  1442,  1443,
  1444,   183,   184,   185,   186,   187,     6,   189,   190,   191,
   192,   193,   194,   195,   196,   197,     7,     4,     7,   193,
   194,   203,   176,     3,     3,   199,     3,   195,     3,     3,
   204,     3,     3,     3,     3,   209,     3,   211,     3,     3,
     3,     3,   205,   205,     5,     5,     3,     3,     6,     4,
  1606,   208,     6,   183,   184,   185,   186,   187,     7,   189,
   190,   191,   192,   193,   194,   195,   196,   197,     6,     6,
     6,     6,   204,   203,   211,   211,   211,     6,     6,   111,
   211,  1525,   172,     6,   205,   210,     6,  1531,   210,   205,
  1534,   210,   210,   205,   205,   210,   210,   210,     4,   208,
   210,   205,   210,  1659,     6,     6,     6,     6,     6,   205,
   205,   210,     6,   210,  1558,  1559,  1560,  1561,  1562,  1563,
  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
  1574,  1575,  1576,  1577,  1578,   210,  1580,   210,  1582,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,   210,   210,   210,   210,   210,   203,
   210,   207,     6,     6,     6,     6,   210,     6,   212,     6,
   111,   161,     8,     6,     6,     6,     6,   167,     6,     6,
  1365,     6,  1367,     6,  1369,     7,     3,     8,     6,     3,
     6,   195,     3,     6,     6,     3,     6,     6,     3,     6,
  1690,   191,  1758,     6,     3,     3,   196,   197,     8,     3,
     6,     6,   211,     4,     6,   208,     6,   211,     7,     6,
     6,   207,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
  1684,  1685,  1686,  1687,  1688,  1689,   212,   108,  1804,   113,
     3,   210,     8,   111,     3,     4,     6,   205,  1443,   211,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   211,   211,   211,   205,   210,   210,
   205,  1847,   205,   210,   210,   205,   210,   205,   210,   210,
  1790,   205,  1792,     6,     6,     3,     6,     6,   205,     6,
     6,     6,     6,  1757,     3,     6,     6,     5,     5,  1763,
   212,  1765,     6,  1767,   211,  1769,  1770,  1771,  1772,  1773,
  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
  1784,  1785,  1786,  1787,  1788,  1789,   211,   183,   184,   185,
   186,   187,   212,   189,   190,   191,   192,   193,   194,   195,
   196,   197,   183,   184,   185,   186,   187,   203,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   126,     6,   172,
     6,  1871,   203,   183,   184,   185,   186,   187,     6,   189,
   190,   191,   192,   193,   194,   195,   196,   197,     6,     6,
     6,  1845,  1846,   203,   210,     6,   210,     6,   210,  1853,
  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
  1864,  1865,  1866,  1867,  1868,  1869,  1870,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,   205,   205,   193,   194,   210,   203,   205,   210,
   199,   210,     6,   211,     6,   204,     6,     6,   207,     6,
   209,  1905,   211,     6,     6,     6,  1910,  1911,  1912,  1913,
  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
  1924,  1925,  1926,  1927,  1928,  1929,  1930,    40,    41,    42,
    43,    44,    45,    46,    47,     5,    49,     5,    51,    52,
    53,   210,    55,    56,   211,   211,   210,   212,    61,   210,
     6,     6,     6,   205,     6,   505,     6,   210,     6,  1963,
    73,  1965,   205,  1967,   210,  1969,  1970,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,   210,   108,   211,   211,   211,   211,   210,
     6,     6,   105,   106,   107,     5,   211,     6,     5,   211,
   211,   172,   212,   211,   210,   210,   205,   205,   211,     6,
   123,   212,     6,     6,  2018,  2019,  2020,  2021,  2022,  2023,
  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,     6,
   108,     6,     6,     6,     6,     6,     6,     6,   212,   211,
   210,   210,     6,     6,     6,     6,     6,   177,   210,  2053,
  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,  2070,   210,   183,   184,
   185,   186,   187,   211,   189,   190,   191,   192,   193,   194,
   195,   196,   197,   211,   211,     6,   178,   210,   203,   205,
  2094,     6,  2096,     6,  2098,   210,  2100,  2101,  2102,  2103,
  2104,  2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,
  2114,     6,     6,     6,   210,   210,   210,    40,    41,    42,
    43,    44,    45,    46,    47,   211,    49,   211,    51,    52,
    53,   211,    55,    56,     6,     6,     6,     6,    61,   205,
  2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,   211,
    73,   211,   211,   211,   211,     6,     6,     6,   211,     6,
     6,     6,   211,     6,   211,  2169,  2170,  2171,  2172,  2173,
  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,
   211,     6,   105,   106,   107,     6,   211,   211,   211,     6,
     6,     6,   211,   211,   211,     6,     6,     6,     0,     0,
   123,  2205,   648,  2207,     4,  2209,     4,  2211,  1085,  2213,
    -1,  2215,    -1,  2217,  2218,  2219,  2220,  2221,  2222,  2223,
  2224,  2225,    -1,    -1,    -1,   775,   776,    -1,   778,    -1,
   780,   781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2247,  2248,  2249,  2250,  2251,  2252,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2265,  2266,  2267,  2268,  2269,  2270,  2271,  2272,  2273,
    -1,    -1,    -1,    -1,    -1,   825,   826,    -1,    -1,   829,
    -1,    -1,  2286,  2287,  2288,  2289,  2290,  2291,  2292,   212,
  2294,    -1,  2296,    -1,    -1,    -1,   846,   847,    -1,    -1,
    -1,    -1,   852,   853,    -1,    -1,  2310,  2311,  2312,   859,
    -1,   861,    -1,    -1,    -1,    -1,    -1,    -1,  2322,  2323,
  2324,  2325,  2326,  2327,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2337,  2338,  2339,  2340,    -1,  2342,    -1,
  2344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2355,  2356,  2357,    -1,    -1,    -1,  2361,  2362,  2363,
    -1,    -1,    -1,  2367,  2368,  2369,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2379,  2380,  2381,    -1,    -1,
    -1,    -1,    -1,    -1,  2388,    -1,  2390,    -1,  2392,   939,
    -1,   941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   952,   953,   954,    -1,    -1,    -1,   958,   959,
   960,   961,   962,   963,   964,    -1,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    -1,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
  1080,    -1,    -1,    -1,     3,     4,     5,   212,     7,   126,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    34,    35,    36,    -1,   126,
    39,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,    -1,  1146,    -1,   210,   126,
   212,    -1,    -1,    -1,  1154,    -1,   193,   194,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,
   207,    -1,   209,  1173,   211,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   193,   194,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,
    -1,    -1,   209,    -1,   211,    -1,    -1,   126,    -1,    -1,
    -1,  1211,    -1,    -1,    -1,    -1,   193,   194,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,
    -1,    -1,   209,    -1,   211,    -1,    -1,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,
   179,   180,   181,   182,   210,    -1,   212,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   193,   194,    -1,    -1,    -1,    -1,
   199,   200,   201,    -1,    -1,   204,    -1,   206,    -1,   208,
   209,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    62,    63,    64,    65,    66,    67,    -1,    -1,   212,    -1,
    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1376,    -1,    -1,    -1,
  1380,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,  1396,    -1,    -1,    -1,
    -1,   203,    -1,   205,    -1,    -1,    -1,    -1,   210,     3,
     4,     5,    -1,    -1,   126,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    34,    35,    36,     3,     4,    39,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   193,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
    -1,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,    -1,
    -1,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,  1518,  1519,
  1520,   203,    -1,    -1,    -1,    -1,    -1,  1527,    -1,    -1,
   212,    -1,   126,    -1,    -1,     3,     4,    -1,  1538,  1539,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,   126,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,  1584,  1585,  1586,   203,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,   193,
   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
   204,    -1,    -1,    -1,    -1,   209,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,   193,   194,    -1,   203,    -1,    -1,   199,
    -1,    -1,    -1,    -1,   204,   212,    -1,     0,     1,   209,
     3,     4,  1652,    -1,    -1,    -1,    -1,  1657,   126,    -1,
    -1,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
    -1,    49,    -1,    51,    52,    53,    -1,    55,    56,    -1,
    33,    -1,    -1,    61,    37,    38,    -1,    40,    41,    42,
    43,    44,    45,    46,    47,    73,    49,    50,    51,    52,
    53,    54,    55,    56,    -1,    -1,    -1,    60,    61,    62,
    63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
    73,    -1,    75,    -1,    -1,   193,   194,   105,   106,   107,
    -1,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
    -1,   209,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
  1750,   104,   105,   106,   107,    -1,    -1,    -1,    -1,   112,
  1760,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
    40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
    -1,    51,    52,    53,    -1,    55,    56,   170,   171,    -1,
   173,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    73,   212,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    49,    -1,    51,    52,    53,  1849,
    55,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   105,   106,   107,    73,    -1,
    -1,    -1,    -1,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    49,   123,    51,    52,    53,    -1,    55,    56,
    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
   105,   106,   107,    -1,    -1,    -1,    73,    -1,  1908,    -1,
    -1,    -1,    -1,   183,   184,   185,   186,   187,   123,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   105,   106,
   107,    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
    -1,  1961,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   212,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,
    -1,    -1,    -1,    -1,  2014,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    -1,    -1,   212,   127,   128,   129,    -1,
    -1,    -1,  2052,    -1,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,    -1,     4,    -1,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    37,    38,
    -1,    40,    41,    42,    43,    44,    45,    46,    47,   212,
    49,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
    -1,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
    69,    70,    71,    72,    73,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,    -1,
    -1,    -1,    -1,   112,    -1,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,
    -1,   183,   184,   185,   186,   187,   212,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   212,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,   183,
   184,   185,   186,   187,   212,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,    -1,    -1,   183,   184,   185,   186,   187,   212,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,   183,   184,   185,
   186,   187,   212,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,
    -1,   183,   184,   185,   186,   187,   212,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   212,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,   183,
   184,   185,   186,   187,   212,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,    -1,    -1,   183,   184,   185,   186,   187,   212,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,   183,   184,   185,
   186,   187,   212,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,
    -1,   183,   184,   185,   186,   187,   212,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   212,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,   183,
   184,   185,   186,   187,   212,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,    -1,    -1,   183,   184,   185,   186,   187,   212,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,   183,   184,   185,
   186,   187,   212,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,
    -1,   183,   184,   185,   186,   187,   212,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   212,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   183,   184,   185,   186,   187,   210,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   183,   184,   185,   186,   187,
   210,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,   184,   185,
   186,   187,   210,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   183,
   184,   185,   186,   187,   210,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   183,   184,   185,   186,   187,   210,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,
   207,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,   207,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,
   185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,
   205,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,
    -1,   203,    -1,   205,   183,   184,   185,   186,   187,    -1,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
    -1,    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,
   186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
   196,   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,
   183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
   193,   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,
   203,    -1,   205,   183,   184,   185,   186,   187,    -1,   189,
   190,   191,   192,   193,   194,   195,   196,   197,    -1,    -1,
    -1,    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,
   187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
   197,    -1,    -1,    -1,    -1,    -1,   203,    -1,   205,   183,
   184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
   194,   195,   196,   197,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,   183,   184,   185,   186,   187,    -1,   189,   190,
   191,   192,   193,   194,   195,   196,   197,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,   183,   184,   185,   186,   187,
    -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
    -1,    -1,    -1,    -1,    -1,   203
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 164 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 170 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 171 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 181 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 194 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 200 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 219 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 226 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 231 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 242 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 249 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 255 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 261 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 268 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 274 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 278 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 282 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 289 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 293 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 298 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 302 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 306 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 310 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 314 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 318 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 322 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 326 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 338 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 342 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 346 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 350 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 354 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 373 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 395 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 396 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 400 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 409 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 414 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 432 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 449 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 487 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 489 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 494 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 499 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 506 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 508 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 513 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 519 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 527 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 529 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 534 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 540 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 548 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 550 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 556 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 563 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 571 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 573 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 579 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 586 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 594 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 596 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 602 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 609 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 617 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 619 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 626 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 636 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 644 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 646 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 653 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 663 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 671 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 673 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 680 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 690 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 698 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 700 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 708 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 718 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 728 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 736 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 746 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 754 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 756 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 764 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 774 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 782 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 784 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 792 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 802 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 810 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 812 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 820 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 830 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 838 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 840 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 848 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 858 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 868 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 880 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 896 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 904 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 906 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 918 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 934 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 942 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 944 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 956 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 972 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 980 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 982 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 992 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1005 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1013 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1015 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1025 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1038 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1046 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1048 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1058 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1071 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1079 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1081 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1090 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1103 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1111 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1113 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1122 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1135 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1143 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1145 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1154 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1167 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1175 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1180 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1188 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1195 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1202 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1207 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1215 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1222 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1230 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1237 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1239 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1244 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1251 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1252 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1253 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1254 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1255 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1259 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1260 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1268 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1299 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1338 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1392 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1409 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1420 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1439 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1453 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1470 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1496 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1523 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1537 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1554 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1568 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1585 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1605 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1628 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1638 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1657 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1673 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1689 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1708 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1727 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1745 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1763 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1781 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1807 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1825 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1852 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1871 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1895 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1919 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1945 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1962 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1980 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1999 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2018 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2057 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2083 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2103 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2122 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2140 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2159 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2176 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2192 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2211 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2228 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2245 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 267:
#line 2266 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2271 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2276 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2281 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 271:
#line 2288 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2289 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2290 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 274:
#line 2295 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 275:
#line 2299 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 276:
#line 2303 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2319 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2335 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2351 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 280:
#line 2372 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 281:
#line 2386 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 282:
#line 2392 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 283:
#line 2404 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 284:
#line 2413 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 285:
#line 2423 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 286:
#line 2433 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 287:
#line 2452 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 288:
#line 2466 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2474 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2480 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 291:
#line 2491 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 292:
#line 2505 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 293:
#line 2549 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2564 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 295:
#line 2580 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 296:
#line 2590 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 297:
#line 2601 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 298:
#line 2605 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 299:
#line 2609 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 300:
#line 2613 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 301:
#line 2626 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 302:
#line 2641 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 303:
#line 2657 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 304:
#line 2683 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 305:
#line 2710 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 306:
#line 2742 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 307:
#line 2749 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 308:
#line 2754 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 309:
#line 2760 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 310:
#line 2764 "Gmsh.y"
{
    ;
    break;}
case 311:
#line 2775 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 312:
#line 2791 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 313:
#line 2807 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 314:
#line 2823 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 315:
#line 2828 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 316:
#line 2844 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 317:
#line 2849 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 318:
#line 2865 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 319:
#line 2870 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 320:
#line 2888 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2911 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 322:
#line 2934 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2957 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 324:
#line 2962 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 325:
#line 2985 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 326:
#line 2990 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 327:
#line 3013 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 328:
#line 3018 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 329:
#line 3044 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3067 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 331:
#line 3090 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3113 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 333:
#line 3118 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 334:
#line 3141 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 335:
#line 3147 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 336:
#line 3170 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 337:
#line 3176 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 338:
#line 3202 "Gmsh.y"
{
    ;
    break;}
case 339:
#line 3205 "Gmsh.y"
{
    ;
    break;}
case 340:
#line 3211 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 341:
#line 3237 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 342:
#line 3261 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 343:
#line 3270 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 344:
#line 3288 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 345:
#line 3306 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 346:
#line 3324 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 347:
#line 3351 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 348:
#line 3377 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 349:
#line 3403 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 350:
#line 3417 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 351:
#line 3436 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 352:
#line 3440 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 353:
#line 3449 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 354:
#line 3450 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 355:
#line 3451 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 356:
#line 3452 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 357:
#line 3453 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 358:
#line 3457 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 359:
#line 3458 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 360:
#line 3459 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 361:
#line 3460 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 362:
#line 3461 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 363:
#line 3462 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 364:
#line 3463 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 365:
#line 3464 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 366:
#line 3466 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 367:
#line 3472 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 368:
#line 3473 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 369:
#line 3474 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 370:
#line 3475 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 371:
#line 3476 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 372:
#line 3477 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 373:
#line 3478 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 374:
#line 3479 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 375:
#line 3480 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 376:
#line 3481 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 377:
#line 3482 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 378:
#line 3483 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 379:
#line 3484 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 380:
#line 3485 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 381:
#line 3486 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 382:
#line 3487 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 383:
#line 3488 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 384:
#line 3489 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 385:
#line 3490 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 386:
#line 3491 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 387:
#line 3492 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 388:
#line 3493 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 389:
#line 3494 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 3495 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3496 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 392:
#line 3497 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3498 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 394:
#line 3499 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 395:
#line 3500 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 396:
#line 3501 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 397:
#line 3502 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 398:
#line 3503 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 399:
#line 3505 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 400:
#line 3506 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 401:
#line 3507 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 402:
#line 3508 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 403:
#line 3509 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 404:
#line 3510 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 405:
#line 3511 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 406:
#line 3512 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 407:
#line 3513 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 408:
#line 3514 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 409:
#line 3515 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 410:
#line 3516 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 411:
#line 3517 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3518 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 413:
#line 3519 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3520 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 415:
#line 3521 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 416:
#line 3522 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 417:
#line 3523 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 418:
#line 3524 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 419:
#line 3525 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 420:
#line 3534 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 421:
#line 3535 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 422:
#line 3536 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 423:
#line 3537 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 424:
#line 3542 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 425:
#line 3555 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 426:
#line 3575 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 427:
#line 3589 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 428:
#line 3602 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 429:
#line 3625 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 430:
#line 3643 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 431:
#line 3661 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 432:
#line 3679 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 433:
#line 3697 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 434:
#line 3705 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 435:
#line 3709 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 436:
#line 3713 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 437:
#line 3717 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 438:
#line 3721 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 439:
#line 3728 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 440:
#line 3732 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 441:
#line 3736 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 442:
#line 3740 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 443:
#line 3747 "Gmsh.y"
{
    ;
    break;}
case 444:
#line 3750 "Gmsh.y"
{
    ;
    break;}
case 445:
#line 3756 "Gmsh.y"
{
    ;
    break;}
case 446:
#line 3759 "Gmsh.y"
{
    ;
    break;}
case 447:
#line 3765 "Gmsh.y"
{
    ;
    break;}
case 448:
#line 3768 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 449:
#line 3772 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 450:
#line 3779 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 451:
#line 3784 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 452:
#line 3792 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 453:
#line 3797 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 454:
#line 3801 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 455:
#line 3805 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 456:
#line 3817 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 457:
#line 3823 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 458:
#line 3834 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 459:
#line 3854 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 460:
#line 3864 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 461:
#line 3874 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 462:
#line 3886 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 463:
#line 3903 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 464:
#line 3922 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 465:
#line 3946 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 466:
#line 3975 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 467:
#line 3980 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 468:
#line 3984 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 469:
#line 3988 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 470:
#line 4001 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 471:
#line 4005 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 472:
#line 4017 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 473:
#line 4024 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 474:
#line 4046 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 475:
#line 4050 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 476:
#line 4065 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 477:
#line 4070 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 478:
#line 4077 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 479:
#line 4081 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 480:
#line 4089 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 481:
#line 4097 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 482:
#line 4111 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 483:
#line 4115 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 484:
#line 4134 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 485:
#line 4150 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4167 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
