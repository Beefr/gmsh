
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPoint	284
#define	tCircle	285
#define	tEllipsis	286
#define	tLine	287
#define	tSurface	288
#define	tSpline	289
#define	tVolume	290
#define	tCharacteristic	291
#define	tLength	292
#define	tParametric	293
#define	tElliptic	294
#define	tPlane	295
#define	tRuled	296
#define	tTransfinite	297
#define	tComplex	298
#define	tPhysical	299
#define	tUsing	300
#define	tPower	301
#define	tBump	302
#define	tProgression	303
#define	tAssociation	304
#define	tRotate	305
#define	tTranslate	306
#define	tSymmetry	307
#define	tDilate	308
#define	tExtrude	309
#define	tDuplicata	310
#define	tLoop	311
#define	tInclude	312
#define	tRecombine	313
#define	tDelete	314
#define	tCoherence	315
#define	tView	316
#define	tOffset	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tGeneral	339
#define	tGeometry	340
#define	tMesh	341
#define	tB_SPLINE_SURFACE_WITH_KNOTS	342
#define	tB_SPLINE_CURVE_WITH_KNOTS	343
#define	tCARTESIAN_POINT	344
#define	tTRUE	345
#define	tFALSE	346
#define	tUNSPECIFIED	347
#define	tU	348
#define	tV	349
#define	tEDGE_CURVE	350
#define	tVERTEX_POINT	351
#define	tORIENTED_EDGE	352
#define	tPLANE	353
#define	tFACE_OUTER_BOUND	354
#define	tEDGE_LOOP	355
#define	tADVANCED_FACE	356
#define	tVECTOR	357
#define	tDIRECTION	358
#define	tAXIS2_PLACEMENT_3D	359
#define	tISO	360
#define	tENDISO	361
#define	tENDSEC	362
#define	tDATA	363
#define	tHEADER	364
#define	tFILE_DESCRIPTION	365
#define	tFILE_SCHEMA	366
#define	tFILE_NAME	367
#define	tMANIFOLD_SOLID_BREP	368
#define	tCLOSED_SHELL	369
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	370
#define	tFACE_BOUND	371
#define	tCYLINDRICAL_SURFACE	372
#define	tCONICAL_SURFACE	373
#define	tCIRCLE	374
#define	tTRIMMED_CURVE	375
#define	tGEOMETRIC_SET	376
#define	tCOMPOSITE_CURVE_SEGMENT	377
#define	tCONTINUOUS	378
#define	tCOMPOSITE_CURVE	379
#define	tTOROIDAL_SURFACE	380
#define	tPRODUCT_DEFINITION	381
#define	tPRODUCT_DEFINITION_SHAPE	382
#define	tSHAPE_DEFINITION_REPRESENTATION	383
#define	tELLIPSE	384
#define	tTrimmed	385
#define	tSolid	386
#define	tEndSolid	387
#define	tVertex	388
#define	tFacet	389
#define	tNormal	390
#define	tOuter	391
#define	tLoopSTL	392
#define	tEndLoop	393
#define	tEndFacet	394
#define	UMINUS	395

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.8 2000-11-25 15:26:11 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Colors.h"
#include "Parser.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int            Force_ViewNumber = 0 ;
List_T         *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static unsigned int  *ptr ;
static int            i,j,k,flag,RecursionLevel=0;
static double         d;
static ExtrudeParams  extr;
static StringXPointer *ColorField ;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
int   Get_ColorForString(StringX4Int SX4I[], int alpha, 
			 char * string, int * FlagError);
void  Get_ColorPointerForString(StringXPointer SXP[], char * string,
				int * FlagError, unsigned int **Pointer);


#line 53 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1339
#define	YYFLAG		-32768
#define	YYNTBASE	157

#define YYTRANSLATE(x) ((unsigned)(x) <= 395 ? yytranslate[x] : 237)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   147,     2,     2,   150,
   152,   145,   143,   151,   144,     2,   146,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   141,
     2,   142,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   155,     2,   156,   149,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   153,     2,   154,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   148
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   521,   528,   537,   538,   541,   544,
   547,   550,   553,   556,   559,   562,   565,   568,   571,   574,
   576,   580,   581,   595,   597,   601,   602,   616,   618,   622,
   623,   637,   639,   643,   644,   664,   666,   670,   671,   691,
   693,   697,   698,   718,   720,   724,   725,   751,   753,   757,
   758,   784,   786,   790,   791,   817,   819,   823,   824,   856,
   858,   862,   863,   895,   897,   901,   902,   934,   939,   947,
   956,   969,   976,   982,   990,   998,  1011,  1019,  1029,  1047,
  1055,  1064,  1073,  1079,  1087,  1099,  1108,  1118,  1127,  1150,
  1171,  1180,  1189,  1195,  1204,  1212,  1221,  1229,  1241,  1249,
  1259,  1261,  1263,  1265,  1266,  1269,  1274,  1279,  1283,  1291,
  1300,  1312,  1325,  1338,  1347,  1360,  1369,  1381,  1397,  1399,
  1402,  1412,  1415,  1422,  1432,  1442,  1452,  1461,  1470,  1479,
  1486,  1491,  1494,  1499,  1500,  1503,  1504,  1510,  1511,  1517,
  1518,  1524,  1525,  1528,  1533,  1542,  1547,  1557,  1565,  1567,
  1569,  1571,  1573,  1575,  1577,  1581,  1585,  1589,  1593,  1597,
  1601,  1604,  1607,  1612,  1617,  1622,  1627,  1632,  1637,  1642,
  1647,  1652,  1657,  1664,  1669,  1674,  1679,  1684,  1689,  1694,
  1701,  1708,  1715,  1717,  1719,  1721,  1725,  1732,  1744,  1754,
  1762,  1770,  1771,  1775,  1777,  1781,  1782,  1786,  1790,  1792,
  1796,  1797,  1799,  1803,  1805,  1807,  1811
};

static const short yyrhs[] = {   159,
     0,   158,     0,   164,     0,   132,     0,   135,   136,   227,
   227,   227,   137,   138,   134,   227,   227,   227,   134,   227,
   227,   227,   134,   227,   227,   227,   139,   140,     0,   133,
     0,     0,   159,   160,     0,   161,     0,   163,     0,   162,
     0,     1,     6,     0,   106,     6,     0,   107,     6,     0,
   109,     6,     0,   108,     6,     0,   110,     6,     0,   111,
   150,   231,   151,     5,   152,     6,     0,   112,   150,   231,
   152,     6,     0,   113,   150,     5,   151,     5,   151,   231,
   151,   231,   151,     5,   151,     5,   151,     5,   152,     6,
     0,     3,     7,    90,   150,     5,   151,   230,   152,     6,
     0,     3,     7,    89,   150,     5,   151,   227,   151,   235,
   151,   226,   151,   226,   151,   226,   151,   235,   151,   235,
   151,   226,   152,     6,     0,     3,     7,    88,   150,     5,
   151,   227,   151,   227,   151,   233,   151,   226,   151,   226,
   151,   226,   151,   226,   151,   235,   151,   235,   151,   235,
   151,   235,   151,   226,   152,     6,     0,     3,     7,    96,
   150,     5,   151,     3,   151,     3,   151,     3,   151,   226,
   152,     6,     0,     3,     7,   100,   150,     5,   151,     3,
   151,   226,   152,     6,     0,     3,     7,   117,   150,     5,
   151,     3,   151,   226,   152,     6,     0,     3,     7,    98,
   150,     5,   151,   145,   151,   145,   151,   227,   151,   226,
   152,     6,     0,     3,     7,   101,   150,     5,   151,   235,
   152,     6,     0,     3,     7,   102,   150,     5,   151,   235,
   151,     3,   151,   226,   152,     6,     0,     3,     7,    97,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   103,
   150,     5,   151,     3,   151,   227,   152,     6,     0,     3,
     7,   105,   150,     5,   151,     3,   151,     3,   151,     3,
   152,     6,     0,     3,     7,   104,   150,     5,   151,   230,
   152,     6,     0,     3,     7,    99,   150,     5,   151,     3,
   152,     6,     0,     3,     7,    33,   150,     5,   151,     3,
   151,     3,   152,     6,     0,     3,     7,   115,   150,     5,
   151,   235,   152,     6,     0,     3,     7,   116,   150,     5,
   151,   235,   151,     3,   152,     6,     0,     3,     7,   114,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   118,
   150,     5,   151,     3,   151,   227,   152,     6,     0,     3,
     7,   119,   150,     5,   151,     3,   151,   227,   151,   227,
   152,     6,     0,     3,     7,   126,   150,     5,   151,     3,
   151,   227,   151,   227,   152,     6,     0,     3,     7,   120,
   150,     5,   151,     3,   151,   227,   152,     6,     0,     3,
     7,   130,   150,     5,   151,     3,   151,   227,   151,   227,
   152,     6,     0,     3,     7,   121,   150,     5,   151,     3,
   151,   235,   151,   235,   151,   226,   151,   226,   152,     6,
     0,     3,     7,   122,   150,     5,   151,   235,   152,     6,
     0,     3,     7,   123,   150,   124,   151,   226,   151,     3,
   152,     6,     0,     3,     7,   125,   150,     5,   151,   235,
   151,   226,   152,     6,     0,     3,     7,   127,   150,     5,
   151,     5,   151,     3,   151,     3,   152,     6,     0,     3,
     7,   128,   150,     5,   151,     5,   151,     3,   152,     6,
     0,     3,     7,   129,   150,     3,   151,     3,   152,     6,
     0,     0,   164,   165,     0,   166,     0,   204,     0,   205,
     0,   206,     0,   209,     0,   210,     0,   212,     0,   215,
     0,   216,     0,   211,     0,   217,     0,     1,     6,     0,
    62,     5,   153,   167,   154,     6,     0,    62,     5,    63,
   230,   153,   167,   154,     6,     0,     0,   167,   169,     0,
   167,   172,     0,   167,   175,     0,   167,   178,     0,   167,
   181,     0,   167,   184,     0,   167,   187,     0,   167,   190,
     0,   167,   193,     0,   167,   196,     0,   167,   199,     0,
   167,   202,     0,   227,     0,   168,   151,   227,     0,     0,
    75,   150,   227,   151,   227,   151,   227,   152,   170,   153,
   168,   154,     6,     0,   227,     0,   171,   151,   227,     0,
     0,    76,   150,   227,   151,   227,   151,   227,   152,   173,
   153,   171,   154,     6,     0,   227,     0,   174,   151,   227,
     0,     0,    77,   150,   227,   151,   227,   151,   227,   152,
   176,   153,   174,   154,     6,     0,   227,     0,   177,   151,
   227,     0,     0,    72,   150,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   152,   179,   153,   177,
   154,     6,     0,   227,     0,   180,   151,   227,     0,     0,
    73,   150,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   152,   182,   153,   180,   154,     6,     0,
   227,     0,   183,   151,   227,     0,     0,    74,   150,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   152,   185,   153,   183,   154,     6,     0,   227,     0,   186,
   151,   227,     0,     0,    69,   150,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   152,   188,   153,   186,   154,     6,     0,
   227,     0,   189,   151,   227,     0,     0,    70,   150,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   152,   191,   153,   189,
   154,     6,     0,   227,     0,   192,   151,   227,     0,     0,
    71,   150,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   151,   227,   152,
   194,   153,   192,   154,     6,     0,   227,     0,   195,   151,
   227,     0,     0,    66,   150,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   152,   197,
   153,   195,   154,     6,     0,   227,     0,   198,   151,   227,
     0,     0,    67,   150,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   151,   227,   151,   227,   151,   227,   152,   200,   153,
   198,   154,     6,     0,   227,     0,   201,   151,   227,     0,
     0,    68,   150,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   151,   227,   151,   227,
   151,   227,   151,   227,   151,   227,   152,   203,   153,   201,
   154,     6,     0,     4,     7,   227,     6,     0,    30,   150,
   227,   152,     7,   230,     6,     0,    45,    30,   150,   227,
   152,     7,   235,     6,     0,    64,    30,   150,   227,   151,
   227,   151,   227,   152,     7,   235,     6,     0,    37,    38,
   235,     7,   227,     6,     0,    30,   150,   227,   152,     6,
     0,    33,   150,   227,   152,     7,   235,     6,     0,    35,
   150,   227,   152,     7,   235,     6,     0,    64,    33,   150,
   227,   151,   227,   151,   227,   152,     7,   235,     6,     0,
    31,   150,   227,   152,     7,   235,     6,     0,    31,   150,
   227,   152,     7,   235,    41,   230,     6,     0,    39,   150,
   227,   152,     7,   150,   227,   151,   227,   151,     5,   151,
     5,   151,     5,   152,     6,     0,    32,   150,   227,   152,
     7,   235,     6,     0,    45,    33,   150,   227,   152,     7,
   235,     6,     0,    33,    57,   150,   227,   152,     7,   235,
     6,     0,    33,   150,   227,   152,     6,     0,    78,   150,
   227,   152,     7,   235,     6,     0,    79,   150,   227,   152,
     7,   235,    83,   235,    80,   227,     6,     0,    41,    34,
   150,   227,   152,     7,   235,     6,     0,   131,    34,   150,
   227,   152,     7,   227,   235,     6,     0,    42,    34,   150,
   227,   152,     7,   235,     6,     0,    79,    34,    81,    82,
   150,   227,   152,     7,   233,    83,   153,   235,   151,   235,
   154,    80,   153,   227,   151,   227,   154,     6,     0,    79,
    34,   150,   227,   152,     7,   233,    83,   153,   235,   151,
   235,   154,    80,   153,   227,   151,   227,   154,     6,     0,
    45,    34,   150,   227,   152,     7,   235,     6,     0,    34,
    57,   150,   227,   152,     7,   235,     6,     0,    34,   150,
   227,   152,     6,     0,    44,    36,   150,   227,   152,     7,
   235,     6,     0,    36,   150,   227,   152,     7,   235,     6,
     0,    45,    36,   150,   227,   152,     7,   235,     6,     0,
    52,   150,   230,   152,   153,   207,   154,     0,    51,   150,
   230,   151,   230,   151,   227,   152,   153,   207,   154,     0,
    53,   150,   230,   152,   153,   207,   154,     0,    54,   150,
   230,   151,   227,   152,   153,   207,   154,     0,   209,     0,
   208,     0,   206,     0,     0,   208,   205,     0,    56,   153,
   208,   154,     0,    60,   153,   208,   154,     0,    58,     5,
     6,     0,    55,   150,   227,   151,   230,   152,     6,     0,
    55,    34,   150,   227,   151,   230,   152,     6,     0,    55,
   150,   227,   151,   230,   151,   230,   151,   227,   152,     6,
     0,    55,    34,   150,   227,   151,   230,   151,   230,   151,
   227,   152,     6,     0,    55,    30,   150,   227,   151,   230,
   151,   230,   151,   227,   152,     6,     0,    55,    30,   150,
   227,   151,   230,   152,     6,     0,    55,    33,   150,   227,
   151,   230,   151,   230,   151,   227,   152,     6,     0,    55,
    33,   150,   227,   151,   230,   152,     6,     0,    55,    34,
   150,   227,   151,   230,   152,   153,   213,   154,     6,     0,
    55,    34,   150,   227,   151,   230,   151,   230,   151,   227,
   152,   153,   213,   154,     6,     0,   214,     0,   213,   214,
     0,    65,   153,   235,   151,   235,   151,   235,   154,     6,
     0,    59,     6,     0,    43,    33,   235,     7,   227,     6,
     0,    43,    33,   235,     7,   227,    46,    47,   227,     6,
     0,    43,    33,   235,     7,   227,    46,    48,   227,     6,
     0,    43,    33,   235,     7,   227,    46,    49,   227,     6,
     0,    43,    34,   153,   227,   154,     7,   235,     6,     0,
    40,    34,   153,   227,   154,     7,   235,     6,     0,    43,
    36,   153,   227,   154,     7,   235,     6,     0,    59,    34,
   235,     7,   227,     6,     0,    59,    34,   235,     6,     0,
    61,     6,     0,    84,   153,   218,   154,     0,     0,   218,
   219,     0,     0,    85,   220,   153,   223,   154,     0,     0,
    86,   221,   153,   223,   154,     0,     0,    87,   222,   153,
   223,   154,     0,     0,   224,   223,     0,     4,     7,     4,
     6,     0,     4,     7,   153,     4,   151,   227,   154,     6,
     0,     4,     7,   225,     6,     0,   153,   227,   151,   227,
   151,   227,   151,   227,   154,     0,   153,   227,   151,   227,
   151,   227,   154,     0,    91,     0,    92,     0,    93,     0,
    94,     0,    95,     0,   228,     0,   150,   227,   152,     0,
   227,   144,   227,     0,   227,   143,   227,     0,   227,   145,
   227,     0,   227,   146,   227,     0,   227,   149,   227,     0,
   144,   227,     0,   143,   227,     0,    10,   150,   227,   152,
     0,    11,   150,   227,   152,     0,    12,   150,   227,   152,
     0,    13,   150,   227,   152,     0,    14,   150,   227,   152,
     0,    15,   150,   227,   152,     0,    16,   150,   227,   152,
     0,    17,   150,   227,   152,     0,    18,   150,   227,   152,
     0,    19,   150,   227,   152,     0,    20,   150,   227,   151,
   227,   152,     0,    21,   150,   227,   152,     0,    22,   150,
   227,   152,     0,    23,   150,   227,   152,     0,    24,   150,
   227,   152,     0,    25,   150,   227,   152,     0,    26,   150,
   227,   152,     0,    27,   150,   227,   151,   227,   152,     0,
    28,   150,   227,   151,   227,   152,     0,    29,   150,   227,
   151,   227,   152,     0,     3,     0,     9,     0,     4,     0,
   227,     8,   227,     0,   227,     8,   155,   227,   156,   227,
     0,   153,   227,   151,   227,   151,   227,   151,   227,   151,
   227,   154,     0,   153,   227,   151,   227,   151,   227,   151,
   227,   154,     0,   153,   227,   151,   227,   151,   227,   154,
     0,   150,   227,   151,   227,   151,   227,   152,     0,     0,
   150,   232,   152,     0,     5,     0,   232,   151,     5,     0,
     0,   153,   234,   154,     0,   150,   234,   152,     0,   235,
     0,   234,   151,   235,     0,     0,   227,     0,   153,   236,
   154,     0,   227,     0,   229,     0,   236,   151,   227,     0,
   236,   151,   229,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   114,   116,   117,   124,   132,   146,   158,   160,   163,   165,
   166,   167,   170,   176,   181,   182,   183,   186,   190,   193,
   199,   204,   210,   218,   223,   227,   233,   238,   242,   247,
   251,   254,   259,   263,   267,   271,   276,   280,   283,   287,
   291,   295,   299,   303,   307,   310,   314,   317,   321,   324,
   333,   335,   341,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   360,   365,   371,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   390,
   393,   397,   403,   409,   412,   416,   422,   428,   431,   435,
   441,   447,   450,   454,   462,   468,   471,   475,   483,   489,
   492,   496,   504,   510,   513,   517,   529,   535,   538,   542,
   554,   560,   563,   567,   579,   585,   588,   592,   605,   611,
   614,   618,   631,   637,   640,   644,   657,   669,   683,   694,
   700,   719,   730,   738,   744,   750,   769,   775,   791,   798,
   804,   810,   816,   825,   831,   853,   859,   878,   899,   907,
   913,   919,   925,   937,   943,   949,   961,   967,   972,   977,
   984,   986,   987,   990,   995,  1006,  1024,  1039,  1070,  1075,
  1079,  1083,  1087,  1093,  1098,  1102,  1106,  1111,  1119,  1123,
  1128,  1146,  1156,  1174,  1191,  1208,  1225,  1246,  1266,  1286,
  1301,  1323,  1334,  1338,  1340,  1343,  1346,  1347,  1349,  1350,
  1352,  1355,  1357,  1360,  1371,  1381,  1391,  1399,  1475,  1477,
  1478,  1479,  1480,  1483,  1485,  1486,  1487,  1488,  1489,  1490,
  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,  1499,  1500,
  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,
  1511,  1512,  1515,  1517,  1518,  1529,  1536,  1549,  1558,  1566,
  1574,  1584,  1588,  1593,  1597,  1602,  1606,  1610,  1616,  1622,
  1628,  1632,  1638,  1651,  1657,  1666,  1670
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPoint","tCircle","tEllipsis",
"tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tPower","tBump","tProgression","tAssociation","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tOffset","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tGeneral","tGeometry",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'<'","'>'","'+'","'-'","'*'","'/'","'%'",
"UMINUS","'^'","'('","','","')'","'{'","'}'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","Colors","ColorSections","ColorSection","@13","@14","@15","ColorAffects",
"ColorAffect","RGBAExpr","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble", NULL
};
#endif

static const short yyr1[] = {     0,
   157,   157,   157,   158,   158,   158,   159,   159,   160,   160,
   160,   160,   161,   161,   161,   161,   161,   162,   162,   162,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   164,   164,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   166,   166,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   168,
   168,   170,   169,   171,   171,   173,   172,   174,   174,   176,
   175,   177,   177,   179,   178,   180,   180,   182,   181,   183,
   183,   185,   184,   186,   186,   188,   187,   189,   189,   191,
   190,   192,   192,   194,   193,   195,   195,   197,   196,   198,
   198,   200,   199,   201,   201,   203,   202,   204,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   206,   206,   206,   206,
   207,   207,   207,   208,   208,   209,   210,   211,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   213,   213,
   214,   214,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   216,   217,   218,   218,   220,   219,   221,   219,   222,
   219,   223,   223,   224,   224,   224,   225,   225,   226,   226,
   226,   226,   226,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   228,   228,   228,   229,   229,   230,   230,   230,
   230,   231,   231,   232,   232,   233,   233,   233,   234,   234,
   235,   235,   235,   236,   236,   236,   236
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     6,     8,     0,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     4,     7,     8,
    12,     6,     5,     7,     7,    12,     7,     9,    17,     7,
     8,     8,     5,     7,    11,     8,     9,     8,    22,    20,
     8,     8,     5,     8,     7,     8,     7,    11,     7,     9,
     1,     1,     1,     0,     2,     4,     4,     3,     7,     8,
    11,    12,    12,     8,    12,     8,    11,    15,     1,     2,
     9,     2,     6,     9,     9,     9,     8,     8,     8,     6,
     4,     2,     4,     0,     2,     0,     5,     0,     5,     0,
     5,     0,     2,     4,     8,     4,     9,     7,     1,     1,
     1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
     2,     2,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     4,     4,     4,     6,
     6,     6,     1,     1,     1,     3,     6,    11,     9,     7,
     7,     0,     3,     1,     3,     0,     3,     3,     1,     3,
     0,     1,     3,     1,     1,     3,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
    58,    62,    59,    60,    61,    63,   243,   245,   244,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   214,    12,     0,    13,    14,    16,    15,
    17,   252,   252,     0,    64,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   261,     0,     0,     0,     0,
   261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   164,     0,   261,   164,
   192,     0,     0,     0,     0,     0,     0,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   222,
   221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   262,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   168,     0,
     0,     0,    67,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   215,   217,   216,   218,   219,   220,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   254,     0,     0,     0,     0,   128,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   166,   165,   191,     0,   167,     0,     0,     0,     0,
     0,     0,     0,     0,   196,   198,   200,   193,   195,     0,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     0,   234,   235,   236,   237,   238,   239,     0,     0,     0,
   217,   216,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   253,     0,    19,     0,   133,     0,
   261,   261,     0,   143,   261,     0,   153,   261,   261,     0,
     0,   263,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   164,   164,
     0,     0,     0,     0,     0,     0,    67,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,     0,     0,   261,     0,     0,   261,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   261,   261,     0,     0,
     0,     0,   261,   261,     0,     0,     0,     0,     0,   261,
     0,   261,     0,     0,     0,     0,     0,   255,     0,   252,
     0,     0,     0,   261,     0,   261,     0,     0,     0,   246,
   266,   267,   132,     0,   261,   261,   261,   183,     0,   261,
   261,   261,   261,   261,   261,   261,     0,     0,     0,   163,
     0,   162,   161,     0,     0,     0,     0,     0,     0,     0,
   190,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    65,     0,     0,     0,     0,   256,
     0,   202,   202,   202,     0,   233,   240,   241,   242,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,     0,     0,    18,     0,   129,   137,     0,
   140,     0,   134,     0,   135,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   157,   159,   164,     0,     0,     0,
     0,     0,     0,     0,   169,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   144,     0,   261,   261,     0,   261,     0,     0,   202,     0,
     0,   261,     0,     0,     0,   261,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
     0,     0,     0,   252,     0,   142,   152,     0,     0,   188,
   146,   148,     0,     0,     0,   187,   189,   154,   130,   141,
   151,   156,     0,     0,     0,     0,     0,   174,     0,   176,
     0,   170,     0,     0,    66,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
     0,   259,     0,     0,     0,     0,   197,   203,   199,   201,
     0,     0,     0,     0,     0,    21,     0,    30,     0,    34,
     0,    28,     0,     0,    33,     0,    38,    36,     0,     0,
     0,     0,     0,     0,    45,     0,     0,     0,     0,     0,
    50,     0,     0,   138,   247,     0,   184,   185,   186,   251,
     0,   250,   164,   160,     0,     0,     0,     0,     0,     0,
   179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   261,   258,   257,
   261,     0,     0,     0,     0,   147,     0,     0,   256,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   182,   261,     0,   180,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   261,   261,     0,   260,     0,     0,   204,   245,
     0,   206,     0,    35,     0,     0,     0,     0,    25,     0,
    31,     0,    37,    26,    39,     0,    42,     0,    46,    47,
     0,     0,    49,     0,     0,     0,     0,   249,   158,     0,
     0,     0,     0,   177,   171,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   261,
   261,   145,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   173,
   175,   172,     0,   261,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    82,    86,    90,   131,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    29,    32,    40,
     0,    41,    48,    43,     0,     0,   248,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
     0,     0,     0,     0,    24,    27,     0,     0,     0,   178,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    80,     0,    84,     0,    88,     0,     0,     0,   208,
     0,     0,   261,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    44,    20,
   139,   181,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    81,    83,    85,    87,    89,    91,     0,     0,   207,
     0,     0,   261,     0,     0,     0,     0,     0,     0,    94,
    98,   102,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     5,   261,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   150,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    92,     0,    96,     0,   100,     0,   261,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   149,     0,    22,     0,     0,     0,     0,     0,     0,
    93,    95,    97,    99,   101,   103,   261,     0,     0,     0,
   106,   110,   114,     0,     0,     0,     0,     0,     0,     0,
   261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   104,     0,   108,     0,   112,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,   107,   109,   111,   113,   115,     0,   118,   122,
   126,    23,     0,     0,     0,     0,     0,     0,     0,   116,
     0,   120,     0,   124,     0,     0,     0,     0,     0,     0,
   117,   119,   121,   123,   125,   127,     0,     0,     0
};

static const short yydefgoto[] = {  1337,
     4,     5,    18,    19,    20,    21,     6,    55,    56,   368,
  1111,   491,  1059,  1113,   492,  1060,  1115,   493,  1061,  1221,
   494,  1194,  1223,   495,  1195,  1225,   496,  1196,  1282,   497,
  1268,  1284,   498,  1269,  1286,   499,  1270,  1319,   500,  1313,
  1321,   501,  1314,  1323,   502,  1315,    57,   363,   580,   581,
   582,   583,    61,    62,    63,   860,   861,    64,    65,    66,
   260,   379,   509,   510,   511,   718,   719,   885,   649,   224,
    94,   337,   240,   210,   322,   715,   801,   802,   338
};

static const short yypact[] = {   266,
-32768,-32768,  -100,-32768,   343,  1294,   611,     9,    68,    74,
    91,   106,   121,   203,   -80,   -13,    22,-32768,-32768,-32768,
-32768,   207,   183,    73,   102,   120,   -45,   -41,   143,   168,
   164,   197,   315,   321,   327,    33,   280,    86,   238,   287,
   288,   290,   -26,   289,   436,   411,   293,   441,   452,     2,
   308,   -29,   309,   431,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   316,
   317,   341,   356,   361,   386,   387,   391,   408,   412,   413,
   415,   416,   418,   420,   430,   432,   433,   435,   448,   611,
   611,   611,   460,-32768,-32768,  1286,-32768,-32768,-32768,-32768,
-32768,   449,   449,   544,-32768,   611,   611,   611,   611,   450,
   611,   451,   611,   611,   611,   505,   611,   407,   457,   461,
   505,   428,   459,   466,   467,   468,   469,   495,   -27,   -27,
   -27,   -27,   496,   501,   503,   611,-32768,   648,   505,-32768,
-32768,   -57,   506,   507,   611,   -68,   611,-32768,   509,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   511,
   511,   196,   611,   611,   611,   611,   611,   460,   512,   513,
   514,   518,   519,   520,   523,   524,   548,   549,   550,   551,
   567,   573,   574,   579,   581,   582,   583,   584,   593,   597,
   598,   600,   603,   610,   615,   616,   618,   623,   656,   575,
   622,   594,    54,   237,   358,   399,   611,   498,   611,   626,
   657,   751,   611,   878,   756,   796,   611,   611,   611,   769,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   640,
   645,   646,   659,   611,   611,   611,   259,   795,-32768,    83,
  1020,   -27,-32768,   611,   611,   807,   725,   611,   818,   -24,
   611,   829,   849,   897,   943,   957,  1061,  1091,  1111,  1128,
  1147,  1037,  1217,  1274,  1284,  1295,  1306,  1316,  1071,  1157,
  1763,   611,   611,-32768,   -58,   401,   511,   511,   511,   -72,
   803,   812,   815,   816,   817,   828,   830,   833,   836,   837,
   838,   840,   841,   842,   850,   851,   853,   855,   856,   858,
   859,   864,   865,   699,   867,   877,   881,   882,   880,   883,
-32768,    84,   885,   886,   894,-32768,   235,   884,   895,  1326,
   253,  1336,   900,   902,   903,   185,-32768,   -19,   611,   906,
   -51,  1346,  1356,   611,   595,   650,  1366,  1377,  1387,  1397,
  1407,  1772,  1781,   -27,   754,   778,   611,  1790,  1799,  1808,
   -27,-32768,-32768,-32768,   611,-32768,   779,   346,  1817,  1826,
   927,   785,  1417,   930,-32768,-32768,-32768,-32768,-32768,  1427,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   611,-32768,-32768,-32768,-32768,-32768,-32768,   611,   611,   611,
  -118,  -118,   805,   793,   804,   806,   814,   825,   826,   831,
   832,   834,   848,   869,   874,   893,   896,   909,   912,   915,
   916,   917,   931,   932,   939,   940,   942,   945,   946,   953,
   954,   956,   959,   941,-32768,   802,-32768,   962,-32768,   -27,
   505,   505,   951,-32768,   505,   972,-32768,   505,   505,    30,
   611,-32768,    62,   797,   973,   977,   982,    32,   993,   995,
   997,   999,  1000,  1011,  1024,   611,   611,   964,   522,   522,
  1438,   -27,   -27,   -27,   131,   112,-32768,   819,   898,   944,
   958,   966,   967,   968,   969,   970,   981,   983,   985,   960,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   611,   611,   505,   611,  1025,   505,   892,   928,
   984,  1129,  1448,  1458,  1468,  1478,  1004,  1137,   611,   611,
   -27,  1138,  1139,  1008,  1153,  1156,   505,   505,  1160,   -27,
  1161,  1162,   505,   505,  1163,  1170,  1172,  1173,  1175,   505,
   333,   505,  1181,  1155,  1182,  1190,  1191,-32768,  1203,   449,
  1205,    23,  1206,   505,  1212,   505,  1213,  1215,   611,   878,
   185,-32768,-32768,   611,   505,   505,   505,-32768,   147,   505,
   505,   505,   505,   505,   505,   505,  1835,  1844,   611,-32768,
  1076,  1113,-32768,  1078,  1085,   174,   244,   255,   -27,  1233,
-32768,   638,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,-32768,  1853,  1862,  1235,  1488,   -17,
  1159,  1241,  1241,  1241,   611,-32768,-32768,-32768,-32768,   611,
  1095,  1871,  1880,  1096,  1098,  1106,  1099,  1107,  1110,  1112,
  1124,  1125,  1126,  1130,  1127,  1134,  1146,  1154,  1164,  1165,
  1166,  1189,  1136,-32768,-32768,-32768,-32768,-32768,  1192,  1200,
  1208,  1216,  1219,  1152,  1220,-32768,  1226,-32768,-32768,   -27,
-32768,  1256,-32768,  1301,-32768,-32768,   349,  1889,  1307,  1308,
  1315,   611,   611,   611,  1317,  1351,  1358,  1362,  1373,  1375,
  1386,   611,   611,  1498,-32768,-32768,   522,   -27,  1388,   -27,
  1389,   -27,    11,  1242,-32768,  1392,  1898,  1907,  1916,  1925,
  1934,  1943,  1952,  1961,  1970,  1979,  1988,  1997,   611,   611,
-32768,  1240,   505,   505,  1229,   505,  1325,  1188,  1241,  1245,
  1267,   286,   460,  1419,   611,   505,  1404,  1421,  1425,  1287,
  1428,   333,  1429,  1434,   611,  1436,  1440,  1439,  1442,  1443,
   333,   611,   611,   611,   505,  1450,  1454,   333,   611,  1460,
  1461,  1467,   611,   449,  1470,-32768,-32768,   611,   611,-32768,
-32768,-32768,   119,   128,   135,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1508,   410,  1313,  1320,  1332,-32768,  1333,-32768,
  1335,-32768,    52,   611,-32768,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,  1521,  1531,   -17,
   282,-32768,   -12,  1314,  1413,    10,-32768,-32768,-32768,-32768,
  1481,   460,  1342,  2006,  1345,-32768,  1352,-32768,  1353,-32768,
  1354,-32768,  1363,  1541,-32768,  1365,-32768,-32768,  1355,  1361,
  1551,  2015,  1561,  1368,-32768,  1372,  1376,  2024,  1383,  1385,
-32768,  2033,  1384,-32768,   878,  2042,-32768,-32768,-32768,-32768,
   611,-32768,   522,-32768,   611,   611,   611,  1491,  1364,   -40,
-32768,  1572,  2051,  2060,  2069,  2078,  2087,  2096,  2105,  2114,
  2123,  2132,  2141,  2150,  1520,  1537,  1462,   505,-32768,-32768,
   505,   611,  1542,   668,  1548,-32768,   100,  1549,   -17,   333,
  1544,   611,  1552,   333,  1558,  1554,  1559,  1562,  1568,   611,
  1569,   505,  1571,  1574,   611,  1564,  1579,   611,  1573,  1584,
   576,  1441,  1583,  1593,  1603,-32768,   505,  1582,-32768,  1590,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   505,   505,  1445,-32768,  1455,   178,-32768,  1457,
  2159,-32768,   611,-32768,  1464,  1465,  1474,  2168,-32768,  1447,
-32768,  1453,-32768,-32768,-32768,  1613,-32768,  1475,-32768,-32768,
  1623,  1466,-32768,  1633,  1477,  1484,   611,-32768,-32768,  1632,
  1639,    12,  1495,-32768,-32768,  2177,  2186,  2195,  2204,  2213,
  2222,  2231,  2240,  2249,  1643,  1653,  1663,  1642,  1649,   505,
   505,-32768,   611,   611,   460,   333,   333,   333,   333,  1650,
  1652,  1655,   333,  1656,  1662,  1665,  1604,  1614,   670,-32768,
-32768,-32768,    52,   505,   611,   611,   611,   611,   611,   611,
   611,   611,   611,-32768,-32768,-32768,-32768,-32768,  1518,  1485,
   708,  2258,   460,  1527,  1528,  1497,  1507,-32768,-32768,-32768,
  1530,-32768,-32768,-32768,  1538,  1547,-32768,   -39,  1550,  2267,
  2276,  2285,  2294,  2303,  2312,  2321,  2330,  2339,  1476,  1519,
  1529,   505,  1608,  1686,   611,   220,   333,   333,  1696,  1702,
   333,  1694,  1704,  1705,   505,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,  1560,  1566,-32768,
   613,   611,  1580,  1589,-32768,-32768,  1570,  1578,  1581,-32768,
  1587,  2348,  2357,  2366,  2375,  2384,  2393,  2402,  2411,  2420,
    50,   878,    63,   878,    64,   878,  1645,   611,   611,-32768,
   460,   333,   505,  1706,  1717,  1737,  1738,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,  1744,   611,  1745,
   611,  1747,  1601,  2429,   722,   460,  1609,  1610,-32768,-32768,
-32768,-32768,  2438,  2447,  2456,  2465,  2474,  2483,  1673,  1683,
  1693,   878,-32768,   878,-32768,   878,-32768,   611,   611,-32768,
    43,   333,   505,   611,   611,   611,   611,   611,   611,-32768,
-32768,-32768,  2492,   735,  1624,  1612,  1619,  2501,  2510,  2519,
  2528,  2537,  2546,  1618,  1620,  1621,   611,  1774,-32768,   505,
   333,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   784,-32768,  1630,  1631,  2555,  2564,  2573,  2582,  2591,  2600,
    99,   878,   140,   878,   166,   878,  1778,   505,  1784,   611,
   611,   611,   611,   611,   611,   611,  1785,   611,  1787,   611,
  1788,-32768,  1659,-32768,  2609,  2618,  2627,  1703,  1713,  1723,
   878,-32768,   878,-32768,   878,-32768,   505,   611,   611,   611,
-32768,-32768,-32768,  1660,  2636,  2645,  2654,  1647,  1648,  1651,
   505,   611,   611,   611,   611,   611,   611,  1669,  2663,  2672,
  2681,   182,   878,   184,   878,   208,   878,   333,   611,   611,
   611,   611,  1797,   611,  1807,   611,  1815,  1671,  1733,  1743,
  1753,   878,-32768,   878,-32768,   878,-32768,  1818,-32768,-32768,
-32768,-32768,  1661,  1677,  1678,   611,   611,   611,   216,   878,
   217,   878,   236,   878,   611,  1827,   611,  1828,   611,  1834,
   878,-32768,   878,-32768,   878,-32768,  1841,  1843,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1367,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1845,  1847,  -468,
   257,  1848,-32768,-32768,-32768,   847,  -857,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -591,-32768,-32768,  -711,    -7,
-32768,  1399,  -121,  -102,-32768,  -776,  1149,   463,-32768
};


#define	YYLAST		2832


static const short yytable[] = {    93,
   211,   584,   919,   133,   146,   252,   134,   135,   241,   242,
   243,   110,   257,   883,    95,   112,   782,  1012,   858,   858,
   821,   720,   721,   877,   859,   859,   175,   176,   659,   830,
   177,   143,    67,    68,   144,     7,   837,   568,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,   326,
   375,   376,   377,   660,   403,   121,   122,   563,   123,   102,
   282,   283,   175,   176,    96,  -222,   177,   569,  -222,    97,
  -222,   258,   170,   171,   172,   178,  -222,  -222,   364,   365,
   177,   282,   283,   175,   176,   253,    98,   177,   213,   214,
   215,   216,   455,   218,   111,   220,   221,   222,   113,   226,
   858,    99,   945,   918,  1074,   125,   859,   591,   126,   127,
   147,   128,   238,   136,   847,   239,   100,   808,   247,   378,
   367,   451,   713,   848,   452,   714,   103,   256,   878,   259,
   849,   880,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   884,   783,  1013,   285,   286,   287,   288,   289,
   290,   104,    90,    91,   282,   283,   175,   176,   946,    92,
   177,  1185,   950,   992,   559,   282,   283,   175,   176,   106,
   919,   177,   450,   672,   673,   674,   282,   283,   175,   176,
  1137,   116,   177,  1138,   282,   283,   175,   176,   101,   330,
   177,   332,   105,  1139,  1141,   336,  1140,  1142,   776,   341,
   342,   343,   107,   345,   346,   347,   348,   349,   350,   351,
   352,   353,   468,   943,   434,   435,   358,   359,   360,   475,
   439,   440,   282,   283,   175,   176,   369,   370,   177,  1236,
   373,   108,  1237,   380,   282,   283,   175,   176,   444,   445,
   177,   282,   283,   175,   176,    -7,    -7,   177,    -7,   109,
   282,   283,   175,   176,   401,   402,   177,   282,   283,   175,
   176,   589,   590,   177,  1034,  1035,  1036,  1037,    67,    68,
  1238,  1041,   114,  1239,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,   124,  1240,   115,   551,  1241,
   282,   283,   175,   176,   688,   689,   177,   282,   283,   175,
   176,   453,  1292,   177,  1294,  1293,   458,  1295,   282,   283,
   175,   176,    -1,     8,   177,     9,   117,   284,   118,   471,
   586,   587,   588,  1092,   119,  1093,  1094,   476,  1296,  1097,
   120,  1297,   282,   283,   175,   176,  1325,  1327,   177,  1326,
  1328,    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,   282,
   283,   175,   176,   513,   912,   177,  1329,   129,   327,  1330,
   514,   515,   516,   248,   690,   691,   251,     1,     2,   624,
     3,   282,   283,   175,   176,   692,   693,   177,   633,   361,
  1147,   478,   479,   480,   481,   482,   483,   484,   485,   486,
   487,   488,   489,   644,   645,   646,   647,   648,   173,   174,
   175,   176,   878,   879,   177,    92,   130,   131,   223,   132,
   138,   137,   560,   561,   139,   140,   141,   657,    10,    11,
    12,    13,    14,    15,    16,    17,   142,   145,   577,   578,
  1186,   148,    67,    68,   149,   150,   151,   694,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,  1214,
   152,   282,   283,   175,   176,   606,   607,   177,   609,   490,
   282,   283,   175,   176,   758,   153,   177,    67,    68,   328,
   154,   622,   623,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,  -221,   155,   156,  -221,   755,  -221,
   157,   282,   283,   175,   176,  -221,  -221,   177,   212,   177,
   329,   667,   282,   283,   175,   176,   668,   158,   177,   227,
   851,   159,   160,   852,   161,   162,   777,   163,   779,   164,
   781,   684,    39,    40,    41,    42,  1298,    44,   225,   165,
   231,   166,   167,   230,   168,   697,   698,   699,   700,   701,
   702,   703,   704,   705,   706,   707,   708,   169,   209,   217,
   219,   250,   173,   174,   175,   176,   228,   722,   177,    92,
   229,   232,   723,    67,    68,   233,   234,   235,   236,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
   282,   283,   175,   176,   237,   244,   177,    90,    91,   331,
   245,   843,   246,   249,    92,   254,   255,   223,   261,   177,
   321,   291,   292,   293,   763,   764,   765,   294,   295,   296,
    67,   940,   297,   298,   773,   774,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,   299,   300,   301,
   302,   798,   799,   478,   479,   480,   481,   482,   483,   484,
   485,   486,   487,   488,   489,   812,   303,   814,   282,   283,
   175,   176,   304,   305,   177,   323,   967,   824,   306,   968,
   307,   308,   309,   310,   831,   832,   833,   282,   283,   175,
   176,   838,   311,   177,   325,   842,   312,   313,   459,   314,
   845,   846,   315,    90,    91,   282,   283,   175,   176,   316,
    92,   177,   339,  1119,   317,   318,  1120,   319,   282,   283,
   175,   176,   320,   324,   177,   344,   862,   333,   863,   864,
   865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
   354,   696,   282,   283,   175,   176,   355,   356,   177,   282,
   283,   175,   176,   460,   887,   177,   372,   404,   334,   357,
    90,    91,   282,   283,   175,   176,   405,    92,   177,   406,
   407,   408,   427,  1047,    24,    25,    26,    27,    28,    29,
    30,    31,   409,    32,   410,    34,    35,   411,    37,    38,
   412,   413,   414,   911,   415,   416,   417,   913,   914,   915,
   282,   283,   175,   176,   418,   419,   177,   420,    50,   421,
   422,  1064,   423,   424,   282,   283,   175,   176,   425,   426,
   177,   428,    51,    52,   938,  1170,   941,   282,   283,   175,
   176,   429,   432,   177,   948,   430,   431,   433,  1198,   436,
   441,   437,   956,   282,   283,   175,   176,   961,   438,   177,
   964,   442,   335,   552,   553,   447,   469,   555,   448,   449,
   557,   558,   454,   976,   977,   978,   979,   980,   981,   982,
   983,   984,   985,   986,   987,    54,   282,   283,   175,   176,
   470,   477,   177,   505,   506,   995,   508,  1227,   282,   283,
   175,   176,   517,   518,   177,   548,   564,   340,   362,   282,
   283,   175,   176,   549,   519,   177,   520,   554,   371,  1009,
   282,   283,   175,   176,   521,   605,   177,   608,   593,   374,
   611,   282,   283,   175,   176,   522,   523,   177,   556,   565,
   381,   524,   525,   566,   526,  1031,  1032,  1033,   567,   630,
   631,   282,   283,   175,   176,   636,   637,   177,   527,   570,
   382,   571,   643,   572,   650,   573,   574,  1050,  1051,  1052,
  1053,  1054,  1055,  1056,  1057,  1058,   662,   575,   664,   528,
   282,   283,   175,   176,   529,  1066,   177,   669,   670,   671,
   576,   610,   675,   676,   677,   678,   679,   680,   681,   282,
   283,   175,   176,   530,   612,   177,   531,   594,   383,    24,
    25,    26,    27,    28,    29,    30,    31,  1091,    32,   532,
    34,    35,   533,    37,    38,   534,   535,   536,  1102,  1103,
  1104,  1105,  1106,  1107,  1108,  1109,  1110,  1112,  1114,  1116,
   613,   537,   538,    50,  1121,   282,   283,   175,   176,   539,
   540,   177,   541,   595,   384,   542,   543,    51,    52,   282,
   283,   175,   176,   544,   545,   177,   546,   596,   385,   547,
  1144,  1145,   550,  1146,   579,   597,   598,   599,   600,   601,
  1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,
   602,  1164,   603,  1166,   604,   615,   614,   620,  1171,   621,
   625,   626,    24,    25,    26,    27,    28,    29,    30,    31,
    54,    32,   627,    34,    35,   628,    37,    38,   629,   652,
  1183,  1184,   632,   634,   635,   638,  1188,  1189,  1190,  1191,
  1192,  1193,   639,   366,   640,   641,    50,   642,   805,   282,
   283,   175,   176,   651,   811,   177,   653,   391,   815,  1211,
    51,    52,   654,   655,  1215,  1216,  1217,  1218,  1219,  1220,
  1222,  1224,  1226,   282,   283,   175,   176,   834,   656,   177,
   658,   661,   386,   282,   283,   175,   176,   663,   665,   177,
   666,   398,  1245,  1246,  1247,  1248,  1249,  1250,  1251,   685,
  1253,   686,  1255,   282,   283,   175,   176,   687,   695,   177,
   711,   716,   387,    54,   717,   724,   800,   727,   728,   730,
  1265,  1266,  1267,   282,   283,   175,   176,   729,   731,   177,
   732,   756,   388,   733,  1279,  1280,  1281,  1283,  1285,  1287,
   282,   283,   175,   176,   734,   735,   177,   736,   738,   389,
   737,  1299,  1300,  1301,  1302,   739,  1304,   746,  1306,   282,
   283,   175,   176,    -3,    22,   177,   740,    23,   390,   282,
   283,   175,   176,   752,   741,   177,   757,   399,  1320,  1322,
  1324,   804,   760,   761,   742,   743,   744,  1331,   179,  1333,
   762,  1335,   766,    24,    25,    26,    27,    28,    29,    30,
    31,   806,    32,    33,    34,    35,    36,    37,    38,   745,
   936,   807,   747,   937,    39,    40,    41,    42,    43,    44,
   748,    45,    46,    47,    48,    49,   767,    50,   749,   282,
   283,   175,   176,   768,   958,   177,   750,   769,   392,   751,
   753,    51,    52,   180,   181,   182,   754,    53,   770,   973,
   771,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   192,   772,   784,   778,   780,   988,   989,   785,   809,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   202,   816,
   203,   204,   205,   206,   207,   208,   282,   283,   175,   176,
   810,   813,   177,   817,    54,   393,   282,   283,   175,   176,
   818,   819,   177,   820,   822,   394,   823,   282,   283,   175,
   176,   825,   826,   177,   827,   829,   395,   828,   282,   283,
   175,   176,  1029,  1030,   177,   835,   836,   396,   282,   283,
   175,   176,   839,   840,   177,   853,   881,   397,   282,   283,
   175,   176,   841,   854,   177,   844,  1049,   443,   282,   283,
   175,   176,   855,   856,   177,   857,   886,   446,   282,   283,
   175,   176,   882,   888,   177,   890,   916,   456,   282,   283,
   175,   176,   891,   892,   177,   893,   897,   457,   282,   283,
   175,   176,   898,   894,   177,   896,   917,   461,   902,   282,
   283,   175,   176,   903,  1088,   177,   933,   904,   462,   282,
   283,   175,   176,   906,   909,   177,   907,  1101,   463,   282,
   283,   175,   176,   934,   935,   177,   947,   939,   464,   282,
   283,   175,   176,   942,   944,   177,   952,   949,   465,   282,
   283,   175,   176,   951,   953,   177,   962,   954,   507,   282,
   283,   175,   176,   955,   957,   177,   959,   965,   512,   960,
   282,   283,   175,   176,   963,  1148,   177,   974,   966,   585,
   282,   283,   175,   176,   969,   975,   177,   990,  1000,   616,
   282,   283,   175,   176,  1001,   991,   177,   993,  1045,   617,
   282,   283,   175,   176,   996,   997,   177,  1005,  1046,   618,
   282,   283,   175,   176,   998,  1003,   177,  1007,  1085,   619,
   282,   283,   175,   176,  1008,  1187,   177,  1010,  1063,   712,
   282,   283,   175,   176,  1011,  1014,   177,  1027,  1069,   775,
   282,   283,   175,   176,  1028,  1038,   177,  1039,  1070,   850,
  1040,  1042,  1213,   282,   283,   175,   176,  1043,  1062,   177,
  1044,  1086,   875,   282,   283,   175,   176,  1067,  1068,   177,
  1071,  1087,   876,   282,   283,   175,   176,  1089,  1072,   177,
  1243,  1090,   895,   282,   283,   175,   176,  1073,  1098,   177,
  1075,  1095,   899,   282,   283,   175,   176,  1096,  1099,   177,
  1100,  1149,   901,  1117,   282,   283,   175,   176,  1118,  1264,
   177,  1124,  1150,   920,  1143,   282,   283,   175,   176,  1125,
  1122,   177,  1126,  1278,   970,   282,   283,   175,   176,  1123,
  1127,   177,  1151,  1152,   971,   282,   283,   175,   176,  1163,
  1165,   177,  1167,  1168,   972,   282,   283,   175,   176,  1172,
  1173,   177,  1200,  1199,  1002,   282,   283,   175,   176,  1201,
  1208,   177,  1209,  1210,  1004,   282,   283,   175,   176,  1212,
  1228,   177,  1229,  1242,  1006,   282,   283,   175,   176,  1244,
  1252,   177,  1254,  1256,  1024,   282,   283,   175,   176,  1275,
  1276,   177,  1303,  1277,  1025,   282,   283,   175,   176,  1257,
  1271,   177,  1305,  1316,  1026,   282,   283,   175,   176,  1288,
  1307,   177,  1308,  1312,  1180,   282,   283,   175,   176,  1317,
  1318,   177,  1332,  1334,  1181,   282,   283,   175,   176,  1336,
  1338,   177,  1339,   592,  1182,   282,   283,   175,   176,   562,
    58,   177,    59,    60,  1261,   282,   283,   175,   176,  1048,
     0,   177,   803,     0,  1262,   282,   283,   175,   176,     0,
     0,   177,     0,     0,  1263,   282,   283,   175,   176,     0,
     0,   177,     0,     0,  1309,   282,   283,   175,   176,     0,
     0,   177,     0,     0,  1310,   282,   283,   175,   176,     0,
     0,   177,     0,     0,  1311,   282,   283,   175,   176,     0,
     0,   177,     0,   400,   282,   283,   175,   176,     0,     0,
   177,     0,   466,   282,   283,   175,   176,     0,     0,   177,
     0,   467,   282,   283,   175,   176,     0,     0,   177,     0,
   472,   282,   283,   175,   176,     0,     0,   177,     0,   473,
   282,   283,   175,   176,     0,     0,   177,     0,   474,   282,
   283,   175,   176,     0,     0,   177,     0,   503,   282,   283,
   175,   176,     0,     0,   177,     0,   504,   282,   283,   175,
   176,     0,     0,   177,     0,   682,   282,   283,   175,   176,
     0,     0,   177,     0,   683,   282,   283,   175,   176,     0,
     0,   177,     0,   709,   282,   283,   175,   176,     0,     0,
   177,     0,   710,   282,   283,   175,   176,     0,     0,   177,
     0,   725,   282,   283,   175,   176,     0,     0,   177,     0,
   726,   282,   283,   175,   176,     0,     0,   177,     0,   759,
   282,   283,   175,   176,     0,     0,   177,     0,   786,   282,
   283,   175,   176,     0,     0,   177,     0,   787,   282,   283,
   175,   176,     0,     0,   177,     0,   788,   282,   283,   175,
   176,     0,     0,   177,     0,   789,   282,   283,   175,   176,
     0,     0,   177,     0,   790,   282,   283,   175,   176,     0,
     0,   177,     0,   791,   282,   283,   175,   176,     0,     0,
   177,     0,   792,   282,   283,   175,   176,     0,     0,   177,
     0,   793,   282,   283,   175,   176,     0,     0,   177,     0,
   794,   282,   283,   175,   176,     0,     0,   177,     0,   795,
   282,   283,   175,   176,     0,     0,   177,     0,   796,   282,
   283,   175,   176,     0,     0,   177,     0,   797,   282,   283,
   175,   176,     0,     0,   177,     0,   889,   282,   283,   175,
   176,     0,     0,   177,     0,   900,   282,   283,   175,   176,
     0,     0,   177,     0,   905,   282,   283,   175,   176,     0,
     0,   177,     0,   908,   282,   283,   175,   176,     0,     0,
   177,     0,   910,   282,   283,   175,   176,     0,     0,   177,
     0,   921,   282,   283,   175,   176,     0,     0,   177,     0,
   922,   282,   283,   175,   176,     0,     0,   177,     0,   923,
   282,   283,   175,   176,     0,     0,   177,     0,   924,   282,
   283,   175,   176,     0,     0,   177,     0,   925,   282,   283,
   175,   176,     0,     0,   177,     0,   926,   282,   283,   175,
   176,     0,     0,   177,     0,   927,   282,   283,   175,   176,
     0,     0,   177,     0,   928,   282,   283,   175,   176,     0,
     0,   177,     0,   929,   282,   283,   175,   176,     0,     0,
   177,     0,   930,   282,   283,   175,   176,     0,     0,   177,
     0,   931,   282,   283,   175,   176,     0,     0,   177,     0,
   932,   282,   283,   175,   176,     0,     0,   177,     0,   994,
   282,   283,   175,   176,     0,     0,   177,     0,   999,   282,
   283,   175,   176,     0,     0,   177,     0,  1015,   282,   283,
   175,   176,     0,     0,   177,     0,  1016,   282,   283,   175,
   176,     0,     0,   177,     0,  1017,   282,   283,   175,   176,
     0,     0,   177,     0,  1018,   282,   283,   175,   176,     0,
     0,   177,     0,  1019,   282,   283,   175,   176,     0,     0,
   177,     0,  1020,   282,   283,   175,   176,     0,     0,   177,
     0,  1021,   282,   283,   175,   176,     0,     0,   177,     0,
  1022,   282,   283,   175,   176,     0,     0,   177,     0,  1023,
   282,   283,   175,   176,     0,     0,   177,     0,  1065,   282,
   283,   175,   176,     0,     0,   177,     0,  1076,   282,   283,
   175,   176,     0,     0,   177,     0,  1077,   282,   283,   175,
   176,     0,     0,   177,     0,  1078,   282,   283,   175,   176,
     0,     0,   177,     0,  1079,   282,   283,   175,   176,     0,
     0,   177,     0,  1080,   282,   283,   175,   176,     0,     0,
   177,     0,  1081,   282,   283,   175,   176,     0,     0,   177,
     0,  1082,   282,   283,   175,   176,     0,     0,   177,     0,
  1083,   282,   283,   175,   176,     0,     0,   177,     0,  1084,
   282,   283,   175,   176,     0,     0,   177,     0,  1128,   282,
   283,   175,   176,     0,     0,   177,     0,  1129,   282,   283,
   175,   176,     0,     0,   177,     0,  1130,   282,   283,   175,
   176,     0,     0,   177,     0,  1131,   282,   283,   175,   176,
     0,     0,   177,     0,  1132,   282,   283,   175,   176,     0,
     0,   177,     0,  1133,   282,   283,   175,   176,     0,     0,
   177,     0,  1134,   282,   283,   175,   176,     0,     0,   177,
     0,  1135,   282,   283,   175,   176,     0,     0,   177,     0,
  1136,   282,   283,   175,   176,     0,     0,   177,     0,  1169,
   282,   283,   175,   176,     0,     0,   177,     0,  1174,   282,
   283,   175,   176,     0,     0,   177,     0,  1175,   282,   283,
   175,   176,     0,     0,   177,     0,  1176,   282,   283,   175,
   176,     0,     0,   177,     0,  1177,   282,   283,   175,   176,
     0,     0,   177,     0,  1178,   282,   283,   175,   176,     0,
     0,   177,     0,  1179,   282,   283,   175,   176,     0,     0,
   177,     0,  1197,   282,   283,   175,   176,     0,     0,   177,
     0,  1202,   282,   283,   175,   176,     0,     0,   177,     0,
  1203,   282,   283,   175,   176,     0,     0,   177,     0,  1204,
   282,   283,   175,   176,     0,     0,   177,     0,  1205,   282,
   283,   175,   176,     0,     0,   177,     0,  1206,   282,   283,
   175,   176,     0,     0,   177,     0,  1207,   282,   283,   175,
   176,     0,     0,   177,     0,  1230,   282,   283,   175,   176,
     0,     0,   177,     0,  1231,   282,   283,   175,   176,     0,
     0,   177,     0,  1232,   282,   283,   175,   176,     0,     0,
   177,     0,  1233,   282,   283,   175,   176,     0,     0,   177,
     0,  1234,   282,   283,   175,   176,     0,     0,   177,     0,
  1235,   282,   283,   175,   176,     0,     0,   177,     0,  1258,
   282,   283,   175,   176,     0,     0,   177,     0,  1259,   282,
   283,   175,   176,     0,     0,   177,     0,  1260,   282,   283,
   175,   176,     0,     0,   177,     0,  1272,   282,   283,   175,
   176,     0,     0,   177,     0,  1273,   282,   283,   175,   176,
     0,     0,   177,     0,  1274,   282,   283,   175,   176,     0,
     0,   177,     0,  1289,   282,   283,   175,   176,     0,     0,
   177,     0,  1290,   282,   283,   175,   176,     0,     0,   177,
     0,  1291
};

static const short yycheck[] = {     7,
   103,   470,   860,    30,    34,    63,    33,    34,   130,   131,
   132,    57,    81,     4,     6,    57,     6,     6,    59,    59,
   732,   613,   614,   800,    65,    65,   145,   146,     6,   741,
   149,    30,     3,     4,    33,   136,   748,     6,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,     6,
    85,    86,    87,    41,   137,    33,    34,     6,    36,   150,
   143,   144,   145,   146,     7,   134,   149,    46,   137,     6,
   139,   150,    90,    91,    92,    93,   145,   146,     6,     7,
   149,   143,   144,   145,   146,   153,     6,   149,   106,   107,
   108,   109,   154,   111,   150,   113,   114,   115,   150,   117,
    59,     6,   889,   154,   154,    30,    65,     6,    33,    34,
   150,    36,   150,   150,     6,   153,     6,   719,   136,   154,
   252,   151,   150,     6,   154,   153,   150,   145,   151,   147,
     6,   154,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   153,   153,   153,   173,   174,   175,   176,   177,
   178,   150,   143,   144,   143,   144,   145,   146,   890,   150,
   149,   139,   894,     6,   155,   143,   144,   145,   146,     7,
  1048,   149,     8,    47,    48,    49,   143,   144,   145,   146,
   151,    38,   149,   154,   143,   144,   145,   146,     6,   217,
   149,   219,     6,   151,   151,   223,   154,   154,   687,   227,
   228,   229,   150,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   354,   134,   151,   152,   244,   245,   246,   361,
     6,     7,   143,   144,   145,   146,   254,   255,   149,   151,
   258,   150,   154,   261,   143,   144,   145,   146,     6,     7,
   149,   143,   144,   145,   146,     0,     1,   149,     3,   150,
   143,   144,   145,   146,   282,   283,   149,   143,   144,   145,
   146,   151,   152,   149,   996,   997,   998,   999,     3,     4,
   151,  1003,   150,   154,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    36,   151,   150,   440,   154,
   143,   144,   145,   146,   151,   152,   149,   143,   144,   145,
   146,   339,   151,   149,   151,   154,   344,   154,   143,   144,
   145,   146,     0,     1,   149,     3,   150,   152,    34,   357,
   472,   473,   474,   134,    34,  1067,  1068,   365,   151,  1071,
    34,   154,   143,   144,   145,   146,   151,   151,   149,   154,
   154,   106,   107,   108,   109,   110,   111,   112,   113,   143,
   144,   145,   146,   391,   853,   149,   151,   150,   152,   154,
   398,   399,   400,   137,   151,   152,   140,   132,   133,   521,
   135,   143,   144,   145,   146,   151,   152,   149,   530,   151,
  1122,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    91,    92,    93,    94,    95,   143,   144,
   145,   146,   151,   152,   149,   150,   150,   150,   153,   150,
     5,   153,   450,   451,    34,   153,     6,   550,   106,   107,
   108,   109,   110,   111,   112,   113,     5,   150,   466,   467,
  1172,   153,     3,     4,    34,   150,   150,   589,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,  1201,
   150,   143,   144,   145,   146,   503,   504,   149,   506,   154,
   143,   144,   145,   146,   156,   150,   149,     3,     4,   152,
   150,   519,   520,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   134,   150,   150,   137,   660,   139,
   150,   143,   144,   145,   146,   145,   146,   149,     5,   149,
   152,   559,   143,   144,   145,   146,   564,   150,   149,   153,
   151,   150,   150,   154,   150,   150,   688,   150,   690,   150,
   692,   579,    51,    52,    53,    54,  1288,    56,   116,   150,
   153,   150,   150,   121,   150,   593,   594,   595,   596,   597,
   598,   599,   600,   601,   602,   603,   604,   150,   150,   150,
   150,   139,   143,   144,   145,   146,   150,   615,   149,   150,
   150,   153,   620,     3,     4,   150,   150,   150,   150,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
   143,   144,   145,   146,   150,   150,   149,   143,   144,   152,
   150,   754,   150,     6,   150,   150,   150,   153,   150,   149,
     5,   150,   150,   150,   672,   673,   674,   150,   150,   150,
     3,     4,   150,   150,   682,   683,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,   150,   150,   150,
   150,   709,   710,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,   723,   150,   725,   143,   144,
   145,   146,   150,   150,   149,   151,   151,   735,   150,   154,
   150,   150,   150,   150,   742,   743,   744,   143,   144,   145,
   146,   749,   150,   149,   151,   753,   150,   150,   154,   150,
   758,   759,   150,   143,   144,   143,   144,   145,   146,   150,
   150,   149,     7,   151,   150,   150,   154,   150,   143,   144,
   145,   146,   150,   152,   149,     7,   784,   152,   786,   787,
   788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
   151,   154,   143,   144,   145,   146,   152,   152,   149,   143,
   144,   145,   146,   154,   812,   149,    82,     5,   152,   151,
   143,   144,   143,   144,   145,   146,     5,   150,   149,     5,
     5,     5,   124,   154,    30,    31,    32,    33,    34,    35,
    36,    37,     5,    39,     5,    41,    42,     5,    44,    45,
     5,     5,     5,   851,     5,     5,     5,   855,   856,   857,
   143,   144,   145,   146,     5,     5,   149,     5,    64,     5,
     5,   154,     5,     5,   143,   144,   145,   146,     5,     5,
   149,     5,    78,    79,   882,   154,   884,   143,   144,   145,
   146,     5,     3,   149,   892,     5,     5,     5,   154,     5,
     7,     6,   900,   143,   144,   145,   146,   905,     5,   149,
   908,     7,   152,   441,   442,     6,   153,   445,     7,     7,
   448,   449,     7,   921,   922,   923,   924,   925,   926,   927,
   928,   929,   930,   931,   932,   131,   143,   144,   145,   146,
   153,   153,   149,     7,   150,   943,     7,   154,   143,   144,
   145,   146,   138,   151,   149,     5,   150,   152,   154,   143,
   144,   145,   146,   152,   151,   149,   151,     7,   152,   967,
   143,   144,   145,   146,   151,     6,   149,   505,   150,   152,
   508,   143,   144,   145,   146,   151,   151,   149,     7,     7,
   152,   151,   151,     7,   151,   993,   994,   995,     7,   527,
   528,   143,   144,   145,   146,   533,   534,   149,   151,     7,
   152,     7,   540,     7,   542,     7,     7,  1015,  1016,  1017,
  1018,  1019,  1020,  1021,  1022,  1023,   554,     7,   556,   151,
   143,   144,   145,   146,   151,  1033,   149,   565,   566,   567,
     7,     7,   570,   571,   572,   573,   574,   575,   576,   143,
   144,   145,   146,   151,   153,   149,   151,   150,   152,    30,
    31,    32,    33,    34,    35,    36,    37,  1065,    39,   151,
    41,    42,   151,    44,    45,   151,   151,   151,  1076,  1077,
  1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,
   153,   151,   151,    64,  1092,   143,   144,   145,   146,   151,
   151,   149,   151,   150,   152,   151,   151,    78,    79,   143,
   144,   145,   146,   151,   151,   149,   151,   150,   152,   151,
  1118,  1119,   151,  1121,   151,   150,   150,   150,   150,   150,
  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,
   150,  1139,   150,  1141,   150,     7,   153,   134,  1146,     3,
     3,     3,    30,    31,    32,    33,    34,    35,    36,    37,
   131,    39,   145,    41,    42,     3,    44,    45,     3,     5,
  1168,  1169,     3,     3,     3,     3,  1174,  1175,  1176,  1177,
  1178,  1179,     3,   154,     3,     3,    64,     3,   716,   143,
   144,   145,   146,     3,   722,   149,     5,   151,   726,  1197,
    78,    79,     3,     3,  1202,  1203,  1204,  1205,  1206,  1207,
  1208,  1209,  1210,   143,   144,   145,   146,   745,     6,   149,
     6,     6,   152,   143,   144,   145,   146,     6,     6,   149,
     6,   151,  1230,  1231,  1232,  1233,  1234,  1235,  1236,   154,
  1238,   154,  1240,   143,   144,   145,   146,   153,     6,   149,
     6,    83,   152,   131,     4,   151,     7,   152,   151,   151,
  1258,  1259,  1260,   143,   144,   145,   146,   152,   152,   149,
   151,     6,   152,   152,  1272,  1273,  1274,  1275,  1276,  1277,
   143,   144,   145,   146,   151,   151,   149,   152,   152,   152,
   151,  1289,  1290,  1291,  1292,   152,  1294,   152,  1296,   143,
   144,   145,   146,     0,     1,   149,   151,     4,   152,   143,
   144,   145,   146,   152,   151,   149,     6,   151,  1316,  1317,
  1318,    83,     6,     6,   151,   151,   151,  1325,    33,  1327,
     6,  1329,     6,    30,    31,    32,    33,    34,    35,    36,
    37,     7,    39,    40,    41,    42,    43,    44,    45,   151,
   878,   154,   151,   881,    51,    52,    53,    54,    55,    56,
   151,    58,    59,    60,    61,    62,     6,    64,   151,   143,
   144,   145,   146,     6,   902,   149,   151,     6,   152,   151,
   151,    78,    79,    88,    89,    90,   151,    84,     6,   917,
     6,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,     6,   151,     6,     6,   933,   934,     6,   154,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,     6,
   125,   126,   127,   128,   129,   130,   143,   144,   145,   146,
   154,     3,   149,     3,   131,   152,   143,   144,   145,   146,
     6,   145,   149,     6,     6,   152,     3,   143,   144,   145,
   146,     6,     3,   149,     6,     3,   152,     6,   143,   144,
   145,   146,   990,   991,   149,     6,     3,   152,   143,   144,
   145,   146,     3,     3,   149,   153,   153,   152,   143,   144,
   145,   146,     6,   154,   149,     6,  1014,   152,   143,   144,
   145,   146,   151,   151,   149,   151,     6,   152,   143,   144,
   145,   146,    80,   152,   149,   151,     6,   152,   143,   144,
   145,   146,   151,   151,   149,   152,   152,   152,   143,   144,
   145,   146,   152,   151,   149,   151,   153,   152,   151,   143,
   144,   145,   146,   152,  1062,   149,     7,   152,   152,   143,
   144,   145,   146,   151,   151,   149,   152,  1075,   152,   143,
   144,   145,   146,     7,    83,   149,     3,     6,   152,   143,
   144,   145,   146,     6,     6,   149,     3,     6,   152,   143,
   144,   145,   146,     6,     6,   149,     3,     6,   152,   143,
   144,   145,   146,     6,     6,   149,     6,     5,   152,     6,
   143,   144,   145,   146,     6,  1123,   149,     6,     5,   152,
   143,   144,   145,   146,   154,     6,   149,   153,   152,   152,
   143,   144,   145,   146,   152,   151,   149,   151,     5,   152,
   143,   144,   145,   146,   151,   151,   149,   152,     5,   152,
   143,   144,   145,   146,   151,   151,   149,   151,   153,   152,
   143,   144,   145,   146,   151,  1173,   149,     6,   154,   152,
   143,   144,   145,   146,     6,   151,   149,     6,   152,   152,
   143,   144,   145,   146,     6,     6,   149,     6,   152,   152,
     6,     6,  1200,   143,   144,   145,   146,     6,   151,   149,
     6,   153,   152,   143,   144,   145,   146,   151,   151,   149,
   151,   153,   152,   143,   144,   145,   146,    80,   151,   149,
  1228,     6,   152,   143,   144,   145,   146,   151,     5,   149,
   151,     6,   152,   143,   144,   145,   146,     6,     5,   149,
     6,     6,   152,   154,   143,   144,   145,   146,   153,  1257,
   149,   152,     6,   152,    80,   143,   144,   145,   146,   152,
   151,   149,   152,  1271,   152,   143,   144,   145,   146,   151,
   154,   149,     6,     6,   152,   143,   144,   145,   146,     6,
     6,   149,     6,   153,   152,   143,   144,   145,   146,   151,
   151,   149,   151,   140,   152,   143,   144,   145,   146,   151,
   153,   149,   153,   153,   152,   143,   144,   145,   146,     6,
   151,   149,   152,     6,   152,   143,   144,   145,   146,     6,
     6,   149,     6,     6,   152,   143,   144,   145,   146,   153,
   153,   149,     6,   153,   152,   143,   144,   145,   146,   151,
   151,   149,     6,   153,   152,   143,   144,   145,   146,   151,
     6,   149,   152,     6,   152,   143,   144,   145,   146,   153,
   153,   149,     6,     6,   152,   143,   144,   145,   146,     6,
     0,   149,     0,   477,   152,   143,   144,   145,   146,   451,
     6,   149,     6,     6,   152,   143,   144,   145,   146,  1013,
    -1,   149,   714,    -1,   152,   143,   144,   145,   146,    -1,
    -1,   149,    -1,    -1,   152,   143,   144,   145,   146,    -1,
    -1,   149,    -1,    -1,   152,   143,   144,   145,   146,    -1,
    -1,   149,    -1,    -1,   152,   143,   144,   145,   146,    -1,
    -1,   149,    -1,    -1,   152,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 126 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 140 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 147 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 167 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 172 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 177 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 188 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 191 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 195 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 201 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 207 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 214 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 220 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 224 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 228 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 235 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 239 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 244 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 248 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 252 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 256 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 260 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 264 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 268 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 272 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 278 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 281 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 284 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 288 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 292 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 296 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 300 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 315 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 319 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 322 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 325 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 336 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 342 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 343 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 344 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 345 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 346 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 347 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 348 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 349 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 350 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 351 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 352 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 353 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 65:
#line 362 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 66:
#line 366 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 67:
#line 373 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 80:
#line 392 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 81:
#line 394 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 82:
#line 399 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 83:
#line 404 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 84:
#line 411 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 413 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 418 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 87:
#line 423 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 88:
#line 430 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 432 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 437 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 91:
#line 442 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 92:
#line 449 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 451 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 457 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 463 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 96:
#line 470 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 472 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 478 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 484 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 100:
#line 491 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 493 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 499 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 505 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 104:
#line 512 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 514 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 521 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 530 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 108:
#line 537 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 539 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 546 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 555 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 112:
#line 562 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 564 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 571 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 580 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 116:
#line 587 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 589 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 597 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 606 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 120:
#line 613 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 615 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 623 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 632 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 124:
#line 639 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 641 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 649 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 658 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 128:
#line 671 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 129:
#line 688 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 130:
#line 695 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 131:
#line 701 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      	List_Read(yyvsp[-1].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-8].d,yyvsp[-6].d,yyvsp[-4].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 132:
#line 720 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 133:
#line 731 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 134:
#line 739 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 135:
#line 745 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 136:
#line 751 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      	List_Read(yyvsp[-1].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-8].d,yyvsp[-6].d,yyvsp[-4].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 137:
#line 770 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 138:
#line 776 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 139:
#line 793 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 140:
#line 799 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 805 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 142:
#line 811 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 143:
#line 817 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 144:
#line 826 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 145:
#line 832 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 146:
#line 854 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 860 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 148:
#line 879 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 149:
#line 902 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 150:
#line 910 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 151:
#line 914 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 920 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 926 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 154:
#line 938 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 155:
#line 944 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 156:
#line 950 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 963 "Gmsh.y"
{
      TranslateShapes (yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 158:
#line 968 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 159:
#line 973 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-4].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 160:
#line 978 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 161:
#line 985 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 162:
#line 986 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 163:
#line 987 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 164:
#line 992 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 165:
#line 996 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 166:
#line 1008 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 167:
#line 1026 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 168:
#line 1041 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 169:
#line 1072 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 170:
#line 1076 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 171:
#line 1080 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 172:
#line 1084 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 173:
#line 1088 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 174:
#line 1094 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 175:
#line 1099 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 176:
#line 1103 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 177:
#line 1107 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 178:
#line 1113 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 179:
#line 1121 "Gmsh.y"
{
    ;
    break;}
case 180:
#line 1124 "Gmsh.y"
{
    ;
    break;}
case 181:
#line 1130 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 182:
#line 1147 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 183:
#line 1158 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 184:
#line 1175 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Power : code 1 ou -1 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 185:
#line 1192 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 186:
#line 1209 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 3*sign(d); /* Progresion : code 3 ou -3 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 187:
#line 1226 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 188:
#line 1247 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 189:
#line 1267 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 190:
#line 1287 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", j);
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 191:
#line 1302 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", j);
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 192:
#line 1325 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 196:
#line 1345 "Gmsh.y"
{ ColorField = ColorGeneral; ;
    break;}
case 198:
#line 1348 "Gmsh.y"
{ ColorField = ColorGeometry; ;
    break;}
case 200:
#line 1351 "Gmsh.y"
{ ColorField = ColorMesh; ;
    break;}
case 204:
#line 1362 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, -1, yyvsp[-1].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-1].c);
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-3].c);
      else
	*ptr = i ;
    ;
    break;}
case 205:
#line 1372 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, (int)yyvsp[-2].d, yyvsp[-4].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-4].c);
      Get_ColorPointerForString(ColorField, yyvsp[-7].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-7].c);
      else
	*ptr = i ;
    ;
    break;}
case 206:
#line 1382 "Gmsh.y"
{
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-1].v);
      else
	*ptr = PACK_COLOR((int)yyvsp[-1].v[0], (int)yyvsp[-1].v[1], (int)yyvsp[-1].v[2], (int)yyvsp[-1].v[3]);
    ;
    break;}
case 207:
#line 1393 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
    ;
    break;}
case 208:
#line 1400 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=255.;
    ;
    break;}
case 209:
#line 1476 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 210:
#line 1477 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 211:
#line 1478 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 212:
#line 1479 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 213:
#line 1480 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 214:
#line 1484 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 215:
#line 1485 "Gmsh.y"
{ yyval.d = yyvsp[-1].d; ;
    break;}
case 216:
#line 1486 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d; ;
    break;}
case 217:
#line 1487 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d; ;
    break;}
case 218:
#line 1488 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d; ;
    break;}
case 219:
#line 1489 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d; ;
    break;}
case 220:
#line 1490 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d); ;
    break;}
case 221:
#line 1491 "Gmsh.y"
{ yyval.d = - yyvsp[0].d; ;
    break;}
case 222:
#line 1492 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 223:
#line 1493 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 224:
#line 1494 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 225:
#line 1495 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 226:
#line 1496 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 227:
#line 1497 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 228:
#line 1498 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 229:
#line 1499 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 230:
#line 1500 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 231:
#line 1501 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 232:
#line 1502 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 233:
#line 1503 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 234:
#line 1504 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 235:
#line 1505 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 236:
#line 1506 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 237:
#line 1507 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 238:
#line 1508 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 239:
#line 1509 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 240:
#line 1510 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 241:
#line 1511 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 242:
#line 1512 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 243:
#line 1516 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 244:
#line 1517 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 245:
#line 1519 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 246:
#line 1531 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 247:
#line 1537 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 248:
#line 1551 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-9].d;
      yyval.v[1]=yyvsp[-7].d;
      yyval.v[2]=yyvsp[-5].d;
      yyval.v[3]=yyvsp[-3].d;
      yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 249:
#line 1559 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
      yyval.v[4]=1.0;
    ;
    break;}
case 250:
#line 1567 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 251:
#line 1575 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 252:
#line 1586 "Gmsh.y"
{
    ;
    break;}
case 253:
#line 1589 "Gmsh.y"
{
    ;
    break;}
case 254:
#line 1595 "Gmsh.y"
{
    ;
    break;}
case 255:
#line 1598 "Gmsh.y"
{
    ;
    break;}
case 256:
#line 1604 "Gmsh.y"
{
    ;
    break;}
case 257:
#line 1607 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 258:
#line 1611 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 259:
#line 1618 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 260:
#line 1623 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 261:
#line 1630 "Gmsh.y"
{
    ;
    break;}
case 262:
#line 1633 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 263:
#line 1639 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 264:
#line 1653 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 265:
#line 1658 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 266:
#line 1667 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 267:
#line 1671 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1681 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void  vyyerror (char *fmt, ...){
  va_list args;
  char    tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

int Get_ColorForString(StringX4Int SX4I[], int alpha, 
		       char * string, int * FlagError) {
  int  i = 0 ;
  while ((SX4I[i].string != NULL) && (strcmp(SX4I[i].string, string)))  i++ ;
  *FlagError = (SX4I[i].string == NULL)? 1 : 0 ;
  if(alpha > 0)
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,alpha) ;
  else
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,SX4I[i].int4) ;
}

void Get_ColorPointerForString(StringXPointer SXP[], char * string,
			  int * FlagError, unsigned int **Pointer) {
  int  i = 0 ;
  while ((SXP[i].string != NULL) && (strcmp(SXP[i].string, string)))  i++ ;
  *FlagError = (SXP[i].string == NULL)? 1 : 0 ;
  *Pointer = (unsigned int *)SXP[i].Pointer ;
}

