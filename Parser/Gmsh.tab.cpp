
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPrintf	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tBump	302
#define	tProgression	303
#define	tRotate	304
#define	tTranslate	305
#define	tSymmetry	306
#define	tDilate	307
#define	tExtrude	308
#define	tDuplicata	309
#define	tLoop	310
#define	tInclude	311
#define	tRecombine	312
#define	tDelete	313
#define	tCoherence	314
#define	tView	315
#define	tOffset	316
#define	tAttractor	317
#define	tLayers	318
#define	tScalarTetrahedron	319
#define	tVectorTetrahedron	320
#define	tTensorTetrahedron	321
#define	tScalarTriangle	322
#define	tVectorTriangle	323
#define	tTensorTriangle	324
#define	tScalarLine	325
#define	tVectorLine	326
#define	tTensorLine	327
#define	tScalarPoint	328
#define	tVectorPoint	329
#define	tTensorPoint	330
#define	tBSpline	331
#define	tNurbs	332
#define	tOrder	333
#define	tWith	334
#define	tBounds	335
#define	tKnots	336
#define	tColor	337
#define	tOptions	338
#define	tFor	339
#define	tEndFor	340
#define	tScript	341
#define	tExit	342
#define	tMerge	343
#define	tB_SPLINE_SURFACE_WITH_KNOTS	344
#define	tB_SPLINE_CURVE_WITH_KNOTS	345
#define	tCARTESIAN_POINT	346
#define	tTRUE	347
#define	tFALSE	348
#define	tUNSPECIFIED	349
#define	tU	350
#define	tV	351
#define	tEDGE_CURVE	352
#define	tVERTEX_POINT	353
#define	tORIENTED_EDGE	354
#define	tPLANE	355
#define	tFACE_OUTER_BOUND	356
#define	tEDGE_LOOP	357
#define	tADVANCED_FACE	358
#define	tVECTOR	359
#define	tDIRECTION	360
#define	tAXIS2_PLACEMENT_3D	361
#define	tISO	362
#define	tENDISO	363
#define	tENDSEC	364
#define	tDATA	365
#define	tHEADER	366
#define	tFILE_DESCRIPTION	367
#define	tFILE_SCHEMA	368
#define	tFILE_NAME	369
#define	tMANIFOLD_SOLID_BREP	370
#define	tCLOSED_SHELL	371
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	372
#define	tFACE_BOUND	373
#define	tCYLINDRICAL_SURFACE	374
#define	tCONICAL_SURFACE	375
#define	tCIRCLE	376
#define	tTRIMMED_CURVE	377
#define	tGEOMETRIC_SET	378
#define	tCOMPOSITE_CURVE_SEGMENT	379
#define	tCONTINUOUS	380
#define	tCOMPOSITE_CURVE	381
#define	tTOROIDAL_SURFACE	382
#define	tPRODUCT_DEFINITION	383
#define	tPRODUCT_DEFINITION_SHAPE	384
#define	tSHAPE_DEFINITION_REPRESENTATION	385
#define	tELLIPSE	386
#define	tTrimmed	387
#define	tSolid	388
#define	tEndSolid	389
#define	tVertex	390
#define	tFacet	391
#define	tNormal	392
#define	tOuter	393
#define	tLoopSTL	394
#define	tEndLoop	395
#define	tEndFacet	396
#define	tAFFECTPLUS	397
#define	tAFFECTMINUS	398
#define	tAFFECTTIMES	399
#define	tAFFECTDIVIDE	400
#define	tAND	401
#define	tOR	402
#define	tNOTEQUAL	403
#define	tEQUAL	404
#define	tAPPROXEQUAL	405
#define	tLESSOREQUAL	406
#define	tGREATEROREQUAL	407
#define	tCROSSPRODUCT	408
#define	UNARYPREC	409
#define	tPLUSPLUS	410
#define	tMINUSMINUS	411

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.18 2000-12-06 22:25:24 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 59 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1414
#define	YYFLAG		-32768
#define	YYNTBASE	177

#define YYTRANSLATE(x) ((unsigned)(x) <= 411 ? yytranslate[x] : 257)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   164,     2,     2,     2,   161,     2,     2,   168,
   170,   159,   157,   169,   158,   174,   160,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   173,     2,   153,
     2,   154,   147,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   175,     2,   176,   165,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   171,     2,   172,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   148,   149,   150,   151,   152,   155,   156,   162,   163,   166,
   167
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   527,   532,   535,   543,
   550,   559,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   590,   593,   596,   598,   602,   603,   617,   619,
   623,   624,   638,   640,   644,   645,   659,   661,   665,   666,
   686,   688,   692,   693,   713,   715,   719,   720,   740,   742,
   746,   747,   773,   775,   779,   780,   806,   808,   812,   813,
   839,   841,   845,   846,   878,   880,   884,   885,   917,   919,
   923,   924,   956,   961,   969,   978,   991,   998,  1004,  1012,
  1020,  1033,  1041,  1051,  1069,  1077,  1086,  1095,  1103,  1115,
  1121,  1130,  1140,  1149,  1172,  1193,  1202,  1211,  1217,  1226,
  1234,  1243,  1249,  1261,  1267,  1277,  1279,  1281,  1283,  1284,
  1287,  1292,  1297,  1301,  1305,  1308,  1312,  1319,  1328,  1330,
  1339,  1352,  1361,  1374,  1383,  1396,  1408,  1424,  1426,  1429,
  1439,  1442,  1449,  1459,  1469,  1478,  1487,  1496,  1503,  1508,
  1511,  1512,  1515,  1517,  1524,  1531,  1538,  1545,  1552,  1559,
  1565,  1571,  1578,  1587,  1588,  1591,  1593,  1595,  1597,  1599,
  1601,  1603,  1605,  1609,  1612,  1615,  1618,  1622,  1626,  1630,
  1634,  1638,  1642,  1646,  1650,  1654,  1658,  1662,  1666,  1670,
  1674,  1680,  1685,  1690,  1695,  1700,  1705,  1710,  1715,  1720,
  1725,  1730,  1737,  1742,  1747,  1752,  1757,  1762,  1767,  1774,
  1781,  1788,  1790,  1792,  1794,  1798,  1803,  1808,  1812,  1819,
  1821,  1824,  1827,  1831,  1835,  1847,  1857,  1865,  1873,  1874,
  1878,  1880,  1884,  1885,  1889,  1893,  1895,  1899,  1900,  1902,
  1906,  1908,  1910,  1914,  1918,  1928,  1936,  1942,  1944
};

static const short yyrhs[] = {   179,
     0,   178,     0,   184,     0,   134,     0,   137,   138,   245,
   245,   245,   139,   140,   136,   245,   245,   245,   136,   245,
   245,   245,   136,   245,   245,   245,   141,   142,     0,   135,
     0,     0,   179,   180,     0,   181,     0,   183,     0,   182,
     0,     1,     6,     0,   108,     6,     0,   109,     6,     0,
   111,     6,     0,   110,     6,     0,   112,     6,     0,   113,
   168,   250,   169,     5,   170,     6,     0,   114,   168,   250,
   170,     6,     0,   115,   168,     5,   169,     5,   169,   250,
   169,   250,   169,     5,   169,     5,   169,     5,   170,     6,
     0,     3,     7,    92,   168,     5,   169,   248,   170,     6,
     0,     3,     7,    91,   168,     5,   169,   245,   169,   254,
   169,   244,   169,   244,   169,   244,   169,   254,   169,   254,
   169,   244,   170,     6,     0,     3,     7,    90,   168,     5,
   169,   245,   169,   245,   169,   252,   169,   244,   169,   244,
   169,   244,   169,   244,   169,   254,   169,   254,   169,   254,
   169,   254,   169,   244,   170,     6,     0,     3,     7,    98,
   168,     5,   169,     3,   169,     3,   169,     3,   169,   244,
   170,     6,     0,     3,     7,   102,   168,     5,   169,     3,
   169,   244,   170,     6,     0,     3,     7,   119,   168,     5,
   169,     3,   169,   244,   170,     6,     0,     3,     7,   100,
   168,     5,   169,   159,   169,   159,   169,   245,   169,   244,
   170,     6,     0,     3,     7,   103,   168,     5,   169,   254,
   170,     6,     0,     3,     7,   104,   168,     5,   169,   254,
   169,     3,   169,   244,   170,     6,     0,     3,     7,    99,
   168,     5,   169,     3,   170,     6,     0,     3,     7,   105,
   168,     5,   169,     3,   169,   245,   170,     6,     0,     3,
     7,   107,   168,     5,   169,     3,   169,     3,   169,     3,
   170,     6,     0,     3,     7,   106,   168,     5,   169,   248,
   170,     6,     0,     3,     7,   101,   168,     5,   169,     3,
   170,     6,     0,     3,     7,    34,   168,     5,   169,     3,
   169,     3,   170,     6,     0,     3,     7,   117,   168,     5,
   169,   254,   170,     6,     0,     3,     7,   118,   168,     5,
   169,   254,   169,     3,   170,     6,     0,     3,     7,   116,
   168,     5,   169,     3,   170,     6,     0,     3,     7,   120,
   168,     5,   169,     3,   169,   245,   170,     6,     0,     3,
     7,   121,   168,     5,   169,     3,   169,   245,   169,   245,
   170,     6,     0,     3,     7,   128,   168,     5,   169,     3,
   169,   245,   169,   245,   170,     6,     0,     3,     7,   122,
   168,     5,   169,     3,   169,   245,   170,     6,     0,     3,
     7,   132,   168,     5,   169,     3,   169,   245,   169,   245,
   170,     6,     0,     3,     7,   123,   168,     5,   169,     3,
   169,   254,   169,   254,   169,   244,   169,   244,   170,     6,
     0,     3,     7,   124,   168,     5,   169,   254,   170,     6,
     0,     3,     7,   125,   168,   126,   169,   244,   169,     3,
   170,     6,     0,     3,     7,   127,   168,     5,   169,   254,
   169,   244,   170,     6,     0,     3,     7,   129,   168,     5,
   169,     5,   169,     3,   169,     3,   170,     6,     0,     3,
     7,   130,   168,     5,   169,     5,   169,     3,   170,     6,
     0,     3,     7,   131,   168,     3,   169,     3,   170,     6,
     0,     0,   184,   185,     0,   187,     0,   186,     0,   225,
     0,   226,     0,   227,     0,   230,     0,   231,     0,   235,
     0,   238,     0,   239,     0,   232,     0,   234,     0,   233,
     0,    84,   171,   240,   172,     0,    87,   171,   242,   172,
     0,     1,     6,     0,    30,   168,     5,   169,   245,   170,
     6,     0,    61,     5,   171,   188,   172,     6,     0,    61,
     5,    62,   248,   171,   188,   172,     6,     0,     0,   188,
   190,     0,   188,   193,     0,   188,   196,     0,   188,   199,
     0,   188,   202,     0,   188,   205,     0,   188,   208,     0,
   188,   211,     0,   188,   214,     0,   188,   217,     0,   188,
   220,     0,   188,   223,     0,   245,     0,   189,   169,   245,
     0,     0,    74,   168,   245,   169,   245,   169,   245,   170,
   191,   171,   189,   172,     6,     0,   245,     0,   192,   169,
   245,     0,     0,    75,   168,   245,   169,   245,   169,   245,
   170,   194,   171,   192,   172,     6,     0,   245,     0,   195,
   169,   245,     0,     0,    76,   168,   245,   169,   245,   169,
   245,   170,   197,   171,   195,   172,     6,     0,   245,     0,
   198,   169,   245,     0,     0,    71,   168,   245,   169,   245,
   169,   245,   169,   245,   169,   245,   169,   245,   170,   200,
   171,   198,   172,     6,     0,   245,     0,   201,   169,   245,
     0,     0,    72,   168,   245,   169,   245,   169,   245,   169,
   245,   169,   245,   169,   245,   170,   203,   171,   201,   172,
     6,     0,   245,     0,   204,   169,   245,     0,     0,    73,
   168,   245,   169,   245,   169,   245,   169,   245,   169,   245,
   169,   245,   170,   206,   171,   204,   172,     6,     0,   245,
     0,   207,   169,   245,     0,     0,    68,   168,   245,   169,
   245,   169,   245,   169,   245,   169,   245,   169,   245,   169,
   245,   169,   245,   169,   245,   170,   209,   171,   207,   172,
     6,     0,   245,     0,   210,   169,   245,     0,     0,    69,
   168,   245,   169,   245,   169,   245,   169,   245,   169,   245,
   169,   245,   169,   245,   169,   245,   169,   245,   170,   212,
   171,   210,   172,     6,     0,   245,     0,   213,   169,   245,
     0,     0,    70,   168,   245,   169,   245,   169,   245,   169,
   245,   169,   245,   169,   245,   169,   245,   169,   245,   169,
   245,   170,   215,   171,   213,   172,     6,     0,   245,     0,
   216,   169,   245,     0,     0,    65,   168,   245,   169,   245,
   169,   245,   169,   245,   169,   245,   169,   245,   169,   245,
   169,   245,   169,   245,   169,   245,   169,   245,   169,   245,
   170,   218,   171,   216,   172,     6,     0,   245,     0,   219,
   169,   245,     0,     0,    66,   168,   245,   169,   245,   169,
   245,   169,   245,   169,   245,   169,   245,   169,   245,   169,
   245,   169,   245,   169,   245,   169,   245,   169,   245,   170,
   221,   171,   219,   172,     6,     0,   245,     0,   222,   169,
   245,     0,     0,    67,   168,   245,   169,   245,   169,   245,
   169,   245,   169,   245,   169,   245,   169,   245,   169,   245,
   169,   245,   169,   245,   169,   245,   169,   245,   170,   224,
   171,   222,   172,     6,     0,     4,     7,   245,     6,     0,
    31,   168,   245,   170,     7,   248,     6,     0,    46,    31,
   168,   245,   170,     7,   254,     6,     0,    63,    31,   254,
     7,   171,   245,   169,   245,   169,   245,   172,     6,     0,
    38,    39,   254,     7,   245,     6,     0,    31,   171,   245,
   172,     6,     0,    34,   168,   245,   170,     7,   254,     6,
     0,    36,   168,   245,   170,     7,   254,     6,     0,    63,
    34,   254,     7,   171,   245,   169,   245,   169,   245,   172,
     6,     0,    32,   168,   245,   170,     7,   254,     6,     0,
    32,   168,   245,   170,     7,   254,    42,   248,     6,     0,
    40,   168,   245,   170,     7,   171,   245,   169,   245,   169,
     5,   169,     5,   169,     5,   172,     6,     0,    33,   168,
   245,   170,     7,   254,     6,     0,    46,    34,   168,   245,
   170,     7,   254,     6,     0,    34,    56,   168,   245,   170,
     7,   254,     6,     0,    77,   168,   245,   170,     7,   254,
     6,     0,    78,   168,   245,   170,     7,   254,    82,   254,
    79,   245,     6,     0,    34,   171,   245,   172,     6,     0,
    42,    35,   168,   245,   170,     7,   254,     6,     0,   133,
    35,   168,   245,   170,     7,   245,   254,     6,     0,    43,
    35,   168,   245,   170,     7,   254,     6,     0,    78,    35,
    80,    81,   168,   245,   170,     7,   252,    82,   171,   254,
   169,   254,   172,    79,   171,   245,   169,   245,   172,     6,
     0,    78,    35,   168,   245,   170,     7,   252,    82,   171,
   254,   169,   254,   172,    79,   171,   245,   169,   245,   172,
     6,     0,    46,    35,   168,   245,   170,     7,   254,     6,
     0,    35,    56,   168,   245,   170,     7,   254,     6,     0,
    35,   171,   245,   172,     6,     0,    45,    37,   168,   245,
   170,     7,   254,     6,     0,    37,   168,   245,   170,     7,
   254,     6,     0,    46,    37,   168,   245,   170,     7,   254,
     6,     0,    51,   248,   171,   228,   172,     0,    50,   171,
   248,   169,   248,   169,   245,   172,   171,   228,   172,     0,
    52,   248,   171,   228,   172,     0,    53,   171,   248,   169,
   245,   172,   171,   228,   172,     0,   230,     0,   229,     0,
   227,     0,     0,   229,   226,     0,    55,   171,   229,   172,
     0,    59,   171,   229,   172,     0,    57,     5,     6,     0,
    30,     5,     6,     0,    88,     6,     0,    89,     5,     6,
     0,    85,   168,   245,   173,   245,   170,     0,    85,   168,
   245,   173,   245,   173,   245,   170,     0,    86,     0,    54,
    31,   171,   245,   169,   248,   172,     6,     0,    54,    31,
   171,   245,   169,   248,   169,   248,   169,   245,   172,     6,
     0,    54,    34,   171,   245,   169,   248,   172,     6,     0,
    54,    34,   171,   245,   169,   248,   169,   248,   169,   245,
   172,     6,     0,    54,    35,   171,   245,   169,   248,   172,
     6,     0,    54,    35,   171,   245,   169,   248,   169,   248,
   169,   245,   172,     6,     0,    54,    35,   171,   245,   169,
   248,   172,   171,   236,   172,     6,     0,    54,    35,   171,
   245,   169,   248,   169,   248,   169,   245,   172,   171,   236,
   172,     6,     0,   237,     0,   236,   237,     0,    64,   171,
   254,   169,   254,   169,   254,   172,     6,     0,    58,     6,
     0,    44,    34,   254,     7,   245,     6,     0,    44,    34,
   254,     7,   245,    47,    49,   245,     6,     0,    44,    34,
   254,     7,   245,    47,    48,   245,     6,     0,    44,    35,
   171,   245,   172,     7,   254,     6,     0,    41,    35,   171,
   245,   172,     7,   254,     6,     0,    44,    37,   171,   245,
   172,     7,   254,     6,     0,    58,    35,   254,     7,   245,
     6,     0,    58,    35,   254,     6,     0,    60,     6,     0,
     0,   240,   241,     0,   186,     0,     4,   174,     4,     7,
     5,     6,     0,     4,   174,     4,     7,   245,     6,     0,
     4,   174,     4,   143,   245,     6,     0,     4,   174,     4,
   144,   245,     6,     0,     4,   174,     4,   145,   245,     6,
     0,     4,   174,     4,   146,   245,     6,     0,     4,   174,
     4,   166,     6,     0,     4,   174,     4,   167,     6,     0,
     4,   174,     4,     7,   248,     6,     0,     4,   174,    83,
   174,     4,     7,   256,     6,     0,     0,   242,   243,     0,
   241,     0,    93,     0,    94,     0,    95,     0,    96,     0,
    97,     0,   246,     0,   168,   245,   170,     0,   158,   245,
     0,   157,   245,     0,   164,   245,     0,   245,   158,   245,
     0,   245,   157,   245,     0,   245,   159,   245,     0,   245,
   160,   245,     0,   245,   161,   245,     0,   245,   165,   245,
     0,   245,   153,   245,     0,   245,   154,   245,     0,   245,
   155,   245,     0,   245,   156,   245,     0,   245,   151,   245,
     0,   245,   150,   245,     0,   245,   148,   245,     0,   245,
   149,   245,     0,   245,   147,   245,     8,   245,     0,    10,
   168,   245,   170,     0,    11,   168,   245,   170,     0,    12,
   168,   245,   170,     0,    13,   168,   245,   170,     0,    14,
   168,   245,   170,     0,    15,   168,   245,   170,     0,    16,
   168,   245,   170,     0,    17,   168,   245,   170,     0,    18,
   168,   245,   170,     0,    19,   168,   245,   170,     0,    20,
   168,   245,   169,   245,   170,     0,    21,   168,   245,   170,
     0,    22,   168,   245,   170,     0,    23,   168,   245,   170,
     0,    24,   168,   245,   170,     0,    25,   168,   245,   170,
     0,    26,   168,   245,   170,     0,    27,   168,   245,   169,
   245,   170,     0,    28,   168,   245,   169,   245,   170,     0,
    29,   168,   245,   169,   245,   170,     0,     3,     0,     9,
     0,     4,     0,     4,   174,     4,     0,     4,   174,     4,
   166,     0,     4,   174,     4,   167,     0,   245,     8,   245,
     0,   245,     8,   175,   245,   176,   245,     0,   249,     0,
   158,   248,     0,   157,   248,     0,   248,   158,   248,     0,
   248,   157,   248,     0,   171,   245,   169,   245,   169,   245,
   169,   245,   169,   245,   172,     0,   171,   245,   169,   245,
   169,   245,   169,   245,   172,     0,   171,   245,   169,   245,
   169,   245,   172,     0,   168,   245,   169,   245,   169,   245,
   170,     0,     0,   168,   251,   170,     0,     5,     0,   251,
   169,     5,     0,     0,   171,   253,   172,     0,   168,   253,
   170,     0,   254,     0,   253,   169,   254,     0,     0,   245,
     0,   171,   255,   172,     0,   245,     0,   247,     0,   255,
   169,   245,     0,   255,   169,   247,     0,   171,   245,   169,
   245,   169,   245,   169,   245,   172,     0,   171,   245,   169,
   245,   169,   245,   172,     0,   171,     4,   169,   245,   172,
     0,     4,     0,     4,   174,    83,   174,     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   135,   137,   138,   145,   153,   167,   179,   181,   184,   186,
   187,   188,   191,   197,   202,   203,   204,   207,   211,   214,
   220,   225,   231,   239,   244,   248,   254,   259,   263,   268,
   272,   275,   280,   284,   288,   292,   297,   301,   304,   308,
   312,   316,   320,   324,   328,   331,   335,   338,   342,   345,
   354,   358,   364,   366,   367,   368,   369,   370,   371,   372,
   373,   374,   375,   376,   378,   379,   380,   381,   384,   395,
   400,   406,   411,   412,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   425,   428,   432,   438,   444,   447,
   451,   457,   463,   466,   470,   476,   482,   485,   489,   497,
   503,   506,   510,   518,   524,   527,   531,   539,   545,   548,
   552,   564,   570,   573,   577,   589,   595,   598,   602,   614,
   620,   623,   627,   640,   646,   649,   653,   666,   672,   675,
   679,   692,   704,   718,   729,   735,   754,   765,   773,   779,
   785,   804,   810,   826,   833,   839,   845,   851,   857,   876,
   888,   894,   913,   934,   942,   948,   954,   960,   972,   978,
   984,   996,  1002,  1007,  1012,  1019,  1021,  1022,  1025,  1030,
  1041,  1059,  1074,  1102,  1133,  1137,  1149,  1164,  1177,  1215,
  1221,  1227,  1231,  1235,  1239,  1243,  1248,  1255,  1259,  1264,
  1282,  1292,  1310,  1327,  1344,  1365,  1385,  1405,  1422,  1446,
  1457,  1459,  1462,  1466,  1478,  1495,  1512,  1529,  1546,  1563,
  1580,  1597,  1634,  1652,  1654,  1657,  1672,  1674,  1675,  1676,
  1677,  1680,  1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,
  1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,
  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,
  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,
  1720,  1723,  1725,  1726,  1735,  1752,  1769,  1788,  1795,  1808,
  1813,  1817,  1821,  1825,  1830,  1835,  1839,  1843,  1849,  1853,
  1858,  1862,  1867,  1871,  1875,  1881,  1887,  1893,  1897,  1903,
  1910,  1916,  1925,  1929,  1939,  1944,  1948,  1953,  1958
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete","tCoherence",
"tView","tOffset","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tOptions","tFor","tEndFor",
"tScript","tExit","tMerge","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tAND","tOR","tNOTEQUAL",
"tEQUAL","tAPPROXEQUAL","'<'","'>'","tLESSOREQUAL","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC","'!'","'^'","tPLUSPLUS","tMINUSMINUS",
"'('","','","')'","'{'","'}'","':'","'.'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter",
"Transfini","Coherence","Options","Option","Scripts","Script","BoolExpr","FExpr",
"FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble",
"Color", NULL
};
#endif

static const short yyr1[] = {     0,
   177,   177,   177,   178,   178,   178,   179,   179,   180,   180,
   180,   180,   181,   181,   181,   181,   181,   182,   182,   182,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   184,   184,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   186,   187,
   187,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   189,   189,   191,   190,   192,   192,
   194,   193,   195,   195,   197,   196,   198,   198,   200,   199,
   201,   201,   203,   202,   204,   204,   206,   205,   207,   207,
   209,   208,   210,   210,   212,   211,   213,   213,   215,   214,
   216,   216,   218,   217,   219,   219,   221,   220,   222,   222,
   224,   223,   225,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   227,   227,   227,   227,   228,   228,   228,   229,   229,
   230,   231,   232,   233,   233,   233,   234,   234,   234,   235,
   235,   235,   235,   235,   235,   235,   235,   236,   236,   237,
   237,   238,   238,   238,   238,   238,   238,   238,   238,   239,
   240,   240,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   242,   242,   243,   244,   244,   244,   244,
   244,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   246,   246,   246,   246,   246,   246,   247,   247,   248,
   248,   248,   248,   248,   249,   249,   249,   249,   250,   250,
   251,   251,   252,   252,   252,   253,   253,   254,   254,   254,
   255,   255,   255,   255,   256,   256,   256,   256,   256
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     4,     2,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     1,     3,     0,    13,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    19,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    25,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    31,     4,     7,     8,    12,     6,     5,     7,     7,
    12,     7,     9,    17,     7,     8,     8,     7,    11,     5,
     8,     9,     8,    22,    20,     8,     8,     5,     8,     7,
     8,     5,    11,     5,     9,     1,     1,     1,     0,     2,
     4,     4,     3,     3,     2,     3,     6,     8,     1,     8,
    12,     8,    12,     8,    12,    11,    15,     1,     2,     9,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     0,     2,     1,     6,     6,     6,     6,     6,     6,     5,
     5,     6,     8,     0,     2,     1,     1,     1,     1,     1,
     1,     1,     3,     2,     2,     2,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     5,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     1,     1,     1,     3,     4,     4,     3,     6,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     0,     1,     3,
     1,     1,     3,     3,     9,     7,     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   179,     0,     0,     0,     0,
    52,    54,    53,    55,    56,    57,    58,    59,    63,    65,
    64,    60,    61,    62,   262,   264,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   222,    12,     0,    13,    14,    16,    15,    17,
   279,   279,     0,    68,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   288,     0,
     0,     0,     0,   288,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   270,     0,     0,
     0,     0,     0,   169,     0,   288,   169,   200,     0,   288,
   288,     0,     0,     0,   201,     0,   214,   175,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   225,   224,   226,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   174,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   272,   271,     0,     0,     0,
     0,   169,   169,     0,     0,     0,     0,     0,   173,     0,
     0,     0,    72,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   176,     0,   265,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   223,     0,   239,
   240,   238,   237,   233,   234,   235,   236,   225,   224,   229,
   230,   231,   232,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   281,     0,     0,     0,     0,   133,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   291,   292,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   274,   273,   168,     0,   167,   166,     0,     0,     0,
     0,     0,   171,   170,   199,     0,   172,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    66,   203,   202,
     0,    67,   216,   215,     0,   266,   267,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,     0,   253,   254,
   255,   256,   257,   258,     0,     0,     0,   228,   227,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,    19,     0,     0,     0,   138,   288,
   288,     0,   288,   150,     0,   158,   288,   288,     0,     0,
   290,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   162,   164,     0,
     0,     0,     0,     0,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
     0,     0,   288,     0,     0,   288,     0,     0,     0,     0,
     0,     0,     0,   241,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   288,   288,     0,     0,     0,     0,
   288,   288,     0,     0,     0,     0,     0,   288,     0,   288,
     0,     0,     0,     0,     0,   282,     0,   279,     0,     0,
     0,     0,   288,     0,   288,     0,     0,     0,   268,   293,
   294,   137,     0,   288,   288,   288,   192,     0,   288,   288,
   288,   288,   288,   288,   288,     0,     0,     0,     0,     0,
     0,     0,   198,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    70,     0,     0,     0,
     0,   283,     0,     0,     0,   177,     0,     0,   252,   259,
   260,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   221,     0,     0,     0,     0,     0,     0,     0,    18,     0,
    69,   134,   142,     0,   145,     0,   139,     0,   140,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   169,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     0,   288,   288,     0,   288,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   288,     0,     0,     0,   288,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   288,     0,     0,
     0,     0,     0,     0,     0,     0,   279,     0,   147,   157,
     0,     0,   196,   151,   153,     0,     0,   195,   197,   159,
   135,   146,   156,   161,     0,   278,     0,   277,     0,     0,
   180,     0,   182,     0,   184,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   283,     0,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   210,   211,     0,
   178,     0,     0,     0,     0,     0,    21,     0,    30,     0,
    34,     0,    28,     0,     0,    33,     0,    38,    36,     0,
     0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
     0,    50,     0,     0,   143,   269,     0,   194,   193,   169,
     0,   165,     0,     0,     0,     0,     0,     0,   188,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   288,   285,   284,   288,     0,   204,
     0,   205,   212,   206,   207,   208,   209,     0,   152,     0,
     0,   283,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   288,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   276,     0,     0,     0,   191,
   288,     0,   189,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   287,     0,
     0,   298,     0,     0,     0,    35,     0,     0,     0,     0,
    25,     0,    31,     0,    37,    26,    39,     0,    42,     0,
    46,    47,     0,     0,    49,     0,     0,     0,   163,     0,
     0,     0,     0,     0,   186,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   288,
   288,   149,     0,   264,     0,   213,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   275,   181,   183,   185,     0,   288,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    87,    91,    95,   136,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    29,    32,    40,     0,    41,    48,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   288,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   288,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   299,   297,     0,     0,     0,     0,    24,    27,
     0,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    85,     0,    89,     0,    93,
     0,     0,     0,     0,     0,   288,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   296,     0,
     0,     0,    44,    20,   144,   190,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    86,    88,    90,    92,    94,
    96,     0,     0,     0,     0,     0,   288,     0,     0,     0,
     0,     0,     0,    99,   103,   107,     0,     0,   295,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,   288,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   155,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    97,     0,   101,     0,
   105,     0,   288,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   154,     0,    22,     0,
     0,     0,     0,     0,     0,    98,   100,   102,   104,   106,
   108,   288,     0,     0,     0,   111,   115,   119,     0,     0,
     0,     0,     0,     0,     0,   288,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,     0,   113,
     0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   110,   112,   114,   116,
   118,   120,     0,   123,   127,   131,    23,     0,     0,     0,
     0,     0,     0,     0,   121,     0,   125,     0,   129,     0,
     0,     0,     0,     0,     0,   122,   124,   126,   128,   130,
   132,     0,     0,     0
};

static const short yydefgoto[] = {  1412,
     4,     5,    18,    19,    20,    21,     6,    61,   439,    63,
   429,  1185,   559,  1131,  1187,   560,  1132,  1189,   561,  1133,
  1296,   562,  1269,  1298,   563,  1270,  1300,   564,  1271,  1357,
   565,  1343,  1359,   566,  1344,  1361,   567,  1345,  1394,   568,
  1388,  1396,   569,  1389,  1398,   570,  1390,    64,   424,   414,
   415,   416,   417,    68,    69,    70,    71,    72,   928,   929,
    73,    74,   300,   440,   302,   444,   712,   261,   103,   394,
   276,   148,   243,   376,   774,   863,   864,   395,  1014
};

static const short yypact[] = {   499,
-32768,-32768,   -86,-32768,    33,  1650,  1152,     1,    78,   118,
   120,   127,   129,   131,   -12,    46,    73,-32768,-32768,-32768,
-32768,   152,   248,    40,  -143,    92,   100,   -46,   -44,   113,
   124,   246,   128,   252,   283,   290,   208,   279,   181,   188,
  -110,  -110,   200,   259,   202,   347,   342,   209,   372,   374,
    68,   234,   -32,   213,   243,-32768,   220,   390,   408,   394,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   257,-32768,   273,   288,   294,
   317,   319,   323,   324,   326,   327,   328,   329,   333,   335,
   336,   337,   338,   340,   341,   343,   346,  1152,  1152,  1152,
  1152,  1418,-32768,-32768,  1686,-32768,-32768,-32768,-32768,-32768,
   348,   348,   444,-32768,  1152,   449,   475,  1152,  1152,  1152,
  1152,   349,  1152,  1152,   351,  1152,  1152,  1152,   868,  1152,
   339,   352,   353,   868,   344,   354,   355,   356,   358,   359,
   387,  -110,  -110,  -110,  1152,  1152,   -74,-32768,   -71,  -110,
   385,   386,   388,-32768,   516,   868,-32768,-32768,   -56,   868,
   868,  1152,   -72,  1152,-32768,  1152,-32768,-32768,   552,   392,
   557,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
  1152,   397,   397,   397,  2336,  1152,  1152,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
  1418,   395,   398,   401,   430,   431,   432,   434,   435,   438,
   447,   448,   450,   451,   452,   454,   455,   456,   457,   459,
   460,   461,   462,   463,   464,   467,   469,   470,   476,   477,
   478,   612,   474,   490,   492,   267,-32768,   493,  2360,  1440,
  2384,  2408,  1152,  2432,  1930,  1152,  1967,  2456,  2480,  1152,
  6286,   640,  2504,  1152,  1152,  1152,   656,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,    62,-32768,-32768,  3848,  3871,  -110,
  -110,   298,   298,   119,  1152,  1152,  1152,  1507,-32768,   103,
  1583,  -110,-32768,   657,   658,  2528,   585,  1152,  2552,    13,
  1797,    14,-32768,  1152,  -107,  2576,  2600,  2624,  2648,  2672,
  2696,  2720,  2744,  2768,  2792,  3894,  2816,  2840,  2864,  2888,
  2912,  2936,  3917,  3940,  3963,  1152,  1152,-32768,  1347,    79,
    79,   417,   417,   287,   287,   287,   287,  -141,  -136,   397,
   397,   397,   397,  1824,   662,   663,   664,   667,   668,   669,
   670,   672,   673,   674,   675,   676,   679,   680,   681,   682,
   683,   685,   686,   687,   689,   690,   692,   572,   694,   695,
   696,   697,   700,   699,-32768,   -20,   702,   718,   703,-32768,
  1152,   698,   719,   721,   724,  2960,   725,   720,  2984,   727,
   728,   729,  1368,-32768,   -41,  1152,   730,  1987,  3008,  3032,
  1152,  2007,  2027,  3056,  3080,  3104,  3128,  3152,  -110,  1152,
  1152,-32768,-32768,-32768,   566,  1599,-32768,   568,  1152,  3986,
  4009,  4032,-32768,-32768,-32768,  1152,-32768,   -68,   233,   563,
   571,   737,   582,  3176,   753,   590,   597,-32768,-32768,-32768,
  1152,-32768,-32768,-32768,  3200,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1152,-32768,-32768,
-32768,-32768,-32768,-32768,  1152,  1152,  1152,    91,    91,  1152,
   627,   599,   605,   606,   607,   608,   609,   611,   613,   614,
   615,   616,   617,   618,   619,   620,   621,   623,   624,   625,
   626,   628,   632,   633,   634,   635,   637,   638,   639,   641,
   642,   807,-32768,   643,-32768,   659,  3224,  -110,-32768,   868,
   868,   822,   868,-32768,   824,-32768,   868,   868,    53,  1152,
-32768,   436,   661,   826,   827,   828,   207,   829,   830,   831,
   832,   833,   846,   847,   126,  4055,  4078,-32768,-32768,  2047,
  -110,  -110,  -110,   562,-32768,   688,   691,   693,   701,   705,
   706,   707,   732,   733,   735,   736,   738,   849,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1152,  1152,   868,  1152,   850,   868,    15,  1769,   851,  3248,
  3272,  3296,  3320,  6286,   731,   863,  1152,  1152,  -110,   867,
   895,   746,   905,   906,   868,   868,   907,  -110,   908,   909,
   868,   868,   910,   911,   912,   916,   918,   868,   313,   868,
   919,   860,   920,   921,   923,-32768,   922,   348,   924,    -4,
     7,   925,   868,   926,   868,   946,   947,  1152,  6286,  1368,
-32768,-32768,  1152,   868,   868,   868,-32768,   174,   868,   868,
   868,   868,   868,   868,   868,  1152,  1152,  1152,   756,  -131,
  -118,   117,-32768,   751,  1152,  1152,  1152,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  1152,-32768,  4101,  4124,   948,
  3344,   101,   874,    81,   783,-32768,  1152,  1152,-32768,-32768,
-32768,-32768,  1152,   791,  4147,  4170,   -52,   792,   789,   793,
   794,   796,   797,   799,   800,    -6,   801,   802,   803,   806,
   808,   810,   812,   813,   814,   815,-32768,-32768,-32768,-32768,
-32768,   817,   834,   835,   836,   838,   844,   855,-32768,   859,
-32768,-32768,-32768,  -110,-32768,   957,-32768,   970,-32768,-32768,
  1688,  4193,   978,   993,   994,  1152,  1152,   995,   996,  1023,
  1024,  1025,  1027,  1028,  2067,  3368,  1843,   298,  -110,  1029,
  -110,  1031,  -110,    17,  1032,  4216,  4239,  4262,  4285,  4308,
  4331,  4354,  4377,  4400,  4423,  4446,  4469,  1152,  1152,-32768,
  1038,   868,   868,   973,   868,   525,  1152,  1152,  1152,  1152,
  1050,  1051,  1055,  3392,   318,  1418,  1063,  1152,   868,  1070,
  1074,  1083,   931,  1085,   313,  1086,  1090,  1152,  1120,  1093,
  1130,  1131,  1135,   313,  1152,  1152,  1152,   868,  1134,  1138,
   313,  1152,  1151,  1154,  1176,  1152,   348,     3,-32768,-32768,
  1152,  1152,-32768,-32768,-32768,   598,   790,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   989,-32768,  1152,-32768,  1011,   157,
-32768,   212,-32768,   218,-32768,    43,-32768,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  4492,
  4515,   101,   154,-32768,   216,  1013,  1107,  1182,  1091,  1091,
  1152,   862,     5,   893,   914,   974,  1072,-32768,-32768,  1183,
-32768,  1185,  1418,  1019,  4538,  1035,-32768,  1037,-32768,  1039,
-32768,  1022,-32768,  1040,  3416,-32768,  1041,-32768,-32768,  1042,
  1044,  3440,  4561,  3464,  1046,-32768,  1047,  1048,  4584,  1065,
  1054,-32768,  4607,  1069,-32768,  6286,  4630,-32768,-32768,   298,
  1874,-32768,  1152,  1152,  1152,  1187,  1045,   -43,-32768,  4653,
  4676,  4699,  4722,  4745,  4768,  4791,  4814,  4837,  4860,  4883,
  4906,  1152,  1152,  1157,   868,-32768,-32768,   868,  1152,-32768,
  2312,-32768,-32768,-32768,-32768,-32768,-32768,    16,-32768,  1718,
  1234,   101,   313,  1244,  1152,  1245,   313,  1246,  1247,  1248,
  1250,  1251,  1152,  1252,   868,  1254,  1255,  1152,  1260,  1258,
  1152,  1261,  1262,  1081,  1152,-32768,  2087,  2107,  2127,-32768,
   868,  1263,-32768,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  2147,  2167,  1097,-32768,  1110,
  1328,  1106,  1445,  1275,  1152,-32768,  1113,  1116,  1118,  4929,
-32768,  1119,-32768,  1122,-32768,-32768,-32768,  3488,-32768,  1124,
-32768,-32768,  3512,  1125,-32768,  3536,  1127,  1128,-32768,  2187,
  1282,  1288,    36,  1136,-32768,  4952,  4975,  4998,  5021,  5044,
  5067,  5090,  5113,  5136,  3560,  3584,  3608,  1301,  1305,   868,
   868,-32768,  1229,  -119,  5159,-32768,  1418,   313,   313,   313,
   313,  1307,  1308,  1309,   313,  1311,  1312,  1313,  1316,  1317,
-32768,-32768,-32768,-32768,    43,   868,  1152,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,-32768,-32768,-32768,-32768,-32768,
  1155,  1153,  1149,  1152,  1152,  1418,  1160,  1161,  1162,  1163,
-32768,-32768,-32768,  1166,-32768,-32768,-32768,  1167,  1168,   -42,
  1169,  5182,  5205,  5228,  5251,  5274,  5297,  5320,  5343,  5366,
  1177,  1179,  1180,   868,  1268,  1327,  2207,  5389,  1744,   313,
   313,  1333,  1346,   313,  1348,  1349,  1350,   868,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
  1189,  1192,-32768,-32768,  1152,  1152,  1196,  1197,-32768,-32768,
  1200,  1201,  1195,-32768,  1205,  5412,  5435,  5458,  5481,  5504,
  5527,  5550,  5573,  5596,   221,  6286,   223,  6286,   228,  6286,
  1293,  1152,  1902,  1418,   313,   868,  1367,  1372,  1373,  1374,
  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
  1376,  1152,  1381,  1152,  1382,  1218,  5619,  1152,-32768,  1418,
  1221,  1222,-32768,-32768,-32768,-32768,  5642,  5665,  5688,  5711,
  5734,  5757,  3632,  3656,  3680,  6286,-32768,  6286,-32768,  6286,
-32768,  1152,  1152,  2227,  2293,   313,   868,  1152,  1152,  1152,
  1152,  1152,  1152,-32768,-32768,-32768,  5780,  2247,-32768,  1257,
  1223,  1225,  5803,  5826,  5849,  5872,  5895,  5918,  1230,  1231,
  1232,  1152,  1394,-32768,   868,   313,  1152,  1152,  1152,  1152,
  1152,  1152,  1152,  1152,  1152,  2267,-32768,  1235,  1236,  5941,
  5964,  5987,  6010,  6033,  6056,   229,  6286,   261,  6286,   266,
  6286,  1399,   868,  1404,  1152,  1152,  1152,  1152,  1152,  1152,
  1152,  1405,  1152,  1413,  1152,  1414,-32768,  1256,-32768,  6079,
  6102,  6125,  3704,  3728,  3752,  6286,-32768,  6286,-32768,  6286,
-32768,   868,  1152,  1152,  1152,-32768,-32768,-32768,  1281,  6148,
  6171,  6194,  1253,  1280,  1319,   868,  1152,  1152,  1152,  1152,
  1152,  1152,  1283,  6217,  6240,  6263,   271,  6286,   281,  6286,
   285,  6286,   313,  1152,  1152,  1152,  1152,  1417,  1152,  1420,
  1152,  1447,  1310,  3776,  3800,  3824,  6286,-32768,  6286,-32768,
  6286,-32768,  1485,-32768,-32768,-32768,-32768,  1321,  1338,  1339,
  1152,  1152,  1152,   292,  6286,   312,  6286,   321,  6286,  1152,
  1493,  1152,  1505,  1152,  1508,  6286,-32768,  6286,-32768,  6286,
-32768,  1513,  1520,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1524,-32768,
   986,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1526,  1528,
  -278,   282,  1529,-32768,-32768,-32768,-32768,-32768,   466,  -914,
-32768,-32768,-32768,  1259,-32768,-32768,  -758,    -7,-32768,  1016,
   -10,-32768,  -111,-32768,  -858,   764,   773,-32768,-32768
};


#define	YYLAST		6451


static const short yytable[] = {   102,
   244,   722,   163,   944,   418,   292,   104,   297,   915,   122,
   953,   125,   723,   993,   926,   926,   436,   436,   674,  1012,
   927,   927,   845,   210,   118,   280,   281,   119,   210,  -228,
   147,   149,    -1,     8,  -227,     9,   892,   749,   280,   281,
   750,  1084,   437,   437,   116,   901,   143,   144,   724,  1104,
   751,     7,   908,   752,   171,    75,    76,   145,   446,   447,
   146,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   280,   281,   105,   280,   281,   776,   280,   281,
   192,   193,   194,   195,   211,   298,   282,   675,   160,   283,
   926,   161,   545,  1017,   280,   281,   927,   246,   425,   426,
   249,   250,   251,   252,   293,   254,   255,   790,   257,   258,
   259,   123,   263,   106,   124,   107,   126,   520,   992,  1147,
   521,   275,   108,   277,   109,   164,   110,   278,   279,   284,
    10,    11,    12,    13,    14,    15,    16,    17,   502,   503,
   280,   281,   280,   281,   296,   111,   299,   114,   301,   280,
   281,   280,   281,   799,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   438,   442,  1013,   846,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   344,  1018,   993,  1085,   117,  1022,    98,
    99,   138,   637,   112,   139,   140,   100,   141,   280,   281,
   101,   736,   737,   777,   778,   779,   780,   628,   199,   200,
   409,   201,   202,   203,   204,   326,   327,   207,   208,   209,
   113,   134,   135,   210,   136,   386,   781,   782,   389,   207,
   208,   209,   393,   638,   115,   210,   398,   399,   400,   120,
   402,   403,   404,   405,   406,   407,   408,   121,   772,   412,
   413,   773,   380,   280,   281,   280,   281,   420,   421,   422,
   127,   428,   280,   281,   129,   753,   131,   419,   754,   151,
   434,   128,   152,   153,   646,   130,   445,   546,   547,   548,
   549,   550,   551,   552,   553,   554,   555,   556,   557,  1107,
  1108,  1109,  1110,   280,   281,   137,  1114,   132,   468,   469,
    75,    76,   945,   946,   133,   923,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    40,    41,    42,
    43,   155,    45,   196,   197,   198,   199,   200,   142,   201,
   202,   203,   204,   326,   327,   207,   208,   209,   280,   281,
   150,   210,   154,   507,   280,   281,   156,   158,   159,   157,
   924,  1167,  1168,   165,   945,  1171,   925,   947,   522,  1210,
   167,  1212,  1211,   527,  1213,   168,  1214,  1311,   535,  1215,
  1312,   162,   536,   537,   558,   707,   708,   709,   710,   711,
   166,   540,   169,   196,   197,   198,   199,   200,   544,   201,
   202,   203,   204,   326,   327,   207,   208,   209,   170,  1313,
   171,   210,  1314,   578,  1315,   288,  1221,  1316,   291,  1367,
   172,   632,  1368,   326,   327,   207,   208,   209,   245,  1369,
   580,   210,  1370,  1371,   247,   173,  1372,   581,   582,   583,
  1400,   174,   584,  1401,   196,   197,   198,   199,   200,   839,
   201,   202,   203,   204,   205,   206,   207,   208,   209,   248,
  1402,   100,   210,  1403,   175,   101,   176,  1261,   260,  1404,
   177,   178,  1405,   179,   180,   181,   182,   620,    -7,    -7,
   183,    -7,   184,   185,   186,   187,   720,   188,   189,   264,
   190,   629,   630,   191,   268,   242,   253,  1289,   256,   265,
   266,   289,   270,   271,   269,   272,   273,    75,    76,   868,
   650,   651,   652,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,   274,   285,   286,   303,   287,   304,
   305,   210,   345,   668,   669,   346,   671,   653,   347,   201,
   202,   203,   204,   326,   327,   207,   208,   209,   687,   685,
   686,   210,   196,   197,   198,   199,   200,   696,   201,   202,
   203,   204,   326,   327,   207,   208,   209,   348,   349,   350,
   210,   351,   352,   918,  1373,   353,    -7,    -7,    -7,    -7,
    -7,    -7,    -7,    -7,   354,   355,   375,   356,   357,   358,
   731,   359,   360,   361,   362,   732,   363,   364,   365,   366,
   367,   368,     1,     2,   369,     3,   370,   371,   745,   746,
   747,   984,   377,   372,   373,   374,   396,   756,   757,   758,
   759,   760,   761,   762,   763,   764,   765,   766,   767,   378,
   379,   381,   401,   430,   431,   433,   472,   473,   474,   784,
   785,   475,   476,   477,   478,   786,   479,   480,   481,   482,
   483,   869,   870,   484,   485,   486,   487,   488,   100,   489,
   490,   491,   871,   492,   493,   146,   494,   495,   496,   497,
   498,   499,   500,   501,   508,   914,   504,   506,   196,   197,
   198,   199,   200,   818,   201,   202,   203,   204,   326,   327,
   207,   208,   209,   505,   509,   514,   210,   510,   826,   827,
   511,   513,   516,   571,   517,   518,   523,   538,   840,   539,
   842,   572,   844,   573,   196,   197,   198,   199,   200,   574,
   201,   202,   203,   204,   326,   327,   207,   208,   209,   576,
   860,   861,   210,   577,   117,   873,   585,   586,   872,   874,
   875,   876,   877,   587,   588,   589,   590,   591,   883,   592,
   885,   593,   594,   595,   596,   597,   598,   599,   600,   601,
   895,   602,   603,   604,   605,   919,   606,   902,   903,   904,
   607,   608,   609,   610,   909,   611,   612,   613,   913,   614,
   615,   616,   617,   916,   917,   546,   547,   548,   549,   550,
   551,   552,   553,   554,   555,   556,   557,   618,   623,   921,
   625,   633,   634,   635,   636,   639,   640,   641,   642,   643,
   930,   931,   932,   933,   934,   935,   936,   937,   938,   939,
   940,   941,   644,   645,   667,   655,   672,   678,   656,   277,
   657,   192,   193,   951,   715,   684,   683,   952,   658,   688,
    75,    76,   659,   660,   661,   960,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   689,   954,   662,
   663,   262,   664,   665,   690,   666,   267,   691,   692,   695,
   697,   698,   701,   702,   703,   987,   988,   989,   704,   955,
   705,   714,   755,   717,   716,   718,   748,   719,   290,   721,
   725,   727,   294,   295,  1006,  1007,   196,   197,   198,   199,
   200,  1011,   201,   202,   203,   204,   326,   327,   207,   208,
   209,   729,   730,   770,   210,   775,   783,  1020,   792,   787,
   791,   793,   819,   794,   795,  1028,   796,   797,   798,   800,
  1033,   801,   802,  1036,   803,   820,   804,  1040,   805,   956,
   806,   807,   808,   823,   809,   810,  1046,  1047,  1048,  1049,
  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,   824,   825,
   828,   829,   811,   812,   813,  1065,   814,  1067,   196,   197,
   198,   199,   200,   815,   201,   202,   203,   204,   326,   327,
   207,   208,   209,   816,    98,    99,   210,   817,   830,   831,
   832,   100,   833,   834,   841,   101,   843,   847,   260,   196,
   197,   198,   199,   200,   862,   201,   202,   203,   204,   326,
   327,   207,   208,   209,   866,   878,   879,   210,   880,  1106,
   196,   197,   198,   199,   200,   884,   201,   202,   203,   204,
   326,   327,   207,   208,   209,   887,   888,   957,   210,  1122,
  1123,  1124,  1125,  1126,  1127,  1128,  1129,  1130,   889,   890,
   891,   893,   894,    75,    76,   897,  1137,  1138,  1139,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
   196,   197,   198,   199,   200,   896,   201,   202,   203,   204,
   326,   327,   207,   208,   209,   898,   899,   900,   210,   906,
   907,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,  1184,
  1186,  1188,  1190,   910,    75,    76,   911,  1193,  1194,   920,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,   912,   922,   948,  1217,   949,  1220,   950,   961,   958,
   959,   966,   990,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
  1234,  1235,  1236,   963,  1238,   964,  1240,   965,   967,   969,
  1244,   970,  1245,   971,   975,   991,   976,   977,   196,   197,
   198,   199,   200,   980,   201,   202,   203,   204,   326,   327,
   207,   208,   209,   979,  1257,  1258,   210,   982,  1008,  1016,
  1263,  1264,  1265,  1266,  1267,  1268,  1019,   869,   870,  1024,
  1021,  1023,  1039,  1025,   100,  1026,  1027,  1029,   871,  1031,
  1032,   146,  1034,  1035,  1286,  1037,  1038,  1060,  1045,  1290,
  1291,  1292,  1293,  1294,  1295,  1297,  1299,  1301,  1061,  1063,
  1066,  1068,   621,   622,  1069,   624,  1070,  1082,  1072,   626,
   627,  1073,  1075,  1083,  1077,  1079,  1080,  1320,  1321,  1322,
  1323,  1324,  1325,  1326,  1086,  1328,  1099,  1330,    98,    99,
  1100,  1103,  1111,  1112,  1113,   100,  1115,  1116,  1117,   101,
  1118,  1119,  1136,  1134,  1135,  1340,  1341,  1342,  1140,  1141,
  1163,  1142,  1143,  1062,  1144,  1145,  1146,  1148,  1169,  1354,
  1355,  1356,  1358,  1360,  1362,   670,  1162,  1158,   673,  1159,
  1160,  1170,  1172,  1173,   470,  1174,  1374,  1375,  1376,  1377,
  1191,  1379,  1192,  1381,  1195,  1196,  1199,   693,   694,  1197,
  1198,  1216,  1223,   699,   700,   519,  1200,  1224,  1225,  1226,
   706,  1237,   713,  1395,  1397,  1399,  1239,  1241,  1242,  1246,
  1247,  1275,  1406,  1276,  1408,   726,  1410,   728,  1274,  1287,
  1283,  1284,  1285,  1303,  1317,  1304,   733,   734,   735,  1319,
  1327,   738,   739,   740,   741,   742,   743,   744,  1329,  1331,
    75,    76,  1378,  1350,  1332,  1380,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    75,  1064,  1346,
  1351,  1363,  1382,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,   196,   197,   198,   199,   200,  1383,
   201,   202,   203,   204,   326,   327,   207,   208,   209,  1352,
  1387,  1391,   210,   196,   197,   198,   199,   200,  1407,   201,
   202,   203,   204,   326,   327,   207,   208,   209,  1392,  1393,
  1409,   210,  1413,  1411,   196,   197,   198,   199,   200,  1414,
   201,   202,   203,   204,   326,   327,   207,   208,   209,    62,
   654,    65,   210,    66,    67,   631,   865,    25,    26,    27,
    28,    29,    30,    31,    32,     0,    33,   867,    35,    36,
  1120,    38,    39,     0,     0,     0,     0,   882,     0,     0,
   443,   886,     0,     0,   196,   197,   198,   199,   200,    51,
   201,   202,   203,   204,   205,   206,   207,   208,   209,     0,
   905,   100,   210,    52,    53,   101,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,    98,    99,     0,   210,     0,     0,     0,   100,     0,
     0,   383,   101,    25,    26,    27,    28,    29,    30,    31,
    32,     0,    33,     0,    35,    36,     0,    38,    39,    25,
    26,    27,    28,    29,    30,    31,    32,     0,    33,    60,
    35,    36,     0,    38,    39,    51,     0,     0,     0,    -3,
    22,     0,     0,    23,     0,     0,     0,     0,     0,    52,
    53,    51,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    52,    53,     0,   423,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     0,    33,
    34,    35,    36,    37,    38,    39,     0,     0,     0,    40,
    41,    42,    43,    44,    45,     0,    46,    47,    48,    49,
    50,     0,    51,     0,     0,    60,     0,  1009,     0,   212,
  1010,     0,     0,     0,     0,     0,    52,    53,     0,     0,
     0,    60,     0,    54,    55,    56,    57,    58,    59,     0,
     0,     0,     0,     0,     0,     0,     0,  1030,     0,     0,
     0,     0,     0,     0,   427,     0,     0,     0,     0,     0,
     0,     0,     0,  1044,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   213,   214,   215,     0,     0,
     0,     0,    60,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,     0,     0,     0,     0,     0,     0,     0,
     0,   226,   227,   228,   229,   230,   231,   232,   233,   234,
   235,     0,   236,   237,   238,   239,   240,   241,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1101,  1102,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,  1015,     0,     0,     0,     0,  1121,     0,
     0,     0,     0,   821,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,  1166,
     0,     0,   210,     0,     0,     0,     0,     0,     0,     0,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,  1161,     0,   210,     0,
     0,     0,     0,     0,     0,   196,   197,   198,   199,   200,
  1175,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,     0,   676,     0,
     0,   677,     0,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,   471,     0,     0,     0,     0,     0,  1222,   441,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,   837,     0,     0,   838,     0,     0,     0,     0,  1262,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,   985,     0,     0,   986,     0,  1288,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1218,     0,     0,  1219,     0,  1318,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,     0,
     0,   388,     0,     0,  1339,     0,     0,     0,     0,     0,
     0,     0,     0,   196,   197,   198,   199,   200,  1353,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,   390,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,   524,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,   528,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,   529,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,   649,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,   835,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1041,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1042,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1043,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1058,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1059,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1081,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1164,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1259,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,   196,   197,   198,   199,   200,  1273,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,  1260,     0,     0,     0,     0,  1302,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
   410,   328,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   328,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   382,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   384,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   385,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   387,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   391,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   392,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   397,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   432,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   435,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   448,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   449,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   450,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   451,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   452,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   453,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   454,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   455,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   456,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   457,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   459,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   460,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   461,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   462,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   463,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   464,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   512,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   515,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   525,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   526,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   530,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   531,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   532,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   533,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   534,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   575,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   579,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   619,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   679,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   680,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   681,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   682,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   771,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,   836,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,   881,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,   968,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,   972,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,   974,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,  1074,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,  1076,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,  1078,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,  1096,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,  1097,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,  1098,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,  1254,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,  1255,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,  1256,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,  1336,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,     0,  1337,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
     0,  1338,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,     0,  1384,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,     0,  1385,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,     0,  1386,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,   410,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,   411,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,   458,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,   465,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,   466,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,   467,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,   541,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,   542,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
   543,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,   647,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,   648,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,   768,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,   769,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,   788,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,   789,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,   822,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,   848,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,   849,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
   850,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,   851,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,   852,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,   853,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,   854,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,   855,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,   856,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,   857,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,   858,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,   859,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
   942,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,   943,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,   962,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,   973,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,   978,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,   981,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,   983,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,   994,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,   995,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,   996,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
   997,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,   998,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,   999,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1000,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1001,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1002,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1003,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1004,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,  1005,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,  1071,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1087,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,  1088,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,  1089,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1090,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1091,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1092,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1093,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1094,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,  1095,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,  1105,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1149,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,  1150,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,  1151,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1152,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1153,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1154,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1155,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1156,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,  1157,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,  1165,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1201,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,  1202,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,  1203,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1204,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1205,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1206,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1207,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1208,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,  1209,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,  1243,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1248,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,  1249,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,  1250,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1251,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1252,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1253,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1272,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1277,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,  1278,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,  1279,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1280,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,  1281,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,  1282,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1305,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1306,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1307,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1308,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1309,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210,     0,     0,     0,  1310,   196,   197,   198,   199,   200,
     0,   201,   202,   203,   204,   326,   327,   207,   208,   209,
     0,     0,     0,   210,     0,     0,     0,  1333,   196,   197,
   198,   199,   200,     0,   201,   202,   203,   204,   326,   327,
   207,   208,   209,     0,     0,     0,   210,     0,     0,     0,
  1334,   196,   197,   198,   199,   200,     0,   201,   202,   203,
   204,   326,   327,   207,   208,   209,     0,     0,     0,   210,
     0,     0,     0,  1335,   196,   197,   198,   199,   200,     0,
   201,   202,   203,   204,   326,   327,   207,   208,   209,     0,
     0,     0,   210,     0,     0,     0,  1347,   196,   197,   198,
   199,   200,     0,   201,   202,   203,   204,   326,   327,   207,
   208,   209,     0,     0,     0,   210,     0,     0,     0,  1348,
   196,   197,   198,   199,   200,     0,   201,   202,   203,   204,
   326,   327,   207,   208,   209,     0,     0,     0,   210,     0,
     0,     0,  1349,   196,   197,   198,   199,   200,     0,   201,
   202,   203,   204,   326,   327,   207,   208,   209,     0,     0,
     0,   210,     0,     0,     0,  1364,   196,   197,   198,   199,
   200,     0,   201,   202,   203,   204,   326,   327,   207,   208,
   209,     0,     0,     0,   210,     0,     0,     0,  1365,   196,
   197,   198,   199,   200,     0,   201,   202,   203,   204,   326,
   327,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     0,  1366,   196,   197,   198,   199,   200,     0,   201,   202,
   203,   204,   326,   327,   207,   208,   209,     0,     0,     0,
   210
};

static const short yycheck[] = {     7,
   112,     6,    35,   862,   283,    62,     6,    80,     6,    56,
     6,    56,     6,   928,    58,    58,     4,     4,     4,     4,
    64,    64,     6,   165,   168,   157,   158,   171,   165,   171,
    41,    42,     0,     1,   171,     3,   795,   169,   157,   158,
   172,     6,    30,    30,     5,   804,   157,   158,    42,   169,
   169,   138,   811,   172,   174,     3,     4,   168,   166,   167,
   171,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   157,   158,     7,   157,   158,     7,   157,   158,
    98,    99,   100,   101,   102,   168,   171,    83,    31,   171,
    58,    34,   171,   962,   157,   158,    64,   115,     6,     7,
   118,   119,   120,   121,   171,   123,   124,   170,   126,   127,
   128,   168,   130,     6,   171,     6,   171,   169,   172,   172,
   172,   142,     6,   144,     6,   168,     6,   145,   146,   150,
   108,   109,   110,   111,   112,   113,   114,   115,   169,   170,
   157,   158,   157,   158,   162,   168,   164,     6,   166,   157,
   158,   157,   158,   170,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   172,   172,   171,   171,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   963,  1120,   171,   168,   967,   157,
   158,    31,     6,   168,    34,    35,   164,    37,   157,   158,
   168,    48,    49,   143,   144,   145,   146,   175,   150,   151,
   169,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   168,    34,    35,   165,    37,   253,   166,   167,   256,   159,
   160,   161,   260,    47,     7,   165,   264,   265,   266,   168,
   268,   269,   270,   271,   272,   273,   274,   168,   168,   280,
   281,   171,     6,   157,   158,   157,   158,   285,   286,   287,
   168,   292,   157,   158,    39,   169,    35,   169,   172,    31,
   298,   168,    34,    35,   169,   168,   304,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,  1068,
  1069,  1070,  1071,   157,   158,    37,  1075,    35,   326,   327,
     3,     4,   169,   170,    35,   169,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    50,    51,    52,
    53,     5,    55,   147,   148,   149,   150,   151,   171,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   157,   158,
   171,   165,   171,   381,   157,   158,    35,     6,     5,   171,
   169,  1140,  1141,   171,   169,  1144,   169,   172,   396,   169,
   171,   169,   172,   401,   172,     6,   169,   169,   409,   172,
   172,   168,   410,   411,   172,    93,    94,    95,    96,    97,
   168,   419,     5,   147,   148,   149,   150,   151,   426,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    35,   169,
   174,   165,   172,   441,   169,   154,  1195,   172,   157,   169,
   168,     6,   172,   157,   158,   159,   160,   161,     5,   169,
   458,   165,   172,   169,     6,   168,   172,   465,   466,   467,
   169,   168,   470,   172,   147,   148,   149,   150,   151,   748,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     5,
   169,   164,   165,   172,   168,   168,   168,  1246,   171,   169,
   168,   168,   172,   168,   168,   168,   168,   508,     0,     1,
   168,     3,   168,   168,   168,   168,   618,   168,   168,   171,
   168,   519,   520,   168,   171,   168,   168,  1276,   168,   168,
   168,     6,   168,   168,   171,   168,   168,     3,     4,     5,
   541,   542,   543,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   168,   171,   171,     6,   171,   168,
     4,   165,   168,   571,   572,   168,   574,     6,   168,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   589,   587,
   588,   165,   147,   148,   149,   150,   151,   598,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   168,   168,   168,
   165,   168,   168,     6,  1363,   168,   108,   109,   110,   111,
   112,   113,   114,   115,   168,   168,     5,   168,   168,   168,
   628,   168,   168,   168,   168,   633,   168,   168,   168,   168,
   168,   168,   134,   135,   168,   137,   168,   168,   646,   647,
   648,   920,   169,   168,   168,   168,     7,   655,   656,   657,
   658,   659,   660,   661,   662,   663,   664,   665,   666,   170,
   169,   169,     7,     7,     7,    81,     5,     5,     5,   677,
   678,     5,     5,     5,     5,   683,     5,     5,     5,     5,
     5,   157,   158,     5,     5,     5,     5,     5,   164,     5,
     5,     5,   168,     5,     5,   171,     5,   126,     5,     5,
     5,     5,     3,     5,     7,   817,     5,     5,   147,   148,
   149,   150,   151,   724,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     6,     6,     6,   165,     7,   736,   737,
     7,     7,     6,   171,     7,     7,     7,   172,   749,   172,
   751,   171,   753,     7,   147,   148,   149,   150,   151,   168,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     7,
   768,   769,   165,   174,   168,   776,   140,   169,   776,   777,
   778,   779,   780,   169,   169,   169,   169,   169,   786,   169,
   788,   169,   169,   169,   169,   169,   169,   169,   169,   169,
   798,   169,   169,   169,   169,     6,   169,   805,   806,   807,
   169,   169,   169,   169,   812,   169,   169,   169,   816,   169,
   169,     5,   170,   821,   822,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,   169,     7,   837,
     7,   171,     7,     7,     7,     7,     7,     7,     7,     7,
   848,   849,   850,   851,   852,   853,   854,   855,   856,   857,
   858,   859,     7,     7,     6,   168,     7,     7,   168,   870,
   168,   869,   870,   871,     5,     3,   136,     6,   168,     3,
     3,     4,   168,   168,   168,   883,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,     3,     6,   168,
   168,   129,   168,   168,   159,   168,   134,     3,     3,     3,
     3,     3,     3,     3,     3,   923,   924,   925,     3,     6,
     3,     3,   172,     3,     5,     3,   171,     6,   156,     6,
     6,     6,   160,   161,   942,   943,   147,   148,   149,   150,
   151,   949,   153,   154,   155,   156,   157,   158,   159,   160,
   161,     6,     6,     6,   165,    82,   174,   965,   170,   169,
   169,   169,     6,   170,   169,   973,   170,   169,   169,   169,
   978,   170,   170,   981,   169,     6,   169,   985,   169,     6,
   169,   169,   169,     6,   170,   169,   994,   995,   996,   997,
   998,   999,  1000,  1001,  1002,  1003,  1004,  1005,     6,     6,
     6,     6,   169,   169,   169,  1013,   169,  1015,   147,   148,
   149,   150,   151,   170,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   169,   157,   158,   165,   169,     6,     6,
     6,   164,     6,     6,     6,   168,     6,     6,   171,   147,
   148,   149,   150,   151,     7,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    82,     6,     6,   165,     4,  1067,
   147,   148,   149,   150,   151,     3,   153,   154,   155,   156,
   157,   158,   159,   160,   161,     6,     3,     6,   165,  1087,
  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,     6,   159,
     6,     6,     3,     3,     4,     3,  1104,  1105,  1106,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
   147,   148,   149,   150,   151,     6,   153,   154,   155,   156,
   157,   158,   159,   160,   161,     6,     6,     3,   165,     6,
     3,  1149,  1150,  1151,  1152,  1153,  1154,  1155,  1156,  1157,
  1158,  1159,  1160,     3,     3,     4,     3,  1165,  1166,   171,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,     6,   172,   171,  1192,    79,  1194,     6,   170,     7,
     6,   170,     6,  1201,  1202,  1203,  1204,  1205,  1206,  1207,
  1208,  1209,  1210,   169,  1212,   169,  1214,   169,   169,   169,
  1218,   170,  1220,   170,   169,   171,   170,   170,   147,   148,
   149,   150,   151,   170,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   169,  1242,  1243,   165,   169,    82,     6,
  1248,  1249,  1250,  1251,  1252,  1253,     3,   157,   158,     3,
     6,     6,   172,     6,   164,     6,     6,     6,   168,     6,
     6,   171,     3,     6,  1272,     5,     5,   171,     6,  1277,
  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,   169,   174,
     6,   169,   510,   511,   169,   513,   169,     6,   170,   517,
   518,   170,   169,     6,   170,   169,   169,  1305,  1306,  1307,
  1308,  1309,  1310,  1311,   169,  1313,     6,  1315,   157,   158,
     6,    83,     6,     6,     6,   164,     6,     6,     6,   168,
     5,     5,   174,   169,   172,  1333,  1334,  1335,   169,   169,
     4,   170,   170,     6,   169,   169,   169,   169,     6,  1347,
  1348,  1349,  1350,  1351,  1352,   573,    79,   171,   576,   171,
   171,     6,     5,     5,     8,     6,  1364,  1365,  1366,  1367,
   172,  1369,   171,  1371,   169,   169,   172,   595,   596,   170,
   170,    79,     6,   601,   602,     8,   172,     6,     6,     6,
   608,     6,   610,  1391,  1392,  1393,     6,     6,   171,   169,
   169,   169,  1400,   169,  1402,   623,  1404,   625,   142,     6,
   171,   171,   171,   169,     6,   170,   634,   635,   636,     6,
     6,   639,   640,   641,   642,   643,   644,   645,     6,     6,
     3,     4,     6,   171,   169,     6,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,     3,     4,   169,
   171,   169,     6,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   147,   148,   149,   150,   151,   170,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   171,
     6,   171,   165,   147,   148,   149,   150,   151,     6,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   171,   171,
     6,   165,     0,     6,   147,   148,   149,   150,   151,     0,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     6,
   545,     6,   165,     6,     6,   520,   773,    31,    32,    33,
    34,    35,    36,    37,    38,    -1,    40,   775,    42,    43,
  1085,    45,    46,    -1,    -1,    -1,    -1,   785,    -1,    -1,
   302,   789,    -1,    -1,   147,   148,   149,   150,   151,    63,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
   808,   164,   165,    77,    78,   168,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   157,   158,    -1,   165,    -1,    -1,    -1,   164,    -1,
    -1,   172,   168,    31,    32,    33,    34,    35,    36,    37,
    38,    -1,    40,    -1,    42,    43,    -1,    45,    46,    31,
    32,    33,    34,    35,    36,    37,    38,    -1,    40,   133,
    42,    43,    -1,    45,    46,    63,    -1,    -1,    -1,     0,
     1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    77,
    78,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,   172,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    -1,    40,
    41,    42,    43,    44,    45,    46,    -1,    -1,    -1,    50,
    51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
    61,    -1,    63,    -1,    -1,   133,    -1,   945,    -1,    34,
   948,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    -1,
    -1,   133,    -1,    84,    85,    86,    87,    88,    89,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   975,    -1,    -1,
    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   991,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    -1,    -1,
    -1,    -1,   133,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1060,  1061,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,   136,    -1,    -1,    -1,    -1,  1086,    -1,
    -1,    -1,    -1,   176,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   136,
    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,  1134,    -1,   165,    -1,
    -1,    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,
  1148,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,    -1,
    -1,   173,    -1,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,   139,    -1,    -1,    -1,    -1,    -1,  1196,   173,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,    -1,    -1,   172,    -1,    -1,    -1,    -1,  1247,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,    -1,    -1,   172,    -1,  1275,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,    -1,    -1,   172,    -1,  1303,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,
    -1,   172,    -1,    -1,  1332,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   147,   148,   149,   150,   151,  1346,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   147,   148,   149,   150,   151,   172,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,   141,    -1,    -1,    -1,    -1,   172,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 147 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 161 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 168 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 185 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 186 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 187 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 188 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 193 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 198 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 209 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 212 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 216 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 222 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 228 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 235 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 241 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 245 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 249 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 256 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 260 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 265 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 269 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 273 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 277 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 281 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 285 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 289 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 293 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 299 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 305 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 309 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 313 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 317 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 321 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 329 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 356 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 359 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 365 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 366 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 367 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 368 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 369 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 376 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 381 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 69:
#line 386 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 70:
#line 397 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 71:
#line 401 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 72:
#line 408 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 85:
#line 427 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 429 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 434 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 88:
#line 439 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 89:
#line 446 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 448 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 453 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 92:
#line 458 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 93:
#line 465 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 467 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 472 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 96:
#line 477 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 97:
#line 484 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 486 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 492 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 100:
#line 498 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 101:
#line 505 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 507 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 513 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 104:
#line 519 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 105:
#line 526 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 528 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 534 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 108:
#line 540 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 109:
#line 547 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 549 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 556 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 112:
#line 565 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 113:
#line 572 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 574 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 581 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 116:
#line 590 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 117:
#line 597 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 599 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 606 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 120:
#line 615 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 121:
#line 622 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 624 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 632 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 124:
#line 641 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 125:
#line 648 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 650 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 658 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 128:
#line 667 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 129:
#line 674 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 676 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 131:
#line 684 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 132:
#line 693 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 133:
#line 706 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 134:
#line 723 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 135:
#line 730 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 136:
#line 736 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 137:
#line 755 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 138:
#line 766 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 139:
#line 774 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 140:
#line 780 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 786 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 142:
#line 805 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 143:
#line 811 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 144:
#line 828 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 145:
#line 834 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 146:
#line 840 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 846 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 148:
#line 852 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 149:
#line 858 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 150:
#line 877 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 151:
#line 889 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 895 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 153:
#line 914 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 154:
#line 937 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 155:
#line 945 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 156:
#line 949 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 955 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 961 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 159:
#line 973 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 160:
#line 979 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 161:
#line 985 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 998 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 163:
#line 1003 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 164:
#line 1008 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 165:
#line 1013 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 166:
#line 1020 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 167:
#line 1021 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 168:
#line 1022 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 169:
#line 1027 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 170:
#line 1031 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 171:
#line 1043 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 172:
#line 1061 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 173:
#line 1076 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 174:
#line 1104 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 175:
#line 1134 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 176:
#line 1138 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 177:
#line 1152 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 178:
#line 1165 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 179:
#line 1178 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 180:
#line 1217 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 181:
#line 1222 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 182:
#line 1228 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 183:
#line 1232 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 184:
#line 1236 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 185:
#line 1240 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 186:
#line 1244 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 187:
#line 1249 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 188:
#line 1257 "Gmsh.y"
{
    ;
    break;}
case 189:
#line 1260 "Gmsh.y"
{
    ;
    break;}
case 190:
#line 1266 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 191:
#line 1283 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 192:
#line 1294 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 193:
#line 1311 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 194:
#line 1328 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 195:
#line 1345 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 196:
#line 1366 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 197:
#line 1386 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 198:
#line 1406 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 199:
#line 1423 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 200:
#line 1448 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 203:
#line 1464 "Gmsh.y"
{
    ;
    break;}
case 204:
#line 1467 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 205:
#line 1479 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 206:
#line 1496 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 207:
#line 1513 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 208:
#line 1530 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 209:
#line 1547 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 210:
#line 1564 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 211:
#line 1581 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 212:
#line 1598 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    ((double*)pNumOpt)[0] = yyvsp[-1].v[0] ;
	    ((double*)pNumOpt)[1] = yyvsp[-1].v[1] ;
	    ((double*)pNumOpt)[2] = yyvsp[-1].v[2] ;
	    ((double*)pNumOpt)[3] = yyvsp[-1].v[3] ;
	    break ;
	  case GMSH_FLOAT :
	    ((float*)pNumOpt)[0] = (float)yyvsp[-1].v[0] ;
	    ((float*)pNumOpt)[1] = (float)yyvsp[-1].v[1] ;
	    ((float*)pNumOpt)[2] = (float)yyvsp[-1].v[2] ;
	    ((float*)pNumOpt)[3] = (float)yyvsp[-1].v[3] ;
	    break ;
	  case GMSH_LONG :
	    ((long*)pNumOpt)[0] = (long)yyvsp[-1].v[0] ;
	    ((long*)pNumOpt)[1] = (long)yyvsp[-1].v[1] ;
	    ((long*)pNumOpt)[2] = (long)yyvsp[-1].v[2] ;
	    ((long*)pNumOpt)[3] = (long)yyvsp[-1].v[3] ;
	    break ;
	  case GMSH_INT :
	    ((int*)pNumOpt)[0] = (int)yyvsp[-1].v[0] ;
	    ((int*)pNumOpt)[1] = (int)yyvsp[-1].v[1] ;
	    ((int*)pNumOpt)[2] = (int)yyvsp[-1].v[2] ;
	    ((int*)pNumOpt)[3] = (int)yyvsp[-1].v[3] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 213:
#line 1635 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 217:
#line 1673 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 218:
#line 1674 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 219:
#line 1675 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 220:
#line 1676 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 221:
#line 1677 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 222:
#line 1681 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 223:
#line 1682 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 224:
#line 1683 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 225:
#line 1684 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 226:
#line 1685 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 227:
#line 1686 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 228:
#line 1687 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 229:
#line 1688 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 230:
#line 1689 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 231:
#line 1690 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 232:
#line 1691 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 233:
#line 1692 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 234:
#line 1693 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 235:
#line 1694 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 236:
#line 1695 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 237:
#line 1696 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 238:
#line 1697 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 239:
#line 1698 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 240:
#line 1699 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 241:
#line 1700 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 242:
#line 1701 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 243:
#line 1702 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 244:
#line 1703 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 245:
#line 1704 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 246:
#line 1705 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 247:
#line 1706 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 248:
#line 1707 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 249:
#line 1708 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 250:
#line 1709 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 251:
#line 1710 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 252:
#line 1711 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 253:
#line 1712 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 254:
#line 1713 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 255:
#line 1714 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 256:
#line 1715 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 257:
#line 1716 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 258:
#line 1717 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 259:
#line 1718 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 260:
#line 1719 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 261:
#line 1720 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 262:
#line 1724 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 263:
#line 1725 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 264:
#line 1727 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 265:
#line 1736 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 266:
#line 1753 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 267:
#line 1770 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 268:
#line 1790 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 269:
#line 1796 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 270:
#line 1810 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 271:
#line 1814 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 272:
#line 1818 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 273:
#line 1822 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 274:
#line 1826 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 275:
#line 1832 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 276:
#line 1836 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 277:
#line 1840 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 278:
#line 1844 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 279:
#line 1851 "Gmsh.y"
{
    ;
    break;}
case 280:
#line 1854 "Gmsh.y"
{
    ;
    break;}
case 281:
#line 1860 "Gmsh.y"
{
    ;
    break;}
case 282:
#line 1863 "Gmsh.y"
{
    ;
    break;}
case 283:
#line 1869 "Gmsh.y"
{
    ;
    break;}
case 284:
#line 1872 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 285:
#line 1876 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 286:
#line 1883 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 287:
#line 1888 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 288:
#line 1895 "Gmsh.y"
{
    ;
    break;}
case 289:
#line 1898 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 290:
#line 1904 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 291:
#line 1912 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 292:
#line 1917 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 293:
#line 1926 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 294:
#line 1930 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 295:
#line 1941 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 296:
#line 1945 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 297:
#line 1949 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 298:
#line 1954 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 299:
#line 1959 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1972 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


