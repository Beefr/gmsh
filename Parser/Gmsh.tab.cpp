
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tCombine	352
#define	tBSpline	353
#define	tBezier	354
#define	tNurbs	355
#define	tOrder	356
#define	tWith	357
#define	tBounds	358
#define	tKnots	359
#define	tColor	360
#define	tColorTable	361
#define	tFor	362
#define	tIn	363
#define	tEndFor	364
#define	tIf	365
#define	tEndIf	366
#define	tExit	367
#define	tReturn	368
#define	tCall	369
#define	tFunction	370
#define	tMesh	371
#define	tTrimmed	372
#define	tShow	373
#define	tHide	374
#define	tB_SPLINE_SURFACE_WITH_KNOTS	375
#define	tB_SPLINE_CURVE_WITH_KNOTS	376
#define	tCARTESIAN_POINT	377
#define	tTRUE	378
#define	tFALSE	379
#define	tUNSPECIFIED	380
#define	tU	381
#define	tV	382
#define	tEDGE_CURVE	383
#define	tVERTEX_POINT	384
#define	tORIENTED_EDGE	385
#define	tPLANE	386
#define	tFACE_OUTER_BOUND	387
#define	tEDGE_LOOP	388
#define	tADVANCED_FACE	389
#define	tVECTOR	390
#define	tDIRECTION	391
#define	tAXIS2_PLACEMENT_3D	392
#define	tISO	393
#define	tENDISO	394
#define	tENDSEC	395
#define	tDATA	396
#define	tHEADER	397
#define	tFILE_DESCRIPTION	398
#define	tFILE_SCHEMA	399
#define	tFILE_NAME	400
#define	tMANIFOLD_SOLID_BREP	401
#define	tCLOSED_SHELL	402
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	403
#define	tFACE_BOUND	404
#define	tCYLINDRICAL_SURFACE	405
#define	tCONICAL_SURFACE	406
#define	tCIRCLE	407
#define	tTRIMMED_CURVE	408
#define	tGEOMETRIC_SET	409
#define	tCOMPOSITE_CURVE_SEGMENT	410
#define	tCONTINUOUS	411
#define	tCOMPOSITE_CURVE	412
#define	tTOROIDAL_SURFACE	413
#define	tPRODUCT_DEFINITION	414
#define	tPRODUCT_DEFINITION_SHAPE	415
#define	tSHAPE_DEFINITION_REPRESENTATION	416
#define	tELLIPSE	417
#define	tSolid	418
#define	tEndSolid	419
#define	tVertex	420
#define	tFacet	421
#define	tNormal	422
#define	tOuter	423
#define	tLoopSTL	424
#define	tEndLoop	425
#define	tEndFacet	426
#define	tAFFECTPLUS	427
#define	tAFFECTMINUS	428
#define	tAFFECTTIMES	429
#define	tAFFECTDIVIDE	430
#define	tOR	431
#define	tAND	432
#define	tEQUAL	433
#define	tNOTEQUAL	434
#define	tAPPROXEQUAL	435
#define	tLESSOREQUAL	436
#define	tGREATEROREQUAL	437
#define	tCROSSPRODUCT	438
#define	tPLUSPLUS	439
#define	tMINUSMINUS	440
#define	UNARYPREC	441

#line 1 "Gmsh.y"
 
// $Id: Gmsh.tab.cpp,v 1.173 2003-12-01 21:51:20 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);
void FixRelativePath(char *in, char *out);

#line 83 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2320
#define	YYFLAG		-32768
#define	YYNTBASE	206

#define YYTRANSLATE(x) ((unsigned)(x) <= 441 ? yytranslate[x] : 340)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   193,     2,     2,     2,   191,     2,     2,   198,
   199,   189,   187,   203,   188,   202,   190,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   183,
     2,   185,   177,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   200,     2,   201,   197,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   204,     2,   205,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   178,   179,   180,   181,   182,   184,   186,   192,   194,   195,
   196
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   535,
   543,   550,   559,   560,   563,   566,   569,   572,   575,   578,
   581,   584,   587,   590,   593,   596,   599,   602,   605,   608,
   611,   614,   617,   620,   623,   626,   629,   632,   635,   638,
   640,   644,   645,   659,   661,   665,   666,   680,   682,   686,
   687,   701,   703,   707,   708,   728,   730,   734,   735,   755,
   757,   761,   762,   782,   784,   788,   789,   815,   817,   821,
   822,   848,   850,   854,   855,   881,   883,   887,   888,   920,
   922,   926,   927,   959,   961,   965,   966,   998,  1000,  1004,
  1005,  1037,  1039,  1043,  1044,  1076,  1078,  1082,  1083,  1115,
  1117,  1121,  1122,  1178,  1180,  1184,  1185,  1241,  1243,  1247,
  1248,  1304,  1306,  1310,  1311,  1355,  1357,  1361,  1362,  1406,
  1408,  1412,  1413,  1457,  1459,  1463,  1464,  1502,  1504,  1508,
  1509,  1547,  1549,  1553,  1554,  1592,  1594,  1598,  1599,  1613,
  1615,  1619,  1620,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
  1650,  1655,  1663,  1673,  1680,  1684,  1691,  1698,  1708,  1715,
  1725,  1731,  1740,  1749,  1761,  1768,  1778,  1788,  1798,  1806,
  1815,  1828,  1835,  1843,  1851,  1864,  1872,  1880,  1890,  1908,
  1917,  1926,  1934,  1942,  1954,  1963,  1976,  1985,  2000,  2023,
  2044,  2053,  2062,  2071,  2079,  2088,  2094,  2106,  2112,  2122,
  2124,  2126,  2128,  2129,  2132,  2139,  2146,  2153,  2160,  2165,
  2172,  2177,  2184,  2188,  2194,  2198,  2202,  2207,  2212,  2216,
  2224,  2228,  2236,  2240,  2243,  2246,  2253,  2262,  2271,  2282,
  2284,  2287,  2289,  2293,  2298,  2300,  2309,  2322,  2337,  2338,
  2351,  2352,  2369,  2370,  2389,  2398,  2411,  2426,  2427,  2440,
  2441,  2458,  2459,  2478,  2487,  2500,  2515,  2516,  2529,  2530,
  2547,  2548,  2567,  2569,  2572,  2582,  2590,  2593,  2600,  2610,
  2620,  2629,  2638,  2647,  2654,  2659,  2662,  2665,  2667,  2669,
  2671,  2673,  2675,  2677,  2681,  2684,  2687,  2690,  2694,  2698,
  2702,  2706,  2710,  2714,  2718,  2722,  2726,  2730,  2734,  2738,
  2742,  2746,  2752,  2757,  2762,  2767,  2772,  2777,  2782,  2787,
  2792,  2797,  2802,  2809,  2814,  2819,  2824,  2829,  2834,  2839,
  2846,  2853,  2860,  2865,  2870,  2875,  2880,  2885,  2890,  2895,
  2900,  2905,  2910,  2915,  2922,  2927,  2932,  2937,  2942,  2947,
  2952,  2959,  2966,  2973,  2978,  2980,  2982,  2984,  2986,  2988,
  2993,  2996,  3002,  3006,  3013,  3018,  3026,  3028,  3031,  3034,
  3038,  3042,  3054,  3064,  3072,  3080,  3081,  3085,  3087,  3091,
  3092,  3096,  3100,  3102,  3106,  3108,  3110,  3114,  3119,  3123,
  3129,  3134,  3136,  3138,  3140,  3144,  3149,  3156,  3164,  3166,
  3168,  3172,  3176,  3186,  3194,  3196,  3202,  3206,  3213,  3215,
  3219,  3221,  3228,  3233,  3238,  3245,  3252
};

static const short yyrhs[] = {   209,
     0,   208,     0,   214,     0,     1,     6,     0,     3,     0,
   188,     3,     0,   164,     0,   167,   168,   207,   207,   207,
   169,   170,   166,   207,   207,   207,   166,   207,   207,   207,
   166,   207,   207,   207,   171,   172,     0,   165,     0,     0,
   209,   210,     0,   211,     0,   213,     0,   212,     0,   139,
     6,     0,   140,     6,     0,   142,     6,     0,   141,     6,
     0,   143,     6,     0,   144,   198,   329,   203,     5,   199,
     6,     0,   145,   198,   329,   199,     6,     0,   146,   198,
     5,   203,     5,   203,   329,   203,   329,   203,     5,   203,
     5,   203,     5,   199,     6,     0,     3,     7,   123,   198,
     5,   203,   327,   199,     6,     0,     3,     7,   122,   198,
     5,   203,   325,   203,   333,   203,   324,   203,   324,   203,
   324,   203,   333,   203,   333,   203,   324,   199,     6,     0,
     3,     7,   121,   198,     5,   203,   325,   203,   325,   203,
   331,   203,   324,   203,   324,   203,   324,   203,   324,   203,
   333,   203,   333,   203,   333,   203,   333,   203,   324,   199,
     6,     0,     3,     7,   129,   198,     5,   203,     3,   203,
     3,   203,     3,   203,   324,   199,     6,     0,     3,     7,
   133,   198,     5,   203,     3,   203,   324,   199,     6,     0,
     3,     7,   150,   198,     5,   203,     3,   203,   324,   199,
     6,     0,     3,     7,   131,   198,     5,   203,   189,   203,
   189,   203,   325,   203,   324,   199,     6,     0,     3,     7,
   134,   198,     5,   203,   333,   199,     6,     0,     3,     7,
   135,   198,     5,   203,   333,   203,     3,   203,   324,   199,
     6,     0,     3,     7,   130,   198,     5,   203,     3,   199,
     6,     0,     3,     7,   136,   198,     5,   203,     3,   203,
   325,   199,     6,     0,     3,     7,   138,   198,     5,   203,
     3,   203,     3,   203,     3,   199,     6,     0,     3,     7,
   137,   198,     5,   203,   327,   199,     6,     0,     3,     7,
   132,   198,     5,   203,     3,   199,     6,     0,     3,     7,
    41,   198,     5,   203,     3,   203,     3,   199,     6,     0,
     3,     7,   148,   198,     5,   203,   333,   199,     6,     0,
     3,     7,   149,   198,     5,   203,   333,   203,     3,   199,
     6,     0,     3,     7,   147,   198,     5,   203,     3,   199,
     6,     0,     3,     7,   151,   198,     5,   203,     3,   203,
   325,   199,     6,     0,     3,     7,   152,   198,     5,   203,
     3,   203,   325,   203,   325,   199,     6,     0,     3,     7,
   159,   198,     5,   203,     3,   203,   325,   203,   325,   199,
     6,     0,     3,     7,   153,   198,     5,   203,     3,   203,
   325,   199,     6,     0,     3,     7,   163,   198,     5,   203,
     3,   203,   325,   203,   325,   199,     6,     0,     3,     7,
   154,   198,     5,   203,     3,   203,   333,   203,   333,   203,
   324,   203,   324,   199,     6,     0,     3,     7,   155,   198,
     5,   203,   333,   199,     6,     0,     3,     7,   156,   198,
   157,   203,   324,   203,     3,   199,     6,     0,     3,     7,
   158,   198,     5,   203,   333,   203,   324,   199,     6,     0,
     3,     7,   160,   198,     5,   203,     5,   203,     3,   203,
     3,   199,     6,     0,     3,     7,   161,   198,     5,   203,
     5,   203,     3,   199,     6,     0,     3,     7,   162,   198,
     3,   203,     3,   199,     6,     0,     0,   214,   215,     0,
   217,     0,   216,     0,   299,     0,   300,     0,   301,     0,
   304,     0,   305,     0,   306,     0,   307,     0,   310,     0,
   322,     0,   323,     0,   309,     0,   308,     0,    33,   198,
     5,   199,     6,     0,    33,   198,     5,   203,   335,   199,
     6,     0,     4,     5,   204,   218,   205,     6,     0,     4,
     5,     4,   327,   204,   218,   205,     6,     0,     0,   218,
   220,     0,   218,   223,     0,   218,   226,     0,   218,   229,
     0,   218,   232,     0,   218,   235,     0,   218,   238,     0,
   218,   241,     0,   218,   244,     0,   218,   247,     0,   218,
   250,     0,   218,   253,     0,   218,   256,     0,   218,   259,
     0,   218,   262,     0,   218,   265,     0,   218,   268,     0,
   218,   271,     0,   218,   274,     0,   218,   277,     0,   218,
   280,     0,   218,   283,     0,   218,   286,     0,   218,   289,
     0,   218,   292,     0,   218,   295,     0,   325,     0,   219,
   203,   325,     0,     0,    72,   198,   325,   203,   325,   203,
   325,   199,   221,   204,   219,   205,     6,     0,   325,     0,
   222,   203,   325,     0,     0,    73,   198,   325,   203,   325,
   203,   325,   199,   224,   204,   222,   205,     6,     0,   325,
     0,   225,   203,   325,     0,     0,    74,   198,   325,   203,
   325,   203,   325,   199,   227,   204,   225,   205,     6,     0,
   325,     0,   228,   203,   325,     0,     0,    75,   198,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   230,   204,   228,   205,     6,     0,   325,     0,   231,
   203,   325,     0,     0,    76,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   233,   204,
   231,   205,     6,     0,   325,     0,   234,   203,   325,     0,
     0,    77,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   199,   236,   204,   234,   205,     6,
     0,   325,     0,   237,   203,   325,     0,     0,    78,   198,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   239,   204,
   237,   205,     6,     0,   325,     0,   240,   203,   325,     0,
     0,    79,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   242,   204,   240,   205,     6,     0,   325,     0,   243,
   203,   325,     0,     0,    80,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   199,   245,   204,   243,   205,     6,     0,
   325,     0,   246,   203,   325,     0,     0,    81,   198,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   199,   248,   204,   246,   205,     6,     0,   325,
     0,   249,   203,   325,     0,     0,    82,   198,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   199,   251,   204,   249,   205,     6,     0,   325,     0,
   252,   203,   325,     0,     0,    83,   198,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   254,   204,   252,   205,     6,     0,   325,     0,   255,
   203,   325,     0,     0,    84,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   199,
   257,   204,   255,   205,     6,     0,   325,     0,   258,   203,
   325,     0,     0,    85,   198,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   199,   260,
   204,   258,   205,     6,     0,   325,     0,   261,   203,   325,
     0,     0,    86,   198,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   263,   204,
   261,   205,     6,     0,   325,     0,   264,   203,   325,     0,
     0,    87,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   266,   204,   264,   205,     6,     0,   325,     0,   267,
   203,   325,     0,     0,    88,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   199,   269,   204,   267,   205,     6,     0,
   325,     0,   270,   203,   325,     0,     0,    89,   198,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   199,   272,   204,   270,
   205,     6,     0,   325,     0,   273,   203,   325,     0,     0,
    90,   198,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   275,   204,
   273,   205,     6,     0,   325,     0,   276,   203,   325,     0,
     0,    91,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   199,   278,
   204,   276,   205,     6,     0,   325,     0,   279,   203,   325,
     0,     0,    92,   198,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   199,
   281,   204,   279,   205,     6,     0,   325,     0,   282,   203,
   325,     0,     0,    93,   198,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   199,   284,   204,   282,   205,     6,
     0,   325,     0,   285,   203,   325,     0,     0,    94,   198,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   199,
   287,   204,   285,   205,     6,     0,   325,     0,   288,   203,
   325,     0,     0,    95,   198,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   199,   290,   204,   288,   205,     6,
     0,   339,     0,   291,   203,   339,     0,     0,    96,   198,
   325,   203,   325,   203,   325,   199,   293,   204,   291,   205,
     6,     0,   339,     0,   294,   203,   339,     0,     0,    97,
   198,   325,   203,   325,   203,   325,   203,   325,   199,   296,
   204,   294,   205,     6,     0,     7,     0,   173,     0,   174,
     0,   175,     0,   176,     0,   194,     0,   195,     0,     4,
   297,   325,     6,     0,     4,   200,   325,   201,   297,   325,
     6,     0,     4,   200,   204,   335,   205,   201,   297,   333,
     6,     0,     4,   200,   201,     7,   333,     6,     0,     4,
   298,     6,     0,     4,   200,   325,   201,   298,     6,     0,
     4,   202,     4,     7,   339,     6,     0,     4,   200,   325,
   201,   202,     4,     7,   339,     6,     0,     4,   202,     4,
   297,   325,     6,     0,     4,   200,   325,   201,   202,     4,
   297,   325,     6,     0,     4,   202,     4,   298,     6,     0,
     4,   200,   325,   201,   202,     4,   298,     6,     0,     4,
   202,   106,   202,     4,     7,   336,     6,     0,     4,   200,
   325,   201,   202,   106,   202,     4,     7,   336,     6,     0,
     4,   202,   107,     7,   337,     6,     0,     4,   200,   325,
   201,   202,   107,     7,   337,     6,     0,    58,   198,     4,
   199,   202,     4,     7,   325,     6,     0,    58,   198,     4,
   199,   202,     4,     7,   339,     6,     0,    38,   198,   325,
   199,     7,   327,     6,     0,    54,    38,   198,   325,   199,
     7,   333,     6,     0,    70,    38,   333,     7,   204,   325,
   203,   325,   203,   325,   205,     6,     0,    45,    46,   333,
     7,   325,     6,     0,    41,   198,   325,   199,     7,   333,
     6,     0,    43,   198,   325,   199,     7,   333,     6,     0,
    70,    41,   333,     7,   204,   325,   203,   325,   203,   325,
   205,     6,     0,    39,   198,   325,   199,     7,   333,     6,
     0,    40,   198,   325,   199,     7,   333,     6,     0,    39,
   198,   325,   199,     7,   333,    49,   327,     6,     0,    47,
   198,   325,   199,     7,   204,   325,   203,   325,   203,     5,
   203,     5,   203,     5,   205,     6,     0,    54,    41,   198,
   325,   199,     7,   333,     6,     0,    41,    65,   198,   325,
   199,     7,   333,     6,     0,    99,   198,   325,   199,     7,
   333,     6,     0,   100,   198,   325,   199,     7,   333,     6,
     0,   101,   198,   325,   199,     7,   333,   105,   333,   102,
   325,     6,     0,    49,    42,   198,   325,   199,     7,   333,
     6,     0,   118,    42,   198,   325,   199,     7,   204,   325,
   203,   333,   205,     6,     0,    50,    42,   198,   325,   199,
     7,   333,     6,     0,    51,    42,   198,   325,   199,     7,
   198,   325,   203,   325,   199,   333,   333,     6,     0,   101,
    42,   103,   104,   198,   325,   199,     7,   331,   105,   204,
   333,   203,   333,   205,   102,   204,   325,   203,   325,   205,
     6,     0,   101,    42,   198,   325,   199,     7,   331,   105,
   204,   333,   203,   333,   205,   102,   204,   325,   203,   325,
   205,     6,     0,    54,    42,   198,   325,   199,     7,   333,
     6,     0,    42,    65,   198,   325,   199,     7,   333,     6,
     0,    53,    44,   198,   325,   199,     7,   333,     6,     0,
    44,   198,   325,   199,     7,   333,     6,     0,    54,    44,
   198,   325,   199,     7,   333,     6,     0,    60,   327,   204,
   302,   205,     0,    59,   204,   327,   203,   327,   203,   325,
   205,   204,   302,   205,     0,    61,   327,   204,   302,   205,
     0,    62,   204,   327,   203,   325,   205,   204,   302,   205,
     0,   304,     0,   303,     0,   301,     0,     0,   303,   300,
     0,   303,    38,   204,   335,   205,     6,     0,   303,    41,
   204,   335,   205,     6,     0,   303,    42,   204,   335,   205,
     6,     0,   303,    44,   204,   335,   205,     6,     0,    64,
   204,   303,   205,     0,    64,     4,   200,   325,   201,     6,
     0,    67,   204,   303,   205,     0,    67,     4,   200,   325,
   201,     6,     0,    67,   117,     6,     0,   106,   336,   204,
   303,   205,     0,   119,   339,     6,     0,   120,   339,     6,
     0,   119,   204,   303,   205,     0,   120,   204,   303,   205,
     0,     4,   339,     6,     0,     4,     4,   200,   325,   201,
   339,     6,     0,     4,   325,     6,     0,    58,   198,     4,
   199,   202,     4,     6,     0,    98,     4,     6,     0,   113,
     6,     0,    37,     6,     0,   108,   198,   325,     8,   325,
   199,     0,   108,   198,   325,     8,   325,     8,   325,   199,
     0,   108,     4,   109,   204,   325,     8,   325,   205,     0,
   108,     4,   109,   204,   325,     8,   325,     8,   325,   205,
     0,   110,     0,   116,     4,     0,   114,     0,   115,     4,
     6,     0,   111,   198,   325,   199,     0,   112,     0,    63,
    38,   204,   325,   203,   327,   205,     6,     0,    63,    38,
   204,   325,   203,   327,   203,   327,   203,   325,   205,     6,
     0,    63,    38,   204,   325,   203,   327,   203,   327,   203,
   327,   203,   325,   205,     6,     0,     0,    63,    38,   204,
   325,   203,   327,   205,   311,   204,   320,   205,     6,     0,
     0,    63,    38,   204,   325,   203,   327,   203,   327,   203,
   325,   205,   312,   204,   320,   205,     6,     0,     0,    63,
    38,   204,   325,   203,   327,   203,   327,   203,   327,   203,
   325,   205,   313,   204,   320,   205,     6,     0,    63,    41,
   204,   325,   203,   327,   205,     6,     0,    63,    41,   204,
   325,   203,   327,   203,   327,   203,   325,   205,     6,     0,
    63,    41,   204,   325,   203,   327,   203,   327,   203,   327,
   203,   325,   205,     6,     0,     0,    63,    41,   204,   325,
   203,   327,   205,   314,   204,   320,   205,     6,     0,     0,
    63,    41,   204,   325,   203,   327,   203,   327,   203,   325,
   205,   315,   204,   320,   205,     6,     0,     0,    63,    41,
   204,   325,   203,   327,   203,   327,   203,   327,   203,   325,
   205,   316,   204,   320,   205,     6,     0,    63,    42,   204,
   325,   203,   327,   205,     6,     0,    63,    42,   204,   325,
   203,   327,   203,   327,   203,   325,   205,     6,     0,    63,
    42,   204,   325,   203,   327,   203,   327,   203,   327,   203,
   325,   205,     6,     0,     0,    63,    42,   204,   325,   203,
   327,   205,   317,   204,   320,   205,     6,     0,     0,    63,
    42,   204,   325,   203,   327,   203,   327,   203,   325,   205,
   318,   204,   320,   205,     6,     0,     0,    63,    42,   204,
   325,   203,   327,   203,   327,   203,   327,   203,   325,   205,
   319,   204,   320,   205,     6,     0,   321,     0,   320,   321,
     0,    71,   204,   333,   203,   333,   203,   333,   205,     6,
     0,    71,   204,   333,   203,   333,   205,     6,     0,    66,
     6,     0,    52,    41,   333,     7,   325,     6,     0,    52,
    41,   333,     7,   325,    55,    57,   325,     6,     0,    52,
    41,   333,     7,   325,    55,    56,   325,     6,     0,    52,
    42,   204,   325,   205,     7,   333,     6,     0,    48,    42,
   204,   325,   205,     7,   333,     6,     0,    52,    44,   204,
   325,   205,     7,   333,     6,     0,    66,    42,   333,     7,
   325,     6,     0,    66,    42,   333,     6,     0,    68,     6,
     0,    69,     6,     0,   124,     0,   125,     0,   126,     0,
   127,     0,   128,     0,   326,     0,   198,   325,   199,     0,
   188,   325,     0,   187,   325,     0,   193,   325,     0,   325,
   188,   325,     0,   325,   187,   325,     0,   325,   189,   325,
     0,   325,   190,   325,     0,   325,   191,   325,     0,   325,
   197,   325,     0,   325,   183,   325,     0,   325,   185,   325,
     0,   325,   184,   325,     0,   325,   186,   325,     0,   325,
   180,   325,     0,   325,   181,   325,     0,   325,   179,   325,
     0,   325,   178,   325,     0,   325,   177,   325,     8,   325,
     0,    12,   198,   325,   199,     0,    13,   198,   325,   199,
     0,    14,   198,   325,   199,     0,    15,   198,   325,   199,
     0,    16,   198,   325,   199,     0,    17,   198,   325,   199,
     0,    18,   198,   325,   199,     0,    19,   198,   325,   199,
     0,    20,   198,   325,   199,     0,    22,   198,   325,   199,
     0,    23,   198,   325,   203,   325,   199,     0,    24,   198,
   325,   199,     0,    25,   198,   325,   199,     0,    26,   198,
   325,   199,     0,    27,   198,   325,   199,     0,    28,   198,
   325,   199,     0,    29,   198,   325,   199,     0,    30,   198,
   325,   203,   325,   199,     0,    31,   198,   325,   203,   325,
   199,     0,    32,   198,   325,   203,   325,   199,     0,    21,
   198,   325,   199,     0,    12,   200,   325,   201,     0,    13,
   200,   325,   201,     0,    14,   200,   325,   201,     0,    15,
   200,   325,   201,     0,    16,   200,   325,   201,     0,    17,
   200,   325,   201,     0,    18,   200,   325,   201,     0,    19,
   200,   325,   201,     0,    20,   200,   325,   201,     0,    22,
   200,   325,   201,     0,    23,   200,   325,   203,   325,   201,
     0,    24,   200,   325,   201,     0,    25,   200,   325,   201,
     0,    26,   200,   325,   201,     0,    27,   200,   325,   201,
     0,    28,   200,   325,   201,     0,    29,   200,   325,   201,
     0,    30,   200,   325,   203,   325,   201,     0,    31,   200,
   325,   203,   325,   201,     0,    32,   200,   325,   203,   325,
   201,     0,    21,   200,   325,   201,     0,     3,     0,     9,
     0,    10,     0,    11,     0,     4,     0,     4,   200,   325,
   201,     0,     4,   298,     0,     4,   200,   325,   201,   298,
     0,     4,   202,     4,     0,     4,   200,   325,   201,   202,
     4,     0,     4,   202,     4,   298,     0,     4,   200,   325,
   201,   202,     4,   298,     0,   328,     0,   188,   327,     0,
   187,   327,     0,   327,   188,   327,     0,   327,   187,   327,
     0,   204,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   205,     0,   204,   325,   203,   325,   203,   325,   203,
   325,   205,     0,   204,   325,   203,   325,   203,   325,   205,
     0,   198,   325,   203,   325,   203,   325,   199,     0,     0,
   198,   330,   199,     0,     5,     0,   330,   203,     5,     0,
     0,   204,   332,   205,     0,   198,   332,   199,     0,   333,
     0,   332,   203,   333,     0,   325,     0,   334,     0,   204,
   335,   205,     0,   188,   204,   335,   205,     0,   325,     8,
   325,     0,   325,     8,   325,     8,   325,     0,    38,   204,
   325,   205,     0,   301,     0,   304,     0,   310,     0,     4,
   200,   201,     0,   188,     4,   200,   201,     0,     4,   200,
   204,   335,   205,   201,     0,   188,     4,   200,   204,   335,
   205,   201,     0,   325,     0,   334,     0,   335,   203,   325,
     0,   335,   203,   334,     0,   204,   325,   203,   325,   203,
   325,   203,   325,   205,     0,   204,   325,   203,   325,   203,
   325,   205,     0,     4,     0,     4,   202,   106,   202,     4,
     0,   204,   338,   205,     0,     4,   200,   325,   201,   202,
   107,     0,   336,     0,   338,   203,   336,     0,     5,     0,
    35,   198,   339,   203,   339,   199,     0,    36,   198,   339,
   199,     0,    34,   198,   339,   199,     0,    34,   198,   339,
   203,   335,   199,     0,    34,   198,     4,   202,     4,   199,
     0,    34,   198,     4,   200,   325,   201,   202,     4,   199,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   168,   170,   171,   172,   177,   179,   182,   190,   204,   214,
   216,   219,   221,   222,   225,   231,   236,   237,   238,   241,
   245,   248,   254,   259,   265,   273,   278,   282,   288,   293,
   297,   302,   306,   309,   314,   318,   322,   326,   331,   335,
   338,   342,   346,   350,   354,   358,   362,   365,   369,   372,
   376,   379,   386,   390,   396,   398,   399,   400,   401,   402,
   403,   404,   405,   406,   407,   408,   409,   410,   413,   418,
   433,   438,   444,   449,   450,   451,   452,   453,   454,   455,
   456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   477,
   480,   484,   490,   496,   499,   503,   509,   515,   518,   522,
   528,   534,   537,   541,   549,   555,   558,   562,   570,   576,
   579,   583,   591,   597,   600,   604,   616,   622,   625,   629,
   641,   647,   650,   654,   666,   672,   675,   679,   692,   698,
   701,   705,   718,   724,   727,   731,   744,   750,   753,   757,
   770,   776,   779,   783,   796,   802,   805,   809,   822,   828,
   831,   835,   858,   864,   867,   871,   894,   900,   903,   907,
   930,   936,   939,   943,   961,   967,   970,   974,   992,   998,
  1001,  1005,  1023,  1029,  1032,  1036,  1053,  1059,  1062,  1066,
  1083,  1089,  1092,  1096,  1113,  1119,  1125,  1132,  1140,  1146,
  1152,  1159,  1167,  1176,  1178,  1179,  1180,  1181,  1184,  1186,
  1189,  1220,  1254,  1301,  1316,  1325,  1340,  1352,  1366,  1389,
  1413,  1425,  1439,  1451,  1465,  1485,  1507,  1517,  1531,  1542,
  1548,  1567,  1581,  1587,  1593,  1612,  1618,  1624,  1640,  1647,
  1653,  1659,  1670,  1681,  1706,  1712,  1731,  1753,  1759,  1767,
  1773,  1779,  1788,  1794,  1800,  1810,  1816,  1821,  1826,  1833,
  1835,  1836,  1839,  1844,  1848,  1862,  1876,  1890,  1908,  1919,
  1929,  1937,  1941,  1949,  1961,  1969,  1974,  1983,  1994,  2034,
  2047,  2064,  2073,  2080,  2084,  2104,  2116,  2126,  2147,  2168,
  2189,  2195,  2200,  2205,  2209,  2217,  2230,  2240,  2250,  2255,
  2265,  2270,  2280,  2285,  2297,  2314,  2331,  2348,  2353,  2370,
  2375,  2392,  2397,  2417,  2433,  2449,  2465,  2470,  2487,  2493,
  2510,  2516,  2535,  2539,  2544,  2571,  2595,  2603,  2622,  2640,
  2658,  2680,  2701,  2722,  2736,  2755,  2760,  2769,  2771,  2772,
  2773,  2774,  2777,  2779,  2780,  2781,  2782,  2783,  2784,  2785,
  2786,  2793,  2794,  2795,  2796,  2797,  2798,  2799,  2800,  2801,
  2802,  2803,  2804,  2805,  2806,  2807,  2808,  2809,  2810,  2811,
  2812,  2813,  2814,  2815,  2816,  2817,  2818,  2819,  2820,  2821,
  2822,  2823,  2824,  2826,  2827,  2828,  2829,  2830,  2831,  2832,
  2833,  2834,  2835,  2836,  2837,  2838,  2839,  2840,  2841,  2842,
  2843,  2844,  2845,  2846,  2851,  2856,  2857,  2858,  2862,  2873,
  2890,  2901,  2920,  2936,  2952,  2968,  2985,  2990,  2994,  2998,
  3002,  3008,  3013,  3017,  3021,  3027,  3031,  3036,  3040,  3045,
  3049,  3053,  3059,  3065,  3072,  3078,  3082,  3086,  3096,  3103,
  3114,  3134,  3143,  3152,  3163,  3177,  3193,  3213,  3237,  3243,
  3247,  3251,  3262,  3267,  3278,  3283,  3301,  3306,  3319,  3325,
  3331,  3336,  3344,  3357,  3361,  3379,  3393
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr",
"FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   206,   206,   206,   206,   207,   207,   208,   208,   208,   209,
   209,   210,   210,   210,   211,   211,   211,   211,   211,   212,
   212,   212,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   214,   214,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   216,   216,
   217,   217,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   219,
   219,   221,   220,   222,   222,   224,   223,   225,   225,   227,
   226,   228,   228,   230,   229,   231,   231,   233,   232,   234,
   234,   236,   235,   237,   237,   239,   238,   240,   240,   242,
   241,   243,   243,   245,   244,   246,   246,   248,   247,   249,
   249,   251,   250,   252,   252,   254,   253,   255,   255,   257,
   256,   258,   258,   260,   259,   261,   261,   263,   262,   264,
   264,   266,   265,   267,   267,   269,   268,   270,   270,   272,
   271,   273,   273,   275,   274,   276,   276,   278,   277,   279,
   279,   281,   280,   282,   282,   284,   283,   285,   285,   287,
   286,   288,   288,   290,   289,   291,   291,   293,   292,   294,
   294,   296,   295,   297,   297,   297,   297,   297,   298,   298,
   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
   299,   299,   299,   299,   299,   299,   299,   299,   300,   300,
   300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   300,   300,   300,   300,   300,   301,   301,   301,   301,   302,
   302,   302,   303,   303,   303,   303,   303,   303,   304,   304,
   305,   305,   305,   306,   307,   307,   307,   307,   308,   308,
   308,   308,   308,   308,   308,   309,   309,   309,   309,   309,
   309,   309,   309,   309,   309,   310,   310,   310,   311,   310,
   312,   310,   313,   310,   310,   310,   310,   314,   310,   315,
   310,   316,   310,   310,   310,   310,   317,   310,   318,   310,
   319,   310,   320,   320,   321,   321,   321,   322,   322,   322,
   322,   322,   322,   322,   322,   323,   323,   324,   324,   324,
   324,   324,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   327,   327,   327,   327,
   327,   328,   328,   328,   328,   329,   329,   330,   330,   331,
   331,   331,   332,   332,   333,   333,   333,   333,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   335,   335,
   335,   335,   336,   336,   336,   336,   337,   337,   338,   338,
   339,   339,   339,   339,   339,   339,   339
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     7,
     6,     8,     0,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    55,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    43,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    37,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    13,     1,
     3,     0,    15,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     3,     6,     6,     9,     6,     9,
     5,     8,     8,    11,     6,     9,     9,     9,     7,     8,
    12,     6,     7,     7,    12,     7,     7,     9,    17,     8,
     8,     7,     7,    11,     8,    12,     8,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     4,     6,     3,     5,     3,     3,     4,     4,     3,     7,
     3,     7,     3,     2,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     8,    12,    14,     0,    12,     0,
    16,     0,    18,     8,    12,    14,     0,    12,     0,    16,
     0,    18,     1,     2,     9,     7,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     2,     1,     1,     1,
     1,     1,     1,     3,     2,     2,     2,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     4,     4,     4,     6,
     6,     6,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     4,     4,     4,
     6,     6,     6,     4,     1,     1,     1,     1,     1,     4,
     2,     5,     3,     6,     4,     7,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     0,     3,     1,     3,     0,
     3,     3,     1,     3,     1,     1,     3,     4,     3,     5,
     4,     1,     1,     1,     3,     4,     6,     7,     1,     1,
     3,     3,     9,     7,     1,     5,     3,     6,     1,     3,
     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
     0,   295,     0,   292,     0,     0,     0,     0,     0,    54,
    56,    55,    57,    58,    59,    60,    61,    62,    63,    68,
    67,    64,    65,    66,     5,     0,     0,     0,    15,    16,
    18,    17,    19,   426,   426,     0,   405,   409,   461,   204,
   406,   407,   408,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   205,   206,   207,
   208,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     0,     0,   343,     0,     0,   285,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   417,     0,     0,     0,     0,
     0,     0,   263,     0,     0,     0,   263,   336,   337,     0,
     0,     0,     0,     0,     0,     0,   455,     0,     0,     0,
     0,     0,   284,     0,   291,     0,   461,   263,     0,   263,
     0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   411,
     0,    73,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   409,   346,   345,
   347,     0,     0,     0,     0,     0,     0,     0,     0,   215,
   281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   279,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   409,     0,     0,     0,
   442,   443,   444,   435,     0,   436,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   419,   418,     0,     0,     0,     0,   263,   263,     0,
     0,     0,     0,     0,     0,     0,     0,   273,     0,     0,
     0,   283,     0,     0,     0,     0,     0,     0,     0,   263,
     0,     0,     0,   293,     0,     0,   275,     0,   276,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   428,     0,     0,     0,     0,     0,   413,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   344,     0,     0,   449,
   450,     0,     0,   204,     0,     0,     0,     0,   211,     0,
   361,   360,   358,   359,   354,   356,   355,   357,   349,   348,
   350,   351,   352,   353,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   409,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   421,   420,
   262,     0,   261,   260,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   269,   264,   335,     0,     0,   271,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   294,     0,   277,   278,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   427,     0,     0,
    21,     0,   410,   415,    73,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   363,   384,
   364,   385,   365,   386,   366,   387,   367,   388,   368,   389,
   369,   390,   370,   391,   371,   392,   383,   404,   372,   393,
     0,     0,   374,   395,   375,   396,   376,   397,   377,   398,
   378,   399,   379,   400,     0,     0,     0,     0,     0,     0,
     0,     0,   464,     0,     0,   463,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   221,     0,     0,     0,     0,
     0,    69,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   445,     0,     0,     0,     0,   437,   439,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   256,   258,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   274,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   429,     0,   426,     0,   412,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   410,
   214,   451,   452,     0,     0,     0,     0,     0,   216,   217,
   219,     0,     0,   459,     0,   225,   362,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   441,   446,     0,
   438,     0,   232,     0,     0,     0,     0,     0,   328,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   270,     0,     0,     0,     0,
   334,   272,     0,     0,     0,     0,     0,   430,     0,   456,
     0,     0,     0,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
   339,   340,   341,   342,     0,     0,     0,     0,     0,     0,
     0,    20,     0,   414,   280,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   373,   394,   380,   401,   381,   402,   382,   403,
     0,   466,   465,   462,     0,   204,     0,     0,     0,     0,
   212,     0,     0,     0,   457,    70,   229,   236,     0,   237,
     0,   233,     0,   234,   254,     0,     0,   440,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   282,     0,     0,     0,     0,   263,     0,   299,
     0,   308,     0,   317,     0,     0,     0,     0,     0,     0,
   242,   243,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   426,   416,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   222,     0,     0,   223,     0,
   460,     0,   241,   252,   447,     0,     0,   332,   245,   247,
     0,     0,     0,   331,   333,   253,   230,   240,   251,   255,
     0,     0,     0,   425,     0,   424,     0,     0,   296,     0,
     0,   305,     0,     0,   314,     0,   265,   266,   267,   268,
     0,     0,   430,     0,   433,     0,     0,     0,     0,   454,
     0,   288,   287,     0,     0,     0,     0,     0,    23,     0,
    32,     0,    36,     0,    30,     0,     0,    35,     0,    40,
    38,     0,     0,     0,     0,     0,     0,    47,     0,     0,
     0,     0,     0,    52,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   213,   218,   220,     0,   226,     0,   238,
   448,     0,     0,   330,   329,   227,   228,   263,     0,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   432,
     0,   431,     0,     0,     0,     0,     0,     0,     0,   430,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   467,     0,   458,     0,
     0,     0,     0,   423,     0,     0,     0,     0,     0,     0,
     0,     0,   323,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   434,     0,     0,   453,   289,     0,     0,    37,
     0,     0,     0,     0,    27,     0,    33,     0,    39,    28,
    41,     0,    44,     0,    48,    49,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   224,     0,     0,
   257,     0,     0,   301,     0,   327,     0,     0,   324,   310,
     0,     0,   319,     0,     0,     0,     0,     0,     0,   244,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   102,   106,   110,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   198,     0,
     0,     0,   422,   297,     0,     0,     0,   300,   306,     0,
     0,   309,   315,     0,     0,   318,   231,   235,     0,     0,
   246,     0,     0,     0,     0,     0,    31,    34,    42,     0,
    43,    50,    45,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   303,     0,     0,   312,     0,   321,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   202,     0,   248,     0,   298,     0,     0,
     0,   307,     0,     0,   316,     0,     0,     0,     0,     0,
     0,    26,    29,     0,     0,     0,   100,     0,   104,     0,
   108,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   302,     0,     0,   326,   311,     0,   320,     0,
     0,     0,     0,     0,     0,    46,    22,   101,   103,   105,
   107,   109,   111,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   197,   199,     0,   200,   239,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,   118,
   122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,   325,   313,   322,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   201,   203,     0,     0,     8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   250,     0,     0,     0,   112,     0,   116,     0,   120,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   249,     0,    24,   113,   115,   117,
   119,   121,   123,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   126,   130,   134,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   124,     0,   128,     0,   132,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,   127,   129,   131,   133,   135,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,   142,   146,   150,   154,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,     0,   140,     0,   144,     0,   148,     0,
   152,     0,   156,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,   139,   141,   143,   145,   147,   149,
   151,   153,   155,   157,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   186,   190,   194,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   184,     0,
   188,     0,   192,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   185,   187,   189,   191,   193,   195,     0,     0,     0,
   174,   178,   182,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
     0,   176,     0,   180,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   173,   175,   177,   179,
   181,   183,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   162,   166,   170,     0,     0,     0,     0,     0,     0,     0,
   160,     0,   164,     0,   168,     0,     0,     0,     0,     0,
     0,   161,   163,   165,   167,   169,   171,     0,     0,     0
};

static const short yydefgoto[] = {  2318,
    87,     5,     6,    19,    20,    21,    22,     7,    70,    71,
    72,   439,  1636,   653,  1545,  1638,   654,  1546,  1640,   655,
  1547,  1854,   656,  1801,  1856,   657,  1802,  1858,   658,  1803,
  1990,   659,  1952,  1992,   660,  1953,  1994,   661,  1954,  2102,
   662,  2072,  2104,   663,  2073,  2106,   664,  2074,  2108,   665,
  2075,  2110,   666,  2076,  2112,   667,  2077,  2300,   668,  2294,
  2302,   669,  2295,  2304,   670,  2296,  2249,   671,  2237,  2251,
   672,  2238,  2253,   673,  2239,  2198,   674,  2180,  2200,   675,
  2181,  2202,   676,  2182,  1663,   677,  1569,  1757,   678,  1665,
   140,   250,    73,   566,   341,   552,   553,   342,    77,    78,
    79,    80,    81,   343,  1200,  1515,  1619,  1203,  1520,  1623,
  1206,  1524,  1626,  1382,  1383,    83,    84,   985,   344,   143,
   362,   176,   245,   432,  1096,  1214,  1215,   346,   492,   199,
   740,   895,   144
};

static const short yypact[] = {  2739,
    56,-32768,-32768,  -129,-32768,   284,  3214,-32768,    28,    85,
   107,   138,   152,   171,   199,    20,   106,   115,-32768,-32768,
-32768,-32768,  2286,   123,   323,   161,   166,   177,   -22,   217,
   192,   204,   338,   219,   327,   366,   394,   405,   437,   414,
   485,   264,   278,  -110,  -110,   292,   369,     7,   423,     6,
   494,   495,   344,   484,   314,   333,   -17,     8,    17,-32768,
   334,-32768,   532,-32768,   540,   561,   513,    15,    19,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   573,    28,  3011,-32768,-32768,
-32768,-32768,-32768,   381,   381,   578,-32768,   220,     9,-32768,
-32768,-32768,-32768,  -100,   -66,   120,   276,   294,   297,   315,
   321,   322,   330,   353,   354,   377,   384,   447,   448,   451,
   455,   464,   465,   469,   389,   400,   401,-32768,-32768,-32768,
-32768,  1824,  1824,  1824,-32768,-32768,  1824,   969,    31,  1824,
   598,   759,-32768,   648,   670,-32768,  1824,  1824,  1824,   470,
  1824,   473,  1824,  1824,   597,  1824,   503,   479,   490,   492,
   597,   512,   516,   501,   515,   568,   595,   651,   672,  -110,
  -110,  -110,  1824,  1824,   -83,-32768,   -40,  -110,   524,   525,
   565,   549,-32768,   597,   559,   775,-32768,-32768,-32768,   597,
   597,   854,  1824,  1824,   -71,  1824,   671,  1824,   673,   779,
  1824,  1824,-32768,   884,-32768,   697,-32768,-32768,   899,-32768,
   903,-32768,    28,   714,   715,   717,   718,   719,   720,   721,
   722,   723,   724,   725,   726,   727,   728,   729,   734,   735,
   736,   737,   743,   768,   769,   770,   771,   772,   776,   777,
   804,   805,   806,   906,   802,   778,   807,  1824,  1003,-32768,
  -110,-32768,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,    40,    37,    37,   289,   811,   811,
   811, 10787,  1002,  2321,  1363,    26,   809,  1005,   774,-32768,
-32768,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,-32768,  -134, 10810, 10833,
 10856,  1824, 10879,  1824, 10902, 10925,   304,   812,  1499,  2321,
-32768,-32768,-32768,  2443,  1006,-32768, 10948,  1824,  1824,  1824,
  1824,  1010,  1824,  1824,  1824,  1824,  1824,  1824,  1824,   820,
   -81,-32768,-32768,  3585,  3606,  -110,  -110,   475,   475,   136,
  1824,  1824,  1824,  1824,  2772,   340,  1824,-32768,  2884,  1014,
  1015,-32768, 10971, 10994,   924,  1824, 11017,   932,  3627,-32768,
   840,  2458, 11040,-32768,  1824,  2906,-32768,  2950,-32768,   877,
  1042,  1043,  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,
  1058,  1059,  1060,  1063,  1064,  1065,  1066,  1067,  1068,  1069,
  1071,  1074,  1075,   925,  1080,  1081,  1082,  1083,  1086,  1085,
-32768,   -87,  1087,  1077,  1088,  2929,    -2,   -35,  3106, 11063,
 10137, 11086, 10162, 11109, 10187, 11132, 10212, 11155, 10237, 11178,
 10262, 11201, 10287, 11224, 10312, 11247, 10337, 11270, 10362, 11293,
 10387,  3648,  3669, 11316, 10412, 11339, 10437, 11362, 10462, 11385,
 10487, 11408, 10512, 11431, 10537,  3690,  3711,  3732,  3753,  3774,
  3795,   472,   -43,   891,   896,  1824,-32768,   597,  2418,  2443,
-32768,   477,    12,    37,  1824,  1090,  1093,    13,-32768,  2481,
   695,   713,   406,   406,   280,   280,   280,   280,   259,   259,
   811,   811,   811,   811,  1095,  2321,  1096,  1097,  1099, 11454,
  1100, 11477,  1101,  1103,  1191,  1824,   316,  2321,   478,  1824,
  1824,  1104,  1944, 11500, 11523, 11546,  1824,  2897,  3172, 11569,
 11592, 11615, 11638, 11661,   900,  -110,  1824,  1824,-32768,-32768,
-32768,   907,  3247,-32768,   934,  1824,  3816,  3837,  3858, 10562,
   -96,   -39,   -47,   -62,-32768,-32768,-32768,  1824, 10587,-32768,
   936,   938,  1136,  1137,   947, 11684,  1139,   945,  1824,  2972,
  1824,  1824,-32768, 11707,-32768,-32768,   978,   946,   948,   949,
   950,   952,   955,   956,   957,   958,   960,   961,   962,   963,
   965,   966,   968,   971,   972,   973,   979,   990,   996,  1023,
  1024,  1025,  1026,  1070,  1076,  1084,  1089,-32768,  1145,  1061,
-32768,  1091,    84,-32768,-32768,  1073,  1079,  1092,  1098,  1105,
  1106,  1107,  1108,  1109,  1111,  1112,  1113,  1114,  1116,  1119,
  1146,  1147,  1148,  1150,  1151,  1153,  1157,  1158,  1159,  1160,
  1161,  1248,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1824,  1824,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1277,-32768,  2321,    37,-32768, 10612,  1280,  2321,  1167,
    33,  1824,  1282,  1283,  1000,-32768,  1276,  1102,     8,  1287,
  1824,-32768,   196,  -110,   597,   597,  1291,   597,  1292,   597,
   597,-32768,  2321,  3202,  1221,   481,-32768,  2503,  1078,  1156,
  1294,  1354,  1355,  1373,   667,  1374,  1375,  1378,  1379,  1380,
  1383,  1384,  1389,   157,  3879,  3900,-32768,-32768,  3240,  -110,
  -110,  -110,  1388,  2321,  2321,  2321,  2321,  1186,  1390,  1824,
  1824,   597,   597,  1824,  1391,   597,  1393,  3921,-32768,  2533,
   453,  1392,  1234,  1398,  1824,  1824,  -110,  1399,  1400,  1215,
  1402,  1403,   597,   597,  1404,  -110,  1407,  1408,   597,   597,
  1409,  1410,  1412,  1413,  1414,   597,   422,   597,  1415,  1416,
  1418,  1417,  1421,-32768,  1420,   381,  1423,-32768,  1422,  3149,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,-32768, 11730, 10637, 11753,
 10662, 11776, 10687, 11799, 10712, 10737,  1230,   202,  1231,   -12,
-32768,  2443,-32768,   182,   167,  1229,  1426,  1431,-32768,-32768,
-32768,     8,  1824,-32768,   482,-32768,   619,  1428,    16,    34,
  1429,   597,  1430,   597,  1433,  1434,   486,-32768,-32768,  2321,
-32768,  1824,-32768,  1824,   597,   597,   597,  1244,-32768,   170,
   597,   597,   597,   597,   597,   597,   597,   346,  1824,  1824,
  1824,  1239,  -106,  -102,   -42,-32768,   497,   500,   505,   509,
-32768,-32768,  3942,  3963,  1438,  1439, 11822,    79,  1341,-32768,
  1824,  1824,  1824,-32768,  1243,    28,  1246,  3984,  4005,  -120,
  1247,  1252,  1249,  1254,  1251,  1256,  1253,  1255,   -33,  1257,
  1258,  1260,  1259,  1261,  1285,  1286,  1288,  1289,  1262,-32768,
-32768,-32768,-32768,-32768,  1290,  1293,  1295,  1296,  1297,  1264,
  1298,-32768,  1301,    -2,-32768,  1480,  4026,  4047,  4068,  4089,
  4110,  4131,  4152,  4173,  4194,  4215,  4236,  4257,  4278,  4299,
  4320,  4341,  4362,  4383,  4404,  4425,  4446,  4467,  4488,  4509,
  4530,  4551,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1303,-32768,-32768,-32768,   597,    37,  1824,  1484,  1490,    13,
-32768,  1489, 10762,     8,-32768,-32768,-32768,-32768,  -110,-32768,
  1491,-32768,  1500,-32768,-32768,  1306,   514,   619,  4572,  1526,
  1527,  1528,  1824,  1824,  1824,  1529,  1530,  1531,  1532,  1533,
  1549,  1550,-32768,  2384,  3263, 11845,   254,   475,  -110,  1551,
  -110,  1552,  -110,  1553,  1555,  1556,  1557,  1559,  1824,  1824,
-32768,-32768,  1583,   597,   597,  1486,   597,  2407,   383, 11868,
  1824,    28,  1591,  1824,   597,  1589,  1594,  1590,  1411,  1592,
   422,  1595,  1599,  1824,  1597,  1601,  1600,  1617,  1602,   422,
  1824,  1824,  1824,   597,  1618,  1622,   422,  1824,  1623,  1624,
  1625,  1824,   381,-32768,-32768,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1626,  1627,  1628,  1593,-32768,  1630,  1629,-32768,  1427,
-32768,    21,-32768,-32768,-32768,  1437,  1824,-32768,-32768,-32768,
  4593,  1789,  1902,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2313,  1634,  1440,-32768,  1824,-32768,  1436,   183,-32768,  1441,
   186,-32768,  1442,   193,-32768,  1443,-32768,-32768,-32768,-32768,
  4614,  4635,    79,   261,-32768,   518,  1444,  1547,  1824,-32768,
  1824,-32768,-32768,  4656,    28,  1451,  4677,  1448,-32768,  1449,
-32768,  1453,-32768,  1455,-32768,  1454, 11891,-32768,  1457,-32768,
-32768,  1456,  1459, 11914,  4698, 11937,  1461,-32768,  1463,  1492,
  4719,  1493,  1494,-32768,  4740,  1497,  4761,  4782,  4803,  4824,
  4845,  4866,  4887,  4908,  4929,  4950,  4971,  4992,  5013,  5034,
  5055,  5076,  5097,  5118,  5139,  5160,  5181,  5202,  5223,  5244,
  5265,  5286,  1495,-32768,-32768,-32768,     8,-32768,  1525,-32768,
-32768,  5307,  1824,-32768,-32768,-32768,-32768,   475,  2570,-32768,
  1695,   214,  1695,   214,  1695,   214,  1824,  1824,  1584,-32768,
   597,-32768,   597,  1824,  3286,  3309,   597,  1535,  1689,    79,
   422,  1699,  1824,  1722,   422,  1723,  1727,  1725,  1726,  1728,
  1824,  1729,   597,  1730,  1731,  1824,  1735,  1733,  1824,  1738,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,-32768,  1734,-32768,  1739,
 11960,  1540,  1824,-32768,  1695,  1695,  1824,  3332,   200,  1740,
  1543,   -37,-32768,  3355,   206,   -25,  3378,   210,   -14,  3401,
  3424,  1544,-32768,  1564,  2349,-32768,-32768,  1563,    28,-32768,
  1572,  1582,  1585,  5328,-32768,  1534,-32768,  1587,-32768,-32768,
-32768, 11983,-32768,  1586,-32768,-32768, 12006,  1588,-32768, 12029,
  1596, 12052, 12075, 12098,  5349,  5370,  5391,  5412,  5433,  5454,
  5475,  5496,  5517,  5538,  5559,  5580,  5601,  5622,  5643,  5664,
  5685,  5706,  5727,  5748,  5769, 12121,  5790,-32768,  1654,   597,
-32768,  3447,   846,  1785,  1824,-32768,   597,  1786,-32768,  1787,
  1824,  1788,  1790,  1824,  1791,  1792,  1794,   597,   597,-32768,
  1796,    28,   422,   422,   422,   422,  1797,  1798,  1799,   422,
  1823,  1825,  1826,  1854,-32768,-32768,-32768,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,-32768,  1824,
  1856,   597,-32768,-32768,  1659,  3470,  1681,-32768,-32768,  1682,
  3493,-32768,-32768,  1683,  3516,-32768,-32768,-32768,  1686,  1680,
-32768,    28,  1687,  1688,  1631,  1693,-32768,-32768,-32768,  1691,
-32768,-32768,-32768,  1692,  1694,  1696,  1697,  5811,  5832,  5853,
  5874,  5895,  5916,  5937,  5958,  5979,  6000,  6021,  6042,  6063,
  6084,  6105,  6126,  6147,  6168,  6189,  6210,  6231,  1698, 12144,
  1700,  1890,   214,  1891,   597,   214,  1898,   214,  1899,   597,
  1804,  1741,   422,   422,  1903,  1904,   422,  1906,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,    37,-32768,  1907,-32768,   -10,-32768,  1724,   521,
    -8,-32768,  1732,    -7,-32768,  1737,  1742,  1767,    28,  1736,
  1743,-32768,-32768,  1744,  1745,   522,   619,   530,   619,   531,
   619,  6252,  6273,  6294,  6315,  6336,  6357,  6378,  6399,  6420,
  6441,  6462,  6483,  6504,  6525,  6546,  6567,  6588,  6609,  6630,
  6651,  6672,   534,-32768,  1777,  1778,  1923,   214,   597,  1924,
  1925,   214,  1926,   214,  1831,  1824,    28,   422,   597,  1928,
  1929,  1824,  1931,  1824,  1932,  1824,  1936,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,    37,  1939,
    37,  1976,-32768,    24,  1779,-32768,-32768,   101,-32768,   241,
  1781,  6693,    28,  1784,  1807,-32768,-32768,   619,-32768,   619,
-32768,   619,-32768, 12167, 12190, 12213,  6714,  6735,  6756,  6777,
  6798,  6819,  6840,  6861,  6882,  6903,  6924,  6945,  6966,  6987,
  7008,  7029,  7050,  7071,-32768,-32768,   535,-32768,-32768,  1982,
  1984,  1986,  1988,  1824,  1824,  1842,   422,   597,-32768,-32768,
-32768,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,    37,
  2008,-32768,-32768,-32768,-32768,  7092,  3539,  1843,  1813,  1815,
  1816,  1817,  1819,  7113,  7134,  7155,  7176,  7197,  7218,  7239,
  7260,  7281,  7302,  7323,  7344,  7365,  7386,  7407,  7428,  7449,
  7470,-32768,-32768,  1824,  2013,-32768,   597,   422,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  3562,
-32768,  1821,  1827,   538,   619,   541,   619,   542,   619,  7491,
  7512,  7533,  7554,  7575,  7596,  7617,  7638,  7659,  7680,  7701,
  7722,  7743,  7764,  7785,  7806,  7827,  7848,  2019,   597,  2021,
  1824,  2022,  1824,  2023,  1824,  2024,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,-32768,  1828,-32768,   619,-32768,   619,
-32768,   619,-32768, 12236, 12259, 12282,  7869,  7890,  7911,  7932,
  7953,  7974,  7995,  8016,  8037,  8058,  8079,  8100,  8121,  8142,
  8163,   597,-32768,-32768,-32768,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1829,  1830,  1832,  1833,  8184,  8205,  8226,  8247,  8268,  8289,
  8310,  8331,  8352,  8373,  8394,  8415,  8436,  8457,  8478,   597,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1835,   545,
   619,   551,   619,   552,   619,  8499,  8520,  8541,  8562,  8583,
  8604,  8625,  8646,  8667,  8688,  8709,  8730,  8751,  8772,  8793,
   422,  1824,  2027,  1824,  2029,  1824,  2042,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1850,   619,-32768,   619,-32768,   619,-32768, 12305,
 12328, 12351, 12374, 12397, 12420,  8814,  8835,  8856,  8877,  8898,
  8919,  8940,  8961,  8982,  2044,-32768,-32768,-32768,-32768,-32768,
-32768,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
-32768,  1847,  1848,  1849,  1851,  1852,  1853,  9003,  9024,  9045,
  9066,  9087,  9108,  9129,  9150,  9171,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,   555,   619,   567,   619,   570,   619,   571,   619,   574,
   619,   583,   619,  9192,  9213,  9234,  9255,  9276,  9297,  9318,
  9339,  9360,  1824,  2048,  1824,  2052,  1824,  2053,  1824,  2054,
  1824,  2055,  1824,  2056,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  1824,  1824,   619,-32768,   619,-32768,   619,-32768,   619,
-32768,   619,-32768,   619,-32768,  9381,  9402,  9423,  9444,  9465,
  9486, 12443, 12466, 12489,  1824,  1824,  1824,  1824,  1824,  1824,
-32768,-32768,-32768,  9507,  9528,  9549,  9570,  9591,  9612,  1859,
  1880,  1892,  1824,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  1824,  9633,  9654,  9675,  9696,  9717,  9738,   586,   619,   589,
   619,   608,   619,  1824,  1824,  1824,  1824,  1824,  1824,  1824,
  2088,  1824,  2089,  1824,  2091,  9759,  9780,  9801, 12512, 12535,
 12558,   619,-32768,   619,-32768,   619,-32768,  1824,  1824,  1824,
-32768,-32768,-32768,  9822,  9843,  9864,  1894,  1897,  1901,  1824,
  1824,  1824,  1824,  1824,  1824,  9885,  9906,  9927,   609,   619,
   612,   619,   656,   619,  1824,  1824,  1824,  1824,  2097,  1824,
  2101,  1824,  2103,  9948,  9969,  9990,   619,-32768,   619,-32768,
   619,-32768,  1824,  1824,  1824, 10011, 10032, 10053,  1824,  1824,
  1824, 10074, 10095, 10116,  1824,  1824,  1824, 12581, 12604, 12627,
-32768,-32768,-32768,  1922,  1933,  1934,  1824,  1824,  1824,   660,
   619,   663,   619,   666,   619,  1824,  2105,  1824,  2130,  1824,
  2133,   619,-32768,   619,-32768,   619,-32768,  2140,  2148,-32768
};

static const short yypgoto[] = {-32768,
   -84,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1545,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -299,   -18,-32768,  2143,    -3,  -367,  -117,    -1,-32768,-32768,
-32768,-32768,-32768,  2144,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768, -1268, -1302,-32768,-32768, -1097,   -23,-32768,
   -29,-32768,   -94,-32768, -1185,  1062,  1452,  -244,  -332,  -730,
  1115,-32768,   -21
};


#define	YYLAST		12826


static const short yytable[] = {   142,
   246,   555,   213,    75,   141,    76,   495,   529,   894,   185,
   182,   197,   251,  1234,   175,   177,   738,   152,   100,   207,
   200,  1047,  1243,   207,   195,   150,  1290,  1309,  1380,  1250,
    85,   385,   494,  1381,   306,  1386,   885,  1389,     9,  1048,
  1380,   207,   150,   482,   207,  1381,   209,   211,   125,   126,
   127,  1380,   125,   126,   127,  1380,  1381,  1380,  1380,   491,
  1381,     8,  1381,  1381,   515,   375,   366,   367,   516,   379,
   125,   126,   127,   125,   126,   127,   171,   172,  1106,  1459,
   366,   367,  1049,  1459,   366,   367,  1459,   173,   207,  1380,
   396,    88,   398,   174,  1381,   491,  1079,   253,  1080,   254,
  1081,   147,  1082,   366,   367,   366,   367,   784,   299,   300,
   301,   618,    89,   302,   305,   619,   309,   125,   126,   127,
   368,   546,   186,   329,   330,   331,   386,   333,   400,   335,
   336,   255,   347,   256,  1401,   154,   307,   308,   886,   887,
   361,   787,   363,    90,   366,   367,   366,   367,   370,   364,
   365,   366,   367,   366,   367,   723,   786,    91,   151,   724,
  1083,  1042,  1084,   369,   785,  1115,  1380,  1458,   625,   383,
   384,  1381,   387,  1036,   389,   151,    92,   392,   393,  1462,
   196,   135,   136,   743,   128,   129,   130,   131,   100,   837,
  1465,   135,   136,   732,  1667,   756,  1671,  1673,   128,   129,
   130,   131,   366,   367,    93,   135,   136,   366,   367,   187,
   183,   198,   252,   731,   201,    86,   739,    94,   208,   135,
   136,   438,   210,  1402,   436,  1064,  1065,  1406,  1760,   440,
   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
   451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
   461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
   471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
   481,   491,   580,   483,   484,   485,  1094,   135,   136,  1380,
   490,   152,  1095,   491,  1381,   837,    10,   496,   500,   501,
   502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
   512,   513,   514,    95,  1617,  1762,  1380,  1621,   520,  1624,
   522,  1381,    96,  1171,  1459,   300,   490,   257,  1459,   258,
   145,  1459,   366,   367,   533,   534,   535,   536,   146,   538,
   539,   540,   541,   542,   543,   544,   549,   550,   556,   128,
   129,   130,   131,   366,   367,   567,   568,   557,   558,   559,
   560,  1073,  1074,   569,   128,   129,   130,   131,   147,   929,
   135,   136,   576,   148,   551,   551,   554,   554,   157,   366,
   367,   584,   366,   367,   149,  1533,  1534,  1535,  1536,   366,
   367,   190,  1540,   155,   191,  1301,   366,   367,  1303,   153,
  1221,   878,   366,   367,   898,  1305,   366,   367,   729,  1714,
  1033,   154,  1455,  1718,   729,  1720,   179,   158,  1461,   180,
   181,  1459,  1464,   135,   136,  1459,   156,  1459,   624,   248,
   907,   249,    11,    12,    13,    14,    15,    16,    17,    18,
   312,   313,   314,   315,   316,   159,   317,   318,   319,   320,
   321,   322,   323,   324,   325,  1763,   160,   323,   324,   325,
   326,   937,   938,   939,   940,   326,  1195,   164,  1196,  1310,
   953,   169,   727,  1311,   184,   300,   321,   322,   323,   324,
   325,   735,   734,   259,   733,   260,   326,   161,   162,   491,
   163,   170,   135,   136,   883,  1630,  1631,   192,   486,  1634,
   249,   261,   490,   262,   263,   178,   264,   135,   136,   188,
   189,   727,   754,   525,   490,   249,   758,   759,   491,   135,
   136,   193,   265,   765,   266,   755,   774,   249,   267,   269,
   268,   270,   165,   775,   776,   166,   167,   271,   168,   272,
   194,   202,   779,    43,    44,    45,    46,   203,    48,   491,
   491,   491,   491,   204,   788,   980,   981,   982,   983,   984,
   273,   275,   274,   276,   206,   798,  1368,   800,   801,   312,
   313,   314,   315,   316,   205,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   277,   212,   278,  1057,   244,   326,
  1724,   279,   247,   280,  1035,  1037,   295,  1222,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   296,   297,    97,
   337,   839,   326,   310,   838,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   312,
   313,   314,   315,   316,   338,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   281,   283,   282,   284,   285,   326,
   286,   954,   287,   327,   288,    43,    44,    45,    46,    47,
    48,   289,   291,   290,   292,   491,   293,   332,   294,  1799,
   334,   721,   919,   722,   328,   360,   349,   868,   869,   729,
   729,   730,   757,   729,  1044,   911,  1045,   350,   729,   351,
  1056,   870,   871,   872,   873,   874,   875,   876,   355,   729,
   490,  1085,   729,   879,  1086,   882,   348,   729,   888,  1087,
  1197,   729,   356,  1088,   899,   353,   729,   897,  1176,   354,
  1311,   920,  1312,  1669,  1682,  1670,  1683,   371,   372,   490,
  1853,   727,  1684,  1686,  1685,  1687,  1709,  1790,  1710,  1791,
  1881,   993,  1882,  1883,  1885,  1884,  1886,  2012,   374,  2013,
   933,   934,   935,  2014,  2016,  2015,  2017,  2123,   377,  2124,
   490,   490,   490,   490,   311,   357,   943,   944,   373,  2125,
   947,  2126,  2127,  2129,  2128,  2130,  2131,   960,  2132,   499,
   378,   958,   959,   132,   339,  2133,   969,  2134,  2210,   134,
  2211,  2212,   358,  2213,   137,   312,   313,   314,   315,   316,
   340,   317,   318,   319,   320,   321,   322,   323,   324,   325,
  2214,  2258,  2215,  2259,  2260,   326,  2261,   997,   998,   999,
  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,
  1020,  1021,  1022,   312,   313,   314,   315,   316,   359,   317,
   318,   319,   320,   321,   322,   323,   324,   325,  2262,   382,
  2263,   838,  2306,   326,  2307,  2308,  1038,  2309,  2310,  1043,
  2311,  1102,   388,   314,   315,   316,   390,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   490,   391,  1058,   394,
  1059,   326,   315,   316,   395,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   397,  1075,  1076,  1077,   399,   326,
   431,   401,   402,  2033,   403,   404,   405,   406,   407,   408,
   409,   410,   411,   412,   413,   414,   415,  1098,  1099,  1100,
  1372,   416,   417,   418,   419,   312,   313,   314,   315,   316,
   420,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   312,   313,   314,   315,   316,   326,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   421,   422,   423,   424,   425,
   326,    97,   298,   426,   427,  1134,   434,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   428,   429,   430,   433,   891,   437,   326,   488,   435,
   497,   498,   531,  1165,  1164,   526,   537,  1225,   545,  1172,
   571,   572,   312,   313,   314,   315,   316,   575,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   578,  1256,  1181,
  1182,  1183,   326,   581,   487,   587,   588,   589,   547,  1198,
  1191,  1201,  1192,  1204,   590,   591,   592,   593,   594,   595,
   596,   597,   598,   599,   600,  1211,  1212,   601,   602,   603,
   604,   605,   606,   607,   551,   608,   554,  1224,   609,   610,
  1227,   611,   621,   913,   612,   613,   614,   615,   616,   617,
  1237,   620,   622,   725,   726,   736,   737,  1244,  1245,  1246,
   742,   773,   744,   745,  1251,   746,   748,   750,  1255,   751,
   760,   777,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,
  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,
  1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,   778,   790,
  1318,   791,   792,   793,   794,   796,   797,   803,   804,   834,
   805,   806,   807,  1292,   808,   132,   133,   809,   810,   811,
   812,   134,   813,   814,   815,   816,   137,   817,   818,   303,
   819,  1299,   304,   820,   821,   822,   312,   313,   314,   315,
   316,   823,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   941,   824,    97,   298,  1315,   326,  1316,   825,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    97,   298,   826,   827,   828,   829,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   867,   312,   313,   314,   315,   316,   835,
   317,   318,   319,   320,   321,   322,   323,   324,   325,  1371,
   841,  1379,   830,  1385,   326,  1388,   842,  1378,   831,  1384,
   877,  1387,   892,  1390,  1391,   881,   832,   889,   890,   843,
  1395,   833,   896,   836,   551,   844,   554,   902,   904,  1404,
   915,   893,   845,   846,   847,   848,   849,  1412,   850,   851,
   852,   853,  1417,   854,  1472,  1420,   855,  1422,  1423,  1424,
  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,
  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,
  1445,  1446,  1447,   856,   857,   858,   363,   859,   860,  1452,
   861,   299,   300,  1453,   862,   863,   864,   865,   866,   914,
   916,   917,   312,   313,   314,   315,   316,   884,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   132,   133,   918,
   921,   922,   326,   134,   923,   924,   925,  1532,   137,   926,
   927,   752,   928,   936,   753,   942,   950,   948,   955,   956,
   957,   961,   962,   963,   964,   965,   968,   132,   133,   970,
   971,   974,   975,   134,   976,   977,   978,   987,   137,   990,
   988,   909,   989,   991,   910,   992,   994,   995,  1032,  1034,
  1039,  1516,  1040,  1046,  1050,  1052,  1041,  1521,  1054,  1055,
  1525,  1063,  1078,  1091,  1092,  1097,  1101,  1582,  1103,  1107,
  1108,  1109,  1110,  1111,  1112,  1113,  1117,  1114,  1118,  1116,
  1125,  1119,  1131,  1120,  1548,  1549,  1550,  1551,  1552,  1553,
  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
  1564,  1565,  1566,  1567,  1568,  1135,  1570,  1121,  1122,  1166,
  1123,  1124,  1126,  1167,  1169,  1127,  1173,  1128,  1129,  1130,
  1132,    97,   527,  1133,  1162,  1174,  1175,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,  1178,  1179,  1180,  1184,  1185,  1186,  1187,  1188,   312,
   313,   314,   315,   316,  1677,   317,   318,   319,   320,   321,
   322,   323,   324,   325,  1189,  1190,  1199,  1202,  1205,   326,
  1207,  1208,  1209,   493,  1210,  1637,  1639,  1641,  1642,  1643,
  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1213,
  1217,  1664,  1723,  1226,  1229,  1231,  1230,  1233,  1286,  1232,
  1235,  1236,  1238,  1239,  1242,  1240,   345,   312,   313,   314,
   315,   316,   352,   317,   318,   319,   320,   321,   322,   323,
   324,   325,  1241,  1248,  1249,  1252,  1253,   326,  1289,  1283,
  1254,  1369,  1284,  1285,  1288,   376,  1287,  1291,  1766,  1297,
  1300,   380,   381,  1298,  1302,  1304,  1306,  1313,  1314,  1319,
  1321,  1322,  1722,  1324,  1328,  1323,  1325,  1329,  1728,  1327,
  1730,  1334,  1732,  1333,  1734,  1735,  1736,  1737,  1738,  1739,
  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,
  1750,  1751,  1752,  1753,  1754,   132,   133,  1755,  1392,  1758,
  1335,   134,  1338,  1367,  1400,  1337,   137,    97,   298,  1340,
  1399,  1403,   528,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,  1405,  1407,  1408,
  1409,  1410,  1477,  1411,  1413,  1415,  1416,  1418,  1419,  1448,
  1796,  1797,  1421,  1449,  1451,  1456,  1457,  1468,  1804,  1805,
  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
  1816,  1817,  1818,  1819,  1820,  1821,  1469,  1471,  1822,   312,
   313,   314,   315,   316,  1473,   317,   318,   319,   320,   321,
   322,   323,   324,   325,  1474,  1478,  1482,  1475,  1480,   326,
  1514,  1518,  1519,  1522,  1294,  1523,  1526,  1527,  1484,  1528,
  1850,  1531,  1537,  1538,  1539,  1855,  1857,  1859,  1860,  1861,
  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,
  1872,  1873,  1874,  1875,  1876,  1877,    97,   298,  1541,  1585,
  1542,  1543,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,  1511,  1908,  1544,  1910,
  1571,  1912,  1573,  1914,  1915,  1916,  1917,  1918,  1919,  1920,
  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,
  1931,  1375,  1376,  1575,  1581,  1576,  1578,   134,  1580,  1583,
  1584,  1586,  1377,  1587,  1588,  1616,  1618,  1589,   174,  1590,
  1591,  1613,  1615,  1622,  1625,  1628,  1629,  1295,  1632,  1633,
  1635,  1666,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1668,  1713,  1716,
  1717,  1719,  1721,  1726,  1727,  1672,  1729,  1731,  1678,   728,
  1674,  1733,  1680,  1681,  1756,  1679,  1675,  1991,  1993,  1995,
  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
  2006,  2007,  2008,  2009,  2010,   312,   313,   314,   315,   316,
  1676,   317,   318,   319,   320,   321,   322,   323,   324,   325,
  1711,  1759,  1712,  1761,  1764,   326,  1767,  1792,  2034,  1793,
  2036,  1794,  2038,  1795,  2040,  2041,  2042,  2043,  2044,  2045,
  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  1768,
   132,   133,  1798,  1823,  1826,  1827,   134,  1828,  1851,  1829,
  1830,   137,  1831,  1879,  1905,  1880,  1907,  1909,  1911,  1913,
  1932,  1970,  2035,  1971,  2037,  1972,  1973,  2011,  2078,  2079,
  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2039,  2055,  2071,
  2087,  2088,  2089,  2145,  2090,  2091,  2092,  2147,  2149,  2151,
  2153,  2155,  2189,  2103,  2105,  2107,  2109,  2111,  2113,  2114,
  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,   312,   313,
   314,   315,   316,  2190,   317,   318,   319,   320,   321,   322,
   323,   324,   325,  2223,  2225,  2191,  2227,  2243,   326,  2144,
  2244,  2146,  2268,  2148,  2245,  2150,  2270,  2152,  2272,  2154,
  2313,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,
   312,   313,   314,   315,   316,  2297,   317,   318,   319,   320,
   321,   322,   323,   324,   325,  2315,  2298,  2299,  2317,  2319,
   326,  2174,  2175,  2176,  2177,  2178,  2179,  2320,   761,    74,
    82,     0,     0,     0,  1168,     0,  1216,     0,     0,  2192,
  2193,  2194,  2195,  2196,  2197,  2199,  2201,  2203,     0,   840,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  2216,  2217,  2218,  2219,  2220,  2221,  2222,     0,  2224,     0,
  2226,     0,     0,     0,     0,     0,   900,   901,     0,   903,
     0,   905,   906,     0,  2234,  2235,  2236,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  2246,  2247,  2248,  2250,
  2252,  2254,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2264,  2265,  2266,  2267,     0,  2269,     0,  2271,     0,
     0,     0,     0,   945,   946,     0,     0,   949,     0,  2276,
  2277,  2278,     0,     0,     0,  2282,  2283,  2284,     0,     0,
     0,  2288,  2289,  2290,   966,   967,     0,     0,     0,     0,
   972,   973,     0,  2301,  2303,  2305,     0,   979,     0,   986,
     0,     0,  2312,     0,  2314,     0,  2316,     0,    97,    98,
    99,     0,   100,     0,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,  1296,   125,
   126,   127,     0,    97,   337,     0,     0,     0,     0,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,  1051,  1470,  1053,     0,     0,   338,     0,
     0,     0,     0,     0,     0,     0,  1060,  1061,  1062,     0,
     0,     0,  1066,  1067,  1068,  1069,  1070,  1071,  1072,    43,
    44,    45,    46,    47,    48,     0,    97,   298,   207,     0,
     0,     0,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,     0,   125,   126,   127,
    97,   527,     0,     0,     0,     0,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   530,     0,     0,     0,     0,     0,     0,     0,   128,   129,
   130,   131,     0,     0,     0,   582,     0,     0,     0,     0,
     0,     0,   132,   133,     0,     0,     0,     0,   134,   135,
   136,     0,     0,   137,     0,   138,  1163,   139,   741,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,   132,   489,   326,
   912,     0,     0,   134,     0,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   952,     0,     0,     0,     0,   326,     0,     0,  1218,     0,
     0,     0,     0,     0,     0,     0,  1228,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   132,   133,     0,     0,     0,  1247,   134,     0,     0,     0,
     0,   137,     0,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   132,   133,     0,     0,     0,  1219,
   134,  1220,     0,     0,     0,   137,     0,     0,     0,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   312,   313,   314,   315,   316,   326,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,     0,     0,     0,     0,     0,   -10,     1,
     0,   -10,   -53,     0,     0,     0,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,  1393,     0,  1394,     0,   326,     0,  1398,     0,
     0,   -53,  1373,     0,  1374,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,   -53,  1414,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,     0,     0,     0,   -53,   -53,   -53,   -53,
   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,   561,
    27,    28,   562,   563,    31,   564,    33,     0,    34,     0,
    36,    37,    38,     0,    40,    41,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   -53,   -53,   -53,   -53,
     0,    53,     0,     0,   -53,     0,   -53,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,     0,     0,     0,     0,   -10,   -10,   -10,
   -10,   -10,   -10,   -10,   -10,     0,     0,     0,     0,    67,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1512,     2,     3,     0,     4,     0,     0,  1517,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1529,
  1530,   561,    27,    28,   562,   563,    31,   564,    33,     0,
    34,     0,    36,    37,    38,     0,    40,    41,     0,     0,
     0,     0,     0,   561,    27,    28,   562,   563,    31,   564,
    33,     0,    34,    53,    36,    37,    38,     0,    40,    41,
     0,     0,     0,  1572,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    53,   565,     0,     0,     0,
     0,     0,    55,    56,    57,     0,     0,   561,    27,    28,
   562,   563,    31,   564,    33,     0,    34,     0,    36,    37,
    38,    67,    40,    41,    55,    56,    57,     0,     0,   561,
    27,    28,   562,   563,    31,   564,    33,     0,    34,    53,
    36,    37,    38,    67,    40,    41,  1620,     0,     0,     0,
     0,  1627,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    53,     0,     0,     0,     0,     0,     0,    55,    56,
    57,   214,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    67,     0,     0,
    55,    56,    57,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   570,    67,
     0,     0,     0,   326,     0,     0,     0,     0,     0,     0,
     0,   766,     0,     0,     0,   312,   313,   314,   315,   316,
   585,   317,   318,   319,   320,   321,   322,   323,   324,   325,
  1715,     0,     0,     0,     0,   326,     0,     0,     0,   623,
  1725,   215,   216,   217,     0,     0,     0,     0,     0,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,     0,
     0,     0,     0,     0,   586,     0,     0,   228,   229,   230,
   231,   232,   233,   234,   235,   236,   237,     0,   238,   239,
   240,   241,   242,   243,     0,     0,   799,   626,   627,   628,
   629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
   639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,   651,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    23,     0,  1800,
   626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
   636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
   646,   647,   648,   649,   650,   651,    24,     0,     0,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,    41,     0,     0,
     0,    42,    43,    44,    45,    46,    47,    48,  1852,    49,
    50,    51,    52,    53,   561,    27,    28,   562,   563,    31,
   564,    33,     0,    34,     0,    36,    37,    38,     0,    40,
    41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   652,    54,    55,    56,    57,     0,    53,     0,     0,    58,
     0,    59,     0,    60,    61,    62,    63,    64,    65,    66,
  1906,    67,    68,    69,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,   312,   313,
   314,   315,   316,   996,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,    67,     0,     0,     0,   326,     0,
     0,     0,     0,     0,     0,     0,   767,     0,   312,   313,
   314,   315,   316,  1951,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,     0,     0,     0,     0,   908,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   312,   313,   314,   315,
   316,  1989,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,   312,
   313,   314,   315,   316,   932,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,   312,   313,   314,   315,   316,  1193,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,   312,   313,   314,   315,   316,
  1396,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,     0,   312,   313,
   314,   315,   316,  1397,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,   312,   313,   314,   315,   316,  1454,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,   312,   313,   314,   315,   316,  1460,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,   312,   313,   314,
   315,   316,  1463,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,     0,
   312,   313,   314,   315,   316,  1466,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,   312,   313,   314,   315,   316,  1467,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,   312,   313,   314,   315,
   316,  1513,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,   312,
   313,   314,   315,   316,  1574,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,   312,   313,   314,   315,   316,  1577,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,   312,   313,   314,   315,   316,
  1579,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,     0,   312,   313,
   314,   315,   316,  1825,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,   312,   313,   314,   315,   316,  1878,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,   547,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,   548,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,   579,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
   701,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,   702,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,   715,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,   716,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,   717,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,   718,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,   719,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,   720,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,   780,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,   781,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
   782,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,   930,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,   931,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,   951,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1089,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1090,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1104,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1105,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1136,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1137,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1138,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1139,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1140,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1141,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1142,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1143,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1144,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1145,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1146,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1147,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1148,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1149,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1150,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1151,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1152,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1153,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1154,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1155,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1156,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1157,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1158,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1159,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1160,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1161,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1177,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1293,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1307,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1308,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1317,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1320,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1331,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1336,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1339,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1341,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1342,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1343,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1344,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1345,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1346,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1347,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1348,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1349,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1350,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1351,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1352,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1353,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1354,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1355,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1356,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1357,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1358,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1359,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1360,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1361,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1362,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1363,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1364,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1365,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1366,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1370,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1476,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1488,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1489,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1490,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1491,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1492,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1493,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1494,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1495,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1496,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1497,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1498,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1499,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1500,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1501,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1502,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1503,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1504,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1505,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1506,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1507,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1508,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1510,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1592,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1593,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1594,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1595,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1596,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1597,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1598,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1599,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1600,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1601,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1602,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1603,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1604,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1605,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1606,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1607,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1608,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1609,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1610,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1611,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1612,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1688,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1689,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1690,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1691,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1692,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1693,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1694,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1695,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1696,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1697,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1698,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1699,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1700,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1701,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1702,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1703,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1704,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1705,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1706,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1707,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1708,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1765,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1772,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1773,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1774,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1775,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1776,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1777,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1778,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1779,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1780,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1781,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1782,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1783,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1784,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1785,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1786,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1787,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1788,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1789,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1824,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1832,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1833,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1834,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1835,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1836,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1837,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1838,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1839,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1840,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1841,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1842,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1843,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1844,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1845,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1846,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1847,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1848,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1849,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1887,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1888,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1889,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1890,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1891,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1892,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1893,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1894,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1895,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1896,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1897,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1898,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1899,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1900,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1901,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1902,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1903,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1904,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1936,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1937,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1938,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1939,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1940,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1941,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1942,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1943,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1944,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1945,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1946,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1947,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1948,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1949,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1950,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1974,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1975,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1976,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1977,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1978,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  1979,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  1980,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  1981,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  1982,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  1983,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  1984,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  1985,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  1986,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  1987,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  1988,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2018,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2019,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2020,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2021,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2022,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2023,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2024,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2025,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2026,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2027,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2028,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2029,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2030,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2031,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2032,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2062,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2063,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2064,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2065,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2066,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2067,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2068,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2069,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2070,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2093,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2094,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2095,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2096,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2097,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2098,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2099,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2100,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2101,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2135,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2136,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2137,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2138,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2139,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2140,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2141,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2142,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2143,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2165,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2166,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2167,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2168,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2169,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2170,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2183,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2184,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2185,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2186,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2187,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2188,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2204,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2205,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2206,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2207,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2208,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2209,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2228,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2229,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2230,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2240,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2241,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2242,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2255,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2256,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,   312,   313,   314,   315,   316,  2257,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   312,   313,   314,   315,   316,
  2273,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,   312,   313,   314,   315,
   316,  2274,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,   312,   313,   314,
   315,   316,  2275,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,  2279,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   312,
   313,   314,   315,   316,  2280,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
   312,   313,   314,   315,   316,  2281,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,   312,   313,   314,   315,   316,  2285,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,   312,   313,   314,   315,   316,  2286,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,   312,   313,   314,   315,   316,  2287,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   680,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   682,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   684,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   686,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   688,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   690,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   692,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   694,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   696,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   698,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   700,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   704,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   706,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   708,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   710,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   712,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   714,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   783,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,   789,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   880,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,  1024,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,  1026,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,  1028,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,  1030,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,     0,     0,  1031,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,  1170,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   487,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   517,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   518,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   519,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   521,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   523,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   524,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   532,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   573,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   574,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   577,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   583,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   679,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   681,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   683,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   685,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   687,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   689,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   691,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   693,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   695,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   697,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   699,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   703,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   705,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   707,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   709,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   711,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   713,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   747,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   749,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   762,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   763,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   764,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   768,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   769,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   770,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   771,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   772,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   795,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   802,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1023,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1025,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1027,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1029,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1093,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1194,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1223,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  1326,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  1330,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  1332,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1450,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1479,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1481,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1483,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1485,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1486,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1487,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  1509,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  1614,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  1769,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1770,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1771,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1933,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1934,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1935,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  2056,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  2057,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  2058,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  2059,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  2060,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  2061,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  2171,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  2172,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  2173,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  2231,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  2232,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  2233,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  2291,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  2292,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  2293
};

static const short yycheck[] = {    23,
    95,   369,    87,     7,    23,     7,   306,   340,   739,     4,
     4,     4,     4,  1111,    44,    45,     4,    65,     7,     5,
     4,     6,  1120,     5,    42,    65,     6,  1213,    66,  1127,
     3,   103,     7,    71,     4,  1304,     4,  1306,   168,     6,
    66,     5,    65,     4,     5,    71,    68,    69,    34,    35,
    36,    66,    34,    35,    36,    66,    71,    66,    66,   304,
    71,     6,    71,    71,   199,   183,   187,   188,   203,   187,
    34,    35,    36,    34,    35,    36,   187,   188,   199,  1382,
   187,   188,    49,  1386,   187,   188,  1389,   198,     5,    66,
   208,     7,   210,   204,    71,   340,   203,   198,   205,   200,
   203,   198,   205,   187,   188,   187,   188,   204,   132,   133,
   134,   199,     6,   137,   138,   203,   140,    34,    35,    36,
   204,   203,   117,   147,   148,   149,   198,   151,   213,   153,
   154,   198,   156,   200,  1320,   198,   106,   107,   106,   107,
   170,   204,   172,     6,   187,   188,   187,   188,   178,   173,
   174,   187,   188,   187,   188,   199,   204,     6,   198,   203,
   203,   892,   205,   204,   204,   199,    66,   205,   204,   193,
   194,    71,   196,     7,   198,   198,     6,   201,   202,   205,
   198,   194,   195,   516,   173,   174,   175,   176,     7,   202,
   205,   194,   195,   493,   205,   528,   205,   205,   173,   174,
   175,   176,   187,   188,     6,   194,   195,   187,   188,   204,
   204,   204,   204,   202,   198,   188,   204,   198,   204,   194,
   195,   251,   204,  1321,   248,    56,    57,  1325,   205,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   516,   390,   295,   296,   297,   198,   194,   195,    66,
   304,    65,   204,   528,    71,   202,     3,   306,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   198,  1573,   205,    66,  1576,   332,  1578,
   334,    71,   198,  1044,  1617,   339,   340,   198,  1621,   200,
   198,  1624,   187,   188,   348,   349,   350,   351,     6,   353,
   354,   355,   356,   357,   358,   359,   366,   367,   203,   173,
   174,   175,   176,   187,   188,     6,     7,   371,   372,   373,
   374,     6,     7,   377,   173,   174,   175,   176,   198,   203,
   194,   195,   386,   198,   368,   369,   368,   369,    42,   187,
   188,   395,   187,   188,   198,  1473,  1474,  1475,  1476,   187,
   188,    38,  1480,    46,    41,   203,   187,   188,   203,   198,
     8,   724,   187,   188,   199,   203,   187,   188,   203,  1668,
   199,   198,   203,  1672,   203,  1674,    38,    42,   203,    41,
    42,  1714,   203,   194,   195,  1718,   198,  1720,   437,   200,
   753,   202,   139,   140,   141,   142,   143,   144,   145,   146,
   177,   178,   179,   180,   181,    42,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   205,    42,   189,   190,   191,
   197,   784,   785,   786,   787,   197,   203,    44,   205,   199,
     8,   198,   486,   203,    42,   489,   187,   188,   189,   190,
   191,   495,   494,   198,   493,   200,   197,    41,    42,   724,
    44,   204,   194,   195,   729,  1583,  1584,     4,   200,  1587,
   202,   198,   516,   200,   198,   204,   200,   194,   195,     6,
     6,   525,   526,   200,   528,   202,   530,   531,   753,   194,
   195,   198,   198,   537,   200,   200,   546,   202,   198,   198,
   200,   200,    38,   547,   548,    41,    42,   198,    44,   200,
   198,   198,   556,    59,    60,    61,    62,     6,    64,   784,
   785,   786,   787,     4,   568,   124,   125,   126,   127,   128,
   198,   198,   200,   200,    42,   579,  1287,   581,   582,   177,
   178,   179,   180,   181,     4,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   198,     3,   200,   910,   198,   197,
  1678,   198,     5,   200,   884,   885,   198,   205,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   198,   198,     3,
     4,   623,   197,     6,   623,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   177,
   178,   179,   180,   181,    38,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   198,   198,   200,   200,   198,   197,
   200,   199,   198,     6,   200,    59,    60,    61,    62,    63,
    64,   198,   198,   200,   200,   910,   198,   198,   200,  1767,
   198,   200,     6,   202,     5,     4,   198,   701,   702,   203,
   203,   205,   205,   203,   203,   205,   205,   198,   203,   198,
   205,   715,   716,   717,   718,   719,   720,   721,   198,   203,
   724,   205,   203,   725,   205,   729,   204,   203,   732,   205,
  1078,   203,   198,   205,   744,   204,   203,   741,   205,   204,
   203,    55,   205,   203,   203,   205,   205,   204,   204,   753,
  1828,   755,   203,   203,   205,   205,   203,   203,   205,   205,
   203,   836,   205,   203,   203,   205,   205,   203,   200,   205,
   780,   781,   782,   203,   203,   205,   205,   203,   200,   205,
   784,   785,   786,   787,     6,   198,   790,   791,   204,   203,
   794,   205,   203,   203,   205,   205,   203,   807,   205,     6,
     6,   805,   806,   187,   188,   203,   816,   205,   203,   193,
   205,   203,   198,   205,   198,   177,   178,   179,   180,   181,
   204,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   203,   203,   205,   205,   203,   197,   205,   841,   842,   843,
   844,   845,   846,   847,   848,   849,   850,   851,   852,   853,
   854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   866,   177,   178,   179,   180,   181,   198,   183,
   184,   185,   186,   187,   188,   189,   190,   191,   203,     6,
   205,   880,   203,   197,   205,   203,   885,   205,   203,   893,
   205,   956,   202,   179,   180,   181,   204,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   910,   109,   912,     6,
   914,   197,   180,   181,   198,   183,   184,   185,   186,   187,
   188,   189,   190,   191,     6,   929,   930,   931,     6,   197,
     5,   198,   198,  2011,   198,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   951,   952,   953,
  1298,   198,   198,   198,   198,   177,   178,   179,   180,   181,
   198,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   177,   178,   179,   180,   181,   197,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   198,   198,   198,   198,   198,
   197,     3,     4,   198,   198,   994,   199,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   198,   198,   198,   203,     6,     4,   197,     7,   203,
   202,     7,     7,  1037,  1036,   204,     7,  1102,   199,  1049,
     7,     7,   177,   178,   179,   180,   181,   104,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   106,  1133,  1063,
  1064,  1065,   197,   204,   199,   169,     5,     5,   203,  1079,
  1074,  1081,  1074,  1083,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,  1089,  1090,     5,     5,     5,
     5,     5,     5,     5,  1078,     5,  1078,  1101,     5,     5,
  1104,   157,     6,     6,     5,     5,     5,     5,     3,     5,
  1114,     5,     5,   203,   199,     6,     4,  1121,  1122,  1123,
     6,   202,     7,     7,  1128,     7,     7,     7,  1132,     7,
     7,   205,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,   205,   204,
  1225,   204,     7,     7,   198,     7,   202,   170,   203,     5,
   203,   203,   203,  1177,   203,   187,   188,   203,   203,   203,
   203,   193,   203,   203,   203,   203,   198,   203,   203,   201,
   203,  1195,   204,   203,   203,   203,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,     6,   203,     3,     4,  1219,   197,  1221,   203,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     3,     4,   203,   203,   203,   203,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     6,   177,   178,   179,   180,   181,   199,
   183,   184,   185,   186,   187,   188,   189,   190,   191,  1293,
   198,  1301,   203,  1303,   197,  1305,   198,  1301,   203,  1303,
     4,  1305,     7,  1307,  1308,     6,   203,     6,     6,   198,
  1314,   203,     6,   203,  1298,   198,  1298,     7,     7,  1323,
     7,   200,   198,   198,   198,   198,   198,  1331,   198,   198,
   198,   198,  1336,   198,  1399,  1339,   198,  1341,  1342,  1343,
  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
  1364,  1365,  1366,   198,   198,   198,  1376,   198,   198,  1373,
   198,  1375,  1376,  1377,   198,   198,   198,   198,   198,   204,
     7,     7,   177,   178,   179,   180,   181,   201,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   187,   188,     7,
     7,     7,   197,   193,     7,     7,     7,  1472,   198,     7,
     7,   201,     4,     6,   204,     6,     4,     7,     7,   166,
     3,     3,     3,   189,     3,     3,     3,   187,   188,     3,
     3,     3,     3,   193,     3,     3,     3,     3,   198,     3,
     5,   201,     5,     3,   204,     6,     4,     6,   199,   199,
   202,  1455,     7,     6,     6,     6,     6,  1461,     6,     6,
  1464,   198,   204,     6,     6,   105,   204,  1532,   203,   203,
   199,   203,   199,   203,   199,   203,   199,   203,   199,   203,
   199,   203,   199,   203,  1488,  1489,  1490,  1491,  1492,  1493,
  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
  1504,  1505,  1506,  1507,  1508,     6,  1510,   203,   203,     6,
   203,   203,   203,     4,     6,   203,     6,   203,   203,   203,
   203,     3,     4,   203,   202,     6,   201,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     6,     6,     6,     6,     6,     6,     6,     6,   177,
   178,   179,   180,   181,  1629,   183,   184,   185,   186,   187,
   188,   189,   190,   191,     6,     6,     6,     6,     6,   197,
     6,     6,     6,   201,     6,  1589,  1590,  1591,  1592,  1593,
  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,     7,
   105,  1613,  1677,     3,     6,     6,     3,     6,     6,   189,
     6,     3,     6,     3,     3,     6,   155,   177,   178,   179,
   180,   181,   161,   183,   184,   185,   186,   187,   188,   189,
   190,   191,     6,     6,     3,     3,     3,   197,   202,     4,
     6,   107,     6,     6,     6,   184,     7,   201,  1723,     6,
   205,   190,   191,   204,   204,   204,   204,   204,   102,   199,
   203,   203,  1676,   199,   199,   203,   203,   199,  1682,   203,
  1684,   199,  1686,   203,  1688,  1689,  1690,  1691,  1692,  1693,
  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,
  1704,  1705,  1706,  1707,  1708,   187,   188,  1709,   105,  1711,
   199,   193,   199,   199,     6,   203,   198,     3,     4,   203,
   166,     3,   204,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,     6,     3,
     6,     6,   199,     6,     6,     6,     6,     3,     6,     6,
  1764,  1765,     5,     5,   205,     6,   204,   204,  1772,  1773,
  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
  1784,  1785,  1786,  1787,  1788,  1789,   203,   205,  1790,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   203,   199,   199,   203,   203,   197,
     6,     6,     6,     6,     6,     6,     6,     6,   203,     6,
  1824,     6,     6,     6,     6,  1829,  1830,  1831,  1832,  1833,
  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
  1844,  1845,  1846,  1847,  1848,  1849,     3,     4,     6,   199,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   203,  1881,     5,  1883,
     5,  1885,   204,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
  1904,   187,   188,   203,   205,   204,   204,   193,   203,   203,
   203,   199,   198,   203,   203,     6,     6,   204,   204,   204,
   204,   204,   203,     6,     6,   102,   166,     6,     6,     6,
     5,     5,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
  1944,  1945,  1946,  1947,  1948,  1949,  1950,   204,     6,     6,
     6,     6,   102,     6,     6,   204,     6,     6,   203,   488,
   204,     6,   199,   199,     6,   203,   205,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,  1988,   177,   178,   179,   180,   181,
   204,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   204,     6,   205,   205,   204,   197,   203,     6,  2012,     6,
  2014,     6,  2016,     6,  2018,  2019,  2020,  2021,  2022,  2023,
  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,   203,
   187,   188,   171,     6,   172,   203,   193,   203,     6,   204,
   204,   198,   204,   203,     6,   199,     6,     6,     6,     6,
   203,   203,     6,   204,     6,   204,   204,   203,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,  2070,     6,   199,     6,
   204,   204,   204,     6,   204,   204,   204,     6,     6,     6,
     6,     6,   204,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,     6,     6,   204,     6,   204,   197,  2123,
   204,  2125,     6,  2127,   204,  2129,     6,  2131,     6,  2133,
     6,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,     6,   204,   204,     6,     0,
   197,  2165,  2166,  2167,  2168,  2169,  2170,     0,   205,     7,
     7,    -1,    -1,    -1,  1040,    -1,  1095,    -1,    -1,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,    -1,   625,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  2204,  2205,  2206,  2207,  2208,  2209,  2210,    -1,  2212,    -1,
  2214,    -1,    -1,    -1,    -1,    -1,   745,   746,    -1,   748,
    -1,   750,   751,    -1,  2228,  2229,  2230,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  2240,  2241,  2242,  2243,
  2244,  2245,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2255,  2256,  2257,  2258,    -1,  2260,    -1,  2262,    -1,
    -1,    -1,    -1,   792,   793,    -1,    -1,   796,    -1,  2273,
  2274,  2275,    -1,    -1,    -1,  2279,  2280,  2281,    -1,    -1,
    -1,  2285,  2286,  2287,   813,   814,    -1,    -1,    -1,    -1,
   819,   820,    -1,  2297,  2298,  2299,    -1,   826,    -1,   828,
    -1,    -1,  2306,    -1,  2308,    -1,  2310,    -1,     3,     4,
     5,    -1,     7,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     6,    34,
    35,    36,    -1,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   902,     6,   904,    -1,    -1,    38,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   915,   916,   917,    -1,
    -1,    -1,   921,   922,   923,   924,   925,   926,   927,    59,
    60,    61,    62,    63,    64,    -1,     3,     4,     5,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,
   175,   176,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,
    -1,    -1,   187,   188,    -1,    -1,    -1,    -1,   193,   194,
   195,    -1,    -1,   198,    -1,   200,  1035,   202,     8,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,   187,   188,   197,
     8,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,
    -1,    -1,    -1,    -1,    -1,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     8,    -1,    -1,    -1,    -1,   197,    -1,    -1,  1097,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   187,   188,    -1,    -1,    -1,  1124,   193,    -1,    -1,    -1,
    -1,   198,    -1,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   187,   188,    -1,    -1,    -1,   203,
   193,   205,    -1,    -1,    -1,   198,    -1,    -1,    -1,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   177,   178,   179,   180,   181,   197,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
    -1,     3,     4,    -1,    -1,    -1,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,  1311,    -1,  1313,    -1,   197,    -1,  1317,    -1,
    -1,    33,   203,    -1,   205,    37,    38,    39,    40,    41,
    42,    43,    44,    45,  1333,    47,    48,    49,    50,    51,
    52,    53,    54,    -1,    -1,    -1,    58,    59,    60,    61,
    62,    63,    64,    -1,    66,    67,    68,    69,    70,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    -1,
    49,    50,    51,    -1,    53,    54,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,   101,
    -1,    70,    -1,    -1,   106,    -1,   108,    -1,   110,   111,
   112,   113,   114,   115,   116,    -1,   118,   119,   120,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    99,   100,   101,    -1,    -1,    -1,    -1,   139,   140,   141,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1450,   164,   165,    -1,   167,    -1,    -1,  1457,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1468,
  1469,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    47,    -1,    49,    50,    51,    -1,    53,    54,    -1,    -1,
    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    47,    70,    49,    50,    51,    -1,    53,    54,
    -1,    -1,    -1,  1512,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,   205,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,    -1,    -1,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    47,    -1,    49,    50,
    51,   118,    53,    54,    99,   100,   101,    -1,    -1,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    70,
    49,    50,    51,   118,    53,    54,  1575,    -1,    -1,    -1,
    -1,  1580,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
   101,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    99,   100,   101,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,   205,   118,
    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   205,    -1,    -1,    -1,   177,   178,   179,   180,   181,
   205,   183,   184,   185,   186,   187,   188,   189,   190,   191,
  1669,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
  1679,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,    -1,
    -1,    -1,    -1,    -1,   205,    -1,    -1,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,    -1,    -1,   205,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,  1768,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    33,    -1,    -1,    -1,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    51,    52,    53,    54,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    64,  1827,    66,
    67,    68,    69,    70,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    -1,    49,    50,    51,    -1,    53,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   205,    98,    99,   100,   101,    -1,    70,    -1,    -1,   106,
    -1,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
  1879,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   177,   178,
   179,   180,   181,   205,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,   118,    -1,    -1,    -1,   197,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,   177,   178,
   179,   180,   181,  1932,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   177,   178,   179,   180,
   181,  1970,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,
   178,   179,   180,   181,   205,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,    -1,   177,   178,   179,   180,   181,   205,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,   177,   178,   179,   180,   181,
   205,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,   178,
   179,   180,   181,   205,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,   177,   178,   179,   180,   181,   205,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,   177,   178,   179,   180,   181,   205,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,   178,   179,
   180,   181,   205,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
   177,   178,   179,   180,   181,   205,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,   177,   178,   179,   180,   181,   205,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,   177,   178,   179,   180,
   181,   205,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,
   178,   179,   180,   181,   205,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,    -1,   177,   178,   179,   180,   181,   205,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,   177,   178,   179,   180,   181,
   205,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,   178,
   179,   180,   181,   205,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,   177,   178,   179,   180,   181,   205,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   201,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 172 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 178 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 179 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 184 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1, MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 198 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 205 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 227 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 232 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 243 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 246 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 250 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 256 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 262 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 269 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 275 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 279 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 28:
#line 283 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 29:
#line 290 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 30:
#line 294 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 31:
#line 299 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 303 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 311 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 315 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 319 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 323 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 327 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 339 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 343 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 347 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 351 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 355 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 360 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 363 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 370 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 377 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 380 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 388 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 391 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 415 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 70:
#line 419 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 71:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 72:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 73:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 100:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 491 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 104:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 107:
#line 510 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 108:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 519 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 524 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 529 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 112:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 538 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 544 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 550 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 116:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 559 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 565 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 571 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 120:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 580 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 586 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 592 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 124:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 601 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 608 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 617 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 128:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 626 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 633 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 642 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 132:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 651 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 134:
#line 658 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 135:
#line 667 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 136:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 676 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 138:
#line 684 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 139:
#line 693 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 702 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 142:
#line 710 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 143:
#line 719 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 728 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 146:
#line 736 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 147:
#line 745 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 148:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 754 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 150:
#line 762 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 151:
#line 771 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 152:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 780 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 154:
#line 788 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 155:
#line 797 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 156:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 806 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 158:
#line 814 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 159:
#line 823 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 160:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 832 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 162:
#line 844 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 163:
#line 859 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 868 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 166:
#line 880 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 167:
#line 895 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 168:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 904 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 170:
#line 916 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 171:
#line 931 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 172:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 940 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 174:
#line 950 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 175:
#line 962 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 176:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 971 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 178:
#line 981 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 179:
#line 993 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 180:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1002 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 182:
#line 1012 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 183:
#line 1024 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 184:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1033 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 186:
#line 1042 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 187:
#line 1054 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 188:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1063 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 190:
#line 1072 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 191:
#line 1084 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 192:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1093 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 194:
#line 1102 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 195:
#line 1114 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 196:
#line 1121 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1126 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 198:
#line 1134 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 199:
#line 1141 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 200:
#line 1148 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1153 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1161 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 203:
#line 1168 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 204:
#line 1177 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 205:
#line 1178 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 206:
#line 1179 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 207:
#line 1180 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 208:
#line 1181 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 209:
#line 1185 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 210:
#line 1186 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 211:
#line 1194 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 212:
#line 1221 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 213:
#line 1255 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l, i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1302 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 215:
#line 1317 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 216:
#line 1326 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 217:
#line 1341 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1353 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 219:
#line 1367 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 220:
#line 1390 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 221:
#line 1414 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1426 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 223:
#line 1440 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1452 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 225:
#line 1466 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1486 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 227:
#line 1508 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 228:
#line 1518 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 229:
#line 1536 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d, yyvsp[-1].v[0], yyvsp[-1].v[1], yyvsp[-1].v[2], yyvsp[-1].v[3], yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1543 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_POINT, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 231:
#line 1549 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        v = FindPoint(ip, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 232:
#line 1568 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 233:
#line 1582 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_LINE, 1, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1588 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_SPLN, 3, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 235:
#line 1594 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        c = FindCurve(ip, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 236:
#line 1613 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_CIRC, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1619 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_ELLI, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 238:
#line 1625 "Gmsh.y"
{
      List_T *temp;
      int i, j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l), 1, sizeof(int));
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
      	List_Read(yyvsp[-3].l, i, &d);
        j = (int)d;
        List_Add(temp, &j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 239:
#line 1642 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d, MSH_SEGM_PARAMETRIC, 2, NULL, NULL, -1, -1, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].c, yyvsp[-4].c, yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 240:
#line 1648 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_LINE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1654 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 242:
#line 1660 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BSPLN, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1671 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BEZIER, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 244:
#line 1682 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l), 1, sizeof(int));
	for(i = 0; i < List_Nbr(yyvsp[-5].l); i++) {
	  List_Read(yyvsp[-5].l, i, &d);
	  j = (int)d;
	  List_Add(Temp, &j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d, MSH_SEGM_NURBS, (int)yyvsp[-1].d, Temp, yyvsp[-3].l, -1, -1, 0., 1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 245:
#line 1707 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 246:
#line 1713 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-2].l, NULL);
	s = FindSurface((int)yyvsp[-8].d, THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 247:
#line 1732 "Gmsh.y"
{
      List_Read(yyvsp[-1].l, 0, &d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i, THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 248:
#line 1754 "Gmsh.y"
{
    AddTriangulationToSurface ((int) yyvsp[-10].d, (int) yyvsp[-6].d, (int) yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
    yyval.s.Num = (int)yyvsp[-10].d;
  ;
    break;}
case 249:
#line 1762 "Gmsh.y"
{
      CreateNurbsSurface ((int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 250:
#line 1770 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 251:
#line 1774 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_SURFACE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 252:
#line 1780 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_LOOP, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 253:
#line 1789 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 254:
#line 1795 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 255:
#line 1801 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 256:
#line 1812 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1817 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1822 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 259:
#line 1827 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 260:
#line 1834 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1835 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 262:
#line 1836 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 263:
#line 1841 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 264:
#line 1845 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 265:
#line 1849 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 266:
#line 1863 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 267:
#line 1877 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 268:
#line 1891 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 269:
#line 1910 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 270:
#line 1920 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 271:
#line 1931 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
    ;
    break;}
case 272:
#line 1938 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 273:
#line 1942 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 274:
#line 1951 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
    ;
    break;}
case 275:
#line 1963 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 276:
#line 1970 "Gmsh.y"
{
      for(i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 277:
#line 1975 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
    ;
    break;}
case 278:
#line 1984 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
    ;
    break;}
case 279:
#line 1996 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	ParseFile(tmpstring, 0, 0);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblemWithBoundingBox(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Open")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	OpenProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 280:
#line 2035 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(0, v, tmpstring);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 281:
#line 2048 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	//Maillage_Dimension_0(THEM);
	//mai3d(THEM, (int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 282:
#line 2065 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch (...) {
	yymsg(WARNING, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 283:
#line 2074 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1);
      else
	yymsg(GERROR, "Unknown Combine command");
    ;
    break;}
case 284:
#line 2081 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 285:
#line 2085 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 286:
#line 2107 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 287:
#line 2117 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 288:
#line 2127 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 289:
#line 2148 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 290:
#line 2169 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 291:
#line 2190 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 292:
#line 2196 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 293:
#line 2201 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2206 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 295:
#line 2210 "Gmsh.y"
{
    ;
    break;}
case 296:
#line 2221 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 297:
#line 2231 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 298:
#line 2241 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 299:
#line 2251 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 300:
#line 2256 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2266 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 302:
#line 2271 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 303:
#line 2281 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 304:
#line 2286 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 305:
#line 2298 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 306:
#line 2315 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2332 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2349 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 309:
#line 2354 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2371 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 311:
#line 2376 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 312:
#line 2393 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2398 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 314:
#line 2418 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 315:
#line 2434 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 316:
#line 2450 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 317:
#line 2466 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2471 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 319:
#line 2488 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2494 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 321:
#line 2511 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2517 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 323:
#line 2537 "Gmsh.y"
{
    ;
    break;}
case 324:
#line 2540 "Gmsh.y"
{
    ;
    break;}
case 325:
#line 2546 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 326:
#line 2572 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 327:
#line 2596 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 328:
#line 2605 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 329:
#line 2623 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 330:
#line 2641 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 331:
#line 2659 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 332:
#line 2681 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 333:
#line 2702 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 334:
#line 2723 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)d;
	s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 335:
#line 2737 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read(yyvsp[-1].l, i, &d);
	j = (int)d;
        s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 336:
#line 2757 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 337:
#line 2761 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 338:
#line 2770 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 339:
#line 2771 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 340:
#line 2772 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 341:
#line 2773 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 342:
#line 2774 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 343:
#line 2778 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 344:
#line 2779 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 345:
#line 2780 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 346:
#line 2781 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 347:
#line 2782 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 348:
#line 2783 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 349:
#line 2784 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 350:
#line 2785 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 351:
#line 2787 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 352:
#line 2793 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 353:
#line 2794 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d) ;  ;
    break;}
case 354:
#line 2795 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 355:
#line 2796 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 356:
#line 2797 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 357:
#line 2798 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 358:
#line 2799 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 359:
#line 2800 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 360:
#line 2801 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 361:
#line 2802 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 362:
#line 2803 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 363:
#line 2804 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 364:
#line 2805 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 365:
#line 2806 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 366:
#line 2807 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 367:
#line 2808 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 368:
#line 2809 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2810 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 370:
#line 2811 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 371:
#line 2812 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 372:
#line 2813 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 373:
#line 2814 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 374:
#line 2815 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 375:
#line 2816 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 376:
#line 2817 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 377:
#line 2818 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 378:
#line 2819 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 379:
#line 2820 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 380:
#line 2821 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 381:
#line 2822 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 382:
#line 2823 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 383:
#line 2824 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 384:
#line 2826 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 385:
#line 2827 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 386:
#line 2828 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 387:
#line 2829 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 388:
#line 2830 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 389:
#line 2831 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2832 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 391:
#line 2833 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 392:
#line 2834 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 393:
#line 2835 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 394:
#line 2836 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 395:
#line 2837 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 396:
#line 2838 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 397:
#line 2839 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 398:
#line 2840 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 399:
#line 2841 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 400:
#line 2842 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 401:
#line 2843 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 402:
#line 2844 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 403:
#line 2845 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 404:
#line 2846 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 405:
#line 2855 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 406:
#line 2856 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 407:
#line 2857 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 408:
#line 2858 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 409:
#line 2863 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 410:
#line 2874 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 411:
#line 2891 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 412:
#line 2902 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 413:
#line 2921 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 414:
#line 2937 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 415:
#line 2953 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 416:
#line 2969 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 417:
#line 2987 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 418:
#line 2991 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 419:
#line 2995 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 420:
#line 2999 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 421:
#line 3003 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 422:
#line 3010 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 423:
#line 3014 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 424:
#line 3018 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 425:
#line 3022 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 426:
#line 3029 "Gmsh.y"
{
    ;
    break;}
case 427:
#line 3032 "Gmsh.y"
{
    ;
    break;}
case 428:
#line 3038 "Gmsh.y"
{
    ;
    break;}
case 429:
#line 3041 "Gmsh.y"
{
    ;
    break;}
case 430:
#line 3047 "Gmsh.y"
{
    ;
    break;}
case 431:
#line 3050 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 432:
#line 3054 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 433:
#line 3061 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 434:
#line 3066 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 435:
#line 3074 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 436:
#line 3079 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 437:
#line 3083 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 438:
#line 3087 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 439:
#line 3098 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      for(d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 440:
#line 3104 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 441:
#line 3115 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double)) ;      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d) ;
	double d = 0.0 ;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X) ;
	List_Add(yyval.l, &v->Pos.Y) ;
	List_Add(yyval.l, &v->Pos.Z) ;
      }
    ;
    break;}
case 442:
#line 3135 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 443:
#line 3144 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 444:
#line 3153 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 445:
#line 3164 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 446:
#line 3178 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 447:
#line 3194 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 448:
#line 3214 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 449:
#line 3239 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 450:
#line 3244 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 451:
#line 3248 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 452:
#line 3252 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[0].l); i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 453:
#line 3264 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 454:
#line 3268 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 455:
#line 3279 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 456:
#line 3284 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0) ;
	}
      }
    ;
    break;}
case 457:
#line 3303 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 458:
#line 3307 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 459:
#line 3321 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 460:
#line 3326 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 461:
#line 3333 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 462:
#line 3337 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 463:
#line 3345 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 464:
#line 3358 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 465:
#line 3362 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 466:
#line 3380 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 467:
#line 3394 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3409 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void FixRelativePath(char *in, char *out){
  if(in[0] == '/' || in[0] == '\\' || (strlen(in)>2 && in[1] == ':')){
    // do nothing: 'in' is an absolute path
    strcpy(out, in);
  }
  else{
    // append 'in' to the path of the parent file
    strcpy(out, yyname);
    int i = strlen(out)-1 ;
    while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
    out[i+1] = '\0';
    strcat(out, in);
  }
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


