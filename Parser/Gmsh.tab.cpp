
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tIntersect	329
#define	tBoundary	330
#define	tAttractor	331
#define	tLayers	332
#define	tHole	333
#define	tAlias	334
#define	tAliasWithOptions	335
#define	tText2D	336
#define	tText3D	337
#define	tInterpolationScheme	338
#define	tTime	339
#define	tGrain	340
#define	tCombine	341
#define	tBSpline	342
#define	tBezier	343
#define	tNurbs	344
#define	tOrder	345
#define	tKnots	346
#define	tColor	347
#define	tColorTable	348
#define	tFor	349
#define	tIn	350
#define	tEndFor	351
#define	tIf	352
#define	tEndIf	353
#define	tExit	354
#define	tField	355
#define	tThreshold	356
#define	tStructured	357
#define	tLatLon	358
#define	tGrad	359
#define	tPostView	360
#define	tReturn	361
#define	tCall	362
#define	tFunction	363
#define	tShow	364
#define	tHide	365
#define	tGetValue	366
#define	tGMSH_MAJOR_VERSION	367
#define	tGMSH_MINOR_VERSION	368
#define	tGMSH_PATCH_VERSION	369
#define	tAFFECTPLUS	370
#define	tAFFECTMINUS	371
#define	tAFFECTTIMES	372
#define	tAFFECTDIVIDE	373
#define	tOR	374
#define	tAND	375
#define	tEQUAL	376
#define	tNOTEQUAL	377
#define	tLESSOREQUAL	378
#define	tGREATEROREQUAL	379
#define	tPLUSPLUS	380
#define	tMINUSMINUS	381
#define	UNARYPREC	382

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.330 2007-09-06 15:49:43 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Field.h"
#include "BackgroundMesh.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static gmshSurface *myGmshSurface = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 78 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1287
#define	YYFLAG		-32768
#define	YYNTBASE	149

#define YYTRANSLATE(x) ((unsigned)(x) <= 382 ? yytranslate[x] : 217)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   134,     2,   144,     2,   133,     2,     2,   139,
   140,   131,   129,   145,   130,   143,   132,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   125,
     2,   127,   120,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   141,     2,   142,   138,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   146,     2,   147,   148,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   121,   122,   123,   124,   126,   128,   135,
   136,   137
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    42,    48,    56,    64,    74,    81,    90,    97,   104,   105,
   108,   111,   114,   117,   120,   123,   125,   129,   131,   135,
   136,   137,   148,   150,   154,   155,   169,   171,   175,   176,
   192,   201,   216,   217,   224,   231,   233,   235,   237,   239,
   241,   243,   245,   250,   258,   268,   275,   282,   286,   293,
   298,   305,   315,   322,   332,   338,   347,   356,   368,   375,
   385,   395,   405,   407,   409,   417,   426,   436,   445,   454,
   463,   472,   482,   491,   497,   504,   511,   518,   526,   534,
   542,   552,   560,   570,   588,   596,   604,   616,   625,   634,
   643,   652,   656,   661,   672,   680,   688,   697,   706,   715,
   723,   732,   738,   750,   756,   766,   771,   781,   786,   788,
   790,   791,   794,   801,   808,   815,   822,   827,   834,   838,
   843,   849,   853,   857,   862,   867,   871,   879,   887,   891,
   899,   903,   906,   909,   925,   928,   935,   944,   953,   964,
   966,   969,   971,   975,   980,   982,   988,  1000,  1014,  1015,
  1023,  1024,  1038,  1039,  1055,  1056,  1063,  1064,  1075,  1084,
  1093,  1102,  1115,  1128,  1141,  1156,  1171,  1186,  1187,  1200,
  1201,  1214,  1215,  1228,  1229,  1246,  1247,  1264,  1265,  1282,
  1283,  1302,  1303,  1322,  1323,  1342,  1344,  1347,  1353,  1361,
  1371,  1374,  1384,  1391,  1401,  1411,  1420,  1430,  1439,  1448,
  1455,  1460,  1471,  1482,  1493,  1504,  1507,  1509,  1513,  1516,
  1519,  1522,  1526,  1530,  1534,  1538,  1542,  1546,  1550,  1554,
  1558,  1562,  1566,  1570,  1574,  1578,  1584,  1589,  1594,  1599,
  1604,  1609,  1614,  1619,  1624,  1629,  1634,  1641,  1646,  1651,
  1656,  1661,  1666,  1671,  1678,  1685,  1692,  1697,  1702,  1707,
  1712,  1717,  1722,  1727,  1732,  1737,  1742,  1747,  1754,  1759,
  1764,  1769,  1774,  1779,  1784,  1791,  1798,  1805,  1810,  1812,
  1814,  1816,  1818,  1820,  1822,  1824,  1826,  1832,  1837,  1842,
  1845,  1851,  1855,  1862,  1867,  1875,  1882,  1884,  1887,  1890,
  1894,  1898,  1910,  1920,  1928,  1936,  1938,  1942,  1944,  1946,
  1949,  1953,  1958,  1964,  1967,  1971,  1975,  1981,  1986,  1988,
  1990,  1994,  2001,  2003,  2005,  2009,  2013,  2023,  2031,  2033,
  2039,  2043,  2050,  2052,  2056,  2058,  2060,  2062,  2064,  2071,
  2076,  2081,  2086,  2093,  2100
};

static const short yyrhs[] = {   150,
     0,     1,     6,     0,     0,   150,   151,     0,   154,     0,
   153,     0,   173,     0,   175,     0,   176,     0,   179,     0,
   180,     0,   181,     0,   184,     0,   201,     0,   202,     0,
   203,     0,   183,     0,   182,     0,   127,     0,   127,   127,
     0,    35,   139,     5,   140,     6,     0,    35,   139,     5,
   140,   152,   215,     6,     0,    35,   139,     5,   145,   211,
   140,     6,     0,    35,   139,     5,   145,   211,   140,   152,
   215,     6,     0,     4,     5,   146,   155,   147,     6,     0,
     4,     5,     4,   206,   146,   155,   147,     6,     0,    80,
     4,   141,   204,   142,     6,     0,    81,     4,   141,   204,
   142,     6,     0,     0,   155,   158,     0,   155,   162,     0,
   155,   165,     0,   155,   167,     0,   155,   168,     0,   155,
   170,     0,   204,     0,   156,   145,   204,     0,   204,     0,
   157,   145,   204,     0,     0,     0,     4,   159,   139,   156,
   140,   160,   146,   157,   147,     6,     0,   215,     0,   161,
   145,   215,     0,     0,    82,   139,   204,   145,   204,   145,
   204,   140,   163,   146,   161,   147,     6,     0,   215,     0,
   164,   145,   215,     0,     0,    83,   139,   204,   145,   204,
   145,   204,   145,   204,   140,   166,   146,   164,   147,     6,
     0,    84,   146,   208,   147,   146,   208,   147,     6,     0,
    84,   146,   208,   147,   146,   208,   147,   146,   208,   147,
   146,   208,   147,     6,     0,     0,    85,   169,   146,   157,
   147,     6,     0,    86,   139,   204,   140,   209,     6,     0,
     7,     0,   116,     0,   117,     0,   118,     0,   119,     0,
   135,     0,   136,     0,     4,   171,   204,     6,     0,     4,
   141,   204,   142,   171,   204,     6,     0,     4,   141,   146,
   211,   147,   142,   171,   209,     6,     0,     4,   141,   142,
     7,   209,     6,     0,     4,   141,   142,   116,   209,     6,
     0,     4,   172,     6,     0,     4,   141,   204,   142,   172,
     6,     0,     4,     7,   216,     6,     0,     4,   143,     4,
     7,   216,     6,     0,     4,   141,   204,   142,   143,     4,
     7,   216,     6,     0,     4,   143,     4,   171,   204,     6,
     0,     4,   141,   204,   142,   143,     4,   171,   204,     6,
     0,     4,   143,     4,   172,     6,     0,     4,   141,   204,
   142,   143,     4,   172,     6,     0,     4,   143,    93,   143,
     4,     7,   212,     6,     0,     4,   141,   204,   142,   143,
    93,   143,     4,     7,   212,     6,     0,     4,   143,    94,
     7,   213,     6,     0,     4,   141,   204,   142,   143,    94,
     7,   213,     6,     0,    64,   139,     4,   140,   143,     4,
     7,   204,     6,     0,    64,   139,     4,   140,   143,     4,
     7,   216,     6,     0,   204,     0,   216,     0,    43,   139,
   204,   140,     7,   206,     6,     0,    60,    43,   139,   174,
   140,     7,   209,     6,     0,    77,    43,   101,   139,   204,
   140,     7,   209,     6,     0,   104,   101,   139,   204,   140,
     7,   204,     6,     0,   106,   101,   139,   204,   140,     7,
   204,     6,     0,   102,   101,   139,   204,   140,     7,   209,
     6,     0,   109,   101,   139,   204,   140,     7,     5,     6,
     0,   109,   101,   139,   204,   140,     7,     5,   209,     6,
     0,   103,   101,   139,   204,   140,     7,     5,     6,     0,
    52,    53,   101,   209,     6,     0,    77,    43,   209,     7,
   209,     6,     0,    77,    46,   209,     7,   209,     6,     0,
    52,    53,   209,     7,   204,     6,     0,    46,   139,   204,
   140,     7,   209,     6,     0,    50,   139,   204,   140,     7,
   209,     6,     0,    44,   139,   204,   140,     7,   209,     6,
     0,    44,   139,   204,   140,     7,   209,    56,   206,     6,
     0,    45,   139,   204,   140,     7,   209,     6,     0,    45,
   139,   204,   140,     7,   209,    56,   206,     6,     0,    54,
   139,   204,   140,     7,   146,   204,   145,   204,   145,     5,
   145,     5,   145,     5,   147,     6,     0,    88,   139,   204,
   140,     7,   209,     6,     0,    89,   139,   204,   140,     7,
   209,     6,     0,    90,   139,   204,   140,     7,   209,    92,
   209,    91,   204,     6,     0,    46,    71,   139,   204,   140,
     7,   209,     6,     0,    60,    46,   139,   174,   140,     7,
   209,     6,     0,    56,    49,   139,   204,   140,     7,   209,
     6,     0,    57,    49,   139,   204,   140,     7,   209,     6,
     0,    12,    13,     6,     0,    13,    49,   204,     6,     0,
    54,    49,   139,   204,   140,     7,     5,     5,     5,     6,
     0,    47,   139,   204,   140,     7,   209,     6,     0,    48,
   139,   204,   140,     7,   209,     6,     0,    49,    71,   139,
   204,   140,     7,   209,     6,     0,    60,    49,   139,   174,
   140,     7,   209,     6,     0,    59,    51,   139,   204,   140,
     7,   209,     6,     0,    51,   139,   204,   140,     7,   209,
     6,     0,    60,    51,   139,   174,   140,     7,   209,     6,
     0,    66,   206,   146,   177,   147,     0,    65,   146,   206,
   145,   206,   145,   204,   147,   146,   177,   147,     0,    67,
   206,   146,   177,   147,     0,    68,   146,   206,   145,   204,
   147,   146,   177,   147,     0,    70,   146,   177,   147,     0,
    75,    46,   146,   211,   147,    49,   146,   204,   147,     0,
    76,   146,   177,   147,     0,   178,     0,   176,     0,     0,
   178,   175,     0,   178,    43,   146,   211,   147,     6,     0,
   178,    46,   146,   211,   147,     6,     0,   178,    49,   146,
   211,   147,     6,     0,   178,    51,   146,   211,   147,     6,
     0,    73,   146,   178,   147,     0,    73,     4,   141,   204,
   142,     6,     0,    73,     4,     6,     0,    73,     4,     4,
     6,     0,    93,   212,   146,   178,   147,     0,   110,   215,
     6,     0,   111,   215,     6,     0,   110,   146,   178,   147,
     0,   111,   146,   178,   147,     0,     4,   216,     6,     0,
     4,     4,   141,   204,   142,   215,     6,     0,     4,     4,
     4,   141,   204,   142,     6,     0,     4,   204,     6,     0,
    64,   139,     4,   140,   143,     4,     6,     0,    87,     4,
     6,     0,   100,     6,     0,    40,     6,     0,    40,   146,
   204,   145,   204,   145,   204,   145,   204,   145,   204,   145,
   204,   147,     6,     0,    41,     6,     0,    95,   139,   204,
     8,   204,   140,     0,    95,   139,   204,     8,   204,     8,
   204,   140,     0,    95,     4,    96,   146,   204,     8,   204,
   147,     0,    95,     4,    96,   146,   204,     8,   204,     8,
   204,   147,     0,    97,     0,   109,     4,     0,   107,     0,
   108,     4,     6,     0,    98,   139,   204,   140,     0,    99,
     0,    69,   206,   146,   178,   147,     0,    69,   146,   206,
   145,   206,   145,   204,   147,   146,   178,   147,     0,    69,
   146,   206,   145,   206,   145,   206,   145,   204,   147,   146,
   178,   147,     0,     0,    69,   206,   146,   178,   185,   199,
   147,     0,     0,    69,   146,   206,   145,   206,   145,   204,
   147,   146,   178,   186,   199,   147,     0,     0,    69,   146,
   206,   145,   206,   145,   206,   145,   204,   147,   146,   178,
   187,   199,   147,     0,     0,    69,   146,   178,   188,   199,
   147,     0,     0,    69,     4,   141,   204,   142,   146,   178,
   189,   199,   147,     0,    69,    43,   146,   204,   145,   206,
   147,     6,     0,    69,    46,   146,   204,   145,   206,   147,
     6,     0,    69,    49,   146,   204,   145,   206,   147,     6,
     0,    69,    43,   146,   204,   145,   206,   145,   206,   145,
   204,   147,     6,     0,    69,    46,   146,   204,   145,   206,
   145,   206,   145,   204,   147,     6,     0,    69,    49,   146,
   204,   145,   206,   145,   206,   145,   204,   147,     6,     0,
    69,    43,   146,   204,   145,   206,   145,   206,   145,   206,
   145,   204,   147,     6,     0,    69,    46,   146,   204,   145,
   206,   145,   206,   145,   206,   145,   204,   147,     6,     0,
    69,    49,   146,   204,   145,   206,   145,   206,   145,   206,
   145,   204,   147,     6,     0,     0,    69,    43,   146,   204,
   145,   206,   147,   190,   146,   199,   147,     6,     0,     0,
    69,    46,   146,   204,   145,   206,   147,   191,   146,   199,
   147,     6,     0,     0,    69,    49,   146,   204,   145,   206,
   147,   192,   146,   199,   147,     6,     0,     0,    69,    43,
   146,   204,   145,   206,   145,   206,   145,   204,   147,   193,
   146,   199,   147,     6,     0,     0,    69,    46,   146,   204,
   145,   206,   145,   206,   145,   204,   147,   194,   146,   199,
   147,     6,     0,     0,    69,    49,   146,   204,   145,   206,
   145,   206,   145,   204,   147,   195,   146,   199,   147,     6,
     0,     0,    69,    43,   146,   204,   145,   206,   145,   206,
   145,   206,   145,   204,   147,   196,   146,   199,   147,     6,
     0,     0,    69,    46,   146,   204,   145,   206,   145,   206,
   145,   206,   145,   204,   147,   197,   146,   199,   147,     6,
     0,     0,    69,    49,   146,   204,   145,   206,   145,   206,
   145,   206,   145,   204,   147,   198,   146,   199,   147,     6,
     0,   200,     0,   199,   200,     0,    78,   146,   204,   147,
     6,     0,    78,   146,   209,   145,   209,   147,     6,     0,
    78,   146,   209,   145,   209,   145,   209,   147,     6,     0,
    72,     6,     0,    79,   139,   204,   140,     7,   209,    61,
   204,     6,     0,    58,    46,   209,     7,   204,     6,     0,
    58,    46,   209,     7,   204,    61,    63,   204,     6,     0,
    58,    46,   209,     7,   204,    61,    62,   204,     6,     0,
    58,    49,   146,   204,   147,     7,   209,     6,     0,    58,
    49,   146,   204,   147,     7,   209,     4,     6,     0,    55,
    49,   146,   204,   147,     7,   209,     6,     0,    58,    51,
   146,   204,   147,     7,   209,     6,     0,    72,    49,   209,
     7,   204,     6,     0,    72,    49,   209,     6,     0,    43,
   146,   211,   147,    96,    49,   146,   204,   147,     6,     0,
    46,   146,   211,   147,    96,    49,   146,   204,   147,     6,
     0,    46,   146,   211,   147,    96,    51,   146,   204,   147,
     6,     0,    49,   146,   211,   147,    96,    51,   146,   204,
   147,     6,     0,    74,     6,     0,   205,     0,   139,   204,
   140,     0,   130,   204,     0,   129,   204,     0,   134,   204,
     0,   204,   130,   204,     0,   204,   129,   204,     0,   204,
   131,   204,     0,   204,   132,   204,     0,   204,   133,   204,
     0,   204,   138,   204,     0,   204,   125,   204,     0,   204,
   127,   204,     0,   204,   126,   204,     0,   204,   128,   204,
     0,   204,   123,   204,     0,   204,   124,   204,     0,   204,
   122,   204,     0,   204,   121,   204,     0,   204,   120,   204,
     8,   204,     0,    14,   139,   204,   140,     0,    15,   139,
   204,   140,     0,    16,   139,   204,   140,     0,    17,   139,
   204,   140,     0,    18,   139,   204,   140,     0,    19,   139,
   204,   140,     0,    20,   139,   204,   140,     0,    21,   139,
   204,   140,     0,    22,   139,   204,   140,     0,    24,   139,
   204,   140,     0,    25,   139,   204,   145,   204,   140,     0,
    26,   139,   204,   140,     0,    27,   139,   204,   140,     0,
    28,   139,   204,   140,     0,    29,   139,   204,   140,     0,
    30,   139,   204,   140,     0,    31,   139,   204,   140,     0,
    32,   139,   204,   145,   204,   140,     0,    33,   139,   204,
   145,   204,   140,     0,    34,   139,   204,   145,   204,   140,
     0,    23,   139,   204,   140,     0,    14,   141,   204,   142,
     0,    15,   141,   204,   142,     0,    16,   141,   204,   142,
     0,    17,   141,   204,   142,     0,    18,   141,   204,   142,
     0,    19,   141,   204,   142,     0,    20,   141,   204,   142,
     0,    21,   141,   204,   142,     0,    22,   141,   204,   142,
     0,    24,   141,   204,   142,     0,    25,   141,   204,   145,
   204,   142,     0,    26,   141,   204,   142,     0,    27,   141,
   204,   142,     0,    28,   141,   204,   142,     0,    29,   141,
   204,   142,     0,    30,   141,   204,   142,     0,    31,   141,
   204,   142,     0,    32,   141,   204,   145,   204,   142,     0,
    33,   141,   204,   145,   204,   142,     0,    34,   141,   204,
   145,   204,   142,     0,    23,   141,   204,   142,     0,     3,
     0,     9,     0,    10,     0,    11,     0,   113,     0,   114,
     0,   115,     0,     4,     0,     4,   148,   146,   204,   147,
     0,     4,   141,   204,   142,     0,   144,     4,   141,   142,
     0,     4,   172,     0,     4,   141,   204,   142,   172,     0,
     4,   143,     4,     0,     4,   141,   204,   142,   143,     4,
     0,     4,   143,     4,   172,     0,     4,   141,   204,   142,
   143,     4,   172,     0,   112,   139,     5,   145,   204,   140,
     0,   207,     0,   130,   206,     0,   129,   206,     0,   206,
   130,   206,     0,   206,   129,   206,     0,   146,   204,   145,
   204,   145,   204,   145,   204,   145,   204,   147,     0,   146,
   204,   145,   204,   145,   204,   145,   204,   147,     0,   146,
   204,   145,   204,   145,   204,   147,     0,   139,   204,   145,
   204,   145,   204,   140,     0,   209,     0,   208,   145,   209,
     0,   204,     0,   210,     0,   146,   147,     0,   146,   211,
   147,     0,   130,   146,   211,   147,     0,   204,   131,   146,
   211,   147,     0,   130,   210,     0,   204,   131,   210,     0,
   204,     8,   204,     0,   204,     8,   204,     8,   204,     0,
    43,   146,   204,   147,     0,   176,     0,   184,     0,     4,
   141,   142,     0,     4,   141,   146,   211,   147,   142,     0,
   204,     0,   210,     0,   211,   145,   204,     0,   211,   145,
   210,     0,   146,   204,   145,   204,   145,   204,   145,   204,
   147,     0,   146,   204,   145,   204,   145,   204,   147,     0,
     4,     0,     4,   143,    93,   143,     4,     0,   146,   214,
   147,     0,     4,   141,   204,   142,   143,    94,     0,   212,
     0,   214,   145,   212,     0,   216,     0,     4,     0,     5,
     0,    42,     0,    37,   139,   215,   145,   215,   140,     0,
    38,   139,   215,   140,     0,    39,   139,   215,   140,     0,
    36,   139,   215,   140,     0,    36,   139,   215,   145,   211,
   140,     0,    36,   139,     4,   143,     4,   140,     0,    36,
   139,     4,   141,   204,   142,   143,     4,   140,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   144,   146,   151,   153,   156,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   173,   178,
   184,   190,   205,   218,   246,   254,   261,   266,   273,   281,
   282,   283,   284,   285,   286,   289,   292,   296,   299,   303,
   494,   508,   518,   524,   531,   539,   545,   551,   558,   566,
   572,   578,   588,   593,   597,   606,   608,   609,   610,   611,
   614,   616,   619,   654,   693,   747,   764,   782,   793,   810,
   817,   831,   848,   874,   901,   915,   932,   946,   963,   983,
  1006,  1016,  1030,  1035,  1044,  1070,  1086,  1107,  1114,  1125,
  1140,  1148,  1163,  1170,  1182,  1216,  1252,  1274,  1292,  1310,
  1328,  1354,  1372,  1398,  1418,  1436,  1454,  1480,  1497,  1516,
  1534,  1572,  1576,  1580,  1585,  1607,  1629,  1645,  1665,  1682,
  1699,  1719,  1725,  1730,  1735,  1740,  1751,  1757,  1765,  1767,
  1770,  1775,  1779,  1802,  1825,  1848,  1875,  1885,  1895,  1911,
  1929,  1943,  1950,  1956,  1965,  1978,  2029,  2044,  2059,  2079,
  2089,  2111,  2115,  2120,  2125,  2135,  2152,  2168,  2194,  2221,
  2253,  2260,  2265,  2271,  2275,  2283,  2292,  2300,  2308,  2312,
  2320,  2324,  2332,  2336,  2344,  2348,  2355,  2359,  2371,  2378,
  2385,  2392,  2399,  2406,  2413,  2420,  2427,  2434,  2438,  2445,
  2449,  2456,  2460,  2467,  2471,  2478,  2482,  2489,  2493,  2500,
  2504,  2511,  2515,  2522,  2526,  2536,  2540,  2545,  2555,  2577,
  2601,  2605,  2628,  2647,  2665,  2683,  2712,  2747,  2752,  2779,
  2793,  2811,  2818,  2824,  2827,  2835,  2845,  2847,  2848,  2849,
  2850,  2851,  2852,  2853,  2854,  2861,  2862,  2863,  2864,  2865,
  2866,  2867,  2868,  2869,  2870,  2871,  2872,  2873,  2874,  2875,
  2876,  2877,  2878,  2879,  2880,  2881,  2882,  2883,  2884,  2885,
  2886,  2887,  2888,  2889,  2890,  2891,  2892,  2894,  2895,  2896,
  2897,  2898,  2899,  2900,  2901,  2902,  2903,  2904,  2905,  2906,
  2907,  2908,  2909,  2910,  2911,  2912,  2913,  2914,  2919,  2924,
  2925,  2926,  2927,  2928,  2929,  2933,  2949,  2964,  2984,  2998,
  3011,  3034,  3052,  3070,  3088,  3106,  3113,  3118,  3122,  3126,
  3130,  3136,  3141,  3145,  3149,  3155,  3161,  3168,  3174,  3178,
  3183,  3187,  3195,  3205,  3214,  3222,  3228,  3239,  3259,  3269,
  3279,  3296,  3322,  3328,  3332,  3336,  3348,  3353,  3365,  3372,
  3393,  3398,  3412,  3418,  3424,  3429,  3435,  3440,  3448,  3456,
  3470,  3484,  3488,  3507,  3529
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tIntersect",
"tBoundary","tAttractor","tLayers","tHole","tAlias","tAliasWithOptions","tText2D",
"tText3D","tInterpolationScheme","tTime","tGrain","tCombine","tBSpline","tBezier",
"tNurbs","tOrder","tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf",
"tEndIf","tExit","tField","tThreshold","tStructured","tLatLon","tGrad","tPostView",
"tReturn","tCall","tFunction","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION",
"tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS",
"UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","'~'",
"All","GeoFormatItems","GeoFormatItem","SendToFile","Printf","View","Views",
"ElementCoords","ElementValues","Element","@1","@2","Text2DValues","Text2D",
"@3","Text3DValues","Text3D","@4","InterpolationMatrix","Time","@5","Grain",
"NumericAffectation","NumericIncrement","Affectation","PhysicalId","Shape","Transform",
"MultipleShape","ListOfShapes","Delete","Colorify","Visibility","Command","Loop",
"Extrude","@6","@7","@8","@9","@10","@11","@12","@13","@14","@15","@16","@17",
"@18","@19","ExtrudeParameters","ExtrudeParameter","Transfinite","Embedding",
"Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExprVar","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   149,   149,   150,   150,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   152,   152,
   153,   153,   153,   153,   154,   154,   154,   154,   155,   155,
   155,   155,   155,   155,   155,   156,   156,   157,   157,   159,
   160,   158,   161,   161,   163,   162,   164,   164,   166,   165,
   167,   167,   169,   168,   170,   171,   171,   171,   171,   171,
   172,   172,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   174,   174,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   176,   176,   176,   176,   176,   176,   176,   177,   177,
   178,   178,   178,   178,   178,   178,   179,   179,   179,   179,
   180,   181,   181,   181,   181,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   184,   184,   184,   185,   184,
   186,   184,   187,   184,   188,   184,   189,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   184,   190,   184,   191,
   184,   192,   184,   193,   184,   194,   184,   195,   184,   196,
   184,   197,   184,   198,   184,   199,   199,   200,   200,   200,
   200,   200,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   202,   202,   202,   202,   203,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   206,   206,   206,   206,
   206,   207,   207,   207,   207,   208,   208,   209,   209,   209,
   209,   209,   209,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   211,   211,   211,   211,   212,   212,   212,   212,
   213,   213,   214,   214,   215,   215,   216,   216,   216,   216,
   216,   216,   216,   216,   216
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     5,     7,     7,     9,     6,     8,     6,     6,     0,     2,
     2,     2,     2,     2,     2,     1,     3,     1,     3,     0,
     0,    10,     1,     3,     0,    13,     1,     3,     0,    15,
     8,    14,     0,     6,     6,     1,     1,     1,     1,     1,
     1,     1,     4,     7,     9,     6,     6,     3,     6,     4,
     6,     9,     6,     9,     5,     8,     8,    11,     6,     9,
     9,     9,     1,     1,     7,     8,     9,     8,     8,     8,
     8,     9,     8,     5,     6,     6,     6,     7,     7,     7,
     9,     7,     9,    17,     7,     7,    11,     8,     8,     8,
     8,     3,     4,    10,     7,     7,     8,     8,     8,     7,
     8,     5,    11,     5,     9,     4,     9,     4,     1,     1,
     0,     2,     6,     6,     6,     6,     4,     6,     3,     4,
     5,     3,     3,     4,     4,     3,     7,     7,     3,     7,
     3,     2,     2,    15,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     5,    11,    13,     0,     7,
     0,    13,     0,    15,     0,     6,     0,    10,     8,     8,
     8,    12,    12,    12,    14,    14,    14,     0,    12,     0,
    12,     0,    12,     0,    16,     0,    16,     0,    16,     0,
    18,     0,    18,     0,    18,     1,     2,     5,     7,     9,
     2,     9,     6,     9,     9,     8,     9,     8,     8,     6,
     4,    10,    10,    10,    10,     2,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     4,     4,     2,
     5,     3,     6,     4,     7,     6,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     1,     3,     1,     1,     2,
     3,     4,     5,     2,     3,     3,     5,     4,     1,     1,
     3,     6,     1,     1,     3,     3,     9,     7,     1,     5,
     3,     6,     1,     3,     1,     1,     1,     1,     6,     4,
     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   160,     0,   165,
     0,     0,     0,     0,     0,   162,     0,     0,     0,     0,
     4,     6,     5,     7,     8,     9,    10,    11,    12,    18,
    17,    13,    14,    15,    16,   289,   296,   347,    56,   290,
   291,   292,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   348,     0,   293,
   294,   295,    57,    58,    59,    60,     0,     0,     0,    61,
    62,     0,     0,     0,     0,     0,     0,     0,   227,     0,
     0,     0,     0,   153,     0,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,     0,     0,     0,     0,     0,   131,     0,   131,
     0,     0,   131,   226,     0,   131,     0,     0,     0,     0,
     0,     0,     0,     0,   339,     0,     0,     0,     0,     0,
   152,     0,     0,     0,     0,     0,   161,     0,   346,   347,
   131,     0,   345,   131,     0,     0,     0,     0,     0,   300,
     0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   296,   230,   229,   231,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,   149,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   146,   112,     0,     0,     0,     0,   296,     0,     0,   329,
   330,   333,   334,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   318,     0,
   319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   309,   308,     0,     0,
     0,     0,   131,   131,     0,     0,     0,     0,     0,     0,
     0,     0,   175,     0,   131,   130,     0,   129,     0,     0,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   151,     0,     0,     0,     0,     0,   131,     0,     0,     0,
     0,     0,     0,     0,   163,     0,     0,   142,     0,   143,
     0,     0,   302,     0,     0,     0,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     0,     0,     0,     0,     0,     0,   228,     0,     0,     0,
     0,    56,     0,     0,     0,     0,     0,    63,     0,   245,
   244,   242,   243,   238,   240,   239,   241,   233,   232,   234,
   235,   236,   237,   113,     0,     0,     0,     0,     0,     0,
   229,   324,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    83,    84,     0,     0,     0,     0,     0,
     0,     0,   311,   310,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   132,     0,     0,
   169,   126,   221,     0,   140,     0,   137,     0,   128,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,     0,     0,     0,     0,     0,   144,   145,
     0,   298,   304,     0,    29,    40,     0,     0,     0,    53,
     0,     0,    30,    31,    32,    33,    34,    35,   247,   268,
   248,   269,   249,   270,   250,   271,   251,   272,   252,   273,
   253,   274,   254,   275,   255,   276,   267,   288,   256,   277,
     0,     0,   258,   279,   259,   280,   260,   281,   261,   282,
   262,   283,   263,   284,     0,     0,     0,     0,     0,     0,
     0,     0,   352,     0,     0,   350,   351,     0,     0,     0,
     0,     0,    56,     0,     0,     0,     0,     0,    75,     0,
     0,     0,     0,   299,     0,    21,    19,     0,     0,     0,
     0,   331,     0,     0,   326,   234,   325,   335,   336,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    94,     0,   321,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   206,     0,
   166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   301,     0,   297,     0,     0,
     0,     0,     0,     0,     0,    25,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   298,
    66,    67,     0,     0,     0,     0,     0,    69,    71,    73,
     0,     0,   343,     0,    79,   246,    20,     0,     0,     0,
     0,     0,   328,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   322,     0,    97,
     0,     0,     0,     0,     0,   213,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     0,     0,     0,     0,     0,     0,     0,   211,     0,     0,
   176,   207,     0,     0,   220,   138,     0,     0,    95,    96,
    27,    28,     0,     0,     0,   340,     0,     0,     0,   156,
     0,     0,     0,     0,     0,   148,   303,   147,     0,     0,
     0,     0,     0,   316,     0,     0,   257,   278,   264,   285,
   265,   286,   266,   287,     0,   354,   353,   349,   306,     0,
    56,     0,     0,     0,     0,    64,     0,     0,     0,   341,
    22,    23,     0,     0,    85,     0,   327,     0,   100,     0,
   102,     0,     0,    98,     0,     0,   115,   116,     0,     0,
    99,   120,   323,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   150,     0,     0,
     0,     0,   131,   177,     0,   188,     0,   190,     0,   192,
     0,     0,     0,     0,   318,     0,     0,     0,     0,   170,
     0,     0,   105,   106,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   305,    26,     0,    36,     0,     0,     0,
     0,     0,    38,     0,     0,     0,     0,     0,    76,     0,
     0,    77,     0,   344,     0,     0,   332,     0,     0,     0,
   108,     0,     0,   117,     0,     0,     0,   218,   110,   111,
     0,     0,     0,   216,   219,   119,    86,   109,   118,   121,
     0,     0,     0,   315,     0,   314,     0,     0,     0,   179,
     0,     0,   180,     0,     0,   181,     0,   133,   134,   135,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   338,     0,   158,   157,    90,    93,    88,    89,    91,     0,
    41,     0,     0,     0,   317,     0,     0,     0,     0,     0,
    65,    72,    74,     0,    80,     0,    24,     0,     0,   101,
   103,     0,     0,     0,     0,     0,   215,   214,   217,    81,
    82,   131,     0,   125,     0,     0,     0,     0,     0,     0,
     0,   208,     0,     0,   131,     0,   127,    87,     0,     0,
     0,    92,     0,    37,     0,     0,     0,    39,    54,    55,
   355,     0,   342,     0,   222,   223,   224,   225,   114,     0,
     0,     0,   313,   178,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   171,     0,     0,   337,
   159,     0,     0,     0,     0,    78,     0,     0,   123,     0,
   194,     0,     0,   196,     0,     0,   198,     0,     0,     0,
   209,     0,   167,     0,   131,   107,     0,    45,     0,    51,
     0,     0,     0,   312,   182,     0,     0,   189,   183,     0,
     0,   191,   184,     0,     0,   193,     0,     0,     0,   173,
     0,     0,     0,     0,     0,     0,     0,   200,     0,   202,
     0,   204,   210,   212,   172,   168,     0,    42,     0,    49,
     0,     0,     0,     0,   185,     0,     0,   186,     0,     0,
   187,     0,     0,     0,    43,     0,     0,   154,     0,     0,
     0,     0,     0,     0,     0,   174,     0,     0,     0,     0,
     0,   195,     0,   197,     0,   199,     0,    44,    46,     0,
    47,     0,   104,     0,     0,     0,     0,     0,    52,   201,
   203,   205,    48,    50,     0,     0,     0
};

static const short yydefgoto[] = {  1285,
     2,    61,   668,    62,    63,   406,   986,   992,   593,   760,
  1123,  1244,   594,  1212,  1270,   595,  1246,   596,   597,   764,
   598,   126,   220,    64,   523,   548,   310,   367,   368,    67,
    68,    69,    70,    71,   311,   732,  1184,  1227,   549,  1038,
  1041,  1044,  1047,  1196,  1200,  1204,  1236,  1239,  1242,   728,
   729,    73,    74,    75,   329,   129,   347,   171,   883,   884,
   331,   314,   197,   663,   794,   212,   213
};

static const short yypact[] = {  3119,
    23,  3198,-32768,  2348,    36,    61,   -67,     8,   112,  -107,
   -11,    41,   -55,    56,    81,   -45,   144,   165,   269,   -14,
    85,   301,   313,    -5,   284,   718,   247,   227,   254,   254,
   288,    57,   292,   394,     6,   473,   405,   360,    27,   519,
   550,   564,   412,   439,   454,     9,    43,-32768,   457,-32768,
   580,   503,   506,   510,   526,-32768,   619,     1,    14,    26,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    21,    17,   264,-32768,
-32768,-32768,   -82,   -70,    73,   286,   341,   393,   407,   422,
   443,   450,   464,   476,   483,   523,   527,   536,   540,   547,
   576,   577,   603,   487,   502,   509,   517,-32768,   530,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2573,  2573,  2573,-32768,
-32768,  2573,  2134,    29,   628,  2573,   639,  1127,-32768,   655,
   659,  2573,   671,-32768,  2573,-32768,  2573,  2404,  2573,  2573,
   543,  2573,  2404,  2573,  2573,   548,  2404,  2573,  2573,  1349,
   553,  2573,   578,   602,   615,  1790,   611,   612,   623,   626,
   629,   636,   642,   792,   254,   254,   254,  2573,  2573,   -17,
-32768,    54,   254,   665,   676,   686,   687,  1211,    59,   864,
  1790,     3,-32768,-32768,   700,   864,  1513,  1790,   708,   714,
   806,  2573,  2573,  2573,   721,  2573,   715,   773,  2573,  2573,
-32768,   734,   741,   742,   759,   893,-32768,   766,-32768,-32768,
-32768,   908,-32768,-32768,   916,   785,  2573,   923,   790,-32768,
   254,-32768,   939,  2573,  2573,  2573,  2573,  2573,  2573,  2573,
  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,
  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,
  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,
  2573,  2573,  2573,  2573,  2573,   735,   779,   779,   779,   945,
   537,   815,   815,   815,  5481,    15,  2404,  4768,   378,   819,
   957,   824,  1177,-32768,-32768,  2573,  2573,  2573,  2573,  2573,
  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,  2573,
-32768,-32768,  1273,   224,  4014,  5502,   727,   820,  2404,-32768,
-32768,  1715,-32768,   606,  5523,  5544,  2573,  5565,   631,  5586,
  5607,  2573,   635,  5628,  5649,  1790,  1928,   680,  1853,   960,
-32768,  2573,  5670,  2573,  2573,  2573,   961,  2573,  2573,  2573,
  2536,  2536,  2536,  2536,   830,   -63,-32768,-32768,  4040,  4066,
   254,   254,   864,   864,   -31,  2573,  2573,  2573,  2573,  1211,
  1211,  2573,  3268,   179,-32768,-32768,   841,  3268,   413,   965,
-32768,  2573,  2677,  2404,   842,   853,   984,   986,  2573,  2573,
-32768,  5691,  5712,  5733,   901,  4092,-32768,   849,  1991,  5754,
  2573,  2573,  2573,  2573,-32768,  2573,  2701,-32768,  2782,-32768,
  2573,  4791,   364,  2573,   278,     4,-32768,  5775,  4814,  5796,
  4837,  5817,  4860,  5838,  4883,  5859,  4906,  5880,  4929,  5901,
  4952,  5922,  4975,  5943,  4998,  5964,  5021,  5985,  5044,  4118,
  4144,  6006,  5067,  6027,  5090,  6048,  5113,  6069,  5136,  6090,
  5159,  6111,  5182,  4170,  4196,  4222,  4248,  4274,  4300,   644,
   231,   851,   857,   858,   855,  2573,-32768,  1790,  1790,   652,
   312,   264,  2573,   995,   998,    19,   861,-32768,  2488,   763,
   953,   712,   712,   780,   780,   780,   780,   185,   185,   815,
   815,   815,   815,-32768,    32,  2404,  2573,   999,  2204,  2573,
   815,-32768,  2573,  2404,  2404,   909,  1000,  1001,  6132,  1002,
   914,  1004,  1005,  6153,   918,  1006,  1009,  1011,  2404,-32768,
   656,  2066,  2573,  6174,  1013,  3342,  6195,  6216,  2573,  3370,
  3398,  6237,   878,  3020,-32768,   881,   882,   885,   883,   254,
  2573,  2573,-32768,-32768,   880,   884,  2573,  5205,  4326,  4352,
  4378,  3209,   -54,   -35,   -37,    -7,   927,-32768,   198,   254,
  2806,-32768,-32768,  2573,-32768,  5228,-32768,   660,-32768,  2573,
  1790,  1790,  5251,  5274,  1022,  1023,  1025,   891,  2573,  2887,
  2573,  2573,-32768,  6258,  6279,  6300,  6321,  6342,-32768,-32768,
  5297,    38,-32768,  3426,-32768,-32768,   896,   897,   905,-32768,
   913,  1047,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2573,  2573,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2573,  2573,  2573,  2573,  2573,  2573,
  2573,  1052,-32768,  2404,   779,-32768,-32768,  2573,  5320,  1053,
  1055,   920,-32768,    33,  2573,  1057,  1058,  1380,-32768,  1059,
   924,     9,  1061,-32768,  2573,-32768,   941,   779,   234,  4404,
   254,-32768,  2404,  3454,  2514,   815,-32768,  1715,-32768,  1020,
  1790,  1790,  1064,  1790,   740,  1790,  1790,  1065,  1036,  1790,
  1790,-32768,   666,-32768,  2404,  1437,  1066,   928,  1081,  1083,
  1085,   345,  1086,  1087,  1088,  1089,  1090,  1091,  1092,  1096,
   268,  4430,  4456,-32768,-32768,  3482,   956,   254,   254,   254,
  2404,  2404,  2404,  2404,  1097,   959,   968,   132,-32768,   373,
-32768,   198,  1470,  1103,  1062,  6363,  1104,  1106,  1107,  1108,
  1790,  1790,  1790,  1111,  4482,-32768,  2984,   917,  1109,  1112,
  1113,  1114,  1115,  1119,  1122,-32768,  1121,-32768,    11,   979,
  2573,  2573,  1790,   982,  2573,-32768,  6384,  5343,  6405,  5366,
  6426,  5389,  6447,  5412,  5435,   989,   265,   990,  6468,   252,
-32768,-32768,   100,   408,   988,  1128,  1578,-32768,-32768,-32768,
     9,  2573,-32768,   678,-32768,  3020,-32768,  1130,    34,  2573,
    48,   681,-32768,  2573,   991,    49,    52,  1790,  1132,   993,
   996,  1135,  1139,  1790,  1008,  1141,  1144,-32768,   684,-32768,
  1129,  2573,  1790,  1790,  1790,-32768,   427,  1790,  1790,  1790,
  1790,  1790,  1790,  1790,   534,  2573,  2573,  2573,  1015,-32768,
   184,   218,   311,   707,   729,   732,   737,-32768,  1790,  2573,
-32768,-32768,  1211,   202,-32768,-32768,  1016,  1148,-32768,-32768,
-32768,-32768,  1145,  1151,  1067,-32768,  2573,  2573,  2573,-32768,
  1790,  1158,  2573,  2573,  1159,-32768,   364,-32768,  1160,  2573,
  4508,  4534,   757,-32768,  2573,  6489,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1024,-32768,-32768,-32768,-32768,  1790,
   264,  2573,  1162,  1161,    19,-32768,  1165,  5458,     9,-32768,
-32768,-32768,   779,  4560,-32768,  1030,  3020,  2573,-32768,   254,
-32768,   254,  1168,-32768,  2573,  2573,-32768,-32768,  1169,  2573,
-32768,-32768,-32768,  1172,  4586,  1173,  1175,  1176,  2573,  2573,
   902,  1178,  1179,  1180,  1182,  1183,  1186,-32768,  2536,  3510,
  6510,  3258,   864,  3268,   254,  1188,   254,  1190,   254,  1192,
  1194,  1195,  1196,  1200,   605,  1033,  6531,  3538,   445,-32768,
  2573,  1790,-32768,-32768,  1790,  3286,   852,  6552,  1201,  1202,
  1609,  1630,  1652,-32768,-32768,   276,  3020,  2573,  2573,  1790,
  1063,   770,  3020,  1790,  1206,  1205,  1207,  1763,-32768,  1209,
  1212,-32768,  1069,-32768,  1213,  2573,-32768,  3566,    72,   142,
-32768,  3594,  3622,-32768,  3650,  1218,  2573,-32768,-32768,-32768,
  1891,  2163,  1240,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2182,  1255,  1078,-32768,  2573,-32768,  1116,   198,   447,-32768,
  1118,   465,-32768,  1120,   469,-32768,  1123,-32768,-32768,-32768,
-32768,  1256,  1790,  1260,  1125,  2573,  3678,  1262,  1181,  2573,
-32768,  2573,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1267,
-32768,  2573,  4612,  4638,-32768,  1790,  2573,  1268,  1269,  1137,
-32768,-32768,-32768,     9,-32768,  1184,-32768,  4664,  1274,-32768,
-32768,  1275,  1276,  1277,  1278,  4690,-32768,-32768,-32768,-32768,
-32768,   864,  3314,-32768,   233,  1211,   198,  1211,   198,  1211,
   198,-32768,   788,  1790,-32768,  3706,-32768,-32768,  2573,  3734,
  3762,-32768,  1142,  3020,  2573,  2573,   796,  3020,-32768,-32768,
-32768,  1283,-32768,  2573,-32768,-32768,-32768,-32768,-32768,  1307,
  1166,  2573,-32768,-32768,  3790,   471,   249,  3818,   522,   289,
  3846,   525,   303,  1790,  1308,  1257,  2911,  1170,  2271,-32768,
-32768,  2573,  6573,  4716,    22,-32768,  4742,  1174,-32768,  3874,
  1311,  2573,  1314,  1315,  2573,  1316,  1321,  2573,  1322,  1185,
-32768,  2573,-32768,   198,-32768,-32768,   797,-32768,  2573,-32768,
  1790,  2573,  1324,-32768,-32768,  1189,  3902,-32768,-32768,  1191,
  3930,-32768,-32768,  1193,  3958,-32768,  1325,  2377,   339,  2992,
  1328,  1197,  6594,   801,  3986,  1203,   198,  1330,   198,  1332,
   198,  1341,-32768,-32768,-32768,-32768,   198,-32768,   779,-32768,
  1208,  1343,  1346,   354,-32768,  1210,   381,-32768,  1215,   426,
-32768,  1238,   459,   812,-32768,  1239,  1790,-32768,  1241,  1381,
   198,  1383,   198,  1384,   198,-32768,   779,  1385,   779,   813,
  1401,-32768,   478,-32768,   481,-32768,   493,-32768,-32768,   816,
-32768,  1402,-32768,  1403,  1404,  1406,   779,  1407,-32768,-32768,
-32768,-32768,-32768,-32768,  1420,  1421,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   531,-32768,-32768,   837,-32768,   261,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -268,    20,-32768,   177,  1424,    -1,  -183,  -166,-32768,
-32768,-32768,-32768,-32768,  1425,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -672,
  -701,-32768,-32768,-32768,    -2,-32768,   236,-32768, -1072,   462,
   135,   -64,  -642,   524,-32768,   -60,     2
};


#define	YYLAST		6734


static const short yytable[] = {   215,
    66,   128,   375,  1127,   207,   130,   370,   586,   371,   182,
   463,   363,   195,   134,   586,   141,   373,   209,   210,   793,
   221,   458,   661,   127,   216,   146,   852,  1190,     3,   209,
   210,   137,   279,   146,   151,   141,   784,   666,   138,   912,
   156,   209,   210,   157,   397,   158,   198,   399,   131,   104,
   105,   106,   107,   915,   919,   108,   224,   921,   225,   854,
   174,   104,   105,   106,   107,   351,   352,   108,   226,   187,
   227,   133,   188,   104,   105,   106,   107,  1090,   319,   108,
   223,   530,   323,   142,   137,   587,   588,   589,   590,   591,
   143,   721,   587,   588,   589,   590,   591,   351,   352,   175,
   147,   208,   176,   142,   920,   177,   653,   922,   723,   132,
   722,   351,   352,   537,   272,   273,   274,   136,  1214,   275,
   278,   280,   281,   283,   152,   785,   786,   139,   353,   303,
   459,   149,   305,   153,   306,   312,   315,   316,   724,   318,
   312,   320,   321,   372,   312,   324,   325,  1091,   907,   333,
   592,   183,   852,   135,   196,   120,   121,   879,   667,   211,
   667,   217,   222,   218,   662,   349,   350,  1191,   219,   535,
   536,   214,   120,   121,  1260,   350,   351,   352,   366,   140,
   755,   199,   351,   352,   366,   166,   167,   351,   352,   382,
   383,   384,   655,   386,   144,   168,   389,   390,   551,   354,
   351,   352,   178,   725,   365,   451,   452,   453,   454,   726,
   727,   228,   460,   229,   402,   113,   114,   115,   116,   145,
   570,   408,   409,   410,   411,   412,   413,   414,   415,   416,
   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
   427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
   437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
   447,   448,   449,   511,   170,   172,  1004,   179,   210,   725,
   351,   352,   313,   725,   312,   726,   727,   313,   851,   726,
   727,   313,   148,   469,   470,   471,   472,   473,   474,   475,
   476,   477,   478,   479,   480,   481,   482,   483,   464,   104,
   105,   106,   107,   149,   725,   108,   491,   351,   352,   558,
   726,   727,   351,   352,   499,   297,   298,   299,   653,   504,
   725,   150,   300,   550,   491,   312,   726,   727,   955,   514,
   956,   516,   517,   518,   159,   520,   521,   522,   524,   524,
   524,   524,   525,   525,   525,   525,   351,   352,   970,   154,
   826,   366,   366,   538,   539,   540,   541,   272,   273,   542,
   725,   155,   957,   485,   958,  1105,   726,   727,   486,   556,
   643,   312,   165,   799,   725,   644,   563,   564,   495,  1144,
   726,   727,   166,   167,   462,   164,   120,   121,   574,   575,
   576,   577,   168,   578,   755,  1173,   351,   352,   581,   169,
   346,   584,   348,   852,   897,   827,   351,   352,   355,   495,
   725,   313,   836,   364,   901,  1071,   726,   727,   553,   554,
  1072,   669,   583,   585,   230,   725,   231,   113,   114,   115,
   116,   726,   727,   173,  1147,  1176,  1150,   180,  1153,   351,
   352,  1132,   181,   492,   693,   852,   120,   121,   852,  1179,
   185,   852,   725,   649,   654,   959,   405,   960,   726,   727,
   658,   492,   313,   657,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   184,   232,
   656,   233,   300,   312,   670,  1225,   649,   674,   939,   940,
   675,   676,   678,   113,   114,   115,   116,   725,   120,   121,
  1250,   351,   352,   726,   727,   186,   312,   852,   313,   676,
   696,  1209,   120,   121,   900,   902,   702,   853,   526,   527,
   528,   757,   189,   113,   114,   115,   116,  1252,   712,   713,
   725,   234,   852,   235,   716,   852,   726,   727,   852,   948,
   949,   852,   120,   121,  1234,   236,  1237,   237,  1240,   725,
   192,   733,   725,   190,  1243,   726,   727,   736,   726,   727,
   238,   852,   239,   852,   725,   852,   745,   191,   747,   748,
   726,   727,  1254,   351,   352,   351,   352,   193,  1263,   777,
  1265,   240,  1267,   241,   778,   201,   533,   534,   242,  1056,
   243,  1106,   194,   351,   352,   200,   348,   351,   352,   351,
   352,   756,   244,   202,   245,  1256,   203,   798,   802,  1108,
   204,   330,   493,  1110,   246,  1172,   247,   337,   767,   768,
   313,   248,   206,   249,  1274,   266,   205,  1275,   677,   679,
   819,   282,   769,   770,   771,   772,   773,   774,   775,  1276,
   267,   312,   369,   313,   284,   779,   677,   268,   377,   378,
   351,   352,   787,   351,   352,   269,   844,   845,   846,   847,
   301,   250,   796,   251,   302,   252,  1175,   253,   270,  1178,
   312,   120,   121,   954,   254,   304,   255,   456,   256,   218,
   257,   317,    76,   307,   219,   258,   322,   259,    80,    81,
    82,   332,   312,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   260,   262,   261,   263,   312,   312,
   312,   312,   308,   334,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   512,   298,   299,   450,   210,
   335,   264,   300,   265,    28,    29,    30,    31,    32,    33,
   495,  1052,   496,   336,    37,    38,   338,   339,   881,   882,
   160,   340,   886,   161,   341,   711,   162,   342,   163,  1037,
   104,   105,   106,   107,   343,   495,   108,   501,   313,   495,
   344,   505,   209,   210,   641,   730,   642,   508,   810,   908,
   811,   109,   110,   111,   112,   345,   495,   914,   652,   756,
   495,   917,   694,   903,   495,   356,   735,   313,   117,   309,
   495,   381,   818,   119,   104,   105,   106,   107,   122,   935,
   108,   357,   909,   125,   910,   495,   510,   916,   495,   313,
   933,   358,   359,   950,   951,   952,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   374,   965,   967,   379,   300,
   968,   495,  1005,   961,   380,   313,   313,   313,   313,  1062,
   387,   120,   121,   385,   976,   977,   978,   489,   388,   218,
   981,   982,   391,   495,   219,   962,   495,   987,   963,   392,
   393,   495,   993,   964,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   984,   394,   395,   998,
   300,   990,   997,   991,   396,  1023,   801,  1024,   295,   296,
   297,   298,   299,   398,  1077,  1008,  1078,   300,  1141,   650,
   651,   400,  1012,  1013,   869,   401,   403,  1015,    28,    29,
    30,    31,  1154,    33,  1155,   404,  1021,  1022,    37,    38,
   990,  1077,  1165,  1211,   407,   990,  1031,  1231,  1157,   455,
  1032,   366,   300,   841,   842,   843,  1257,   990,  1258,  1272,
  1277,   465,  1278,   466,   467,   490,   513,   519,  1057,   529,
   555,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,  1073,  1074,   552,   559,   300,
   561,   560,   562,   568,   571,   645,   646,   647,  1063,   648,
   659,   660,   664,  1088,   680,   671,   681,   682,   684,   685,
   686,   687,   690,   689,  1096,   691,   692,   706,  1210,   698,
   707,   708,   737,   738,   709,   710,   714,   208,   741,   742,
   715,   743,  1103,   744,   761,   762,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
   763,   765,   766,  1116,   300,   776,   870,  1120,   781,  1121,
   782,   783,   788,   789,   792,   791,   795,   797,   805,  1124,
   808,   814,   821,   822,  1128,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   815,   823,   969,   824,
   300,   825,   828,   829,   830,   831,   832,   833,   834,   835,
   366,   840,   848,  1145,   849,  1148,   850,  1151,   856,   859,
   857,   860,   861,   862,   866,   871,  1159,   880,   872,   873,
   874,   875,  1163,  1164,   876,   877,   878,   885,   896,   898,
   904,  1167,   285,   934,   905,   911,   918,   924,   925,  1170,
   927,   926,   806,   807,   928,   809,   931,   812,   813,   932,
   973,   816,   817,   930,   972,  1009,   974,  1010,   975,   993,
   953,   971,   980,   983,  1000,   985,   995,   999,  1245,  1197,
  1002,  1007,  1201,  1011,  1014,  1205,  1016,  1053,  1018,  1208,
  1019,  1020,   468,  1025,  1026,  1027,  1213,  1028,  1029,  1215,
  1039,  1030,  1042,  1040,  1045,  1043,  1268,  1046,  1271,  1048,
  1049,  1050,   863,   864,   865,  1051,  1065,  1066,  1076,  1080,
  1081,  1086,  1082,    76,   271,  1084,  1283,  1085,  1087,    80,
    81,    82,  1095,  1102,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,  1099,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
  1101,  1112,  1104,  1107,   300,  1109,  1114,  1118,  1111,   923,
  1115,  1119,  1122,  1129,  1130,   929,  1131,  1133,   484,  1135,
  1136,  1137,  1138,  1139,   936,   937,   938,  1162,  1166,   941,
   942,   943,   944,   945,   946,   947,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
   966,  1168,  1169,  1181,   300,  1185,  1195,  1182,  1193,  1198,
  1199,  1202,   109,   110,   111,   112,  1203,  1206,  1216,   913,
  1223,  1207,   979,  1228,  1217,  1235,  1219,  1238,  1221,   360,
   361,  1146,  1229,  1149,   119,  1152,  1241,  1233,  1248,   362,
  1249,    76,   307,  1247,   125,  1251,   169,    80,    81,    82,
  1253,   996,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,  1255,  1259,   790,  1262,  1261,  1264,  1266,
  1269,   308,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,  1273,  1279,  1280,  1281,
   300,  1282,  1284,    28,    29,    30,    31,    32,    33,  1286,
  1287,   759,  1187,    37,    38,    65,    72,     0,  1001,     0,
     0,     0,     0,  1058,     0,     0,  1059,     0,     0,     0,
     0,     0,   820,     0,  1070,     0,     0,     0,     0,   326,
     0,  1075,     0,     0,     0,  1079,     0,     0,     0,     0,
   109,   110,   111,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   855,     0,   117,   327,     0,
     0,     0,   119,     0,     0,     0,     0,   122,     0,     0,
     0,     0,   125,     0,   328,     0,     0,     0,     0,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,  1113,    76,   307,   300,     0,     0,
     0,    80,    81,    82,     0,     0,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,     0,     0,     0,
     0,     0,     0,     0,     0,   308,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,  1156,     0,    28,    29,    30,
    31,    32,    33,   906,     0,     0,     0,    37,    38,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,   376,  1067,  1180,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,   111,   112,     0,     0,
     0,     0,     0,     0,     0,  1068,     0,     0,     0,     0,
     0,   117,   327,     0,     0,     0,   119,     0,     0,     0,
     0,   122,     0,     0,    76,   307,   125,  1069,   328,     0,
    80,    81,    82,     0,     0,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,     0,     0,     0,     0,
     0,     0,     0,     0,   308,     0,     0,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,    28,    29,    30,    31,
    32,    33,   493,     0,     0,     0,    37,    38,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,     0,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   109,   110,   111,   112,   300,  1083,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   117,   327,     0,     0,     0,   119,     0,     0,     0,     0,
   122,     0,    76,   307,     0,   125,     0,   328,    80,    81,
    82,     0,     0,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,     0,     0,     0,     0,     0,     0,
     0,     0,   308,     0,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   494,   298,   299,     0,     0,
     0,     0,   300,     0,    28,    29,    30,    31,    32,    33,
   493,     0,     0,     0,    37,    38,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,  1097,     0,     0,     0,
   300,   109,   110,   111,   112,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   117,   327,
     0,     0,     0,   119,     0,     0,     0,     0,   122,     0,
    76,   307,     0,   125,     0,   328,    80,    81,    82,     0,
     0,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,     0,     0,     0,     0,     0,     0,     0,     0,
   308,     0,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   512,   298,   299,     0,     0,     0,     0,
   300,     0,    28,    29,    30,    31,    32,    33,   572,     0,
     0,     0,    37,    38,     0,     0,     0,     0,     0,     0,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,   111,   112,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   117,   309,     0,     0,
     0,   119,     0,     0,     0,     0,   122,     0,    76,   307,
     0,   125,     0,   509,    80,    81,    82,     0,     0,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     0,     0,     0,     0,     0,     0,     0,     0,   308,     0,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
    28,    29,    30,    31,    32,    33,    76,   271,     0,     0,
    37,    38,    80,    81,    82,     0,     0,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,  1098,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,   111,
   112,     0,     0,     0,     0,     0,     0,  1100,     0,     0,
     0,     0,     0,     0,   117,   309,     0,     0,     0,   119,
     0,     0,     0,     0,   122,     0,    76,   271,     0,   125,
     0,   695,    80,    81,    82,     0,     0,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,     0,     0,
     0,     0,     0,     0,     0,   109,   110,   111,   112,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   117,   118,     0,     0,     0,   119,     0,     0,
     0,     0,   122,     0,     0,   276,  1186,   125,     0,   277,
     0,     0,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   109,   110,   111,   112,   300,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   117,   118,     0,     0,     0,   119,     0,     0,
     0,     0,   122,     0,     0,   672,     0,   125,     0,   673,
    76,    77,    78,     0,    79,     0,    80,    81,    82,     0,
     0,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,  1224,   104,   105,   106,   107,     0,     0,   108,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,    76,   307,   300,     0,
     0,     0,    80,    81,    82,     0,     0,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,     0,     0,
     0,     0,     0,     0,     0,     0,   308,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,   111,   112,   113,   114,   115,   116,     0,    28,    29,
    30,    31,    32,    33,     0,     0,   117,   118,    37,    38,
     0,   119,   120,   121,     0,     0,   122,     0,   123,     0,
   124,   125,     0,     0,     0,   665,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,   109,   110,   111,   112,     0,
     0,   804,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   117,   309,     0,     0,     0,   119,    76,   271,
   210,     0,   122,     0,    80,    81,    82,   125,     0,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     0,   104,   105,   106,   107,    76,   271,   108,     0,     0,
     0,    80,    81,    82,     0,     0,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   109,   110,   111,
   112,   300,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   117,   118,     0,     0,     0,   119,
     0,     0,     0,     0,   122,     0,     0,     0,     0,   125,
     0,     0,     0,     0,   109,   110,   111,   112,     5,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,   118,     0,     0,     0,   119,     0,     0,     0,
     0,   122,     5,     6,     0,     0,   125,     0,     0,   543,
    11,    12,   544,    14,    15,   545,    17,   546,    19,     0,
    20,     0,    22,    23,     0,    25,    26,     0,     0,     0,
     0,     0,     0,   543,    11,    12,   544,    14,    15,   545,
    17,   546,    19,    39,    20,     0,    22,    23,     0,    25,
    26,     0,     0,     0,    43,    44,    45,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    39,    52,    53,
    54,     0,    55,     0,     0,   547,     0,     0,    43,    44,
    45,     0,     0,     5,     6,     0,     0,     0,     0,     0,
     0,     0,    52,    53,    54,     0,    55,     0,     0,   547,
     0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
     0,     0,     0,   557,   543,    11,    12,   544,    14,    15,
   545,    17,   546,    19,     0,    20,     0,    22,    23,     0,
    25,    26,     0,     0,     0,     0,     0,   579,   543,    11,
    12,   544,    14,    15,   545,    17,   546,    19,    39,    20,
     0,    22,    23,     0,    25,    26,     0,     0,     0,    43,
    44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    39,    52,    53,    54,     0,    55,     0,     0,
   547,     0,     0,    43,    44,    45,     0,     0,     5,     6,
     0,     0,     0,     0,     0,     0,     0,    52,    53,    54,
     0,    55,     0,     0,   547,     0,     0,     0,     0,     0,
     0,     0,     5,     6,     0,     0,     0,     0,   580,   543,
    11,    12,   544,    14,    15,   545,    17,   546,    19,     0,
    20,     0,    22,    23,     0,    25,    26,     0,     0,     0,
     0,     0,   731,   543,    11,    12,   544,    14,    15,   545,
    17,   546,    19,    39,    20,     0,    22,    23,     0,    25,
    26,     0,     0,     0,    43,    44,    45,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    39,    52,    53,
    54,   868,    55,     0,     0,   547,     0,     0,    43,    44,
    45,     0,     0,     5,     6,     0,     0,     0,     0,     0,
     0,     0,    52,    53,    54,     0,    55,     0,     0,   547,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   746,   543,    11,    12,   544,    14,    15,
   545,    17,   546,    19,     0,    20,     0,    22,    23,     0,
    25,    26,     0,     0,     0,     0,     0,  1183,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    39,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
    44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    52,    53,    54,     0,    55,     0,     0,
   547,     0,     0,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,    -3,     1,
     0,   300,    -3,     0,     0,     0,     0,     0,     0,     0,
    -3,    -3,     0,     0,     0,     0,     0,     0,  1226,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,    -3,     0,     0,     0,   300,    -3,    -3,
     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,
     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,
    -3,    -3,    -3,    -3,    -3,    -3,     0,     0,    -3,    -3,
     0,     4,     0,     0,     0,    -3,    -3,    -3,    -3,     5,
     6,    -3,     0,    -3,     0,    -3,    -3,    -3,    -3,     0,
    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     7,     0,     0,     0,     0,     8,     9,     0,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
     0,    20,    21,    22,    23,    24,    25,    26,     0,     0,
     0,    27,    28,    29,    30,    31,    32,    33,     0,    34,
    35,    36,    37,    38,    39,     0,     0,    40,    41,     5,
     6,     0,     0,     0,    42,    43,    44,    45,     0,     0,
    46,     0,    47,     0,    48,    49,    50,    51,     0,    52,
    53,    54,     0,    55,    56,    57,    58,    59,    60,     0,
   543,    11,    12,   544,    14,    15,   545,    17,   546,    19,
     0,    20,     0,    22,    23,     0,    25,    26,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,    39,     0,   300,     0,   457,     0,
     0,     0,     0,   531,     0,    43,    44,    45,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
    53,    54,     0,    55,     0,     0,   547,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,  1035,     0,  1036,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
  1060,     0,  1061,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,  1142,     0,
  1143,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,     0,     0,   699,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,     0,     0,   703,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,   704,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
     0,     0,   758,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,     0,     0,
   803,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,     0,     0,   839,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,     0,     0,  1033,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,  1055,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
     0,     0,  1089,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,     0,     0,
  1092,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,     0,     0,  1093,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,     0,     0,  1094,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,  1117,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
     0,     0,  1158,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,     0,     0,
  1160,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,     0,     0,  1161,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,     0,     0,  1171,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,  1174,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
     0,     0,  1177,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,     0,     0,
  1194,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,     0,     0,  1218,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,     0,     0,  1220,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,  1222,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
     0,     0,  1232,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,   487,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,   531,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
   532,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,   569,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,   621,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,   622,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,   635,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
   636,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,   637,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,   638,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,   639,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,   640,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
   718,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,   719,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,   720,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,   800,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,   837,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
   838,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,   867,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,   988,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,   989,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,  1006,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
  1017,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,  1125,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,  1126,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,     0,     0,     0,  1134,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,     0,  1140,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,     0,     0,     0,
  1189,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,     0,     0,     0,  1192,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,   461,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
     0,     0,   582,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,   600,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,     0,     0,   602,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,   604,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,     0,     0,   606,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,   608,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,     0,     0,
   610,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,   612,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,     0,     0,   614,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,   616,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
     0,     0,   618,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,   620,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,     0,     0,   624,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,   626,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,     0,     0,   628,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,   630,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,     0,     0,
   632,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,   634,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,     0,     0,   717,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,   734,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
     0,     0,   739,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,     0,     0,   740,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,     0,     0,   754,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,     0,
     0,   780,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,     0,     0,   888,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,     0,     0,   890,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,     0,     0,
   892,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,     0,     0,   894,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,     0,     0,   895,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,     0,     0,  1003,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
   457,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,   488,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,   497,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,   498,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,   500,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,   502,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,   503,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,   506,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,   507,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,   515,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
   565,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,   566,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,   567,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,   573,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,   599,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,   601,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,   603,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,   605,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,   607,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,   609,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
   611,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,   613,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,   615,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,   617,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,   619,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,   623,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,   625,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,   627,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,   629,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,   631,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
   633,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,   683,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,   688,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,   697,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,   700,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,   701,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,   705,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,   749,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,   750,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,   751,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
   752,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,   753,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,   858,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,   887,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,     0,     0,
     0,     0,   300,     0,   889,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,     0,
     0,     0,     0,   300,     0,   891,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     0,     0,     0,     0,   300,     0,   893,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,     0,     0,     0,     0,   300,     0,   899,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,     0,     0,     0,     0,   300,     0,   994,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,     0,     0,     0,     0,   300,     0,  1034,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,     0,     0,     0,     0,   300,     0,
  1054,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,     0,     0,     0,     0,   300,
     0,  1064,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,     0,     0,     0,     0,
   300,     0,  1188,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,     0,     0,     0,
     0,   300,     0,  1230
};

static const short yycheck[] = {    60,
     2,     4,   186,  1076,     4,     4,     4,     4,     6,     4,
   279,   178,     4,     6,     4,    71,   183,     4,     5,   662,
     4,     7,     4,     4,     4,    71,   728,     6,     6,     4,
     5,   139,     4,    71,    49,    71,     4,     6,   146,     6,
    46,     4,     5,    49,   211,    51,     4,   214,    13,    36,
    37,    38,    39,     6,     6,    42,   139,     6,   141,   732,
     4,    36,    37,    38,    39,   129,   130,    42,   139,    43,
   141,   139,    46,    36,    37,    38,    39,     6,   143,    42,
    79,   145,   147,   139,   139,    82,    83,    84,    85,    86,
   146,   146,    82,    83,    84,    85,    86,   129,   130,    43,
   146,   101,    46,   139,    56,    49,     7,    56,   146,    49,
   146,   129,   130,   145,   117,   118,   119,     6,  1191,   122,
   123,    93,    94,   126,   139,    93,    94,   139,   146,   132,
   116,   139,   135,    49,   137,   138,   139,   140,   146,   142,
   143,   144,   145,   141,   147,   148,   149,     6,   791,   152,
   147,   146,   854,   146,   146,   135,   136,   147,   127,   146,
   127,   141,   146,   143,   146,   168,   169,   146,   148,   353,
   354,   146,   135,   136,  1247,   178,   129,   130,   180,   139,
   143,   139,   129,   130,   186,   129,   130,   129,   130,   192,
   193,   194,   461,   196,   139,   139,   199,   200,   365,   146,
   129,   130,   146,    72,   146,   266,   267,   268,   269,    78,
    79,   139,   277,   141,   217,   116,   117,   118,   119,   139,
   387,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
   263,   264,   265,   328,    29,    30,   909,    32,     5,    72,
   129,   130,   138,    72,   277,    78,    79,   143,   147,    78,
    79,   147,   139,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   279,    36,
    37,    38,    39,   139,    72,    42,   309,   129,   130,   374,
    78,    79,   129,   130,   317,   131,   132,   133,     7,   322,
    72,    53,   138,   145,   327,   328,    78,    79,   145,   332,
   147,   334,   335,   336,    51,   338,   339,   340,   341,   342,
   343,   344,   341,   342,   343,   344,   129,   130,   147,    49,
     6,   353,   354,   356,   357,   358,   359,   360,   361,   362,
    72,    49,   145,   140,   147,  1038,    78,    79,   145,   372,
   140,   374,   146,   140,    72,   145,   379,   380,   145,   147,
    78,    79,   129,   130,     7,   139,   135,   136,   391,   392,
   393,   394,   139,   396,   143,   147,   129,   130,   401,   146,
   165,   404,   167,  1105,   140,    61,   129,   130,   173,   145,
    72,   277,   145,   178,     7,   140,    78,    79,     6,     7,
   145,   486,   403,   146,   139,    72,   141,   116,   117,   118,
   119,    78,    79,   146,  1107,   147,  1109,   146,  1111,   129,
   130,  1084,    49,   309,   509,  1147,   135,   136,  1150,   147,
    46,  1153,    72,   456,   143,   145,   221,   147,    78,    79,
   463,   327,   328,   462,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,     6,   139,
   461,   141,   138,   486,   487,   147,   489,   490,    62,    63,
   493,   494,   495,   116,   117,   118,   119,    72,   135,   136,
   147,   129,   130,    78,    79,   146,   509,  1209,   374,   512,
   513,  1184,   135,   136,   783,   784,   519,   145,   342,   343,
   344,   582,     4,   116,   117,   118,   119,   147,   531,   532,
    72,   139,  1234,   141,   537,  1237,    78,    79,  1240,     6,
     7,  1243,   135,   136,  1217,   139,  1219,   141,  1221,    72,
   139,   554,    72,     4,  1227,    78,    79,   560,    78,    79,
   139,  1263,   141,  1265,    72,  1267,   569,     4,   571,   572,
    78,    79,   147,   129,   130,   129,   130,   139,  1251,   644,
  1253,   139,  1255,   141,   645,     6,   351,   352,   139,   145,
   141,   145,   139,   129,   130,   139,   361,   129,   130,   129,
   130,   582,   139,   101,   141,   147,   101,   668,   673,   145,
   101,   150,     8,   145,   139,   145,   141,   156,   621,   622,
   486,   139,     4,   141,   147,   139,   101,   147,   494,   495,
   695,     4,   635,   636,   637,   638,   639,   640,   641,   147,
   139,   644,   181,   509,     6,   648,   512,   139,   187,   188,
   129,   130,   655,   129,   130,   139,   721,   722,   723,   724,
     6,   139,   665,   141,     6,   139,   145,   141,   139,   145,
   673,   135,   136,   840,   139,     5,   141,   141,   139,   143,
   141,   139,     3,     4,   148,   139,   139,   141,     9,    10,
    11,   139,   695,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,   139,   139,   141,   141,   721,   722,
   723,   724,    43,   146,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,     4,     5,
   139,   139,   138,   141,    65,    66,    67,    68,    69,    70,
   145,   147,   147,   139,    75,    76,   146,   146,   761,   762,
    43,   139,   765,    46,   139,   530,    49,   139,    51,   953,
    36,    37,    38,    39,   139,   145,    42,   147,   644,   145,
   139,   147,     4,     5,   141,   550,   143,   326,    49,   792,
    51,   112,   113,   114,   115,     4,   145,   800,   147,   780,
   145,   804,   147,   784,   145,   141,   147,   673,   129,   130,
   145,     6,   147,   134,    36,    37,    38,    39,   139,   822,
    42,   146,   145,   144,   147,   145,   147,   147,   145,   695,
   147,   146,   146,   836,   837,   838,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   146,   849,   850,   141,   138,
   853,   145,   913,   147,   141,   721,   722,   723,   724,     8,
   146,   135,   136,   143,   867,   868,   869,   141,    96,   143,
   873,   874,   139,   145,   148,   147,   145,   880,   147,   139,
   139,   145,   885,   147,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   877,   139,     6,   902,
   138,   145,   901,   147,   139,     4,   671,     6,   129,   130,
   131,   132,   133,     6,   145,   918,   147,   138,  1102,   458,
   459,     6,   925,   926,     8,   141,     4,   930,    65,    66,
    67,    68,   145,    70,   147,   146,   939,   940,    75,    76,
   145,   145,   147,   147,     6,   145,   949,   147,  1115,     5,
   949,   953,   138,   718,   719,   720,   145,   145,   147,   147,
   145,   143,   147,     7,   141,   146,     7,     7,   971,   140,
     6,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   988,   989,   147,   147,   138,
     7,   139,     7,    93,   146,   145,   140,   140,   147,   145,
     6,     4,   142,  1006,    96,     7,     7,     7,     7,    96,
     7,     7,     7,    96,  1017,     7,     6,   140,  1185,     7,
   140,   140,   561,   562,   140,   143,   147,   101,     7,     7,
   147,     7,  1035,   143,   139,   139,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   146,   139,     6,  1056,   138,     4,   140,  1060,     6,  1062,
     6,   142,     6,     6,   141,     7,     6,   127,    49,  1072,
     7,     7,     7,   146,  1077,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    51,     7,   853,     7,
   138,     7,     7,     7,     7,     7,     7,     7,     7,     4,
  1102,   146,     6,  1106,   146,  1108,   139,  1110,     6,     6,
    49,     6,     6,     6,     4,     7,  1119,   139,     7,     7,
     7,     7,  1125,  1126,     6,     4,     6,   146,   140,   140,
   143,  1134,     6,     5,     7,     6,   146,     6,   146,  1142,
     6,   146,   681,   682,     6,   684,     6,   686,   687,     6,
     6,   690,   691,   146,     7,   920,     6,   922,    92,  1162,
   146,   146,     5,     5,     4,     6,   143,     6,  1229,  1172,
     6,   142,  1175,     6,     6,  1178,     5,   145,     6,  1182,
     6,     6,     6,     6,     6,     6,  1189,     6,     6,  1192,
   955,     6,   957,     6,   959,     6,  1257,     6,  1259,     6,
     6,     6,   741,   742,   743,     6,     6,     6,   146,     4,
     6,   143,     6,     3,     4,     7,  1277,     6,     6,     9,
    10,    11,     5,   146,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,     6,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     6,     6,   147,   146,   138,   146,     7,     6,   146,   808,
   146,    91,     6,     6,     6,   814,   140,    94,     6,     6,
     6,     6,     6,     6,   823,   824,   825,   146,     6,   828,
   829,   830,   831,   832,   833,   834,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   849,     5,   147,     6,   138,   146,     6,    61,   145,     6,
     6,     6,   112,   113,   114,   115,     6,     6,     5,   799,
     6,   147,   871,     6,   146,     6,   146,     6,   146,   129,
   130,  1106,   146,  1108,   134,  1110,     6,   145,     6,   139,
     5,     3,     4,   146,   144,   146,   146,     9,    10,    11,
   146,   900,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,   146,   146,     6,     6,   147,     6,     6,
     6,    43,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,     6,     6,     6,     6,
   138,     6,     6,    65,    66,    67,    68,    69,    70,     0,
     0,   585,  1162,    75,    76,     2,     2,    -1,   905,    -1,
    -1,    -1,    -1,   972,    -1,    -1,   975,    -1,    -1,    -1,
    -1,    -1,     6,    -1,   983,    -1,    -1,    -1,    -1,   101,
    -1,   990,    -1,    -1,    -1,   994,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,    -1,   129,   130,    -1,
    -1,    -1,   134,    -1,    -1,    -1,    -1,   139,    -1,    -1,
    -1,    -1,   144,    -1,   146,    -1,    -1,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,  1053,     3,     4,   138,    -1,    -1,
    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,  1114,    -1,    65,    66,    67,
    68,    69,    70,     6,    -1,    -1,    -1,    75,    76,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,   101,     6,  1154,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,   113,   114,   115,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,   129,   130,    -1,    -1,    -1,   134,    -1,    -1,    -1,
    -1,   139,    -1,    -1,     3,     4,   144,     6,   146,    -1,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    65,    66,    67,    68,
    69,    70,     8,    -1,    -1,    -1,    75,    76,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   112,   113,   114,   115,   138,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   129,   130,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
   139,    -1,     3,     4,    -1,   144,    -1,   146,     9,    10,
    11,    -1,    -1,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,    65,    66,    67,    68,    69,    70,
     8,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,     6,    -1,    -1,    -1,
   138,   112,   113,   114,   115,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,   139,    -1,
     3,     4,    -1,   144,    -1,   146,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,    65,    66,    67,    68,    69,    70,     8,    -1,
    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
   113,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,
    -1,   134,    -1,    -1,    -1,    -1,   139,    -1,     3,     4,
    -1,   144,    -1,   146,     9,    10,    11,    -1,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
    65,    66,    67,    68,    69,    70,     3,     4,    -1,    -1,
    75,    76,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
   115,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,    -1,   134,
    -1,    -1,    -1,    -1,   139,    -1,     3,     4,    -1,   144,
    -1,   146,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   129,   130,    -1,    -1,    -1,   134,    -1,    -1,
    -1,    -1,   139,    -1,    -1,   142,     6,   144,    -1,   146,
    -1,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   112,   113,   114,   115,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   129,   130,    -1,    -1,    -1,   134,    -1,    -1,
    -1,    -1,   139,    -1,    -1,   142,    -1,   144,    -1,   146,
     3,     4,     5,    -1,     7,    -1,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,     6,    36,    37,    38,    39,    -1,    -1,    42,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,     3,     4,   138,    -1,
    -1,    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
   113,   114,   115,   116,   117,   118,   119,    -1,    65,    66,
    67,    68,    69,    70,    -1,    -1,   129,   130,    75,    76,
    -1,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
   143,   144,    -1,    -1,    -1,     8,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,   112,   113,   114,   115,    -1,
    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   129,   130,    -1,    -1,    -1,   134,     3,     4,
     5,    -1,   139,    -1,     9,    10,    11,   144,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    39,     3,     4,    42,    -1,    -1,
    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   112,   113,   114,
   115,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,    -1,   134,
    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,   144,
    -1,    -1,    -1,    -1,   112,   113,   114,   115,    12,    13,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   129,   130,    -1,    -1,    -1,   134,    -1,    -1,    -1,
    -1,   139,    12,    13,    -1,    -1,   144,    -1,    -1,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
    54,    -1,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    77,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,    -1,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,   102,   103,
   104,    -1,   106,    -1,    -1,   109,    -1,    -1,    88,    89,
    90,    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   102,   103,   104,    -1,   106,    -1,    -1,   109,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    12,    13,    -1,
    -1,    -1,    -1,   147,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,
    59,    60,    -1,    -1,    -1,    -1,    -1,   147,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    77,    54,
    -1,    56,    57,    -1,    59,    60,    -1,    -1,    -1,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    77,   102,   103,   104,    -1,   106,    -1,    -1,
   109,    -1,    -1,    88,    89,    90,    -1,    -1,    12,    13,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
    -1,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,   147,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
    54,    -1,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
    -1,    -1,   147,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    77,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,    -1,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,   102,   103,
   104,     8,   106,    -1,    -1,   109,    -1,    -1,    88,    89,
    90,    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   102,   103,   104,    -1,   106,    -1,    -1,   109,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   147,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,
    59,    60,    -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   102,   103,   104,    -1,   106,    -1,    -1,
   109,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,     0,     1,
    -1,   138,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    35,    -1,    -1,    -1,   138,    40,    41,
    -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
    72,    73,    74,    75,    76,    77,    -1,    -1,    80,    81,
    -1,     4,    -1,    -1,    -1,    87,    88,    89,    90,    12,
    13,    93,    -1,    95,    -1,    97,    98,    99,   100,    -1,
   102,   103,   104,    -1,   106,   107,   108,   109,   110,   111,
    -1,    -1,    35,    -1,    -1,    -1,    -1,    40,    41,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
    73,    74,    75,    76,    77,    -1,    -1,    80,    81,    12,
    13,    -1,    -1,    -1,    87,    88,    89,    90,    -1,    -1,
    93,    -1,    95,    -1,    97,    98,    99,   100,    -1,   102,
   103,   104,    -1,   106,   107,   108,   109,   110,   111,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    -1,    56,    57,    -1,    59,    60,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    77,    -1,   138,    -1,   140,    -1,
    -1,    -1,    -1,   145,    -1,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
   103,   104,    -1,   106,    -1,    -1,   109,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,    -1,   147,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,    -1,   147,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
   147,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   147,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   147,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   147,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   147,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   147,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   147,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   147,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   147,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   147,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
    -1,    -1,   142,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,   142,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,   142,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,    -1,    -1,   142,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
   142,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,   142,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,    -1,    -1,   142,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
    -1,    -1,   142,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,   142,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,   142,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,    -1,    -1,   142,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
   142,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,   142,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,    -1,    -1,   142,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
    -1,    -1,   142,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,   142,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,
    -1,   142,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,    -1,    -1,   142,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
   142,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,    -1,   142,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,    -1,    -1,   142,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
   140,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,   140,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,   140,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,   140,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
   140,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,   140,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,   140,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,   140,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
   140,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,   140,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,   140,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,   140,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
   140,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,   140,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,   140,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,   140,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
   140,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,   140,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,   140,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,   140,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,   140,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,    -1,
   140,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,   138,
    -1,   140,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
   138,    -1,   140,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
    -1,   138,    -1,   140
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 146 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 161 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 165 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 14:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 170 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 175 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 20:
#line 179 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 21:
#line 186 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 22:
#line 191 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 23:
#line 206 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 24:
#line 219 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 25:
#line 248 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 26:
#line 255 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 27:
#line 262 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 28:
#line 267 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
    ;
    break;}
case 29:
#line 275 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 36:
#line 291 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 293 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 38:
#line 298 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 300 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 40:
#line 305 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 41:
#line 495 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
 	  // yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
	  //       ViewCoordIdx, 3 * ViewNumNodes);
	  ViewNumNodes = ViewCoordIdx/3;
	}
	for(int i = 0; i < 3; i++)
	  for(int j = 0; j < ViewNumNodes; j++)
	    List_Add(ViewValueList, &ViewCoord[3*j+i]);
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 42:
#line 509 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewCoordIdx/3)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 43:
#line 520 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 525 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 45:
#line 533 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 46:
#line 540 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 47:
#line 547 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 552 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 49:
#line 560 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 50:
#line 567 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 51:
#line 575 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 52:
#line 583 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-11].l, yyvsp[-8].l, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 53:
#line 590 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 54:
#line 594 "Gmsh.y"
{
    ;
    break;}
case 55:
#line 599 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 56:
#line 607 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 57:
#line 608 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 58:
#line 609 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 59:
#line 610 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 60:
#line 611 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 61:
#line 615 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 62:
#line 616 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 63:
#line 624 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 64:
#line 655 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 65:
#line 694 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 748 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 67:
#line 765 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 68:
#line 783 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 69:
#line 794 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 70:
#line 811 "Gmsh.y"
{ 
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 71:
#line 818 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 72:
#line 832 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 73:
#line 849 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 74:
#line 875 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 902 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 76:
#line 916 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 77:
#line 933 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 78:
#line 947 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 964 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 80:
#line 984 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 81:
#line 1007 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 82:
#line 1017 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 83:
#line 1032 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 84:
#line 1036 "Gmsh.y"
{ 
      yyval.i = GModel::current()->setPhysicalName(std::string(yyvsp[0].c),
					      ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 85:
#line 1049 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if(!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X, v->Pos.Y, v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1071 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 87:
#line 1087 "Gmsh.y"
{
      AttractorField *att = new AttractorField();
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
        double d;
        List_Read(yyvsp[-1].l, i, &d);
        Vertex *v = FindPoint((int)d); 
        if(v)
          att->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
        else{
          GVertex *gv = GModel::current()->vertexByTag((int)d);
          if(gv) 
            att->addPoint(gv->x(), gv->y(), gv->z());
        }
      }
      att->buildFastSearchStructures();
      fields.insert(att, (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1108 "Gmsh.y"
{
      fields.insert(new LatLonField(fields.get((int)yyvsp[-1].d)), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 89:
#line 1115 "Gmsh.y"
{
      Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-1].d);
      if(vv) 
        fields.insert(new PostViewField(*vv), (int)yyvsp[-4].d);
      else
        yymsg(GERROR, "Field %i error, view %i does not exist",(int)yyvsp[-4].d,(int)yyvsp[-1].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 90:
#line 1126 "Gmsh.y"
{
      double pars[] = {0, CTX.lc/10, CTX.lc, CTX.lc/100, CTX.lc/20};
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4)
	  yymsg(GERROR, "Too many parameters for Thresold Field (max=5)");
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      fields.insert(new ThresholdField(fields.get((int)pars[0]), pars[1], 
				       pars[2], pars[3], pars[4]), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 91:
#line 1141 "Gmsh.y"
{
      std::list<Field*> *flist = new std::list<Field*>;
      fields.insert(new FunctionField(flist,yyvsp[-1].c), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 92:
#line 1149 "Gmsh.y"
{
      std::list<Field*> *flist = new std::list<Field*>;
      flist->resize(0);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
	Field *pfield = fields.get((int)id);
	if(pfield) flist->push_front(pfield);
      }
      fields.insert(new FunctionField(flist,yyvsp[-2].c), (int)yyvsp[-5].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 93:
#line 1164 "Gmsh.y"
{
      fields.insert(new StructuredField(yyvsp[-1].c), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 94:
#line 1171 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
        BGMAddField(fields.get((int)id));
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 95:
#line 1183 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 1, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *attractor = new AttractorField();
      fields.insert(attractor);
      Field *threshold = new ThresholdField(attractor, pars[0], pars[0] * pars[4], 
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  attractor->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
	else{
	  GVertex *gv = GModel::current()->vertexByTag((int)d);
	  if(gv) 
	    attractor->addPoint(gv->x(), gv->y(), gv->z());
	}
      }
      attractor->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 96:
#line 1217 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *att = new AttractorField();
      fields.insert(att);
      Field *threshold = new ThresholdField(att, pars[0], pars[0] * pars[4],
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  att->addCurve(c, (int)pars[3]);
	}
	else{
	  GEdge *ge = GModel::current()->edgeByTag((int)d);
	  if(ge){
	    att->addGEdge(ge, (int)pars[3]);
	  }
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 97:
#line 1253 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GModel::current()->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 98:
#line 1275 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1293 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1311 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1329 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1355 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1373 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1400 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1419 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1437 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1455 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1481 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1498 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 110:
#line 1517 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 111:
#line 1535 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 112:
#line 1573 "Gmsh.y"
{
      myGmshSurface = 0;
    ;
    break;}
case 113:
#line 1577 "Gmsh.y"
{
      myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
    ;
    break;}
case 114:
#line 1581 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d, type = 0;
      myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
    ;
    break;}
case 115:
#line 1586 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 116:
#line 1608 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 117:
#line 1630 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1646 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 119:
#line 1666 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 120:
#line 1683 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 121:
#line 1700 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 122:
#line 1721 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 123:
#line 1726 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 124:
#line 1731 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 125:
#line 1736 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 126:
#line 1741 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 127:
#line 1752 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(Shape));
      IntersectCurvesWithSurface(yyvsp[-5].l, (int)yyvsp[-1].d, yyval.l);
      List_Delete(yyvsp[-5].l);
    ;
    break;}
case 128:
#line 1758 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(Shape));
      BoundaryShapes(yyvsp[-1].l, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 129:
#line 1766 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 130:
#line 1767 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 131:
#line 1772 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 132:
#line 1776 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 133:
#line 1780 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(v){
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GVertex *gv = GModel::current()->vertexByTag(TheShape.Num);
	  if(gv){
	    TheShape.Type = MSH_POINT_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown point %d", TheShape.Num);
	}
      }
    ;
    break;}
case 134:
#line 1803 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(c){
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GEdge *ge = GModel::current()->edgeByTag(TheShape.Num);
	  if(ge){
	    TheShape.Type = MSH_SEGM_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	}
      }
    ;
    break;}
case 135:
#line 1826 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(s){
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GFace *gf = GModel::current()->faceByTag(TheShape.Num);
	  if(gf){
	    TheShape.Type = MSH_SURF_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	}
      }
    ;
    break;}
case 136:
#line 1849 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(v){
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GRegion *gr = GModel::current()->regionByTag(TheShape.Num);
	  if(gr){
	    TheShape.Type = MSH_VOLUME_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	}
      }
    ;
    break;}
case 137:
#line 1877 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 138:
#line 1886 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 139:
#line 1896 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GModel::current()->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GModel::current()->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1912 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1931 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 142:
#line 1945 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 143:
#line 1951 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 144:
#line 1957 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 145:
#line 1966 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 146:
#line 1980 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GModel::current()->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GModel::current()->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 147:
#line 2030 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 148:
#line 2045 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) {
    Field *field=new PostViewField(*vv);
    fields.insert(field);
    BGMAddField(field);
  }
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 149:
#line 2060 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 150:
#line 2080 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 151:
#line 2090 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 152:
#line 2112 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 153:
#line 2116 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 154:
#line 2121 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 155:
#line 2126 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 156:
#line 2138 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 157:
#line 2153 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 158:
#line 2169 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 159:
#line 2195 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 160:
#line 2222 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 161:
#line 2254 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 162:
#line 2261 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 163:
#line 2266 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 164:
#line 2272 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 165:
#line 2276 "Gmsh.y"
{
    ;
    break;}
case 166:
#line 2285 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 167:
#line 2293 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 168:
#line 2301 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 169:
#line 2309 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 170:
#line 2313 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 171:
#line 2321 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 172:
#line 2325 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 173:
#line 2333 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 174:
#line 2337 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 175:
#line 2345 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 176:
#line 2349 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 177:
#line 2356 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 178:
#line 2360 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      extr.mesh.ViewIndex = (int)yyvsp[-6].d;
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      extr.mesh.ViewIndex = -1;
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 179:
#line 2372 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 180:
#line 2379 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 181:
#line 2386 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 182:
#line 2393 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 183:
#line 2400 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 184:
#line 2407 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 185:
#line 2414 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 186:
#line 2421 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 187:
#line 2428 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 188:
#line 2435 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 189:
#line 2439 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 190:
#line 2446 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 191:
#line 2450 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 192:
#line 2457 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 193:
#line 2461 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 194:
#line 2468 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 195:
#line 2472 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 196:
#line 2479 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 197:
#line 2483 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 198:
#line 2490 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 199:
#line 2494 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 200:
#line 2501 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 201:
#line 2505 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 202:
#line 2512 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 203:
#line 2516 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 204:
#line 2523 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 205:
#line 2527 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 206:
#line 2538 "Gmsh.y"
{
    ;
    break;}
case 207:
#line 2541 "Gmsh.y"
{
    ;
    break;}
case 208:
#line 2547 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 209:
#line 2556 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 210:
#line 2578 "Gmsh.y"
{
      yymsg(GERROR, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 211:
#line 2602 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 212:
#line 2606 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	Tree_Add(THEM->Surfaces, &s);
	extr.mesh.Holes[num].first = yyvsp[-1].d;
	extr.mesh.Holes[num].second.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	  double d;
	  List_Read(yyvsp[-3].l, i, &d);
	  extr.mesh.Holes[num].second.push_back((int)d);
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 213:
#line 2630 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 214:
#line 2648 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 215:
#line 2666 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 216:
#line 2684 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 2713 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 218:
#line 2748 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 219:
#line 2753 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 220:
#line 2780 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 221:
#line 2794 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 2813 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 223:
#line 2819 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 224:
#line 2825 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 2828 "Gmsh.y"
{
    ;
    break;}
case 226:
#line 2837 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 227:
#line 2846 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 228:
#line 2847 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 229:
#line 2848 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 230:
#line 2849 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 231:
#line 2850 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 232:
#line 2851 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 233:
#line 2852 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 234:
#line 2853 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 235:
#line 2855 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 236:
#line 2861 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 237:
#line 2862 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 238:
#line 2863 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 239:
#line 2864 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 240:
#line 2865 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 241:
#line 2866 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 242:
#line 2867 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 243:
#line 2868 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 244:
#line 2869 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 245:
#line 2870 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 246:
#line 2871 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 247:
#line 2872 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 248:
#line 2873 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 249:
#line 2874 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 250:
#line 2875 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 251:
#line 2876 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 252:
#line 2877 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2878 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2879 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2880 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2881 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2882 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 258:
#line 2883 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2884 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2885 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2886 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2887 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 263:
#line 2888 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2889 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 265:
#line 2890 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 266:
#line 2891 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 267:
#line 2892 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 268:
#line 2894 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2895 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2896 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 271:
#line 2897 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2898 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2899 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2900 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 275:
#line 2901 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2902 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 277:
#line 2903 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2904 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 279:
#line 2905 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2906 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2907 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2908 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 283:
#line 2909 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 284:
#line 2910 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 285:
#line 2911 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 286:
#line 2912 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 287:
#line 2913 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 288:
#line 2914 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 289:
#line 2923 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 290:
#line 2924 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 291:
#line 2925 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 292:
#line 2926 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 293:
#line 2927 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 294:
#line 2928 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 295:
#line 2929 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 296:
#line 2934 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 297:
#line 2950 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 298:
#line 2965 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 299:
#line 2985 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 300:
#line 2999 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 301:
#line 3012 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 302:
#line 3035 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 303:
#line 3053 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 304:
#line 3071 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 305:
#line 3089 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 306:
#line 3107 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 307:
#line 3115 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 308:
#line 3119 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 309:
#line 3123 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 310:
#line 3127 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 311:
#line 3131 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 312:
#line 3138 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 313:
#line 3142 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 314:
#line 3146 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 315:
#line 3150 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 316:
#line 3157 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 317:
#line 3162 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 318:
#line 3170 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 319:
#line 3175 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 320:
#line 3179 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 321:
#line 3184 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 322:
#line 3188 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 323:
#line 3196 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-4].d;
      }
    ;
    break;}
case 324:
#line 3207 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 325:
#line 3215 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-2].d;
      }
    ;
    break;}
case 326:
#line 3223 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 327:
#line 3229 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 328:
#line 3240 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int)yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 329:
#line 3260 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 330:
#line 3270 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 331:
#line 3280 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 332:
#line 3297 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 333:
#line 3324 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 334:
#line 3329 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 335:
#line 3333 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 336:
#line 3337 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 337:
#line 3350 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 338:
#line 3354 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 339:
#line 3366 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 340:
#line 3373 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 341:
#line 3395 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 342:
#line 3399 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 343:
#line 3414 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 344:
#line 3419 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 345:
#line 3426 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 346:
#line 3430 "Gmsh.y"
{
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 347:
#line 3437 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 348:
#line 3441 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 349:
#line 3449 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 350:
#line 3457 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 351:
#line 3471 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 352:
#line 3485 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 353:
#line 3489 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 354:
#line 3508 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 355:
#line 3530 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3553 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
