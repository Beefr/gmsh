
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tRand	274
#define	tAtan	275
#define	tAtan2	276
#define	tSinh	277
#define	tCosh	278
#define	tTanh	279
#define	tFabs	280
#define	tFloor	281
#define	tCeil	282
#define	tFmod	283
#define	tModulo	284
#define	tHypot	285
#define	tPrintf	286
#define	tSprintf	287
#define	tDraw	288
#define	tPoint	289
#define	tCircle	290
#define	tEllipsis	291
#define	tLine	292
#define	tSurface	293
#define	tSpline	294
#define	tVolume	295
#define	tCharacteristic	296
#define	tLength	297
#define	tParametric	298
#define	tElliptic	299
#define	tPlane	300
#define	tRuled	301
#define	tTransfinite	302
#define	tComplex	303
#define	tPhysical	304
#define	tUsing	305
#define	tBump	306
#define	tProgression	307
#define	tRotate	308
#define	tTranslate	309
#define	tSymmetry	310
#define	tDilate	311
#define	tExtrude	312
#define	tDuplicata	313
#define	tLoop	314
#define	tRecombine	315
#define	tDelete	316
#define	tCoherence	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tMerge	346
#define	tReturn	347
#define	tCall	348
#define	tFunction	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.44 2000-12-11 16:23:14 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Mesh      *THEM;
extern Post_View *ActualView;
extern char       ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void yyerror (char *s);
void vyyerror (char *fmt, ...);
void skip_until (char *until);


#line 64 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1567
#define	YYFLAG		-32768
#define	YYNTBASE	181

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 259)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   168,     2,     2,     2,   166,     2,     2,   173,
   174,   164,   162,   178,   163,   177,   165,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   158,
     2,   160,   152,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   175,     2,   176,   172,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   179,     2,   180,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   153,   154,   155,   156,
   157,   159,   161,   167,   169,   170,   171
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   523,   529,   537,   544,   553,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   590,   592,   596,   597,   611,   613,   617,   618,
   632,   634,   638,   639,   653,   655,   659,   660,   680,   682,
   686,   687,   707,   709,   713,   714,   734,   736,   740,   741,
   767,   769,   773,   774,   800,   802,   806,   807,   833,   835,
   839,   840,   872,   874,   878,   879,   911,   913,   917,   918,
   950,   955,   963,   967,   974,   978,   985,   990,   998,  1003,
  1011,  1016,  1024,  1029,  1037,  1044,  1056,  1063,  1075,  1082,
  1094,  1101,  1113,  1120,  1132,  1139,  1151,  1157,  1169,  1175,
  1187,  1194,  1206,  1213,  1225,  1232,  1244,  1253,  1265,  1273,
  1282,  1295,  1302,  1308,  1316,  1324,  1337,  1345,  1355,  1373,
  1381,  1390,  1399,  1407,  1419,  1425,  1434,  1444,  1453,  1476,
  1497,  1506,  1515,  1521,  1530,  1538,  1547,  1553,  1565,  1571,
  1581,  1583,  1585,  1587,  1588,  1591,  1596,  1601,  1605,  1609,
  1612,  1615,  1622,  1631,  1640,  1651,  1653,  1655,  1659,  1662,
  1667,  1669,  1678,  1691,  1700,  1713,  1722,  1735,  1747,  1763,
  1765,  1768,  1778,  1781,  1788,  1798,  1808,  1817,  1826,  1835,
  1842,  1847,  1850,  1852,  1854,  1856,  1858,  1860,  1862,  1866,
  1869,  1872,  1875,  1879,  1883,  1887,  1891,  1895,  1899,  1903,
  1907,  1911,  1915,  1919,  1923,  1927,  1931,  1937,  1942,  1947,
  1952,  1957,  1962,  1967,  1972,  1977,  1982,  1987,  1994,  1999,
  2004,  2009,  2014,  2019,  2024,  2031,  2038,  2045,  2050,  2052,
  2054,  2056,  2061,  2064,  2070,  2073,  2079,  2083,  2092,  2097,
  2107,  2112,  2122,  2126,  2132,  2134,  2137,  2140,  2144,  2148,
  2160,  2170,  2178,  2186,  2190,  2199,  2200,  2204,  2206,  2210,
  2211,  2215,  2219,  2221,  2225,  2226,  2228,  2232,  2236,  2238,
  2240,  2244,  2248,  2252,  2258,  2268,  2276,  2282,  2284,  2290,
  2294,  2303,  2305,  2309,  2311,  2316
};

static const short yyrhs[] = {   183,
     0,   182,     0,   188,     0,   139,     0,   142,   143,   244,
   244,   244,   144,   145,   141,   244,   244,   244,   141,   244,
   244,   244,   141,   244,   244,   244,   146,   147,     0,   140,
     0,     0,   183,   184,     0,   185,     0,   187,     0,   186,
     0,     1,     6,     0,   113,     6,     0,   114,     6,     0,
   116,     6,     0,   115,     6,     0,   117,     6,     0,   118,
   173,   249,   178,     5,   174,     6,     0,   119,   173,   249,
   174,     6,     0,   120,   173,     5,   178,     5,   178,   249,
   178,   249,   178,     5,   178,     5,   178,     5,   174,     6,
     0,     3,     7,    97,   173,     5,   178,   247,   174,     6,
     0,     3,     7,    96,   173,     5,   178,   244,   178,   253,
   178,   243,   178,   243,   178,   243,   178,   253,   178,   253,
   178,   243,   174,     6,     0,     3,     7,    95,   173,     5,
   178,   244,   178,   244,   178,   251,   178,   243,   178,   243,
   178,   243,   178,   243,   178,   253,   178,   253,   178,   253,
   178,   253,   178,   243,   174,     6,     0,     3,     7,   103,
   173,     5,   178,     3,   178,     3,   178,     3,   178,   243,
   174,     6,     0,     3,     7,   107,   173,     5,   178,     3,
   178,   243,   174,     6,     0,     3,     7,   124,   173,     5,
   178,     3,   178,   243,   174,     6,     0,     3,     7,   105,
   173,     5,   178,   164,   178,   164,   178,   244,   178,   243,
   174,     6,     0,     3,     7,   108,   173,     5,   178,   253,
   174,     6,     0,     3,     7,   109,   173,     5,   178,   253,
   178,     3,   178,   243,   174,     6,     0,     3,     7,   104,
   173,     5,   178,     3,   174,     6,     0,     3,     7,   110,
   173,     5,   178,     3,   178,   244,   174,     6,     0,     3,
     7,   112,   173,     5,   178,     3,   178,     3,   178,     3,
   174,     6,     0,     3,     7,   111,   173,     5,   178,   247,
   174,     6,     0,     3,     7,   106,   173,     5,   178,     3,
   174,     6,     0,     3,     7,    37,   173,     5,   178,     3,
   178,     3,   174,     6,     0,     3,     7,   122,   173,     5,
   178,   253,   174,     6,     0,     3,     7,   123,   173,     5,
   178,   253,   178,     3,   174,     6,     0,     3,     7,   121,
   173,     5,   178,     3,   174,     6,     0,     3,     7,   125,
   173,     5,   178,     3,   178,   244,   174,     6,     0,     3,
     7,   126,   173,     5,   178,     3,   178,   244,   178,   244,
   174,     6,     0,     3,     7,   133,   173,     5,   178,     3,
   178,   244,   178,   244,   174,     6,     0,     3,     7,   127,
   173,     5,   178,     3,   178,   244,   174,     6,     0,     3,
     7,   137,   173,     5,   178,     3,   178,   244,   178,   244,
   174,     6,     0,     3,     7,   128,   173,     5,   178,     3,
   178,   253,   178,   253,   178,   243,   178,   243,   174,     6,
     0,     3,     7,   129,   173,     5,   178,   253,   174,     6,
     0,     3,     7,   130,   173,   131,   178,   243,   178,     3,
   174,     6,     0,     3,     7,   132,   173,     5,   178,   253,
   178,   243,   174,     6,     0,     3,     7,   134,   173,     5,
   178,     5,   178,     3,   178,     3,   174,     6,     0,     3,
     7,   135,   173,     5,   178,     5,   178,     3,   174,     6,
     0,     3,     7,   136,   173,     3,   178,     3,   174,     6,
     0,     0,   188,   189,     0,   191,     0,   190,     0,   229,
     0,   230,     0,   231,     0,   234,     0,   235,     0,   238,
     0,   241,     0,   242,     0,   237,     0,   236,     0,     1,
     6,     0,    31,   173,     5,   174,     6,     0,    31,   173,
     5,   178,   244,   174,     6,     0,    63,     5,   179,   192,
   180,     6,     0,    63,     5,     4,   247,   179,   192,   180,
     6,     0,     0,   192,   194,     0,   192,   197,     0,   192,
   200,     0,   192,   203,     0,   192,   206,     0,   192,   209,
     0,   192,   212,     0,   192,   215,     0,   192,   218,     0,
   192,   221,     0,   192,   224,     0,   192,   227,     0,   244,
     0,   193,   178,   244,     0,     0,    75,   173,   244,   178,
   244,   178,   244,   174,   195,   179,   193,   180,     6,     0,
   244,     0,   196,   178,   244,     0,     0,    76,   173,   244,
   178,   244,   178,   244,   174,   198,   179,   196,   180,     6,
     0,   244,     0,   199,   178,   244,     0,     0,    77,   173,
   244,   178,   244,   178,   244,   174,   201,   179,   199,   180,
     6,     0,   244,     0,   202,   178,   244,     0,     0,    72,
   173,   244,   178,   244,   178,   244,   178,   244,   178,   244,
   178,   244,   174,   204,   179,   202,   180,     6,     0,   244,
     0,   205,   178,   244,     0,     0,    73,   173,   244,   178,
   244,   178,   244,   178,   244,   178,   244,   178,   244,   174,
   207,   179,   205,   180,     6,     0,   244,     0,   208,   178,
   244,     0,     0,    74,   173,   244,   178,   244,   178,   244,
   178,   244,   178,   244,   178,   244,   174,   210,   179,   208,
   180,     6,     0,   244,     0,   211,   178,   244,     0,     0,
    69,   173,   244,   178,   244,   178,   244,   178,   244,   178,
   244,   178,   244,   178,   244,   178,   244,   178,   244,   174,
   213,   179,   211,   180,     6,     0,   244,     0,   214,   178,
   244,     0,     0,    70,   173,   244,   178,   244,   178,   244,
   178,   244,   178,   244,   178,   244,   178,   244,   178,   244,
   178,   244,   174,   216,   179,   214,   180,     6,     0,   244,
     0,   217,   178,   244,     0,     0,    71,   173,   244,   178,
   244,   178,   244,   178,   244,   178,   244,   178,   244,   178,
   244,   178,   244,   178,   244,   174,   219,   179,   217,   180,
     6,     0,   244,     0,   220,   178,   244,     0,     0,    66,
   173,   244,   178,   244,   178,   244,   178,   244,   178,   244,
   178,   244,   178,   244,   178,   244,   178,   244,   178,   244,
   178,   244,   178,   244,   174,   222,   179,   220,   180,     6,
     0,   244,     0,   223,   178,   244,     0,     0,    67,   173,
   244,   178,   244,   178,   244,   178,   244,   178,   244,   178,
   244,   178,   244,   178,   244,   178,   244,   178,   244,   178,
   244,   178,   244,   174,   225,   179,   223,   180,     6,     0,
   244,     0,   226,   178,   244,     0,     0,    68,   173,   244,
   178,   244,   178,   244,   178,   244,   178,   244,   178,   244,
   178,   244,   178,   244,   178,   244,   178,   244,   178,   244,
   178,   244,   174,   228,   179,   226,   180,     6,     0,     4,
     7,   244,     6,     0,     4,   175,   244,   176,     7,   244,
     6,     0,     4,   169,     6,     0,     4,   175,   244,   176,
   169,     6,     0,     4,   170,     6,     0,     4,   175,   244,
   176,   170,     6,     0,     4,   148,   244,     6,     0,     4,
   175,   244,   176,   148,   244,     6,     0,     4,   149,   244,
     6,     0,     4,   175,   244,   176,   149,   244,     6,     0,
     4,   150,   244,     6,     0,     4,   175,   244,   176,   150,
   244,     6,     0,     4,   151,   244,     6,     0,     4,   175,
   244,   176,   151,   244,     6,     0,     4,   177,     4,     7,
     5,     6,     0,     4,   177,    63,   175,   244,   176,   177,
     4,     7,     5,     6,     0,     4,   177,     4,     7,   244,
     6,     0,     4,   177,    63,   175,   244,   176,   177,     4,
     7,   244,     6,     0,     4,   177,     4,   148,   244,     6,
     0,     4,   177,    63,   175,   244,   176,   177,     4,   148,
   244,     6,     0,     4,   177,     4,   149,   244,     6,     0,
     4,   177,    63,   175,   244,   176,   177,     4,   149,   244,
     6,     0,     4,   177,     4,   150,   244,     6,     0,     4,
   177,    63,   175,   244,   176,   177,     4,   150,   244,     6,
     0,     4,   177,     4,   151,   244,     6,     0,     4,   177,
    63,   175,   244,   176,   177,     4,   151,   244,     6,     0,
     4,   177,     4,   169,     6,     0,     4,   177,    63,   175,
   244,   176,   177,     4,   169,   244,     6,     0,     4,   177,
     4,   170,     6,     0,     4,   177,    63,   175,   244,   176,
   177,     4,   170,   244,     6,     0,     4,   177,     4,     7,
   247,     6,     0,     4,   177,    63,   175,   244,   176,   177,
     4,     7,   247,     6,     0,     4,   177,     4,   148,   247,
     6,     0,     4,   177,    63,   175,   244,   176,   177,     4,
   148,   247,     6,     0,     4,   177,     4,   149,   247,     6,
     0,     4,   177,    63,   175,   244,   176,   177,     4,   149,
   247,     6,     0,     4,   177,    84,   177,     4,     7,   255,
     6,     0,     4,   177,    63,   175,   244,   176,   177,    84,
     7,   256,     6,     0,    34,   173,   244,   174,     7,   247,
     6,     0,    49,    34,   173,   244,   174,     7,   253,     6,
     0,    64,    34,   253,     7,   179,   244,   178,   244,   178,
   244,   180,     6,     0,    41,    42,   253,     7,   244,     6,
     0,    34,   179,   244,   180,     6,     0,    37,   173,   244,
   174,     7,   253,     6,     0,    39,   173,   244,   174,     7,
   253,     6,     0,    64,    37,   253,     7,   179,   244,   178,
   244,   178,   244,   180,     6,     0,    35,   173,   244,   174,
     7,   253,     6,     0,    35,   173,   244,   174,     7,   253,
    45,   247,     6,     0,    43,   173,   244,   174,     7,   179,
   244,   178,   244,   178,     5,   178,     5,   178,     5,   180,
     6,     0,    36,   173,   244,   174,     7,   253,     6,     0,
    49,    37,   173,   244,   174,     7,   253,     6,     0,    37,
    59,   173,   244,   174,     7,   253,     6,     0,    78,   173,
   244,   174,     7,   253,     6,     0,    79,   173,   244,   174,
     7,   253,    83,   253,    80,   244,     6,     0,    37,   179,
   244,   180,     6,     0,    45,    38,   173,   244,   174,     7,
   253,     6,     0,   138,    38,   173,   244,   174,     7,   244,
   253,     6,     0,    46,    38,   173,   244,   174,     7,   253,
     6,     0,    79,    38,    81,    82,   173,   244,   174,     7,
   251,    83,   179,   253,   178,   253,   180,    80,   179,   244,
   178,   244,   180,     6,     0,    79,    38,   173,   244,   174,
     7,   251,    83,   179,   253,   178,   253,   180,    80,   179,
   244,   178,   244,   180,     6,     0,    49,    38,   173,   244,
   174,     7,   253,     6,     0,    38,    59,   173,   244,   174,
     7,   253,     6,     0,    38,   179,   244,   180,     6,     0,
    48,    40,   173,   244,   174,     7,   253,     6,     0,    40,
   173,   244,   174,     7,   253,     6,     0,    49,    40,   173,
   244,   174,     7,   253,     6,     0,    54,   247,   179,   232,
   180,     0,    53,   179,   247,   178,   247,   178,   244,   180,
   179,   232,   180,     0,    55,   247,   179,   232,   180,     0,
    56,   179,   247,   178,   244,   180,   179,   232,   180,     0,
   234,     0,   233,     0,   231,     0,     0,   233,   230,     0,
    58,   179,   233,   180,     0,    61,   179,   233,   180,     0,
     4,   258,     6,     0,     4,   244,     6,     0,    90,     6,
     0,    33,     6,     0,    85,   173,   244,     8,   244,   174,
     0,    85,   173,   244,     8,   244,     8,   244,   174,     0,
    85,     4,    86,   179,   244,     8,   244,   180,     0,    85,
     4,    86,   179,   244,     8,   244,     8,   244,   180,     0,
    87,     0,    92,     0,    93,     4,     6,     0,    94,     4,
     0,    88,   173,   244,   174,     0,    89,     0,    57,    34,
   179,   244,   178,   247,   180,     6,     0,    57,    34,   179,
   244,   178,   247,   178,   247,   178,   244,   180,     6,     0,
    57,    37,   179,   244,   178,   247,   180,     6,     0,    57,
    37,   179,   244,   178,   247,   178,   247,   178,   244,   180,
     6,     0,    57,    38,   179,   244,   178,   247,   180,     6,
     0,    57,    38,   179,   244,   178,   247,   178,   247,   178,
   244,   180,     6,     0,    57,    38,   179,   244,   178,   247,
   180,   179,   239,   180,     6,     0,    57,    38,   179,   244,
   178,   247,   178,   247,   178,   244,   180,   179,   239,   180,
     6,     0,   240,     0,   239,   240,     0,    65,   179,   253,
   178,   253,   178,   253,   180,     6,     0,    60,     6,     0,
    47,    37,   253,     7,   244,     6,     0,    47,    37,   253,
     7,   244,    50,    52,   244,     6,     0,    47,    37,   253,
     7,   244,    50,    51,   244,     6,     0,    47,    38,   179,
   244,   180,     7,   253,     6,     0,    44,    38,   179,   244,
   180,     7,   253,     6,     0,    47,    40,   179,   244,   180,
     7,   253,     6,     0,    60,    38,   253,     7,   244,     6,
     0,    60,    38,   253,     6,     0,    62,     6,     0,    98,
     0,    99,     0,   100,     0,   101,     0,   102,     0,   245,
     0,   173,   244,   174,     0,   163,   244,     0,   162,   244,
     0,   168,   244,     0,   244,   163,   244,     0,   244,   162,
   244,     0,   244,   164,   244,     0,   244,   165,   244,     0,
   244,   166,   244,     0,   244,   172,   244,     0,   244,   158,
   244,     0,   244,   160,   244,     0,   244,   159,   244,     0,
   244,   161,   244,     0,   244,   155,   244,     0,   244,   156,
   244,     0,   244,   154,   244,     0,   244,   153,   244,     0,
   244,   152,   244,     8,   244,     0,    10,   173,   244,   174,
     0,    11,   173,   244,   174,     0,    12,   173,   244,   174,
     0,    13,   173,   244,   174,     0,    14,   173,   244,   174,
     0,    15,   173,   244,   174,     0,    16,   173,   244,   174,
     0,    17,   173,   244,   174,     0,    18,   173,   244,   174,
     0,    20,   173,   244,   174,     0,    21,   173,   244,   178,
   244,   174,     0,    22,   173,   244,   174,     0,    23,   173,
   244,   174,     0,    24,   173,   244,   174,     0,    25,   173,
   244,   174,     0,    26,   173,   244,   174,     0,    27,   173,
   244,   174,     0,    28,   173,   244,   178,   244,   174,     0,
    29,   173,   244,   178,   244,   174,     0,    30,   173,   244,
   178,   244,   174,     0,    19,   173,   244,   174,     0,     3,
     0,     9,     0,     4,     0,     4,   175,   244,   176,     0,
     4,   169,     0,     4,   175,   244,   176,   169,     0,     4,
   170,     0,     4,   175,   244,   176,   170,     0,     4,   177,
     4,     0,     4,   177,    63,   175,   244,   176,   177,     4,
     0,     4,   177,     4,   169,     0,     4,   177,    63,   175,
   244,   176,   177,     4,   169,     0,     4,   177,     4,   170,
     0,     4,   177,    63,   175,   244,   176,   177,     4,   170,
     0,   244,     8,   244,     0,   244,     8,   244,     8,   244,
     0,   248,     0,   163,   247,     0,   162,   247,     0,   247,
   163,   247,     0,   247,   162,   247,     0,   179,   244,   178,
   244,   178,   244,   178,   244,   178,   244,   180,     0,   179,
   244,   178,   244,   178,   244,   178,   244,   180,     0,   179,
   244,   178,   244,   178,   244,   180,     0,   173,   244,   178,
   244,   178,   244,   174,     0,     4,   177,     4,     0,     4,
   177,    63,   175,   244,   176,   177,     4,     0,     0,   173,
   250,   174,     0,     5,     0,   250,   178,     5,     0,     0,
   179,   252,   180,     0,   173,   252,   174,     0,   253,     0,
   252,   178,   253,     0,     0,   244,     0,     4,   175,   176,
     0,   179,   254,   180,     0,   244,     0,   246,     0,     4,
   175,   176,     0,   254,   178,   244,     0,   254,   178,   246,
     0,   254,   178,     4,   175,   176,     0,   179,   244,   178,
   244,   178,   244,   178,   244,   180,     0,   179,   244,   178,
   244,   178,   244,   180,     0,   179,     4,   178,   244,   180,
     0,     4,     0,     4,   177,    84,   177,     4,     0,   179,
   257,   180,     0,     4,   177,    63,   175,   244,   176,   177,
    84,     0,   255,     0,   257,   178,   255,     0,     5,     0,
    32,   173,     5,   174,     0,    32,   173,     5,   178,   244,
   174,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   143,   145,   146,   153,   161,   175,   187,   189,   192,   194,
   195,   196,   199,   205,   210,   211,   212,   215,   219,   222,
   228,   233,   239,   247,   252,   256,   262,   267,   271,   276,
   280,   283,   288,   292,   296,   300,   305,   309,   312,   316,
   320,   324,   328,   332,   336,   339,   343,   346,   350,   353,
   362,   366,   372,   374,   375,   376,   377,   378,   379,   380,
   381,   382,   383,   385,   386,   389,   394,   404,   409,   415,
   420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
   430,   431,   434,   437,   441,   447,   453,   456,   460,   466,
   472,   475,   479,   485,   491,   494,   498,   506,   512,   515,
   519,   527,   533,   536,   540,   548,   554,   557,   561,   573,
   579,   582,   586,   598,   604,   607,   611,   623,   629,   632,
   636,   649,   655,   658,   662,   675,   681,   684,   688,   701,
   713,   729,   741,   750,   762,   770,   782,   790,   802,   810,
   822,   830,   842,   854,   873,   886,   904,   921,   942,   959,
   980,   997,  1018,  1035,  1056,  1077,  1103,  1120,  1141,  1158,
  1181,  1206,  1235,  1260,  1289,  1314,  1345,  1358,  1383,  1394,
  1400,  1419,  1430,  1438,  1444,  1450,  1469,  1475,  1491,  1498,
  1504,  1510,  1516,  1522,  1541,  1553,  1559,  1578,  1599,  1607,
  1613,  1619,  1625,  1637,  1643,  1649,  1661,  1667,  1672,  1677,
  1684,  1686,  1687,  1690,  1695,  1706,  1724,  1739,  1811,  1831,
  1835,  1854,  1870,  1884,  1909,  1934,  1960,  1965,  1970,  1977,
  1981,  1991,  1997,  2003,  2007,  2011,  2015,  2019,  2024,  2031,
  2035,  2040,  2058,  2068,  2086,  2103,  2120,  2141,  2161,  2181,
  2198,  2222,  2235,  2237,  2238,  2239,  2240,  2243,  2245,  2246,
  2247,  2248,  2249,  2250,  2251,  2252,  2259,  2260,  2261,  2262,
  2263,  2264,  2265,  2266,  2267,  2268,  2269,  2270,  2271,  2272,
  2273,  2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,  2282,
  2283,  2284,  2285,  2286,  2287,  2288,  2289,  2290,  2295,  2300,
  2304,  2316,  2334,  2346,  2364,  2376,  2396,  2417,  2441,  2462,
  2486,  2507,  2532,  2539,  2552,  2559,  2563,  2567,  2571,  2576,
  2581,  2585,  2589,  2593,  2625,  2662,  2666,  2671,  2675,  2680,
  2684,  2688,  2694,  2700,  2706,  2710,  2716,  2731,  2738,  2744,
  2753,  2765,  2769,  2777,  2790,  2795,  2799,  2804,  2809,  2828,
  2833,  2854,  2863,  2869,  2874,  2878
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tIn","tEndFor",
"tIf","tEndIf","tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Command","Loop","Extrude",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr",
"FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   181,   181,   181,   182,   182,   182,   183,   183,   184,   184,
   184,   184,   185,   185,   185,   185,   185,   186,   186,   186,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   190,   190,   191,   191,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   193,   195,   194,   196,   196,   198,   197,
   199,   199,   201,   200,   202,   202,   204,   203,   205,   205,
   207,   206,   208,   208,   210,   209,   211,   211,   213,   212,
   214,   214,   216,   215,   217,   217,   219,   218,   220,   220,
   222,   221,   223,   223,   225,   224,   226,   226,   228,   227,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   231,   231,   231,   231,
   232,   232,   232,   233,   233,   234,   235,   236,   236,   236,
   236,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   238,   238,   238,   238,   238,   238,   238,   238,   239,
   239,   240,   240,   241,   241,   241,   241,   241,   241,   241,
   241,   242,   243,   243,   243,   243,   243,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   246,   246,   247,   247,   247,   247,   247,   248,
   248,   248,   248,   248,   248,   249,   249,   250,   250,   251,
   251,   251,   252,   252,   253,   253,   253,   253,   254,   254,
   254,   254,   254,   254,   255,   255,   255,   255,   255,   256,
   256,   257,   257,   258,   258,   258
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     5,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     7,     3,     6,     3,     6,     4,     7,     4,     7,
     4,     7,     4,     7,     6,    11,     6,    11,     6,    11,
     6,    11,     6,    11,     6,    11,     5,    11,     5,    11,
     6,    11,     6,    11,     6,    11,     8,    11,     7,     8,
    12,     6,     5,     7,     7,    12,     7,     9,    17,     7,
     8,     8,     7,    11,     5,     8,     9,     8,    22,    20,
     8,     8,     5,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     4,     4,     3,     3,     2,
     2,     6,     8,     8,    10,     1,     1,     3,     2,     4,
     1,     8,    12,     8,    12,     8,    12,    11,    15,     1,
     2,     9,     2,     6,     9,     9,     8,     8,     8,     6,
     4,     2,     1,     1,     1,     1,     1,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     4,     2,     5,     2,     5,     3,     8,     4,     9,
     4,     9,     3,     5,     1,     2,     2,     3,     3,    11,
     9,     7,     7,     3,     8,     0,     3,     1,     3,     0,
     3,     3,     1,     3,     0,     1,     3,     3,     1,     1,
     3,     3,     3,     5,     9,     7,     5,     1,     5,     3,
     8,     1,     3,     1,     4,     6
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   216,     0,   221,     0,   217,     0,
     0,     0,    52,    54,    53,    55,    56,    57,    58,    59,
    64,    63,    60,    61,    62,   289,   291,   290,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   248,    12,     0,    13,    14,    16,
    15,    17,   316,   316,     0,    65,   344,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   325,     0,     0,     0,     0,   325,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   305,     0,     0,     0,     0,     0,   204,   325,
   204,   242,     0,   325,   325,     0,     0,     0,     0,     0,
     0,   210,     0,   219,     0,   293,   295,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   251,   250,   252,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   133,   135,     0,     0,     0,     0,   209,     0,     0,   208,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   291,     0,   326,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,   306,     0,     0,     0,     0,   204,   204,     0,     0,
     0,     0,     0,     0,     0,     0,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   218,     0,     0,   297,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   249,     0,   266,   265,   263,   264,   259,   261,
   260,   262,   251,   250,   255,   256,   257,   258,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   318,
     0,     0,     0,     0,   131,     0,   137,   139,   141,   143,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   254,   253,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   291,   329,   330,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   314,     0,     0,     0,   309,   308,
   203,     0,   202,   201,     0,     0,     0,     0,     0,   206,
   205,   241,     0,   207,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   220,     0,   292,   299,   301,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   288,
   277,     0,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   317,     0,     0,    19,     0,   345,     0,
     0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   157,   159,     0,     0,    66,     0,     0,   173,   325,   325,
     0,   325,   185,     0,   193,   325,   325,   327,     0,     0,
     0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   197,
   199,     0,     0,     0,     0,     0,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,     0,     0,   325,     0,     0,   325,     0,     0,
     0,   294,   296,     0,     0,     0,     0,     0,   267,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   325,
   325,     0,     0,     0,     0,   325,   325,     0,     0,     0,
     0,     0,   325,     0,   325,     0,     0,     0,     0,     0,
   319,     0,   316,     0,     0,     0,     0,     0,     0,   134,
   136,     0,   145,     0,   147,   161,   149,   163,   151,   165,
   153,   155,     0,     0,     0,     0,     0,     0,   325,     0,
   325,     0,     0,   331,   303,   291,   332,   333,   172,     0,
   325,   325,   325,   234,     0,   325,   325,   325,   325,   325,
   325,   325,     0,     0,     0,     0,     0,     0,     0,     0,
   240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    68,     0,     0,     0,     0,   320,
     0,     0,     0,   212,     0,     0,   278,   285,   286,   287,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   243,   244,   245,   246,   247,     0,
     0,     0,     0,     0,     0,     0,    18,     0,   346,   132,
   138,   140,   142,   144,   297,     0,     0,   338,     0,     0,
    67,   169,   177,     0,   180,     0,   174,     0,   175,   195,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   183,     0,   325,   325,     0,   325,     0,     0,   325,
     0,     0,     0,     0,   325,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   325,     0,     0,     0,     0,     0,     0,
     0,     0,   316,     0,     0,     0,     0,   291,     0,   167,
     0,   182,   192,   304,   334,     0,   238,   186,   188,     0,
     0,   237,   239,   194,   170,   181,   191,   196,     0,     0,
   313,     0,   312,     0,     0,   222,     0,   224,     0,   226,
     0,    69,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   320,     0,   323,     0,
     0,     0,     0,   214,   213,     0,   298,     0,     0,     0,
     0,    21,     0,    30,     0,    34,     0,    28,     0,     0,
    33,     0,    38,    36,     0,     0,     0,     0,     0,     0,
    45,     0,     0,     0,     0,     0,    50,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   178,     0,   236,   235,   204,   315,     0,   200,     0,
     0,     0,     0,     0,     0,   230,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   322,   325,   321,   325,     0,     0,   187,   300,   302,
     0,     0,   320,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   325,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   311,     0,     0,     0,   233,   325,
     0,   231,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   324,     0,     0,
   215,     0,    35,     0,     0,     0,     0,    25,     0,    31,
     0,    37,    26,    39,     0,    42,     0,    46,    47,     0,
     0,    49,     0,     0,     0,   146,   148,   162,   150,   164,
   152,   166,   154,   156,   158,   160,     0,   342,     0,   168,
   339,   337,     0,     0,   198,     0,     0,     0,     0,     0,
   228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   325,   325,   184,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   298,     0,     0,   340,     0,     0,   310,   223,   225,
   227,     0,   325,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    85,    89,    93,   171,   176,     0,     0,     0,
     0,     0,     0,     0,    29,    32,    40,     0,    41,    48,
    43,     0,     0,   343,     0,   336,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   325,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   325,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    24,    27,     0,     0,     0,   335,     0,   229,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    83,     0,    87,     0,    91,     0,     0,     0,     0,
   325,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    44,    20,   341,   179,
   232,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    84,    86,    88,    90,    92,    94,     0,     0,     0,     0,
   325,     0,     0,     0,     0,     0,     0,    97,   101,   105,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     5,   325,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   190,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    95,
     0,    99,     0,   103,     0,   325,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   189,
     0,    22,     0,     0,     0,     0,     0,     0,    96,    98,
   100,   102,   104,   106,   325,     0,     0,     0,   109,   113,
   117,     0,     0,     0,     0,     0,     0,     0,   325,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   107,     0,   111,     0,   115,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   110,   112,   114,   116,   118,     0,   121,   125,   129,    23,
     0,     0,     0,     0,     0,     0,     0,   119,     0,   123,
     0,   127,     0,     0,     0,     0,     0,     0,   120,   122,
   124,   126,   128,   130,     0,     0,     0
};

static const short yydefgoto[] = {  1565,
     4,     5,    18,    19,    20,    21,     6,    63,    64,    65,
   486,  1341,   641,  1289,  1343,   642,  1290,  1345,   643,  1291,
  1449,   644,  1422,  1451,   645,  1423,  1453,   646,  1424,  1510,
   647,  1496,  1512,   648,  1497,  1514,   649,  1498,  1547,   650,
  1541,  1549,   651,  1542,  1551,   652,  1543,    66,   481,   471,
   472,   473,   474,    70,    71,    72,    73,  1055,  1056,    74,
    75,   820,   295,   105,   449,   311,   163,   262,   411,   896,
   988,   989,   450,   840,  1118,  1189,   129
};

static const short yypact[] = {   432,
-32768,-32768,  -115,-32768,    44,  2780,  1830,    50,    52,   104,
   135,   144,   159,   164,   -73,   -52,    34,-32768,-32768,-32768,
-32768,   218,  1572,    59,   264,   -87,    82,   105,   -37,   -39,
   121,   129,     8,   138,   285,   286,   290,   272,   330,   370,
   202,    94,    94,   214,   357,   219,   295,   246,   369,   425,
   249,   261,   -30,     2,-32768,   265,-32768,   435,-32768,   451,
   460,   429,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   254,-32768,   302,   327,
   331,   338,   348,   359,   366,   367,   387,   389,   393,   394,
   395,   396,   400,   402,   403,   407,   418,   433,   434,  1830,
  1830,  1830,  1830,  1664,-32768,-32768,  2818,-32768,-32768,-32768,
-32768,-32768,   436,   436,   537,-32768,-32768,  1830,   443,  1830,
  1830,  1830,  1830,   590,   602,  1830,    17,  1029,   606,   538,
-32768,  1830,  1830,  1830,  1830,   444,  1830,  1830,   445,  1830,
  1830,  1830,   778,  1830,   440,   447,   448,   778,   446,   449,
   450,   453,   456,   457,   458,    94,   468,    94,    94,  1830,
  1830,  -133,-32768,  -100,    94,   469,   471,   472,-32768,   778,
-32768,-32768,    -2,   778,   778,  1830,   -68,  1830,   536,  1830,
  1830,-32768,   618,-32768,   479,-32768,-32768,  1830,    10,  1830,
  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,
   481,   481,   481,  5757,  1830,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1664,
   482,   487,   488,   489,   490,   494,   495,   496,   501,   502,
   525,   529,   530,   531,   554,   555,   556,   557,   558,   559,
   561,   563,   564,   565,   566,   568,   569,   570,   571,   572,
   651,   562,   576,   573,  1117,   747,  1162,  1368,  1552,  1599,
-32768,-32768,  5582,   111,   578,   577,-32768,  1830,  1830,-32768,
   -75,  5780,  2862,  5803,  5826,  1830,  5849,  2885,  1830,  2908,
  5872,  5895,   273,  1877,  7275,   748,  5918,  1830,  1830,  1830,
   761,  1830,  1830,  1830,  1830,  1830,  1830,  1830,   -96,    13,
-32768,-32768,  3341,  3362,    94,    94,   424,   424,   -93,  1830,
  1830,  1830,  2711,    31,  2728,    94,-32768,   762,   763,  5941,
   689,  1830,  5964,   593,  1311,  5987,-32768,  1830,  5607,   236,
   598,  6010,  6033,  6056,  6079,  6102,  6125,  6148,  6171,  6194,
  6217,  6240,  3383,  6263,  6286,  6309,  6332,  6355,  6378,  3404,
  3425,  3446,-32768,  2465,  1278,   423,   439,   439,   155,   155,
   155,   155,  -145,  -131,   481,   481,   481,   481,  2931,   769,
   772,   774,   775,   780,   781,   804,   805,   806,   807,   808,
   809,   810,   811,   812,   813,   814,   816,   817,   818,   819,
   820,   821,   652,   822,   823,   826,   828,   833,   832,-32768,
   -26,   834,   835,   837,-32768,    -6,-32768,-32768,-32768,-32768,
   115,   667,   984,   984,  1830,  1830,   841,   842,  1830,   839,
   281,   281,   843,  1830,   831,   846,   847,   848,  6401,   849,
   851,  6424,   854,   855,   859,   326,   282,  2499,-32768,  -103,
  1830,   860,  2946,  6447,  6470,  1830,  2969,  2992,  6493,  6516,
  6539,  6562,  6585,    94,-32768,   678,  1830,  1830,-32768,-32768,
-32768,   688,  2841,-32768,   690,  1830,  3467,  3488,  3509,-32768,
-32768,-32768,  1830,-32768,   -98,   567,   692,   693,   866,   701,
  6608,   869,  1830,  1830,-32768,  6631,   315,-32768,-32768,  1830,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1830,-32768,-32768,-32768,-32768,-32768,-32768,  1830,  1830,
  1830,  1830,   732,   700,   702,   703,   704,   707,   708,   709,
   710,   711,   712,   713,   714,   715,   716,   718,   720,   721,
   723,   724,   725,   726,   727,   728,   730,   731,   733,   734,
   735,   739,   740,-32768,   874,   736,-32768,   741,-32768,  1830,
  1830,  1830,  1830,  1830,  1830,   914,   916,   293,   917,   984,
   984,  1830,  1855,     4,  1870,    43,  1958,    68,  1973,  1988,
-32768,-32768,  5632,   919,-32768,  6654,    94,-32768,   778,   778,
   921,   778,-32768,   922,-32768,   778,   778,-32768,  1606,  1830,
  1905,-32768,  2031,   745,   923,   924,   925,   894,   926,   927,
   928,   929,   930,   931,   935,   -91,  1830,  3530,  3551,-32768,
-32768,  3015,    94,    94,    94,  2046,-32768,   770,   776,   777,
   783,   785,   786,   787,   788,   789,   790,   791,   792,   939,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1830,  1830,   778,  1830,   940,   778,  2557,   944,
   941,-32768,-32768,  5657,  6677,  6700,  6723,  6746,  7275,   838,
   950,  1830,  1830,    94,   951,   975,   825,   977,   978,   778,
   778,   979,    94,   980,   981,   778,   778,   982,   987,   989,
  1012,  1013,   778,   408,   778,  1014,  1015,  1026,  1016,  1033,
-32768,  1031,   436,  6769,  2068,  2083,  2098,  2149,  2164,-32768,
-32768,    21,-32768,  3314,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   861,     0,  1034,   106,     9,  1035,   778,  1036,
   778,  1045,  1055,-32768,  2572,   296,  2499,-32768,-32768,  1830,
   778,   778,   778,-32768,   483,   778,   778,   778,   778,   778,
   778,   778,  1830,  5682,  1830,  1830,   853,  -127,  -123,  -120,
-32768,  1188,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,-32768,  3572,  3593,  1058,  6792,   -56,
   956,  1830,  1830,-32768,  1830,   888,-32768,-32768,-32768,-32768,
  1830,   840,  3614,  3635,   -72,   889,   896,   890,   897,   899,
   898,   900,   904,   -18,   905,   901,   910,   907,   908,   911,
   912,   913,   915,   920,-32768,-32768,-32768,-32768,-32768,   933,
   934,   936,   937,   942,   945,   943,-32768,   946,-32768,-32768,
-32768,-32768,-32768,-32768,   236,   938,    22,   948,  1933,  1082,
-32768,-32768,-32768,    94,-32768,  1095,-32768,  1116,-32768,-32768,
  1830,  1634,  3656,  1132,  1134,  1135,  1830,  1830,  1137,  1138,
  1142,  1143,  1144,  1145,  1147,  3038,   983,  6815,  1044,   424,
    94,  1148,    94,  1149,    94,     3,  1150,  3677,  3698,  3719,
  3740,  3761,  3782,  3803,  3824,  3845,  3866,  3887,  3908,  1830,
  1830,-32768,  1151,   778,   778,  1076,   778,   364,  6838,   224,
  1157,  1664,  1159,  1830,   778,  1160,  1164,  1163,  1008,  1167,
   408,  1168,  1172,  1830,  1170,  1175,  1174,  1205,  1211,   408,
  1830,  1830,  1830,   778,  1212,  1214,   408,  1830,  1216,  1217,
  1215,  1830,   436,  1830,   251,  1221,  1139,   196,  3929,-32768,
   114,-32768,-32768,  7275,-32768,  1830,-32768,-32768,-32768,  2207,
  2259,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1050,  1242,
-32768,  1830,-32768,  1067,   -74,-32768,   -54,-32768,   112,-32768,
    18,-32768,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  3950,  3971,   -56,   148,-32768,   154,
  1069,  1169,  1830,-32768,-32768,  1244,   368,  1664,  1077,  3992,
  1074,-32768,  1089,-32768,  1096,-32768,  1110,-32768,  1107,  6861,
-32768,  1108,-32768,-32768,  1113,  1114,  6884,  4013,  6907,  1112,
-32768,  1118,  1119,  4034,  1120,  1121,-32768,  4055,  1133,  5707,
   696,   984,   984,  1830,  1830,  1830,  1830,     1,  1152,  1830,
  1830,-32768,  4076,-32768,-32768,   424,-32768,  2804,-32768,  1830,
  1830,  1830,  1285,  1115,   -42,-32768,  4097,  4118,  4139,  4160,
  4181,  4202,  4223,  4244,  4265,  4286,  4307,  4328,  1830,  1830,
  1213,-32768,   778,-32768,   778,  1830,  3061,-32768,-32768,-32768,
  2435,  1291,   -56,   408,  1309,  1830,  1324,   408,  1325,  1329,
  1327,  1330,  1331,  1830,  1332,   778,  1333,  1334,  1830,  1340,
  1338,  1830,  1341,  1158,  1339,  2274,   126,  2289,   141,  2325,
   145,  2340,  2368,  2383,  2398,  1171,     0,  1343,  1356,  3084,
  4349,  1342,  1182,  1830,-32768,  3107,  3130,  3153,-32768,   778,
  1358,-32768,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  3176,  3199,  1186,-32768,  1191,  2450,
-32768,  1830,-32768,  1192,  1193,  1194,  4370,-32768,  1199,-32768,
  1201,-32768,-32768,-32768,  6930,-32768,  1198,-32768,-32768,  6953,
  1203,-32768,  6976,  1200,  1362,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1316,-32768,   179,-32768,
-32768,-32768,  1830,  1202,-32768,  3222,  1376,  1377,    25,  1207,
-32768,  4391,  4412,  4433,  4454,  4475,  4496,  4517,  4538,  4559,
  6999,  7022,  7045,  1380,  1381,   778,   778,-32768,  1664,   408,
   408,   408,   408,  1382,  1386,  1387,   408,  1388,  1395,  1396,
  1398,   368,  1229,     0,-32768,  2833,  1400,-32768,-32768,-32768,
-32768,    18,   778,  1830,  1830,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,-32768,-32768,-32768,-32768,-32768,  1228,  1227,  1664,
  1231,  1232,  1237,  1238,-32768,-32768,-32768,  1235,-32768,-32768,
-32768,  1236,  1830,-32768,  1830,-32768,  1239,   -41,  1241,  4580,
  4601,  4622,  4643,  4664,  4685,  4706,  4727,  4748,  1243,  1256,
  1266,   778,  1335,  2525,   408,   408,  1410,  1414,   408,  1416,
  5732,  3245,  1441,  1442,   778,  1830,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1267,  1270,  1830,
  1280,  1282,-32768,-32768,  1288,  1294,  1301,-32768,  1302,-32768,
  1304,  4769,  4790,  4811,  4832,  4853,  4874,  4895,  4916,  4937,
   180,  7275,   189,  7275,   231,  7275,  1405,  1830,  1664,   408,
   778,  1480,  1481,  1404,  1483,  1484,  1830,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  1830,  1830,  1485,  1830,  1486,  1830,
  1493,  1321,  4958,  1664,  1323,  1326,-32768,-32768,-32768,-32768,
-32768,  4979,  5000,  5021,  5042,  5063,  5084,  7068,  7091,  7114,
  7275,-32768,  7275,-32768,  7275,-32768,  1830,  1830,  5105,   408,
   778,  1830,  1830,  1830,  1830,  1830,  1830,-32768,-32768,-32768,
  5120,  3268,  1355,  1328,  1336,  5141,  5162,  5183,  5204,  5225,
  5246,  1337,  1346,  1357,  1830,  1497,-32768,   778,   408,  1830,
  1830,  1830,  1830,  1830,  1830,  1830,  1830,  1830,  3291,-32768,
  1363,  1344,  5267,  5288,  5309,  5330,  5351,  5372,   248,  7275,
   278,  7275,   294,  7275,  1499,   778,  1501,  1830,  1830,  1830,
  1830,  1830,  1830,  1830,  1502,  1830,  1503,  1830,  1513,-32768,
  1364,-32768,  5393,  5414,  5435,  7137,  7160,  7183,  7275,-32768,
  7275,-32768,  7275,-32768,   778,  1830,  1830,  1830,-32768,-32768,
-32768,  1365,  5456,  5477,  5498,  1366,  1370,  1372,   778,  1830,
  1830,  1830,  1830,  1830,  1830,  1369,  5519,  5540,  5561,   303,
  7275,   312,  7275,   317,  7275,   408,  1830,  1830,  1830,  1830,
  1529,  1830,  1538,  1830,  1546,  1379,  7206,  7229,  7252,  7275,
-32768,  7275,-32768,  7275,-32768,  1548,-32768,-32768,-32768,-32768,
  1383,  1384,  1385,  1830,  1830,  1830,   318,  7275,   323,  7275,
   353,  7275,  1830,  1549,  1830,  1550,  1830,  1554,  7275,-32768,
  7275,-32768,  7275,-32768,  1561,  1565,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   947,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1560,  1562,
  -311,     7,  1563,-32768,-32768,-32768,-32768,   325, -1052,-32768,
-32768,  -859,    -7,-32768,   969,   -10,-32768,  -113,-32768,  -976,
   676,   484,-32768, -1105,-32768,-32768,-32768
};


#define	YYLAST		7447


static const short yytable[] = {   104,
   263,   326,  1132,   838,  1116,   179,   475,   177,   970,   716,
  1071,  1188,   331,   340,   843,   128,   465,  1053,  1053,   139,
   274,   136,  1054,  1054,   835,   935,   229,     7,   315,   316,
  1241,   162,   164,  -254,   315,   316,   482,   483,   315,   316,
   229,   315,   316,    -1,     8,   317,     9,  -253,   718,   143,
   871,  1007,   872,   844,   873,   106,   874,   875,   107,   876,
  1016,   315,   316,   315,   316,   315,   316,  1023,   315,   316,
   315,   316,   341,   720,   601,   466,   602,  1053,   318,   275,
   627,   464,  1054,   836,   476,   132,   753,   315,   316,   315,
   316,   133,   211,   212,   213,   214,   230,   157,   433,   113,
   276,   906,   434,  1050,   332,   936,  1154,   315,   316,   108,
   265,   842,   267,   268,   269,   270,   894,   422,   273,  1042,
   114,   561,   895,  1051,   282,   283,   284,   285,  1274,   287,
   288,  1178,   290,   291,   292,   137,   297,  1131,  1304,   140,
   109,   138,   178,   315,   316,   309,  1180,   554,   312,   110,
  1182,   555,   313,   314,   319,   915,    10,    11,    12,    13,
    14,    15,    16,    17,   111,   315,   316,   559,   330,   112,
   333,   560,   335,   336,   180,   323,   327,   325,   839,  1117,
   339,   971,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,  1242,   315,   316,   115,   364,   365,   366,
   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
   377,   378,   379,   116,  1155,  1132,    76,   293,  1159,   315,
   316,   130,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   134,   158,   159,  1031,   423,   424,
   425,   426,   562,   563,   564,   565,   160,   315,   316,   131,
   431,   432,   161,   315,   316,   315,   316,   135,   439,   427,
   428,   442,   174,   566,   567,   175,   448,   315,   316,  1052,
   453,   454,   455,   141,   457,   458,   459,   460,   461,   462,
   463,   142,   315,   316,   469,   470,   315,   316,   148,   149,
   144,   150,   477,   478,   479,   485,   278,   279,   226,   227,
   228,  1072,   145,   146,   491,  1073,   229,   147,    76,    77,
   496,  1073,   170,  1074,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,  1234,  1366,  1235,  1367,
  1261,  1262,  1263,  1264,   186,   187,  1368,  1268,  1369,   151,
   188,   993,   189,  1040,   172,   215,   216,   217,   218,   219,
   156,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   166,   102,   165,   167,   168,   229,   103,   169,  1032,  1033,
  1034,  1035,   294,   152,   498,   499,   153,   154,  1370,   155,
  1371,   574,   576,   578,   573,   575,   577,   579,   580,  1036,
  1037,   583,   186,   187,   171,  1464,   586,  1465,   188,   173,
   189,    -7,    -7,   176,    -7,  1321,  1322,   181,   339,  1325,
   182,   186,   187,   603,   226,   227,   228,   446,   608,   189,
   186,   187,   229,   616,   183,  1466,   599,  1467,   189,   618,
   619,   186,   187,   184,   186,   187,   185,   188,   622,   712,
   852,  1468,   189,  1469,   190,   626,    41,    42,    43,    44,
  1520,    46,  1521,   662,   663,   659,   660,   100,   101,  1522,
  1375,  1523,   664,   102,  1524,  1553,  1525,  1554,   103,   191,
  1555,   598,  1556,   192,   665,   815,   816,   817,   818,   819,
   193,   666,   667,   668,   669,   215,   216,   217,   218,   219,
   194,   220,   221,   222,   223,   278,   279,   226,   227,   228,
  1557,   195,  1558,   857,   858,   229,  1079,  1080,   196,   197,
  1414,   264,   281,   994,    -7,    -7,    -7,    -7,    -7,    -7,
    -7,    -7,   704,   705,   706,   707,   708,   709,   964,   198,
   312,   199,   211,   212,   714,   200,   201,   202,   203,  1442,
     1,     2,   204,     3,   205,   206,   726,   218,   219,   207,
   220,   221,   222,   223,   278,   279,   226,   227,   228,   828,
   208,   339,   735,   737,   229,   271,   220,   221,   222,   223,
   278,   279,   226,   227,   228,   209,   210,   272,   261,   754,
   229,   280,   758,   759,   760,   266,   286,   289,   298,   299,
   300,   334,   304,   337,   302,   305,   296,   303,   306,   307,
   308,   301,   628,   629,   630,   631,   632,   633,   634,   635,
   636,   637,   638,   639,   310,   776,   777,   320,   779,   321,
   322,   338,   229,   324,   380,   410,  1526,   328,   329,   381,
   382,   383,   384,   795,   793,   794,   385,   386,   387,    76,
   568,   569,   804,   388,   389,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   390,    76,   568,
  1105,   391,   392,   393,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   394,   395,   396,   397,
   398,   399,   853,   400,  1123,   401,   402,   403,   404,   412,
   405,   406,   407,   408,   409,   866,   640,   868,   869,   413,
   414,   416,   429,   430,   451,   878,   879,   880,   881,   882,
   883,   884,   885,   886,   887,   888,   889,   456,   487,   488,
   490,   493,   500,   524,   898,   899,   525,   900,   526,   527,
    76,   293,   547,   902,   528,   529,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   530,   531,
   532,   533,   534,   535,   536,   537,   538,   539,   540,  1029,
   541,   542,   543,   544,   545,   546,   548,   549,   570,   571,
   550,   939,   551,   941,   102,   552,   553,   587,   556,   572,
   557,   558,   584,   944,   339,   161,   581,   582,   585,   950,
   951,   588,   617,   589,   590,   592,   593,   570,   571,   595,
   965,   596,   967,   102,   969,   597,   604,   620,   572,   621,
   653,   654,   655,   656,   161,   658,   670,   671,   701,   672,
   673,   674,   985,   986,   675,   676,   677,   678,   679,   680,
   681,   682,   683,   684,   998,   685,  1000,   686,   687,   744,
   688,   689,   690,   691,   692,   693,  1010,   694,   695,   702,
   696,   697,   698,  1017,  1018,  1019,   699,   700,   703,   710,
  1024,   711,   713,   740,  1028,   724,  1030,   729,   731,   741,
   742,   743,   746,   747,   748,   749,   750,   751,  1043,   100,
   101,   752,   763,   745,   775,   102,   780,   785,   764,   765,
   103,   783,   792,   796,  1048,   766,   294,   767,   768,   769,
   770,   771,   772,   773,   774,  1057,  1058,  1059,  1060,  1061,
  1062,  1063,  1064,  1065,  1066,  1067,  1068,   797,   791,   799,
   800,   803,   805,   806,   809,  1077,    76,   568,   798,   810,
  1081,   811,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   812,   813,   822,   903,   825,   823,
  1107,  1109,  1111,  1106,  1108,  1110,  1112,  1113,  1114,  1115,
   824,   870,  1120,  1121,   277,   826,   827,   837,   897,   841,
   845,   847,  1126,  1127,  1128,   215,   216,   217,   218,   219,
   849,   220,   221,   222,   223,   278,   279,   226,   227,   228,
   850,  1145,  1146,   892,   901,   229,   907,   909,  1150,   908,
   910,   912,   727,   728,   917,   730,   911,   913,  1157,   732,
   733,   914,   916,   918,   919,   920,  1165,   940,   921,   922,
   923,  1170,   924,   925,  1173,   215,   216,   217,   218,   219,
   942,   220,   221,   222,   223,   278,   279,   226,   227,   228,
   926,   927,   934,   928,   929,   229,  1196,   784,   931,   930,
   932,   943,   415,   933,   937,  1202,  1203,  1204,  1205,  1206,
  1207,  1208,  1209,  1210,  1211,  1212,  1213,   947,   778,   948,
   949,   781,   952,   953,  1219,   570,   571,   954,   955,   956,
   957,   102,   958,   966,   968,   972,   572,   987,   991,   960,
   997,   999,   161,   801,   802,  1002,  1003,   417,  1004,   807,
   808,  1005,  1006,  1008,  1009,  1011,   814,  1012,   821,  1013,
   215,   216,   217,   218,   219,  1236,   220,   221,   222,   223,
   278,   279,   226,   227,   228,   215,   216,   217,   218,   219,
   229,   220,   221,   222,   223,   278,   279,   226,   227,   228,
  1014,  1260,   846,  1015,   848,   229,  1022,  1021,  1025,  1026,
  1027,   962,  1039,   963,   854,   855,   856,  1038,  1046,   859,
   860,   861,   862,   863,   864,   865,  1280,  1281,  1282,  1283,
  1284,  1285,  1286,  1287,  1288,  1047,  1049,  1075,  1076,  1078,
  1082,  1084,  1294,   628,   629,   630,   631,   632,   633,   634,
   635,   636,   637,   638,   639,  1301,  1085,  1302,   215,   216,
   217,   218,   219,  1086,   220,   221,   222,   223,   278,   279,
   226,   227,   228,  1087,  1088,  1090,  1091,  1092,   229,  1096,
  1129,  1097,  1098,  1130,  1101,  1147,  1153,  1100,  1332,  1333,
  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1342,  1344,  1346,
  1103,  1156,  1349,   215,   216,   217,   218,   219,   494,   220,
   221,   222,   223,   278,   279,   226,   227,   228,  1119,  1158,
  1160,  1161,  1162,   229,  1175,  1163,  1164,  1166,  1168,  1169,
  1373,  1374,  1171,  1172,  1176,  1174,  1194,  1187,  1190,  1382,
  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1191,
  1393,  1195,  1395,  1201,  1216,  1232,  1399,   877,  1217,  1220,
  1221,  1222,  1224,   418,  1225,  1227,  1229,  1231,  1233,  1237,
   992,  1239,  1240,   996,  1243,  1256,  1257,  1265,  1001,  1411,
  1412,  1266,  1267,  1269,  1416,  1417,  1418,  1419,  1420,  1421,
  1270,  1271,  1272,  1273,  1277,  1292,  1293,  1020,  1295,  1296,
  1297,  1298,  1299,  1300,  1319,  1323,  1303,  1439,  1305,  1324,
  1326,  1315,  1443,  1444,  1445,  1446,  1447,  1448,  1450,  1452,
  1454,   217,   218,   219,  1316,   220,   221,   222,   223,   278,
   279,   226,   227,   228,  1317,  1329,  1347,  1330,  1348,   229,
  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1350,  1481,  1351,
  1483,  1352,   215,   216,   217,   218,   219,  1353,   220,   221,
   222,   223,   278,   279,   226,   227,   228,  1354,  1493,  1494,
  1495,  1355,   229,  1356,  1372,  1377,  1378,  1379,  1380,  1381,
  1392,  1394,  1507,  1508,  1509,  1511,  1513,  1515,  1396,  1397,
  1400,  1427,  1440,  1401,  1470,  1428,  1472,  1480,  1482,  1527,
  1528,  1529,  1530,  1429,  1532,  1436,  1534,  1457,  1484,   215,
   216,   217,   218,   219,  1437,   220,   221,   222,   223,   278,
   279,   226,   227,   228,  1531,  1438,  1548,  1550,  1552,   229,
  1456,  1485,  1499,  1533,  1503,  1559,  1516,  1561,  1504,  1563,
  1505,  1535,  1536,  1540,  1560,  1562,  1148,   419,  1149,  1564,
  1566,  1544,  1545,  1546,  1567,    67,  1278,    68,    69,   738,
   990,     0,     0,   762,    76,    77,   117,     0,   118,  1167,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,     0,   119,   420,     0,     0,     0,    76,    77,
     0,     0,     0,  1200,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,    76,    77,     0,     0,
     0,     0,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,     0,     0,    76,    77,     0,     0,
     0,     0,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,     0,     0,     0,     0,     0,  1258,
  1259,     0,     0,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,   120,
   121,   122,   123,   229,     0,     0,  1279,     0,     0,     0,
     0,     0,     0,   100,   101,     0,     0,     0,     0,   102,
   124,   125,     0,     0,   103,     0,   126,     0,   127,     0,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,   100,   101,     0,
   229,     0,     0,   102,     0,  1318,     0,     0,   103,     0,
     0,   734,     0,     0,     0,     0,     0,     0,  1331,     0,
     0,     0,     0,     0,     0,   100,   101,     0,     0,     0,
     0,   102,     0,     0,     0,     0,   103,     0,     0,   945,
     0,     0,     0,     0,     0,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     0,   102,    76,    77,  1376,   229,   103,     0,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   717,     0,     0,     0,    76,
   447,     0,     0,     0,  1415,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,    76,   736,     0,
     0,  1441,     0,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,    76,   938,     0,     0,  1471,
     0,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   719,     0,     0,     0,     0,  1492,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   721,     0,
     0,     0,  1506,     0,     0,     0,     0,     0,     0,     0,
     0,   100,   101,   722,     0,     0,     0,   102,     0,     0,
     0,     0,   103,     0,     0,     0,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,   215,   216,   217,   218,   219,   229,   220,   221,   222,
   223,   278,   279,   226,   227,   228,   739,     0,   100,   101,
     0,   229,     0,     0,   102,     0,     0,     0,     0,   103,
     0,   761,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   100,   101,     0,     0,
     0,     0,   102,   830,     0,     0,     0,   103,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   831,     0,
     0,     0,     0,     0,   100,   101,     0,     0,     0,     0,
   102,     0,     0,   832,     0,   103,     0,     0,     0,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,   215,   216,   217,   218,   219,   229,
   220,   221,   222,   223,   278,   279,   226,   227,   228,   215,
   216,   217,   218,   219,   229,   220,   221,   222,   223,   278,
   279,   226,   227,   228,   833,     0,     0,     0,     0,   229,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   834,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,   215,   216,   217,
   218,   219,   229,   220,   221,   222,   223,   278,   279,   226,
   227,   228,  1044,     0,     0,     0,     0,   229,     0,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,   215,   216,   217,   218,   219,   229,
   220,   221,   222,   223,   278,   279,   226,   227,   228,   215,
   216,   217,   218,   219,   229,   220,   221,   222,   223,   278,
   279,   226,   227,   228,  1045,     0,     0,     0,     0,   229,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1179,     0,     0,     0,     0,     0,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,   215,   216,   217,   218,   219,
   229,   220,   221,   222,   223,   278,   279,   226,   227,   228,
  1181,     0,     0,     0,     0,   229,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1183,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,  1184,     0,     0,     0,     0,   229,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1185,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1186,     0,     0,     0,     0,     0,     0,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,   215,   216,   217,   218,   219,
   229,   220,   221,   222,   223,   278,   279,   226,   227,   228,
   215,   216,   217,   218,   219,   229,   220,   221,   222,   223,
   278,   279,   226,   227,   228,  1218,     0,     0,     0,     0,
   229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   522,     0,     0,     0,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,   215,   216,   217,   218,   219,   229,   220,   221,   222,
   223,   278,   279,   226,   227,   228,   600,     0,     0,     0,
     0,   229,     0,     0,     0,     0,     0,     0,     0,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,   215,   216,   217,   218,   219,   229,
   220,   221,   222,   223,   278,   279,   226,   227,   228,   215,
   216,   217,   218,   219,   229,   220,   221,   222,   223,   278,
   279,   226,   227,   228,   782,     0,     0,     0,     0,   229,
     0,     0,     0,     0,     0,  1152,     0,     0,     0,   851,
     0,     0,     0,     0,     0,     0,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,   215,   216,   217,   218,   219,   229,   220,   221,   222,
   223,   278,   279,   226,   227,   228,   215,   216,   217,   218,
   219,   229,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,  1320,     0,     0,     0,     0,
   229,     0,     0,     0,     0,     0,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,   215,   216,   217,   218,   219,   229,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
     0,    26,    27,    28,    29,    30,    31,    32,    33,     0,
    34,     0,    36,    37,    51,    39,    40,     0,     0,    -3,
    22,     0,     0,    23,     0,     0,     0,     0,    52,    53,
     0,    51,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    52,    53,     0,     0,     0,
    24,     0,    25,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
     0,     0,    41,    42,    43,    44,    45,    46,     0,    47,
    48,    49,    50,    51,     0,     0,     0,     0,    62,     0,
     0,     0,     0,     0,   231,     0,     0,    52,    53,     0,
     0,     0,     0,     0,    54,    62,    55,    56,    57,    58,
     0,    59,    60,    61,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
   480,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    51,     0,     0,   484,     0,     0,
     0,     0,   232,   233,   234,     0,     0,    62,    52,    53,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     0,     0,     0,     0,     0,     0,     0,     0,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,     0,   255,
   256,   257,   258,   259,   260,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,     0,    62,     0,
     0,  1124,     0,  1125,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
  1275,     0,  1276,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,   215,   216,   217,   218,
   219,   436,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,     0,   215,
   216,   217,   218,   219,   441,   220,   221,   222,   223,   278,
   279,   226,   227,   228,   523,     0,     0,     0,     0,   229,
     0,     0,   215,   216,   217,   218,   219,   443,   220,   221,
   222,   223,   278,   279,   226,   227,   228,   215,   216,   217,
   218,   219,   229,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,     0,
   215,   216,   217,   218,   219,   605,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,     0,   215,   216,   217,   218,   219,   609,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,   215,   216,   217,   218,
   219,   610,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,     0,   215,
   216,   217,   218,   219,   757,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,     0,   215,   216,   217,   218,   219,   959,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,     0,   215,   216,   217,   218,   219,
  1151,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,     0,   215,   216,
   217,   218,   219,  1192,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
     0,   215,   216,   217,   218,   219,  1197,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,     0,   215,   216,   217,   218,   219,  1198,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,     0,   215,   216,   217,
   218,   219,  1199,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,     0,
   215,   216,   217,   218,   219,  1214,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,     0,   215,   216,   217,   218,   219,  1215,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,   215,   216,   217,   218,
   219,  1238,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,     0,   215,
   216,   217,   218,   219,  1328,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,     0,   215,   216,   217,   218,   219,  1426,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,     0,   215,   216,   217,   218,   219,
  1455,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,   363,     0,     0,
     0,   467,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,   467,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,   468,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
   512,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,   519,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,   520,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,   521,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,   623,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,   624,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,   625,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,   755,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,   756,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,   890,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
   891,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,   904,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,   905,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,   946,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,   973,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,   974,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,   975,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,   976,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,   977,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,   978,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
   979,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,   980,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,   981,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,   982,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,   983,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,   984,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1041,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1069,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1070,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1083,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1094,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1099,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1102,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1122,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1133,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1134,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1135,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1136,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1137,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1138,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1139,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1140,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1141,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1142,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1143,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1144,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1193,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1223,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1244,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1245,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1246,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1247,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1248,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1249,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1250,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1251,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1252,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1306,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1307,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1308,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1309,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1310,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1311,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1312,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1313,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1314,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1357,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1358,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1359,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1360,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1361,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1362,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1363,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1364,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1365,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1398,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1402,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1403,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1404,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1405,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1406,   220,   221,   222,   223,   278,   279,   226,   227,   228,
  1413,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1407,   220,   221,   222,   223,   278,   279,   226,   227,
   228,   215,   216,   217,   218,   219,   229,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1425,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1430,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1431,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1432,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1433,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1434,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1435,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1458,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1459,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1460,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1461,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1462,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,   215,   216,   217,   218,   219,  1463,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,   215,   216,   217,   218,   219,
  1486,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,   215,   216,   217,   218,
   219,  1487,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,   215,   216,   217,
   218,   219,  1488,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,   215,   216,
   217,   218,   219,  1500,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,   215,
   216,   217,   218,   219,  1501,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
   215,   216,   217,   218,   219,  1502,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,   215,   216,   217,   218,   219,  1517,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,   215,   216,   217,   218,   219,  1518,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,   215,   216,   217,   218,   219,  1519,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,     0,   421,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
     0,     0,   497,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,     0,   723,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
     0,     0,   786,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,     0,   867,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
     0,     0,  1104,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,     0,     0,  1327,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
   363,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,   435,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,   437,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,   438,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,   440,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,   444,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,   445,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,   452,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,   489,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,   492,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
   495,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,   501,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,   502,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,   503,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,   504,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,   505,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,   506,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,   507,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,   508,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,   509,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
   510,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,   511,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,   513,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,   514,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,   515,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,   516,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,   517,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,   518,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,   591,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,   594,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
   606,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,   607,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,   611,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,   612,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,   613,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,   614,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,   615,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,   657,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,   661,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,   725,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
   787,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,   788,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,   789,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,   790,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,   829,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,   893,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,   961,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,   995,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,  1089,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,  1093,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
  1095,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,  1226,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,  1228,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,  1230,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,  1253,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,  1254,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229,     0,  1255,   215,
   216,   217,   218,   219,     0,   220,   221,   222,   223,   278,
   279,   226,   227,   228,     0,     0,     0,     0,     0,   229,
     0,  1408,   215,   216,   217,   218,   219,     0,   220,   221,
   222,   223,   278,   279,   226,   227,   228,     0,     0,     0,
     0,     0,   229,     0,  1409,   215,   216,   217,   218,   219,
     0,   220,   221,   222,   223,   278,   279,   226,   227,   228,
     0,     0,     0,     0,     0,   229,     0,  1410,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   278,   279,
   226,   227,   228,     0,     0,     0,     0,     0,   229,     0,
  1489,   215,   216,   217,   218,   219,     0,   220,   221,   222,
   223,   278,   279,   226,   227,   228,     0,     0,     0,     0,
     0,   229,     0,  1490,   215,   216,   217,   218,   219,     0,
   220,   221,   222,   223,   278,   279,   226,   227,   228,     0,
     0,     0,     0,     0,   229,     0,  1491,   215,   216,   217,
   218,   219,     0,   220,   221,   222,   223,   278,   279,   226,
   227,   228,     0,     0,     0,     0,     0,   229,     0,  1537,
   215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
   278,   279,   226,   227,   228,     0,     0,     0,     0,     0,
   229,     0,  1538,   215,   216,   217,   218,   219,     0,   220,
   221,   222,   223,   278,   279,   226,   227,   228,     0,     0,
     0,     0,     0,   229,     0,  1539,   215,   216,   217,   218,
   219,     0,   220,   221,   222,   223,   278,   279,   226,   227,
   228,     0,     0,     0,     0,     0,   229
};

static const short yycheck[] = {     7,
   114,     4,  1055,     4,     4,     4,   318,    38,     6,     6,
   987,  1117,    81,     4,     6,    23,     4,    60,    60,    59,
     4,    59,    65,    65,     4,     4,   172,   143,   162,   163,
     6,    42,    43,   179,   162,   163,     6,     7,   162,   163,
   172,   162,   163,     0,     1,   179,     3,   179,     6,    42,
   178,   911,   180,    45,   178,     6,   180,   178,     7,   180,
   920,   162,   163,   162,   163,   162,   163,   927,   162,   163,
   162,   163,    63,     6,   178,    63,   180,    60,   179,    63,
   179,   178,    65,    63,   178,   173,   178,   162,   163,   162,
   163,   179,   100,   101,   102,   103,   104,     4,   174,   173,
    84,   174,   178,   178,   173,    84,  1083,   162,   163,     6,
   118,     6,   120,   121,   122,   123,   173,     7,   126,     6,
   173,     7,   179,   178,   132,   133,   134,   135,  1234,   137,
   138,     6,   140,   141,   142,   173,   144,   180,   180,   179,
     6,   179,   173,   162,   163,   156,     6,   174,   159,     6,
     6,   178,   160,   161,   165,   174,   113,   114,   115,   116,
   117,   118,   119,   120,     6,   162,   163,   174,   176,     6,
   178,   178,   180,   181,   173,   169,   179,   171,   179,   179,
   188,   179,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   179,   162,   163,   173,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,     6,  1084,  1278,     3,     4,  1088,   162,
   163,   173,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   173,   162,   163,     7,   148,   149,
   150,   151,   148,   149,   150,   151,   173,   162,   163,     6,
   278,   279,   179,   162,   163,   162,   163,   173,   286,   169,
   170,   289,    34,   169,   170,    37,   294,   162,   163,   178,
   298,   299,   300,   173,   302,   303,   304,   305,   306,   307,
   308,   173,   162,   163,   315,   316,   162,   163,    37,    38,
   173,    40,   320,   321,   322,   326,   162,   163,   164,   165,
   166,   174,    38,    38,   332,   178,   172,    38,     3,     4,
   338,   178,    38,   180,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   178,   178,   180,   180,
  1220,  1221,  1222,  1223,   169,   170,   178,  1227,   180,    40,
   175,     8,   177,   178,     6,   152,   153,   154,   155,   156,
   179,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    34,   168,   179,    37,    38,   172,   173,   179,   148,   149,
   150,   151,   179,    34,   169,   170,    37,    38,   178,    40,
   180,   422,   423,   424,   422,   423,   424,   425,   426,   169,
   170,   429,   169,   170,   179,   178,   434,   180,   175,     5,
   177,     0,     1,   173,     3,  1295,  1296,   173,   446,  1299,
     6,   169,   170,   451,   164,   165,   166,   175,   456,   177,
   169,   170,   172,   464,     4,   178,   175,   180,   177,   467,
   468,   169,   170,     4,   169,   170,    38,   175,   476,   177,
   175,   178,   177,   180,   173,   483,    53,    54,    55,    56,
   178,    58,   180,   169,   170,   493,   494,   162,   163,   178,
  1350,   180,   500,   168,   178,   178,   180,   180,   173,   173,
   178,   176,   180,   173,   512,    98,    99,   100,   101,   102,
   173,   519,   520,   521,   522,   152,   153,   154,   155,   156,
   173,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   178,   173,   180,    51,    52,   172,   169,   170,   173,   173,
  1400,     5,     5,   180,   113,   114,   115,   116,   117,   118,
   119,   120,   560,   561,   562,   563,   564,   565,   870,   173,
   571,   173,   570,   571,   572,   173,   173,   173,   173,  1429,
   139,   140,   173,   142,   173,   173,   587,   155,   156,   173,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   703,
   173,   599,   600,   601,   172,     6,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   173,   173,     6,   173,   617,
   172,     6,   623,   624,   625,   173,   173,   173,   179,   173,
   173,    86,   173,     6,   179,   173,   143,   179,   173,   173,
   173,   148,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,   177,   653,   654,   179,   656,   179,
   179,   173,   172,   170,   173,     5,  1516,   174,   175,   173,
   173,   173,   173,   674,   672,   673,   173,   173,   173,     3,
     4,     5,   683,   173,   173,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,   173,     3,     4,
     5,   173,   173,   173,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   173,   173,   173,   173,
   173,   173,   740,   173,  1046,   173,   173,   173,   173,   178,
   173,   173,   173,   173,   173,   753,   180,   755,   756,   174,
   178,     5,   175,   177,     7,   763,   764,   765,   766,   767,
   768,   769,   770,   771,   772,   773,   774,     7,     7,     7,
    82,   179,   175,     5,   782,   783,     5,   785,     5,     5,
     3,     4,   131,   791,     5,     5,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,   933,
     5,     5,     5,     5,     5,     5,     5,     5,   162,   163,
     5,   839,     5,   844,   168,     3,     5,     7,     5,   173,
     6,     5,     4,   851,   852,   179,     6,     6,     6,   857,
   858,     6,   175,     7,     7,     7,     6,   162,   163,     6,
   871,     7,   873,   168,   875,     7,     7,   180,   173,   180,
   179,   179,     7,   173,   179,     7,   145,   178,     5,   178,
   178,   178,   890,   891,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   902,   178,   904,   178,   178,     6,
   178,   178,   178,   178,   178,   178,   914,   178,   178,   174,
   178,   178,   178,   921,   922,   923,   178,   178,   178,     6,
   928,     6,     6,   179,   932,     7,   934,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     7,     7,   946,   162,
   163,     7,   173,    50,     6,   168,     7,     7,   173,   173,
   173,     8,     3,     3,   962,   173,   179,   173,   173,   173,
   173,   173,   173,   173,   173,   973,   974,   975,   976,   977,
   978,   979,   980,   981,   982,   983,   984,     3,   141,     3,
     3,     3,     3,     3,     3,   993,     3,     4,   164,     3,
   998,     3,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     3,     3,     3,   178,     3,     5,
  1031,  1032,  1033,  1031,  1032,  1033,  1034,  1035,  1036,  1037,
     5,   179,  1040,  1041,     6,     3,     6,   177,    83,     6,
     6,     6,  1050,  1051,  1052,   152,   153,   154,   155,   156,
     6,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     6,  1069,  1070,     6,   177,   172,   178,   178,  1076,   174,
   174,   174,   589,   590,   174,   592,   178,   178,  1086,   596,
   597,   178,   178,   174,   178,   178,  1094,     6,   178,   178,
   178,  1099,   178,   174,  1102,   152,   153,   154,   155,   156,
     6,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   178,   178,   175,   178,   178,   172,  1124,   174,   174,   178,
   178,     6,     6,   178,   177,  1133,  1134,  1135,  1136,  1137,
  1138,  1139,  1140,  1141,  1142,  1143,  1144,     6,   655,     6,
     6,   658,     6,     6,  1152,   162,   163,     6,     6,     6,
     6,   168,     6,     6,     6,     6,   173,     7,    83,   177,
     4,     3,   179,   680,   681,     6,     3,     6,     6,   686,
   687,   164,     6,     6,     3,     6,   693,     3,   695,     6,
   152,   153,   154,   155,   156,  1193,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   152,   153,   154,   155,   156,
   172,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     6,  1219,   729,     3,   731,   172,     3,     6,     3,     3,
     6,   178,    84,   180,   741,   742,   743,     7,   179,   746,
   747,   748,   749,   750,   751,   752,  1244,  1245,  1246,  1247,
  1248,  1249,  1250,  1251,  1252,     4,   180,   179,    80,     6,
   174,   178,  1260,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,  1273,   178,  1275,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   174,   178,   178,   174,   174,   172,   178,
     6,   174,   174,   179,   174,    83,     6,   178,  1306,  1307,
  1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,  1316,  1317,
   178,     3,  1320,   152,   153,   154,   155,   156,     8,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   177,     6,
     6,     3,     6,   172,   177,     6,     6,     6,     6,     6,
  1348,  1349,     3,     6,     6,     5,     5,   177,     6,  1357,
  1358,  1359,  1360,  1361,  1362,  1363,  1364,  1365,  1366,     4,
  1368,   180,  1370,     6,   179,     4,  1374,   180,   178,   178,
   178,   178,   174,     6,   174,   178,   174,   178,    63,   178,
   897,     6,     6,   900,   178,     6,     6,     6,   905,  1397,
  1398,     6,     6,     6,  1402,  1403,  1404,  1405,  1406,  1407,
     6,     6,     5,   175,     5,   178,   180,   924,   178,   178,
   174,   174,   178,   178,    80,     6,   178,  1425,   178,     6,
     5,   179,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,
  1438,   154,   155,   156,   179,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   179,     5,   180,     6,   179,   172,
  1458,  1459,  1460,  1461,  1462,  1463,  1464,   178,  1466,   178,
  1468,   174,   152,   153,   154,   155,   156,   174,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   177,  1486,  1487,
  1488,   180,   172,   180,    80,     6,     6,    84,     6,     6,
     6,     6,  1500,  1501,  1502,  1503,  1504,  1505,     6,   179,
   178,   147,     6,   178,     6,   178,     6,     6,     6,  1517,
  1518,  1519,  1520,   178,  1522,   179,  1524,   174,     6,   152,
   153,   154,   155,   156,   179,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,   179,  1544,  1545,  1546,   172,
   178,   178,   178,     6,   179,  1553,   178,  1555,   179,  1557,
   179,     6,   174,     6,     6,     6,  1073,     6,  1075,     6,
     0,   179,   179,   179,     0,     6,  1242,     6,     6,   601,
   895,    -1,    -1,   627,     3,     4,     5,    -1,     7,  1096,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    -1,    32,     6,    -1,    -1,    -1,     3,     4,
    -1,    -1,    -1,  1130,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    -1,    -1,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,  1216,
  1217,    -1,    -1,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,   148,
   149,   150,   151,   172,    -1,    -1,  1243,    -1,    -1,    -1,
    -1,    -1,    -1,   162,   163,    -1,    -1,    -1,    -1,   168,
   169,   170,    -1,    -1,   173,    -1,   175,    -1,   177,    -1,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,   162,   163,    -1,
   172,    -1,    -1,   168,    -1,  1292,    -1,    -1,   173,    -1,
    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,  1305,    -1,
    -1,    -1,    -1,    -1,    -1,   162,   163,    -1,    -1,    -1,
    -1,   168,    -1,    -1,    -1,    -1,   173,    -1,    -1,   176,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,   168,     3,     4,  1351,   172,   173,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,     3,
     4,    -1,    -1,    -1,  1401,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,     3,     4,    -1,
    -1,  1428,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     3,     4,    -1,    -1,  1456,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     6,    -1,    -1,    -1,    -1,  1485,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,  1499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   162,   163,     6,    -1,    -1,    -1,   168,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   152,   153,   154,   155,   156,   172,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     6,    -1,   162,   163,
    -1,   172,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   162,   163,    -1,    -1,
    -1,    -1,   168,     6,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    -1,    -1,   162,   163,    -1,    -1,    -1,    -1,
   168,    -1,    -1,     6,    -1,   173,    -1,    -1,    -1,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   152,   153,   154,   155,   156,   172,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   152,
   153,   154,   155,   156,   172,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,    -1,    -1,    -1,    -1,   172,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   152,   153,   154,
   155,   156,   172,   158,   159,   160,   161,   162,   163,   164,
   165,   166,     6,    -1,    -1,    -1,    -1,   172,    -1,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   152,   153,   154,   155,   156,   172,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   152,
   153,   154,   155,   156,   172,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,    -1,    -1,    -1,    -1,   172,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   152,   153,   154,   155,   156,
   172,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     6,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     6,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   152,   153,   154,   155,   156,
   172,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   152,   153,   154,   155,   156,   172,   158,   159,   160,   161,
   162,   163,   164,   165,   166,     6,    -1,    -1,    -1,    -1,
   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     8,    -1,    -1,    -1,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   152,   153,   154,   155,   156,   172,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     8,    -1,    -1,    -1,
    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   152,   153,   154,   155,   156,   172,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   152,
   153,   154,   155,   156,   172,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     8,    -1,    -1,    -1,    -1,   172,
    -1,    -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,     8,
    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   152,   153,   154,   155,   156,   172,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   152,   153,   154,   155,
   156,   172,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   141,    -1,    -1,    -1,    -1,
   172,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   152,   153,   154,   155,   156,   172,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,
    -1,    34,    35,    36,    37,    38,    39,    40,    41,    -1,
    43,    -1,    45,    46,    64,    48,    49,    -1,    -1,     0,
     1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    78,    79,
    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    79,    -1,    -1,    -1,
    31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
    -1,    -1,    53,    54,    55,    56,    57,    58,    -1,    60,
    61,    62,    63,    64,    -1,    -1,    -1,    -1,   138,    -1,
    -1,    -1,    -1,    -1,    37,    -1,    -1,    78,    79,    -1,
    -1,    -1,    -1,    -1,    85,   138,    87,    88,    89,    90,
    -1,    92,    93,    94,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,
   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    64,    -1,    -1,   180,    -1,    -1,
    -1,    -1,    95,    96,    97,    -1,    -1,   138,    78,    79,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,   132,
   133,   134,   135,   136,   137,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   138,    -1,
    -1,   178,    -1,   180,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,
   156,   180,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,
   153,   154,   155,   156,   180,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   144,    -1,    -1,    -1,    -1,   172,
    -1,    -1,   152,   153,   154,   155,   156,   180,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   152,   153,   154,
   155,   156,   172,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
   152,   153,   154,   155,   156,   180,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,    -1,   152,   153,   154,   155,   156,   180,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,
   156,   180,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,
   153,   154,   155,   156,   180,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,    -1,   152,   153,   154,   155,   156,   180,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,   156,
   180,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,   153,
   154,   155,   156,   180,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,   152,   153,   154,   155,   156,   180,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,    -1,   152,   153,   154,   155,   156,   180,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,
   155,   156,   180,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
   152,   153,   154,   155,   156,   180,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,    -1,   152,   153,   154,   155,   156,   180,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,
   156,   180,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,
   153,   154,   155,   156,   180,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,    -1,   152,   153,   154,   155,   156,   180,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,   156,
   180,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,    -1,    -1,
    -1,   178,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   146,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   152,   153,   154,   155,   156,   172,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,   176,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,   176,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,   176,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 155 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 169 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 176 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 193 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 194 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 195 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 196 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 201 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 206 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 217 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 220 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 224 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 230 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 236 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 243 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 249 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 253 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 257 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 264 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 268 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 273 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 277 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 281 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 285 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 289 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 293 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 297 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 301 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 310 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 313 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 317 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 321 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 325 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 329 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 354 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 364 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 367 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 383 "Gmsh.y"
{return 1;;
    break;}
case 64:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 386 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 66:
#line 391 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-2].c); 
    ;
    break;}
case 67:
#line 395 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 406 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 410 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 417 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 436 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 438 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 443 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 448 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 455 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 457 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 462 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 467 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 474 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 476 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 481 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 486 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 493 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 495 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 501 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 507 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 514 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 516 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 522 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 528 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 535 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 537 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 543 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 549 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 556 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 558 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 565 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 574 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 581 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 583 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 590 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 599 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 606 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 608 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 615 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 624 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 631 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 633 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 641 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 650 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 657 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 659 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 667 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 676 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 683 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 685 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 693 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 702 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 718 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-1].d);
      }
    ;
    break;}
case 132:
#line 730 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
      }
    ;
    break;}
case 133:
#line 742 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else{
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0 ;
      }
    ;
    break;}
case 134:
#line 751 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 135:
#line 763 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1. ;
    ;
    break;}
case 136:
#line 771 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd -= 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 137:
#line 783 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 791 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd += yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 139:
#line 803 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= yyvsp[-1].d ;
    ;
    break;}
case 140:
#line 811 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd -= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 141:
#line 823 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) *= yyvsp[-1].d ;
    ;
    break;}
case 142:
#line 831 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd *= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 143:
#line 843 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-3].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	else
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) /= yyvsp[-1].d ;
      }
    ;
    break;}
case 144:
#line 855 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-6].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
	else{
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	    *pd /= yyvsp[-1].d ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 145:
#line 874 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 146:
#line 887 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 147:
#line 905 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 922 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 943 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 960 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 981 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 998 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1019 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1036 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1057 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	  vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	else{
	  if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	    vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 156:
#line 1078 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.View[%d].%s /= %g'", 
		 yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(strcmp(yyvsp[-10].c, "PostProcessing"))
	  vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
	else{
	  if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	    if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	    else      vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			       yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	  }
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 157:
#line 1104 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1121 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1142 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1159 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 161:
#line 1182 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 162:
#line 1207 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 163:
#line 1236 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 164:
#line 1261 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 165:
#line 1290 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 166:
#line 1315 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 167:
#line 1346 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 168:
#line 1359 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 169:
#line 1388 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1395 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1401 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 172:
#line 1420 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 173:
#line 1431 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 174:
#line 1439 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1445 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1451 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 177:
#line 1470 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 178:
#line 1476 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 179:
#line 1493 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 180:
#line 1499 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1505 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 182:
#line 1511 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 183:
#line 1517 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1523 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 185:
#line 1542 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 186:
#line 1554 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 187:
#line 1560 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 188:
#line 1579 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 189:
#line 1602 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 190:
#line 1610 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 191:
#line 1614 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 192:
#line 1620 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 193:
#line 1626 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 194:
#line 1638 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 195:
#line 1644 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 196:
#line 1650 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 197:
#line 1663 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 198:
#line 1668 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1673 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 200:
#line 1678 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 201:
#line 1685 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 202:
#line 1686 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 203:
#line 1687 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 204:
#line 1692 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 205:
#line 1696 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 206:
#line 1708 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 207:
#line 1726 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 208:
#line 1741 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;
	strcpy(tmpstring, ThePathForIncludes);
	if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,yyvsp[-1].c);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){

	if(!CTX.interactive){ // we're in interactive mode
	  char ext[6];
	  strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
	  Replot();
	  extern void CreateImage (char *name, FILE *fp);
	  FILE *fp = 0;
	  if(!strcmp(ext,".gif")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type = PRINT_GL2GIF;
	  }
	  else if(!strcmp(ext,".eps")){
	    fp = fopen(yyvsp[-1].c,"w");
	    CTX.print.type =  PRINT_GL2PS_RECURSIVE;
	  } 
	  else if(!strcmp(ext,".xpm")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type =  PRINT_XDUMP;
	    CTX.print.format = FORMAT_XPM;
	  } 
	  if(fp){
	    CreateImage(yyvsp[-1].c,fp);
	    fclose(fp);
	  }
	  else{
	    vyyerror("Unable to Open File '%s'", yyvsp[-1].c);
	  }
	}
	
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Save")){

	Print_Mesh(THEM, yyvsp[-1].c, CTX.mesh.format);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 209:
#line 1812 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	extern long Get_AnimTime();
	long sleep_time = Get_AnimTime();
	while(1){
	  if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 210:
#line 1832 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 211:
#line 1836 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	}
	else{
	  Init();
	  Draw();
	}
      }
    ;
    break;}
case 212:
#line 1857 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 213:
#line 1871 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 214:
#line 1885 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 215:
#line 1910 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 216:
#line 1935 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 217:
#line 1961 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 218:
#line 1966 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 219:
#line 1971 "Gmsh.y"
{
      // skip everything until return is found
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until("Return");
    ;
    break;}
case 220:
#line 1978 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("EndIf");
    ;
    break;}
case 221:
#line 1982 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 1993 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 223:
#line 1998 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 224:
#line 2004 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 225:
#line 2008 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 226:
#line 2012 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 227:
#line 2016 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 228:
#line 2020 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 229:
#line 2025 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 230:
#line 2033 "Gmsh.y"
{
    ;
    break;}
case 231:
#line 2036 "Gmsh.y"
{
    ;
    break;}
case 232:
#line 2042 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 233:
#line 2059 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 234:
#line 2070 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 235:
#line 2087 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 236:
#line 2104 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 237:
#line 2121 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 238:
#line 2142 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 239:
#line 2162 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 240:
#line 2182 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 241:
#line 2199 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 242:
#line 2224 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 243:
#line 2236 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 244:
#line 2237 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 245:
#line 2238 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 246:
#line 2239 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 247:
#line 2240 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 248:
#line 2244 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 249:
#line 2245 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 250:
#line 2246 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 251:
#line 2247 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 252:
#line 2248 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 253:
#line 2249 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 254:
#line 2250 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 255:
#line 2251 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 256:
#line 2253 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 257:
#line 2259 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 258:
#line 2260 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 259:
#line 2261 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 260:
#line 2262 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 261:
#line 2263 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 262:
#line 2264 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 263:
#line 2265 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 264:
#line 2266 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 265:
#line 2267 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 266:
#line 2268 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 267:
#line 2269 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 268:
#line 2270 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2271 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2272 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 271:
#line 2273 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2274 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2275 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2276 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 275:
#line 2277 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2278 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 277:
#line 2279 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2280 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 279:
#line 2281 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2282 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2283 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2284 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 283:
#line 2285 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 284:
#line 2286 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 285:
#line 2287 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 286:
#line 2288 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 287:
#line 2289 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 288:
#line 2290 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 289:
#line 2299 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 290:
#line 2300 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 291:
#line 2305 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
      }
      Free(yyvsp[0].c);
    ;
    break;}
case 292:
#line 2317 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 293:
#line 2335 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0) ;
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2347 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 295:
#line 2365 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1.0) ;
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 296:
#line 2377 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd -= 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 297:
#line 2397 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 298:
#line 2418 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 299:
#line 2442 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 300:
#line 2463 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 301:
#line 2487 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 302:
#line 2508 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 303:
#line 2534 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 304:
#line 2540 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 305:
#line 2554 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
      //??? Avec ce qui suit, bison se plante sur DEC
      //for(i=0 ; i<5 ; i++) $$[i] = $1[i];
    ;
    break;}
case 306:
#line 2560 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 307:
#line 2564 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 308:
#line 2568 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 309:
#line 2572 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 310:
#line 2578 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 311:
#line 2582 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 312:
#line 2586 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 313:
#line 2590 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 314:
#line 2594 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
	yyval.v[0]=yyval.v[1]=yyval.v[2]=yyval.v[3]= 0.0 ;
	yyval.v[4]= 1.0 ;
      }
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i))){
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.v[0]=yyval.v[1]=yyval.v[2]=yyval.v[3]= 0.0 ;
	  yyval.v[4]= 1.0 ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 315:
#line 2626 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
	yyval.v[0]=yyval.v[1]=yyval.v[2]=yyval.v[3]= 0.0 ;
	yyval.v[4]= 1.0 ;
      }
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.v[0]=yyval.v[1]=yyval.v[2]=yyval.v[3]= 0.0 ;
	  yyval.v[4]= 1.0 ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 316:
#line 2664 "Gmsh.y"
{
    ;
    break;}
case 317:
#line 2667 "Gmsh.y"
{
    ;
    break;}
case 318:
#line 2673 "Gmsh.y"
{
    ;
    break;}
case 319:
#line 2676 "Gmsh.y"
{
    ;
    break;}
case 320:
#line 2682 "Gmsh.y"
{
    ;
    break;}
case 321:
#line 2685 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 322:
#line 2689 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 323:
#line 2696 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 324:
#line 2701 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 325:
#line 2708 "Gmsh.y"
{
    ;
    break;}
case 326:
#line 2711 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 327:
#line 2717 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(ListOfDouble_L, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 328:
#line 2732 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 329:
#line 2740 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 330:
#line 2745 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 331:
#line 2754 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 332:
#line 2766 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 333:
#line 2770 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 334:
#line 2778 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 335:
#line 2792 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 336:
#line 2796 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 337:
#line 2800 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 338:
#line 2805 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 339:
#line 2810 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 340:
#line 2830 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 341:
#line 2834 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 342:
#line 2856 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 343:
#line 2864 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 344:
#line 2871 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 345:
#line 2875 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 346:
#line 2879 "Gmsh.y"
{
      sprintf(tmpstring, yyvsp[-3].c, yyvsp[-1].d);
      yyval.c = (char*)Malloc(strlen(tmpstring));
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2886 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

