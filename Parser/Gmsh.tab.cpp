
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tAttractor	329
#define	tLayers	330
#define	tHole	331
#define	tAlias	332
#define	tAliasWithOptions	333
#define	tText2D	334
#define	tText3D	335
#define	tInterpolationScheme	336
#define	tTime	337
#define	tGrain	338
#define	tCombine	339
#define	tBSpline	340
#define	tBezier	341
#define	tNurbs	342
#define	tOrder	343
#define	tKnots	344
#define	tColor	345
#define	tColorTable	346
#define	tFor	347
#define	tIn	348
#define	tEndFor	349
#define	tIf	350
#define	tEndIf	351
#define	tExit	352
#define	tField	353
#define	tThreshold	354
#define	tStructured	355
#define	tLatLon	356
#define	tGrad	357
#define	tPostView	358
#define	tReturn	359
#define	tCall	360
#define	tFunction	361
#define	tShow	362
#define	tHide	363
#define	tGetValue	364
#define	tGMSH_MAJOR_VERSION	365
#define	tGMSH_MINOR_VERSION	366
#define	tGMSH_PATCH_VERSION	367
#define	tAFFECTPLUS	368
#define	tAFFECTMINUS	369
#define	tAFFECTTIMES	370
#define	tAFFECTDIVIDE	371
#define	tOR	372
#define	tAND	373
#define	tEQUAL	374
#define	tNOTEQUAL	375
#define	tLESSOREQUAL	376
#define	tGREATEROREQUAL	377
#define	tPLUSPLUS	378
#define	tMINUSMINUS	379
#define	UNARYPREC	380

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.324 2007-07-11 16:38:35 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Field.h"
#include "BackgroundMesh.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static gmshSurface *myGmshSurface = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 79 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1281
#define	YYFLAG		-32768
#define	YYNTBASE	147

#define YYTRANSLATE(x) ((unsigned)(x) <= 380 ? yytranslate[x] : 216)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   132,     2,   142,     2,   131,     2,     2,   137,
   138,   129,   127,   143,   128,   141,   130,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   123,
     2,   125,   118,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   139,     2,   140,   136,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   144,     2,   145,   146,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   119,   120,   121,   122,   124,   126,   133,   134,   135
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   204,   205,   212,   219,   221,   223,   225,   227,   229,
   231,   233,   238,   246,   256,   263,   270,   274,   281,   286,
   293,   303,   310,   320,   326,   335,   344,   356,   363,   373,
   383,   393,   395,   397,   405,   414,   424,   433,   442,   451,
   461,   470,   476,   483,   490,   497,   505,   513,   521,   531,
   539,   549,   567,   575,   583,   595,   604,   613,   622,   631,
   635,   640,   651,   659,   667,   676,   685,   694,   702,   711,
   717,   729,   735,   745,   747,   749,   751,   752,   755,   762,
   769,   776,   783,   788,   795,   802,   809,   814,   821,   825,
   830,   836,   840,   844,   849,   854,   858,   866,   874,   878,
   886,   890,   893,   896,   912,   915,   922,   931,   940,   951,
   953,   956,   958,   962,   967,   969,   975,   987,  1001,  1002,
  1010,  1011,  1025,  1026,  1042,  1043,  1050,  1051,  1062,  1071,
  1080,  1089,  1102,  1115,  1128,  1143,  1158,  1173,  1174,  1187,
  1188,  1201,  1202,  1215,  1216,  1233,  1234,  1251,  1252,  1269,
  1270,  1289,  1290,  1309,  1310,  1329,  1331,  1334,  1340,  1348,
  1358,  1361,  1371,  1378,  1388,  1398,  1407,  1417,  1426,  1435,
  1442,  1447,  1458,  1469,  1480,  1491,  1494,  1496,  1500,  1503,
  1506,  1509,  1513,  1517,  1521,  1525,  1529,  1533,  1537,  1541,
  1545,  1549,  1553,  1557,  1561,  1565,  1571,  1576,  1581,  1586,
  1591,  1596,  1601,  1606,  1611,  1616,  1621,  1628,  1633,  1638,
  1643,  1648,  1653,  1658,  1665,  1672,  1679,  1684,  1689,  1694,
  1699,  1704,  1709,  1714,  1719,  1724,  1729,  1734,  1741,  1746,
  1751,  1756,  1761,  1766,  1771,  1778,  1785,  1792,  1797,  1799,
  1801,  1803,  1805,  1807,  1809,  1811,  1813,  1819,  1824,  1829,
  1832,  1838,  1842,  1849,  1854,  1862,  1869,  1871,  1874,  1877,
  1881,  1885,  1897,  1907,  1915,  1923,  1925,  1929,  1931,  1933,
  1936,  1940,  1945,  1951,  1954,  1958,  1962,  1968,  1973,  1975,
  1977,  1979,  1983,  1990,  1992,  1994,  1998,  2002,  2012,  2020,
  2022,  2028,  2032,  2039,  2041,  2045,  2047,  2049,  2051,  2053,
  2060,  2065,  2070,  2075,  2082,  2089
};

static const short yyrhs[] = {   148,
     0,     1,     6,     0,     0,   148,   149,     0,   152,     0,
   151,     0,   171,     0,   173,     0,   174,     0,   177,     0,
   178,     0,   179,     0,   180,     0,   183,     0,   200,     0,
   201,     0,   202,     0,   182,     0,   181,     0,   125,     0,
   125,   125,     0,    35,   137,     5,   138,     6,     0,    35,
   137,     5,   138,   150,   214,     6,     0,    35,   137,     5,
   143,   210,   138,     6,     0,    35,   137,     5,   143,   210,
   138,   150,   214,     6,     0,     4,     5,   144,   153,   145,
     6,     0,     4,     5,     4,   205,   144,   153,   145,     6,
     0,     0,   153,   156,     0,   153,   160,     0,   153,   163,
     0,   153,   165,     0,   153,   166,     0,   153,   168,     0,
   203,     0,   154,   143,   203,     0,   203,     0,   155,   143,
   203,     0,     0,     0,     4,   157,   137,   154,   138,   158,
   144,   155,   145,     6,     0,   214,     0,   159,   143,   214,
     0,     0,    80,   137,   203,   143,   203,   143,   203,   138,
   161,   144,   159,   145,     6,     0,   214,     0,   162,   143,
   214,     0,     0,    81,   137,   203,   143,   203,   143,   203,
   143,   203,   138,   164,   144,   162,   145,     6,     0,    82,
   144,   207,   145,   144,   207,   145,     6,     0,    82,   144,
   207,   145,   144,   207,   145,   144,   207,   145,   144,   207,
   145,     6,     0,     0,    83,   167,   144,   155,   145,     6,
     0,    84,   137,   203,   138,   208,     6,     0,     7,     0,
   114,     0,   115,     0,   116,     0,   117,     0,   133,     0,
   134,     0,     4,   169,   203,     6,     0,     4,   139,   203,
   140,   169,   203,     6,     0,     4,   139,   144,   210,   145,
   140,   169,   208,     6,     0,     4,   139,   140,     7,   208,
     6,     0,     4,   139,   140,   114,   208,     6,     0,     4,
   170,     6,     0,     4,   139,   203,   140,   170,     6,     0,
     4,     7,   215,     6,     0,     4,   141,     4,     7,   215,
     6,     0,     4,   139,   203,   140,   141,     4,     7,   215,
     6,     0,     4,   141,     4,   169,   203,     6,     0,     4,
   139,   203,   140,   141,     4,   169,   203,     6,     0,     4,
   141,     4,   170,     6,     0,     4,   139,   203,   140,   141,
     4,   170,     6,     0,     4,   141,    91,   141,     4,     7,
   211,     6,     0,     4,   139,   203,   140,   141,    91,   141,
     4,     7,   211,     6,     0,     4,   141,    92,     7,   212,
     6,     0,     4,   139,   203,   140,   141,    92,     7,   212,
     6,     0,    64,   137,     4,   138,   141,     4,     7,   203,
     6,     0,    64,   137,     4,   138,   141,     4,     7,   215,
     6,     0,   203,     0,   215,     0,    43,   137,   203,   138,
     7,   205,     6,     0,    60,    43,   137,   172,   138,     7,
   208,     6,     0,    75,    43,    99,   137,   203,   138,     7,
   208,     6,     0,   102,    99,   137,   203,   138,     7,   203,
     6,     0,   104,    99,   137,   203,   138,     7,   203,     6,
     0,   100,    99,   137,   203,   138,     7,   208,     6,     0,
   107,    99,   137,   203,   138,     7,     5,   208,     6,     0,
   101,    99,   137,   203,   138,     7,     5,     6,     0,    52,
    53,    99,   208,     6,     0,    75,    43,   208,     7,   208,
     6,     0,    75,    46,   208,     7,   208,     6,     0,    52,
    53,   208,     7,   203,     6,     0,    46,   137,   203,   138,
     7,   208,     6,     0,    50,   137,   203,   138,     7,   208,
     6,     0,    44,   137,   203,   138,     7,   208,     6,     0,
    44,   137,   203,   138,     7,   208,    56,   205,     6,     0,
    45,   137,   203,   138,     7,   208,     6,     0,    45,   137,
   203,   138,     7,   208,    56,   205,     6,     0,    54,   137,
   203,   138,     7,   144,   203,   143,   203,   143,     5,   143,
     5,   143,     5,   145,     6,     0,    86,   137,   203,   138,
     7,   208,     6,     0,    87,   137,   203,   138,     7,   208,
     6,     0,    88,   137,   203,   138,     7,   208,    90,   208,
    89,   203,     6,     0,    46,    71,   137,   203,   138,     7,
   208,     6,     0,    60,    46,   137,   172,   138,     7,   208,
     6,     0,    56,    49,   137,   203,   138,     7,   208,     6,
     0,    57,    49,   137,   203,   138,     7,   208,     6,     0,
    12,    13,     6,     0,    13,    49,   203,     6,     0,    54,
    49,   137,   203,   138,     7,     5,     5,     5,     6,     0,
    47,   137,   203,   138,     7,   208,     6,     0,    48,   137,
   203,   138,     7,   208,     6,     0,    49,    71,   137,   203,
   138,     7,   208,     6,     0,    60,    49,   137,   172,   138,
     7,   208,     6,     0,    59,    51,   137,   203,   138,     7,
   208,     6,     0,    51,   137,   203,   138,     7,   208,     6,
     0,    60,    51,   137,   172,   138,     7,   208,     6,     0,
    66,   205,   144,   175,   145,     0,    65,   144,   205,   143,
   205,   143,   203,   145,   144,   175,   145,     0,    67,   205,
   144,   175,   145,     0,    68,   144,   205,   143,   203,   145,
   144,   175,   145,     0,   177,     0,   176,     0,   174,     0,
     0,   176,   173,     0,   176,    43,   144,   210,   145,     6,
     0,   176,    46,   144,   210,   145,     6,     0,   176,    49,
   144,   210,   145,     6,     0,   176,    51,   144,   210,   145,
     6,     0,    70,   144,   176,   145,     0,    70,     4,   139,
   203,   140,     6,     0,    78,     4,   139,   203,   140,     6,
     0,    79,     4,   139,   203,   140,     6,     0,    73,   144,
   176,   145,     0,    73,     4,   139,   203,   140,     6,     0,
    73,     4,     6,     0,    73,     4,     4,     6,     0,    91,
   211,   144,   176,   145,     0,   108,   214,     6,     0,   109,
   214,     6,     0,   108,   144,   176,   145,     0,   109,   144,
   176,   145,     0,     4,   215,     6,     0,     4,     4,   139,
   203,   140,   214,     6,     0,     4,     4,     4,   139,   203,
   140,     6,     0,     4,   203,     6,     0,    64,   137,     4,
   138,   141,     4,     6,     0,    85,     4,     6,     0,    98,
     6,     0,    40,     6,     0,    40,   144,   203,   143,   203,
   143,   203,   143,   203,   143,   203,   143,   203,   145,     6,
     0,    41,     6,     0,    93,   137,   203,     8,   203,   138,
     0,    93,   137,   203,     8,   203,     8,   203,   138,     0,
    93,     4,    94,   144,   203,     8,   203,   145,     0,    93,
     4,    94,   144,   203,     8,   203,     8,   203,   145,     0,
    95,     0,   107,     4,     0,   105,     0,   106,     4,     6,
     0,    96,   137,   203,   138,     0,    97,     0,    69,   205,
   144,   176,   145,     0,    69,   144,   205,   143,   205,   143,
   203,   145,   144,   176,   145,     0,    69,   144,   205,   143,
   205,   143,   205,   143,   203,   145,   144,   176,   145,     0,
     0,    69,   205,   144,   176,   184,   198,   145,     0,     0,
    69,   144,   205,   143,   205,   143,   203,   145,   144,   176,
   185,   198,   145,     0,     0,    69,   144,   205,   143,   205,
   143,   205,   143,   203,   145,   144,   176,   186,   198,   145,
     0,     0,    69,   144,   176,   187,   198,   145,     0,     0,
    69,     4,   139,   203,   140,   144,   176,   188,   198,   145,
     0,    69,    43,   144,   203,   143,   205,   145,     6,     0,
    69,    46,   144,   203,   143,   205,   145,     6,     0,    69,
    49,   144,   203,   143,   205,   145,     6,     0,    69,    43,
   144,   203,   143,   205,   143,   205,   143,   203,   145,     6,
     0,    69,    46,   144,   203,   143,   205,   143,   205,   143,
   203,   145,     6,     0,    69,    49,   144,   203,   143,   205,
   143,   205,   143,   203,   145,     6,     0,    69,    43,   144,
   203,   143,   205,   143,   205,   143,   205,   143,   203,   145,
     6,     0,    69,    46,   144,   203,   143,   205,   143,   205,
   143,   205,   143,   203,   145,     6,     0,    69,    49,   144,
   203,   143,   205,   143,   205,   143,   205,   143,   203,   145,
     6,     0,     0,    69,    43,   144,   203,   143,   205,   145,
   189,   144,   198,   145,     6,     0,     0,    69,    46,   144,
   203,   143,   205,   145,   190,   144,   198,   145,     6,     0,
     0,    69,    49,   144,   203,   143,   205,   145,   191,   144,
   198,   145,     6,     0,     0,    69,    43,   144,   203,   143,
   205,   143,   205,   143,   203,   145,   192,   144,   198,   145,
     6,     0,     0,    69,    46,   144,   203,   143,   205,   143,
   205,   143,   203,   145,   193,   144,   198,   145,     6,     0,
     0,    69,    49,   144,   203,   143,   205,   143,   205,   143,
   203,   145,   194,   144,   198,   145,     6,     0,     0,    69,
    43,   144,   203,   143,   205,   143,   205,   143,   205,   143,
   203,   145,   195,   144,   198,   145,     6,     0,     0,    69,
    46,   144,   203,   143,   205,   143,   205,   143,   205,   143,
   203,   145,   196,   144,   198,   145,     6,     0,     0,    69,
    49,   144,   203,   143,   205,   143,   205,   143,   205,   143,
   203,   145,   197,   144,   198,   145,     6,     0,   199,     0,
   198,   199,     0,    76,   144,   203,   145,     6,     0,    76,
   144,   208,   143,   208,   145,     6,     0,    76,   144,   208,
   143,   208,   143,   208,   145,     6,     0,    72,     6,     0,
    77,   137,   203,   138,     7,   208,    61,   203,     6,     0,
    58,    46,   208,     7,   203,     6,     0,    58,    46,   208,
     7,   203,    61,    63,   203,     6,     0,    58,    46,   208,
     7,   203,    61,    62,   203,     6,     0,    58,    49,   144,
   203,   145,     7,   208,     6,     0,    58,    49,   144,   203,
   145,     7,   208,     4,     6,     0,    55,    49,   144,   203,
   145,     7,   208,     6,     0,    58,    51,   144,   203,   145,
     7,   208,     6,     0,    72,    49,   208,     7,   203,     6,
     0,    72,    49,   208,     6,     0,    43,   144,   210,   145,
    94,    49,   144,   203,   145,     6,     0,    46,   144,   210,
   145,    94,    49,   144,   203,   145,     6,     0,    46,   144,
   210,   145,    94,    51,   144,   203,   145,     6,     0,    49,
   144,   210,   145,    94,    51,   144,   203,   145,     6,     0,
    74,     6,     0,   204,     0,   137,   203,   138,     0,   128,
   203,     0,   127,   203,     0,   132,   203,     0,   203,   128,
   203,     0,   203,   127,   203,     0,   203,   129,   203,     0,
   203,   130,   203,     0,   203,   131,   203,     0,   203,   136,
   203,     0,   203,   123,   203,     0,   203,   125,   203,     0,
   203,   124,   203,     0,   203,   126,   203,     0,   203,   121,
   203,     0,   203,   122,   203,     0,   203,   120,   203,     0,
   203,   119,   203,     0,   203,   118,   203,     8,   203,     0,
    14,   137,   203,   138,     0,    15,   137,   203,   138,     0,
    16,   137,   203,   138,     0,    17,   137,   203,   138,     0,
    18,   137,   203,   138,     0,    19,   137,   203,   138,     0,
    20,   137,   203,   138,     0,    21,   137,   203,   138,     0,
    22,   137,   203,   138,     0,    24,   137,   203,   138,     0,
    25,   137,   203,   143,   203,   138,     0,    26,   137,   203,
   138,     0,    27,   137,   203,   138,     0,    28,   137,   203,
   138,     0,    29,   137,   203,   138,     0,    30,   137,   203,
   138,     0,    31,   137,   203,   138,     0,    32,   137,   203,
   143,   203,   138,     0,    33,   137,   203,   143,   203,   138,
     0,    34,   137,   203,   143,   203,   138,     0,    23,   137,
   203,   138,     0,    14,   139,   203,   140,     0,    15,   139,
   203,   140,     0,    16,   139,   203,   140,     0,    17,   139,
   203,   140,     0,    18,   139,   203,   140,     0,    19,   139,
   203,   140,     0,    20,   139,   203,   140,     0,    21,   139,
   203,   140,     0,    22,   139,   203,   140,     0,    24,   139,
   203,   140,     0,    25,   139,   203,   143,   203,   140,     0,
    26,   139,   203,   140,     0,    27,   139,   203,   140,     0,
    28,   139,   203,   140,     0,    29,   139,   203,   140,     0,
    30,   139,   203,   140,     0,    31,   139,   203,   140,     0,
    32,   139,   203,   143,   203,   140,     0,    33,   139,   203,
   143,   203,   140,     0,    34,   139,   203,   143,   203,   140,
     0,    23,   139,   203,   140,     0,     3,     0,     9,     0,
    10,     0,    11,     0,   111,     0,   112,     0,   113,     0,
     4,     0,     4,   146,   144,   203,   145,     0,     4,   139,
   203,   140,     0,   142,     4,   139,   140,     0,     4,   170,
     0,     4,   139,   203,   140,   170,     0,     4,   141,     4,
     0,     4,   139,   203,   140,   141,     4,     0,     4,   141,
     4,   170,     0,     4,   139,   203,   140,   141,     4,   170,
     0,   110,   137,     5,   143,   203,   138,     0,   206,     0,
   128,   205,     0,   127,   205,     0,   205,   128,   205,     0,
   205,   127,   205,     0,   144,   203,   143,   203,   143,   203,
   143,   203,   143,   203,   145,     0,   144,   203,   143,   203,
   143,   203,   143,   203,   145,     0,   144,   203,   143,   203,
   143,   203,   145,     0,   137,   203,   143,   203,   143,   203,
   138,     0,   208,     0,   207,   143,   208,     0,   203,     0,
   209,     0,   144,   145,     0,   144,   210,   145,     0,   128,
   144,   210,   145,     0,   203,   129,   144,   210,   145,     0,
   128,   209,     0,   203,   129,   209,     0,   203,     8,   203,
     0,   203,     8,   203,     8,   203,     0,    43,   144,   203,
   145,     0,   174,     0,   177,     0,   183,     0,     4,   139,
   140,     0,     4,   139,   144,   210,   145,   140,     0,   203,
     0,   209,     0,   210,   143,   203,     0,   210,   143,   209,
     0,   144,   203,   143,   203,   143,   203,   143,   203,   145,
     0,   144,   203,   143,   203,   143,   203,   145,     0,     4,
     0,     4,   141,    91,   141,     4,     0,   144,   213,   145,
     0,     4,   139,   203,   140,   141,    92,     0,   211,     0,
   213,   143,   211,     0,   215,     0,     4,     0,     5,     0,
    42,     0,    37,   137,   214,   143,   214,   138,     0,    38,
   137,   214,   138,     0,    39,   137,   214,   138,     0,    36,
   137,   214,   138,     0,    36,   137,   214,   143,   210,   138,
     0,    36,   137,     4,   141,     4,   138,     0,    36,   137,
     4,   139,   203,   140,   141,     4,   138,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   145,   147,   152,   154,   157,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   175,
   180,   186,   192,   207,   220,   248,   256,   265,   273,   274,
   275,   276,   277,   278,   281,   284,   288,   291,   295,   486,
   500,   510,   516,   523,   531,   537,   543,   550,   558,   564,
   570,   580,   585,   589,   598,   600,   601,   602,   603,   606,
   608,   611,   646,   685,   739,   756,   774,   785,   802,   809,
   823,   840,   866,   893,   907,   924,   938,   955,   975,   998,
  1008,  1022,  1027,  1035,  1061,  1077,  1098,  1105,  1116,  1131,
  1146,  1153,  1165,  1199,  1235,  1257,  1275,  1293,  1311,  1337,
  1355,  1381,  1401,  1425,  1449,  1475,  1492,  1511,  1529,  1567,
  1571,  1575,  1580,  1602,  1624,  1640,  1660,  1677,  1694,  1714,
  1720,  1725,  1730,  1737,  1739,  1740,  1743,  1748,  1752,  1775,
  1798,  1821,  1848,  1861,  1867,  1873,  1884,  1894,  1904,  1920,
  1938,  1952,  1959,  1965,  1974,  1987,  2038,  2053,  2068,  2088,
  2098,  2120,  2124,  2129,  2134,  2144,  2161,  2177,  2203,  2230,
  2262,  2269,  2274,  2280,  2284,  2292,  2301,  2309,  2317,  2321,
  2329,  2333,  2341,  2345,  2353,  2357,  2364,  2368,  2380,  2387,
  2394,  2401,  2408,  2415,  2422,  2429,  2436,  2443,  2447,  2454,
  2458,  2465,  2469,  2476,  2480,  2487,  2491,  2498,  2502,  2509,
  2513,  2520,  2524,  2531,  2535,  2545,  2549,  2554,  2564,  2586,
  2610,  2614,  2637,  2656,  2674,  2692,  2721,  2756,  2761,  2788,
  2802,  2820,  2827,  2833,  2836,  2844,  2854,  2856,  2857,  2858,
  2859,  2860,  2861,  2862,  2863,  2870,  2871,  2872,  2873,  2874,
  2875,  2876,  2877,  2878,  2879,  2880,  2881,  2882,  2883,  2884,
  2885,  2886,  2887,  2888,  2889,  2890,  2891,  2892,  2893,  2894,
  2895,  2896,  2897,  2898,  2899,  2900,  2901,  2903,  2904,  2905,
  2906,  2907,  2908,  2909,  2910,  2911,  2912,  2913,  2914,  2915,
  2916,  2917,  2918,  2919,  2920,  2921,  2922,  2923,  2928,  2933,
  2934,  2935,  2936,  2937,  2938,  2942,  2958,  2973,  2993,  3007,
  3020,  3043,  3061,  3079,  3097,  3115,  3122,  3127,  3131,  3135,
  3139,  3145,  3150,  3154,  3158,  3164,  3170,  3177,  3183,  3187,
  3192,  3196,  3204,  3214,  3223,  3231,  3237,  3248,  3268,  3278,
  3288,  3298,  3315,  3341,  3347,  3351,  3355,  3367,  3372,  3384,
  3391,  3412,  3417,  3431,  3437,  3443,  3448,  3454,  3459,  3467,
  3475,  3489,  3503,  3507,  3526,  3548
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tAttractor",
"tLayers","tHole","tAlias","tAliasWithOptions","tText2D","tText3D","tInterpolationScheme",
"tTime","tGrain","tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tField",
"tThreshold","tStructured","tLatLon","tGrad","tPostView","tReturn","tCall","tFunction",
"tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND",
"tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'",
"'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem",
"SendToFile","Printf","View","Views","ElementCoords","ElementValues","Element",
"@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","PhysicalId",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","@18","@19","ExtrudeParameters","ExtrudeParameter",
"Transfinite","Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExprVar","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   147,   147,   148,   148,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   150,
   150,   151,   151,   151,   151,   152,   152,   153,   153,   153,
   153,   153,   153,   153,   154,   154,   155,   155,   157,   158,
   156,   159,   159,   161,   160,   162,   162,   164,   163,   165,
   165,   167,   166,   168,   169,   169,   169,   169,   169,   170,
   170,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   172,   172,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   174,
   174,   174,   174,   175,   175,   175,   176,   176,   176,   176,
   176,   176,   177,   177,   177,   177,   178,   178,   178,   178,
   179,   180,   180,   180,   180,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   183,   183,   183,   184,   183,
   185,   183,   186,   183,   187,   183,   188,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   189,   183,   190,
   183,   191,   183,   192,   183,   193,   183,   194,   183,   195,
   183,   196,   183,   197,   183,   198,   198,   199,   199,   199,
   199,   199,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   201,   201,   201,   201,   202,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   205,   205,   205,   205,
   205,   206,   206,   206,   206,   207,   207,   208,   208,   208,
   208,   208,   208,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   210,   210,   210,   210,   211,   211,   211,
   211,   212,   212,   213,   213,   214,   214,   215,   215,   215,
   215,   215,   215,   215,   215,   215
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
    14,     0,     6,     6,     1,     1,     1,     1,     1,     1,
     1,     4,     7,     9,     6,     6,     3,     6,     4,     6,
     9,     6,     9,     5,     8,     8,    11,     6,     9,     9,
     9,     1,     1,     7,     8,     9,     8,     8,     8,     9,
     8,     5,     6,     6,     6,     7,     7,     7,     9,     7,
     9,    17,     7,     7,    11,     8,     8,     8,     8,     3,
     4,    10,     7,     7,     8,     8,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     6,     6,
     6,     6,     4,     6,     6,     6,     4,     6,     3,     4,
     5,     3,     3,     4,     4,     3,     7,     7,     3,     7,
     3,     2,     2,    15,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     5,    11,    13,     0,     7,
     0,    13,     0,    15,     0,     6,     0,    10,     8,     8,
     8,    12,    12,    12,    14,    14,    14,     0,    12,     0,
    12,     0,    12,     0,    16,     0,    16,     0,    16,     0,
    18,     0,    18,     0,    18,     1,     2,     5,     7,     9,
     2,     9,     6,     9,     9,     8,     9,     8,     8,     6,
     4,    10,    10,    10,    10,     2,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     4,     4,     2,
     5,     3,     6,     4,     7,     6,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     1,     3,     1,     1,     2,
     3,     4,     5,     2,     3,     3,     5,     4,     1,     1,
     1,     3,     6,     1,     1,     3,     3,     9,     7,     1,
     5,     3,     6,     1,     3,     1,     1,     1,     1,     6,
     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   160,     0,   165,     0,     0,
     0,     0,     0,   162,     0,     0,     0,     0,     4,     6,
     5,     7,     8,     9,    10,    11,    12,    13,    19,    18,
    14,    15,    16,    17,   289,   296,   348,    55,   290,   291,
   292,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   349,     0,   293,   294,
   295,    56,    57,    58,    59,     0,     0,     0,    60,    61,
     0,     0,     0,     0,     0,     0,     0,   227,     0,     0,
     0,     0,   153,     0,   155,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     0,     0,     0,     0,     0,     0,   127,     0,     0,   127,
     0,     0,   127,   226,     0,     0,     0,     0,     0,     0,
     0,     0,   340,     0,     0,     0,     0,     0,   152,     0,
     0,     0,     0,     0,   161,     0,   347,   348,   127,     0,
   346,   127,     0,     0,     0,     0,     0,   300,     0,    28,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   296,   230,
   229,   231,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    67,   149,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   146,   110,
     0,     0,     0,     0,   296,     0,     0,   329,   330,   331,
   334,   335,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   318,     0,   319,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   309,   308,     0,     0,     0,
     0,   127,   127,     0,     0,     0,     0,     0,     0,     0,
     0,   175,     0,   127,     0,     0,     0,     0,   139,     0,
     0,     0,     0,     0,     0,     0,   151,     0,     0,     0,
     0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
   163,     0,     0,   142,     0,   143,     0,     0,   302,     0,
     0,     0,    69,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   347,     0,     0,     0,     0,
     0,     0,   228,     0,     0,     0,     0,    55,     0,     0,
     0,     0,     0,    62,     0,   245,   244,   242,   243,   238,
   240,   239,   241,   233,   232,   234,   235,   236,   237,   111,
     0,     0,     0,     0,     0,     0,   229,   324,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   320,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    82,
    83,     0,     0,     0,     0,     0,     0,     0,   311,   310,
   126,     0,   125,   124,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   128,     0,     0,   169,
     0,   133,   221,     0,   140,     0,   137,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   164,     0,     0,     0,     0,     0,   144,   145,     0,   298,
   304,     0,    28,    39,     0,     0,     0,    52,     0,     0,
    29,    30,    31,    32,    33,    34,   247,   268,   248,   269,
   249,   270,   250,   271,   251,   272,   252,   273,   253,   274,
   254,   275,   255,   276,   267,   288,   256,   277,     0,     0,
   258,   279,   259,   280,   260,   281,   261,   282,   262,   283,
   263,   284,     0,     0,     0,     0,     0,     0,     0,     0,
   353,     0,     0,   351,   352,     0,     0,     0,     0,     0,
    55,     0,     0,     0,     0,     0,    74,     0,     0,     0,
     0,   299,     0,    22,    20,     0,     0,     0,     0,   332,
     0,     0,   326,   234,   325,   336,   337,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
     0,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   120,   122,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   206,     0,   166,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   141,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   301,     0,   297,     0,     0,     0,     0,
     0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   298,    65,    66,
     0,     0,     0,     0,     0,    68,    70,    72,     0,     0,
   344,     0,    78,   246,    21,     0,     0,     0,     0,     0,
   328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   322,     0,    95,     0,     0,
     0,     0,     0,   213,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   127,     0,     0,
     0,     0,     0,     0,     0,   211,     0,     0,   176,   207,
     0,     0,   134,   220,   138,     0,    93,    94,   135,   136,
     0,     0,     0,   341,     0,     0,     0,   156,     0,     0,
     0,     0,     0,   148,   303,   147,     0,     0,     0,     0,
     0,   316,     0,     0,   257,   278,   264,   285,   265,   286,
   266,   287,     0,   355,   354,   350,   306,     0,    55,     0,
     0,     0,     0,    63,     0,     0,     0,   342,    23,    24,
     0,     0,    84,     0,   327,     0,    98,     0,   100,     0,
     0,    96,     0,     0,   113,   114,     0,     0,    97,   118,
   323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   150,     0,     0,     0,     0,
   127,   177,     0,   188,     0,   190,     0,   192,     0,     0,
     0,     0,   318,     0,     0,     0,     0,   170,     0,   103,
   104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   305,    27,     0,    35,     0,     0,     0,     0,     0,    37,
     0,     0,     0,     0,     0,    75,     0,     0,    76,     0,
   345,     0,     0,   333,     0,     0,     0,   106,     0,     0,
   115,     0,     0,     0,   218,   108,   109,     0,     0,     0,
   216,   219,   117,    85,   107,   116,   119,     0,     0,     0,
   315,     0,   314,     0,     0,     0,   179,     0,     0,   180,
     0,     0,   181,     0,   129,   130,   131,   132,     0,     0,
     0,     0,     0,     0,     0,     0,   339,     0,   158,   157,
    89,    91,    87,    88,     0,    40,     0,     0,     0,   317,
     0,     0,     0,     0,     0,    64,    71,    73,     0,    79,
     0,    25,     0,     0,    99,   101,     0,     0,     0,     0,
     0,   215,   214,   217,    80,    81,   127,     0,   123,     0,
     0,     0,     0,     0,     0,     0,   208,     0,     0,   127,
     0,    86,     0,     0,     0,    90,     0,    36,     0,     0,
     0,    38,    53,    54,   356,     0,   343,     0,   222,   223,
   224,   225,   112,     0,     0,     0,   313,   178,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   171,     0,     0,   338,   159,     0,     0,     0,     0,    77,
     0,     0,   121,     0,   194,     0,     0,   196,     0,     0,
   198,     0,     0,     0,   209,     0,   167,     0,   127,   105,
     0,    44,     0,    50,     0,     0,     0,   312,   182,     0,
     0,   189,   183,     0,     0,   191,   184,     0,     0,   193,
     0,     0,     0,   173,     0,     0,     0,     0,     0,     0,
     0,   200,     0,   202,     0,   204,   210,   212,   172,   168,
     0,    41,     0,    48,     0,     0,     0,     0,   185,     0,
     0,   186,     0,     0,   187,     0,     0,     0,    42,     0,
     0,   154,     0,     0,     0,     0,     0,     0,     0,   174,
     0,     0,     0,     0,     0,   195,     0,   197,     0,   199,
     0,    43,    45,     0,    46,     0,   102,     0,     0,     0,
     0,     0,    51,   201,   203,   205,    47,    49,     0,     0,
     0
};

static const short yydefgoto[] = {  1279,
     2,    59,   666,    60,    61,   402,   983,   989,   591,   758,
  1117,  1238,   592,  1206,  1264,   593,  1240,   594,   595,   762,
   596,   125,   218,    62,   519,   547,   308,   532,   533,   309,
    66,    67,    68,    69,    70,   310,   730,  1178,  1221,   548,
  1035,  1038,  1041,  1044,  1190,  1194,  1198,  1230,  1233,  1236,
   726,   727,    72,    73,    74,   328,   128,   346,   170,   881,
   882,   330,   313,   195,   661,   792,   210,   211
};

static const short yypact[] = {  3165,
    77,  3242,-32768,  2261,    96,    78,    56,    -2,   157,   -34,
    62,    68,   -39,   133,   168,   -40,   174,   184,   165,   -21,
   276,   284,   319,   217,   318,   702,   237,   233,   255,   255,
   249,   263,    12,   329,    15,   397,   234,   407,   410,   411,
   269,   297,   298,    23,    41,-32768,   321,-32768,   433,   363,
   367,   370,   371,-32768,   480,    22,    10,    17,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    16,    25,   662,-32768,-32768,
-32768,    40,   204,   328,   374,   409,   437,   457,   509,   522,
   526,   532,   543,   554,   566,   574,   596,   615,   622,   630,
   631,   640,   357,   373,   380,   395,-32768,   404,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2472,  2472,  2472,-32768,-32768,
  2472,  2019,    20,   496,  2472,   498,  1165,-32768,   512,   555,
  2472,   560,-32768,  2472,-32768,  2472,  2401,  2472,  2472,   447,
  2472,  2401,  2472,  2472,   456,  2401,  2472,  2472,  1384,   461,
  2472,   387,   481,   486,  1676,   482,   493,   508,   535,   540,
   547,   565,   577,   255,   255,   255,  2472,  2472,   -70,-32768,
   -42,   255,   499,   562,   570,   578,  2226,   173,   517,-32768,
  1676,    58,-32768,-32768,  1540,  1676,   589,   599,   744,  2472,
  2472,  2472,   614,  2472,   618,   677,  2472,  2472,-32768,   656,
   690,   693,   709,   766,-32768,   724,-32768,-32768,-32768,   837,
-32768,-32768,   860,   735,  2472,   872,   734,-32768,   255,-32768,
   871,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,
  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,
  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,
  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,
  2472,  2472,  2472,   616,   637,   637,   637,   874,   590,   745,
   745,   745,  5465,    18,  2401,  3253,   381,   754,   889,   760,
  1310,-32768,-32768,  2472,  2472,  2472,  2472,  2472,  2472,  2472,
  2472,  2472,  2472,  2472,  2472,  2472,  2472,  2472,-32768,-32768,
  1348,   159,  3998,  5486,   593,   756,  2401,-32768,-32768,-32768,
  1411,-32768,   394,  5507,  5528,  2472,  5549,   470,  5570,  5591,
  2472,   519,  5612,  5633,  1676,  1812,  1239,  1603,   895,-32768,
  2472,  5654,  2472,  2472,  2472,   896,  2472,  2472,  2472,  2531,
  2531,  2531,  2531,   768,   325,-32768,-32768,  4024,  4050,   255,
   255,   642,   642,   350,  2472,  2472,  2472,  2472,  2226,  2226,
  2472,  3310,   400,-32768,  2472,   974,    93,   898,-32768,  2472,
  2574,   770,   901,   903,  2472,  2472,-32768,  5675,  5696,  5717,
   820,  4076,-32768,   771,  1739,  5738,  2472,  2472,  2472,  2472,
-32768,  2472,  2639,-32768,  2704,-32768,  2472,  4752,   -73,  2472,
   315,     8,-32768,  5759,  4775,  5780,  4798,  5801,  4821,  5822,
  4844,  5843,  4867,  5864,  4890,  5885,  4913,  5906,  4936,  5927,
  4959,  5948,  4982,  5969,  5005,  4102,  4128,  5990,  5028,  6011,
  5051,  6032,  5074,  6053,  5097,  6074,  5120,  6095,  5143,  4154,
  4180,  4206,  4232,  4258,  4284,   362,   177,   769,   776,   778,
   774,  2472,-32768,  1676,  1676,   552,   358,   662,  2472,   912,
   915,    26,   782,-32768,  1875,   762,   867,   711,   711,   613,
   613,   613,   613,   558,   558,   745,   745,   745,   745,-32768,
     1,  2401,  2472,   916,  2084,  2472,   745,-32768,  2472,  2401,
  2401,   830,   919,   920,  6116,   921,   835,   923,   924,  6137,
   838,   926,   929,   931,  2401,-32768,   635,  1948,  2472,  6158,
   932,  1467,  6179,  6200,  2472,  3062,  3384,  6221,   802,  6599,
-32768,   803,   804,   805,   806,   255,  2472,  2472,-32768,-32768,
-32768,   800,  3310,-32768,   801,  2472,  5166,  4310,  4336,  4362,
  3972,    38,   -36,     2,    73,   852,-32768,    -7,   255,  2769,
  5189,-32768,-32768,  2472,-32768,  5212,-32768,  2472,  1676,  1676,
  5235,  5258,   945,   947,   948,   815,  2472,  2834,  2472,  2472,
-32768,  6242,  6263,  6284,  6305,  6326,-32768,-32768,  5281,    39,
-32768,  3412,-32768,-32768,   822,   823,   813,-32768,   824,   957,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2472,  2472,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  2472,  2472,  2472,  2472,  2472,  2472,  2472,   976,
-32768,  2401,   637,-32768,-32768,  2472,  5304,   975,   979,   859,
-32768,    32,  2472,   995,   996,  1502,-32768,   997,   866,    23,
  1000,-32768,  2472,-32768,   883,   637,   207,  4388,   255,-32768,
  2401,  3440,  3011,   745,-32768,  1411,-32768,   960,  1676,  1676,
  1003,  1676,   733,  1676,  1676,  1005,   962,  1676,  1676,-32768,
   643,-32768,  2401,  1638,  1007,   888,  1008,  1009,  1020,   848,
  1028,  1029,  1030,  1031,  1032,  1033,  1034,  1038,   402,  4414,
  4440,-32768,-32768,  3468,   899,   255,   255,   255,  2401,  2401,
  2401,  2401,  1039,   900,   909,   -38,-32768,   429,-32768,    -7,
  1041,  1774,  1042,  6347,  1045,  1046,  1048,  1050,  1676,  1676,
  1676,  1053,  4466,-32768,  3032,  1078,  1051,  1052,  1056,  1058,
  1059,  1061,  1064,-32768,  1065,-32768,    13,   933,  2472,  2472,
  1676,   928,  2472,-32768,  6368,  5327,  6389,  5350,  6410,  5373,
  6431,  5396,  5419,   935,   223,   939,  6452,   -62,-32768,-32768,
    99,   454,   938,  1073,  2048,-32768,-32768,-32768,    23,  2472,
-32768,   646,-32768,  6599,-32768,  1076,    35,  2472,    57,   647,
-32768,  2472,   944,    61,    81,  1676,  1085,   951,   952,  1086,
  1091,  1676,   955,  1095,  1097,-32768,   651,-32768,  1100,  2472,
  1676,  1676,  1676,-32768,    89,  1676,  1676,  1676,  1676,  1676,
  1676,  1676,   272,  2472,  2472,  2472,   963,-32768,   -77,   171,
   274,   655,   673,   676,   679,-32768,  1676,  2472,-32768,-32768,
  2226,    53,-32768,-32768,-32768,  1099,-32768,-32768,-32768,-32768,
  1103,  1105,  1022,-32768,  2472,  2472,  2472,-32768,  1676,  1108,
  2472,  2472,  1109,-32768,   -73,-32768,  1112,  2472,  4492,  4518,
   680,-32768,  2472,  6473,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   980,-32768,-32768,-32768,-32768,  1676,   662,  2472,
  1114,  1111,    26,-32768,  1116,  5442,    23,-32768,-32768,-32768,
   637,  4544,-32768,   983,  6599,  2472,-32768,   255,-32768,   255,
  1118,-32768,  2472,  2472,-32768,-32768,  1120,  2472,-32768,-32768,
-32768,  1122,  4570,  1123,  1124,  1125,  2472,  2472,   779,  1126,
  1128,  1129,  1130,  1131,  1132,-32768,  2531,  3496,  6494,  3300,
   642,  3310,   255,  1133,   255,  1134,   255,  1135,  1136,  1137,
  1141,  1142,   302,   985,  6515,  3524,   435,-32768,  1676,-32768,
-32768,  1676,  3328,   684,  6536,  1143,  1145,  2186,  2327,  1676,
-32768,-32768,   267,  6599,  2472,  2472,  1676,  1010,   683,  6599,
  1676,  1151,  1150,  1152,  2582,-32768,  1153,  1155,-32768,  1016,
-32768,  1156,  2472,-32768,  3552,    74,    76,-32768,  3580,  3608,
-32768,  3636,  1154,  2472,-32768,-32768,-32768,  2647,  2842,  1158,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2907,  1161,  1024,
-32768,  2472,-32768,  1025,    -7,   452,-32768,  1035,   476,-32768,
  1037,   479,-32768,  1040,-32768,-32768,-32768,-32768,  1166,  1676,
  1167,  1044,  2472,  1169,  1087,  2472,-32768,  2472,-32768,-32768,
-32768,-32768,-32768,-32768,  1171,-32768,  2472,  4596,  4622,-32768,
  1676,  2472,  1172,  1176,  1054,-32768,-32768,-32768,    23,-32768,
  1094,-32768,  4648,  1184,-32768,-32768,  1185,  1188,  1204,  1206,
  4674,-32768,-32768,-32768,-32768,-32768,   642,  3356,-32768,   197,
  2226,    -7,  2226,    -7,  2226,    -7,-32768,   706,  1676,-32768,
  3664,-32768,  2472,  3692,  3720,-32768,  1071,  6599,  2472,  2472,
   707,  6599,-32768,-32768,-32768,  1212,-32768,  2472,-32768,-32768,
-32768,-32768,-32768,  1214,  1075,  2472,-32768,-32768,  3748,   484,
   199,  3776,   497,   231,  3804,   501,   250,  1676,  1215,  1162,
  2899,  1080,  2969,-32768,-32768,  2472,  6557,  4700,    27,-32768,
  4726,  1079,-32768,  3832,  1219,  2472,  1223,  1224,  2472,  1232,
  1233,  2472,  1234,  1096,-32768,  2472,-32768,    -7,-32768,-32768,
   712,-32768,  2472,-32768,  1676,  2472,  1240,-32768,-32768,  1102,
  3860,-32768,-32768,  1107,  3888,-32768,-32768,  1168,  3916,-32768,
  1238,  2992,   303,  2964,  1241,  1170,  6578,   713,  3944,  1138,
    -7,  1269,    -7,  1270,    -7,  1271,-32768,-32768,-32768,-32768,
    -7,-32768,   637,-32768,  1175,  1272,  1274,   336,-32768,  1177,
   364,-32768,  1178,   378,-32768,  1179,   413,   722,-32768,  1180,
  1676,-32768,  1157,  1291,    -7,  1292,    -7,  1293,    -7,-32768,
   637,  1294,   637,   727,  1304,-32768,   444,-32768,   525,-32768,
   533,-32768,-32768,   728,-32768,  1305,-32768,  1307,  1309,  1314,
   637,  1319,-32768,-32768,-32768,-32768,-32768,-32768,  1280,  1326,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   530,-32768,-32768,   746,-32768,   172,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -274,    19,-32768,   103,  1328,     7,  -351,  -172,    11,
-32768,-32768,-32768,-32768,-32768,  1329,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -564,  -684,-32768,-32768,-32768,    -3,-32768,   232,-32768, -1065,
   405,    44,    54,  -642,   431,-32768,   -58,     6
};


#define	YYLAST		6735


static const short yytable[] = {   213,
   127,   535,   459,   133,   362,  1121,   664,   366,    64,   129,
   371,   584,    65,   207,   208,   179,   584,   791,   182,   214,
   207,   208,   126,   277,   454,   205,   193,   150,   219,   659,
   145,   140,  1184,   723,   140,   782,   393,   724,   725,   395,
   910,   850,   207,   208,   196,   103,   104,   105,   106,   350,
   351,   107,   103,   104,   105,   106,   350,   351,   107,   119,
   120,   368,   913,   369,   723,   953,   917,   954,   724,   725,
   119,   120,   145,   352,   103,   104,   105,   106,   753,  1085,
   107,  1086,     3,   221,   350,   351,   919,   585,   586,   587,
   588,   589,   585,   586,   587,   588,   589,   141,   553,   554,
   141,   353,   136,   146,   142,   651,   849,   720,   130,   137,
   278,   279,   270,   271,   272,   151,   918,   273,   276,  1208,
   206,   281,   783,   784,   723,   665,   131,   301,   724,   725,
   303,   455,   304,   311,   314,   315,   920,   317,   311,   319,
   320,   134,   311,   323,   324,   721,   905,   332,   119,   120,
   937,   938,   590,   209,   215,   180,   216,   877,   183,   665,
   212,   217,   135,   348,   349,   852,   194,   850,   220,   660,
  1185,   119,   120,   349,   136,  1254,   222,   197,   223,   753,
   312,   719,   653,   350,   351,   312,   378,   379,   380,   312,
   382,   550,   132,   385,   386,   318,   370,   968,   138,   322,
   350,   351,   350,   351,   139,   447,   448,   449,   450,   148,
   568,   398,   112,   113,   114,   115,   722,   149,   404,   405,
   406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
   426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
   436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
   169,   171,   155,   178,  1001,   156,   173,   157,   723,   143,
   723,   311,   724,   725,   724,   725,   185,   946,   947,   186,
   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
   475,   476,   477,   478,   479,   460,   481,   350,   351,   350,
   351,   482,   723,   487,   144,   174,   724,   725,   175,   489,
   147,   176,   495,   955,   641,   956,   364,   500,   312,   642,
   148,   723,   487,   311,   152,   724,   725,   510,   456,   512,
   513,   514,   153,   516,   517,   518,   520,   520,   520,   520,
   224,  1138,   225,  1167,   797,   521,   521,   521,   521,   491,
   488,   537,   538,   539,   540,   270,   271,   541,   531,   531,
   895,   551,   534,   534,   651,   491,   556,   154,   158,   488,
   312,   561,   562,   163,   723,  1170,   164,   181,   724,   725,
   507,   165,   166,   572,   573,   574,   575,   458,   576,   165,
   166,   167,   172,   579,  1173,   345,   582,   347,   168,   167,
   350,   351,   184,   354,  1066,   190,   177,   723,   363,  1067,
   187,   724,   725,   188,   189,   850,   957,   581,   958,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   508,   296,   297,   191,   192,   723,  1126,   298,   199,   724,
   725,   350,   351,   522,   523,   524,  1049,  1219,   647,   723,
   401,   350,   351,   724,   725,   656,   850,   198,   583,   850,
   899,   200,   850,   655,   226,   201,   227,   526,   202,   203,
  1100,   112,   113,   114,   115,   654,   350,   351,   311,   668,
  1244,   647,   672,   204,   723,   673,   674,   676,   724,   725,
   119,   120,   536,   264,   112,   113,   114,   115,   652,   280,
   639,   311,   640,   282,   674,   694,   898,   900,  1246,   265,
   228,   700,   229,   119,   120,   723,   266,   299,   850,   724,
   725,   755,  1248,   710,   711,   312,   350,   351,   350,   351,
   333,   267,   714,   675,   677,   667,   491,  1141,   492,  1144,
   268,  1147,   549,   850,   834,   230,   850,   231,   312,   850,
   732,   675,   850,   329,   734,   350,   351,  1250,   691,   336,
   300,   350,   351,   743,   302,   745,   746,   112,   113,   114,
   115,   851,   850,   232,   850,   233,   850,  1053,   350,   351,
   344,   529,   530,   316,   776,   367,   119,   120,  1268,   373,
   374,   347,   321,   234,  1101,   235,   723,   331,   754,  1034,
   724,   725,   350,   351,   723,   350,   351,   796,   724,   725,
   350,   351,   491,  1203,   497,   765,   766,   334,  1103,   446,
   208,  1105,   335,   350,   351,   337,  1166,   350,   351,   767,
   768,   769,   770,   771,   772,   773,   338,   355,   311,  1169,
   207,   208,   777,  1172,   339,   236,  1228,   237,  1231,   785,
  1234,   103,   104,   105,   106,   365,  1237,   107,   238,   794,
   239,   491,   240,   501,   241,   952,   208,   311,   242,  1269,
   243,   340,   103,   104,   105,   106,   341,  1270,   107,   244,
  1257,   245,  1259,   342,  1261,   312,   295,   296,   297,   311,
   246,  1058,   247,   298,   491,   775,   650,   103,   104,   105,
   106,   343,   248,   107,   249,   356,    28,    29,    30,    31,
   250,    33,   251,   357,   312,   311,   311,   311,   311,    38,
    39,   358,   119,   120,   800,   119,   120,   375,   452,   504,
   216,   485,   252,   216,   253,   217,   312,   376,   217,   293,
   294,   295,   296,   297,   159,  1135,   817,   160,   298,   377,
   161,   254,   162,   255,   381,   879,   880,   709,   256,   884,
   257,   383,   312,   312,   312,   312,   258,   260,   259,   261,
   384,   391,   842,   843,   844,   845,   262,   491,   263,   692,
   728,   808,  1020,   809,  1021,   491,   906,   816,   907,   491,
   908,   914,   387,   491,   912,   931,   754,   491,   915,   959,
   901,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   491,   933,   960,   491,   298,
   961,   491,   987,   962,   988,  1072,   388,  1073,  1059,   389,
   948,   949,   950,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   394,   963,   965,   390,   298,   966,  1148,   987,
  1149,  1159,  1002,   824,  1072,   987,  1205,  1225,   648,   649,
   392,   973,   974,   975,  1251,   396,  1252,   978,   979,   987,
  1271,  1266,  1272,   397,   984,   399,   403,   400,   451,   990,
   298,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   981,   461,   462,   995,   298,   463,   486,
   799,   509,   515,   555,   994,   525,   558,   559,   825,   560,
   566,   643,  1005,   644,   569,   645,   646,   657,   658,  1009,
  1010,   662,   669,   678,  1012,   679,   680,   682,   683,   684,
   685,   687,   688,  1018,  1019,   689,   690,  1151,   696,   704,
   705,   706,   707,  1028,   712,   713,   708,   839,   840,   841,
   206,   739,  1029,   740,   741,   742,   761,   531,   759,   760,
   763,   534,   764,   735,   736,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   774,
   779,  1068,  1069,   298,   780,     5,     6,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   781,  1083,
   786,   787,   298,   789,   790,   793,  1204,   795,   803,   806,
  1091,   812,   813,   819,   821,   822,   542,    11,    12,   543,
    14,    15,   544,    17,   545,    19,   823,    20,  1098,    22,
    23,   820,    25,    26,   826,   827,   828,   829,   830,   831,
   832,   833,   838,   847,   846,   848,   853,   855,    37,  1111,
   857,   858,  1114,   859,  1115,   860,   864,   869,   870,    41,
    42,    43,   871,  1118,   872,   873,   874,   875,  1122,   878,
   876,   883,   894,    50,    51,    52,   896,    53,   902,   903,
   546,   909,   967,   804,   805,   867,   807,   916,   810,   811,
   922,   925,   814,   815,   923,   924,   926,  1139,   928,  1142,
   929,  1145,   930,   531,   932,   969,   951,   534,   970,  1153,
   971,   972,   977,   980,   997,  1157,  1158,   982,   552,   996,
   992,   999,  1004,  1008,  1161,  1011,  1013,  1050,  1015,  1016,
  1017,  1022,  1164,  1023,  1024,  1025,  1026,  1027,  1037,  1040,
  1043,  1045,  1046,   861,   862,   863,  1047,  1048,  1061,  1006,
  1062,  1007,   990,  1071,  1075,  1076,  1081,  1077,  1090,  1079,
  1080,  1082,  1191,  1094,  1239,  1195,  1096,  1097,  1199,  1099,
   283,  1107,  1202,  1109,  1112,  1113,  1116,  1123,  1102,  1207,
  1104,  1124,  1209,  1106,  1036,  1127,  1039,  1110,  1042,  1129,
  1130,  1125,  1262,  1131,  1265,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,  1132,
   921,  1133,  1277,   298,  1156,   868,   927,  1160,  1162,  1163,
  1175,  1187,  1176,  1179,  1189,   934,   935,   936,  1192,  1193,
   939,   940,   941,   942,   943,   944,   945,  1196,  1197,  1200,
  1201,    75,   305,  1217,  1210,  1211,  1222,    79,    80,    81,
  1213,   964,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   976,  1229,  1232,  1235,  1242,  1243,  1280,
  1227,   306,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,  1256,  1258,  1260,  1263,
   298,  1255,   993,    28,    29,    30,    31,    32,    33,  1267,
  1273,  1215,  1274,  1223,  1275,   464,    38,    39,  1241,  1276,
  1245,  1247,  1249,  1253,  1278,  1281,   911,  1181,   757,    63,
    71,     0,  1140,   998,  1143,     0,  1146,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
   110,   111,     0,   480,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   116,   307,     0,     0,     0,
   118,     0,     0,  1054,     0,   121,  1055,     0,     0,     0,
   124,     0,     0,   506,  1065,     0,    75,   305,     0,     0,
     0,  1070,    79,    80,    81,  1074,     0,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   489,     0,
     0,     0,     0,     0,     0,     0,   306,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,    28,    29,
    30,    31,    32,    33,  1108,     0,     0,     0,     0,     0,
     0,    38,    39,     0,     0,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,   325,   298,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,   110,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   788,     0,     0,
   116,   326,     0,  1150,     0,   118,     0,     0,     0,     0,
   121,     0,     0,     0,     0,   124,     0,   327,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   490,
   296,   297,    75,   305,     0,     0,   298,     0,    79,    80,
    81,     0,  1174,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,     0,     0,     0,     0,     0,     0,
     0,     0,   306,     0,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,    28,    29,    30,    31,    32,    33,
   489,   697,     0,     0,     0,     0,     0,    38,    39,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,   372,     0,
     0,     0,     0,   818,     0,     0,     0,     0,     0,   108,
   109,   110,   111,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   116,   326,     0,     0,
     0,   118,     0,     0,     0,     0,   121,     0,    75,   305,
     0,   124,     0,   327,    79,    80,    81,     0,     0,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     0,     0,     0,     0,     0,     0,     0,     0,   306,     0,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   508,   296,   297,     0,     0,     0,     0,   298,     0,
    28,    29,    30,    31,    32,    33,   570,     0,     0,     0,
     0,     0,     0,    38,    39,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,   854,
     0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   116,   326,     0,     0,     0,   118,     0,     0,
     0,     0,   121,     0,    75,   305,     0,   124,     0,   327,
    79,    80,    81,     0,     0,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,    28,    29,    30,    31,
    32,    33,   663,     0,     0,     0,     0,     0,     0,    38,
    39,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   109,   110,   111,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   116,   307,
     0,     0,     0,   118,     0,     0,     0,     0,   121,     0,
    75,   305,     0,   124,     0,   505,    79,    80,    81,     0,
     0,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,     0,     0,     0,     0,     0,     0,     0,     0,
   306,     0,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,    28,    29,    30,    31,    32,    33,     0,     0,
     0,    75,   269,     0,     0,    38,    39,    79,    80,    81,
     0,     0,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   904,     0,     0,     0,   108,   109,   110,
   111,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   116,   307,     0,     0,     0,   118,
     0,     0,     0,     0,   121,     0,    75,   269,     0,   124,
     0,   693,    79,    80,    81,     0,     0,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
   110,   111,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   116,   117,     0,     0,     0,
   118,     0,     0,     0,     0,   121,     0,     0,   274,     0,
   124,     0,   275,     0,     0,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
     0,  1063,     0,   108,   109,   110,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   116,   117,     0,     0,     0,   118,     0,     0,     0,     0,
   121,     0,     0,   670,     0,   124,     0,   671,    75,   269,
     0,     0,     0,     0,    79,    80,    81,     0,     0,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     0,     0,     0,    75,    76,    77,     0,    78,     0,    79,
    80,    81,     0,     0,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,     0,   103,   104,   105,   106,
     0,     0,   107,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1064,     0,     0,   108,   109,   110,   111,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   359,   360,     0,     0,     0,   118,     0,     0,
     0,     0,   361,     0,     0,     0,     0,   124,     0,   168,
   108,   109,   110,   111,   112,   113,   114,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     0,     0,   118,   119,   120,     0,     0,   121,     0,   122,
     0,   123,   124,    75,   305,     0,     0,     0,     0,    79,
    80,    81,     0,     0,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,     0,     0,     0,     0,     0,
     0,     0,     0,   306,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,    28,    29,    30,    31,    32,
    33,     0,     0,     0,    75,   269,     0,     0,    38,    39,
    79,    80,    81,     0,     0,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,     0,     0,     0,     0,
   108,   109,   110,   111,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   116,   307,     0,
     0,     0,   118,    75,   269,   208,     0,   121,     0,    79,
    80,    81,   124,     0,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,     0,   103,   104,   105,   106,
     0,     0,   107,     0,     0,     0,     0,     0,     0,     0,
     0,   108,   109,   110,   111,     5,     6,  1078,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   116,   117,
     0,     0,     0,   118,     0,     0,     0,     0,   121,     0,
     0,     0,     0,   124,     0,     0,   542,    11,    12,   543,
    14,    15,   544,    17,   545,    19,     0,    20,     0,    22,
    23,     0,    25,    26,     0,     0,     0,     0,     0,     0,
   108,   109,   110,   111,     0,     0,     0,     0,    37,     0,
     5,     6,  1092,     0,     0,     0,     0,   116,   117,    41,
    42,    43,   118,     0,     0,     0,     0,   121,     0,     0,
     0,     0,   124,    50,    51,    52,     0,    53,     0,     0,
   546,   542,    11,    12,   543,    14,    15,   544,    17,   545,
    19,     0,    20,     0,    22,    23,     0,    25,    26,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    37,     0,     5,     6,   298,   557,     0,
     0,     0,     0,     0,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    50,    51,
    52,     0,    53,     0,     0,   546,   542,    11,    12,   543,
    14,    15,   544,    17,   545,    19,     0,    20,     0,    22,
    23,     0,    25,    26,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    37,     0,
     5,     6,   298,   577,     0,     0,     0,     0,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,    51,    52,     0,    53,     0,     0,
   546,   542,    11,    12,   543,    14,    15,   544,    17,   545,
    19,     0,    20,     0,    22,    23,     0,    25,    26,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    37,     0,     5,     6,  1093,   578,     0,
     0,     0,     0,     0,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    50,    51,
    52,     0,    53,     0,     0,   546,   542,    11,    12,   543,
    14,    15,   544,    17,   545,    19,     0,    20,     0,    22,
    23,     0,    25,    26,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
     5,     6,  1095,   729,     0,     0,     0,     0,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,    51,    52,     0,    53,     0,     0,
   546,   542,    11,    12,   543,    14,    15,   544,    17,   545,
    19,     0,    20,     0,    22,    23,     0,    25,    26,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    37,  1180,     5,     6,   298,   744,     0,
     0,     0,     0,     0,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1218,    50,    51,
    52,     0,    53,     0,     0,   546,   542,    11,    12,   543,
    14,    15,   544,    17,   545,    19,     0,    20,   802,    22,
    23,     0,    25,    26,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    37,   866,
     0,     0,   298,  1177,     0,     0,     0,     0,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,    51,    52,     0,    53,     0,     0,
   546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,  1220,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,    -3,     1,     0,   298,    -3,     0,
     0,     0,     0,     0,     0,     0,    -3,    -3,     0,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,    -3,
     0,     0,     0,     0,    -3,    -3,   701,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,     0,     0,     0,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,
     0,     0,    -3,    -3,     0,     4,     0,     0,     0,    -3,
    -3,    -3,    -3,     5,     6,    -3,     0,    -3,     0,    -3,
    -3,    -3,    -3,     0,    -3,    -3,    -3,     0,    -3,    -3,
    -3,    -3,    -3,    -3,     0,     0,     7,     0,     0,     0,
     0,     8,     9,     0,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
    25,    26,     0,     0,     0,    27,    28,    29,    30,    31,
    32,    33,     0,    34,    35,    36,    37,     0,     0,    38,
    39,     5,     6,     0,     0,     0,    40,    41,    42,    43,
     0,     0,    44,     0,    45,     0,    46,    47,    48,    49,
     0,    50,    51,    52,     0,    53,    54,    55,    56,    57,
    58,     0,   542,    11,    12,   543,    14,    15,   544,    17,
   545,    19,     0,    20,     0,    22,    23,     0,    25,    26,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,    37,     0,     0,     0,   298,     0,
     0,     0,   457,     0,     0,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    51,    52,     0,    53,     0,     0,   546,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,  1032,     0,  1033,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
  1056,     0,  1057,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,  1136,     0,
  1137,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,   702,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,     0,   756,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,     0,     0,   801,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
     0,     0,   837,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
  1030,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,  1052,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,     0,  1084,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,     0,     0,  1087,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
     0,     0,  1088,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
  1089,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,  1152,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,     0,  1154,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,     0,     0,  1155,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
     0,     0,  1165,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
  1168,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,  1171,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,     0,  1188,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,     0,     0,  1212,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
     0,     0,  1214,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
  1216,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,  1226,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   453,
     0,     0,     0,     0,   527,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
   483,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,   527,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,   528,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,   567,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,   619,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
   620,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,   633,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,   634,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,   635,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,   636,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
   637,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,   638,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,   716,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,   717,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,   718,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
   798,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,   835,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,   836,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,   865,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,   985,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
   986,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,  1003,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,  1014,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,  1119,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,  1120,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
  1128,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,     0,     0,     0,  1134,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     0,     0,  1183,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,  1186,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,   580,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,   598,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,   600,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   602,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,   604,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,   606,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,   608,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,   610,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,   612,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,   614,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,   616,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,   618,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,   622,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   624,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,   626,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,   628,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,   630,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,   632,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,   715,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,   731,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,   733,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,   737,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,   738,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   752,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,   778,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,   886,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,   888,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,   890,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,   892,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,   893,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,  1000,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   453,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   484,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   493,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   494,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   496,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   498,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   499,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   502,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   503,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   511,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   563,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   564,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   565,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   571,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   597,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   599,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   601,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   603,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   605,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   607,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   609,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   611,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   613,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   615,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   617,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   621,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   623,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   625,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   627,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   629,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   631,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   681,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   686,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   695,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   698,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   699,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   703,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   747,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   748,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   749,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   750,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   751,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   856,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   885,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   887,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   889,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   891,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   897,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   991,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,  1031,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,  1051,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,  1060,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,  1182,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,  1224,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298
};

static const short yycheck[] = {    58,
     4,   353,   277,     6,   177,  1071,     6,   180,     2,     4,
   183,     4,     2,     4,     5,     4,     4,   660,     4,     4,
     4,     5,     4,     4,     7,     4,     4,    49,     4,     4,
    71,    71,     6,    72,    71,     4,   209,    76,    77,   212,
     6,   726,     4,     5,     4,    36,    37,    38,    39,   127,
   128,    42,    36,    37,    38,    39,   127,   128,    42,   133,
   134,     4,     6,     6,    72,   143,     6,   145,    76,    77,
   133,   134,    71,   144,    36,    37,    38,    39,   141,     6,
    42,     6,     6,    78,   127,   128,     6,    80,    81,    82,
    83,    84,    80,    81,    82,    83,    84,   137,     6,     7,
   137,   144,   137,   144,   144,     7,   145,   144,    13,   144,
    91,    92,   116,   117,   118,   137,    56,   121,   122,  1185,
    99,   125,    91,    92,    72,   125,    49,   131,    76,    77,
   134,   114,   136,   137,   138,   139,    56,   141,   142,   143,
   144,   144,   146,   147,   148,   144,   789,   151,   133,   134,
    62,    63,   145,   144,   139,   144,   141,   145,   144,   125,
   144,   146,     6,   167,   168,   730,   144,   852,   144,   144,
   144,   133,   134,   177,   137,  1241,   137,   137,   139,   141,
   137,   144,   457,   127,   128,   142,   190,   191,   192,   146,
   194,   364,   137,   197,   198,   142,   139,   145,   137,   146,
   127,   128,   127,   128,   137,   264,   265,   266,   267,   137,
   383,   215,   114,   115,   116,   117,   144,    53,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
    29,    30,    46,    32,   907,    49,     4,    51,    72,   137,
    72,   275,    76,    77,    76,    77,    43,     6,     7,    46,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   277,   138,   127,   128,   127,
   128,   143,    72,   307,   137,    43,    76,    77,    46,     8,
   137,    49,   316,   143,   138,   145,   144,   321,   275,   143,
   137,    72,   326,   327,    49,    76,    77,   331,   275,   333,
   334,   335,    49,   337,   338,   339,   340,   341,   342,   343,
   137,   145,   139,   145,   138,   340,   341,   342,   343,   143,
   307,   355,   356,   357,   358,   359,   360,   361,   352,   353,
   138,   365,   352,   353,     7,   143,   370,    49,    51,   326,
   327,   375,   376,   137,    72,   145,   144,    49,    76,    77,
   327,   127,   128,   387,   388,   389,   390,     7,   392,   127,
   128,   137,   144,   397,   145,   164,   400,   166,   144,   137,
   127,   128,     6,   172,   138,   137,   144,    72,   177,   143,
     4,    76,    77,     4,     4,  1100,   143,   399,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   137,   137,    72,  1079,   136,     6,    76,
    77,   127,   128,   341,   342,   343,   145,   145,   452,    72,
   219,   127,   128,    76,    77,   459,  1141,   137,   144,  1144,
     7,    99,  1147,   458,   137,    99,   139,   143,    99,    99,
  1035,   114,   115,   116,   117,   457,   127,   128,   482,   483,
   145,   485,   486,     4,    72,   489,   490,   491,    76,    77,
   133,   134,   143,   137,   114,   115,   116,   117,   141,     4,
   139,   505,   141,     6,   508,   509,   781,   782,   145,   137,
   137,   515,   139,   133,   134,    72,   137,     6,  1203,    76,
    77,   580,   145,   527,   528,   482,   127,   128,   127,   128,
   144,   137,   536,   490,   491,   482,   143,  1102,   145,  1104,
   137,  1106,   143,  1228,   143,   137,  1231,   139,   505,  1234,
   554,   508,  1237,   149,   558,   127,   128,   145,   505,   155,
     6,   127,   128,   567,     5,   569,   570,   114,   115,   116,
   117,   143,  1257,   137,  1259,   139,  1261,   143,   127,   128,
     4,   350,   351,   137,   643,   181,   133,   134,   145,   185,
   186,   360,   137,   137,   143,   139,    72,   137,   580,   951,
    76,    77,   127,   128,    72,   127,   128,   666,    76,    77,
   127,   128,   143,  1178,   145,   619,   620,   137,   143,     4,
     5,   143,   137,   127,   128,   144,   143,   127,   128,   633,
   634,   635,   636,   637,   638,   639,   144,   139,   642,   143,
     4,     5,   646,   143,   137,   137,  1211,   139,  1213,   653,
  1215,    36,    37,    38,    39,   139,  1221,    42,   137,   663,
   139,   143,   137,   145,   139,   838,     5,   671,   137,   145,
   139,   137,    36,    37,    38,    39,   137,   145,    42,   137,
  1245,   139,  1247,   137,  1249,   642,   129,   130,   131,   693,
   137,     8,   139,   136,   143,   642,   145,    36,    37,    38,
    39,   137,   137,    42,   139,   144,    65,    66,    67,    68,
   137,    70,   139,   144,   671,   719,   720,   721,   722,    78,
    79,   144,   133,   134,   671,   133,   134,   139,   139,   325,
   141,   139,   137,   141,   139,   146,   693,   139,   146,   127,
   128,   129,   130,   131,    43,  1097,   693,    46,   136,     6,
    49,   137,    51,   139,   141,   759,   760,   526,   137,   763,
   139,   144,   719,   720,   721,   722,   137,   137,   139,   139,
    94,     6,   719,   720,   721,   722,   137,   143,   139,   145,
   549,    49,     4,    51,     6,   143,   790,   145,   143,   143,
   145,   145,   137,   143,   798,   145,   778,   143,   802,   145,
   782,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   143,   820,   145,   143,   136,
   145,   143,   143,   145,   145,   143,   137,   145,   145,   137,
   834,   835,   836,   123,   124,   125,   126,   127,   128,   129,
   130,   131,     6,   847,   848,   137,   136,   851,   143,   143,
   145,   145,   911,     6,   143,   143,   145,   145,   454,   455,
   137,   865,   866,   867,   143,     6,   145,   871,   872,   143,
   143,   145,   145,   139,   878,     4,     6,   144,     5,   883,
   136,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   875,   141,     7,   900,   136,   139,   144,
   669,     7,     7,     6,   899,   138,   137,     7,    61,     7,
    91,   143,   916,   138,   144,   138,   143,     6,     4,   923,
   924,   140,     7,    94,   928,     7,     7,     7,    94,     7,
     7,    94,     7,   937,   938,     7,     6,  1110,     7,   138,
   138,   138,   138,   947,   145,   145,   141,   716,   717,   718,
    99,     7,   947,     7,     7,   141,   144,   951,   137,   137,
   137,   951,     6,   559,   560,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,     4,
     6,   985,   986,   136,     6,    12,    13,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   140,  1003,
     6,     6,   136,     7,   139,     6,  1179,   125,    49,     7,
  1014,     7,    51,     7,     7,     7,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,     7,    54,  1032,    56,
    57,   144,    59,    60,     7,     7,     7,     7,     7,     7,
     7,     4,   144,   144,     6,   137,     6,     6,    75,  1053,
     6,     6,  1056,     6,  1058,     6,     4,     7,     7,    86,
    87,    88,     7,  1067,     7,     7,     6,     4,  1072,   137,
     6,   144,   138,   100,   101,   102,   138,   104,   141,     7,
   107,     6,   851,   679,   680,     8,   682,   144,   684,   685,
     6,     6,   688,   689,   144,   144,     6,  1101,   144,  1103,
     6,  1105,     6,  1097,     5,     7,   144,  1097,     6,  1113,
     6,    90,     5,     5,     4,  1119,  1120,     6,   145,     6,
   141,     6,   140,     6,  1128,     6,     5,   143,     6,     6,
     6,     6,  1136,     6,     6,     6,     6,     6,     6,     6,
     6,     6,     6,   739,   740,   741,     6,     6,     6,   918,
     6,   920,  1156,   144,     4,     6,   141,     6,     5,     7,
     6,     6,  1166,     6,  1223,  1169,     6,   144,  1172,   145,
     6,     6,  1176,     7,     6,    89,     6,     6,   144,  1183,
   144,     6,  1186,   144,   953,    92,   955,   144,   957,     6,
     6,   138,  1251,     6,  1253,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,     6,
   806,     6,  1271,   136,   144,   138,   812,     6,     5,   145,
     6,   143,    61,   144,     6,   821,   822,   823,     6,     6,
   826,   827,   828,   829,   830,   831,   832,     6,     6,     6,
   145,     3,     4,     6,     5,   144,     6,     9,    10,    11,
   144,   847,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,   869,     6,     6,     6,     6,     5,     0,
   143,    43,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,     6,     6,     6,     6,
   136,   145,   898,    65,    66,    67,    68,    69,    70,     6,
     6,   144,     6,   144,     6,     6,    78,    79,   144,     6,
   144,   144,   144,   144,     6,     0,   797,  1156,   583,     2,
     2,    -1,  1101,   903,  1103,    -1,  1105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,   113,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
   132,    -1,    -1,   969,    -1,   137,   972,    -1,    -1,    -1,
   142,    -1,    -1,   145,   980,    -1,     3,     4,    -1,    -1,
    -1,   987,     9,    10,    11,   991,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,     8,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    65,    66,
    67,    68,    69,    70,  1050,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    -1,    -1,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    99,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   110,   111,   112,   113,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
   127,   128,    -1,  1109,    -1,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,   142,    -1,   144,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,     3,     4,    -1,    -1,   136,    -1,     9,    10,
    11,    -1,  1148,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,    65,    66,    67,    68,    69,    70,
     8,   145,    -1,    -1,    -1,    -1,    -1,    78,    79,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    99,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,   110,
   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,     3,     4,
    -1,   142,    -1,   144,     9,    10,    11,    -1,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
    65,    66,    67,    68,    69,    70,     8,    -1,    -1,    -1,
    -1,    -1,    -1,    78,    79,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   127,   128,    -1,    -1,    -1,   132,    -1,    -1,
    -1,    -1,   137,    -1,     3,     4,    -1,   142,    -1,   144,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,    65,    66,    67,    68,
    69,    70,     8,    -1,    -1,    -1,    -1,    -1,    -1,    78,
    79,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
     3,     4,    -1,   142,    -1,   144,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,    65,    66,    67,    68,    69,    70,    -1,    -1,
    -1,     3,     4,    -1,    -1,    78,    79,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,     6,    -1,    -1,    -1,   110,   111,   112,
   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
    -1,    -1,    -1,    -1,   137,    -1,     3,     4,    -1,   142,
    -1,   144,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
   142,    -1,   144,    -1,    -1,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     6,    -1,   110,   111,   112,   113,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   127,   128,    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,   140,    -1,   142,    -1,   144,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,     3,     4,     5,    -1,     7,    -1,     9,
    10,    11,    -1,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
    -1,    -1,    42,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     6,    -1,    -1,   110,   111,   112,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   127,   128,    -1,    -1,    -1,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,   142,    -1,   144,
   110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
    -1,    -1,   132,   133,   134,    -1,    -1,   137,    -1,   139,
    -1,   141,   142,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    -1,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,    -1,    65,    66,    67,    68,    69,
    70,    -1,    -1,    -1,     3,     4,    -1,    -1,    78,    79,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
    -1,    -1,   132,     3,     4,     5,    -1,   137,    -1,     9,
    10,    11,   142,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,   113,    12,    13,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,   142,    -1,    -1,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    -1,    56,
    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    75,    -1,
    12,    13,     6,    -1,    -1,    -1,    -1,   127,   128,    86,
    87,    88,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,    -1,   142,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    75,    -1,    12,    13,   136,   145,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    -1,    56,
    57,    -1,    59,    60,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    75,    -1,
    12,    13,   136,   145,    -1,    -1,    -1,    -1,    -1,    86,
    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    75,    -1,    12,    13,     6,   145,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    -1,    56,
    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
    12,    13,     6,   145,    -1,    -1,    -1,    -1,    -1,    86,
    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    75,     6,    12,    13,   136,   145,    -1,
    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,     8,    56,
    57,    -1,    59,    60,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    75,     8,
    -1,    -1,   136,   145,    -1,    -1,    -1,    -1,    -1,    86,
    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,     0,     1,    -1,   136,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    12,    13,    -1,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    35,
    -1,    -1,    -1,    -1,    40,    41,   145,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    64,    65,
    66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
    -1,    -1,    78,    79,    -1,     4,    -1,    -1,    -1,    85,
    86,    87,    88,    12,    13,    91,    -1,    93,    -1,    95,
    96,    97,    98,    -1,   100,   101,   102,    -1,   104,   105,
   106,   107,   108,   109,    -1,    -1,    35,    -1,    -1,    -1,
    -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    65,    66,    67,    68,
    69,    70,    -1,    72,    73,    74,    75,    -1,    -1,    78,
    79,    12,    13,    -1,    -1,    -1,    85,    86,    87,    88,
    -1,    -1,    91,    -1,    93,    -1,    95,    96,    97,    98,
    -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
   109,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    75,    -1,    -1,    -1,   136,    -1,
    -1,    -1,   140,    -1,    -1,    86,    87,    88,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
   101,   102,    -1,   104,    -1,    -1,   107,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,    -1,   145,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,    -1,   145,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,
   145,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   145,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,
    -1,    -1,    -1,    -1,   143,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,   143,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,   143,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,   143,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,   143,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,   143,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,   143,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   143,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,   140,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,    -1,    -1,   140,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
   140,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,   140,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,    -1,    -1,   140,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
    -1,    -1,   140,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,   140,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,   140,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,    -1,    -1,   140,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
   140,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,   140,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,    -1,    -1,   140,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
    -1,    -1,   140,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,   140,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,   140,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,    -1,    -1,   140,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
   140,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,   140,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,    -1,    -1,   140,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
    -1,    -1,   140,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,    -1,    -1,   140,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,   140,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
    -1,   140,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
   138,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,   138,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
   138,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,   138,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
   138,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,   138,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
   138,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,   138,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,   138,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,    -1,
   138,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,   136,
    -1,   138,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
    -1,    -1,    -1,   136,    -1,   138,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
    -1,    -1,    -1,    -1,   136
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 147 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 162 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 163 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 167 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 170 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 171 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 172 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 177 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 181 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 188 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 193 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 208 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 221 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 250 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 257 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 267 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 283 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 285 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 290 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 292 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 297 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 487 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
 	  // yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
	  //       ViewCoordIdx, 3 * ViewNumNodes);
	  ViewNumNodes = ViewCoordIdx/3;
	}
	for(int i = 0; i < 3; i++)
	  for(int j = 0; j < ViewNumNodes; j++)
	    List_Add(ViewValueList, &ViewCoord[3*j+i]);
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 501 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewCoordIdx/3)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 512 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 517 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 525 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 532 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 539 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 544 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 552 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 559 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 567 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 575 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-11].l, yyvsp[-8].l, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 52:
#line 582 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 53:
#line 586 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 591 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 55:
#line 599 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 56:
#line 600 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 57:
#line 601 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 58:
#line 602 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 59:
#line 603 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 60:
#line 607 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 61:
#line 608 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 62:
#line 616 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 63:
#line 647 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 64:
#line 686 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 740 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 757 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 67:
#line 775 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 68:
#line 786 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 69:
#line 803 "Gmsh.y"
{ 
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 70:
#line 810 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 71:
#line 824 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 72:
#line 841 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 73:
#line 867 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 74:
#line 894 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 75:
#line 908 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 76:
#line 925 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 77:
#line 939 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 78:
#line 956 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 79:
#line 976 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 80:
#line 999 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 81:
#line 1009 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 82:
#line 1024 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 83:
#line 1028 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 84:
#line 1040 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if(!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X, v->Pos.Y, v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1062 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1078 "Gmsh.y"
{
      AttractorField *att = new AttractorField();
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
        double d;
        List_Read(yyvsp[-1].l, i, &d);
        Vertex *v = FindPoint((int)d); 
        if(v)
          att->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
        else{
          GVertex *gv = GMODEL->vertexByTag((int)d);
          if(gv) 
            att->addPoint(gv->x(), gv->y(), gv->z());
        }
      }
      att->buildFastSearchStructures();
      fields.insert(att, (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1099 "Gmsh.y"
{
      fields.insert(new LatLonField(fields.get((int)yyvsp[-1].d)), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1106 "Gmsh.y"
{
      Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-1].d);
      if(vv) 
        fields.insert(new PostViewField(*vv), (int)yyvsp[-4].d);
      else
        yymsg(GERROR, "Field %i error, view %i does not exist",(int)yyvsp[-4].d,(int)yyvsp[-1].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 89:
#line 1117 "Gmsh.y"
{
      double pars[] = {0, CTX.lc/10, CTX.lc, CTX.lc/100, CTX.lc/20};
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4)
	  yymsg(GERROR, "Too many parameters for Thresold Field (max=5)");
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      fields.insert(new ThresholdField(fields.get((int)pars[0]), pars[1], 
				       pars[2], pars[3], pars[4]), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 90:
#line 1132 "Gmsh.y"
{
      std::list<Field*> *flist = new std::list<Field*>;
      flist->resize(0);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
	Field *pfield = fields.get((int)id);
	if(pfield)flist->push_front(pfield);
      }
      fields.insert(new FunctionField(flist,yyvsp[-2].c),(int)yyvsp[-5].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 91:
#line 1147 "Gmsh.y"
{
      fields.insert(new StructuredField(yyvsp[-1].c), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 92:
#line 1154 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
        BGMAddField(fields.get((int)id));
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 93:
#line 1166 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 1, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *attractor = new AttractorField();
      fields.insert(attractor);
      Field *threshold = new ThresholdField(attractor, pars[0], pars[0] * pars[4], 
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  attractor->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    attractor->addPoint(gv->x(), gv->y(), gv->z());
	}
      }
      attractor->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 94:
#line 1200 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *att = new AttractorField();
      fields.insert(att);
      Field *threshold = new ThresholdField(att, pars[0], pars[0] * pars[4],
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  att->addCurve(c, (int)pars[3]);
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag((int)d);
	  if(ge){
	    att->addGEdge(ge, (int)pars[3]);
	  }
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 95:
#line 1236 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 96:
#line 1258 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1276 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1294 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1312 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1338 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1356 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1383 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1402 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1426 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1450 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1476 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1493 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1512 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1530 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 110:
#line 1568 "Gmsh.y"
{
      myGmshSurface = 0;
    ;
    break;}
case 111:
#line 1572 "Gmsh.y"
{
      myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
    ;
    break;}
case 112:
#line 1576 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d, type = 0;
      myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
    ;
    break;}
case 113:
#line 1581 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 114:
#line 1603 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 115:
#line 1625 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 116:
#line 1641 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 117:
#line 1661 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1678 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 119:
#line 1695 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 120:
#line 1716 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 121:
#line 1721 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 122:
#line 1726 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 123:
#line 1731 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 124:
#line 1738 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 125:
#line 1739 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 126:
#line 1740 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 127:
#line 1745 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 128:
#line 1749 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 129:
#line 1753 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(v){
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GVertex *gv = GMODEL->vertexByTag(TheShape.Num);
	  if(gv){
	    TheShape.Type = MSH_POINT_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown point %d", TheShape.Num);
	}
      }
    ;
    break;}
case 130:
#line 1776 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(c){
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag(TheShape.Num);
	  if(ge){
	    TheShape.Type = MSH_SEGM_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	}
      }
    ;
    break;}
case 131:
#line 1799 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(s){
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GFace *gf = GMODEL->faceByTag(TheShape.Num);
	  if(gf){
	    TheShape.Type = MSH_SURF_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	}
      }
    ;
    break;}
case 132:
#line 1822 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(v){
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GRegion *gr = GMODEL->regionByTag(TheShape.Num);
	  if(gr){
	    TheShape.Type = MSH_VOLUME_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	}
      }
    ;
    break;}
case 133:
#line 1850 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 134:
#line 1862 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 135:
#line 1868 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 136:
#line 1874 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 137:
#line 1886 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 138:
#line 1895 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 139:
#line 1905 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1921 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1940 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 142:
#line 1954 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 143:
#line 1960 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 144:
#line 1966 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 145:
#line 1975 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 146:
#line 1989 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 147:
#line 2039 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 148:
#line 2054 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) {
    Field *field=new PostViewField(*vv);
    fields.insert(field);
    BGMAddField(field);
  }
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 149:
#line 2069 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 150:
#line 2089 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 151:
#line 2099 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 152:
#line 2121 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 153:
#line 2125 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 154:
#line 2130 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 155:
#line 2135 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 156:
#line 2147 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 157:
#line 2162 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 158:
#line 2178 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 159:
#line 2204 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 160:
#line 2231 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 161:
#line 2263 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 162:
#line 2270 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 163:
#line 2275 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 164:
#line 2281 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 165:
#line 2285 "Gmsh.y"
{
    ;
    break;}
case 166:
#line 2294 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 167:
#line 2302 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 168:
#line 2310 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 169:
#line 2318 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 170:
#line 2322 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 171:
#line 2330 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 172:
#line 2334 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 173:
#line 2342 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 174:
#line 2346 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 175:
#line 2354 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 176:
#line 2358 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 177:
#line 2365 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 178:
#line 2369 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      extr.mesh.ViewIndex = (int)yyvsp[-6].d;
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      extr.mesh.ViewIndex = -1;
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 179:
#line 2381 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 180:
#line 2388 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 181:
#line 2395 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 182:
#line 2402 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 183:
#line 2409 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 184:
#line 2416 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 185:
#line 2423 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 186:
#line 2430 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 187:
#line 2437 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 188:
#line 2444 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 189:
#line 2448 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 190:
#line 2455 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 191:
#line 2459 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 192:
#line 2466 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 193:
#line 2470 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 194:
#line 2477 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 195:
#line 2481 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 196:
#line 2488 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 197:
#line 2492 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 198:
#line 2499 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 199:
#line 2503 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 200:
#line 2510 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 201:
#line 2514 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 202:
#line 2521 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 203:
#line 2525 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 204:
#line 2532 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 205:
#line 2536 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 206:
#line 2547 "Gmsh.y"
{
    ;
    break;}
case 207:
#line 2550 "Gmsh.y"
{
    ;
    break;}
case 208:
#line 2556 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 209:
#line 2565 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 210:
#line 2587 "Gmsh.y"
{
      yymsg(GERROR, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 211:
#line 2611 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 212:
#line 2615 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	Tree_Add(THEM->Surfaces, &s);
	extr.mesh.Holes[num].first = yyvsp[-1].d;
	extr.mesh.Holes[num].second.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	  double d;
	  List_Read(yyvsp[-3].l, i, &d);
	  extr.mesh.Holes[num].second.push_back((int)d);
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 213:
#line 2639 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 214:
#line 2657 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 215:
#line 2675 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 216:
#line 2693 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 2722 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 218:
#line 2757 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 219:
#line 2762 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 220:
#line 2789 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 221:
#line 2803 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 2822 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 223:
#line 2828 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 224:
#line 2834 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 2837 "Gmsh.y"
{
    ;
    break;}
case 226:
#line 2846 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 227:
#line 2855 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 228:
#line 2856 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 229:
#line 2857 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 230:
#line 2858 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 231:
#line 2859 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 232:
#line 2860 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 233:
#line 2861 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 234:
#line 2862 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 235:
#line 2864 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 236:
#line 2870 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 237:
#line 2871 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 238:
#line 2872 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 239:
#line 2873 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 240:
#line 2874 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 241:
#line 2875 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 242:
#line 2876 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 243:
#line 2877 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 244:
#line 2878 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 245:
#line 2879 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 246:
#line 2880 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 247:
#line 2881 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 248:
#line 2882 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 249:
#line 2883 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 250:
#line 2884 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 251:
#line 2885 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 252:
#line 2886 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2887 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2888 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2889 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2890 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2891 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 258:
#line 2892 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2893 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2894 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2895 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2896 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 263:
#line 2897 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2898 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 265:
#line 2899 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 266:
#line 2900 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 267:
#line 2901 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 268:
#line 2903 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2904 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2905 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 271:
#line 2906 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2907 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2908 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2909 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 275:
#line 2910 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2911 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 277:
#line 2912 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2913 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 279:
#line 2914 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2915 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2916 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2917 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 283:
#line 2918 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 284:
#line 2919 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 285:
#line 2920 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 286:
#line 2921 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 287:
#line 2922 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 288:
#line 2923 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 289:
#line 2932 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 290:
#line 2933 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 291:
#line 2934 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 292:
#line 2935 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 293:
#line 2936 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 294:
#line 2937 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 295:
#line 2938 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 296:
#line 2943 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 297:
#line 2959 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 298:
#line 2974 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 299:
#line 2994 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 300:
#line 3008 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 301:
#line 3021 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 302:
#line 3044 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 303:
#line 3062 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 304:
#line 3080 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 305:
#line 3098 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 306:
#line 3116 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 307:
#line 3124 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 308:
#line 3128 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 309:
#line 3132 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 310:
#line 3136 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 311:
#line 3140 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 312:
#line 3147 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 313:
#line 3151 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 314:
#line 3155 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 315:
#line 3159 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 316:
#line 3166 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 317:
#line 3171 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 318:
#line 3179 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 319:
#line 3184 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 320:
#line 3188 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 321:
#line 3193 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 322:
#line 3197 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 323:
#line 3205 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-4].d;
      }
    ;
    break;}
case 324:
#line 3216 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 325:
#line 3224 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-2].d;
      }
    ;
    break;}
case 326:
#line 3232 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 327:
#line 3238 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 328:
#line 3249 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 329:
#line 3269 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 330:
#line 3279 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 331:
#line 3289 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 332:
#line 3299 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 333:
#line 3316 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 334:
#line 3343 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 335:
#line 3348 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 336:
#line 3352 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 337:
#line 3356 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 338:
#line 3369 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 339:
#line 3373 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 340:
#line 3385 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 341:
#line 3392 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 342:
#line 3414 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 343:
#line 3418 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 344:
#line 3433 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 345:
#line 3438 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 346:
#line 3445 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 347:
#line 3449 "Gmsh.y"
{
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 348:
#line 3456 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 349:
#line 3460 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 350:
#line 3468 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 351:
#line 3476 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 352:
#line 3490 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 353:
#line 3504 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 354:
#line 3508 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 355:
#line 3527 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 356:
#line 3549 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3572 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
