
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tPower	302
#define	tBump	303
#define	tProgression	304
#define	tAssociation	305
#define	tRotate	306
#define	tTranslate	307
#define	tSymmetry	308
#define	tDilate	309
#define	tExtrude	310
#define	tDuplicata	311
#define	tLoop	312
#define	tInclude	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tView	317
#define	tOffset	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tGeneral	340
#define	tGeometry	341
#define	tMesh	342
#define	tClip	343
#define	tB_SPLINE_SURFACE_WITH_KNOTS	344
#define	tB_SPLINE_CURVE_WITH_KNOTS	345
#define	tCARTESIAN_POINT	346
#define	tTRUE	347
#define	tFALSE	348
#define	tUNSPECIFIED	349
#define	tU	350
#define	tV	351
#define	tEDGE_CURVE	352
#define	tVERTEX_POINT	353
#define	tORIENTED_EDGE	354
#define	tPLANE	355
#define	tFACE_OUTER_BOUND	356
#define	tEDGE_LOOP	357
#define	tADVANCED_FACE	358
#define	tVECTOR	359
#define	tDIRECTION	360
#define	tAXIS2_PLACEMENT_3D	361
#define	tISO	362
#define	tENDISO	363
#define	tENDSEC	364
#define	tDATA	365
#define	tHEADER	366
#define	tFILE_DESCRIPTION	367
#define	tFILE_SCHEMA	368
#define	tFILE_NAME	369
#define	tMANIFOLD_SOLID_BREP	370
#define	tCLOSED_SHELL	371
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	372
#define	tFACE_BOUND	373
#define	tCYLINDRICAL_SURFACE	374
#define	tCONICAL_SURFACE	375
#define	tCIRCLE	376
#define	tTRIMMED_CURVE	377
#define	tGEOMETRIC_SET	378
#define	tCOMPOSITE_CURVE_SEGMENT	379
#define	tCONTINUOUS	380
#define	tCOMPOSITE_CURVE	381
#define	tTOROIDAL_SURFACE	382
#define	tPRODUCT_DEFINITION	383
#define	tPRODUCT_DEFINITION_SHAPE	384
#define	tSHAPE_DEFINITION_REPRESENTATION	385
#define	tELLIPSE	386
#define	tTrimmed	387
#define	tSolid	388
#define	tEndSolid	389
#define	tVertex	390
#define	tFacet	391
#define	tNormal	392
#define	tOuter	393
#define	tLoopSTL	394
#define	tEndLoop	395
#define	tEndFacet	396
#define	UMINUS	397

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.12 2000-12-04 09:29:38 colignon Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Colors.h"
#include "Parser.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int            Force_ViewNumber = 0 ;
List_T         *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static unsigned int  *ptr ;
static int            i,j,k,flag,RecursionLevel=0;
static double         d;
static ExtrudeParams  extr;
static StringXPointer *ColorField ;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
int   Get_ColorForString(StringX4Int SX4I[], int alpha, 
			 char * string, int * FlagError);
void  Get_ColorPointerForString(StringXPointer SXP[], char * string,
				int * FlagError, unsigned int **Pointer);


#line 53 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1341
#define	YYFLAG		-32768
#define	YYNTBASE	158

#define YYTRANSLATE(x) ((unsigned)(x) <= 397 ? yytranslate[x] : 238)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   148,     2,     2,   151,
   153,   146,   144,   152,   145,     2,   147,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   142,
     2,   143,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   156,     2,   157,   150,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   154,     2,   155,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   149
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   521,   528,   537,   538,   541,   544,
   547,   550,   553,   556,   559,   562,   565,   568,   571,   574,
   576,   580,   581,   595,   597,   601,   602,   616,   618,   622,
   623,   637,   639,   643,   644,   664,   666,   670,   671,   691,
   693,   697,   698,   718,   720,   724,   725,   751,   753,   757,
   758,   784,   786,   790,   791,   817,   819,   823,   824,   856,
   858,   862,   863,   895,   897,   901,   902,   934,   939,   947,
   956,   969,   976,   982,   990,   998,  1011,  1019,  1029,  1047,
  1055,  1064,  1073,  1081,  1093,  1099,  1108,  1118,  1127,  1150,
  1171,  1180,  1189,  1195,  1204,  1212,  1221,  1227,  1239,  1245,
  1255,  1257,  1259,  1261,  1262,  1265,  1270,  1275,  1279,  1288,
  1301,  1310,  1323,  1332,  1345,  1357,  1373,  1375,  1378,  1388,
  1391,  1398,  1408,  1418,  1427,  1436,  1445,  1452,  1457,  1460,
  1465,  1481,  1482,  1485,  1486,  1492,  1493,  1499,  1500,  1506,
  1507,  1510,  1515,  1524,  1529,  1539,  1547,  1549,  1551,  1553,
  1555,  1557,  1559,  1563,  1567,  1571,  1575,  1579,  1583,  1586,
  1589,  1594,  1599,  1604,  1609,  1614,  1619,  1624,  1629,  1634,
  1639,  1646,  1651,  1656,  1661,  1666,  1671,  1676,  1683,  1690,
  1697,  1699,  1701,  1703,  1707,  1714,  1726,  1736,  1744,  1752,
  1753,  1757,  1759,  1763,  1764,  1768,  1772,  1774,  1778,  1779,
  1781,  1785,  1787,  1789,  1793
};

static const short yyrhs[] = {   160,
     0,   159,     0,   165,     0,   133,     0,   136,   137,   228,
   228,   228,   138,   139,   135,   228,   228,   228,   135,   228,
   228,   228,   135,   228,   228,   228,   140,   141,     0,   134,
     0,     0,   160,   161,     0,   162,     0,   164,     0,   163,
     0,     1,     6,     0,   107,     6,     0,   108,     6,     0,
   110,     6,     0,   109,     6,     0,   111,     6,     0,   112,
   151,   232,   152,     5,   153,     6,     0,   113,   151,   232,
   153,     6,     0,   114,   151,     5,   152,     5,   152,   232,
   152,   232,   152,     5,   152,     5,   152,     5,   153,     6,
     0,     3,     7,    91,   151,     5,   152,   231,   153,     6,
     0,     3,     7,    90,   151,     5,   152,   228,   152,   236,
   152,   227,   152,   227,   152,   227,   152,   236,   152,   236,
   152,   227,   153,     6,     0,     3,     7,    89,   151,     5,
   152,   228,   152,   228,   152,   234,   152,   227,   152,   227,
   152,   227,   152,   227,   152,   236,   152,   236,   152,   236,
   152,   236,   152,   227,   153,     6,     0,     3,     7,    97,
   151,     5,   152,     3,   152,     3,   152,     3,   152,   227,
   153,     6,     0,     3,     7,   101,   151,     5,   152,     3,
   152,   227,   153,     6,     0,     3,     7,   118,   151,     5,
   152,     3,   152,   227,   153,     6,     0,     3,     7,    99,
   151,     5,   152,   146,   152,   146,   152,   228,   152,   227,
   153,     6,     0,     3,     7,   102,   151,     5,   152,   236,
   153,     6,     0,     3,     7,   103,   151,     5,   152,   236,
   152,     3,   152,   227,   153,     6,     0,     3,     7,    98,
   151,     5,   152,     3,   153,     6,     0,     3,     7,   104,
   151,     5,   152,     3,   152,   228,   153,     6,     0,     3,
     7,   106,   151,     5,   152,     3,   152,     3,   152,     3,
   153,     6,     0,     3,     7,   105,   151,     5,   152,   231,
   153,     6,     0,     3,     7,   100,   151,     5,   152,     3,
   153,     6,     0,     3,     7,    33,   151,     5,   152,     3,
   152,     3,   153,     6,     0,     3,     7,   116,   151,     5,
   152,   236,   153,     6,     0,     3,     7,   117,   151,     5,
   152,   236,   152,     3,   153,     6,     0,     3,     7,   115,
   151,     5,   152,     3,   153,     6,     0,     3,     7,   119,
   151,     5,   152,     3,   152,   228,   153,     6,     0,     3,
     7,   120,   151,     5,   152,     3,   152,   228,   152,   228,
   153,     6,     0,     3,     7,   127,   151,     5,   152,     3,
   152,   228,   152,   228,   153,     6,     0,     3,     7,   121,
   151,     5,   152,     3,   152,   228,   153,     6,     0,     3,
     7,   131,   151,     5,   152,     3,   152,   228,   152,   228,
   153,     6,     0,     3,     7,   122,   151,     5,   152,     3,
   152,   236,   152,   236,   152,   227,   152,   227,   153,     6,
     0,     3,     7,   123,   151,     5,   152,   236,   153,     6,
     0,     3,     7,   124,   151,   125,   152,   227,   152,     3,
   153,     6,     0,     3,     7,   126,   151,     5,   152,   236,
   152,   227,   153,     6,     0,     3,     7,   128,   151,     5,
   152,     5,   152,     3,   152,     3,   153,     6,     0,     3,
     7,   129,   151,     5,   152,     5,   152,     3,   153,     6,
     0,     3,     7,   130,   151,     3,   152,     3,   153,     6,
     0,     0,   165,   166,     0,   167,     0,   205,     0,   206,
     0,   207,     0,   210,     0,   211,     0,   213,     0,   216,
     0,   217,     0,   212,     0,   218,     0,     1,     6,     0,
    62,     5,   154,   168,   155,     6,     0,    62,     5,    63,
   231,   154,   168,   155,     6,     0,     0,   168,   170,     0,
   168,   173,     0,   168,   176,     0,   168,   179,     0,   168,
   182,     0,   168,   185,     0,   168,   188,     0,   168,   191,
     0,   168,   194,     0,   168,   197,     0,   168,   200,     0,
   168,   203,     0,   228,     0,   169,   152,   228,     0,     0,
    75,   151,   228,   152,   228,   152,   228,   153,   171,   154,
   169,   155,     6,     0,   228,     0,   172,   152,   228,     0,
     0,    76,   151,   228,   152,   228,   152,   228,   153,   174,
   154,   172,   155,     6,     0,   228,     0,   175,   152,   228,
     0,     0,    77,   151,   228,   152,   228,   152,   228,   153,
   177,   154,   175,   155,     6,     0,   228,     0,   178,   152,
   228,     0,     0,    72,   151,   228,   152,   228,   152,   228,
   152,   228,   152,   228,   152,   228,   153,   180,   154,   178,
   155,     6,     0,   228,     0,   181,   152,   228,     0,     0,
    73,   151,   228,   152,   228,   152,   228,   152,   228,   152,
   228,   152,   228,   153,   183,   154,   181,   155,     6,     0,
   228,     0,   184,   152,   228,     0,     0,    74,   151,   228,
   152,   228,   152,   228,   152,   228,   152,   228,   152,   228,
   153,   186,   154,   184,   155,     6,     0,   228,     0,   187,
   152,   228,     0,     0,    69,   151,   228,   152,   228,   152,
   228,   152,   228,   152,   228,   152,   228,   152,   228,   152,
   228,   152,   228,   153,   189,   154,   187,   155,     6,     0,
   228,     0,   190,   152,   228,     0,     0,    70,   151,   228,
   152,   228,   152,   228,   152,   228,   152,   228,   152,   228,
   152,   228,   152,   228,   152,   228,   153,   192,   154,   190,
   155,     6,     0,   228,     0,   193,   152,   228,     0,     0,
    71,   151,   228,   152,   228,   152,   228,   152,   228,   152,
   228,   152,   228,   152,   228,   152,   228,   152,   228,   153,
   195,   154,   193,   155,     6,     0,   228,     0,   196,   152,
   228,     0,     0,    66,   151,   228,   152,   228,   152,   228,
   152,   228,   152,   228,   152,   228,   152,   228,   152,   228,
   152,   228,   152,   228,   152,   228,   152,   228,   153,   198,
   154,   196,   155,     6,     0,   228,     0,   199,   152,   228,
     0,     0,    67,   151,   228,   152,   228,   152,   228,   152,
   228,   152,   228,   152,   228,   152,   228,   152,   228,   152,
   228,   152,   228,   152,   228,   152,   228,   153,   201,   154,
   199,   155,     6,     0,   228,     0,   202,   152,   228,     0,
     0,    68,   151,   228,   152,   228,   152,   228,   152,   228,
   152,   228,   152,   228,   152,   228,   152,   228,   152,   228,
   152,   228,   152,   228,   152,   228,   153,   204,   154,   202,
   155,     6,     0,     4,     7,   228,     6,     0,    30,   151,
   228,   153,     7,   231,     6,     0,    45,    30,   151,   228,
   153,     7,   236,     6,     0,    64,    30,   236,     7,   151,
   228,   152,   228,   152,   228,   153,     6,     0,    37,    38,
   236,     7,   228,     6,     0,    30,   154,   228,   155,     6,
     0,    33,   151,   228,   153,     7,   236,     6,     0,    35,
   151,   228,   153,     7,   236,     6,     0,    64,    33,   236,
     7,   154,   228,   152,   228,   152,   228,   155,     6,     0,
    31,   151,   228,   153,     7,   236,     6,     0,    31,   151,
   228,   153,     7,   236,    41,   231,     6,     0,    39,   151,
   228,   153,     7,   154,   228,   152,   228,   152,     5,   152,
     5,   152,     5,   155,     6,     0,    32,   151,   228,   153,
     7,   236,     6,     0,    45,    33,   151,   228,   153,     7,
   236,     6,     0,    33,    57,   151,   228,   153,     7,   236,
     6,     0,    78,   151,   228,   153,     7,   236,     6,     0,
    79,   151,   228,   153,     7,   236,    83,   236,    80,   228,
     6,     0,    33,   154,   228,   155,     6,     0,    41,    34,
   151,   228,   153,     7,   236,     6,     0,   132,    34,   151,
   228,   153,     7,   228,   236,     6,     0,    42,    34,   151,
   228,   153,     7,   236,     6,     0,    79,    34,    81,    82,
   151,   228,   153,     7,   234,    83,   154,   236,   152,   236,
   155,    80,   154,   228,   152,   228,   155,     6,     0,    79,
    34,   151,   228,   153,     7,   234,    83,   154,   236,   152,
   236,   155,    80,   154,   228,   152,   228,   155,     6,     0,
    45,    34,   151,   228,   153,     7,   236,     6,     0,    34,
    57,   151,   228,   153,     7,   236,     6,     0,    34,   154,
   228,   155,     6,     0,    44,    36,   151,   228,   153,     7,
   236,     6,     0,    36,   151,   228,   153,     7,   236,     6,
     0,    45,    36,   151,   228,   153,     7,   236,     6,     0,
    52,   231,   154,   208,   155,     0,    51,   154,   231,   152,
   231,   152,   228,   155,   154,   208,   155,     0,    53,   231,
   154,   208,   155,     0,    54,   154,   231,   152,   228,   155,
   154,   208,   155,     0,   210,     0,   209,     0,   207,     0,
     0,   209,   206,     0,    56,   154,   209,   155,     0,    60,
   154,   209,   155,     0,    58,     5,     6,     0,    55,    30,
   154,   228,   152,   231,   155,     6,     0,    55,    30,   154,
   228,   152,   231,   152,   231,   152,   228,   155,     6,     0,
    55,    33,   154,   228,   152,   231,   155,     6,     0,    55,
    33,   154,   228,   152,   231,   152,   231,   152,   228,   155,
     6,     0,    55,    34,   154,   228,   152,   231,   155,     6,
     0,    55,    34,   154,   228,   152,   231,   152,   231,   152,
   228,   155,     6,     0,    55,    34,   154,   228,   152,   231,
   155,   154,   214,   155,     6,     0,    55,    34,   154,   228,
   152,   231,   152,   231,   152,   228,   155,   154,   214,   155,
     6,     0,   215,     0,   214,   215,     0,    65,   154,   236,
   152,   236,   152,   236,   155,     6,     0,    59,     6,     0,
    43,    33,   236,     7,   228,     6,     0,    43,    33,   236,
     7,   228,    46,    49,   228,     6,     0,    43,    33,   236,
     7,   228,    46,    48,   228,     6,     0,    43,    34,   154,
   228,   155,     7,   236,     6,     0,    40,    34,   154,   228,
   155,     7,   236,     6,     0,    43,    36,   154,   228,   155,
     7,   236,     6,     0,    59,    34,   236,     7,   228,     6,
     0,    59,    34,   236,     6,     0,    61,     6,     0,    84,
   154,   219,   155,     0,    88,    41,   151,   228,   153,     7,
   154,   228,   152,   228,   152,   228,   152,   228,   155,     0,
     0,   219,   220,     0,     0,    85,   221,   154,   224,   155,
     0,     0,    86,   222,   154,   224,   155,     0,     0,    87,
   223,   154,   224,   155,     0,     0,   225,   224,     0,     4,
     7,     4,     6,     0,     4,     7,   154,     4,   152,   228,
   155,     6,     0,     4,     7,   226,     6,     0,   154,   228,
   152,   228,   152,   228,   152,   228,   155,     0,   154,   228,
   152,   228,   152,   228,   155,     0,    92,     0,    93,     0,
    94,     0,    95,     0,    96,     0,   229,     0,   151,   228,
   153,     0,   228,   145,   228,     0,   228,   144,   228,     0,
   228,   146,   228,     0,   228,   147,   228,     0,   228,   150,
   228,     0,   145,   228,     0,   144,   228,     0,    10,   151,
   228,   153,     0,    11,   151,   228,   153,     0,    12,   151,
   228,   153,     0,    13,   151,   228,   153,     0,    14,   151,
   228,   153,     0,    15,   151,   228,   153,     0,    16,   151,
   228,   153,     0,    17,   151,   228,   153,     0,    18,   151,
   228,   153,     0,    19,   151,   228,   153,     0,    20,   151,
   228,   152,   228,   153,     0,    21,   151,   228,   153,     0,
    22,   151,   228,   153,     0,    23,   151,   228,   153,     0,
    24,   151,   228,   153,     0,    25,   151,   228,   153,     0,
    26,   151,   228,   153,     0,    27,   151,   228,   152,   228,
   153,     0,    28,   151,   228,   152,   228,   153,     0,    29,
   151,   228,   152,   228,   153,     0,     3,     0,     9,     0,
     4,     0,   228,     8,   228,     0,   228,     8,   156,   228,
   157,   228,     0,   154,   228,   152,   228,   152,   228,   152,
   228,   152,   228,   155,     0,   154,   228,   152,   228,   152,
   228,   152,   228,   155,     0,   154,   228,   152,   228,   152,
   228,   155,     0,   151,   228,   152,   228,   152,   228,   153,
     0,     0,   151,   233,   153,     0,     5,     0,   233,   152,
     5,     0,     0,   154,   235,   155,     0,   151,   235,   153,
     0,   236,     0,   235,   152,   236,     0,     0,   228,     0,
   154,   237,   155,     0,   228,     0,   230,     0,   237,   152,
   228,     0,   237,   152,   230,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   114,   116,   117,   124,   132,   146,   158,   160,   163,   165,
   166,   167,   170,   176,   181,   182,   183,   186,   190,   193,
   199,   204,   210,   218,   223,   227,   233,   238,   242,   247,
   251,   254,   259,   263,   267,   271,   276,   280,   283,   287,
   291,   295,   299,   303,   307,   310,   314,   317,   321,   324,
   333,   335,   341,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   360,   365,   371,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   390,
   393,   397,   403,   409,   412,   416,   422,   428,   431,   435,
   441,   447,   450,   454,   462,   468,   471,   475,   483,   489,
   492,   496,   504,   510,   513,   517,   529,   535,   538,   542,
   554,   560,   563,   567,   579,   585,   588,   592,   605,   611,
   614,   618,   631,   637,   640,   644,   657,   669,   683,   694,
   700,   719,   730,   738,   744,   750,   769,   775,   791,   798,
   804,   810,   816,   822,   841,   853,   859,   878,   899,   907,
   913,   919,   925,   937,   943,   949,   961,   967,   972,   977,
   984,   986,   987,   990,   995,  1006,  1024,  1039,  1070,  1076,
  1082,  1086,  1090,  1094,  1098,  1103,  1110,  1114,  1119,  1137,
  1147,  1165,  1182,  1199,  1220,  1240,  1260,  1277,  1301,  1312,
  1314,  1329,  1331,  1334,  1337,  1338,  1340,  1341,  1343,  1346,
  1348,  1351,  1362,  1372,  1382,  1390,  1466,  1468,  1469,  1470,
  1471,  1474,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,
  1484,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1493,
  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
  1506,  1508,  1509,  1520,  1527,  1540,  1549,  1557,  1565,  1575,
  1579,  1584,  1588,  1593,  1597,  1601,  1607,  1613,  1619,  1623,
  1629,  1642,  1648,  1657,  1661
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPoint","tCircle","tEllipsis",
"tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tPower","tBump","tProgression","tAssociation","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tOffset","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tGeneral","tGeometry",
"tMesh","tClip","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","'<'",
"'>'","'+'","'-'","'*'","'/'","'%'","UMINUS","'^'","'('","','","')'","'{'","'}'",
"'['","']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","View","Views",
"ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint","@2",
"TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine","@4",
"VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues",
"ScalarTriangle","@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues",
"TensorTriangle","@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","Options","ColorSections","ColorSection","@13","@14","@15","ColorAffects",
"ColorAffect","RGBAExpr","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble", NULL
};
#endif

static const short yyr1[] = {     0,
   158,   158,   158,   159,   159,   159,   160,   160,   161,   161,
   161,   161,   162,   162,   162,   162,   162,   163,   163,   163,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   165,   165,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   167,   167,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   169,
   169,   171,   170,   172,   172,   174,   173,   175,   175,   177,
   176,   178,   178,   180,   179,   181,   181,   183,   182,   184,
   184,   186,   185,   187,   187,   189,   188,   190,   190,   192,
   191,   193,   193,   195,   194,   196,   196,   198,   197,   199,
   199,   201,   200,   202,   202,   204,   203,   205,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   207,   207,   207,   207,
   208,   208,   208,   209,   209,   210,   211,   212,   213,   213,
   213,   213,   213,   213,   213,   213,   214,   214,   215,   215,
   216,   216,   216,   216,   216,   216,   216,   216,   217,   218,
   218,   219,   219,   221,   220,   222,   220,   223,   220,   224,
   224,   225,   225,   225,   226,   226,   227,   227,   227,   227,
   227,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   229,   229,   229,   230,   230,   231,   231,   231,   231,   232,
   232,   233,   233,   234,   234,   234,   235,   235,   236,   236,
   236,   237,   237,   237,   237
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     6,     8,     0,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     4,     7,     8,
    12,     6,     5,     7,     7,    12,     7,     9,    17,     7,
     8,     8,     7,    11,     5,     8,     9,     8,    22,    20,
     8,     8,     5,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     4,     4,     3,     8,    12,
     8,    12,     8,    12,    11,    15,     1,     2,     9,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     4,
    15,     0,     2,     0,     5,     0,     5,     0,     5,     0,
     2,     4,     8,     4,     9,     7,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     2,     2,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     1,     1,     1,     3,     6,    11,     9,     7,     7,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     0,     1,
     3,     1,     1,     3,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    52,    53,    54,    55,    56,
    57,    58,    62,    59,    60,    61,    63,   241,   243,   242,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   212,    12,     0,    13,    14,    16,
    15,    17,   250,   250,     0,    64,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
     0,     0,     0,   259,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   164,     0,   259,   164,   189,     0,   259,   259,     0,     0,
     0,   192,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   220,   219,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   164,   164,     0,
     0,     0,     0,     0,   168,     0,     0,     0,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   213,   215,   214,   216,   217,   218,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   252,     0,     0,
     0,     0,   128,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   262,   263,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   163,     0,   162,   161,     0,     0,     0,
     0,     0,   166,   165,   188,     0,   167,     0,     0,     0,
     0,     0,     0,     0,     0,   194,   196,   198,   190,   193,
     0,     0,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,     0,   232,   233,   234,   235,   236,   237,     0,
     0,     0,   215,   214,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   251,     0,    19,     0,
     0,   133,   259,   259,     0,   259,   145,     0,   153,   259,
   259,     0,     0,   261,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   157,   159,     0,     0,     0,     0,     0,    67,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,   259,     0,     0,   259,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   259,   259,
     0,     0,     0,     0,   259,   259,     0,     0,     0,     0,
     0,   259,     0,   259,     0,     0,     0,     0,     0,   253,
     0,   250,     0,     0,     0,   259,     0,   259,     0,     0,
     0,   244,   264,   265,   132,     0,   259,   259,   259,   181,
     0,   259,   259,   259,   259,   259,   259,   259,     0,     0,
     0,     0,     0,     0,     0,   187,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
     0,     0,     0,     0,   254,     0,   200,   200,   200,     0,
     0,   231,   238,   239,   240,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   207,
   208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     0,    18,     0,   129,   137,     0,   140,     0,   134,     0,
   135,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   143,     0,   259,   259,     0,   259,     0,     0,   200,
     0,     0,     0,   259,     0,     0,     0,   259,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
     0,     0,     0,     0,     0,   250,     0,   142,   152,     0,
     0,   185,   146,   148,     0,     0,   184,   186,   154,   130,
   141,   151,   156,     0,   249,     0,   248,     0,     0,   169,
     0,   171,     0,   173,     0,    66,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   254,     0,   257,     0,     0,     0,     0,   195,   201,   197,
   199,     0,     0,     0,     0,     0,     0,    21,     0,    30,
     0,    34,     0,    28,     0,     0,    33,     0,    38,    36,
     0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     0,     0,    50,     0,     0,   138,   245,     0,   183,   182,
   164,     0,   160,     0,     0,     0,     0,     0,     0,   177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   259,   256,   255,   259,     0,
     0,     0,     0,     0,   147,     0,     0,   254,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   247,     0,     0,     0,   180,   259,     0,   178,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   258,     0,     0,   202,   243,     0,
   204,     0,     0,    35,     0,     0,     0,     0,    25,     0,
    31,     0,    37,    26,    39,     0,    42,     0,    46,    47,
     0,     0,    49,     0,     0,     0,   158,     0,     0,     0,
     0,     0,   175,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   259,   259,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   246,   170,   172,
   174,     0,   259,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    82,    86,    90,   131,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    29,    32,    40,
     0,    41,    48,    43,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   203,
     0,     0,     0,     0,     0,    24,    27,     0,     0,     0,
   176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    80,     0,    84,     0,    88,     0,     0,     0,
   206,   191,     0,     0,   259,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,    20,   139,   179,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    81,    83,    85,    87,    89,    91,     0,
     0,   205,     0,     0,   259,     0,     0,     0,     0,     0,
     0,    94,    98,   102,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     5,   259,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   150,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    92,     0,    96,     0,   100,     0,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   149,     0,    22,     0,     0,     0,     0,
     0,     0,    93,    95,    97,    99,   101,   103,   259,     0,
     0,     0,   106,   110,   114,     0,     0,     0,     0,     0,
     0,     0,   259,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   104,     0,   108,     0,   112,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   105,   107,   109,   111,   113,   115,     0,
   118,   122,   126,    23,     0,     0,     0,     0,     0,     0,
     0,   116,     0,   120,     0,   124,     0,     0,     0,     0,
     0,     0,   117,   119,   121,   123,   125,   127,     0,     0,
     0
};

static const short yydefgoto[] = {  1339,
     4,     5,    18,    19,    20,    21,     6,    56,    57,   379,
  1112,   502,  1058,  1114,   503,  1059,  1116,   504,  1060,  1223,
   505,  1196,  1225,   506,  1197,  1227,   507,  1198,  1284,   508,
  1270,  1286,   509,  1271,  1288,   510,  1272,  1321,   511,  1315,
  1323,   512,  1316,  1325,   513,  1317,    58,   374,   364,   365,
   366,   367,    62,    63,    64,   859,   860,    65,    66,    67,
   266,   390,   520,   521,   522,   719,   720,   883,   655,   231,
    95,   346,   135,   215,   329,   716,   802,   803,   347
};

static const short yypact[] = {     7,
-32768,-32768,  -122,-32768,   221,  1498,  1349,    21,    50,    65,
    77,    84,   126,   139,   -87,   -23,    37,-32768,-32768,-32768,
-32768,   183,   202,  -106,    69,    79,   -46,   -31,    96,    97,
   211,   103,   208,   224,   225,    36,   230,    58,   113,   -98,
   -98,   127,    -5,   153,   306,   290,   190,   274,   340,    66,
   196,   -29,   198,   312,   327,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   212,   217,   222,   226,   236,   249,   260,   265,   279,   282,
   284,   285,   287,   288,   291,   298,   301,   302,   303,   309,
  1349,  1349,  1349,  1322,-32768,-32768,  1321,-32768,-32768,-32768,
-32768,-32768,   310,   310,   371,-32768,  1349,  1349,  1349,  1349,
  1349,   311,  1349,  1349,   318,  1349,  1349,  1349,   937,  1349,
   227,   323,   324,   937,   228,   239,   326,   328,   329,   334,
   341,   -98,  1349,  1349,   271,   297,   -98,   345,   355,   361,
-32768,   422,   937,-32768,-32768,   -59,   937,   937,  1349,   -62,
  1349,-32768,   365,   368,  1349,  1349,  1349,  1349,  1349,  1349,
  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
  1349,  1349,  1349,  1349,   344,   344,   428,  1349,  1349,  1349,
  1349,  1349,  1322,   370,   372,   380,   385,   387,   410,   411,
   412,   419,   426,   429,   434,   435,   436,   437,   438,   439,
   452,   454,   455,   457,   462,   466,   467,   470,   471,   472,
   473,   482,   487,   513,   381,   325,   427,    40,   692,   204,
   830,   851,  1349,   888,   220,  1349,   343,   901,   950,  1349,
   668,   609,   961,  1349,  1349,  1349,   634,  1349,  1349,  1349,
  1349,  1349,  1349,  1349,   491,   916,  1072,   187,   187,   492,
  1349,  1349,  1349,   595,-32768,    91,   731,   -98,-32768,   638,
   640,   993,   566,  1349,  1005,   -73,  1349,  1349,  1015,  1034,
  1062,  1092,  1112,  1129,  1148,  1309,  1330,  1342,  1158,  1359,
  1369,  1419,  1434,  1444,  1454,  1171,  1837,  1846,  1349,  1349,
-32768,   -88,   170,   344,   344,   344,   -70,   649,   651,   652,
   653,   657,   659,   661,   662,   663,   664,   665,   674,   675,
   678,   679,   681,   682,   684,   686,   688,   693,   694,   696,
   536,   697,   705,   706,   708,   711,   710,-32768,    -6,   714,
   715,   721,-32768,   722,   725,   727,   728,  1464,   729,   726,
  1474,   739,   740,   742,   125,-32768,   -74,  1349,   745,   367,
  1487,  1497,  1349,   382,   421,  1507,  1517,  1527,  1537,  1547,
   -98,  1349,  1349,-32768,   600,   986,-32768,   601,  1349,  1855,
  1864,  1873,-32768,-32768,-32768,  1349,-32768,   603,   754,   607,
   605,   753,   620,  1557,   767,-32768,-32768,-32768,-32768,-32768,
  1567,  1577,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1349,-32768,-32768,-32768,-32768,-32768,-32768,  1349,
  1349,  1349,  -130,  -130,   639,   625,   627,   641,   644,   646,
   647,   680,   689,   691,   712,   713,   720,   730,   733,   744,
   747,   749,   750,   751,   756,   758,   759,   760,   773,   778,
   781,   783,   786,   790,   791,   787,-32768,   655,-32768,   792,
   -98,-32768,   937,   937,   797,   937,-32768,   798,-32768,   937,
   937,   275,  1349,-32768,    48,   690,   809,   810,   826,    33,
   827,   833,   839,   855,   869,   871,   873,   793,  1882,  1891,
-32768,-32768,   465,   -98,   -98,   -98,    57,-32768,   732,   820,
   821,   831,   841,   849,   852,   854,   878,   885,   886,   889,
   875,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1349,  1349,   937,  1349,   884,   937,   741,
   780,   848,   887,   898,  1587,  1597,  1607,  1617,   846,  1003,
  1349,  1349,   -98,  1021,  1036,   896,  1041,  1046,   937,   937,
  1049,   -98,  1050,  1052,   937,   937,  1053,  1056,  1064,  1080,
  1081,   937,    43,   937,  1082,  1084,  1085,  1089,  1095,-32768,
  1093,   310,  1096,     3,  1098,   937,  1103,   937,  1104,  1109,
  1349,   668,   125,-32768,-32768,  1349,   937,   937,   937,-32768,
   133,   937,   937,   937,   937,   937,   937,   937,  1349,  1349,
  1349,   933,    44,    45,    53,-32768,   784,  1349,  1349,  1349,
  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,-32768,
  1900,  1909,  1111,  1627,    64,  1018,  1115,  1115,  1115,   967,
  1349,-32768,-32768,-32768,-32768,  1349,   970,  1918,  1927,   980,
   983,   989,   992,   994,  1001,  1004,  1002,  1014,  1022,  1024,
  1029,  1030,  1033,  1037,  1038,  1042,  1043,  1044,  1035,-32768,
-32768,-32768,-32768,-32768,  1058,  1059,  1061,  1068,  1069,  1040,
  1071,-32768,  1088,-32768,-32768,   -98,-32768,  1139,-32768,  1150,
-32768,-32768,  -114,  1936,  1161,  1180,  1208,  1349,  1349,  1226,
  1228,  1235,  1237,  1238,  1240,  1241,   505,  1637,   262,   187,
   -98,  1242,   -98,  1243,   -98,    15,  1244,  1945,  1954,  1963,
  1972,  1981,  1990,  1999,  2008,  2017,  2026,  2035,  2044,  1349,
  1349,-32768,  1245,   937,   937,  1168,   937,  1253,  1106,  1115,
  1108,  1122,  1349,   531,  1322,  1261,  1349,   937,  1260,  1275,
  1274,  1135,  1277,    43,  1282,  1287,  1349,  1290,  1294,  1293,
  1300,  1297,    43,  1349,  1349,  1349,   937,  1301,  1306,    43,
  1349,  1311,  1316,  1323,  1349,   310,  1324,-32768,-32768,  1349,
  1349,-32768,-32768,-32768,    67,   106,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1173,-32768,  1349,-32768,  1200,  1176,-32768,
  1204,-32768,  1205,-32768,   -10,-32768,  1349,  1349,  1349,  1349,
  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  2053,  2062,
    64,    73,-32768,   121,  1227,  1302,    14,-32768,-32768,-32768,
-32768,  2071,  1377,  1322,  1231,  2080,  1254,-32768,  1255,-32768,
  1256,-32768,  1262,-32768,  1257,  1647,-32768,  1264,-32768,-32768,
  1276,  1278,  1657,  2089,  1667,  1265,-32768,  1279,  1280,  2098,
  1283,  1281,-32768,  2107,  1305,-32768,   668,  2116,-32768,-32768,
   187,   277,-32768,  1349,  1349,  1349,  1407,  1292,   -25,-32768,
  2125,  2134,  2143,  2152,  2161,  2170,  2179,  2188,  2197,  2206,
  2215,  2224,  1349,  1349,  1331,   937,-32768,-32768,   937,  1349,
  1422,  1376,  1424,  1349,-32768,   192,  1452,    64,    43,  1457,
  1349,  1455,    43,  1458,  1460,  1459,  1465,  1472,  1349,  1473,
   937,  1475,  1476,  1349,  1467,  1478,  1349,  1480,  1485,  1336,
  1349,-32768,   550,   562,   578,-32768,   937,  1490,-32768,  1349,
  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
  1349,  1677,   596,  1343,-32768,  1355,   118,-32768,  1356,  2233,
-32768,  2242,  1349,-32768,  1358,  1365,  1366,  2251,-32768,  1348,
-32768,  1370,-32768,-32768,-32768,  1687,-32768,  1372,-32768,-32768,
  1697,  1373,-32768,  1707,  1384,  1392,-32768,   656,  1505,  1519,
    16,  1393,-32768,  2260,  2269,  2278,  2287,  2296,  2305,  2314,
  2323,  2332,  1717,  1727,  1737,  1540,  1541,   937,   937,-32768,
  1349,  1349,  1349,  1322,    43,    43,    43,    43,  1542,  1549,
  1555,    43,  1561,  1562,  1564,  1566,  1568,-32768,-32768,-32768,
-32768,   -10,   937,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
  1349,  1349,-32768,-32768,-32768,-32768,-32768,  1423,  1428,   724,
  2341,  2350,  1322,  1433,  1440,  1421,  1442,-32768,-32768,-32768,
  1441,-32768,-32768,-32768,  1450,  1451,   -24,  1453,  2359,  2368,
  2377,  2386,  2395,  2404,  2413,  2422,  2431,  1461,  1462,  1468,
   937,  1516,  1600,  1349,  1349,   245,    43,    43,  1606,  1619,
    43,  1608,  1618,  1620,   937,  1349,  1349,  1349,  1349,  1349,
  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1481,  1484,-32768,
   321,   743,  1349,  1477,  1483,-32768,-32768,  1486,  1492,  1491,
-32768,  1493,  2440,  2449,  2458,  2467,  2476,  2485,  2494,  2503,
  2512,   122,   668,   154,   668,   166,   668,  1548,  1349,  1349,
-32768,-32768,  1322,    43,   937,  1643,  1649,  1650,  1652,  1349,
  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1653,
  1349,  1659,  1349,  1660,  1514,  2521,   782,  1322,  1523,  1524,
-32768,-32768,-32768,-32768,  2530,  2539,  2548,  2557,  2566,  2575,
  1747,  1757,  1767,   668,-32768,   668,-32768,   668,-32768,  1349,
  1349,-32768,   300,    43,   937,  1349,  1349,  1349,  1349,  1349,
  1349,-32768,-32768,-32768,  2584,   823,  1528,  1526,  1533,  2593,
  2602,  2611,  2620,  2629,  2638,  1525,  1532,  1534,  1349,  1683,
-32768,   937,    43,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
  1349,  1349,   844,-32768,  1543,  1545,  2647,  2656,  2665,  2674,
  2683,  2692,   171,   668,   188,   668,   205,   668,  1690,   937,
  1693,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1699,  1349,
  1700,  1349,  1702,-32768,  1563,-32768,  2701,  2710,  2719,  1777,
  1787,  1797,   668,-32768,   668,-32768,   668,-32768,   937,  1349,
  1349,  1349,-32768,-32768,-32768,  1573,  2728,  2737,  2746,  1565,
  1572,  1574,   937,  1349,  1349,  1349,  1349,  1349,  1349,  1583,
  2755,  2764,  2773,   231,   668,   242,   668,   246,   668,    43,
  1349,  1349,  1349,  1349,  1703,  1349,  1710,  1349,  1712,  1576,
  1807,  1817,  1827,   668,-32768,   668,-32768,   668,-32768,  1730,
-32768,-32768,-32768,-32768,  1584,  1585,  1591,  1349,  1349,  1349,
   247,   668,   258,   668,   263,   668,  1349,  1740,  1349,  1742,
  1349,  1743,   668,-32768,   668,-32768,   668,-32768,  1755,  1756,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1270,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1753,  1759,  -247,
   181,  1760,-32768,-32768,-32768,   757,  -856,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -595,-32768,-32768,  -683,    -7,
-32768,  1312,    -3,  -103,-32768,  -795,  1063,   -82,-32768
};


#define	YYLAST		2925


static const short yytable[] = {    94,
   216,   368,   919,   258,   150,   875,    -7,    -7,   665,    -7,
   112,   386,   387,   388,     7,   180,   181,   881,   263,   182,
   784,  1011,   721,   722,   138,   115,    96,   139,   140,   289,
   290,   180,   181,   857,   857,   182,   232,   136,   580,   858,
   858,   237,   760,   666,   108,   333,  -220,   109,   857,  -220,
   823,  -220,   133,   575,   858,   134,    97,  -220,  -220,   832,
   256,   182,   596,   103,   260,   261,   839,   415,   124,   125,
    98,   126,   849,   289,   290,   180,   181,   463,   581,   182,
   464,   389,    99,   175,   176,   177,   183,   128,   264,   100,
   129,   130,   945,   131,   259,   147,   375,   376,   148,   218,
   219,   220,   221,   222,   113,   224,   225,   114,   227,   228,
   229,   850,   233,    -7,    -7,    -7,    -7,    -7,    -7,    -7,
    -7,   151,   116,   990,   809,   246,   247,   104,   245,   918,
  1074,   101,   462,   250,   650,   651,   652,   653,   654,     1,
     2,   262,     3,   265,   102,   446,   447,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   882,   785,  1012,
   292,   293,   294,   295,   296,   297,   289,   290,   180,   181,
   678,   679,   182,   289,   290,   180,   181,   105,   106,   182,
   919,   289,   290,   180,   181,   691,   693,   182,   692,   694,
   289,   290,   180,   181,   695,   946,   182,   696,   107,   950,
   289,   290,   180,   181,   714,   338,   182,   715,   341,   110,
    -1,     8,   345,     9,   876,   877,   350,   351,   352,   111,
   354,   355,   356,   357,   358,   359,   360,    39,    40,    41,
    42,   121,    44,   370,   371,   372,   117,   118,   119,   289,
   290,   180,   181,   120,   378,   182,   384,   122,   123,   391,
   392,   289,   290,   180,   181,   127,   132,   182,   289,   290,
   180,   181,   876,  1139,   182,   878,  1140,    68,    69,   145,
   137,   413,   414,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,  -219,  1141,   141,  -219,  1142,  -219,
   142,  1034,  1035,  1036,  1037,  -219,  -219,  1143,  1041,   182,
  1144,   254,  1238,   143,   257,  1239,   943,    10,    11,    12,
    13,    14,    15,    16,    17,   289,   290,   180,   181,  1240,
   465,   182,  1241,   144,   146,   470,   149,   289,   290,   180,
   181,   152,   153,   182,   479,   480,  1242,   478,   335,  1243,
   154,   483,   155,   289,   290,   180,   181,   156,   487,   182,
   564,   565,   157,   567,   340,   217,   158,   569,   570,  1093,
   234,   238,  1294,  1094,  1095,  1295,   159,  1098,   289,   290,
   180,   181,   239,  1296,   182,   525,  1297,  1298,  1327,   160,
  1299,  1328,   526,   527,   528,   289,   290,   180,   181,  1329,
   161,   182,  1330,   776,  1331,   162,   777,  1332,    91,    92,
   289,   290,   180,   181,   248,    93,   182,   255,   911,   163,
   571,   912,   164,   613,   165,   166,   616,   167,   168,  1187,
  1149,   169,   778,   289,   290,   180,   181,   563,   170,   182,
   249,   171,   172,   173,   572,   573,   636,   637,   663,   174,
   214,   223,   642,   643,   289,   290,   180,   181,   226,   649,
   182,   656,  1120,   235,   236,  1121,   240,   331,   241,   242,
   593,   594,   595,   668,   243,   670,   289,   290,   180,   181,
  1188,   244,   182,   182,   675,   676,   677,   342,   251,   680,
   681,   682,   683,   684,   685,   686,   611,   612,   252,   614,
   289,   290,   180,   181,   253,   267,   182,   328,   268,  1216,
   298,   467,   299,   628,   629,   289,   290,   180,   181,   630,
   300,   182,   330,    68,    69,   301,   471,   302,   639,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
   303,   304,   305,   673,   289,   290,   180,   181,   674,   306,
   182,   289,   290,   180,   181,   472,   307,   182,   332,   308,
   291,   687,   688,   689,   309,   310,   311,   312,   313,   314,
   698,   699,   700,   701,   702,   703,   704,   705,   706,   707,
   708,   709,   315,   910,   316,   317,  1300,   318,   289,   290,
   180,   181,   319,   724,   182,   348,   320,   321,   725,   592,
   322,   323,   324,   325,    24,    25,    26,    27,    28,    29,
    30,    31,   326,    32,   806,    34,    35,   327,    37,    38,
   353,   813,   361,   369,   380,   817,   381,   383,   289,   290,
   180,   181,   845,   416,   182,   417,   418,   419,    50,   774,
   439,   420,   757,   421,   836,   422,   423,   424,   425,   426,
   765,   766,    51,    52,   178,   179,   180,   181,   427,   428,
   182,    93,   429,   430,   230,   431,   432,   779,   433,   781,
   434,   783,   435,   289,   290,   180,   181,   436,   437,   182,
   438,   440,   799,   800,   969,   289,   290,   180,   181,   441,
   442,   182,   443,   444,   445,   812,   970,   814,   448,   816,
   449,   289,   290,   180,   181,   450,    55,   182,   451,   826,
   452,   457,   971,   453,   454,   456,   833,   834,   835,   289,
   290,   180,   181,   840,   459,   182,   460,   844,   461,   373,
   987,   466,   847,   848,   481,   482,   488,   514,   515,   516,
    24,    25,    26,    27,    28,    29,    30,    31,   852,    32,
   517,    34,    35,   519,    37,    38,   530,   529,   531,   861,
   862,   863,   864,   865,   866,   867,   868,   869,   870,   871,
   872,   560,   532,   935,    50,   533,   936,   534,   535,   289,
   290,   180,   181,   566,   568,   182,   886,   561,    51,    52,
  1008,   289,   290,   180,   181,   577,   578,   182,   958,   489,
   490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   500,   536,   579,   582,   972,   289,   290,   180,   181,   583,
   537,   182,   538,   576,   334,   584,   913,   914,   915,   489,
   490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   500,   585,    55,   539,   540,   932,   933,   289,   290,   180,
   181,   541,   937,   182,   940,   586,   942,   587,  1063,   588,
   610,   542,   598,   948,   543,   377,   289,   290,   180,   181,
   615,   956,   182,   620,   617,   544,   961,  1122,   545,   964,
   546,   547,   548,   968,   621,  1028,  1029,   549,   501,   550,
   551,   552,   974,   975,   976,   977,   978,   979,   980,   981,
   982,   983,   984,   985,   553,   289,   290,   180,   181,   554,
  1048,   182,   555,   618,   556,   994,  1172,   557,   697,    68,
    69,   558,   559,   562,   589,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,   289,   290,   180,   181,
   599,   600,   182,   289,   290,   180,   181,  1200,  1088,   182,
   626,   601,   336,  1030,  1031,  1032,  1033,   289,   290,   180,
   181,   602,  1102,   182,   289,   290,   180,   181,  1229,   603,
   182,   619,   604,   337,   605,   627,  1049,  1050,  1051,  1052,
  1053,  1054,  1055,  1056,  1057,    24,    25,    26,    27,    28,
    29,    30,    31,   631,    32,  1066,    34,    35,   606,    37,
    38,   289,   290,   180,   181,   607,   608,   182,   632,   609,
   339,   633,  1150,   634,   289,   290,   180,   181,   635,    50,
   182,   638,   640,   343,   641,   644,  1091,  1092,   645,   289,
   290,   180,   181,    51,    52,   182,   646,   362,  1103,  1104,
  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1113,  1115,  1117,
    91,    92,   647,   648,   657,  1123,   690,    93,   658,   659,
   230,   660,  1189,   289,   290,   180,   181,   661,   662,   182,
   717,   664,   344,   667,   289,   290,   180,   181,   669,   671,
   182,  1146,  1147,   349,   672,  1148,   712,    55,   718,  1215,
   723,   726,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,
  1163,  1164,   729,  1166,   730,  1168,   289,   290,   180,   181,
  1173,   731,   182,   732,   758,   382,   733,  1245,   289,   290,
   180,   181,   734,   736,   182,   759,   735,   385,   289,   290,
   180,   181,  1185,  1186,   182,   737,   762,   393,  1190,  1191,
  1192,  1193,  1194,  1195,   738,   739,  1266,   289,   290,   180,
   181,   740,   741,   182,   742,   763,   394,   748,   743,   744,
  1280,  1213,   754,   745,   746,   747,  1217,  1218,  1219,  1220,
  1221,  1222,  1224,  1226,  1228,   289,   290,   180,   181,   749,
   750,   182,   751,   764,   395,   289,   290,   180,   181,   752,
   753,   182,   755,   363,  1247,  1248,  1249,  1250,  1251,  1252,
  1253,   767,  1255,   768,  1257,   289,   290,   180,   181,   756,
   769,   182,   770,   771,   396,   772,   773,   780,   782,   786,
   805,   801,  1267,  1268,  1269,   289,   290,   180,   181,   807,
   808,   182,   810,   815,   397,   818,  1281,  1282,  1283,  1285,
  1287,  1289,   289,   290,   180,   181,   811,   819,   182,   820,
   821,   398,   822,  1301,  1302,  1303,  1304,   824,  1306,   825,
  1308,   289,   290,   180,   181,   827,   828,   182,   829,   831,
   399,   289,   290,   180,   181,   830,   837,   182,   838,   403,
  1322,  1324,  1326,   841,   289,   290,   180,   181,   842,  1333,
   182,  1335,   410,  1337,    68,    69,   851,   854,   843,   846,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    68,    69,   184,   853,   855,   856,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    68,   939,
   879,   880,   885,   887,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,   889,   890,   891,   893,   185,
   186,   187,   916,   934,   892,   895,   901,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   938,   896,   941,
   897,   902,   903,   906,   905,   198,   199,   200,   201,   202,
   203,   204,   205,   206,   207,   917,   208,   209,   210,   211,
   212,   213,   289,   290,   180,   181,   908,   944,   182,   947,
   949,   400,   952,   951,   953,   178,   179,   180,   181,   962,
   954,   182,    93,   289,   290,   180,   181,   955,   957,   182,
   959,   960,   401,   963,   965,   289,   290,   180,   181,   966,
   967,   182,    91,    92,   402,   973,   988,    -3,    22,    93,
   999,    23,   289,   290,   180,   181,   989,   991,   182,   995,
  1009,   404,   289,   290,   180,   181,   996,   997,   182,    91,
    92,   405,  1000,  1002,  1010,  1004,    93,    24,    25,    26,
    27,    28,    29,    30,    31,  1006,    32,    33,    34,    35,
    36,    37,    38,  1007,  1013,  1026,  1027,  1038,    39,    40,
    41,    42,    43,    44,  1039,    45,    46,    47,    48,    49,
  1040,    50,   289,   290,   180,   181,  1042,  1043,   182,  1044,
  1045,   406,  1046,  1069,  1061,    51,    52,   289,   290,   180,
   181,    53,  1062,   182,  1067,    54,   407,   289,   290,   180,
   181,  1068,  1071,   182,  1070,  1089,   408,   289,   290,   180,
   181,  1072,  1073,   182,  1075,  1090,   409,   289,   290,   180,
   181,  1096,  1099,   182,  1085,  1086,   455,   289,   290,   180,
   181,  1087,  1100,   182,  1097,  1101,   458,  1145,  1124,    55,
   289,   290,   180,   181,  1125,  1118,   182,  1119,  1126,   468,
   289,   290,   180,   181,  1127,  1128,   182,  1129,  1151,   469,
   289,   290,   180,   181,  1152,  1153,   182,  1154,  1165,   473,
   289,   290,   180,   181,  1167,  1169,   182,  1170,  1201,   474,
   289,   290,   180,   181,  1174,  1175,   182,  1202,  1210,   475,
   289,   290,   180,   181,  1203,  1211,   182,  1212,  1214,   476,
   289,   290,   180,   181,  1230,  1244,   182,  1231,  1246,   477,
   289,   290,   180,   181,  1254,  1256,   182,  1258,  1305,   518,
   289,   290,   180,   181,  1259,  1307,   182,  1309,  1277,   523,
   289,   290,   180,   181,  1273,  1278,   182,  1279,  1310,   524,
   289,   290,   180,   181,  1290,  1314,   182,  1318,  1319,   622,
   289,   290,   180,   181,  1320,  1334,   182,  1336,  1338,   623,
   289,   290,   180,   181,  1340,  1341,   182,   597,    59,   624,
   289,   290,   180,   181,    60,    61,   182,     0,  1047,   625,
   289,   290,   180,   181,   574,     0,   182,   804,     0,   713,
   289,   290,   180,   181,     0,     0,   182,     0,     0,   775,
   289,   290,   180,   181,     0,     0,   182,     0,     0,   894,
   289,   290,   180,   181,     0,     0,   182,     0,     0,   898,
   289,   290,   180,   181,     0,     0,   182,     0,     0,   900,
   289,   290,   180,   181,     0,     0,   182,     0,     0,   986,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1001,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1003,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1005,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1023,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1024,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1025,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1182,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1183,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1184,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1263,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1264,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1265,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1311,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1312,
   289,   290,   180,   181,     0,     0,   182,     0,     0,  1313,
   289,   290,   180,   181,     0,     0,   182,     0,   411,   289,
   290,   180,   181,     0,     0,   182,     0,   412,   289,   290,
   180,   181,     0,     0,   182,     0,   484,   289,   290,   180,
   181,     0,     0,   182,     0,   485,   289,   290,   180,   181,
     0,     0,   182,     0,   486,   289,   290,   180,   181,     0,
     0,   182,     0,   590,   289,   290,   180,   181,     0,     0,
   182,     0,   591,   289,   290,   180,   181,     0,     0,   182,
     0,   710,   289,   290,   180,   181,     0,     0,   182,     0,
   711,   289,   290,   180,   181,     0,     0,   182,     0,   727,
   289,   290,   180,   181,     0,     0,   182,     0,   728,   289,
   290,   180,   181,     0,     0,   182,     0,   761,   289,   290,
   180,   181,     0,     0,   182,     0,   787,   289,   290,   180,
   181,     0,     0,   182,     0,   788,   289,   290,   180,   181,
     0,     0,   182,     0,   789,   289,   290,   180,   181,     0,
     0,   182,     0,   790,   289,   290,   180,   181,     0,     0,
   182,     0,   791,   289,   290,   180,   181,     0,     0,   182,
     0,   792,   289,   290,   180,   181,     0,     0,   182,     0,
   793,   289,   290,   180,   181,     0,     0,   182,     0,   794,
   289,   290,   180,   181,     0,     0,   182,     0,   795,   289,
   290,   180,   181,     0,     0,   182,     0,   796,   289,   290,
   180,   181,     0,     0,   182,     0,   797,   289,   290,   180,
   181,     0,     0,   182,     0,   798,   289,   290,   180,   181,
     0,     0,   182,     0,   873,   289,   290,   180,   181,     0,
     0,   182,     0,   874,   289,   290,   180,   181,     0,     0,
   182,     0,   884,   289,   290,   180,   181,     0,     0,   182,
     0,   888,   289,   290,   180,   181,     0,     0,   182,     0,
   899,   289,   290,   180,   181,     0,     0,   182,     0,   904,
   289,   290,   180,   181,     0,     0,   182,     0,   907,   289,
   290,   180,   181,     0,     0,   182,     0,   909,   289,   290,
   180,   181,     0,     0,   182,     0,   920,   289,   290,   180,
   181,     0,     0,   182,     0,   921,   289,   290,   180,   181,
     0,     0,   182,     0,   922,   289,   290,   180,   181,     0,
     0,   182,     0,   923,   289,   290,   180,   181,     0,     0,
   182,     0,   924,   289,   290,   180,   181,     0,     0,   182,
     0,   925,   289,   290,   180,   181,     0,     0,   182,     0,
   926,   289,   290,   180,   181,     0,     0,   182,     0,   927,
   289,   290,   180,   181,     0,     0,   182,     0,   928,   289,
   290,   180,   181,     0,     0,   182,     0,   929,   289,   290,
   180,   181,     0,     0,   182,     0,   930,   289,   290,   180,
   181,     0,     0,   182,     0,   931,   289,   290,   180,   181,
     0,     0,   182,     0,   992,   289,   290,   180,   181,     0,
     0,   182,     0,   993,   289,   290,   180,   181,     0,     0,
   182,     0,   998,   289,   290,   180,   181,     0,     0,   182,
     0,  1014,   289,   290,   180,   181,     0,     0,   182,     0,
  1015,   289,   290,   180,   181,     0,     0,   182,     0,  1016,
   289,   290,   180,   181,     0,     0,   182,     0,  1017,   289,
   290,   180,   181,     0,     0,   182,     0,  1018,   289,   290,
   180,   181,     0,     0,   182,     0,  1019,   289,   290,   180,
   181,     0,     0,   182,     0,  1020,   289,   290,   180,   181,
     0,     0,   182,     0,  1021,   289,   290,   180,   181,     0,
     0,   182,     0,  1022,   289,   290,   180,   181,     0,     0,
   182,     0,  1064,   289,   290,   180,   181,     0,     0,   182,
     0,  1065,   289,   290,   180,   181,     0,     0,   182,     0,
  1076,   289,   290,   180,   181,     0,     0,   182,     0,  1077,
   289,   290,   180,   181,     0,     0,   182,     0,  1078,   289,
   290,   180,   181,     0,     0,   182,     0,  1079,   289,   290,
   180,   181,     0,     0,   182,     0,  1080,   289,   290,   180,
   181,     0,     0,   182,     0,  1081,   289,   290,   180,   181,
     0,     0,   182,     0,  1082,   289,   290,   180,   181,     0,
     0,   182,     0,  1083,   289,   290,   180,   181,     0,     0,
   182,     0,  1084,   289,   290,   180,   181,     0,     0,   182,
     0,  1130,   289,   290,   180,   181,     0,     0,   182,     0,
  1131,   289,   290,   180,   181,     0,     0,   182,     0,  1132,
   289,   290,   180,   181,     0,     0,   182,     0,  1133,   289,
   290,   180,   181,     0,     0,   182,     0,  1134,   289,   290,
   180,   181,     0,     0,   182,     0,  1135,   289,   290,   180,
   181,     0,     0,   182,     0,  1136,   289,   290,   180,   181,
     0,     0,   182,     0,  1137,   289,   290,   180,   181,     0,
     0,   182,     0,  1138,   289,   290,   180,   181,     0,     0,
   182,     0,  1171,   289,   290,   180,   181,     0,     0,   182,
     0,  1176,   289,   290,   180,   181,     0,     0,   182,     0,
  1177,   289,   290,   180,   181,     0,     0,   182,     0,  1178,
   289,   290,   180,   181,     0,     0,   182,     0,  1179,   289,
   290,   180,   181,     0,     0,   182,     0,  1180,   289,   290,
   180,   181,     0,     0,   182,     0,  1181,   289,   290,   180,
   181,     0,     0,   182,     0,  1199,   289,   290,   180,   181,
     0,     0,   182,     0,  1204,   289,   290,   180,   181,     0,
     0,   182,     0,  1205,   289,   290,   180,   181,     0,     0,
   182,     0,  1206,   289,   290,   180,   181,     0,     0,   182,
     0,  1207,   289,   290,   180,   181,     0,     0,   182,     0,
  1208,   289,   290,   180,   181,     0,     0,   182,     0,  1209,
   289,   290,   180,   181,     0,     0,   182,     0,  1232,   289,
   290,   180,   181,     0,     0,   182,     0,  1233,   289,   290,
   180,   181,     0,     0,   182,     0,  1234,   289,   290,   180,
   181,     0,     0,   182,     0,  1235,   289,   290,   180,   181,
     0,     0,   182,     0,  1236,   289,   290,   180,   181,     0,
     0,   182,     0,  1237,   289,   290,   180,   181,     0,     0,
   182,     0,  1260,   289,   290,   180,   181,     0,     0,   182,
     0,  1261,   289,   290,   180,   181,     0,     0,   182,     0,
  1262,   289,   290,   180,   181,     0,     0,   182,     0,  1274,
   289,   290,   180,   181,     0,     0,   182,     0,  1275,   289,
   290,   180,   181,     0,     0,   182,     0,  1276,   289,   290,
   180,   181,     0,     0,   182,     0,  1291,   289,   290,   180,
   181,     0,     0,   182,     0,  1292,   289,   290,   180,   181,
     0,     0,   182,     0,  1293
};

static const short yycheck[] = {     7,
   104,   249,   859,    63,    34,   801,     0,     1,     6,     3,
    57,    85,    86,    87,   137,   146,   147,     4,    81,   150,
     6,     6,   618,   619,    30,    57,     6,    33,    34,   144,
   145,   146,   147,    59,    59,   150,   119,    41,     6,    65,
    65,   124,   157,    41,   151,     6,   135,   154,    59,   138,
   734,   140,   151,     6,    65,   154,     7,   146,   147,   743,
   143,   150,     6,   151,   147,   148,   750,   138,    33,    34,
     6,    36,     6,   144,   145,   146,   147,   152,    46,   150,
   155,   155,     6,    91,    92,    93,    94,    30,   151,     6,
    33,    34,   888,    36,   154,    30,     6,     7,    33,   107,
   108,   109,   110,   111,   151,   113,   114,   154,   116,   117,
   118,     6,   120,   107,   108,   109,   110,   111,   112,   113,
   114,   151,   154,     6,   720,   133,   134,   151,   132,   155,
   155,     6,     8,   137,    92,    93,    94,    95,    96,   133,
   134,   149,   136,   151,     6,   152,   153,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   154,   154,   154,
   178,   179,   180,   181,   182,   183,   144,   145,   146,   147,
    48,    49,   150,   144,   145,   146,   147,   151,     6,   150,
  1047,   144,   145,   146,   147,   152,   152,   150,   155,   155,
   144,   145,   146,   147,   152,   889,   150,   155,     7,   893,
   144,   145,   146,   147,   151,   223,   150,   154,   226,   151,
     0,     1,   230,     3,   152,   153,   234,   235,   236,   151,
   238,   239,   240,   241,   242,   243,   244,    51,    52,    53,
    54,    34,    56,   251,   252,   253,   151,   151,    38,   144,
   145,   146,   147,   151,   258,   150,   264,    34,    34,   267,
   268,   144,   145,   146,   147,    36,   154,   150,   144,   145,
   146,   147,   152,   152,   150,   155,   155,     3,     4,     6,
   154,   289,   290,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   135,   152,   154,   138,   155,   140,
     5,   995,   996,   997,   998,   146,   147,   152,  1002,   150,
   155,   141,   152,    34,   144,   155,   135,   107,   108,   109,
   110,   111,   112,   113,   114,   144,   145,   146,   147,   152,
   348,   150,   155,   154,     5,   353,   151,   144,   145,   146,
   147,   154,    41,   150,   362,   363,   152,   361,   155,   155,
    34,   369,   151,   144,   145,   146,   147,   151,   376,   150,
   453,   454,   151,   456,   155,     5,   151,   460,   461,   135,
   154,   154,   152,  1067,  1068,   155,   151,  1071,   144,   145,
   146,   147,   154,   152,   150,   403,   155,   152,   152,   151,
   155,   155,   410,   411,   412,   144,   145,   146,   147,   152,
   151,   150,   155,   152,   152,   151,   155,   155,   144,   145,
   144,   145,   146,   147,   154,   151,   150,     6,   152,   151,
   156,   155,   151,   516,   151,   151,   519,   151,   151,   140,
  1124,   151,   690,   144,   145,   146,   147,   451,   151,   150,
   154,   151,   151,   151,   462,   463,   539,   540,   562,   151,
   151,   151,   545,   546,   144,   145,   146,   147,   151,   552,
   150,   554,   152,   151,   151,   155,   151,   153,   151,   151,
   484,   485,   486,   566,   151,   568,   144,   145,   146,   147,
  1174,   151,   150,   150,   577,   578,   579,   155,   154,   582,
   583,   584,   585,   586,   587,   588,   514,   515,   154,   517,
   144,   145,   146,   147,   154,   151,   150,     5,   151,  1203,
   151,   155,   151,   531,   532,   144,   145,   146,   147,   533,
   151,   150,   152,     3,     4,   151,   155,   151,   542,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
   151,   151,   151,   571,   144,   145,   146,   147,   576,   151,
   150,   144,   145,   146,   147,   155,   151,   150,   152,   151,
   153,   589,   590,   591,   151,   151,   151,   151,   151,   151,
   598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
   608,   609,   151,   851,   151,   151,  1290,   151,   144,   145,
   146,   147,   151,   621,   150,     7,   151,   151,   626,   155,
   151,   151,   151,   151,    30,    31,    32,    33,    34,    35,
    36,    37,   151,    39,   717,    41,    42,   151,    44,    45,
     7,   724,   152,   152,     7,   728,     7,    82,   144,   145,
   146,   147,   756,     5,   150,     5,     5,     5,    64,   155,
   125,     5,   666,     5,   747,     5,     5,     5,     5,     5,
   678,   679,    78,    79,   144,   145,   146,   147,     5,     5,
   150,   151,     5,     5,   154,     5,     5,   691,     5,   693,
     5,   695,     5,   144,   145,   146,   147,     5,     5,   150,
     5,     5,   710,   711,   155,   144,   145,   146,   147,     5,
     5,   150,     5,     3,     5,   723,   155,   725,     5,   727,
     6,   144,   145,   146,   147,     5,   132,   150,     7,   737,
     6,     6,   155,     7,     7,     7,   744,   745,   746,   144,
   145,   146,   147,   751,     6,   150,     7,   755,     7,   155,
   155,     7,   760,   761,   155,   155,   154,   151,   154,     7,
    30,    31,    32,    33,    34,    35,    36,    37,   776,    39,
   151,    41,    42,     7,    44,    45,   152,   139,   152,   787,
   788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
   798,     5,   152,   876,    64,   152,   879,   152,   152,   144,
   145,   146,   147,     7,     7,   150,   814,   153,    78,    79,
   155,   144,   145,   146,   147,     7,     7,   150,   901,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   152,     7,     7,   917,   144,   145,   146,   147,     7,
   152,   150,   152,   154,   153,     7,   854,   855,   856,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,     7,   132,   152,   152,   873,   874,   144,   145,   146,
   147,   152,   880,   150,   882,     7,   884,     7,   155,     7,
     6,   152,   151,   891,   152,   155,   144,   145,   146,   147,
     7,   899,   150,     7,   154,   152,   904,   155,   152,   907,
   152,   152,   152,   911,     7,   988,   989,   152,   155,   152,
   152,   152,   920,   921,   922,   923,   924,   925,   926,   927,
   928,   929,   930,   931,   152,   144,   145,   146,   147,   152,
  1013,   150,   152,   154,   152,   943,   155,   152,   155,     3,
     4,   152,   152,   152,   152,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   144,   145,   146,   147,
   151,   151,   150,   144,   145,   146,   147,   155,  1061,   150,
   135,   151,   153,   991,   992,   993,   994,   144,   145,   146,
   147,   151,  1075,   150,   144,   145,   146,   147,   155,   151,
   150,   154,   151,   153,   151,     3,  1014,  1015,  1016,  1017,
  1018,  1019,  1020,  1021,  1022,    30,    31,    32,    33,    34,
    35,    36,    37,     3,    39,  1033,    41,    42,   151,    44,
    45,   144,   145,   146,   147,   151,   151,   150,     3,   151,
   153,   146,  1125,     3,   144,   145,   146,   147,     3,    64,
   150,     3,     3,   153,     3,     3,  1064,  1065,     3,   144,
   145,   146,   147,    78,    79,   150,     3,   152,  1076,  1077,
  1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,
   144,   145,     3,     3,     3,  1093,   154,   151,     5,     5,
   154,     3,  1175,   144,   145,   146,   147,     3,     6,   150,
    83,     6,   153,     6,   144,   145,   146,   147,     6,     6,
   150,  1119,  1120,   153,     6,  1123,     6,   132,     4,  1202,
   154,   152,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,
  1138,  1139,   153,  1141,   152,  1143,   144,   145,   146,   147,
  1148,   153,   150,   152,     6,   153,   153,  1230,   144,   145,
   146,   147,   152,   152,   150,     6,   153,   153,   144,   145,
   146,   147,  1170,  1171,   150,   152,     6,   153,  1176,  1177,
  1178,  1179,  1180,  1181,   153,   152,  1259,   144,   145,   146,
   147,   153,   153,   150,   152,     6,   153,   153,   152,   152,
  1273,  1199,   153,   152,   152,   152,  1204,  1205,  1206,  1207,
  1208,  1209,  1210,  1211,  1212,   144,   145,   146,   147,   152,
   152,   150,   152,     6,   153,   144,   145,   146,   147,   152,
   152,   150,   152,   152,  1232,  1233,  1234,  1235,  1236,  1237,
  1238,     6,  1240,     6,  1242,   144,   145,   146,   147,   152,
     6,   150,     6,     6,   153,     6,     6,     6,     6,     6,
    83,     7,  1260,  1261,  1262,   144,   145,   146,   147,     7,
   155,   150,   155,     3,   153,     6,  1274,  1275,  1276,  1277,
  1278,  1279,   144,   145,   146,   147,   155,     3,   150,     6,
   146,   153,     6,  1291,  1292,  1293,  1294,     6,  1296,     3,
  1298,   144,   145,   146,   147,     6,     3,   150,     6,     3,
   153,   144,   145,   146,   147,     6,     6,   150,     3,   152,
  1318,  1319,  1320,     3,   144,   145,   146,   147,     3,  1327,
   150,  1329,   152,  1331,     3,     4,   154,   152,     6,     6,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,     3,     4,    33,   155,   152,   152,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,     3,     4,
   154,    80,     6,   153,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   152,   152,   152,   152,    89,
    90,    91,     6,    83,   153,   152,   152,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,     6,   153,     6,
   153,   153,   153,   153,   152,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   154,   126,   127,   128,   129,
   130,   131,   144,   145,   146,   147,   152,     6,   150,     3,
     6,   153,     3,     6,     6,   144,   145,   146,   147,     3,
     6,   150,   151,   144,   145,   146,   147,     6,     6,   150,
     6,     6,   153,     6,     5,   144,   145,   146,   147,     5,
   155,   150,   144,   145,   153,     6,   154,     0,     1,   151,
   153,     4,   144,   145,   146,   147,   152,   152,   150,   152,
     6,   153,   144,   145,   146,   147,   152,   152,   150,   144,
   145,   153,   153,   152,     6,   153,   151,    30,    31,    32,
    33,    34,    35,    36,    37,   152,    39,    40,    41,    42,
    43,    44,    45,   152,   152,     6,     6,     6,    51,    52,
    53,    54,    55,    56,     6,    58,    59,    60,    61,    62,
     6,    64,   144,   145,   146,   147,     6,     6,   150,     6,
     5,   153,     5,   153,   152,    78,    79,   144,   145,   146,
   147,    84,   155,   150,   152,    88,   153,   144,   145,   146,
   147,   152,   152,   150,   153,    80,   153,   144,   145,   146,
   147,   152,   152,   150,   152,     6,   153,   144,   145,   146,
   147,     6,     5,   150,   154,   154,   153,   144,   145,   146,
   147,   154,     5,   150,     6,     6,   153,    80,   152,   132,
   144,   145,   146,   147,   152,   155,   150,   154,   153,   153,
   144,   145,   146,   147,   153,   155,   150,   155,     6,   153,
   144,   145,   146,   147,     6,     6,   150,     6,     6,   153,
   144,   145,   146,   147,     6,     6,   150,   154,   141,   153,
   144,   145,   146,   147,   152,   152,   150,   152,   154,   153,
   144,   145,   146,   147,   152,   154,   150,   154,     6,   153,
   144,   145,   146,   147,   152,     6,   150,   153,     6,   153,
   144,   145,   146,   147,     6,     6,   150,     6,     6,   153,
   144,   145,   146,   147,   152,     6,   150,     6,   154,   153,
   144,   145,   146,   147,   152,   154,   150,   154,   153,   153,
   144,   145,   146,   147,   152,     6,   150,   154,   154,   153,
   144,   145,   146,   147,   154,     6,   150,     6,     6,   153,
   144,   145,   146,   147,     0,     0,   150,   488,     6,   153,
   144,   145,   146,   147,     6,     6,   150,    -1,  1012,   153,
   144,   145,   146,   147,   463,    -1,   150,   715,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,    -1,   153,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,
    -1,   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,
   150,    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,
    -1,   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,
   152,   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,
   144,   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,
   145,   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,
   146,   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,
   147,    -1,    -1,   150,    -1,   152,   144,   145,   146,   147,
    -1,    -1,   150,    -1,   152
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 126 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 140 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 147 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 167 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 172 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 177 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 188 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 191 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 195 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 201 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 207 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 214 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 220 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 224 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 228 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 235 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 239 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 244 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 248 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 252 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 256 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 260 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 264 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 268 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 272 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 278 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 281 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 284 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 288 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 292 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 296 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 300 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 315 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 319 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 322 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 325 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 336 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 342 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 343 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 344 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 345 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 346 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 347 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 348 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 349 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 350 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 351 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 352 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 353 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 65:
#line 362 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 66:
#line 366 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 67:
#line 373 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 80:
#line 392 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 81:
#line 394 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 82:
#line 399 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 83:
#line 404 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 84:
#line 411 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 413 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 418 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 87:
#line 423 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 88:
#line 430 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 432 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 437 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 91:
#line 442 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 92:
#line 449 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 451 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 457 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 463 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 96:
#line 470 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 472 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 478 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 484 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 100:
#line 491 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 493 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 499 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 505 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 104:
#line 512 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 514 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 521 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 530 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 108:
#line 537 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 539 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 546 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 555 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 112:
#line 562 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 564 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 571 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 580 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 116:
#line 587 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 589 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 597 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 606 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 120:
#line 613 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 615 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 623 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 632 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 124:
#line 639 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 641 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 649 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 658 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 128:
#line 671 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 129:
#line 688 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 130:
#line 695 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 131:
#line 701 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 132:
#line 720 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 133:
#line 731 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 134:
#line 739 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 135:
#line 745 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 136:
#line 751 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 137:
#line 770 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 138:
#line 776 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 139:
#line 793 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 140:
#line 799 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 805 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 142:
#line 811 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 143:
#line 817 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 144:
#line 823 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 145:
#line 842 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 146:
#line 854 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 860 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 148:
#line 879 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 149:
#line 902 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 150:
#line 910 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 151:
#line 914 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 920 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 926 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 154:
#line 938 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 155:
#line 944 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 156:
#line 950 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 963 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 158:
#line 968 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 159:
#line 973 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 160:
#line 978 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 161:
#line 985 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 162:
#line 986 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 163:
#line 987 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 164:
#line 992 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 165:
#line 996 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 166:
#line 1008 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 167:
#line 1026 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 168:
#line 1041 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 169:
#line 1072 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 170:
#line 1077 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 171:
#line 1083 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 172:
#line 1087 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 173:
#line 1091 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 174:
#line 1095 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 175:
#line 1099 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 176:
#line 1104 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 177:
#line 1112 "Gmsh.y"
{
    ;
    break;}
case 178:
#line 1115 "Gmsh.y"
{
    ;
    break;}
case 179:
#line 1121 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 180:
#line 1138 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 181:
#line 1149 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 182:
#line 1166 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 183:
#line 1183 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 184:
#line 1200 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 185:
#line 1221 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 186:
#line 1241 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 187:
#line 1261 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 188:
#line 1278 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 189:
#line 1303 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 191:
#line 1315 "Gmsh.y"
{
      i = (int)yyvsp[-11].d ;
      if(i < 0 || i > 5)
	vyyerror("Wrong Clip Plane Number %d", i);
      else{
	CTX.clip[i] = 1;
	CTX.clip_plane[i][0] = yyvsp[-7].d;
	CTX.clip_plane[i][0] = yyvsp[-5].d;
	CTX.clip_plane[i][0] = yyvsp[-3].d;
	CTX.clip_plane[i][0] = yyvsp[-1].d;
      }
    ;
    break;}
case 194:
#line 1336 "Gmsh.y"
{ ColorField = ColorGeneral; ;
    break;}
case 196:
#line 1339 "Gmsh.y"
{ ColorField = ColorGeometry; ;
    break;}
case 198:
#line 1342 "Gmsh.y"
{ ColorField = ColorMesh; ;
    break;}
case 202:
#line 1353 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, -1, yyvsp[-1].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-1].c);
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-3].c);
      else
	*ptr = i ;
    ;
    break;}
case 203:
#line 1363 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, (int)yyvsp[-2].d, yyvsp[-4].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-4].c);
      Get_ColorPointerForString(ColorField, yyvsp[-7].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-7].c);
      else
	*ptr = i ;
    ;
    break;}
case 204:
#line 1373 "Gmsh.y"
{
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field '%s'", yyvsp[-1].v);
      else
	*ptr = PACK_COLOR((int)yyvsp[-1].v[0], (int)yyvsp[-1].v[1], (int)yyvsp[-1].v[2], (int)yyvsp[-1].v[3]);
    ;
    break;}
case 205:
#line 1384 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
    ;
    break;}
case 206:
#line 1391 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=255.;
    ;
    break;}
case 207:
#line 1467 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 208:
#line 1468 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 209:
#line 1469 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 210:
#line 1470 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 211:
#line 1471 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 212:
#line 1475 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 213:
#line 1476 "Gmsh.y"
{ yyval.d = yyvsp[-1].d; ;
    break;}
case 214:
#line 1477 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d; ;
    break;}
case 215:
#line 1478 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d; ;
    break;}
case 216:
#line 1479 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d; ;
    break;}
case 217:
#line 1480 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d; ;
    break;}
case 218:
#line 1481 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d); ;
    break;}
case 219:
#line 1482 "Gmsh.y"
{ yyval.d = - yyvsp[0].d; ;
    break;}
case 220:
#line 1483 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 221:
#line 1484 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 222:
#line 1485 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 223:
#line 1486 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 224:
#line 1487 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 225:
#line 1488 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 226:
#line 1489 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 227:
#line 1490 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 228:
#line 1491 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 229:
#line 1492 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 230:
#line 1493 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 231:
#line 1494 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 232:
#line 1495 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 233:
#line 1496 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 234:
#line 1497 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 235:
#line 1498 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 236:
#line 1499 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 237:
#line 1500 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 238:
#line 1501 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 239:
#line 1502 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 240:
#line 1503 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 241:
#line 1507 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 242:
#line 1508 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 243:
#line 1510 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 244:
#line 1522 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 245:
#line 1528 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 246:
#line 1542 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-9].d;
      yyval.v[1]=yyvsp[-7].d;
      yyval.v[2]=yyvsp[-5].d;
      yyval.v[3]=yyvsp[-3].d;
      yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 247:
#line 1550 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
      yyval.v[4]=1.0;
    ;
    break;}
case 248:
#line 1558 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 249:
#line 1566 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 250:
#line 1577 "Gmsh.y"
{
    ;
    break;}
case 251:
#line 1580 "Gmsh.y"
{
    ;
    break;}
case 252:
#line 1586 "Gmsh.y"
{
    ;
    break;}
case 253:
#line 1589 "Gmsh.y"
{
    ;
    break;}
case 254:
#line 1595 "Gmsh.y"
{
    ;
    break;}
case 255:
#line 1598 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 256:
#line 1602 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 257:
#line 1609 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 258:
#line 1614 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 259:
#line 1621 "Gmsh.y"
{
    ;
    break;}
case 260:
#line 1624 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 261:
#line 1630 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 262:
#line 1644 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 263:
#line 1649 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 264:
#line 1658 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 265:
#line 1662 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1672 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void  vyyerror (char *fmt, ...){
  va_list args;
  char    tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

int Get_ColorForString(StringX4Int SX4I[], int alpha, 
		       char * string, int * FlagError) {
  int  i = 0 ;
  while ((SX4I[i].string != NULL) && (strcmp(SX4I[i].string, string)))  i++ ;
  *FlagError = (SX4I[i].string == NULL)? 1 : 0 ;
  if(alpha > 0)
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,alpha) ;
  else
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,SX4I[i].int4) ;
}

void Get_ColorPointerForString(StringXPointer SXP[], char * string,
			  int * FlagError, unsigned int **Pointer) {
  int  i = 0 ;
  while ((SXP[i].string != NULL) && (strcmp(SXP[i].string, string)))  i++ ;
  *FlagError = (SXP[i].string == NULL)? 1 : 0 ;
  *Pointer = (unsigned int *)SXP[i].Pointer ;
}

