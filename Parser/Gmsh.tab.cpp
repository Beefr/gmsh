
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tDraw	286
#define	tSleep	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tInclude	314
#define	tRecombine	315
#define	tDelete	316
#define	tCoherence	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tEndFor	341
#define	tScript	342
#define	tExit	343
#define	tMerge	344
#define	tReturn	345
#define	tCall	346
#define	tFunction	347
#define	tB_SPLINE_SURFACE_WITH_KNOTS	348
#define	tB_SPLINE_CURVE_WITH_KNOTS	349
#define	tCARTESIAN_POINT	350
#define	tTRUE	351
#define	tFALSE	352
#define	tUNSPECIFIED	353
#define	tU	354
#define	tV	355
#define	tEDGE_CURVE	356
#define	tVERTEX_POINT	357
#define	tORIENTED_EDGE	358
#define	tPLANE	359
#define	tFACE_OUTER_BOUND	360
#define	tEDGE_LOOP	361
#define	tADVANCED_FACE	362
#define	tVECTOR	363
#define	tDIRECTION	364
#define	tAXIS2_PLACEMENT_3D	365
#define	tISO	366
#define	tENDISO	367
#define	tENDSEC	368
#define	tDATA	369
#define	tHEADER	370
#define	tFILE_DESCRIPTION	371
#define	tFILE_SCHEMA	372
#define	tFILE_NAME	373
#define	tMANIFOLD_SOLID_BREP	374
#define	tCLOSED_SHELL	375
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	376
#define	tFACE_BOUND	377
#define	tCYLINDRICAL_SURFACE	378
#define	tCONICAL_SURFACE	379
#define	tCIRCLE	380
#define	tTRIMMED_CURVE	381
#define	tGEOMETRIC_SET	382
#define	tCOMPOSITE_CURVE_SEGMENT	383
#define	tCONTINUOUS	384
#define	tCOMPOSITE_CURVE	385
#define	tTOROIDAL_SURFACE	386
#define	tPRODUCT_DEFINITION	387
#define	tPRODUCT_DEFINITION_SHAPE	388
#define	tSHAPE_DEFINITION_REPRESENTATION	389
#define	tELLIPSE	390
#define	tTrimmed	391
#define	tSolid	392
#define	tEndSolid	393
#define	tVertex	394
#define	tFacet	395
#define	tNormal	396
#define	tOuter	397
#define	tLoopSTL	398
#define	tEndLoop	399
#define	tEndFacet	400
#define	tAND	401
#define	tOR	402
#define	tNOTEQUAL	403
#define	tEQUAL	404
#define	tAPPROXEQUAL	405
#define	tAFFECTPLUS	406
#define	tAFFECTMINUS	407
#define	tAFFECTTIMES	408
#define	tAFFECTDIVIDE	409
#define	tLESSOREQUAL	410
#define	tGREATEROREQUAL	411
#define	tCROSSPRODUCT	412
#define	UNARYPREC	413
#define	tPLUSPLUS	414
#define	tMINUSMINUS	415

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.30 2000-12-08 12:38:29 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 61 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1508
#define	YYFLAG		-32768
#define	YYNTBASE	179

#define YYTRANSLATE(x) ((unsigned)(x) <= 415 ? yytranslate[x] : 257)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   167,     2,     2,     2,   164,     2,     2,   171,
   173,   162,   160,   172,   161,   176,   163,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   156,
     2,   157,   146,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   177,     2,   178,   168,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   174,     2,   175,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   158,
   159,   165,   166,   169,   170
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   525,   533,   540,   549,
   550,   553,   556,   559,   562,   565,   568,   571,   574,   577,
   580,   583,   586,   588,   592,   593,   607,   609,   613,   614,
   628,   630,   634,   635,   649,   651,   655,   656,   676,   678,
   682,   683,   703,   705,   709,   710,   730,   732,   736,   737,
   763,   765,   769,   770,   796,   798,   802,   803,   829,   831,
   835,   836,   868,   870,   874,   875,   907,   909,   913,   914,
   946,   951,   955,   959,   964,   969,   974,   979,   986,   998,
  1005,  1017,  1024,  1036,  1043,  1055,  1062,  1074,  1081,  1093,
  1099,  1111,  1117,  1129,  1136,  1148,  1155,  1167,  1174,  1186,
  1195,  1207,  1215,  1224,  1237,  1244,  1250,  1258,  1266,  1279,
  1287,  1297,  1315,  1323,  1332,  1341,  1349,  1361,  1367,  1376,
  1386,  1395,  1418,  1439,  1448,  1457,  1463,  1472,  1480,  1489,
  1495,  1507,  1513,  1523,  1525,  1527,  1529,  1530,  1533,  1538,
  1543,  1547,  1551,  1554,  1558,  1561,  1565,  1572,  1581,  1583,
  1585,  1589,  1592,  1601,  1614,  1623,  1636,  1645,  1658,  1670,
  1686,  1688,  1691,  1701,  1704,  1711,  1721,  1731,  1740,  1749,
  1758,  1765,  1770,  1773,  1775,  1777,  1779,  1781,  1783,  1785,
  1789,  1792,  1795,  1798,  1802,  1806,  1810,  1814,  1818,  1822,
  1826,  1830,  1834,  1838,  1842,  1846,  1850,  1854,  1860,  1865,
  1870,  1875,  1880,  1885,  1890,  1895,  1900,  1905,  1910,  1917,
  1922,  1927,  1932,  1937,  1942,  1947,  1954,  1961,  1968,  1970,
  1972,  1974,  1978,  1987,  1992,  2002,  2007,  2017,  2021,  2027,
  2029,  2032,  2035,  2039,  2043,  2055,  2065,  2073,  2081,  2085,
  2094,  2095,  2099,  2101,  2105,  2106,  2110,  2114,  2116,  2120,
  2121,  2123,  2127,  2129,  2131,  2135,  2139,  2149,  2157,  2163,
  2165,  2171,  2175,  2184,  2186
};

static const short yyrhs[] = {   181,
     0,   180,     0,   186,     0,   137,     0,   140,   141,   243,
   243,   243,   142,   143,   139,   243,   243,   243,   139,   243,
   243,   243,   139,   243,   243,   243,   144,   145,     0,   138,
     0,     0,   181,   182,     0,   183,     0,   185,     0,   184,
     0,     1,     6,     0,   111,     6,     0,   112,     6,     0,
   114,     6,     0,   113,     6,     0,   115,     6,     0,   116,
   171,   248,   172,     5,   173,     6,     0,   117,   171,   248,
   173,     6,     0,   118,   171,     5,   172,     5,   172,   248,
   172,   248,   172,     5,   172,     5,   172,     5,   173,     6,
     0,     3,     7,    95,   171,     5,   172,   246,   173,     6,
     0,     3,     7,    94,   171,     5,   172,   243,   172,   252,
   172,   242,   172,   242,   172,   242,   172,   252,   172,   252,
   172,   242,   173,     6,     0,     3,     7,    93,   171,     5,
   172,   243,   172,   243,   172,   250,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   252,   172,   252,   172,   252,
   172,   252,   172,   242,   173,     6,     0,     3,     7,   101,
   171,     5,   172,     3,   172,     3,   172,     3,   172,   242,
   173,     6,     0,     3,     7,   105,   171,     5,   172,     3,
   172,   242,   173,     6,     0,     3,     7,   122,   171,     5,
   172,     3,   172,   242,   173,     6,     0,     3,     7,   103,
   171,     5,   172,   162,   172,   162,   172,   243,   172,   242,
   173,     6,     0,     3,     7,   106,   171,     5,   172,   252,
   173,     6,     0,     3,     7,   107,   171,     5,   172,   252,
   172,     3,   172,   242,   173,     6,     0,     3,     7,   102,
   171,     5,   172,     3,   173,     6,     0,     3,     7,   108,
   171,     5,   172,     3,   172,   243,   173,     6,     0,     3,
     7,   110,   171,     5,   172,     3,   172,     3,   172,     3,
   173,     6,     0,     3,     7,   109,   171,     5,   172,   246,
   173,     6,     0,     3,     7,   104,   171,     5,   172,     3,
   173,     6,     0,     3,     7,    36,   171,     5,   172,     3,
   172,     3,   173,     6,     0,     3,     7,   120,   171,     5,
   172,   252,   173,     6,     0,     3,     7,   121,   171,     5,
   172,   252,   172,     3,   173,     6,     0,     3,     7,   119,
   171,     5,   172,     3,   173,     6,     0,     3,     7,   123,
   171,     5,   172,     3,   172,   243,   173,     6,     0,     3,
     7,   124,   171,     5,   172,     3,   172,   243,   172,   243,
   173,     6,     0,     3,     7,   131,   171,     5,   172,     3,
   172,   243,   172,   243,   173,     6,     0,     3,     7,   125,
   171,     5,   172,     3,   172,   243,   173,     6,     0,     3,
     7,   135,   171,     5,   172,     3,   172,   243,   172,   243,
   173,     6,     0,     3,     7,   126,   171,     5,   172,     3,
   172,   252,   172,   252,   172,   242,   172,   242,   173,     6,
     0,     3,     7,   127,   171,     5,   172,   252,   173,     6,
     0,     3,     7,   128,   171,   129,   172,   242,   172,     3,
   173,     6,     0,     3,     7,   130,   171,     5,   172,   252,
   172,   242,   173,     6,     0,     3,     7,   132,   171,     5,
   172,     5,   172,     3,   172,     3,   173,     6,     0,     3,
     7,   133,   171,     5,   172,     5,   172,     3,   173,     6,
     0,     3,     7,   134,   171,     3,   172,     3,   173,     6,
     0,     0,   186,   187,     0,   189,     0,   188,     0,   227,
     0,   228,     0,   229,     0,   232,     0,   233,     0,   237,
     0,   240,     0,   241,     0,   234,     0,   236,     0,   235,
     0,     1,     6,     0,    30,   171,     5,   172,   243,   173,
     6,     0,    63,     5,   174,   190,   175,     6,     0,    63,
     5,     4,   246,   174,   190,   175,     6,     0,     0,   190,
   192,     0,   190,   195,     0,   190,   198,     0,   190,   201,
     0,   190,   204,     0,   190,   207,     0,   190,   210,     0,
   190,   213,     0,   190,   216,     0,   190,   219,     0,   190,
   222,     0,   190,   225,     0,   243,     0,   191,   172,   243,
     0,     0,    75,   171,   243,   172,   243,   172,   243,   173,
   193,   174,   191,   175,     6,     0,   243,     0,   194,   172,
   243,     0,     0,    76,   171,   243,   172,   243,   172,   243,
   173,   196,   174,   194,   175,     6,     0,   243,     0,   197,
   172,   243,     0,     0,    77,   171,   243,   172,   243,   172,
   243,   173,   199,   174,   197,   175,     6,     0,   243,     0,
   200,   172,   243,     0,     0,    72,   171,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   173,   202,
   174,   200,   175,     6,     0,   243,     0,   203,   172,   243,
     0,     0,    73,   171,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   173,   205,   174,   203,   175,
     6,     0,   243,     0,   206,   172,   243,     0,     0,    74,
   171,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   173,   208,   174,   206,   175,     6,     0,   243,
     0,   209,   172,   243,     0,     0,    69,   171,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   173,   211,   174,   209,   175,
     6,     0,   243,     0,   212,   172,   243,     0,     0,    70,
   171,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   173,   214,
   174,   212,   175,     6,     0,   243,     0,   215,   172,   243,
     0,     0,    71,   171,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   172,
   243,   173,   217,   174,   215,   175,     6,     0,   243,     0,
   218,   172,   243,     0,     0,    66,   171,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   173,   220,   174,   218,   175,     6,     0,   243,     0,   221,
   172,   243,     0,     0,    67,   171,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   173,
   223,   174,   221,   175,     6,     0,   243,     0,   224,   172,
   243,     0,     0,    68,   171,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   173,   226,
   174,   224,   175,     6,     0,     4,     7,   243,     6,     0,
     4,   169,     6,     0,     4,   170,     6,     0,     4,   152,
   243,     6,     0,     4,   153,   243,     6,     0,     4,   154,
   243,     6,     0,     4,   155,   243,     6,     0,     4,   176,
     4,     7,     5,     6,     0,     4,   176,    63,   177,   243,
   178,   176,     4,     7,     5,     6,     0,     4,   176,     4,
     7,   243,     6,     0,     4,   176,    63,   177,   243,   178,
   176,     4,     7,   243,     6,     0,     4,   176,     4,   152,
   243,     6,     0,     4,   176,    63,   177,   243,   178,   176,
     4,   152,   243,     6,     0,     4,   176,     4,   153,   243,
     6,     0,     4,   176,    63,   177,   243,   178,   176,     4,
   153,   243,     6,     0,     4,   176,     4,   154,   243,     6,
     0,     4,   176,    63,   177,   243,   178,   176,     4,   154,
   243,     6,     0,     4,   176,     4,   155,   243,     6,     0,
     4,   176,    63,   177,   243,   178,   176,     4,   155,   243,
     6,     0,     4,   176,     4,   169,     6,     0,     4,   176,
    63,   177,   243,   178,   176,     4,   169,   243,     6,     0,
     4,   176,     4,   170,     6,     0,     4,   176,    63,   177,
   243,   178,   176,     4,   170,   243,     6,     0,     4,   176,
     4,     7,   246,     6,     0,     4,   176,    63,   177,   243,
   178,   176,     4,     7,   246,     6,     0,     4,   176,     4,
   152,   246,     6,     0,     4,   176,    63,   177,   243,   178,
   176,     4,   152,   246,     6,     0,     4,   176,     4,   153,
   246,     6,     0,     4,   176,    63,   177,   243,   178,   176,
     4,   153,   246,     6,     0,     4,   176,    84,   176,     4,
     7,   254,     6,     0,     4,   176,    63,   177,   243,   178,
   176,    84,     7,   255,     6,     0,    33,   171,   243,   173,
     7,   246,     6,     0,    48,    33,   171,   243,   173,     7,
   252,     6,     0,    64,    33,   252,     7,   174,   243,   172,
   243,   172,   243,   175,     6,     0,    40,    41,   252,     7,
   243,     6,     0,    33,   174,   243,   175,     6,     0,    36,
   171,   243,   173,     7,   252,     6,     0,    38,   171,   243,
   173,     7,   252,     6,     0,    64,    36,   252,     7,   174,
   243,   172,   243,   172,   243,   175,     6,     0,    34,   171,
   243,   173,     7,   252,     6,     0,    34,   171,   243,   173,
     7,   252,    44,   246,     6,     0,    42,   171,   243,   173,
     7,   174,   243,   172,   243,   172,     5,   172,     5,   172,
     5,   175,     6,     0,    35,   171,   243,   173,     7,   252,
     6,     0,    48,    36,   171,   243,   173,     7,   252,     6,
     0,    36,    58,   171,   243,   173,     7,   252,     6,     0,
    78,   171,   243,   173,     7,   252,     6,     0,    79,   171,
   243,   173,     7,   252,    83,   252,    80,   243,     6,     0,
    36,   174,   243,   175,     6,     0,    44,    37,   171,   243,
   173,     7,   252,     6,     0,   136,    37,   171,   243,   173,
     7,   243,   252,     6,     0,    45,    37,   171,   243,   173,
     7,   252,     6,     0,    79,    37,    81,    82,   171,   243,
   173,     7,   250,    83,   174,   252,   172,   252,   175,    80,
   174,   243,   172,   243,   175,     6,     0,    79,    37,   171,
   243,   173,     7,   250,    83,   174,   252,   172,   252,   175,
    80,   174,   243,   172,   243,   175,     6,     0,    48,    37,
   171,   243,   173,     7,   252,     6,     0,    37,    58,   171,
   243,   173,     7,   252,     6,     0,    37,   174,   243,   175,
     6,     0,    47,    39,   171,   243,   173,     7,   252,     6,
     0,    39,   171,   243,   173,     7,   252,     6,     0,    48,
    39,   171,   243,   173,     7,   252,     6,     0,    53,   246,
   174,   230,   175,     0,    52,   174,   246,   172,   246,   172,
   243,   175,   174,   230,   175,     0,    54,   246,   174,   230,
   175,     0,    55,   174,   246,   172,   243,   175,   174,   230,
   175,     0,   232,     0,   231,     0,   229,     0,     0,   231,
   228,     0,    57,   174,   231,   175,     0,    61,   174,   231,
   175,     0,    59,     5,     6,     0,    30,     5,     6,     0,
    88,     6,     0,    89,     5,     6,     0,    31,     6,     0,
    32,   243,     6,     0,    85,   171,   243,     8,   243,   173,
     0,    85,   171,   243,     8,   243,     8,   243,   173,     0,
    86,     0,    90,     0,    91,     4,     6,     0,    92,     4,
     0,    56,    33,   174,   243,   172,   246,   175,     6,     0,
    56,    33,   174,   243,   172,   246,   172,   246,   172,   243,
   175,     6,     0,    56,    36,   174,   243,   172,   246,   175,
     6,     0,    56,    36,   174,   243,   172,   246,   172,   246,
   172,   243,   175,     6,     0,    56,    37,   174,   243,   172,
   246,   175,     6,     0,    56,    37,   174,   243,   172,   246,
   172,   246,   172,   243,   175,     6,     0,    56,    37,   174,
   243,   172,   246,   175,   174,   238,   175,     6,     0,    56,
    37,   174,   243,   172,   246,   172,   246,   172,   243,   175,
   174,   238,   175,     6,     0,   239,     0,   238,   239,     0,
    65,   174,   252,   172,   252,   172,   252,   175,     6,     0,
    60,     6,     0,    46,    36,   252,     7,   243,     6,     0,
    46,    36,   252,     7,   243,    49,    51,   243,     6,     0,
    46,    36,   252,     7,   243,    49,    50,   243,     6,     0,
    46,    37,   174,   243,   175,     7,   252,     6,     0,    43,
    37,   174,   243,   175,     7,   252,     6,     0,    46,    39,
   174,   243,   175,     7,   252,     6,     0,    60,    37,   252,
     7,   243,     6,     0,    60,    37,   252,     6,     0,    62,
     6,     0,    96,     0,    97,     0,    98,     0,    99,     0,
   100,     0,   244,     0,   171,   243,   173,     0,   161,   243,
     0,   160,   243,     0,   167,   243,     0,   243,   161,   243,
     0,   243,   160,   243,     0,   243,   162,   243,     0,   243,
   163,   243,     0,   243,   164,   243,     0,   243,   168,   243,
     0,   243,   156,   243,     0,   243,   157,   243,     0,   243,
   158,   243,     0,   243,   159,   243,     0,   243,   150,   243,
     0,   243,   149,   243,     0,   243,   147,   243,     0,   243,
   148,   243,     0,   243,   146,   243,     8,   243,     0,    10,
   171,   243,   173,     0,    11,   171,   243,   173,     0,    12,
   171,   243,   173,     0,    13,   171,   243,   173,     0,    14,
   171,   243,   173,     0,    15,   171,   243,   173,     0,    16,
   171,   243,   173,     0,    17,   171,   243,   173,     0,    18,
   171,   243,   173,     0,    19,   171,   243,   173,     0,    20,
   171,   243,   172,   243,   173,     0,    21,   171,   243,   173,
     0,    22,   171,   243,   173,     0,    23,   171,   243,   173,
     0,    24,   171,   243,   173,     0,    25,   171,   243,   173,
     0,    26,   171,   243,   173,     0,    27,   171,   243,   172,
   243,   173,     0,    28,   171,   243,   172,   243,   173,     0,
    29,   171,   243,   172,   243,   173,     0,     3,     0,     9,
     0,     4,     0,     4,   176,     4,     0,     4,   176,    63,
   177,   243,   178,   176,     4,     0,     4,   176,     4,   169,
     0,     4,   176,    63,   177,   243,   178,   176,     4,   169,
     0,     4,   176,     4,   170,     0,     4,   176,    63,   177,
   243,   178,   176,     4,   170,     0,   243,     8,   243,     0,
   243,     8,   243,     8,   243,     0,   247,     0,   161,   246,
     0,   160,   246,     0,   246,   161,   246,     0,   246,   160,
   246,     0,   174,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   175,     0,   174,   243,   172,   243,   172,   243,
   172,   243,   175,     0,   174,   243,   172,   243,   172,   243,
   175,     0,   171,   243,   172,   243,   172,   243,   173,     0,
     4,   176,     4,     0,     4,   176,    63,   177,   243,   178,
   176,     4,     0,     0,   171,   249,   173,     0,     5,     0,
   249,   172,     5,     0,     0,   174,   251,   175,     0,   171,
   251,   173,     0,   252,     0,   251,   172,   252,     0,     0,
   243,     0,   174,   253,   175,     0,   243,     0,   245,     0,
   253,   172,   243,     0,   253,   172,   245,     0,   174,   243,
   172,   243,   172,   243,   172,   243,   175,     0,   174,   243,
   172,   243,   172,   243,   175,     0,   174,     4,   172,   243,
   175,     0,     4,     0,     4,   176,    84,   176,     4,     0,
   174,   256,   175,     0,     4,   176,    63,   177,   243,   178,
   176,    84,     0,   254,     0,   256,   172,   254,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   141,   143,   144,   151,   159,   173,   185,   187,   190,   192,
   193,   194,   197,   203,   208,   209,   210,   213,   217,   220,
   226,   231,   237,   245,   250,   254,   260,   265,   269,   274,
   278,   281,   286,   290,   294,   298,   303,   307,   310,   314,
   318,   322,   326,   330,   334,   337,   341,   344,   348,   351,
   360,   364,   370,   372,   373,   374,   375,   376,   377,   378,
   379,   380,   381,   382,   384,   385,   388,   399,   404,   410,
   415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
   425,   426,   429,   432,   436,   442,   448,   451,   455,   461,
   467,   470,   474,   480,   486,   489,   493,   501,   507,   510,
   514,   522,   528,   531,   535,   543,   549,   552,   556,   568,
   574,   577,   581,   593,   599,   602,   606,   618,   624,   627,
   631,   644,   650,   653,   657,   670,   676,   679,   683,   696,
   708,   718,   726,   734,   742,   750,   758,   769,   782,   800,
   817,   838,   855,   876,   893,   914,   931,   952,   969,   990,
  1007,  1028,  1045,  1068,  1093,  1122,  1147,  1176,  1201,  1232,
  1245,  1270,  1281,  1287,  1306,  1317,  1325,  1331,  1337,  1356,
  1362,  1378,  1385,  1391,  1397,  1403,  1409,  1428,  1440,  1446,
  1465,  1486,  1494,  1500,  1506,  1512,  1524,  1530,  1536,  1548,
  1554,  1559,  1564,  1571,  1573,  1574,  1577,  1582,  1593,  1611,
  1626,  1654,  1685,  1689,  1695,  1700,  1714,  1729,  1742,  1761,
  1768,  1775,  1804,  1810,  1816,  1820,  1824,  1828,  1832,  1837,
  1844,  1848,  1853,  1871,  1881,  1899,  1916,  1933,  1954,  1974,
  1994,  2011,  2035,  2048,  2050,  2051,  2052,  2053,  2056,  2058,
  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,
  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,
  2089,  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2099,  2101,
  2102,  2111,  2128,  2149,  2166,  2187,  2204,  2226,  2233,  2246,
  2251,  2255,  2259,  2263,  2268,  2273,  2277,  2281,  2285,  2311,
  2343,  2347,  2352,  2356,  2361,  2365,  2369,  2375,  2381,  2387,
  2391,  2397,  2404,  2410,  2419,  2423,  2433,  2438,  2442,  2447,
  2452,  2467,  2472,  2493,  2502
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tDraw","tSleep",
"tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex",
"tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tEndFor","tScript",
"tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","Color","ListOfColor","RecursiveListOfColor", NULL
};
#endif

static const short yyr1[] = {     0,
   179,   179,   179,   180,   180,   180,   181,   181,   182,   182,
   182,   182,   183,   183,   183,   183,   183,   184,   184,   184,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   186,   186,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   188,   189,   189,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   191,   191,   193,   192,   194,   194,   196,   195,
   197,   197,   199,   198,   200,   200,   202,   201,   203,   203,
   205,   204,   206,   206,   208,   207,   209,   209,   211,   210,
   212,   212,   214,   213,   215,   215,   217,   216,   218,   218,
   220,   219,   221,   221,   223,   222,   224,   224,   226,   225,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   229,
   229,   229,   229,   230,   230,   230,   231,   231,   232,   233,
   234,   235,   235,   235,   235,   235,   236,   236,   236,   236,
   236,   236,   237,   237,   237,   237,   237,   237,   237,   237,
   238,   238,   239,   239,   240,   240,   240,   240,   240,   240,
   240,   240,   241,   242,   242,   242,   242,   242,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   245,   245,   246,
   246,   246,   246,   246,   247,   247,   247,   247,   247,   247,
   248,   248,   249,   249,   250,   250,   250,   251,   251,   252,
   252,   252,   253,   253,   253,   253,   254,   254,   254,   254,
   254,   255,   255,   256,   256
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
    11,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,     9,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     3,     3,     2,     3,     2,     3,     6,     8,     1,     1,
     3,     2,     8,    12,     8,    12,     8,    12,    11,    15,
     1,     2,     9,     2,     6,     9,     9,     8,     8,     8,
     6,     4,     2,     1,     1,     1,     1,     1,     1,     3,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     1,     1,
     1,     3,     8,     4,     9,     4,     9,     3,     5,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     3,     8,
     0,     3,     1,     3,     0,     3,     3,     1,     3,     0,
     1,     3,     1,     1,     3,     3,     9,     7,     5,     1,
     5,     3,     8,     1,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   209,     0,     0,   210,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    63,    65,    64,    60,    61,    62,   279,   281,   280,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   239,    12,     0,    13,    14,
    16,    15,    17,   301,   301,     0,    66,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   205,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   310,     0,     0,     0,     0,   310,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   290,     0,     0,     0,     0,     0,   197,     0,   310,   197,
   233,     0,   310,   310,     0,     0,     0,     0,   203,     0,
     0,   212,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   242,   241,   243,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   132,   133,     0,     0,     0,   202,     0,
   206,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   311,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   292,   291,     0,     0,     0,     0,   197,   197,     0,
     0,     0,     0,     0,   201,     0,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,   204,   211,     0,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   240,     0,   256,   257,   255,   254,   250,   251,   252,
   253,   242,   241,   246,   247,   248,   249,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   303,     0,
     0,     0,     0,   131,   134,   135,   136,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   245,   244,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   313,   314,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   299,     0,
     0,     0,   294,   293,   196,     0,   195,   194,     0,     0,
     0,     0,     0,   199,   198,   232,     0,   200,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   284,   286,
     0,   259,   260,   261,   262,   263,   264,   265,   266,   267,
   268,     0,   270,   271,   272,   273,   274,   275,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   302,     0,    19,     0,   281,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   150,   152,     0,     0,     0,     0,   166,   310,   310,
     0,   310,   178,     0,   186,   310,   310,     0,     0,   312,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   190,   192,     0,
     0,     0,     0,     0,    70,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
     0,     0,   310,     0,     0,   310,     0,     0,     0,     0,
     0,     0,     0,   258,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   310,   310,     0,     0,     0,     0,
   310,   310,     0,     0,     0,     0,     0,   310,     0,   310,
     0,     0,     0,     0,     0,   304,     0,   301,     0,   138,
     0,   140,   154,   142,   156,   144,   158,   146,   148,     0,
     0,     0,     0,     0,     0,   310,     0,   310,     0,     0,
   288,   315,   316,   165,     0,   310,   310,   310,   225,     0,
   310,   310,   310,   310,   310,   310,   310,     0,     0,     0,
     0,     0,     0,     0,     0,   231,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    68,
     0,     0,     0,     0,   305,     0,     0,   207,     0,     0,
   269,   276,   277,   278,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   234,   235,
   236,   237,   238,     0,     0,     0,     0,     0,     0,     0,
    18,     0,   282,     0,     0,   320,     0,     0,    67,   162,
   170,     0,   173,     0,   167,     0,   168,   188,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   197,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   176,     0,
   310,   310,     0,   310,     0,   310,     0,     0,     0,     0,
   310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     0,     0,     0,   281,     0,   160,     0,   175,   185,   289,
     0,   229,   179,   181,     0,     0,   228,   230,   187,   163,
   174,   184,   189,     0,     0,   298,     0,   297,     0,     0,
   213,     0,   215,     0,   217,     0,    69,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   305,     0,   308,     0,     0,     0,   208,     0,   283,
     0,     0,     0,     0,    21,     0,    30,     0,    34,     0,
    28,     0,     0,    33,     0,    38,    36,     0,     0,     0,
     0,     0,     0,    45,     0,     0,     0,     0,     0,    50,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   171,     0,   227,   226,   197,   300,
     0,   193,     0,     0,     0,     0,     0,     0,   221,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   310,   307,   306,   310,     0,   180,
   285,   287,     0,     0,   305,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   310,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   296,     0,     0,     0,
   224,   310,     0,   222,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   309,
     0,     0,     0,    35,     0,     0,     0,     0,    25,     0,
    31,     0,    37,    26,    39,     0,    42,     0,    46,    47,
     0,     0,    49,     0,     0,     0,   139,   141,   155,   143,
   157,   145,   159,   147,   149,   151,   153,     0,   324,     0,
   161,   321,   319,     0,     0,   191,     0,     0,     0,     0,
     0,   219,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   310,   310,   177,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   283,     0,     0,   322,     0,     0,   295,   214,
   216,   218,     0,   310,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    85,    89,    93,   164,   169,     0,     0,
     0,     0,     0,     0,     0,    29,    32,    40,     0,    41,
    48,    43,     0,     0,   325,     0,   318,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   310,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   310,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    24,    27,     0,     0,     0,   317,     0,
   220,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    83,     0,    87,     0,    91,     0,     0,     0,
     0,   310,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    44,    20,   323,
   172,   223,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    84,    86,    88,    90,    92,    94,     0,     0,     0,
     0,   310,     0,     0,     0,     0,     0,     0,    97,   101,
   105,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     5,   310,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    95,     0,    99,     0,   103,     0,   310,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   182,     0,    22,     0,     0,     0,     0,     0,     0,    96,
    98,   100,   102,   104,   106,   310,     0,     0,     0,   109,
   113,   117,     0,     0,     0,     0,     0,     0,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   107,     0,   111,     0,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   108,   110,   112,   114,   116,   118,     0,   121,   125,   129,
    23,     0,     0,     0,     0,     0,     0,     0,   119,     0,
   123,     0,   127,     0,     0,     0,     0,     0,     0,   120,
   122,   124,   126,   128,   130,     0,     0,     0
};

static const short yydefgoto[] = {  1506,
     4,     5,    18,    19,    20,    21,     6,    64,    65,    66,
   470,  1282,   609,  1230,  1284,   610,  1231,  1286,   611,  1232,
  1390,   612,  1363,  1392,   613,  1364,  1394,   614,  1365,  1451,
   615,  1437,  1453,   616,  1438,  1455,   617,  1439,  1488,   618,
  1482,  1490,   619,  1483,  1492,   620,  1484,    67,   465,   455,
   456,   457,   458,    71,    72,    73,    74,    75,   998,   999,
    76,    77,   774,   286,   106,   433,   302,   161,   256,   400,
   843,   933,   934,   434,   788,  1060,  1130
};

static const short yypact[] = {   309,
-32768,-32768,  -124,-32768,   350,  2195,  1029,    23,    43,    46,
    63,    65,    84,    97,  -110,   -49,   -25,-32768,-32768,-32768,
-32768,   144,   103,    30,   148,  1029,   -92,    -8,    29,   -44,
   -40,    57,   110,   118,   114,   136,   233,   261,    80,   268,
   319,   129,     1,     1,   142,    48,   147,   318,   312,   180,
   353,   359,    55,   195,   -29,   237,-32768,   382,   427,-32768,
   433,   446,   417,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   295,-32768,
   302,   306,   310,   317,   320,   338,   362,   366,   367,   368,
   375,   377,   387,   394,   397,   399,   400,   401,   402,   403,
  1029,  1029,  1029,  1029,  1501,-32768,-32768,  2246,-32768,-32768,
-32768,-32768,-32768,   404,   404,   478,-32768,  1029,  1029,  1029,
  1029,  1029,   481,   570,    20,   571,   579,-32768,   688,  1029,
  1029,  1029,  1029,   435,  1029,  1029,   436,  1029,  1029,  1029,
   576,  1029,   434,   438,   439,   576,   437,   442,   441,   448,
   449,   450,   451,     1,   447,     1,     1,  1029,  1029,  -112,
-32768,  -107,     1,   452,   453,   454,-32768,   607,   576,-32768,
-32768,     0,   576,   576,  1029,   -70,  1029,  1029,-32768,   618,
   619,-32768,   461,    11,  1029,  1029,  1029,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,   465,   465,   465,  2899,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
  1029,  1029,  1029,  1501,   463,   464,   466,   476,   484,   486,
   487,   488,   489,   490,   493,   495,   496,   497,   500,   501,
   503,   504,   506,   507,   508,   509,   510,   512,   515,   516,
   518,   519,   520,   521,   631,   477,   479,   523,   729,  1009,
  1055,  1411,  1434,-32768,-32768,   260,   522,   517,-32768,   524,
-32768,  1029,  1029,  2927,  2397,  2955,  2983,  1029,  3011,  2420,
  1029,  2443,  3039,  3067,  1029,  7571,   690,  3095,  1029,  1029,
  1029,   691,  1029,  1029,  1029,  1029,  1029,  1029,  1029,   -52,
    12,-32768,-32768,  4663,  4690,     1,     1,   498,   498,   -12,
  1029,  1029,  1029,   606,-32768,   134,  1309,     1,-32768,   693,
   695,  3123,   623,  1029,  3151,   657,-32768,-32768,  1029,   107,
   529,  3179,  3207,  3235,  3263,  3291,  3319,  3347,  3375,  3403,
  3431,  4717,  3459,  3487,  3515,  3543,  3571,  3599,  4744,  4771,
  4798,-32768,  1166,  1477,  1477,   340,   340,   381,   381,   381,
   381,  -142,  -117,   465,   465,   465,   465,  4825,   702,   703,
   704,   705,   718,   719,   720,   721,   722,   723,   724,   726,
   728,   734,   735,   736,   739,   740,   741,   743,   744,   746,
   747,   605,   748,   749,   750,   756,   759,   758,-32768,   121,
   770,   771,   774,-32768,-32768,-32768,-32768,-32768,   315,   927,
   927,  1029,  1029,   778,   779,  1029,   760,  1029,   316,   316,
   769,   780,   781,   782,  3627,   783,   785,  3655,   787,   788,
   789,  1986,-32768,   -17,  1029,   792,  2466,  3683,  3711,  1029,
  2489,  2512,  3739,  3767,  3795,  3823,  3851,     1,-32768,   617,
  1029,  1029,-32768,-32768,-32768,   612,  2257,-32768,   625,  1029,
  4848,  4875,  4902,-32768,-32768,-32768,  1029,-32768,   -74,   -30,
   627,   628,   802,   640,  3879,   815,  1029,  3907,-32768,-32768,
  1029,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1029,-32768,-32768,-32768,-32768,-32768,-32768,  1029,  1029,
  1029,  1029,   680,   652,   654,   655,   656,   660,   661,   667,
   668,   670,   682,   683,   685,   686,   687,   692,   694,   696,
   697,   698,   700,   708,   709,   710,   711,   727,   730,   731,
   732,   733,   737,   824,-32768,   701,-32768,   738,   689,   857,
   927,   927,  1029,  1457,     4,  1528,     6,  1579,    58,  1602,
  1625,-32768,-32768,  1112,   887,  3935,     1,-32768,   576,   576,
   888,   576,-32768,   889,-32768,   576,   576,  1029,  1029,-32768,
  1648,   751,   891,   894,   899,   986,   900,   901,   916,   917,
   919,   920,   921,   108,  1029,  4929,  4956,-32768,-32768,  2535,
     1,     1,     1,  1673,-32768,   761,   762,   764,   786,   790,
   791,   803,   804,   807,   808,   809,   810,   923,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1029,  1029,   576,  1029,   951,   576,   610,   952,  2166,  3963,
  3991,  4019,  4047,  7571,   821,   960,  1029,  1029,     1,   979,
   980,   822,   982,   988,   576,   576,   990,     1,   991,   993,
   576,   576,   994,   995,   996,   997,   998,   576,   278,   576,
   999,   984,  1002,  1000,  1001,-32768,  1003,   404,    17,-32768,
  2871,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   832,
     2,  1004,    60,    19,  1005,   576,  1007,   576,  1008,  1010,
  2009,  1986,-32768,-32768,  1029,   576,   576,   576,-32768,   264,
   576,   576,   576,   576,   576,   576,   576,  1029,  2238,  1029,
  1029,   843,  -102,   -83,   -54,-32768,  1158,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,-32768,
  4983,  5010,  1013,  4075,    90,   937,  1029,-32768,  1029,   848,
-32768,-32768,-32768,-32768,  1029,   853,  5037,  5064,    -4,   854,
   855,   858,   863,   859,   890,   892,   893,   102,   895,   907,
   908,   910,   911,   912,   913,   918,   924,   922,-32768,-32768,
-32768,-32768,-32768,   925,   930,   931,   932,   954,   955,   957,
-32768,   958,   107,   850,     9,   884,  1096,  1056,-32768,-32768,
-32768,     1,-32768,  1060,-32768,  1083,-32768,-32768,  1029,  5091,
  1085,  1086,  1087,  1029,  1029,  1125,  1131,  1132,  1133,  1134,
  1135,  1145,  2558,   976,  4103,  2307,   498,     1,  1154,     1,
  1155,     1,    24,  1156,  5118,  5145,  5172,  5199,  5226,  5253,
  5280,  5307,  5334,  5361,  5388,  5415,  1029,  1029,-32768,  1157,
   576,   576,  1080,   576,  4131,   223,  1171,  1501,  1173,  1029,
   576,  1181,  1185,  1186,  1031,  1189,   278,  1191,  1188,  1029,
  1192,  1196,  1200,  1202,  1207,   278,  1029,  1029,  1029,   576,
  1214,  1218,   278,  1029,  1219,  1233,  1231,  1029,   404,  1029,
   288,  1232,  1168,   -33,  5442,-32768,    62,-32768,-32768,  7571,
  1029,-32768,-32768,-32768,  1697,  1747,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1064,  1249,-32768,  1029,-32768,  1089,   139,
-32768,   141,-32768,   185,-32768,    -5,-32768,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  5469,
  5496,    90,   175,-32768,   193,  1081,  1197,-32768,  1259,   248,
  1501,  1093,  5523,  1106,-32768,  1107,-32768,  1109,-32768,  1111,
-32768,  1113,  4159,-32768,  1114,-32768,-32768,  1115,  1116,  4187,
  5550,  4215,  1129,-32768,  1130,  1136,  5577,  1138,  1144,-32768,
  5604,  1139,  2261,   502,   927,   927,  1029,  1029,  1029,  1029,
     3,  1142,  1029,  1029,-32768,  5631,-32768,-32768,   498,-32768,
  2337,-32768,  1029,  1029,  1029,  1281,  1146,   -38,-32768,  5658,
  5685,  5712,  5739,  5766,  5793,  5820,  5847,  5874,  5901,  5928,
  5955,  1029,  1029,  1222,   576,-32768,-32768,   576,  1029,-32768,
-32768,-32768,  2588,  1300,    90,   278,  1304,  1029,  1313,   278,
  1315,  1332,  1344,  1346,  1349,  1029,  1352,   576,  1354,  1355,
  1029,  1359,  1357,  1029,  1369,  1199,  1370,  1770,    70,  1793,
    93,  1818,    99,  1862,  1892,  1916,  1940,  1201,     2,  1372,
  1375,  2611,  5982,  1376,  1205,  1029,-32768,  2634,  2657,  2680,
-32768,   576,  1377,-32768,  1029,  1029,  1029,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  2703,  2726,  1208,-32768,
  1212,  1963,  1029,-32768,  1213,  1217,  1227,  6009,-32768,  1228,
-32768,  1230,-32768,-32768,-32768,  4243,-32768,  1234,-32768,-32768,
  4271,  1237,-32768,  4299,  1235,  1382,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1327,-32768,   217,
-32768,-32768,-32768,  1029,  1240,-32768,  2749,  1385,  1398,    25,
  1241,-32768,  6036,  6063,  6090,  6117,  6144,  6171,  6198,  6225,
  6252,  4327,  4355,  4383,  1399,  1408,   576,   576,-32768,  1501,
   278,   278,   278,   278,  1412,  1413,  1417,   278,  1418,  1419,
  1420,  1422,   248,  1251,     2,-32768,  2367,  1424,-32768,-32768,
-32768,-32768,    -5,   576,  1029,  1029,  1029,  1029,  1029,  1029,
  1029,  1029,  1029,-32768,-32768,-32768,-32768,-32768,  1258,  1256,
  1501,  1260,  1261,  1268,  1269,-32768,-32768,-32768,  1271,-32768,
-32768,-32768,  1272,  1029,-32768,  1029,-32768,  1274,   -37,  1275,
  6279,  6306,  6333,  6360,  6387,  6414,  6441,  6468,  6495,  1276,
  1283,  1285,   576,  1368,  2779,   278,   278,  1443,  1449,   278,
  1455,  2284,  2802,  1456,  1458,   576,  1029,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1287,  1291,
  1029,  1294,  1295,-32768,-32768,  1296,  1297,  1292,-32768,  1298,
-32768,  1299,  6522,  6549,  6576,  6603,  6630,  6657,  6684,  6711,
  6738,   221,  7571,   235,  7571,   244,  7571,  1391,  1029,  1501,
   278,   576,  1470,  1471,  1397,  1476,  1479,  1029,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1480,  1029,  1482,
  1029,  1484,  1318,  6765,  1501,  1311,  1321,-32768,-32768,-32768,
-32768,-32768,  6792,  6819,  6846,  6873,  6900,  6927,  4411,  4439,
  4467,  7571,-32768,  7571,-32768,  7571,-32768,  1029,  1029,  7548,
   278,   576,  1029,  1029,  1029,  1029,  1029,  1029,-32768,-32768,
-32768,  6954,  2825,  1351,  1325,  1326,  6981,  7008,  7035,  7062,
  7089,  7116,  1328,  1329,  1334,  1029,  1493,-32768,   576,   278,
  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  2848,
-32768,  1360,  1333,  7143,  7170,  7197,  7224,  7251,  7278,   259,
  7571,   276,  7571,   280,  7571,  1525,   576,  1527,  1029,  1029,
  1029,  1029,  1029,  1029,  1029,  1530,  1029,  1532,  1029,  1533,
-32768,  1371,-32768,  7305,  7332,  7359,  4495,  4523,  4551,  7571,
-32768,  7571,-32768,  7571,-32768,   576,  1029,  1029,  1029,-32768,
-32768,-32768,  1390,  7386,  7413,  7440,  1366,  1367,  1374,   576,
  1029,  1029,  1029,  1029,  1029,  1029,  1392,  7467,  7494,  7521,
   284,  7571,   297,  7571,   384,  7571,   278,  1029,  1029,  1029,
  1029,  1536,  1029,  1538,  1029,  1543,  1393,  4579,  4607,  4635,
  7571,-32768,  7571,-32768,  7571,-32768,  1557,-32768,-32768,-32768,
-32768,  1402,  1403,  1404,  1029,  1029,  1029,   385,  7571,   391,
  7571,   392,  7571,  1029,  1559,  1029,  1580,  1029,  1581,  7571,
-32768,  7571,-32768,  7571,-32768,  1588,  1589,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1006,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1593,  1594,
  -307,   228,  1603,-32768,-32768,-32768,-32768,-32768,   428,  -995,
-32768,-32768,  -801,    -7,-32768,  1041,   -10,-32768,  -114,-32768,
  -923,   800,   849,-32768, -1039,-32768,-32768
};


#define	YYLAST		7739


static const short yytable[] = {   105,
   257,   459,  1074,   318,   155,   786,  1058,   176,  1014,   673,
   323,   675,   881,   134,   330,   449,     7,   137,   129,  1129,
   783,   996,   996,   266,   791,   223,   997,   997,   107,   915,
  1182,  -245,   160,   162,   126,   596,   597,   598,   599,   600,
   601,   602,   603,   604,   605,   606,   607,   306,   307,   108,
   223,   109,   306,   307,   996,   950,  -244,   306,   307,   997,
   114,   308,   792,   677,   959,   790,   309,   985,   110,   818,
   111,   966,   819,   331,   450,  1119,   306,   307,   130,   784,
   164,   131,   267,   165,   166,   306,   307,   173,   820,   112,
   174,   821,   882,   205,   206,   207,   208,   224,  1121,   595,
   324,  1095,   113,   268,  1123,   306,   307,   306,   307,   118,
   259,   260,   261,   262,   263,   146,   147,   822,   148,   448,
   823,   115,   274,   275,   276,   277,   135,   279,   280,   136,
   282,   283,   284,   138,   288,  1215,  1073,  1245,   983,   466,
   467,   177,   184,   300,   608,   116,   303,   306,   307,   117,
   304,   305,   310,   128,   569,   306,   307,   570,   141,   460,
   156,   157,   132,   306,   307,   306,   307,   322,   852,   325,
   326,   158,   143,   319,   159,   787,  1059,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
   345,   346,   347,   348,   349,   350,   351,   916,  1183,   133,
   127,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,   364,   365,   366,   367,   368,   306,   307,   306,
   307,   306,   307,  1074,  1096,    78,    79,   139,  1100,   306,
   307,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   306,   307,   119,   120,   121,   122,   306,   307,
   841,   306,   307,   842,   419,   420,   409,   306,   307,   144,
   425,   123,   124,   428,   861,   479,   480,   432,   125,   708,
   140,   437,   438,   439,   142,   441,   442,   443,   444,   445,
   446,   447,   534,   535,   974,   453,   454,   145,   306,   307,
   306,   307,   154,   461,   462,   463,   149,   469,    -7,    -7,
   993,    -7,   994,   804,   805,   163,   475,    78,   539,   540,
   167,   478,   168,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   306,   307,  1015,  1016,   169,    -1,
     8,   150,     9,   170,   151,   152,   995,   153,   171,  1202,
  1203,  1204,  1205,   172,  1015,   175,  1209,  1017,   209,   210,
   211,   212,   213,   769,   770,   771,   772,   773,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   179,  1175,   103,
   223,  1176,  1307,   104,   314,  1308,   285,   317,   545,   547,
   549,   544,   546,   548,   550,   551,  1309,   178,   554,  1310,
   556,   410,   411,   412,   413,  1311,  1021,  1022,  1312,    -7,
    -7,    -7,    -7,    -7,    -7,    -7,    -7,   571,   414,   415,
  1405,   180,   576,  1406,  1262,  1263,   181,   584,  1266,   975,
   976,   977,   978,   586,   587,     1,     2,  1407,     3,   182,
  1408,  1409,   590,   183,  1410,  1461,   979,   980,  1462,   594,
    10,    11,    12,    13,    14,    15,    16,    17,  1463,   627,
   184,  1464,   185,   629,   541,   542,   186,   220,   221,   222,
   187,   103,   258,   223,   630,   543,   264,   188,   159,  1316,
   189,   631,   632,   633,   634,   214,   215,   216,   217,   272,
   273,   220,   221,   222,    78,   539,  1047,   223,   190,   909,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   303,   191,   205,   206,   671,   192,   193,   194,  1355,
   272,   273,   220,   221,   222,   195,   683,   196,   223,    42,
    43,    44,    45,   782,    47,  1465,  1494,   197,  1466,  1495,
   691,   692,  1496,  1498,   198,  1497,  1499,   199,  1383,   200,
   201,   202,   203,   204,   255,   265,   269,   709,    78,    79,
   713,   714,   715,   270,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   278,   281,   289,   290,   291,
   293,   295,   315,   731,   732,   294,   734,   737,   296,   297,
   298,   299,   301,   327,   328,   311,   312,   313,   749,   747,
   748,   329,   223,   369,   370,   399,   371,   758,    27,    28,
    29,    30,    31,    32,    33,    34,   372,    35,   401,    37,
    38,   402,    40,    41,   373,  1467,   374,   375,   376,   377,
   378,   541,   542,   379,   477,   380,   381,   382,   103,    53,
   383,   384,   543,   385,   386,   159,   387,   388,   389,   390,
   391,  1065,   392,    54,    55,   393,   394,   800,   395,   396,
   397,   398,   417,   271,   403,   418,   435,   440,   416,   471,
   813,   472,   815,   816,   474,   481,   504,   505,   506,   507,
   825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
   835,   836,   508,   509,   510,   511,   512,   513,   514,   845,
   515,   846,   516,   527,   404,   101,   102,   848,   517,   518,
   519,    63,   103,   520,   521,   522,   104,   523,   524,   285,
   525,   526,   528,   529,   530,   209,   210,   211,   212,   213,
   531,   532,   533,   555,   972,   214,   215,   216,   217,   272,
   273,   220,   221,   222,   536,   557,   537,   223,   538,   885,
   464,   887,   738,   552,   553,   558,   588,   559,   560,   562,
   563,   890,   565,   585,   566,   567,   895,   896,   572,   589,
   621,   622,   209,   210,   211,   212,   213,   910,   623,   912,
   624,   914,   214,   215,   216,   217,   272,   273,   220,   221,
   222,   626,   635,   636,   223,   637,   638,   639,   666,   930,
   931,   640,   641,   209,   210,   211,   212,   213,   642,   643,
   941,   644,   943,   214,   215,   216,   217,   272,   273,   220,
   221,   222,   953,   645,   646,   223,   647,   648,   649,   960,
   961,   962,   670,   650,   669,   651,   967,   652,   653,   654,
   971,   655,   973,   667,   209,   210,   211,   212,   213,   656,
   657,   658,   659,   986,   214,   215,   216,   217,   272,   273,
   220,   221,   222,   681,   686,   688,   223,   696,   660,   991,
   697,   661,   662,   663,   664,   698,   701,   702,   665,   668,
  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
  1010,  1011,   703,   704,   695,   705,   706,   707,   730,    78,
   539,   718,   719,  1023,   720,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   721,   735,   739,   745,
   722,   723,   746,  1049,  1051,  1053,  1048,  1050,  1052,  1054,
  1055,  1056,  1057,   724,   725,  1062,  1063,   726,   727,   728,
   729,   750,   751,   752,   753,  1068,  1069,  1070,   777,   287,
   754,   699,   757,   759,   292,   760,   763,   764,   765,   766,
   767,   776,   779,   780,  1087,  1088,   778,   785,   781,   789,
   793,  1092,   795,   797,   405,   798,   817,   316,   839,   844,
  1098,   320,   321,   847,   849,   853,   880,   854,  1106,   855,
   857,    78,    79,  1111,   700,   856,  1114,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,  1137,   883,
   406,   886,   858,   859,   860,   888,   862,  1143,  1144,  1145,
  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,   863,
   864,   865,   866,   867,   868,  1160,   541,   542,   889,   869,
   892,   893,   894,   103,   871,   870,   872,   543,    78,   884,
   159,   873,   874,   875,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   876,  1177,   877,   878,   879,
   897,   209,   210,   211,   212,   213,   898,   899,   900,   901,
   902,   214,   215,   216,   217,   272,   273,   220,   221,   222,
   903,   905,  1201,   223,   209,   210,   211,   212,   213,   911,
   913,   917,   936,   932,   214,   215,   216,   217,   272,   273,
   220,   221,   222,   502,   940,   942,   223,  1221,  1222,  1223,
  1224,  1225,  1226,  1227,  1228,  1229,   945,   946,   101,   102,
   952,   947,   948,  1235,   949,   103,   951,   954,   955,   104,
   209,   210,   211,   212,   213,   956,  1242,   957,  1243,   958,
   214,   215,   216,   217,   272,   273,   220,   221,   222,   964,
   965,   968,   223,   596,   597,   598,   599,   600,   601,   602,
   603,   604,   605,   606,   607,   969,   970,   989,   981,  1273,
  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,  1283,  1285,
  1287,   982,   990,  1290,  1018,   101,   102,   209,   210,   211,
   212,   213,   103,   992,  1020,  1024,   104,   214,   215,   216,
   217,   272,   273,   220,   221,   222,  1019,  1026,  1027,   223,
  1028,  1314,  1315,  1029,  1030,  1032,  1071,  1033,  1034,   680,
  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,
  1038,  1334,  1039,  1336,  1089,  1094,  1097,  1340,  1040,  1042,
  1045,   209,   210,   211,   212,   213,  1043,  1061,  1099,  1072,
  1101,   214,   215,   216,   217,   272,   273,   220,   221,   222,
  1352,  1353,   824,   223,  1102,  1357,  1358,  1359,  1360,  1361,
  1362,    27,    28,    29,    30,    31,    32,    33,    34,  1103,
    35,  1104,    37,    38,  1105,    40,    41,  1107,  1380,  1109,
  1110,  1112,  1113,  1384,  1385,  1386,  1387,  1388,  1389,  1391,
  1393,  1395,    53,  1115,  1116,  1117,  1128,  1131,  1132,  1136,
  1135,  1157,  1142,  1158,  1161,  1173,    54,    55,  1162,  1174,
  1180,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1163,  1422,
  1165,  1424,  1166,  1181,  1197,  1168,  1172,   684,   685,  1170,
   687,  1178,  1184,  1198,   689,   690,   407,  1206,  1207,  1434,
  1435,  1436,  1208,  1210,  1211,  1212,  1213,  1214,  1218,  1233,
  1234,  1236,  1237,  1448,  1449,  1450,  1452,  1454,  1456,   408,
  1238,  1239,  1240,  1241,    63,  1244,  1246,  1260,  1264,  1256,
  1468,  1469,  1470,  1471,  1265,  1473,  1257,  1475,  1258,  1267,
  1270,  1288,   672,  1271,  1289,  1291,  1292,  1295,  1293,  1294,
  1313,   733,  1296,  1297,   736,  1318,  1319,  1489,  1491,  1493,
  1320,  1321,  1341,   468,  1322,  1333,  1500,  1335,  1502,  1337,
  1504,  1338,  1342,   755,   756,  1368,  1369,  1370,  1381,   761,
   762,  1377,  1378,    78,    79,  1398,   768,  1379,   775,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
  1411,  1397,  1413,   674,   794,  1421,   796,  1423,  1425,  1444,
  1445,  1472,  1426,  1474,   801,   802,   803,  1446,  1476,   806,
   807,   808,   809,   810,   811,   812,   209,   210,   211,   212,
   213,  1440,  1481,  1457,  1501,  1477,   214,   215,   216,   217,
   272,   273,   220,   221,   222,  1485,  1486,  1487,   223,   209,
   210,   211,   212,   213,   676,  1503,  1505,  1507,  1508,   214,
   215,   216,   217,   272,   273,   220,   221,   222,    68,    69,
   717,   223,   209,   210,   211,   212,   213,   678,    70,   693,
  1219,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,   212,   213,     0,     0,     0,
   679,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,   935,     0,     0,   223,     0,   209,   210,   211,   212,
   213,     0,     0,   694,     0,     0,   214,   215,   216,   217,
   218,   219,   220,   221,   222,     0,     0,   103,   223,     0,
     0,   104,     0,   209,   210,   211,   212,   213,   716,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,   937,     0,   939,   223,     0,     0,     0,   944,
     0,     0,   987,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   963,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,   209,   210,   211,
   212,   213,   988,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
   209,   210,   211,   212,   213,  1118,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,   209,   210,   211,   212,   213,  1120,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,   209,   210,
   211,   212,   213,  1122,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,  1090,   223,     0,  1091,  1124,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1108,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   213,  1125,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,   209,   210,   211,   212,   213,
  1141,  1126,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,   209,   210,
   211,   212,   213,     0,     0,  1127,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,   209,   210,   211,   212,   213,  1159,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,     0,
     0,     0,     0,   568,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1199,  1200,   209,   210,   211,
   212,   213,     0,     0,     0,     0,   799,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,  1220,     0,     0,     0,     0,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,  1259,     0,   223,     0,   209,   210,   211,   212,   213,
     0,     0,     0,     0,  1272,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,     0,     0,     0,
  1317,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1356,     0,     0,     0,    -3,    22,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1382,     0,     0,
     0,     0,     0,     0,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,     0,    35,    36,    37,    38,
    39,    40,    41,     0,     0,  1412,    42,    43,    44,    45,
    46,    47,     0,    48,    49,    50,    51,    52,    53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,    55,  1433,     0,     0,     0,     0,    56,
    57,   225,    58,    59,    60,    61,    62,     0,  1447,    27,
    28,    29,    30,    31,    32,    33,    34,     0,    35,     0,
    37,    38,     0,    40,    41,     0,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
    53,   214,   215,   216,   217,   272,   273,   220,   221,   222,
    63,     0,     0,   223,    54,    55,     0,     0,   226,   227,
   228,     0,     0,   740,     0,     0,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,     0,     0,     0,     0,
     0,     0,     0,     0,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
   254,     0,     0,   209,   210,   211,   212,   213,     0,     0,
     0,     0,    63,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   209,   210,   211,   212,
   213,     0,     0,     0,     0,   814,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,   209,
   210,   211,   212,   213,     0,     0,     0,     0,  1046,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,   209,   210,   211,   212,   213,     0,     0,     0,
     0,  1268,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,   907,     0,
     0,   908,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1066,     0,
     0,  1067,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1216,     0,
     0,  1217,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,   209,   210,   211,   212,   213,
     0,   422,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,   209,   210,
   211,   212,   213,     0,   427,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,   429,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
   573,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,   209,   210,   211,
   212,   213,     0,   577,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
   209,   210,   211,   212,   213,     0,   578,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,   209,   210,   211,   212,   213,     0,   712,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,  1093,     0,     0,     0,
     0,     0,   904,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,   209,
   210,   211,   212,   213,     0,  1133,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,   209,   210,   211,   212,   213,     0,  1138,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,   209,   210,   211,   212,   213,
     0,  1139,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,   209,   210,
   211,   212,   213,     0,  1140,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,  1155,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
  1156,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,  1261,     0,     0,
     0,     0,     0,  1179,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
   209,   210,   211,   212,   213,     0,  1269,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,   209,   210,   211,   212,   213,     0,  1367,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   209,   210,   211,   212,
   213,     0,  1396,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   451,   352,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   352,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   421,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   423,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   424,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   426,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   430,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   431,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   436,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   473,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   476,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   482,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   483,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   484,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   485,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   486,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   487,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   488,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   489,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   490,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   491,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   493,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   494,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   495,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   496,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   497,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   498,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   561,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   564,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   574,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   575,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   579,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   580,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   581,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   582,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   583,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   625,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   628,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   682,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   741,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   742,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   743,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   744,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   840,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   906,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   938,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1031,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1035,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1037,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1167,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,  1169,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1171,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1194,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1195,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1196,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,  1349,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1350,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1351,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1430,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1431,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,  1432,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1478,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1479,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1480,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,   451,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,   452,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,   492,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,   499,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   500,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   503,     0,     0,   501,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,   591,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,   592,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,   593,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
   710,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,   711,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,   837,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,   838,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,   850,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,   851,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   891,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,   918,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,   919,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,   920,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
   921,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,   922,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,   923,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,   924,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,   925,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,   926,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   927,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,   928,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,   929,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,   984,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1012,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1013,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1025,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1036,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1041,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1044,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1064,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1075,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1076,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1077,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1078,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1079,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1080,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1081,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1082,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1083,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1084,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1085,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1086,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1134,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1164,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1185,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1186,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1187,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1188,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1189,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1190,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1191,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1192,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1193,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1247,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1248,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1249,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1250,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1251,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1252,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1253,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1254,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1255,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1298,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1299,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1300,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1301,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1302,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1303,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1304,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1305,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1306,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1339,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1343,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1344,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1345,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1346,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1347,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1348,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1366,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1371,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1372,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1373,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1374,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1375,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1376,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1399,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1400,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1401,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1402,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1403,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1404,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1427,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1428,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1429,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1441,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1442,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1443,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1458,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1459,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,  1354,  1460,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223
};

static const short yycheck[] = {     7,
   115,   309,   998,     4,     4,     4,     4,    37,   932,     6,
    81,     6,     4,    58,     4,     4,   141,    58,    26,  1059,
     4,    60,    60,     4,     6,   168,    65,    65,     6,     6,
     6,   174,    43,    44,     5,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,   160,   161,     7,
   168,     6,   160,   161,    60,   857,   174,   160,   161,    65,
   171,   174,    44,     6,   866,     6,   174,     6,     6,   172,
     6,   873,   175,    63,    63,     6,   160,   161,   171,    63,
    33,   174,    63,    36,    37,   160,   161,    33,   172,     6,
    36,   175,    84,   101,   102,   103,   104,   105,     6,   174,
   171,  1025,     6,    84,     6,   160,   161,   160,   161,     7,
   118,   119,   120,   121,   122,    36,    37,   172,    39,   172,
   175,   171,   130,   131,   132,   133,   171,   135,   136,   174,
   138,   139,   140,   174,   142,  1175,   175,   175,   172,     6,
     7,   171,   176,   154,   175,   171,   157,   160,   161,     6,
   158,   159,   163,     6,   172,   160,   161,   175,    41,   172,
   160,   161,   171,   160,   161,   160,   161,   175,   173,   177,
   178,   171,    37,   174,   174,   174,   174,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   174,   174,   171,
   171,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   160,   161,   160,
   161,   160,   161,  1219,  1026,     3,     4,   171,  1030,   160,
   161,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,   160,   161,   152,   153,   154,   155,   160,   161,
   171,   160,   161,   174,   272,   273,     7,   160,   161,    37,
   278,   169,   170,   281,   173,   169,   170,   285,   176,   172,
   171,   289,   290,   291,   171,   293,   294,   295,   296,   297,
   298,   299,   172,   173,     7,   306,   307,    37,   160,   161,
   160,   161,   174,   311,   312,   313,    39,   318,     0,     1,
   172,     3,   172,    50,    51,   174,   324,     3,     4,     5,
   174,   329,     5,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   160,   161,   172,   173,    37,     0,
     1,    33,     3,   174,    36,    37,   172,    39,     6,  1161,
  1162,  1163,  1164,     5,   172,   171,  1168,   175,   146,   147,
   148,   149,   150,    96,    97,    98,    99,   100,   156,   157,
   158,   159,   160,   161,   162,   163,   164,     6,   172,   167,
   168,   175,   172,   171,   167,   175,   174,   170,   409,   410,
   411,   409,   410,   411,   412,   413,   172,   171,   416,   175,
   418,   152,   153,   154,   155,   172,   169,   170,   175,   111,
   112,   113,   114,   115,   116,   117,   118,   435,   169,   170,
   172,     5,   440,   175,  1236,  1237,     4,   448,  1240,   152,
   153,   154,   155,   451,   452,   137,   138,   172,   140,     4,
   175,   172,   460,    37,   175,   172,   169,   170,   175,   467,
   111,   112,   113,   114,   115,   116,   117,   118,   172,   477,
   176,   175,   171,   481,   160,   161,   171,   162,   163,   164,
   171,   167,     5,   168,   492,   171,     6,   171,   174,  1291,
   171,   499,   500,   501,   502,   156,   157,   158,   159,   160,
   161,   162,   163,   164,     3,     4,     5,   168,   171,   817,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   542,   171,   541,   542,   543,   171,   171,   171,  1341,
   160,   161,   162,   163,   164,   171,   557,   171,   168,    52,
    53,    54,    55,   668,    57,   172,   172,   171,   175,   175,
   568,   569,   172,   172,   171,   175,   175,   171,  1370,   171,
   171,   171,   171,   171,   171,     6,     6,   585,     3,     4,
   591,   592,   593,     5,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   171,   171,   174,   171,   171,
   174,   171,     6,   621,   622,   174,   624,     8,   171,   171,
   171,   171,   176,     6,     6,   174,   174,   174,   639,   637,
   638,   171,   168,   171,   171,     5,   171,   648,    33,    34,
    35,    36,    37,    38,    39,    40,   171,    42,   172,    44,
    45,   173,    47,    48,   171,  1457,   171,   171,   171,   171,
   171,   160,   161,   171,     8,   171,   171,   171,   167,    64,
   171,   171,   171,   171,   171,   174,   171,   171,   171,   171,
   171,   989,   171,    78,    79,   171,   171,   695,   171,   171,
   171,   171,   176,     6,   172,   172,     7,     7,   177,     7,
   708,     7,   710,   711,    82,   177,     5,     5,     5,     5,
   718,   719,   720,   721,   722,   723,   724,   725,   726,   727,
   728,   729,     5,     5,     5,     5,     5,     5,     5,   737,
     5,   739,     5,   129,     6,   160,   161,   745,     5,     5,
     5,   136,   167,     5,     5,     5,   171,     5,     5,   174,
     5,     5,     5,     5,     5,   146,   147,   148,   149,   150,
     5,     3,     5,     4,   879,   156,   157,   158,   159,   160,
   161,   162,   163,   164,     5,     7,     6,   168,     5,   787,
   175,   792,   173,     6,     6,     6,   175,     7,     7,     7,
     6,   799,     6,   177,     7,     7,   804,   805,     7,   175,
   174,   174,   146,   147,   148,   149,   150,   818,     7,   820,
   171,   822,   156,   157,   158,   159,   160,   161,   162,   163,
   164,     7,   143,   172,   168,   172,   172,   172,     5,   837,
   838,   172,   172,   146,   147,   148,   149,   150,   172,   172,
   848,   172,   850,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   860,   172,   172,   168,   172,   172,   172,   867,
   868,   869,     6,   172,   176,   172,   874,   172,   172,   172,
   878,   172,   880,   173,   146,   147,   148,   149,   150,   172,
   172,   172,   172,   891,   156,   157,   158,   159,   160,   161,
   162,   163,   164,     7,     7,     7,   168,     7,   172,   907,
     7,   172,   172,   172,   172,     7,     7,     7,   172,   172,
   918,   919,   920,   921,   922,   923,   924,   925,   926,   927,
   928,   929,     7,     7,   174,     7,     7,     7,     6,     3,
     4,   171,   171,   941,   171,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   171,     7,     7,   139,
   171,   171,     3,   974,   975,   976,   974,   975,   976,   977,
   978,   979,   980,   171,   171,   983,   984,   171,   171,   171,
   171,     3,     3,   162,     3,   993,   994,   995,     5,   141,
     3,     6,     3,     3,   146,     3,     3,     3,     3,     3,
     3,     3,     3,     3,  1012,  1013,     5,   176,     6,     6,
     6,  1019,     6,     6,     6,     6,   174,   169,     6,    83,
  1028,   173,   174,   176,   172,   172,   177,   173,  1036,   172,
   172,     3,     4,  1041,    49,   173,  1044,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,  1066,   176,
     6,     6,   173,   172,   172,     6,   172,  1075,  1076,  1077,
  1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,   173,
   173,   172,   172,   172,   172,  1093,   160,   161,     6,   172,
     6,     6,     6,   167,   173,   172,   172,   171,     3,     4,
   174,   172,   172,   172,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   172,  1134,   173,   172,   172,
     6,   146,   147,   148,   149,   150,     6,     6,     6,     6,
     6,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     6,   176,  1160,   168,   146,   147,   148,   149,   150,     6,
     6,     6,    83,     7,   156,   157,   158,   159,   160,   161,
   162,   163,   164,     8,     4,     3,   168,  1185,  1186,  1187,
  1188,  1189,  1190,  1191,  1192,  1193,     6,     3,   160,   161,
     3,     6,   162,  1201,     6,   167,     6,     6,     3,   171,
   146,   147,   148,   149,   150,     6,  1214,     6,  1216,     3,
   156,   157,   158,   159,   160,   161,   162,   163,   164,     6,
     3,     3,   168,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,     3,     6,   174,     7,  1247,
  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,
  1258,    84,     4,  1261,   174,   160,   161,   146,   147,   148,
   149,   150,   167,   175,     6,   173,   171,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    80,   172,   172,   168,
   172,  1289,  1290,   173,   172,   172,     6,   173,   173,   178,
  1298,  1299,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,
   172,  1309,   173,  1311,    83,     6,     3,  1315,   173,   172,
   172,   146,   147,   148,   149,   150,   173,   176,     6,   174,
     6,   156,   157,   158,   159,   160,   161,   162,   163,   164,
  1338,  1339,   175,   168,     3,  1343,  1344,  1345,  1346,  1347,
  1348,    33,    34,    35,    36,    37,    38,    39,    40,     6,
    42,     6,    44,    45,     6,    47,    48,     6,  1366,     6,
     6,     3,     6,  1371,  1372,  1373,  1374,  1375,  1376,  1377,
  1378,  1379,    64,     5,   176,     6,   176,     6,     4,   175,
     5,   174,     6,   172,   172,     4,    78,    79,   172,    63,
     6,  1399,  1400,  1401,  1402,  1403,  1404,  1405,   172,  1407,
   173,  1409,   173,     6,     6,   172,   172,   559,   560,   173,
   562,   172,   172,     6,   566,   567,     6,     6,     6,  1427,
  1428,  1429,     6,     6,     6,     6,     5,   177,     5,   172,
   175,   172,   172,  1441,  1442,  1443,  1444,  1445,  1446,     6,
   173,   173,   172,   172,   136,   172,   172,    80,     6,   174,
  1458,  1459,  1460,  1461,     6,  1463,   174,  1465,   174,     5,
     5,   175,     6,     6,   174,   172,   172,   176,   173,   173,
    80,   623,   175,   175,   626,     6,     6,  1485,  1486,  1487,
    84,     6,   172,   175,     6,     6,  1494,     6,  1496,     6,
  1498,   174,   172,   645,   646,   145,   172,   172,     6,   651,
   652,   174,   174,     3,     4,   173,   658,   174,   660,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
     6,   172,     6,     6,   686,     6,   688,     6,     6,   174,
   174,     6,   172,     6,   696,   697,   698,   174,     6,   701,
   702,   703,   704,   705,   706,   707,   146,   147,   148,   149,
   150,   172,     6,   172,     6,   173,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   174,   174,   174,   168,   146,
   147,   148,   149,   150,     6,     6,     6,     0,     0,   156,
   157,   158,   159,   160,   161,   162,   163,   164,     6,     6,
   595,   168,   146,   147,   148,   149,   150,     6,     6,   569,
  1183,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   149,   150,    -1,    -1,    -1,
     6,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   842,    -1,    -1,   168,    -1,   146,   147,   148,   149,
   150,    -1,    -1,     6,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,   167,   168,    -1,
    -1,   171,    -1,   146,   147,   148,   149,   150,     6,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   844,    -1,   846,   168,    -1,    -1,    -1,   851,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   870,    -1,
    -1,    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,     6,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,     6,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,     6,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,   146,   147,
   148,   149,   150,     6,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,  1015,   168,    -1,  1018,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1038,    -1,    -1,    -1,
    -1,    -1,   146,   147,   148,   149,   150,     6,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
  1072,     6,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,    -1,     6,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,   146,   147,   148,   149,   150,     6,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1157,  1158,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,     8,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,  1184,    -1,    -1,    -1,    -1,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,  1233,    -1,   168,    -1,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,  1246,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
  1292,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1342,    -1,    -1,    -1,     0,     1,    -1,    -1,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1369,    -1,    -1,
    -1,    -1,    -1,    -1,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    -1,    42,    43,    44,    45,
    46,    47,    48,    -1,    -1,  1397,    52,    53,    54,    55,
    56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    78,    79,  1426,    -1,    -1,    -1,    -1,    85,
    86,    36,    88,    89,    90,    91,    92,    -1,  1440,    33,
    34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
    44,    45,    -1,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    64,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   136,    -1,    -1,   168,    78,    79,    -1,    -1,    93,    94,
    95,    -1,    -1,   178,    -1,    -1,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,    -1,   130,   131,   132,   133,   134,
   135,    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,   136,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,   178,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,   178,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,   178,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,
    -1,   175,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,
    -1,   175,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,
    -1,   175,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   175,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   139,    -1,    -1,    -1,
    -1,    -1,   175,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   175,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   139,    -1,    -1,
    -1,    -1,    -1,   175,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   175,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   142,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,   144,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 153 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 167 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 174 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 191 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 192 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 193 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 194 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 199 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 204 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 215 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 218 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 222 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 228 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 234 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 241 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 247 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 251 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 255 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 262 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 266 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 271 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 275 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 279 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 283 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 287 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 291 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 295 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 299 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 311 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 315 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 319 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 323 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 327 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 342 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 352 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 362 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 365 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 382 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 385 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 390 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 401 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 405 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 412 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 431 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 433 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 438 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 443 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 450 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 452 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 457 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 462 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 469 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 471 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 476 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 481 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 488 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 490 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 496 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 502 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 509 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 511 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 517 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 523 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 530 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 532 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 538 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 544 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 551 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 553 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 560 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 569 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 576 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 578 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 585 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 594 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 601 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 603 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 610 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 619 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 626 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 628 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 636 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 645 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 652 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 654 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 662 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 671 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 678 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 680 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 688 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 697 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 713 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 719 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 727 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 735 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 743 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 751 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 759 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 770 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 783 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 140:
#line 801 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 818 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 839 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 856 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 877 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 894 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 915 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 932 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 953 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 970 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 991 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1008 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1029 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1046 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1069 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1094 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1123 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1148 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1177 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1202 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1233 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1246 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 162:
#line 1275 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1282 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1288 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1307 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 166:
#line 1318 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 167:
#line 1326 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1332 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1338 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1357 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1363 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 172:
#line 1380 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 173:
#line 1386 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1392 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1398 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1404 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1410 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 178:
#line 1429 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 179:
#line 1441 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1447 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 181:
#line 1466 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 182:
#line 1489 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 183:
#line 1497 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 184:
#line 1501 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1507 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1513 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 187:
#line 1525 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 188:
#line 1531 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1537 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1550 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1555 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1560 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1565 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1572 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1573 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1574 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1579 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 198:
#line 1583 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1595 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 200:
#line 1613 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 201:
#line 1628 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 202:
#line 1656 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 203:
#line 1686 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 204:
#line 1690 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 205:
#line 1696 "Gmsh.y"
{
     Init();
     Draw();
   ;
    break;}
case 206:
#line 1701 "Gmsh.y"
{
     extern long Get_AnimTime();
     long sleep_time = Get_AnimTime();
     while(1){
       if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
     }
   ;
    break;}
case 207:
#line 1717 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 208:
#line 1730 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 209:
#line 1743 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 210:
#line 1762 "Gmsh.y"
{
    if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
      {
	vyyerror("Error while exiting function");
      }
  ;
    break;}
case 211:
#line 1769 "Gmsh.y"
{
    if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
      {
	vyyerror("Unknown Function %s",yyvsp[-1].c);
      }
  ;
    break;}
case 212:
#line 1776 "Gmsh.y"
{
    // skip everything until return is found
    if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
      {
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      }
    void skip_until(char *until);
    skip_until("Return");
  ;
    break;}
case 213:
#line 1806 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 214:
#line 1811 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 215:
#line 1817 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 216:
#line 1821 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 217:
#line 1825 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 218:
#line 1829 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 219:
#line 1833 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 220:
#line 1838 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 221:
#line 1846 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 1849 "Gmsh.y"
{
    ;
    break;}
case 223:
#line 1855 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 224:
#line 1872 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 225:
#line 1883 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 226:
#line 1900 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 227:
#line 1917 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 228:
#line 1934 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 229:
#line 1955 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 230:
#line 1975 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 231:
#line 1995 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 232:
#line 2012 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 233:
#line 2037 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 234:
#line 2049 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 235:
#line 2050 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 236:
#line 2051 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 2052 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 238:
#line 2053 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 2057 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 240:
#line 2058 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 241:
#line 2059 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 242:
#line 2060 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 243:
#line 2061 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 244:
#line 2062 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 245:
#line 2063 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 246:
#line 2064 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 247:
#line 2065 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 248:
#line 2066 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 249:
#line 2067 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 250:
#line 2068 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 251:
#line 2069 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 252:
#line 2070 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 253:
#line 2071 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 254:
#line 2072 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 255:
#line 2073 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 256:
#line 2074 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 257:
#line 2075 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 258:
#line 2076 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 259:
#line 2077 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2078 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 261:
#line 2079 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 262:
#line 2080 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2081 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 264:
#line 2082 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2083 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2084 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2085 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2086 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2087 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 270:
#line 2088 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2089 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2090 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2091 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2092 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 275:
#line 2093 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2094 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 277:
#line 2095 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 278:
#line 2096 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 279:
#line 2100 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 280:
#line 2101 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 281:
#line 2103 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 282:
#line 2112 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 283:
#line 2129 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 284:
#line 2150 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 285:
#line 2167 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2188 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2205 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2228 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 289:
#line 2234 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 290:
#line 2248 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 291:
#line 2252 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2256 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 293:
#line 2260 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2264 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2270 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 296:
#line 2274 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2278 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2282 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2286 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 300:
#line 2312 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 301:
#line 2345 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2348 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2354 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2357 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2363 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2366 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 307:
#line 2370 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 308:
#line 2377 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 309:
#line 2382 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 310:
#line 2389 "Gmsh.y"
{
    ;
    break;}
case 311:
#line 2392 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 312:
#line 2398 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 313:
#line 2406 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 314:
#line 2411 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 315:
#line 2420 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 316:
#line 2424 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 317:
#line 2435 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 318:
#line 2439 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 319:
#line 2443 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 320:
#line 2448 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 321:
#line 2453 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 322:
#line 2469 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 323:
#line 2473 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 324:
#line 2495 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 325:
#line 2503 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2509 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

