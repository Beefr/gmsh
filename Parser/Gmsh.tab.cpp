
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPrintf	284
#define	tPoint	285
#define	tCircle	286
#define	tEllipsis	287
#define	tLine	288
#define	tSurface	289
#define	tSpline	290
#define	tVolume	291
#define	tCharacteristic	292
#define	tLength	293
#define	tParametric	294
#define	tElliptic	295
#define	tPlane	296
#define	tRuled	297
#define	tTransfinite	298
#define	tComplex	299
#define	tPhysical	300
#define	tUsing	301
#define	tBump	302
#define	tProgression	303
#define	tRotate	304
#define	tTranslate	305
#define	tSymmetry	306
#define	tDilate	307
#define	tExtrude	308
#define	tDuplicata	309
#define	tLoop	310
#define	tInclude	311
#define	tRecombine	312
#define	tDelete	313
#define	tCoherence	314
#define	tView	315
#define	tAttractor	316
#define	tLayers	317
#define	tScalarTetrahedron	318
#define	tVectorTetrahedron	319
#define	tTensorTetrahedron	320
#define	tScalarTriangle	321
#define	tVectorTriangle	322
#define	tTensorTriangle	323
#define	tScalarLine	324
#define	tVectorLine	325
#define	tTensorLine	326
#define	tScalarPoint	327
#define	tVectorPoint	328
#define	tTensorPoint	329
#define	tBSpline	330
#define	tNurbs	331
#define	tOrder	332
#define	tWith	333
#define	tBounds	334
#define	tKnots	335
#define	tColor	336
#define	tOptions	337
#define	tFor	338
#define	tEndFor	339
#define	tScript	340
#define	tExit	341
#define	tMerge	342
#define	tB_SPLINE_SURFACE_WITH_KNOTS	343
#define	tB_SPLINE_CURVE_WITH_KNOTS	344
#define	tCARTESIAN_POINT	345
#define	tTRUE	346
#define	tFALSE	347
#define	tUNSPECIFIED	348
#define	tU	349
#define	tV	350
#define	tEDGE_CURVE	351
#define	tVERTEX_POINT	352
#define	tORIENTED_EDGE	353
#define	tPLANE	354
#define	tFACE_OUTER_BOUND	355
#define	tEDGE_LOOP	356
#define	tADVANCED_FACE	357
#define	tVECTOR	358
#define	tDIRECTION	359
#define	tAXIS2_PLACEMENT_3D	360
#define	tISO	361
#define	tENDISO	362
#define	tENDSEC	363
#define	tDATA	364
#define	tHEADER	365
#define	tFILE_DESCRIPTION	366
#define	tFILE_SCHEMA	367
#define	tFILE_NAME	368
#define	tMANIFOLD_SOLID_BREP	369
#define	tCLOSED_SHELL	370
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	371
#define	tFACE_BOUND	372
#define	tCYLINDRICAL_SURFACE	373
#define	tCONICAL_SURFACE	374
#define	tCIRCLE	375
#define	tTRIMMED_CURVE	376
#define	tGEOMETRIC_SET	377
#define	tCOMPOSITE_CURVE_SEGMENT	378
#define	tCONTINUOUS	379
#define	tCOMPOSITE_CURVE	380
#define	tTOROIDAL_SURFACE	381
#define	tPRODUCT_DEFINITION	382
#define	tPRODUCT_DEFINITION_SHAPE	383
#define	tSHAPE_DEFINITION_REPRESENTATION	384
#define	tELLIPSE	385
#define	tTrimmed	386
#define	tSolid	387
#define	tEndSolid	388
#define	tVertex	389
#define	tFacet	390
#define	tNormal	391
#define	tOuter	392
#define	tLoopSTL	393
#define	tEndLoop	394
#define	tEndFacet	395
#define	tAND	396
#define	tOR	397
#define	tNOTEQUAL	398
#define	tEQUAL	399
#define	tAPPROXEQUAL	400
#define	tAFFECTPLUS	401
#define	tAFFECTMINUS	402
#define	tAFFECTTIMES	403
#define	tAFFECTDIVIDE	404
#define	tLESSOREQUAL	405
#define	tGREATEROREQUAL	406
#define	tCROSSPRODUCT	407
#define	UNARYPREC	408
#define	tPLUSPLUS	409
#define	tMINUSMINUS	410

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.23 2000-12-07 01:14:30 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 59 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1493
#define	YYFLAG		-32768
#define	YYNTBASE	175

#define YYTRANSLATE(x) ((unsigned)(x) <= 410 ? yytranslate[x] : 255)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   163,     2,     2,     2,   160,     2,     2,   167,
   169,   158,   156,   168,   157,   172,   159,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   152,
     2,   153,   142,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   173,     2,   174,   164,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   170,     2,   171,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   154,   155,   161,   162,   165,   166
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   527,   532,   535,   543,
   550,   559,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   590,   593,   596,   598,   602,   603,   617,   619,
   623,   624,   638,   640,   644,   645,   659,   661,   665,   666,
   686,   688,   692,   693,   713,   715,   719,   720,   740,   742,
   746,   747,   773,   775,   779,   780,   806,   808,   812,   813,
   839,   841,   845,   846,   878,   880,   884,   885,   917,   919,
   923,   924,   956,   961,   965,   969,   974,   979,   984,   989,
   997,  1006,  1019,  1026,  1032,  1040,  1048,  1061,  1069,  1079,
  1097,  1105,  1114,  1123,  1131,  1143,  1149,  1158,  1168,  1177,
  1200,  1221,  1230,  1239,  1245,  1254,  1262,  1271,  1277,  1289,
  1295,  1305,  1307,  1309,  1311,  1312,  1315,  1320,  1325,  1329,
  1333,  1336,  1340,  1347,  1356,  1358,  1367,  1380,  1389,  1402,
  1411,  1424,  1436,  1452,  1454,  1457,  1467,  1470,  1477,  1487,
  1497,  1506,  1515,  1524,  1531,  1536,  1539,  1540,  1543,  1545,
  1552,  1564,  1571,  1583,  1590,  1602,  1609,  1621,  1628,  1640,
  1647,  1659,  1665,  1677,  1683,  1695,  1702,  1714,  1721,  1733,
  1740,  1752,  1761,  1762,  1765,  1767,  1769,  1771,  1773,  1775,
  1777,  1779,  1783,  1786,  1789,  1792,  1796,  1800,  1804,  1808,
  1812,  1816,  1820,  1824,  1828,  1832,  1836,  1840,  1844,  1848,
  1854,  1859,  1864,  1869,  1874,  1879,  1884,  1889,  1894,  1899,
  1904,  1911,  1916,  1921,  1926,  1931,  1936,  1941,  1948,  1955,
  1962,  1964,  1966,  1968,  1972,  1981,  1986,  1996,  2001,  2011,
  2015,  2021,  2023,  2026,  2029,  2033,  2037,  2049,  2059,  2067,
  2075,  2079,  2088,  2089,  2093,  2095,  2099,  2100,  2104,  2108,
  2110,  2114,  2115,  2117,  2121,  2123,  2125,  2129,  2133,  2143,
  2151,  2157,  2159
};

static const short yyrhs[] = {   177,
     0,   176,     0,   182,     0,   133,     0,   136,   137,   243,
   243,   243,   138,   139,   135,   243,   243,   243,   135,   243,
   243,   243,   135,   243,   243,   243,   140,   141,     0,   134,
     0,     0,   177,   178,     0,   179,     0,   181,     0,   180,
     0,     1,     6,     0,   107,     6,     0,   108,     6,     0,
   110,     6,     0,   109,     6,     0,   111,     6,     0,   112,
   167,   248,   168,     5,   169,     6,     0,   113,   167,   248,
   169,     6,     0,   114,   167,     5,   168,     5,   168,   248,
   168,   248,   168,     5,   168,     5,   168,     5,   169,     6,
     0,     3,     7,    91,   167,     5,   168,   246,   169,     6,
     0,     3,     7,    90,   167,     5,   168,   243,   168,   252,
   168,   242,   168,   242,   168,   242,   168,   252,   168,   252,
   168,   242,   169,     6,     0,     3,     7,    89,   167,     5,
   168,   243,   168,   243,   168,   250,   168,   242,   168,   242,
   168,   242,   168,   242,   168,   252,   168,   252,   168,   252,
   168,   252,   168,   242,   169,     6,     0,     3,     7,    97,
   167,     5,   168,     3,   168,     3,   168,     3,   168,   242,
   169,     6,     0,     3,     7,   101,   167,     5,   168,     3,
   168,   242,   169,     6,     0,     3,     7,   118,   167,     5,
   168,     3,   168,   242,   169,     6,     0,     3,     7,    99,
   167,     5,   168,   158,   168,   158,   168,   243,   168,   242,
   169,     6,     0,     3,     7,   102,   167,     5,   168,   252,
   169,     6,     0,     3,     7,   103,   167,     5,   168,   252,
   168,     3,   168,   242,   169,     6,     0,     3,     7,    98,
   167,     5,   168,     3,   169,     6,     0,     3,     7,   104,
   167,     5,   168,     3,   168,   243,   169,     6,     0,     3,
     7,   106,   167,     5,   168,     3,   168,     3,   168,     3,
   169,     6,     0,     3,     7,   105,   167,     5,   168,   246,
   169,     6,     0,     3,     7,   100,   167,     5,   168,     3,
   169,     6,     0,     3,     7,    34,   167,     5,   168,     3,
   168,     3,   169,     6,     0,     3,     7,   116,   167,     5,
   168,   252,   169,     6,     0,     3,     7,   117,   167,     5,
   168,   252,   168,     3,   169,     6,     0,     3,     7,   115,
   167,     5,   168,     3,   169,     6,     0,     3,     7,   119,
   167,     5,   168,     3,   168,   243,   169,     6,     0,     3,
     7,   120,   167,     5,   168,     3,   168,   243,   168,   243,
   169,     6,     0,     3,     7,   127,   167,     5,   168,     3,
   168,   243,   168,   243,   169,     6,     0,     3,     7,   121,
   167,     5,   168,     3,   168,   243,   169,     6,     0,     3,
     7,   131,   167,     5,   168,     3,   168,   243,   168,   243,
   169,     6,     0,     3,     7,   122,   167,     5,   168,     3,
   168,   252,   168,   252,   168,   242,   168,   242,   169,     6,
     0,     3,     7,   123,   167,     5,   168,   252,   169,     6,
     0,     3,     7,   124,   167,   125,   168,   242,   168,     3,
   169,     6,     0,     3,     7,   126,   167,     5,   168,   252,
   168,   242,   169,     6,     0,     3,     7,   128,   167,     5,
   168,     5,   168,     3,   168,     3,   169,     6,     0,     3,
     7,   129,   167,     5,   168,     5,   168,     3,   169,     6,
     0,     3,     7,   130,   167,     3,   168,     3,   169,     6,
     0,     0,   182,   183,     0,   185,     0,   184,     0,   223,
     0,   224,     0,   225,     0,   228,     0,   229,     0,   233,
     0,   236,     0,   237,     0,   230,     0,   232,     0,   231,
     0,    83,   170,   238,   171,     0,    86,   170,   240,   171,
     0,     1,     6,     0,    30,   167,     5,   168,   243,   169,
     6,     0,    61,     5,   170,   186,   171,     6,     0,    61,
     5,     4,   246,   170,   186,   171,     6,     0,     0,   186,
   188,     0,   186,   191,     0,   186,   194,     0,   186,   197,
     0,   186,   200,     0,   186,   203,     0,   186,   206,     0,
   186,   209,     0,   186,   212,     0,   186,   215,     0,   186,
   218,     0,   186,   221,     0,   243,     0,   187,   168,   243,
     0,     0,    73,   167,   243,   168,   243,   168,   243,   169,
   189,   170,   187,   171,     6,     0,   243,     0,   190,   168,
   243,     0,     0,    74,   167,   243,   168,   243,   168,   243,
   169,   192,   170,   190,   171,     6,     0,   243,     0,   193,
   168,   243,     0,     0,    75,   167,   243,   168,   243,   168,
   243,   169,   195,   170,   193,   171,     6,     0,   243,     0,
   196,   168,   243,     0,     0,    70,   167,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   169,   198,
   170,   196,   171,     6,     0,   243,     0,   199,   168,   243,
     0,     0,    71,   167,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   169,   201,   170,   199,   171,
     6,     0,   243,     0,   202,   168,   243,     0,     0,    72,
   167,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   169,   204,   170,   202,   171,     6,     0,   243,
     0,   205,   168,   243,     0,     0,    67,   167,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   169,   207,   170,   205,   171,
     6,     0,   243,     0,   208,   168,   243,     0,     0,    68,
   167,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   169,   210,
   170,   208,   171,     6,     0,   243,     0,   211,   168,   243,
     0,     0,    69,   167,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   168,
   243,   169,   213,   170,   211,   171,     6,     0,   243,     0,
   214,   168,   243,     0,     0,    64,   167,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   169,   216,   170,   214,   171,     6,     0,   243,     0,   217,
   168,   243,     0,     0,    65,   167,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   168,
   243,   168,   243,   168,   243,   168,   243,   168,   243,   169,
   219,   170,   217,   171,     6,     0,   243,     0,   220,   168,
   243,     0,     0,    66,   167,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   168,   243,   169,   222,
   170,   220,   171,     6,     0,     4,     7,   243,     6,     0,
     4,   165,     6,     0,     4,   166,     6,     0,     4,   148,
   243,     6,     0,     4,   149,   243,     6,     0,     4,   150,
   243,     6,     0,     4,   151,   243,     6,     0,    31,   167,
   243,   169,     7,   246,     6,     0,    46,    31,   167,   243,
   169,     7,   252,     6,     0,    62,    31,   252,     7,   170,
   243,   168,   243,   168,   243,   171,     6,     0,    38,    39,
   252,     7,   243,     6,     0,    31,   170,   243,   171,     6,
     0,    34,   167,   243,   169,     7,   252,     6,     0,    36,
   167,   243,   169,     7,   252,     6,     0,    62,    34,   252,
     7,   170,   243,   168,   243,   168,   243,   171,     6,     0,
    32,   167,   243,   169,     7,   252,     6,     0,    32,   167,
   243,   169,     7,   252,    42,   246,     6,     0,    40,   167,
   243,   169,     7,   170,   243,   168,   243,   168,     5,   168,
     5,   168,     5,   171,     6,     0,    33,   167,   243,   169,
     7,   252,     6,     0,    46,    34,   167,   243,   169,     7,
   252,     6,     0,    34,    56,   167,   243,   169,     7,   252,
     6,     0,    76,   167,   243,   169,     7,   252,     6,     0,
    77,   167,   243,   169,     7,   252,    81,   252,    78,   243,
     6,     0,    34,   170,   243,   171,     6,     0,    42,    35,
   167,   243,   169,     7,   252,     6,     0,   132,    35,   167,
   243,   169,     7,   243,   252,     6,     0,    43,    35,   167,
   243,   169,     7,   252,     6,     0,    77,    35,    79,    80,
   167,   243,   169,     7,   250,    81,   170,   252,   168,   252,
   171,    78,   170,   243,   168,   243,   171,     6,     0,    77,
    35,   167,   243,   169,     7,   250,    81,   170,   252,   168,
   252,   171,    78,   170,   243,   168,   243,   171,     6,     0,
    46,    35,   167,   243,   169,     7,   252,     6,     0,    35,
    56,   167,   243,   169,     7,   252,     6,     0,    35,   170,
   243,   171,     6,     0,    45,    37,   167,   243,   169,     7,
   252,     6,     0,    37,   167,   243,   169,     7,   252,     6,
     0,    46,    37,   167,   243,   169,     7,   252,     6,     0,
    51,   246,   170,   226,   171,     0,    50,   170,   246,   168,
   246,   168,   243,   171,   170,   226,   171,     0,    52,   246,
   170,   226,   171,     0,    53,   170,   246,   168,   243,   171,
   170,   226,   171,     0,   228,     0,   227,     0,   225,     0,
     0,   227,   224,     0,    55,   170,   227,   171,     0,    59,
   170,   227,   171,     0,    57,     5,     6,     0,    30,     5,
     6,     0,    87,     6,     0,    88,     5,     6,     0,    84,
   167,   243,     8,   243,   169,     0,    84,   167,   243,     8,
   243,     8,   243,   169,     0,    85,     0,    54,    31,   170,
   243,   168,   246,   171,     6,     0,    54,    31,   170,   243,
   168,   246,   168,   246,   168,   243,   171,     6,     0,    54,
    34,   170,   243,   168,   246,   171,     6,     0,    54,    34,
   170,   243,   168,   246,   168,   246,   168,   243,   171,     6,
     0,    54,    35,   170,   243,   168,   246,   171,     6,     0,
    54,    35,   170,   243,   168,   246,   168,   246,   168,   243,
   171,     6,     0,    54,    35,   170,   243,   168,   246,   171,
   170,   234,   171,     6,     0,    54,    35,   170,   243,   168,
   246,   168,   246,   168,   243,   171,   170,   234,   171,     6,
     0,   235,     0,   234,   235,     0,    63,   170,   252,   168,
   252,   168,   252,   171,     6,     0,    58,     6,     0,    44,
    34,   252,     7,   243,     6,     0,    44,    34,   252,     7,
   243,    47,    49,   243,     6,     0,    44,    34,   252,     7,
   243,    47,    48,   243,     6,     0,    44,    35,   170,   243,
   171,     7,   252,     6,     0,    41,    35,   170,   243,   171,
     7,   252,     6,     0,    44,    37,   170,   243,   171,     7,
   252,     6,     0,    58,    35,   252,     7,   243,     6,     0,
    58,    35,   252,     6,     0,    60,     6,     0,     0,   238,
   239,     0,   184,     0,     4,   172,     4,     7,     5,     6,
     0,     4,   172,    61,   173,   243,   174,   172,     4,     7,
     5,     6,     0,     4,   172,     4,     7,   243,     6,     0,
     4,   172,    61,   173,   243,   174,   172,     4,     7,   243,
     6,     0,     4,   172,     4,   148,   243,     6,     0,     4,
   172,    61,   173,   243,   174,   172,     4,   148,   243,     6,
     0,     4,   172,     4,   149,   243,     6,     0,     4,   172,
    61,   173,   243,   174,   172,     4,   149,   243,     6,     0,
     4,   172,     4,   150,   243,     6,     0,     4,   172,    61,
   173,   243,   174,   172,     4,   150,   243,     6,     0,     4,
   172,     4,   151,   243,     6,     0,     4,   172,    61,   173,
   243,   174,   172,     4,   151,   243,     6,     0,     4,   172,
     4,   165,     6,     0,     4,   172,    61,   173,   243,   174,
   172,     4,   165,   243,     6,     0,     4,   172,     4,   166,
     6,     0,     4,   172,    61,   173,   243,   174,   172,     4,
   166,   243,     6,     0,     4,   172,     4,     7,   246,     6,
     0,     4,   172,    61,   173,   243,   174,   172,     4,     7,
   246,     6,     0,     4,   172,     4,   148,   246,     6,     0,
     4,   172,    61,   173,   243,   174,   172,     4,   148,   246,
     6,     0,     4,   172,     4,   149,   246,     6,     0,     4,
   172,    61,   173,   243,   174,   172,     4,   149,   246,     6,
     0,     4,   172,    82,   172,     4,     7,   254,     6,     0,
     0,   240,   241,     0,   239,     0,    92,     0,    93,     0,
    94,     0,    95,     0,    96,     0,   244,     0,   167,   243,
   169,     0,   157,   243,     0,   156,   243,     0,   163,   243,
     0,   243,   157,   243,     0,   243,   156,   243,     0,   243,
   158,   243,     0,   243,   159,   243,     0,   243,   160,   243,
     0,   243,   164,   243,     0,   243,   152,   243,     0,   243,
   153,   243,     0,   243,   154,   243,     0,   243,   155,   243,
     0,   243,   146,   243,     0,   243,   145,   243,     0,   243,
   143,   243,     0,   243,   144,   243,     0,   243,   142,   243,
     8,   243,     0,    10,   167,   243,   169,     0,    11,   167,
   243,   169,     0,    12,   167,   243,   169,     0,    13,   167,
   243,   169,     0,    14,   167,   243,   169,     0,    15,   167,
   243,   169,     0,    16,   167,   243,   169,     0,    17,   167,
   243,   169,     0,    18,   167,   243,   169,     0,    19,   167,
   243,   169,     0,    20,   167,   243,   168,   243,   169,     0,
    21,   167,   243,   169,     0,    22,   167,   243,   169,     0,
    23,   167,   243,   169,     0,    24,   167,   243,   169,     0,
    25,   167,   243,   169,     0,    26,   167,   243,   169,     0,
    27,   167,   243,   168,   243,   169,     0,    28,   167,   243,
   168,   243,   169,     0,    29,   167,   243,   168,   243,   169,
     0,     3,     0,     9,     0,     4,     0,     4,   172,     4,
     0,     4,   172,    61,   173,   243,   174,   172,     4,     0,
     4,   172,     4,   165,     0,     4,   172,    61,   173,   243,
   174,   172,     4,   165,     0,     4,   172,     4,   166,     0,
     4,   172,    61,   173,   243,   174,   172,     4,   166,     0,
   243,     8,   243,     0,   243,     8,   243,     8,   243,     0,
   247,     0,   157,   246,     0,   156,   246,     0,   246,   157,
   246,     0,   246,   156,   246,     0,   170,   243,   168,   243,
   168,   243,   168,   243,   168,   243,   171,     0,   170,   243,
   168,   243,   168,   243,   168,   243,   171,     0,   170,   243,
   168,   243,   168,   243,   171,     0,   167,   243,   168,   243,
   168,   243,   169,     0,     4,   172,     4,     0,     4,   172,
    61,   173,   243,   174,   172,     4,     0,     0,   167,   249,
   169,     0,     5,     0,   249,   168,     5,     0,     0,   170,
   251,   171,     0,   167,   251,   169,     0,   252,     0,   251,
   168,   252,     0,     0,   243,     0,   170,   253,   171,     0,
   243,     0,   245,     0,   253,   168,   243,     0,   253,   168,
   245,     0,   170,   243,   168,   243,   168,   243,   168,   243,
   171,     0,   170,   243,   168,   243,   168,   243,   171,     0,
   170,     4,   168,   243,   171,     0,     4,     0,     4,   172,
    82,   172,     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   138,   140,   141,   148,   156,   170,   182,   184,   187,   189,
   190,   191,   194,   200,   205,   206,   207,   210,   214,   217,
   223,   228,   234,   242,   247,   251,   257,   262,   266,   271,
   275,   278,   283,   287,   291,   295,   300,   304,   307,   311,
   315,   319,   323,   327,   331,   334,   338,   341,   345,   348,
   357,   361,   367,   369,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   381,   382,   383,   384,   387,   398,
   403,   409,   414,   415,   416,   417,   418,   419,   420,   421,
   422,   423,   424,   425,   428,   431,   435,   441,   447,   450,
   454,   460,   466,   469,   473,   479,   485,   488,   492,   500,
   506,   509,   513,   521,   527,   530,   534,   542,   548,   551,
   555,   567,   573,   576,   580,   592,   598,   601,   605,   617,
   623,   626,   630,   643,   649,   652,   656,   669,   675,   678,
   682,   695,   707,   714,   722,   730,   738,   746,   754,   769,
   780,   786,   805,   816,   824,   830,   836,   855,   861,   877,
   884,   890,   896,   902,   908,   927,   939,   945,   964,   985,
   993,   999,  1005,  1011,  1023,  1029,  1035,  1047,  1053,  1058,
  1063,  1070,  1072,  1073,  1076,  1081,  1092,  1110,  1125,  1153,
  1184,  1188,  1200,  1215,  1228,  1266,  1272,  1278,  1282,  1286,
  1290,  1294,  1299,  1306,  1310,  1315,  1333,  1343,  1361,  1378,
  1395,  1416,  1436,  1456,  1473,  1497,  1508,  1510,  1513,  1520,
  1533,  1551,  1568,  1589,  1606,  1627,  1644,  1665,  1682,  1703,
  1720,  1741,  1758,  1779,  1796,  1819,  1844,  1873,  1898,  1927,
  1952,  1983,  2002,  2004,  2007,  2022,  2024,  2025,  2026,  2027,
  2030,  2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,
  2041,  2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,
  2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,
  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,
  2073,  2075,  2076,  2085,  2102,  2123,  2140,  2161,  2178,  2200,
  2207,  2220,  2225,  2229,  2233,  2237,  2242,  2247,  2251,  2255,
  2259,  2285,  2317,  2321,  2326,  2330,  2335,  2339,  2343,  2349,
  2355,  2361,  2365,  2371,  2378,  2384,  2393,  2397,  2407,  2412,
  2416,  2421,  2426
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete","tCoherence",
"tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron",
"tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine","tVectorLine",
"tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline","tNurbs",
"tOrder","tWith","tBounds","tKnots","tColor","tOptions","tFor","tEndFor","tScript",
"tExit","tMerge","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","'?'",
"tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL","tAFFECTPLUS","tAFFECTMINUS",
"tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL","tGREATEROREQUAL",
"'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC","'!'","'^'","tPLUSPLUS",
"tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter",
"Transfini","Coherence","Options","Option","Scripts","Script","BoolExpr","FExpr",
"FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble",
"Color", NULL
};
#endif

static const short yyr1[] = {     0,
   175,   175,   175,   176,   176,   176,   177,   177,   178,   178,
   178,   178,   179,   179,   179,   179,   179,   180,   180,   180,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   182,   182,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   184,   185,
   185,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   187,   187,   189,   188,   190,   190,
   192,   191,   193,   193,   195,   194,   196,   196,   198,   197,
   199,   199,   201,   200,   202,   202,   204,   203,   205,   205,
   207,   206,   208,   208,   210,   209,   211,   211,   213,   212,
   214,   214,   216,   215,   217,   217,   219,   218,   220,   220,
   222,   221,   223,   223,   223,   223,   223,   223,   223,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   225,   225,   225,
   225,   226,   226,   226,   227,   227,   228,   229,   230,   231,
   231,   231,   232,   232,   232,   233,   233,   233,   233,   233,
   233,   233,   233,   234,   234,   235,   235,   236,   236,   236,
   236,   236,   236,   236,   236,   237,   238,   238,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   240,   240,   241,   242,   242,   242,   242,   242,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
   245,   246,   246,   246,   246,   246,   247,   247,   247,   247,
   247,   247,   248,   248,   249,   249,   250,   250,   250,   251,
   251,   252,   252,   252,   253,   253,   253,   253,   254,   254,
   254,   254,   254
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     4,     2,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     1,     3,     0,    13,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    19,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    25,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    31,     4,     3,     3,     4,     4,     4,     4,     7,
     8,    12,     6,     5,     7,     7,    12,     7,     9,    17,
     7,     8,     8,     7,    11,     5,     8,     9,     8,    22,
    20,     8,     8,     5,     8,     7,     8,     5,    11,     5,
     9,     1,     1,     1,     0,     2,     4,     4,     3,     3,
     2,     3,     6,     8,     1,     8,    12,     8,    12,     8,
    12,    11,    15,     1,     2,     9,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     0,     2,     1,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     6,
    11,     5,    11,     5,    11,     6,    11,     6,    11,     6,
    11,     8,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     1,     1,     1,     3,     8,     4,     9,     4,     9,     3,
     5,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     3,     8,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     0,     1,     3,     1,     1,     3,     3,     9,     7,
     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   185,     0,     0,     0,     0,
    52,    54,    53,    55,    56,    57,    58,    59,    63,    65,
    64,    60,    61,    62,   281,   283,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   241,    12,     0,    13,    14,    16,    15,    17,
   303,   303,     0,    68,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   312,     0,     0,     0,     0,   312,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   292,     0,     0,     0,     0,     0,
   175,     0,   312,   175,   206,     0,   312,   312,     0,     0,
     0,   207,     0,   233,   181,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   244,   243,
   245,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   134,   135,   180,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   294,
   293,     0,     0,     0,     0,   175,   175,     0,     0,     0,
     0,     0,   179,     0,     0,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   242,     0,   258,   259,   257,   256,   252,   253,
   254,   255,   244,   243,   248,   249,   250,   251,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     0,     0,     0,     0,   133,   136,   137,   138,   139,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     0,     0,   296,   295,   174,     0,   173,   172,     0,     0,
     0,     0,     0,   177,   176,   205,     0,   178,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    66,   209,
   208,     0,    67,   235,   234,     0,   286,   288,     0,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   270,     0,
   272,   273,   274,   275,   276,   277,     0,     0,     0,   247,
   246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   304,     0,    19,     0,     0,     0,
   144,   312,   312,     0,   312,   156,     0,   164,   312,   312,
     0,     0,   314,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   168,   170,     0,     0,     0,     0,     0,    72,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,     0,     0,   312,     0,     0,   312,     0,
     0,     0,     0,     0,     0,     0,     0,   260,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   312,   312,
     0,     0,     0,     0,   312,   312,     0,     0,     0,     0,
     0,   312,     0,   312,     0,     0,     0,     0,     0,   306,
     0,   303,     0,     0,     0,     0,   312,     0,   312,     0,
     0,   290,   317,   318,   143,     0,   312,   312,   312,   198,
     0,   312,   312,   312,   312,   312,   312,   312,     0,     0,
     0,     0,     0,     0,     0,     0,   204,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    70,     0,     0,     0,     0,   307,     0,     0,     0,     0,
     0,   183,     0,     0,   271,   278,   279,   280,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   236,   237,   238,   239,   240,     0,     0,     0,
     0,     0,     0,     0,    18,     0,    69,   140,   148,     0,
   151,     0,   145,     0,   146,   166,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   154,     0,   312,   312,
     0,   312,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   312,     0,     0,     0,     0,   312,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   312,     0,     0,     0,
     0,     0,     0,     0,     0,   303,     0,   153,   163,   291,
     0,   202,   157,   159,     0,     0,   201,   203,   165,   141,
   152,   162,   167,     0,     0,   300,     0,   299,     0,     0,
   186,     0,   188,     0,   190,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   307,     0,   310,     0,     0,     0,   283,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   222,   224,     0,     0,   184,     0,   285,     0,     0,     0,
     0,    21,     0,    30,     0,    34,     0,    28,     0,     0,
    33,     0,    38,    36,     0,     0,     0,     0,     0,     0,
    45,     0,     0,     0,     0,     0,    50,     0,     0,   149,
     0,   200,   199,   175,   302,     0,   171,     0,     0,     0,
     0,     0,     0,   194,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   312,
   309,   308,   312,     0,     0,   210,     0,   212,   226,   214,
   228,   216,   230,   218,   220,     0,     0,   158,   287,   289,
     0,     0,   307,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   312,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   298,     0,     0,     0,
   197,   312,     0,   195,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
     0,     0,   284,     0,     0,   322,     0,     0,     0,    35,
     0,     0,     0,     0,    25,     0,    31,     0,    37,    26,
    39,     0,    42,     0,    46,    47,     0,     0,    49,     0,
     0,     0,   169,     0,     0,     0,     0,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   312,   312,   155,     0,     0,     0,   283,
     0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   297,   187,   189,   191,
     0,   312,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    87,    91,    95,   142,   147,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    29,    32,    40,     0,    41,    48,
    43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   312,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   312,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   211,
   213,   227,   215,   229,   217,   231,   219,   221,   223,   225,
   323,   321,     0,     0,     0,     0,    24,    27,     0,     0,
     0,   193,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    85,     0,    89,     0,    93,     0,     0,
   285,     0,     0,     0,   312,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     0,    44,    20,   150,   196,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    86,    88,    90,    92,    94,    96,
     0,     0,     0,     0,     0,   312,     0,     0,     0,     0,
     0,     0,    99,   103,   107,     0,     0,   319,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     5,   312,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    97,     0,   101,     0,   105,
     0,   312,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   160,     0,    22,     0,     0,
     0,     0,     0,     0,    98,   100,   102,   104,   106,   108,
   312,     0,     0,     0,   111,   115,   119,     0,     0,     0,
     0,     0,     0,     0,   312,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,     0,   113,     0,
   117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   110,   112,   114,   116,   118,
   120,     0,   123,   127,   131,    23,     0,     0,     0,     0,
     0,     0,     0,   121,     0,   125,     0,   129,     0,     0,
     0,     0,     0,     0,   122,   124,   126,   128,   130,   132,
     0,     0,     0
};

static const short yydefgoto[] = {  1491,
     4,     5,    18,    19,    20,    21,     6,    61,   460,    63,
   450,  1263,   582,  1185,  1265,   583,  1186,  1267,   584,  1187,
  1375,   585,  1348,  1377,   586,  1349,  1379,   587,  1350,  1436,
   588,  1422,  1438,   589,  1423,  1440,   590,  1424,  1473,   591,
  1467,  1475,   592,  1468,  1477,   593,  1469,    64,   445,   435,
   436,   437,   438,    68,    69,    70,    71,    72,   963,   964,
    73,    74,   314,   461,   316,   465,   738,   274,   103,   413,
   290,   155,   250,   391,   801,   893,   894,   414,  1058
};

static const short yypact[] = {   414,
-32768,-32768,  -103,-32768,   287,  2139,   909,    38,    65,    76,
    81,    90,   107,   122,  -106,   -61,   -14,-32768,-32768,-32768,
-32768,   155,   153,    28,   -15,    56,   106,   -19,   -21,   128,
   130,   250,   145,   134,   232,   282,   100,   309,   105,   166,
    93,    93,   240,   230,   242,   399,   332,   251,   405,   426,
   317,   253,    48,   271,   275,-32768,   273,   447,   449,   424,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   303,-32768,   316,   322,   324,
   351,   352,   386,   403,   418,   422,   425,   427,   430,   431,
   432,   433,   434,   435,   439,   442,   443,   909,   909,   909,
   909,  1476,-32768,-32768,  2178,-32768,-32768,-32768,-32768,-32768,
   444,   444,   474,-32768,   909,   909,   909,   909,   909,   559,
   575,   576,   588,   909,   909,   909,   909,   467,   909,   909,
   468,   909,   909,   909,   604,   909,   466,   470,   471,   604,
   472,   473,   477,   478,   480,   481,   484,    93,   469,    93,
    93,   909,   909,   -94,-32768,   -71,    93,   482,   485,   486,
-32768,   648,   604,-32768,-32768,    46,   604,   604,   909,   -43,
   909,-32768,   909,-32768,-32768,   651,   492,    53,   909,   909,
   909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
   909,   909,   909,   909,   909,   909,   909,   909,   496,   496,
   496,  2829,   909,   909,   909,   909,   909,   909,   909,   909,
   909,   909,   909,   909,   909,   909,   909,  1476,   494,   499,
   500,   501,   502,   503,   504,   517,   518,   519,   520,   521,
   522,   523,   524,   525,   526,   528,   532,   533,   534,   557,
   558,   560,   561,   562,   563,   564,   565,   566,   721,   568,
   569,   571,   959,  1012,  1153,  1364,  1392,-32768,-32768,-32768,
   573,  2857,  2327,  2885,  2913,   909,  2941,  2350,   909,  2373,
  2969,  2997,   909,  7501,   727,  3025,   909,   909,   909,   730,
   909,   909,   909,   909,   909,   909,   909,   -78,    54,-32768,
-32768,  4593,  4620,    93,    93,   377,   377,   -24,   909,   909,
   909,   307,-32768,   276,  2089,    93,-32768,   735,   736,  3053,
   664,   909,  3081,    41,   744,    43,-32768,   909,   163,   572,
  3109,  3137,  3165,  3193,  3221,  3249,  3277,  3305,  3333,  3361,
  4647,  3389,  3417,  3445,  3473,  3501,  3529,  4674,  4701,  4728,
   909,   909,-32768,  1904,   312,   312,   420,   420,   380,   380,
   380,   380,  -116,   -66,   496,   496,   496,   496,  4755,   741,
   742,   743,   746,   748,   749,   752,   753,   754,   757,   758,
   759,   760,   764,   767,   768,   770,   771,   772,   773,   774,
   775,   776,   624,   777,   778,   779,   780,   783,   782,-32768,
   189,   785,   786,   796,-32768,-32768,-32768,-32768,-32768,   909,
   784,   798,   795,   799,  3557,   800,   803,  3585,   805,   806,
   807,  1927,-32768,   188,   909,   808,  2396,  3613,  3641,   909,
  2419,  2442,  3669,  3697,  3725,  3753,  3781,    93,-32768,   632,
   909,   909,-32768,-32768,-32768,   641,  2197,-32768,   645,   909,
  4778,  4805,  4832,-32768,-32768,-32768,   909,-32768,   -68,   875,
   647,   649,   811,   654,  3809,   815,   652,   656,-32768,-32768,
-32768,   909,-32768,-32768,-32768,  3837,-32768,-32768,   909,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   909,
-32768,-32768,-32768,-32768,-32768,-32768,   909,   909,   909,   162,
   162,   909,   686,   658,   662,   663,   665,   667,   668,   669,
   671,   672,   673,   675,   677,   678,   679,   680,   681,   684,
   685,   687,   688,   690,   691,   695,   697,   698,   699,   700,
   701,   702,   716,   827,-32768,   693,-32768,   717,  3865,    93,
-32768,   604,   604,   847,   604,-32768,   885,-32768,   604,   604,
   909,   909,-32768,  1419,   737,   898,   899,   902,   836,   903,
   907,   908,   910,   947,   948,   949,   142,   909,  4859,  4886,
-32768,-32768,  2465,    93,    93,    93,  1442,-32768,   790,   791,
   792,   797,   802,   809,   816,   817,   818,   819,   820,   830,
   956,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   909,   909,   604,   909,   965,   604,    39,
   292,   966,  2004,  3893,  3921,  3949,  3977,  7501,   781,   963,
   909,   909,    93,   971,   972,   840,   998,   999,   604,   604,
  1000,    93,  1001,  1002,   604,   604,  1003,  1005,  1006,  1007,
  1008,   604,   421,   604,  1010,  1009,  1011,  1014,  1017,-32768,
  1015,   444,  1016,     2,    32,  1019,   604,  1020,   604,  1034,
  1035,  1955,  1927,-32768,-32768,   909,   604,   604,   604,-32768,
   331,   604,   604,   604,   604,   604,   604,   604,   909,  2168,
   909,   909,   853,  -104,   -91,   -87,-32768,  1187,   909,   909,
   909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
-32768,  4913,  4940,  1036,  4005,   249,   962,   158,   871,   873,
   909,-32768,   909,   877,-32768,-32768,-32768,-32768,   909,   883,
  4967,  4994,   -26,   887,   888,   890,   892,   891,   894,   896,
   900,   112,   901,   904,   905,   911,   912,   913,   914,   915,
   916,   919,-32768,-32768,-32768,-32768,-32768,   921,   929,   930,
   931,   939,   940,   942,-32768,   952,-32768,-32768,-32768,    93,
-32768,  1050,-32768,  1061,-32768,-32768,   909,  5021,  1064,  1065,
  1072,   909,   909,  1102,  1115,  1116,  1118,  1119,  1129,  1130,
  2488,   967,  4033,  2237,   377,    93,  1131,    93,  1132,    93,
     1,  1144,  5048,  5075,  5102,  5129,  5156,  5183,  5210,  5237,
  5264,  5291,  5318,  5345,   909,   909,-32768,  1154,   604,   604,
  1079,   604,     0,   694,   694,   909,   909,  1156,  1157,   909,
  1171,  4061,   218,  1173,  1476,  1175,   909,   604,  1194,  1198,
  1196,  1045,  1199,   421,  1200,  1201,   909,  1214,  1204,  1215,
  1216,  1220,   421,   909,   909,   909,   604,  1218,  1222,   421,
   909,  1223,  1224,  1225,   909,   444,    36,-32768,-32768,  7501,
   909,-32768,-32768,-32768,  1505,  1533,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1058,  1228,-32768,   909,-32768,  1062,   157,
-32768,   159,-32768,   198,-32768,   228,-32768,   909,   909,   909,
   909,   909,   909,   909,   909,   909,   909,   909,   909,  5372,
  5399,   249,   234,-32768,   197,  1059,  1160,  1063,  1233,   694,
   694,   909,  1562,    62,  1585,    69,  1617,    95,  1647,  1674,
-32768,-32768,  2191,  1227,-32768,  1234,   221,  1476,  1073,  5426,
  1075,-32768,  1076,-32768,  1077,-32768,  1078,-32768,  1080,  4089,
-32768,  1081,-32768,-32768,  1095,  1098,  4117,  5453,  4145,  1082,
-32768,  1099,  1100,  5480,  1103,  1101,-32768,  5507,  1104,-32768,
  5534,-32768,-32768,   377,-32768,  2267,-32768,   909,   909,   909,
  1277,  1117,   -17,-32768,  5561,  5588,  5615,  5642,  5669,  5696,
  5723,  5750,  5777,  5804,  5831,  5858,   909,   909,  1207,   604,
-32768,-32768,   604,   909,    55,-32768,  2801,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1113,    47,-32768,-32768,-32768,
  2518,  1283,   249,   421,  1288,   909,  1287,   421,  1294,  1291,
  1295,  1296,  1297,   909,  1298,   604,  1310,  1312,   909,  1316,
  1322,   909,  1324,  1325,  1161,   909,-32768,  2541,  2564,  2587,
-32768,   604,  1328,-32768,   909,   909,   909,   909,   909,   909,
   909,   909,   909,   909,   909,   909,  2610,  2633,  1165,-32768,
  1163,  1703,   163,  1166,  1332,  1168,  1170,  1335,   909,-32768,
  1174,  1177,  1178,  5885,-32768,  1169,-32768,  1179,-32768,-32768,
-32768,  4173,-32768,  1191,-32768,-32768,  4201,  1192,-32768,  4229,
  1195,  1197,-32768,  2656,  1337,  1341,    24,  1203,-32768,  5912,
  5939,  5966,  5993,  6020,  6047,  6074,  6101,  6128,  4257,  4285,
  4313,  1354,  1356,   604,   604,-32768,   909,   241,  1282,   237,
  6155,-32768,  1476,   421,   421,   421,   421,  1360,  1361,  1362,
   421,  1363,  1366,  1367,  1369,  1370,-32768,-32768,-32768,-32768,
   228,   604,   909,   909,   909,   909,   909,   909,   909,   909,
   909,-32768,-32768,-32768,-32768,-32768,  1208,  1213,  2214,   483,
   694,   694,   909,   909,   909,   909,  1217,   909,   909,  1476,
  1226,  1229,  1219,  1221,-32768,-32768,-32768,  1231,-32768,-32768,
-32768,  1232,  1235,    -3,  1236,  6182,  6209,  6236,  6263,  6290,
  6317,  6344,  6371,  6398,  1239,  1240,  1242,   604,  1308,  1230,
  1385,  1726,    97,  1749,    99,  1772,   101,  1802,  1829,  1858,
  1881,  1388,  2679,  6425,  2709,   421,   421,  1387,  1389,   421,
  1391,  1396,  1407,   604,   909,   909,   909,   909,   909,   909,
   909,   909,   909,   909,   909,   909,  1243,  1245,  1412,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   909,   909,  1249,  1250,-32768,-32768,  1257,  1258,
  1259,-32768,  1260,  6452,  6479,  6506,  6533,  6560,  6587,  6614,
  6641,  6668,   306,  7501,   361,  7501,   362,  7501,  1350,   909,
   221,  2297,  1476,   421,   604,  1423,  1426,  1427,  1428,   909,
   909,   909,   909,   909,   909,   909,   909,   909,   909,  1429,
   909,  1434,   909,  1436,  1275,  6695,   909,-32768,  1476,  1278,
  1279,-32768,-32768,-32768,-32768,  6722,  6749,  6776,  6803,  6830,
  6857,  4341,  4369,  4397,  7501,-32768,  7501,-32768,  7501,-32768,
   909,   909,  2732,  7478,   421,   604,   909,   909,   909,   909,
   909,   909,-32768,-32768,-32768,  6884,  2755,-32768,  1309,  1281,
  1284,  6911,  6938,  6965,  6992,  7019,  7046,  1285,  1286,  1289,
   909,  1445,-32768,   604,   421,   909,   909,   909,   909,   909,
   909,   909,   909,   909,  2778,-32768,  1290,  1292,  7073,  7100,
  7127,  7154,  7181,  7208,   374,  7501,   375,  7501,   381,  7501,
  1447,   604,  1448,   909,   909,   909,   909,   909,   909,   909,
  1451,   909,  1456,   909,  1460,-32768,  1299,-32768,  7235,  7262,
  7289,  4425,  4453,  4481,  7501,-32768,  7501,-32768,  7501,-32768,
   604,   909,   909,   909,-32768,-32768,-32768,  1300,  7316,  7343,
  7370,  1301,  1303,  1305,   604,   909,   909,   909,   909,   909,
   909,  1302,  7397,  7424,  7451,   389,  7501,   390,  7501,   391,
  7501,   421,   909,   909,   909,   909,  1463,   909,  1471,   909,
  1472,  1313,  4509,  4537,  4565,  7501,-32768,  7501,-32768,  7501,
-32768,  1475,-32768,-32768,-32768,-32768,  1314,  1342,  1343,   909,
   909,   909,   396,  7501,   398,  7501,   415,  7501,   909,  1477,
   909,  1508,   909,  1509,  7501,-32768,  7501,-32768,  7501,-32768,
  1525,  1526,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1521,-32768,
   961,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1524,  1534,
  -291,   299,  1535,-32768,-32768,-32768,-32768,-32768,   400,  -961,
-32768,-32768,-32768,  1237,-32768,-32768,  -784,    -7,-32768,  1013,
   -10,-32768,  -111,-32768,  -853,   766,   428,-32768,-32768
};


#define	YYLAST		7665


static const short yytable[] = {   102,
   251,  1034,    75,   898,   899,   439,   875,   748,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,  1130,
   154,   156,   122,     7,   131,   311,   128,   749,   979,   927,
   961,   950,   698,   104,   457,   962,   457,   217,   936,   306,
  1056,   294,   295,  -247,   961,   943,   319,   429,  1053,   962,
   111,   294,   295,   776,   294,   295,   777,   989,   294,   295,
   458,   105,   458,   750,   991,   296,   778,   294,   295,   779,
   780,   106,   170,   781,   294,   295,   107,   294,   295,   428,
   199,   200,   201,   202,   218,   108,   149,   217,   297,   699,
   993,   568,  1232,  -246,  1234,   112,  1236,   253,   254,   255,
   256,   257,   109,   320,   430,  1054,   262,   263,   264,   265,
   700,   267,   268,   312,   270,   271,   272,   110,   276,   294,
   295,   294,   295,   140,   141,   144,   142,   288,   145,   146,
   291,   147,   819,   440,   292,   293,   298,   129,   132,  1061,
   130,   124,   113,  1033,   125,   900,   901,   294,   295,   115,
   114,   310,   100,   313,   803,   315,   902,  1213,   137,   153,
   876,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   294,   295,  1131,   123,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   459,  1034,   463,   171,   307,  1057,   294,   295,  1062,
    75,    76,   126,  1066,   294,   295,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,  1150,   150,   151,
   294,   295,   294,   295,   294,   295,   294,   295,   405,   152,
   158,   408,   153,   159,   160,   412,   138,   294,   295,   417,
   418,   419,   127,   421,   422,   423,   424,   425,   426,   427,
   828,   446,   447,   433,   434,   961,    -1,     8,   135,     9,
   962,   441,   442,   443,   133,   449,   134,   294,   295,   701,
   116,   117,   118,   119,   455,   804,   805,   806,   807,   669,
   466,   136,   294,   295,   294,   295,   139,   120,   121,   214,
   215,   216,   808,   809,   958,   217,   959,   467,   468,  1161,
  1162,  1163,  1164,   490,   491,   148,  1168,    25,    26,    27,
    28,    29,    30,    31,    32,   143,    33,   167,    35,    36,
   168,    38,    39,   294,   295,   542,   524,   525,   543,   203,
   204,   205,   206,   207,   980,   960,   163,   982,    51,   208,
   209,   210,   211,   212,   213,   214,   215,   216,   762,   763,
   100,   217,    52,    53,   101,   999,  1000,   273,  1151,  1152,
  1153,  1154,   529,    10,    11,    12,    13,    14,    15,    16,
    17,   980,   981,   162,  1158,  1155,  1156,   544,   178,   157,
   165,   161,   549,    -7,    -7,   799,    -7,   557,   800,   169,
   164,  1245,  1246,   559,   560,  1249,    40,    41,    42,    43,
   166,    45,   563,   203,   204,   205,   206,   207,    60,   567,
   172,   173,   174,   208,   209,   210,   211,   341,   342,   214,
   215,   216,   175,   176,   601,   217,   206,   207,   177,   302,
   702,   603,   305,   208,   209,   210,   211,   341,   342,   214,
   215,   216,   604,  1289,   178,   217,  1290,   444,   252,   605,
   606,   607,   179,   869,   608,    75,   898,  1191,   180,  1300,
   181,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   733,   734,   735,   736,   737,   182,   183,   644,
    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,  1291,  1293,
   746,  1292,  1294,   652,   653,   341,   342,   214,   215,   216,
  1340,  1390,  1392,   217,  1391,  1393,     1,     2,  1394,     3,
   670,  1395,   184,   674,   675,   676,  1446,  1448,  1450,  1447,
  1449,  1451,   275,  1479,   258,  1481,  1480,   280,  1482,   185,
  1368,   208,   209,   210,   211,   341,   342,   214,   215,   216,
   259,   260,  1483,   217,   186,  1484,   692,   693,   187,   695,
   304,   188,   261,   189,   308,   309,   190,   191,   192,   193,
   194,   195,   713,   711,   712,   196,    75,    76,   197,   198,
   249,   722,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,   266,   269,   277,   278,   279,   900,   901,
   289,   281,   282,   283,   284,   100,   285,   286,   758,   902,
   287,   299,   153,   303,   300,   301,   317,  1452,   318,   217,
   360,   771,  1025,   773,   774,   361,   362,   363,   364,   365,
   366,   783,   784,   785,   786,   787,   788,   789,   790,   791,
   792,   793,   794,   367,   368,   369,   370,   371,   372,   373,
   374,   375,   376,   812,   377,   813,    75,   898,   378,   379,
   380,   815,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,   381,   382,   390,   383,   384,   385,   386,
   387,   388,   389,   415,   949,   392,   420,   393,   394,   847,
   400,   451,   452,   454,   469,   494,   495,   496,   517,   850,
   497,   462,   498,   499,   855,   856,   500,   501,   502,    98,
    99,   503,   504,   505,   506,   870,   100,   872,   507,   874,
   101,   508,   509,   273,   510,   511,   512,   513,   514,   515,
   516,   518,   519,   520,   521,   522,   523,   890,   891,   526,
   530,   527,   904,   906,   908,   903,   905,   907,   909,   910,
   528,   532,   913,   531,   558,   533,   535,   918,   536,   920,
   538,   561,   539,   540,   545,   562,   594,   596,   595,   930,
   597,   599,   123,   600,   609,   610,   937,   938,   939,   611,
   612,   640,   613,   944,   614,   615,   616,   948,   617,   618,
   619,   660,   620,   951,   621,   622,   623,   624,   625,   900,
   901,   626,   627,   647,   628,   629,   100,   630,   631,   956,
   902,   641,   632,   153,   633,   634,   635,   636,   637,   638,
   965,   966,   967,   968,   969,   970,   971,   972,   973,   974,
   975,   976,   661,   639,   642,   203,   204,   205,   206,   207,
   291,   649,   199,   200,   987,   208,   209,   210,   211,   341,
   342,   214,   215,   216,   657,   658,   656,   217,   659,   662,
  1001,    75,    76,   663,   664,   709,   665,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   569,   570,
   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,
  1028,  1029,  1030,   666,   667,   668,   679,   680,   681,   645,
   646,   691,   648,   682,   395,   710,   650,   651,   683,  1047,
  1048,   696,   703,   714,   715,   684,  1052,   203,   204,   205,
   206,   207,   685,   686,   687,   688,   689,   208,   209,   210,
   211,   341,   342,   214,   215,   216,   690,   716,  1064,   217,
   717,   718,   721,   723,   724,   727,  1072,   728,   729,   730,
   731,  1077,   740,   741,  1080,   742,   743,   396,  1084,   744,
   745,   747,   775,   694,   751,   753,   697,  1090,  1091,  1092,
  1093,  1094,  1095,  1096,  1097,  1098,  1099,  1100,  1101,   755,
   756,   797,   802,   810,   811,   581,   719,   720,   814,  1111,
   816,  1113,   725,   726,   820,   848,   821,   822,   824,   732,
   823,   739,   825,   826,    98,    99,   849,   827,   829,   852,
   853,   100,   830,   831,   752,   101,   754,   854,   832,   833,
   834,   835,   836,   837,   759,   760,   761,   838,   839,   764,
   765,   766,   767,   768,   769,   770,   840,   841,   842,  1149,
   203,   204,   205,   206,   207,  1160,   843,   857,   844,   845,
   208,   209,   210,   211,   341,   342,   214,   215,   216,   846,
   858,   859,   217,   860,   861,  1176,  1177,  1178,  1179,  1180,
  1181,  1182,  1183,  1184,   862,   863,   871,   873,   865,  1193,
  1195,  1197,  1192,  1194,  1196,  1198,  1199,  1200,  1201,   877,
  1203,  1204,  1205,   203,   204,   205,   206,   207,   397,   896,
   892,   911,   912,   208,   209,   210,   211,   341,   342,   214,
   215,   216,    75,  1110,   914,   217,   917,   919,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,   922,
   923,   924,   925,   929,   926,   928,   932,  1254,  1255,  1256,
  1257,  1258,  1259,  1260,  1261,  1262,  1264,  1266,  1268,   931,
   933,   934,   935,   941,   942,   945,   946,   954,   983,   897,
   947,   955,   957,   997,   985,  1272,  1273,   984,   986,   998,
   916,  1002,  1004,  1005,  1006,   921,  1007,  1008,  1010,  1016,
   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
   579,   580,  1296,  1011,   940,  1299,  1012,  1017,  1018,  1021,
  1020,  1023,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,
  1314,  1315,  1031,  1317,  1055,  1319,  1032,  1049,  1060,  1323,
  1063,  1324,  1065,  1068,   203,   204,   205,   206,   207,  1067,
  1069,  1070,  1071,  1073,   208,   209,   210,   211,   341,   342,
   214,   215,   216,  1336,  1337,  1075,   217,  1076,  1078,  1342,
  1343,  1344,  1345,  1346,  1347,    98,    99,  1079,  1081,  1082,
  1105,  1083,   100,  1089,  1104,  1108,   101,  1118,  1107,  1109,
  1112,  1114,  1128,  1365,  1115,  1116,  1129,  1119,  1369,  1370,
  1371,  1372,  1373,  1374,  1376,  1378,  1380,   782,  1121,  1145,
  1123,  1146,  1125,  1157,  1126,  1165,  1166,  1167,  1169,   398,
  1132,  1170,  1171,  1172,  1173,  1188,  1399,  1400,  1401,  1402,
  1403,  1404,  1405,  1189,  1407,  1228,  1409,  1208,  1202,  1209,
  1230,  1241,  1247,  1206,  1248,  1250,  1207,   399,  1210,  1211,
  1251,  1229,  1212,  1214,  1419,  1420,  1421,  1050,  1224,  1225,
  1051,  1226,  1252,  1269,  1270,  1271,  1274,  1275,  1433,  1434,
  1435,  1437,  1439,  1441,   655,  1276,  1277,  1295,  1302,  1278,
  1279,  1303,  1304,  1305,  1316,  1453,  1454,  1455,  1456,  1318,
  1458,  1320,  1460,  1074,  1321,  1325,  1326,   677,  1354,  1353,
  1366,  1355,  1396,  1398,  1362,  1363,  1406,  1382,  1364,  1088,
  1383,  1408,  1474,  1476,  1478,  1410,  1411,  1425,  1457,  1442,
  1429,  1485,  1430,  1487,  1431,  1489,  1459,  1461,    75,    76,
  1466,  1462,  1486,  1470,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,   203,   204,   205,   206,   207,
   952,  1471,  1472,  1488,  1490,   208,   209,   210,   211,   341,
   342,   214,   215,   216,  1492,  1493,    62,   217,   678,    65,
  1174,  1147,  1148,   203,   204,   205,   206,   207,   953,    66,
    67,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,   464,     0,   654,   217,     0,     0,     0,  1175,
   203,   204,   205,   206,   207,   895,     0,   988,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,   203,   204,   205,   206,   207,     0,     0,
   990,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1227,     0,   203,   204,   205,
   206,   207,   992,     0,     0,     0,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,     0,     0,   100,   217,
     0,  1253,   101,     0,     0,     0,   203,   204,   205,   206,
   207,     0,   994,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,     0,   203,   204,   205,   206,   207,   995,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,     0,  1301,   203,   204,   205,   206,   207,  1106,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,   203,   204,   205,   206,
   207,  1231,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,  1341,  1233,     0,     0,     0,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,  1235,     0,     0,
   217,  1367,     0,     0,     0,     0,     0,     0,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,  1237,     0,  1397,
   217,     0,     0,     0,     0,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,  1238,     0,     0,   217,  1418,     0,
     0,     0,     0,     0,   203,   204,   205,   206,   207,     0,
     0,     0,  1432,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,  1239,     0,     0,   217,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,  1240,     0,     0,   217,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,   492,   217,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,   541,   217,     0,     0,     0,     0,
     0,     0,     0,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,   757,     0,     0,   217,     0,     0,     0,     0,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,     0,     0,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,     0,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,    25,
    26,    27,    28,    29,    30,    31,    32,     0,    33,     0,
    35,    36,     0,    38,    39,     0,     0,     0,    -3,    22,
     0,     0,    23,     0,     0,   203,   204,   205,   206,   207,
    51,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,    52,    53,     0,   217,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   704,    33,    34,
    35,    36,    37,    38,    39,     0,     0,     0,    40,    41,
    42,    43,    44,    45,     0,    46,    47,    48,    49,    50,
    51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   219,     0,     0,    52,    53,     0,     0,     0,     0,
    60,    54,    55,    56,    57,    58,    59,    25,    26,    27,
    28,    29,    30,    31,    32,     0,    33,     0,    35,    36,
     0,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    51,   448,
     0,     0,     0,     0,     0,     0,   220,   221,   222,     0,
    60,     0,    52,    53,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,     0,     0,     0,     0,     0,     0,
     0,     0,   233,   234,   235,   236,   237,   238,   239,   240,
   241,   242,     0,   243,   244,   245,   246,   247,   248,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,    60,     0,
     0,   217,   203,   204,   205,   206,   207,     0,     0,     0,
     0,   772,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,   203,   204,   205,   206,   207,
     0,     0,     0,     0,   996,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,   203,   204,
   205,   206,   207,     0,     0,     0,     0,  1190,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,   867,     0,     0,   868,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1026,     0,     0,  1027,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1297,     0,     0,  1298,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,   203,   204,   205,   206,   207,     0,   402,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,   203,   204,   205,   206,   207,     0,
   407,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,   203,   204,   205,
   206,   207,     0,   409,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
   203,   204,   205,   206,   207,     0,   546,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,   203,   204,   205,   206,   207,     0,   550,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,   203,   204,   205,   206,
   207,     0,   551,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,   203,
   204,   205,   206,   207,     0,   673,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,  1059,     0,     0,     0,     0,     0,   864,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,   203,   204,   205,   206,   207,
     0,  1085,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,   203,   204,
   205,   206,   207,     0,  1086,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,   203,   204,   205,   206,   207,     0,  1087,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,   203,   204,   205,   206,   207,     0,
  1102,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,   203,   204,   205,
   206,   207,     0,  1103,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
   203,   204,   205,   206,   207,     0,  1127,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,  1244,     0,     0,     0,     0,     0,  1242,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,   203,   204,   205,   206,
   207,     0,  1338,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,   203,
   204,   205,   206,   207,     0,  1352,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,   203,   204,   205,   206,   207,     0,  1381,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,   431,   343,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   343,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   401,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   403,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   404,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   406,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   410,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   411,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   416,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   453,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   456,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   470,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   471,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   472,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   473,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   474,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   475,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   476,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   477,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   478,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   479,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   481,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   482,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   483,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   484,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   485,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   486,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   534,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   537,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   547,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   548,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   552,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   553,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   554,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   555,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   556,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   598,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   602,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   643,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   705,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   706,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,   707,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,   708,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,   798,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,   866,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,   915,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,  1009,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,  1013,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,  1015,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,  1120,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,  1122,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,  1124,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,  1142,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,  1143,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,  1144,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,  1333,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,  1334,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,  1335,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,  1415,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
     0,  1416,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,     0,  1417,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,     0,  1463,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,     0,  1464,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,     0,  1465,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
   431,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,   432,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,   480,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,   487,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,   488,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,   493,     0,     0,   489,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,   564,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,   565,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,   566,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,   671,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,   672,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
   795,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,   796,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,   817,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,   818,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,   851,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,   878,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,   879,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,   880,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,   881,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,   882,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
   883,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,   884,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,   885,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,   886,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,   887,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,   888,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,   889,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,   977,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,   978,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1003,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1014,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1019,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1022,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1024,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1035,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1036,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1037,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1038,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1039,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1040,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1041,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1042,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1043,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1044,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1045,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1046,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1117,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1133,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1134,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1135,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1136,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1137,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1138,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1139,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1140,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1141,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1159,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1215,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1216,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1217,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1218,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1219,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1220,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1221,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1222,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1223,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1243,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1280,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1281,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1282,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1283,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1284,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1285,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1286,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1287,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1288,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1322,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1327,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1328,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1329,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1330,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1331,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1332,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1351,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1356,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1357,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1358,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1359,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1360,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1361,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1384,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1385,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1386,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1387,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,     0,  1388,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,     0,     0,     0,  1389,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,   208,   209,   210,   211,
   341,   342,   214,   215,   216,     0,     0,     0,   217,     0,
     0,     0,  1412,   203,   204,   205,   206,   207,     0,     0,
     0,     0,     0,   208,   209,   210,   211,   341,   342,   214,
   215,   216,     0,     0,     0,   217,     0,     0,     0,  1413,
   203,   204,   205,   206,   207,     0,     0,     0,     0,     0,
   208,   209,   210,   211,   341,   342,   214,   215,   216,     0,
     0,     0,   217,     0,     0,     0,  1414,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   341,   342,   214,   215,   216,     0,     0,     0,   217,
     0,     0,     0,  1426,   203,   204,   205,   206,   207,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   341,   342,
   214,   215,   216,     0,     0,     0,   217,     0,     0,     0,
  1427,   203,   204,   205,   206,   207,     0,     0,     0,     0,
     0,   208,   209,   210,   211,   341,   342,   214,   215,   216,
     0,     0,     0,   217,     0,     0,     0,  1428,   203,   204,
   205,   206,   207,     0,     0,     0,     0,     0,   208,   209,
   210,   211,   341,   342,   214,   215,   216,     0,     0,     0,
   217,     0,     0,     0,  1443,   203,   204,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   341,
   342,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     0,  1444,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217,     0,     0,  1339,  1445,   203,
   204,   205,   206,   207,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   341,   342,   214,   215,   216,     0,     0,
     0,   217,   203,   204,   205,   206,   207,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   341,   342,   214,   215,
   216,     0,     0,     0,   217
};

static const short yycheck[] = {     7,
   112,   963,     3,     4,     5,   297,     6,     6,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,     6,
    41,    42,     5,   137,    56,    79,    56,     6,   892,   824,
    58,     6,     4,     6,     4,    63,     4,   164,   833,     4,
     4,   156,   157,   170,    58,   840,     4,     4,     4,    63,
   167,   156,   157,   168,   156,   157,   171,     6,   156,   157,
    30,     7,    30,    42,     6,   170,   168,   156,   157,   171,
   168,     6,    35,   171,   156,   157,     6,   156,   157,   168,
    98,    99,   100,   101,   102,     6,     4,   164,   170,    61,
     6,   170,     6,   170,     6,   167,     6,   115,   116,   117,
   118,   119,     6,    61,    61,    61,   124,   125,   126,   127,
    82,   129,   130,   167,   132,   133,   134,     6,   136,   156,
   157,   156,   157,    34,    35,    31,    37,   148,    34,    35,
   151,    37,   169,   168,   152,   153,   157,   167,   170,  1003,
   170,   167,   167,   171,   170,   156,   157,   156,   157,     7,
     6,   169,   163,   171,     7,   173,   167,   171,    35,   170,
   170,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   156,   157,   170,   167,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   171,  1174,   171,   167,   170,   170,   156,   157,  1004,
     3,     4,   167,  1008,   156,   157,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,     7,   156,   157,
   156,   157,   156,   157,   156,   157,   156,   157,   266,   167,
    31,   269,   170,    34,    35,   273,    35,   156,   157,   277,
   278,   279,   167,   281,   282,   283,   284,   285,   286,   287,
   169,     6,     7,   294,   295,    58,     0,     1,    39,     3,
    63,   299,   300,   301,   167,   306,   167,   156,   157,     8,
   148,   149,   150,   151,   312,   148,   149,   150,   151,   168,
   318,   167,   156,   157,   156,   157,    35,   165,   166,   158,
   159,   160,   165,   166,   168,   164,   168,   165,   166,  1114,
  1115,  1116,  1117,   341,   342,   170,  1121,    31,    32,    33,
    34,    35,    36,    37,    38,    37,    40,    31,    42,    43,
    34,    45,    46,   156,   157,   168,   168,   169,   171,   142,
   143,   144,   145,   146,   168,   168,    35,   171,    62,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    48,    49,
   163,   164,    76,    77,   167,   165,   166,   170,   148,   149,
   150,   151,   400,   107,   108,   109,   110,   111,   112,   113,
   114,   168,   169,     5,   168,   165,   166,   415,   172,   170,
     6,   170,   420,     0,     1,   167,     3,   428,   170,   167,
   170,  1206,  1207,   431,   432,  1210,    50,    51,    52,    53,
     5,    55,   440,   142,   143,   144,   145,   146,   132,   447,
   170,   167,   170,   152,   153,   154,   155,   156,   157,   158,
   159,   160,     6,     5,   462,   164,   145,   146,    35,   161,
   169,   469,   164,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   480,   168,   172,   164,   171,   171,     5,   487,
   488,   489,   167,   775,   492,     3,     4,     5,   167,  1274,
   167,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    92,    93,    94,    95,    96,   167,   167,   530,
   107,   108,   109,   110,   111,   112,   113,   114,   168,   168,
   642,   171,   171,   541,   542,   156,   157,   158,   159,   160,
  1325,   168,   168,   164,   171,   171,   133,   134,   168,   136,
   558,   171,   167,   564,   565,   566,   168,   168,   168,   171,
   171,   171,   135,   168,     6,   168,   171,   140,   171,   167,
  1355,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     6,     6,   168,   164,   167,   171,   594,   595,   167,   597,
   163,   167,     5,   167,   167,   168,   167,   167,   167,   167,
   167,   167,   613,   611,   612,   167,     3,     4,   167,   167,
   167,   622,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,   167,   167,   170,   167,   167,   156,   157,
   172,   170,   170,   167,   167,   163,   167,   167,   656,   167,
   167,   170,   170,     6,   170,   170,     6,  1442,   167,   164,
   167,   669,   954,   671,   672,   167,   167,   167,   167,   167,
   167,   679,   680,   681,   682,   683,   684,   685,   686,   687,
   688,   689,   690,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   701,   167,   703,     3,     4,   167,   167,
   167,   709,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,   167,   167,     5,   167,   167,   167,   167,
   167,   167,   167,     7,   846,   168,     7,   169,   168,   750,
   168,     7,     7,    80,   173,     5,     5,     5,   125,   757,
     5,     8,     5,     5,   762,   763,     5,     5,     5,   156,
   157,     5,     5,     5,     5,   776,   163,   778,     5,   780,
   167,     5,     5,   170,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     3,     5,   795,   796,     5,
     7,     6,   803,   804,   805,   803,   804,   805,   806,   807,
     5,     7,   810,     6,   173,     7,     7,   815,     6,   817,
     6,   171,     7,     7,     7,   171,   170,     7,   170,   827,
   167,     7,   167,   172,   139,   168,   834,   835,   836,   168,
   168,     5,   168,   841,   168,   168,   168,   845,   168,   168,
   168,     6,   168,   851,   168,   168,   168,   168,   168,   156,
   157,   168,   168,     7,   168,   168,   163,   168,   168,   867,
   167,   169,   168,   170,   168,   168,   168,   168,   168,   168,
   878,   879,   880,   881,   882,   883,   884,   885,   886,   887,
   888,   889,    47,   168,   168,   142,   143,   144,   145,   146,
   901,     7,   900,   901,   902,   152,   153,   154,   155,   156,
   157,   158,   159,   160,     7,     7,   170,   164,     7,     7,
   918,     3,     4,     7,     7,   135,     7,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
   958,   959,   960,     7,     7,     7,   167,   167,   167,   532,
   533,     6,   535,   167,     6,     3,   539,   540,   167,   977,
   978,     7,     7,     3,     3,   167,   984,   142,   143,   144,
   145,   146,   167,   167,   167,   167,   167,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   167,   158,  1006,   164,
     3,     3,     3,     3,     3,     3,  1014,     3,     3,     3,
     3,  1019,     3,     5,  1022,     5,     3,     6,  1026,     3,
     6,     6,   170,   596,     6,     6,   599,  1035,  1036,  1037,
  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,  1046,     6,
     6,     6,    81,   173,   172,   171,   619,   620,   172,  1057,
   168,  1059,   625,   626,   168,     6,   169,   168,   168,   632,
   169,   634,   169,   168,   156,   157,     6,   168,   168,     6,
     6,   163,   169,   169,   647,   167,   649,     6,   168,   168,
   168,   168,   168,   168,   657,   658,   659,   169,   168,   662,
   663,   664,   665,   666,   667,   668,   168,   168,   168,  1107,
   142,   143,   144,   145,   146,  1113,   168,     6,   169,   168,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   168,
     6,     6,   164,     6,     6,  1133,  1134,  1135,  1136,  1137,
  1138,  1139,  1140,  1141,     6,     6,     6,     6,   172,  1150,
  1151,  1152,  1150,  1151,  1152,  1153,  1154,  1155,  1156,     6,
  1158,  1159,  1160,   142,   143,   144,   145,   146,     6,    81,
     7,     6,     6,   152,   153,   154,   155,   156,   157,   158,
   159,   160,     3,     4,     4,   164,     4,     3,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,     6,
     3,     6,   158,     3,     6,     6,     3,  1215,  1216,  1217,
  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1226,     6,
     6,     6,     3,     6,     3,     3,     3,   170,   170,   802,
     6,     4,   171,     7,   172,  1243,  1244,    78,     6,     6,
   813,   169,   168,   168,   168,   818,   169,   168,   168,   168,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,  1270,   169,   837,  1273,   169,   169,   169,   169,
   168,   168,  1280,  1281,  1282,  1283,  1284,  1285,  1286,  1287,
  1288,  1289,     6,  1291,   172,  1293,   170,    81,     6,  1297,
     3,  1299,     6,     3,   142,   143,   144,   145,   146,     6,
     6,     6,     6,     6,   152,   153,   154,   155,   156,   157,
   158,   159,   160,  1321,  1322,     6,   164,     6,     3,  1327,
  1328,  1329,  1330,  1331,  1332,   156,   157,     6,     5,     5,
   168,   171,   163,     6,   170,     4,   167,   169,   173,   172,
     6,   168,     6,  1351,   168,   168,     6,   169,  1356,  1357,
  1358,  1359,  1360,  1361,  1362,  1363,  1364,   171,   168,     6,
   169,     6,   168,    82,   168,     6,     6,     6,     6,     6,
   168,     6,     6,     5,     5,   168,  1384,  1385,  1386,  1387,
  1388,  1389,  1390,   171,  1392,    78,  1394,   169,   172,   169,
     6,     4,     6,   168,     6,     5,   168,     6,   168,   168,
     5,   172,   168,   168,  1412,  1413,  1414,   980,   170,   170,
   983,   170,     6,   171,   170,     4,   168,   168,  1426,  1427,
  1428,  1429,  1430,  1431,     6,   169,   169,    78,     6,   171,
   171,     6,     6,     6,     6,  1443,  1444,  1445,  1446,     6,
  1448,     6,  1450,  1016,   170,   168,   168,     6,   168,   141,
     6,   168,     6,     6,   170,   170,     6,   168,   170,  1032,
   169,     6,  1470,  1471,  1472,     6,   168,   168,     6,   168,
   170,  1479,   170,  1481,   170,  1483,     6,     6,     3,     4,
     6,   169,     6,   170,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   142,   143,   144,   145,   146,
     6,   170,   170,     6,     6,   152,   153,   154,   155,   156,
   157,   158,   159,   160,     0,     0,     6,   164,   568,     6,
  1131,  1104,  1105,   142,   143,   144,   145,   146,     6,     6,
     6,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   316,    -1,   542,   164,    -1,    -1,    -1,  1132,
   142,   143,   144,   145,   146,   800,    -1,     6,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,   142,   143,   144,   145,   146,    -1,    -1,
     6,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1188,    -1,   142,   143,   144,
   145,   146,     6,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,   163,   164,
    -1,  1214,   167,    -1,    -1,    -1,   142,   143,   144,   145,
   146,    -1,     6,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,    -1,   142,   143,   144,   145,   146,     6,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,    -1,  1275,   142,   143,   144,   145,   146,     6,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,   142,   143,   144,   145,
   146,     6,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,  1326,     6,    -1,    -1,    -1,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,     6,    -1,    -1,
   164,  1354,    -1,    -1,    -1,    -1,    -1,    -1,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,     6,    -1,  1382,
   164,    -1,    -1,    -1,    -1,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,     6,    -1,    -1,   164,  1411,    -1,
    -1,    -1,    -1,    -1,   142,   143,   144,   145,   146,    -1,
    -1,    -1,  1425,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,     6,    -1,    -1,   164,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,     6,    -1,    -1,   164,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,     8,   164,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,     8,   164,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,     8,    -1,    -1,   164,    -1,    -1,    -1,    -1,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    31,
    32,    33,    34,    35,    36,    37,    38,    -1,    40,    -1,
    42,    43,    -1,    45,    46,    -1,    -1,    -1,     0,     1,
    -1,    -1,     4,    -1,    -1,   142,   143,   144,   145,   146,
    62,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    76,    77,    -1,   164,    30,    31,
    32,    33,    34,    35,    36,    37,    38,   174,    40,    41,
    42,    43,    44,    45,    46,    -1,    -1,    -1,    50,    51,
    52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
   132,    83,    84,    85,    86,    87,    88,    31,    32,    33,
    34,    35,    36,    37,    38,    -1,    40,    -1,    42,    43,
    -1,    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,   171,
    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    -1,
   132,    -1,    76,    77,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,   127,   128,   129,   130,   131,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   132,    -1,
    -1,   164,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,   174,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,   174,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,   174,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,    -1,    -1,   171,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,    -1,    -1,   171,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,    -1,    -1,   171,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,   142,   143,   144,   145,   146,    -1,   171,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,   142,   143,   144,   145,   146,    -1,
   171,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,   142,   143,   144,
   145,   146,    -1,   171,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
   142,   143,   144,   145,   146,    -1,   171,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,   142,   143,   144,   145,   146,    -1,   171,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,   142,   143,   144,   145,
   146,    -1,   171,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,   142,
   143,   144,   145,   146,    -1,   171,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,   135,    -1,    -1,    -1,    -1,    -1,   171,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,   142,   143,   144,   145,   146,
    -1,   171,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,   142,   143,
   144,   145,   146,    -1,   171,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,   142,   143,   144,   145,   146,    -1,   171,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,   142,   143,   144,   145,   146,    -1,
   171,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,   142,   143,   144,
   145,   146,    -1,   171,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
   142,   143,   144,   145,   146,    -1,   171,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,   135,    -1,    -1,    -1,    -1,    -1,   171,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,   142,   143,   144,   145,
   146,    -1,   171,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,   142,
   143,   144,   145,   146,    -1,   171,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,   142,   143,   144,   145,   146,    -1,   171,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
    -1,   169,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,    -1,   169,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,    -1,   169,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,   138,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,
   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,
    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,
    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,
   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,   144,
   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,   164,
    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,    -1,
    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,    -1,
   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
    -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,   164,    -1,    -1,    -1,   168,   142,   143,
   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,
   164,    -1,    -1,    -1,   168,   142,   143,   144,   145,   146,
    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,
   157,   158,   159,   160,    -1,    -1,    -1,   164,    -1,    -1,
    -1,   168,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164,    -1,    -1,   140,   168,   142,
   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,    -1,
    -1,   164,   142,   143,   144,   145,   146,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
   160,    -1,    -1,    -1,   164
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 150 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 164 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 171 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 188 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 189 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 190 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 191 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 196 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 201 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 212 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 215 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 219 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 225 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 231 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 238 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 244 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 248 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 252 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 259 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 263 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 268 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 272 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 276 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 280 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 284 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 288 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 292 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 296 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 308 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 312 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 316 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 320 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 324 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 329 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 359 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 362 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 368 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 369 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 379 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 384 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 69:
#line 389 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 70:
#line 400 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 71:
#line 404 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 72:
#line 411 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 85:
#line 430 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 432 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 437 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 88:
#line 442 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 89:
#line 449 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 451 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 456 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 92:
#line 461 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 93:
#line 468 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 470 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 475 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 96:
#line 480 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 97:
#line 487 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 489 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 495 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 100:
#line 501 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 101:
#line 508 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 510 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 516 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 104:
#line 522 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 105:
#line 529 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 531 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 537 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 108:
#line 543 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 109:
#line 550 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 552 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 559 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 112:
#line 568 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 113:
#line 575 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 577 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 584 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 116:
#line 593 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 117:
#line 600 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 602 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 609 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 120:
#line 618 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 121:
#line 625 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 627 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 635 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 124:
#line 644 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 125:
#line 651 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 653 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 661 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 128:
#line 670 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 129:
#line 677 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 679 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 131:
#line 687 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 132:
#line 696 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 133:
#line 709 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 134:
#line 715 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 135:
#line 723 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 136:
#line 731 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 739 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 747 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 139:
#line 755 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 140:
#line 774 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 141:
#line 781 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 142:
#line 787 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 143:
#line 806 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 144:
#line 817 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 145:
#line 825 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 146:
#line 831 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 147:
#line 837 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 148:
#line 856 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 149:
#line 862 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 150:
#line 879 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 151:
#line 885 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 152:
#line 891 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 897 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 903 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 155:
#line 909 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 156:
#line 928 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 157:
#line 940 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 946 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 159:
#line 965 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 160:
#line 988 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 161:
#line 996 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 162:
#line 1000 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1006 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1012 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 165:
#line 1024 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 166:
#line 1030 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1036 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1049 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 169:
#line 1054 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 170:
#line 1059 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 171:
#line 1064 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 172:
#line 1071 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 173:
#line 1072 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 174:
#line 1073 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 175:
#line 1078 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 176:
#line 1082 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 177:
#line 1094 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 178:
#line 1112 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 179:
#line 1127 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 180:
#line 1155 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 181:
#line 1185 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 182:
#line 1189 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 183:
#line 1203 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 184:
#line 1216 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 185:
#line 1229 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 186:
#line 1268 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 187:
#line 1273 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 188:
#line 1279 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 189:
#line 1283 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 190:
#line 1287 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 191:
#line 1291 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 192:
#line 1295 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 193:
#line 1300 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 194:
#line 1308 "Gmsh.y"
{
    ;
    break;}
case 195:
#line 1311 "Gmsh.y"
{
    ;
    break;}
case 196:
#line 1317 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 197:
#line 1334 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 198:
#line 1345 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 199:
#line 1362 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 200:
#line 1379 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 201:
#line 1396 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 202:
#line 1417 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 203:
#line 1437 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 204:
#line 1457 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 205:
#line 1474 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 206:
#line 1499 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 209:
#line 1515 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 1521 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 211:
#line 1534 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 212:
#line 1552 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 213:
#line 1569 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 214:
#line 1590 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 215:
#line 1607 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 216:
#line 1628 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 217:
#line 1645 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 218:
#line 1666 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 219:
#line 1683 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 220:
#line 1704 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 221:
#line 1721 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 222:
#line 1742 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 223:
#line 1759 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 224:
#line 1780 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 225:
#line 1797 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 226:
#line 1820 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 227:
#line 1845 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 228:
#line 1874 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 229:
#line 1899 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 230:
#line 1928 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 231:
#line 1953 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 232:
#line 1984 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 236:
#line 2023 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 237:
#line 2024 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 238:
#line 2025 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 2026 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 240:
#line 2027 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 241:
#line 2031 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 2032 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 243:
#line 2033 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 244:
#line 2034 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 245:
#line 2035 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 246:
#line 2036 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 247:
#line 2037 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 248:
#line 2038 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 249:
#line 2039 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 250:
#line 2040 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 251:
#line 2041 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 252:
#line 2042 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 253:
#line 2043 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 254:
#line 2044 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 255:
#line 2045 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 256:
#line 2046 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 257:
#line 2047 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 258:
#line 2048 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 259:
#line 2049 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 260:
#line 2050 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 261:
#line 2051 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2052 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2053 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 2054 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2055 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2056 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2057 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2058 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2059 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2060 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2061 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 272:
#line 2062 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2063 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2064 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2065 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2066 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 2067 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2068 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 279:
#line 2069 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 2070 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 281:
#line 2074 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 282:
#line 2075 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 283:
#line 2077 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 284:
#line 2086 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 285:
#line 2103 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2124 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2141 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2162 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 289:
#line 2179 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 290:
#line 2202 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 291:
#line 2208 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 292:
#line 2222 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 293:
#line 2226 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2230 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 295:
#line 2234 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 296:
#line 2238 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 297:
#line 2244 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 298:
#line 2248 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2252 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 300:
#line 2256 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 301:
#line 2260 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 302:
#line 2286 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 303:
#line 2319 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2322 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2328 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2331 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2337 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2340 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 309:
#line 2344 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 310:
#line 2351 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 311:
#line 2356 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 312:
#line 2363 "Gmsh.y"
{
    ;
    break;}
case 313:
#line 2366 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 314:
#line 2372 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 315:
#line 2380 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 316:
#line 2385 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 317:
#line 2394 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 318:
#line 2398 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 319:
#line 2409 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 320:
#line 2413 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 321:
#line 2417 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 322:
#line 2422 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 323:
#line 2427 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2440 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

