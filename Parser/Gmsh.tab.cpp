
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tIntersect	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tColorTable	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tMesh	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.80 2001-03-23 12:00:44 geuzaine Exp $

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 67 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1536
#define	YYFLAG		-32768
#define	YYNTBASE	182

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 263)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   167,     2,     2,   174,
   175,   165,   163,   179,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   181,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   949,   951,   953,   955,   957,   959,   961,   966,   974,   984,
   991,   995,  1002,  1009,  1019,  1026,  1036,  1042,  1051,  1060,
  1072,  1079,  1089,  1097,  1106,  1119,  1126,  1132,  1140,  1148,
  1161,  1169,  1179,  1197,  1205,  1214,  1223,  1231,  1243,  1249,
  1258,  1271,  1280,  1303,  1324,  1333,  1342,  1348,  1357,  1365,
  1374,  1380,  1392,  1398,  1408,  1410,  1412,  1414,  1415,  1418,
  1423,  1428,  1435,  1439,  1443,  1447,  1450,  1453,  1460,  1469,
  1478,  1489,  1491,  1494,  1496,  1500,  1505,  1507,  1516,  1529,
  1538,  1551,  1560,  1573,  1585,  1601,  1603,  1606,  1616,  1619,
  1626,  1636,  1646,  1655,  1664,  1673,  1680,  1685,  1688,  1691,
  1693,  1696,  1698,  1700,  1702,  1704,  1706,  1708,  1712,  1715,
  1718,  1721,  1725,  1729,  1733,  1737,  1741,  1745,  1749,  1753,
  1757,  1761,  1765,  1769,  1773,  1777,  1783,  1788,  1793,  1798,
  1803,  1808,  1813,  1818,  1823,  1828,  1833,  1840,  1845,  1850,
  1855,  1860,  1865,  1870,  1877,  1884,  1891,  1896,  1898,  1900,
  1902,  1907,  1910,  1916,  1920,  1927,  1932,  1940,  1944,  1950,
  1952,  1955,  1958,  1962,  1966,  1978,  1988,  1996,  2004,  2005,
  2009,  2011,  2015,  2016,  2020,  2024,  2026,  2030,  2032,  2036,
  2043,  2048,  2056,  2060,  2062,  2064,  2068,  2075,  2080,  2088,
  2092,  2096,  2102,  2111,  2118,  2128,  2138,  2146,  2152,  2154,
  2160,  2164,  2171,  2173,  2177,  2179,  2184
};

static const short yyrhs[] = {   184,
     0,   183,     0,   189,     0,     1,     6,     0,   140,     0,
   143,   144,   246,   246,   246,   145,   146,   142,   246,   246,
   246,   142,   246,   246,   246,   142,   246,   246,   246,   147,
   148,     0,   141,     0,     0,   184,   185,     0,   186,     0,
   188,     0,   187,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   174,   253,   179,     5,   175,     6,     0,   120,   174,   253,
   175,     6,     0,   121,   174,     5,   179,     5,   179,   253,
   179,   253,   179,     5,   179,     5,   179,     5,   175,     6,
     0,     3,     7,    98,   174,     5,   179,   251,   175,     6,
     0,     3,     7,    97,   174,     5,   179,   248,   179,   257,
   179,   247,   179,   247,   179,   247,   179,   257,   179,   257,
   179,   247,   175,     6,     0,     3,     7,    96,   174,     5,
   179,   248,   179,   248,   179,   255,   179,   247,   179,   247,
   179,   247,   179,   247,   179,   257,   179,   257,   179,   257,
   179,   257,   179,   247,   175,     6,     0,     3,     7,   104,
   174,     5,   179,     3,   179,     3,   179,     3,   179,   247,
   175,     6,     0,     3,     7,   108,   174,     5,   179,     3,
   179,   247,   175,     6,     0,     3,     7,   125,   174,     5,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   106,
   174,     5,   179,   165,   179,   165,   179,   248,   179,   247,
   175,     6,     0,     3,     7,   109,   174,     5,   179,   257,
   175,     6,     0,     3,     7,   110,   174,     5,   179,   257,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   105,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   111,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   113,   174,     5,   179,     3,   179,     3,   179,     3,
   175,     6,     0,     3,     7,   112,   174,     5,   179,   251,
   175,     6,     0,     3,     7,   107,   174,     5,   179,     3,
   175,     6,     0,     3,     7,    37,   174,     5,   179,     3,
   179,     3,   175,     6,     0,     3,     7,   123,   174,     5,
   179,   257,   175,     6,     0,     3,     7,   124,   174,     5,
   179,   257,   179,     3,   175,     6,     0,     3,     7,   122,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   126,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   127,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   134,   174,     5,   179,     3,
   179,   248,   179,   248,   175,     6,     0,     3,     7,   128,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   138,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   129,   174,     5,   179,     3,
   179,   257,   179,   257,   179,   247,   179,   247,   175,     6,
     0,     3,     7,   130,   174,     5,   179,   257,   175,     6,
     0,     3,     7,   131,   174,   132,   179,   247,   179,     3,
   175,     6,     0,     3,     7,   133,   174,     5,   179,   257,
   179,   247,   175,     6,     0,     3,     7,   135,   174,     5,
   179,     5,   179,     3,   179,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   179,     5,   179,     3,   175,     6,
     0,     3,     7,   137,   174,     3,   179,     3,   175,     6,
     0,     0,   189,   190,     0,   192,     0,   191,     0,   232,
     0,   233,     0,   234,     0,   237,     0,   238,     0,   241,
     0,   244,     0,   245,     0,   240,     0,   239,     0,    31,
   174,     5,   175,     6,     0,    31,   174,     5,   179,   258,
   175,     6,     0,     4,     5,   180,   193,   181,     6,     0,
     4,     5,     4,   251,   180,   193,   181,     6,     0,     0,
   193,   195,     0,   193,   198,     0,   193,   201,     0,   193,
   204,     0,   193,   207,     0,   193,   210,     0,   193,   213,
     0,   193,   216,     0,   193,   219,     0,   193,   222,     0,
   193,   225,     0,   193,   228,     0,   248,     0,   194,   179,
   248,     0,     0,    75,   174,   248,   179,   248,   179,   248,
   175,   196,   180,   194,   181,     6,     0,   248,     0,   197,
   179,   248,     0,     0,    76,   174,   248,   179,   248,   179,
   248,   175,   199,   180,   197,   181,     6,     0,   248,     0,
   200,   179,   248,     0,     0,    77,   174,   248,   179,   248,
   179,   248,   175,   202,   180,   200,   181,     6,     0,   248,
     0,   203,   179,   248,     0,     0,    72,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   205,   180,   203,   181,     6,     0,   248,     0,   206,   179,
   248,     0,     0,    73,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   208,   180,   206,
   181,     6,     0,   248,     0,   209,   179,   248,     0,     0,
    74,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   175,   211,   180,   209,   181,     6,     0,
   248,     0,   212,   179,   248,     0,     0,    69,   174,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   214,   180,   212,
   181,     6,     0,   248,     0,   215,   179,   248,     0,     0,
    70,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   217,   180,   215,   181,     6,     0,   248,     0,   218,   179,
   248,     0,     0,    71,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   175,   220,   180,   218,   181,     6,     0,   248,
     0,   221,   179,   248,     0,     0,    66,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   175,   223,   180,   221,   181,     6,     0,   248,     0,
   224,   179,   248,     0,     0,    67,   174,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   175,   226,   180,   224,   181,     6,     0,   248,     0,   227,
   179,   248,     0,     0,    68,   174,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   229,   180,   227,   181,     6,     0,     7,     0,   149,     0,
   150,     0,   151,     0,   152,     0,   170,     0,   171,     0,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   230,
   248,     6,     0,     4,   176,   180,   258,   181,   177,   230,
   257,     6,     0,     4,   176,   177,     7,   257,     6,     0,
     4,   231,     6,     0,     4,   176,   248,   177,   231,     6,
     0,     4,   178,     4,     7,     5,     6,     0,     4,   176,
   248,   177,   178,     4,     7,     5,     6,     0,     4,   178,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   178,
     4,   230,   248,     6,     0,     4,   178,     4,   231,     6,
     0,     4,   176,   248,   177,   178,     4,   231,     6,     0,
     4,   178,    84,   178,     4,     7,   259,     6,     0,     4,
   176,   248,   177,   178,    84,   178,     4,     7,   259,     6,
     0,     4,   178,    85,     7,   260,     6,     0,     4,   176,
   248,   177,   178,    85,     7,   260,     6,     0,    34,   174,
   248,   175,     7,   251,     6,     0,    49,    34,   174,   248,
   175,     7,   257,     6,     0,    64,    34,   257,     7,   180,
   248,   179,   248,   179,   248,   181,     6,     0,    41,    42,
   257,     7,   248,     6,     0,    34,   180,   248,   181,     6,
     0,    37,   174,   248,   175,     7,   257,     6,     0,    39,
   174,   248,   175,     7,   257,     6,     0,    64,    37,   257,
     7,   180,   248,   179,   248,   179,   248,   181,     6,     0,
    35,   174,   248,   175,     7,   257,     6,     0,    35,   174,
   248,   175,     7,   257,    45,   251,     6,     0,    43,   174,
   248,   175,     7,   180,   248,   179,   248,   179,     5,   179,
     5,   179,     5,   181,     6,     0,    36,   174,   248,   175,
     7,   257,     6,     0,    49,    37,   174,   248,   175,     7,
   257,     6,     0,    37,    59,   174,   248,   175,     7,   257,
     6,     0,    78,   174,   248,   175,     7,   257,     6,     0,
    79,   174,   248,   175,     7,   257,    83,   257,    80,   248,
     6,     0,    37,   180,   248,   181,     6,     0,    45,    38,
   174,   248,   175,     7,   257,     6,     0,   139,    38,   174,
   248,   175,     7,   180,   248,   179,   257,   181,     6,     0,
    46,    38,   174,   248,   175,     7,   257,     6,     0,    79,
    38,    81,    82,   174,   248,   175,     7,   255,    83,   180,
   257,   179,   257,   181,    80,   180,   248,   179,   248,   181,
     6,     0,    79,    38,   174,   248,   175,     7,   255,    83,
   180,   257,   179,   257,   181,    80,   180,   248,   179,   248,
   181,     6,     0,    49,    38,   174,   248,   175,     7,   257,
     6,     0,    38,    59,   174,   248,   175,     7,   257,     6,
     0,    38,   180,   248,   181,     6,     0,    48,    40,   174,
   248,   175,     7,   257,     6,     0,    40,   174,   248,   175,
     7,   257,     6,     0,    49,    40,   174,   248,   175,     7,
   257,     6,     0,    54,   251,   180,   235,   181,     0,    53,
   180,   251,   179,   251,   179,   248,   181,   180,   235,   181,
     0,    55,   251,   180,   235,   181,     0,    56,   180,   251,
   179,   248,   181,   180,   235,   181,     0,   237,     0,   236,
     0,   234,     0,     0,   236,   233,     0,    58,   180,   236,
   181,     0,    61,   180,   236,   181,     0,    61,     4,   176,
   248,   177,     6,     0,    61,    95,     6,     0,     4,   262,
     6,     0,     4,   248,     6,     0,    91,     6,     0,    33,
     6,     0,    86,   174,   248,     8,   248,   175,     0,    86,
   174,   248,     8,   248,     8,   248,   175,     0,    86,     4,
    87,   180,   248,     8,   248,   181,     0,    86,     4,    87,
   180,   248,     8,   248,     8,   248,   181,     0,    88,     0,
    94,     4,     0,    92,     0,    93,     4,     6,     0,    89,
   174,   248,   175,     0,    90,     0,    57,    34,   180,   248,
   179,   251,   181,     6,     0,    57,    34,   180,   248,   179,
   251,   179,   251,   179,   248,   181,     6,     0,    57,    37,
   180,   248,   179,   251,   181,     6,     0,    57,    37,   180,
   248,   179,   251,   179,   251,   179,   248,   181,     6,     0,
    57,    38,   180,   248,   179,   251,   181,     6,     0,    57,
    38,   180,   248,   179,   251,   179,   251,   179,   248,   181,
     6,     0,    57,    38,   180,   248,   179,   251,   181,   180,
   242,   181,     6,     0,    57,    38,   180,   248,   179,   251,
   179,   251,   179,   248,   181,   180,   242,   181,     6,     0,
   243,     0,   242,   243,     0,    65,   180,   257,   179,   257,
   179,   257,   181,     6,     0,    60,     6,     0,    47,    37,
   257,     7,   248,     6,     0,    47,    37,   257,     7,   248,
    50,    52,   248,     6,     0,    47,    37,   257,     7,   248,
    50,    51,   248,     6,     0,    47,    38,   180,   248,   181,
     7,   257,     6,     0,    44,    38,   180,   248,   181,     7,
   257,     6,     0,    47,    40,   180,   248,   181,     7,   257,
     6,     0,    60,    38,   257,     7,   248,     6,     0,    60,
    38,   257,     6,     0,    62,     6,     0,    63,     6,     0,
     3,     0,   164,     3,     0,    99,     0,   100,     0,   101,
     0,   102,     0,   103,     0,   249,     0,   174,   248,   175,
     0,   164,   248,     0,   163,   248,     0,   169,   248,     0,
   248,   164,   248,     0,   248,   163,   248,     0,   248,   165,
   248,     0,   248,   166,   248,     0,   248,   167,   248,     0,
   248,   173,   248,     0,   248,   159,   248,     0,   248,   161,
   248,     0,   248,   160,   248,     0,   248,   162,   248,     0,
   248,   156,   248,     0,   248,   157,   248,     0,   248,   155,
   248,     0,   248,   154,   248,     0,   248,   153,   248,     8,
   248,     0,    10,   174,   248,   175,     0,    11,   174,   248,
   175,     0,    12,   174,   248,   175,     0,    13,   174,   248,
   175,     0,    14,   174,   248,   175,     0,    15,   174,   248,
   175,     0,    16,   174,   248,   175,     0,    17,   174,   248,
   175,     0,    18,   174,   248,   175,     0,    20,   174,   248,
   175,     0,    21,   174,   248,   179,   248,   175,     0,    22,
   174,   248,   175,     0,    23,   174,   248,   175,     0,    24,
   174,   248,   175,     0,    25,   174,   248,   175,     0,    26,
   174,   248,   175,     0,    27,   174,   248,   175,     0,    28,
   174,   248,   179,   248,   175,     0,    29,   174,   248,   179,
   248,   175,     0,    30,   174,   248,   179,   248,   175,     0,
    19,   174,   248,   175,     0,     3,     0,     9,     0,     4,
     0,     4,   176,   248,   177,     0,     4,   231,     0,     4,
   176,   248,   177,   231,     0,     4,   178,     4,     0,     4,
   176,   248,   177,   178,     4,     0,     4,   178,     4,   231,
     0,     4,   176,   248,   177,   178,     4,   231,     0,   248,
     8,   248,     0,   248,     8,   248,     8,   248,     0,   252,
     0,   164,   251,     0,   163,   251,     0,   251,   164,   251,
     0,   251,   163,   251,     0,   180,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   181,     0,   174,   248,   179,   248,   179,
   248,   175,     0,     0,   174,   254,   175,     0,     5,     0,
   254,   179,     5,     0,     0,   180,   256,   181,     0,   174,
   256,   175,     0,   257,     0,   256,   179,   257,     0,   248,
     0,     4,   176,   177,     0,     4,   176,   180,   258,   181,
   177,     0,   164,     4,   176,   177,     0,   164,     4,   176,
   180,   258,   181,   177,     0,   180,   258,   181,     0,   248,
     0,   250,     0,     4,   176,   177,     0,     4,   176,   180,
   258,   181,   177,     0,   164,     4,   176,   177,     0,   164,
     4,   176,   180,   258,   181,   177,     0,   258,   179,   248,
     0,   258,   179,   250,     0,   258,   179,     4,   176,   177,
     0,   258,   179,     4,   176,   180,   258,   181,   177,     0,
   164,   258,   179,     4,   176,   177,     0,   164,   258,   179,
     4,   176,   180,   258,   181,   177,     0,   180,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   181,     0,   180,     4,   179,   248,   181,
     0,     4,     0,     4,   178,    84,   178,     4,     0,   180,
   261,   181,     0,     4,   176,   248,   177,   178,    85,     0,
   259,     0,   261,   179,   259,     0,     5,     0,    32,   174,
     5,   175,     0,    32,   174,     5,   179,   258,   175,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   150,   152,   153,   154,   161,   169,   183,   195,   197,   200,
   202,   203,   206,   212,   217,   218,   219,   222,   226,   229,
   235,   240,   246,   254,   259,   263,   269,   274,   278,   283,
   287,   290,   295,   299,   303,   307,   312,   316,   319,   323,
   327,   331,   335,   339,   343,   346,   350,   353,   357,   360,
   369,   373,   379,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   394,   399,   428,   434,   441,   446,
   447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
   457,   460,   463,   467,   473,   479,   482,   486,   492,   498,
   501,   505,   511,   517,   520,   524,   532,   538,   541,   545,
   553,   559,   562,   566,   574,   580,   583,   587,   599,   605,
   608,   612,   624,   630,   633,   637,   649,   655,   658,   662,
   675,   681,   684,   688,   701,   707,   710,   714,   727,   739,
   741,   742,   743,   744,   746,   748,   750,   781,   815,   862,
   877,   886,   901,   913,   927,   950,   974,   986,  1000,  1012,
  1026,  1042,  1064,  1075,  1081,  1100,  1111,  1119,  1125,  1131,
  1150,  1156,  1172,  1179,  1185,  1191,  1197,  1203,  1222,  1234,
  1240,  1259,  1280,  1288,  1294,  1300,  1306,  1318,  1324,  1330,
  1342,  1348,  1353,  1358,  1365,  1367,  1368,  1371,  1376,  1387,
  1405,  1413,  1418,  1429,  1484,  1504,  1508,  1528,  1544,  1558,
  1583,  1608,  1634,  1640,  1645,  1650,  1654,  1664,  1670,  1676,
  1680,  1684,  1688,  1692,  1697,  1704,  1708,  1713,  1734,  1744,
  1763,  1781,  1799,  1821,  1842,  1863,  1881,  1906,  1911,  1922,
  1924,  1927,  1929,  1930,  1931,  1932,  1935,  1937,  1938,  1939,
  1940,  1941,  1942,  1943,  1944,  1951,  1952,  1953,  1954,  1955,
  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  1965,
  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,  1974,  1975,
  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1987,  1992,  1996,
  2007,  2024,  2035,  2054,  2070,  2086,  2102,  2119,  2126,  2139,
  2144,  2148,  2152,  2156,  2161,  2166,  2170,  2174,  2180,  2184,
  2189,  2193,  2198,  2202,  2206,  2212,  2218,  2224,  2230,  2244,
  2267,  2283,  2309,  2316,  2322,  2326,  2338,  2359,  2373,  2400,
  2404,  2411,  2422,  2442,  2455,  2479,  2484,  2488,  2493,  2498,
  2516,  2521,  2534,  2540,  2546,  2551,  2555
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn",
"tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","SignedDouble","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","ColorExpr",
"ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   185,   186,   186,   186,   186,   186,   187,   187,   187,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   191,   191,   192,   192,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   196,   195,   197,   197,   199,   198,   200,
   200,   202,   201,   203,   203,   205,   204,   206,   206,   208,
   207,   209,   209,   211,   210,   212,   212,   214,   213,   215,
   215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
   222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
   230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   232,   232,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   234,   234,   234,   234,   235,   235,   235,   236,   236,   237,
   238,   238,   238,   239,   239,   239,   239,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   241,   241,   241,
   241,   241,   241,   241,   241,   242,   242,   243,   243,   244,
   244,   244,   244,   244,   244,   244,   244,   245,   245,   246,
   246,   247,   247,   247,   247,   247,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   249,   249,   249,
   249,   249,   249,   249,   249,   249,   249,   250,   250,   251,
   251,   251,   251,   251,   252,   252,   252,   252,   253,   253,
   254,   254,   255,   255,   255,   256,   256,   257,   257,   257,
   257,   257,   257,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   259,   259,   259,   259,   259,
   260,   260,   261,   261,   262,   262,   262
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     1,     1,     1,     1,     1,     1,     4,     7,     9,     6,
     3,     6,     6,     9,     6,     9,     5,     8,     8,    11,
     6,     9,     7,     8,    12,     6,     5,     7,     7,    12,
     7,     9,    17,     7,     8,     8,     7,    11,     5,     8,
    12,     8,    22,    20,     8,     8,     5,     8,     7,     8,
     5,    11,     5,     9,     1,     1,     1,     0,     2,     4,
     4,     6,     3,     3,     3,     2,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     8,    12,     8,
    12,     8,    12,    11,    15,     1,     2,     9,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     4,     2,     5,     3,     6,     4,     7,     3,     5,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     1,     3,     6,
     4,     7,     3,     1,     1,     3,     6,     4,     7,     3,
     3,     5,     8,     6,     9,     9,     7,     5,     1,     5,
     3,     6,     1,     3,     1,     4,     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   202,     0,   207,     0,   204,     0,
     0,     0,    52,    54,    53,    55,    56,    57,    58,    59,
    64,    63,    60,    61,    62,   230,     0,     0,     0,    13,
    14,    16,    15,    17,   299,   299,     0,   278,   280,   335,
   130,   279,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   131,   132,   133,   134,     0,     0,
     0,   135,   136,     0,     0,     0,     0,     0,     0,   237,
     0,     0,   197,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   290,     0,     0,     0,     0,     0,   188,
     0,     0,     0,   188,   228,   229,     0,     0,     0,     0,
     0,     0,     0,     0,   196,     0,   203,     0,   231,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   282,     0,    69,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   240,   239,   241,     0,     0,     0,     0,     0,     0,
     0,     0,   141,   195,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,     0,   308,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   292,   291,     0,     0,     0,     0,   188,   188,     0,     0,
     0,     0,     0,     0,     0,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   205,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
     0,     0,     0,     0,     0,   284,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   238,     0,   280,     0,   314,   315,     0,     0,   130,     0,
     0,     0,     0,   137,     0,   255,   254,   252,   253,   248,
   250,   249,   251,   243,   242,   244,   245,   246,   247,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   280,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   294,   293,   187,     0,   186,   185,     0,     0,     0,
     0,     0,   190,   189,   227,     0,     0,   191,     0,     0,
     0,     0,     0,     0,     0,     0,   206,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   300,
     0,     0,    19,     0,   281,   286,    69,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   277,   266,     0,   268,   269,   270,   271,   272,   273,
     0,     0,     0,   336,     0,     0,     0,   280,   239,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   147,     0,
     0,     0,     0,     0,    65,     0,     0,   157,     0,     0,
     0,     0,   169,     0,   177,     0,     0,   309,     0,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   181,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   302,     0,   299,     0,   283,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    67,     0,     0,     0,     0,     0,   140,
   316,     0,     0,     0,   288,   280,   320,   321,     0,     0,
     0,     0,     0,   142,   143,   145,     0,     0,   329,     0,
   333,     0,   151,   256,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   311,     0,   156,     0,     0,     0,
     0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   226,   192,     0,
     0,     0,     0,   303,     0,     0,     0,   198,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     0,     0,     0,     0,     0,    18,     0,   285,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   267,   274,   275,   276,   337,     0,   318,     0,   280,
     0,     0,     0,   130,     0,     0,     0,     0,   138,     0,
     0,     0,   280,     0,     0,   331,    66,   153,   161,     0,
   164,     0,   158,     0,   159,   179,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   188,     0,     0,     0,     0,     0,
     0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   299,   287,    68,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   289,   322,     0,     0,     0,     0,   148,     0,     0,
   149,     0,     0,     0,     0,   334,     0,   166,   176,   310,
     0,     0,   224,   170,   172,     0,     0,   223,   225,   178,
   154,   165,   175,   180,     0,   298,     0,   297,     0,     0,
   208,     0,   210,     0,   212,     0,     0,     0,   303,     0,
   306,     0,     0,     0,     0,   200,   199,     0,     0,     0,
     0,     0,    21,     0,    30,     0,    34,     0,    28,     0,
     0,    33,     0,    38,    36,     0,     0,     0,     0,     0,
     0,    45,     0,     0,     0,     0,     0,    50,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   317,     0,   324,     0,     0,   139,   144,   146,
     0,   152,     0,     0,     0,     0,   162,   312,     0,   222,
   221,   188,     0,   184,     0,     0,     0,     0,     0,     0,
   216,     0,     0,     0,   305,     0,   304,     0,     0,     0,
     0,     0,     0,   303,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   319,     0,     0,     0,
   332,   330,   328,     0,     0,     0,     0,   296,     0,     0,
     0,   219,     0,     0,   217,     0,     0,     0,   307,     0,
     0,   201,     0,     0,    35,     0,     0,     0,     0,    25,
     0,    31,     0,    37,    26,    39,     0,    42,     0,    46,
    47,     0,     0,    49,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
   150,     0,     0,   182,     0,     0,     0,     0,     0,   214,
     0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    84,    88,
    92,   325,     0,   327,     0,   295,   209,   211,   213,     0,
     0,   155,   160,     0,     0,   171,     0,     0,     0,     0,
     0,    29,    32,    40,     0,    41,    48,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   326,     0,     0,     0,
     0,     0,     0,     0,     0,    24,    27,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    82,
     0,    86,     0,    90,     0,   215,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    44,    20,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    83,    85,    87,
    89,    91,    93,   163,   218,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    96,   100,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   174,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    94,     0,
    98,     0,   102,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   173,     0,
    22,     0,     0,     0,     0,     0,     0,    95,    97,    99,
   101,   103,   105,     0,     0,     0,     0,   108,   112,   116,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
     0,   110,     0,   114,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   107,   109,
   111,   113,   115,   117,     0,   120,   124,   128,    23,     0,
     0,     0,     0,     0,     0,     0,   118,     0,   122,     0,
   126,     0,     0,     0,     0,     0,     0,   119,   121,   123,
   125,   127,   129,     0,     0,     0
};

static const short yydefgoto[] = {  1534,
     5,     6,    19,    20,    21,    22,     7,    63,    64,    65,
   378,  1309,   541,  1259,  1311,   542,  1260,  1313,   543,  1261,
  1418,   544,  1391,  1420,   545,  1392,  1422,   546,  1393,  1479,
   547,  1465,  1481,   548,  1466,  1483,   549,  1467,  1516,   550,
  1510,  1518,   551,  1511,  1520,   552,  1512,   127,   227,    66,
   474,   464,   465,   466,   467,    70,    71,    72,    73,  1070,
  1071,    74,    75,    78,   799,   296,   130,   406,   163,   164,
   222,   371,   888,   990,   991,   407,   721,   593,   722,   131
};

static const short yypact[] = {  2436,
    72,-32768,-32768,   -34,-32768,   415,  2554,-32768,    13,   111,
   121,   130,   140,   147,   162,   -19,    29,    58,-32768,-32768,
-32768,-32768,  1889,    64,   256,   -49,    96,   116,   -37,    -8,
   122,   134,   292,   170,   320,   336,   340,   317,   342,    39,
   206,   158,   158,   213,   199,   239,   361,     8,   418,   426,
   329,   274,   -29,    10,-32768,   278,-32768,   434,-32768,   425,
   450,   435,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   466,    13,  2592,-32768,
-32768,-32768,-32768,-32768,   328,   328,   456,-32768,   -96,     3,
-32768,-32768,   332,   338,   381,   382,   389,   392,   399,   411,
   414,   437,   449,   464,   468,   469,   471,   472,   474,   475,
   476,   477,   478,   479,-32768,-32768,-32768,-32768,  1919,  1919,
  1919,-32768,-32768,  1919,    16,    67,  1919,   522,   616,-32768,
   583,   595,-32768,  1919,  1919,  1919,  1919,   480,  1919,  1919,
   481,  1919,  1919,  1919,  1857,  1919,   460,   482,   483,  1857,
   493,   494,   484,   501,   502,   503,   504,   158,   158,   158,
  1919,  1919,   -58,-32768,   -30,   158,   505,   506,   507,-32768,
  1857,   508,   676,-32768,-32768,-32768,  1857,  1857,  1919,   -26,
  1919,   596,  1919,  1919,-32768,   682,-32768,   515,-32768,    13,
   517,   518,   519,   520,   528,   538,   540,   542,   545,   546,
   547,   548,   549,   550,   551,   552,   553,   557,   561,   562,
   563,   564,   565,   566,   567,   571,   572,   573,   575,   577,
   713,   574,   579,   576,  1919,   748,-32768,   158,-32768,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,
   751,   584,   584,   584,  5349,   753,  1986,  5249,   221,   580,
   754,   665,-32768,-32768,  1919,  1919,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,-32768,
    -1,  5372,  2607,  5395,  5418,  1919,  5441,  2630,  1919,  2653,
  5464,  5487,   235,  2086,  1986,  1201,   755,  5510,  1919,  1919,
  1919,   756,  1919,  1919,  1919,  1919,  1919,  1919,  1919,   -64,
-32768,-32768,  2175,  2407,   158,   158,   445,   445,   -22,  1919,
  1919,  1919,  2322,   408,  1919,-32768,  2368,   757,   758,  5533,
   684,  1919,  5556,   587,  1351,  5579,-32768,  1919,   623,   779,
   780,   781,   782,   785,   786,   787,   788,   789,   790,   791,
   792,   793,   795,   796,   797,   798,   799,   800,   802,   805,
   806,   808,   683,   809,   811,   812,   818,   830,   829,-32768,
    56,   831,   836,   832,  5274,   369,    77,   -10,  5602,  5625,
  5648,  5671,  5694,  5717,  5740,  5763,  5786,  5809,  5832,  3044,
  5855,  5878,  5901,  5924,  5947,  5970,  3065,  3086,  3107,    89,
-32768,  1857,   255,  2114,  1511,-32768,   138,   142,   843,  1919,
   855,   858,     6,-32768,  1615,   544,   714,   417,   417,   160,
   160,   160,   160,   269,   269,   584,   584,   584,   584,   860,
  1986,   828,   861,   857,   876,  5993,   877,   862,  6016,   879,
   881,   885,   467,   273,   149,  1919,   886,  2676,  6039,  6062,
  1919,  2699,  2722,  6085,  6108,  6131,  6154,  6177,   158,  1919,
  1919,-32768,-32768,-32768,   705,  2616,-32768,   716,  1919,  3128,
  3149,  3170,-32768,-32768,-32768,  1919,  5299,-32768,   715,   718,
   887,   725,  6200,   894,  1919,  1919,-32768,  6223,   770,   723,
   724,   738,   740,   741,   743,   744,   745,   746,   747,   749,
   750,   759,   761,   762,   763,   764,   765,   766,   767,   768,
   769,   771,   773,   774,   776,   777,   778,   783,   784,-32768,
   922,   760,-32768,   794,   117,-32768,-32768,   775,   801,   804,
   810,   813,   814,   815,   816,   817,   819,   820,   821,   924,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1919,-32768,-32768,-32768,-32768,-32768,-32768,
  1919,  1919,  1919,-32768,  1986,   927,  1522,   289,   584,   803,
  1919,  2153,   823,    91,  1919,   928,   930,   690,-32768,   951,
   807,     7,   931,  1919,-32768,    90,   158,-32768,  1857,  1857,
   952,  1857,-32768,   953,-32768,  1857,  1857,-32768,  1986,  1551,
-32768,   852,   822,   954,   959,   960,   354,   961,   962,   963,
   967,   969,   973,   978,   110,  3191,  3212,-32768,-32768,  2745,
   158,   158,   158,   958,   980,  1919,  1919,  1857,  1919,   985,
  1857,  1797,   442,   991,   868,  1017,  1919,  1919,   158,  1018,
  1019,   859,  1023,  1024,  1857,  1857,  1025,   158,  1026,  1027,
  1857,  1857,  1028,  1029,  1030,  1031,  1033,  1857,   423,  1857,
  1034,  1035,  1036,  1042,  1043,-32768,  1041,   328,  1044,-32768,
    17,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,-32768,  6246,  6269,  6292,  6315,   100,-32768,
-32768,  1986,  1583,  2181,  2137,   367,  1511,-32768,    14,   251,
   873,  1032,   995,-32768,-32768,-32768,     7,  1919,   882,  2209,
-32768,   204,-32768,  1201,  1048,    41,    62,  1049,  1857,  1055,
  1857,  1056,  1057,   215,-32768,  1986,-32768,  1919,  1857,  1857,
  1857,-32768,   406,  1857,  1857,  1857,  1857,  1857,  1857,  1857,
  1919,  1919,  1919,   888,   -55,    18,   137,-32768,-32768,  3233,
  3254,  1060,  6338,    -7,   986,  1919,  1919,-32768,   890,    13,
   892,  3275,  3296,   -94,   895,   898,   896,   901,   900,   906,
   915,   916,   -35,   917,   923,   925,   918,   920,   926,   929,
   948,   950,   932,-32768,-32768,-32768,-32768,-32768,   955,   956,
   974,   984,   987,   934,   988,-32768,   992,   369,  1096,  3317,
  3338,  3359,  3380,  3401,  3422,  3443,  3464,  3485,  3506,  3527,
  3548,-32768,-32768,-32768,-32768,-32768,   228,   993,  1986,   394,
  1919,  1621,  1857,  1098,  1919,  1100,  1106,     6,-32768,  1124,
  5324,  1080,   219,  3569,     7,-32768,-32768,-32768,-32768,   158,
-32768,  1126,-32768,  1127,-32768,-32768,   996,   231,  3590,  1133,
  1134,  1159,  1919,  1919,  1168,  1169,  1170,  1171,  1172,  1173,
  1174,  2768,  6361,  1116,   445,   158,  1175,   158,  1176,   158,
     9,  1919,  1919,-32768,  1177,  1857,  1857,  1102,  1857,   186,
  6384,  1919,    13,  1180,  1919,  1857,  1190,  1183,  1191,  1037,
  1192,   423,  1193,  1198,  1919,  1197,  1216,  1214,  1215,  1219,
   423,  1919,  1919,  1919,  1857,  1217,  1237,   423,  1919,  1238,
  1239,  1240,  1919,   328,-32768,-32768,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1066,   260,
  1814,  1201,-32768,  1986,  1241,  1242,  1051,-32768,  1243,  1245,
-32768,  1071,  1086,  1919,  1919,-32768,    66,-32768,-32768,-32768,
  1067,  1919,-32768,-32768,-32768,  1072,  1164,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1087,-32768,  1919,-32768,  1085,   198,
-32768,   201,-32768,   205,-32768,   141,  3611,  3632,    -7,   135,
-32768,   266,  1094,  1204,  1919,-32768,-32768,  3653,    13,  1110,
  3674,  1108,-32768,  1109,-32768,  1111,-32768,  1119,-32768,  1112,
  6407,-32768,  1120,-32768,-32768,  1123,  1125,  6430,  3695,  6453,
  1122,-32768,  1139,  1147,  3716,  1153,  1158,-32768,  3737,  1155,
  3758,  3779,  3800,  3821,  3842,  3863,  3884,  3905,  3926,  3947,
  3968,  3989,-32768,  1161,  1156,  1986,   287,-32768,-32768,-32768,
     7,-32768,   880,  1332,  2791,  4010,-32768,-32768,  4031,-32768,
-32768,   445,  2108,-32768,  1919,  1919,  1919,  1333,  1160,   -12,
-32768,  1919,  1919,  1258,-32768,  1857,-32768,  1857,  1919,  2814,
  1857,  1200,  1339,    -7,   423,  1343,  1919,  1341,   423,  1363,
  1367,  1366,  1369,  1379,  1919,  1380,  1857,  1381,  1382,  1919,
  1370,  1383,  1919,  1385,  1919,  1919,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1212,   293,  1218,  1386,
-32768,-32768,-32768,  1919,  1388,  1213,  1919,-32768,  2837,  2860,
  2883,-32768,  1857,  1390,-32768,  2906,  2929,  1220,-32768,  1222,
  1262,-32768,  1221,    13,-32768,  1224,  1232,  1234,  4052,-32768,
  1223,-32768,  1255,-32768,-32768,-32768,  6476,-32768,  1252,-32768,
-32768,  6499,  1261,-32768,  6522,  1259,  4073,  4094,  4115,  4136,
  4157,  4178,  4199,  4220,  4241,  6545,  6568,  6591,  1260,-32768,
-32768,  2578,  1263,-32768,  2952,  1391,  1393,    12,  1264,-32768,
  1414,  1433,  1857,  1857,-32768,  1434,    13,   423,   423,   423,
   423,  1435,  1438,  1439,   423,  1446,  1447,  1448,  1450,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1919,  1919,-32768,-32768,
-32768,  1277,  1919,-32768,  1452,-32768,-32768,-32768,-32768,   141,
  1857,-32768,-32768,  1279,  1278,-32768,    13,  1281,  1282,  1287,
  1292,-32768,-32768,-32768,  1290,-32768,-32768,-32768,  1293,  4262,
  4283,  4304,  4325,  4346,  4367,  4388,  4409,  4430,  1291,  1294,
  1296,  2975,  1298,   -11,  1300,  1857,  1400,  1340,   423,   423,
  1475,  1477,   423,  1479,  1919,  1919,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,-32768,  1480,  1481,  1857,
  1305,  1308,    13,  1310,  1314,-32768,-32768,  1320,  1321,  4451,
  4472,  4493,  4514,  4535,  4556,  4577,  4598,  4619,   365,  1201,
   372,  1201,   388,  1201,  1316,-32768,  1317,  1420,  1919,    13,
   423,  1857,  1496,  1503,  1919,  1919,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1919,  1514,  1919,  1515,  1919,  1516,  1517,
  1521,  1348,  4640,    13,  1350,  1374,-32768,-32768,  4661,  4682,
  4703,  4724,  4745,  4766,  6614,  6637,  6660,  1201,-32768,  1201,
-32768,  1201,-32768,-32768,-32768,  1919,  1919,  1409,   423,  1857,
  1919,  1919,  1919,  1919,  1919,  1919,-32768,-32768,-32768,  4787,
  2998,  1410,  1378,  1403,  4808,  4829,  4850,  4871,  4892,  4913,
  1404,  1405,  1408,  1919,  1553,-32768,  1857,   423,  1919,  1919,
  1919,  1919,  1919,  1919,  1919,  1919,  1919,  3021,-32768,  1436,
  1441,  4934,  4955,  4976,  4997,  5018,  5039,   413,  1201,   431,
  1201,   439,  1201,  1577,  1857,  1608,  1919,  1919,  1919,  1919,
  1919,  1919,  1919,  1611,  1919,  1612,  1919,  1613,-32768,  1442,
-32768,  5060,  5081,  5102,  6683,  6706,  6729,  1201,-32768,  1201,
-32768,  1201,-32768,  1857,  1919,  1919,  1919,-32768,-32768,-32768,
  1443,  5123,  5144,  5165,  1440,  1449,  1472,  1857,  1919,  1919,
  1919,  1919,  1919,  1919,  1474,  5186,  5207,  5228,   440,  1201,
   447,  1201,   448,  1201,   423,  1919,  1919,  1919,  1919,  1620,
  1919,  1648,  1919,  1649,  1482,  6752,  6775,  6798,  1201,-32768,
  1201,-32768,  1201,-32768,  1650,-32768,-32768,-32768,-32768,  1478,
  1489,  1499,  1919,  1919,  1919,   453,  1201,   454,  1201,   458,
  1201,  1919,  1653,  1919,  1654,  1919,  1655,  1201,-32768,  1201,
-32768,  1201,-32768,  1589,  1627,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1135,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -254,   -20,-32768,
  1673,  1674,  -314,   161,  1675,-32768,-32768,-32768,-32768,   459,
 -1064,-32768,-32768,   -28,  -894,   -23,-32768,  -569,   101,-32768,
   -85,-32768,  -937,   824,   397,  -272,  -715,   845,-32768,-32768
};


#define	YYLAST		6973


static const short yytable[] = {   129,
   223,   840,   128,   468,   410,  1135,   228,  1008,   180,   591,
   719,   172,   708,   182,   985,    76,  1017,  1229,    88,    89,
    91,   138,   445,  1024,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   848,  1068,  1068,   190,
   141,  1074,  1069,  1069,   331,   528,   529,   530,   531,   532,
   533,   534,   535,   536,   537,   538,   539,   849,   315,   316,
   259,  1057,   154,   122,   123,   155,   156,     8,   157,   225,
   897,   226,   528,   529,   530,   531,   532,   533,   534,   535,
   536,   537,   538,   539,   710,   252,   253,   254,   315,   316,
   255,   258,   173,   262,   315,   316,   850,   315,   316,     9,
   282,   283,   284,   285,   459,   287,   288,    79,   290,   291,
   292,   317,   298,   876,   134,   877,    80,   315,   316,   956,
   135,   580,   315,   316,   708,    81,   139,   313,   314,   906,
   315,   316,   140,   165,   181,    82,  1146,   332,    91,   318,
   260,   261,    83,   585,    85,   330,   469,   333,   596,   335,
   336,   339,   115,   116,   117,   118,   886,    84,  1134,  1289,
   540,   142,   887,   430,   711,   712,    77,   431,   119,   120,
   315,   316,   229,   183,   121,   592,   720,   174,   986,   124,
  1147,  1230,   256,   995,  1151,   257,   878,   809,   879,  1135,
  1068,   375,    86,   315,   316,  1069,   379,   380,   381,   382,
   383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   399,   409,   315,   316,
   520,    87,   167,   405,   521,   168,   169,   132,   411,   315,
   316,   415,   416,   417,   418,   419,   420,   421,   422,   423,
   424,   425,   426,   427,   428,   429,   527,   834,   310,   311,
   312,   133,   436,   574,   725,   439,   319,   575,   582,   136,
   253,   405,   315,   316,   826,   448,   449,   450,   582,   452,
   453,   454,   455,   456,   457,   458,   122,   123,   751,   137,
   115,   116,   117,   118,   679,   143,   470,   471,   472,   315,
   316,   477,   699,  1238,  1239,  1240,  1241,   144,   483,  1075,
  1245,   122,   123,  1076,   488,   880,   582,   881,   583,   584,
   159,   160,   274,   275,   276,   277,   278,   582,   377,   611,
   323,   161,   279,   145,   327,  1120,   734,   162,   265,   266,
   267,   268,   269,   146,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   150,   151,   526,   152,   147,   279,   742,
   315,   316,   177,   315,   316,   178,   996,   315,   316,   115,
   116,   117,   118,   148,  1294,  1295,  1065,   149,  1298,  1066,
   579,   153,   845,  1067,   846,   158,   588,   586,   122,   123,
   122,   123,   166,   582,   225,   857,   226,   954,   171,   115,
   116,   117,   118,   743,   122,   123,   582,   405,   939,   582,
   443,   961,   226,   475,   476,   462,   463,    10,   170,   375,
   122,   123,   612,   175,   122,   123,  1345,   617,   186,   827,
   577,   176,   226,   276,   277,   278,   626,   627,   582,   185,
  1044,   279,   122,   123,  1076,   630,  1077,   179,   610,   767,
   226,   184,   634,   187,   833,   835,   863,   864,   122,   123,
   224,   642,   643,   858,   703,   582,   226,  1119,   189,    88,
    89,   582,   188,  1179,  1383,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,    41,    42,    43,
    44,   221,    46,  1411,   680,   230,   265,   266,   267,   268,
   269,   231,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   794,   795,   796,   797,   798,   279,   263,    11,    12,
    13,    14,    15,    16,    17,    18,   122,   123,   122,   123,
   695,   297,   832,  1334,   226,  1335,   302,   696,   697,   698,
  1336,   405,  1337,   375,   232,   233,   940,   705,   707,   625,
   979,   713,   234,   122,   123,   235,  1338,   324,  1339,   941,
   724,   226,   236,   328,   329,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   237,   405,   375,   238,   280,   279,
  1495,  1433,   807,  1434,   265,   266,   267,   268,   269,   281,
   270,   271,   272,   273,   274,   275,   276,   277,   278,  1435,
   239,  1436,   760,   761,   279,   763,   768,  1437,  1489,  1438,
  1490,   264,   240,   772,   773,  1491,  1493,  1492,  1494,   119,
   120,  1522,  1524,  1523,  1525,   121,  1526,   241,  1527,   299,
   124,   242,   243,   608,   244,   245,   609,   246,   247,   248,
   249,   250,   251,   286,   289,   300,   301,   305,   810,   811,
   812,   813,   814,   815,   816,   817,   818,   819,   820,   821,
   414,  1047,   303,   304,   306,   307,   308,   309,   405,   375,
   707,   326,   334,   325,   320,   321,   322,   337,   338,   836,
   340,   341,   342,   343,   841,   716,   844,   726,   267,   268,
   269,   344,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   345,   405,   346,   859,   347,   279,   370,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   872,   873,   874,
   357,   755,   756,   757,   358,   359,   360,   361,   362,   363,
   364,   893,   890,   891,   365,   366,   367,  1126,   368,   774,
   369,   376,   372,   373,   374,   400,   279,   412,   783,   402,
   413,   446,   451,   479,   480,   482,   485,   489,   265,   266,
   267,   268,   269,  1118,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   490,   491,   492,   493,   925,   279,   494,
   495,   496,   497,   498,   499,   500,   501,   502,   576,   503,
   504,   505,   506,   507,   508,   405,   509,   942,   375,   510,
   511,   947,   512,   514,   513,   515,   516,   265,   266,   267,
   268,   269,   517,   270,   271,   272,   273,   274,   275,   276,
   277,   278,   518,   519,   597,   522,   524,   279,  1030,   966,
   967,   523,   265,   266,   267,   268,   269,   587,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   737,   987,   988,
   589,   590,   279,   599,   999,   595,   598,   603,   998,   268,
   269,  1001,   270,   271,   272,   273,   274,   275,   276,   277,
   278,  1011,   600,   602,   605,   628,   279,   606,  1018,  1019,
  1020,   607,   613,   638,   636,  1025,   629,   637,   639,  1029,
   641,   646,   647,  1031,  1032,  1033,  1034,  1035,  1036,  1037,
  1038,  1039,  1040,  1041,  1042,   645,   648,   375,   649,   650,
   405,   651,   652,   653,   654,   655,   676,   656,   657,   694,
  1055,  1056,   700,   714,   677,   715,   723,   658,  1059,   659,
   660,   661,   662,   663,   664,   665,   666,   667,   682,   668,
   957,   669,   670,  1063,   671,   672,   673,   717,   729,   731,
   739,   674,   675,   758,  1121,   740,   741,   744,   745,   746,
  1082,  1080,   678,   747,   683,   748,   980,   684,   982,   749,
   984,   704,   718,   685,   750,   759,   686,   687,   688,   689,
   690,   764,   691,   692,   693,   727,   728,   769,   730,   709,
   839,   738,   732,   733,   265,   266,   267,   268,   269,   770,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   771,
   775,   776,   405,   777,   279,   778,   779,   782,   784,   785,
   788,   789,   790,   791,   762,   792,   801,   765,   838,   802,
   803,  1129,  1130,  1131,   804,   805,   806,   808,  1136,  1137,
   837,   780,   781,   847,   851,  1141,  1050,   786,   787,   842,
   853,   855,   856,  1149,   793,   884,   800,   875,   889,   892,
   894,  1157,   899,   898,   900,   901,  1162,  1060,   902,  1165,
   903,  1167,  1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,
  1176,  1177,  1178,   904,   905,   907,   910,   908,   911,   909,
  1182,   926,   946,  1185,   912,   948,   916,   913,   922,   949,
   265,   266,   267,   268,   269,  1197,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   852,   914,   854,   915,   951,
   279,   958,   959,   917,   918,   860,   861,   862,   963,   964,
   865,   866,   867,   868,   869,   870,   871,   265,   266,   267,
   268,   269,   919,   270,   271,   272,   273,   274,   275,   276,
   277,   278,   920,   953,   965,   921,   923,   279,  1237,  1061,
   924,  -316,   960,   968,   969,   970,   971,   972,   973,   974,
   981,   983,  1000,   989,   993,  1004,  1250,  1251,  1252,  1253,
  1254,  1255,  1256,  1257,  1258,  1003,  1005,  1007,  1009,  1262,
  1010,  1006,  1012,   265,   266,   267,   268,   269,  1268,   270,
   271,   272,   273,   274,   275,   276,   277,   278,  1013,  1014,
  1015,  1016,  1022,   279,   265,   266,   267,   268,   269,   945,
   270,   271,   272,   273,   274,   275,   276,   277,   278,  1023,
  1026,  1027,  1043,  1058,   279,  1028,  1048,  1049,  1053,  1051,
  1052,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,
  1310,  1312,  1314,  1054,  1320,  1064,  1062,  1195,   265,   266,
   267,   268,   269,  1078,   270,   271,   272,   273,   274,   275,
   276,   277,   278,  1079,  1083,   994,  1085,  1086,   279,  1087,
  1089,  1344,  1002,  1088,   977,  1343,   978,  1092,  1091,  1093,
  1097,  1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,
  1358,  1021,  1360,  1098,  1362,  1368,   265,   266,   267,   268,
   269,  1099,   270,   271,   272,   273,   274,   275,   276,   277,
   278,  1101,  1102,  1104,  -322,  1122,   279,  1117,  1132,  1133,
  1138,  1144,  1380,  1381,  1145,  1148,  1150,  1385,  1386,  1387,
  1388,  1389,  1390,   265,   266,   267,   268,   269,   486,   270,
   271,   272,   273,   274,   275,   276,   277,   278,  1152,  1153,
  1408,  1154,  1163,   279,  1155,  1412,  1413,  1414,  1415,  1416,
  1417,  1419,  1421,  1423,  1156,  1158,  1160,  1161,  1164,  1166,
  -317,  1181,  1183,  1184,  1180,  1190,  1227,  1202,  1228,  1193,
  1194,  1196,  1198,  1442,  1443,  1444,  1445,  1446,  1447,  1448,
  1199,  1450,  1200,  1452,   265,   266,   267,   268,   269,  1232,
   270,   271,   272,   273,   274,   275,   276,   277,   278,  1203,
  1205,  1462,  1463,  1464,   279,  1207,  1222,  1209,  1233,  1236,
  1242,  1225,  1231,  1243,  1244,  1476,  1477,  1478,  1480,  1482,
  1484,  1246,  1247,  1248,  1249,  -323,  1263,  1266,  1267,  1269,
  1270,  1271,  1496,  1497,  1498,  1499,  1272,  1501,  1273,  1503,
  1284,  1274,  1139,  1285,  1140,  1286,  1288,  1143,  1290,  1292,
  1296,  1293,  1297,  1299,  1315,  1318,  1316,  1319,  1321,  1517,
  1519,  1521,  1322,  1159,  1323,  1324,  1340,  1341,  1528,  1342,
  1530,  1347,  1532,   265,   266,   267,   268,   269,  1348,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   581,  1359,
  1361,  1363,  1364,   279,    88,    89,  1365,  1366,  1369,  1189,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,  1370,    88,    89,  1382,  1397,  1396,  1409,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,  1398,  1439,  1405,  1406,    88,    89,  1407,  1535,  1234,
  1235,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,  1441,  1425,  1426,  1449,  1451,  1453,  1472,
  1454,  1468,   594,    88,    89,  1500,  1536,  1265,  1473,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,  1474,  1485,  1502,  1504,  1509,  1505,  1513,  1529,  1531,
  1533,   681,  1291,   265,   266,   267,   268,   269,  1514,   270,
   271,   272,   273,   274,   275,   276,   277,   278,  1515,    67,
    68,    69,   950,   279,   119,   120,  1317,     0,  1264,     0,
   121,     0,     0,     0,     0,   124,     0,     0,   701,     0,
     0,   702,     0,     0,     0,     0,     0,     0,     0,     0,
   992,     0,     0,   119,   120,     0,     0,     0,  1346,   121,
     0,     0,     0,     0,   124,     0,     0,   735,     0,     0,
   736,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   119,   120,     0,     0,     0,
     0,   121,     0,     0,     0,     0,   124,     0,     0,   828,
     0,     0,   829,     0,     0,     0,  1384,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,   119,   120,     0,     0,   279,     0,   121,
     0,     0,     0,  1410,   124,     0,     0,   943,     0,     0,
   944,     0,     0,     0,   766,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,    89,     0,     0,
     0,  1440,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,     0,     0,     0,     0,     0,     0,
  1461,     0,     0,     0,     0,     0,     0,     0,     0,    88,
   293,     0,     0,     0,  1475,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,     0,     0,     0,
     0,    88,    89,    90,     0,    91,     0,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
   114,    88,    89,     0,     0,     0,     0,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,     0,     0,     0,   119,   120,     0,     0,
     0,     0,   121,     0,     0,     0,     0,   124,    88,   403,
  1045,     0,     0,  1046,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,     0,     0,     0,   119,
   294,     0,     0,     0,     0,   121,     0,     0,     0,     0,
   124,     0,     0,     0,     0,     0,   295,   115,   116,   117,
   118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   119,   120,     0,     0,     0,     0,   121,   122,   123,
     0,     0,   124,     0,   125,     0,   126,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   119,   120,     0,     0,     0,     0,   121,    88,   444,
     0,     0,   124,     0,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,    88,   578,     0,     0,
     0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   831,     0,     0,     0,   119,   404,
     0,     0,     0,     0,   121,    88,   706,     0,     0,   124,
     0,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,    88,   830,     0,     0,     0,     0,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    88,   843,     0,     0,     0,     0,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     0,     0,     0,     0,   121,     0,     0,     0,     0,   124,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,   119,   404,     0,     0,
   279,     0,   121,     0,     0,     0,  1127,   124,  1128,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,     0,     0,   119,   120,     0,     0,     0,
     0,   121,     0,     0,     0,     0,   124,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,   119,   120,     0,     0,   279,     0,   121,
     0,     0,     0,   460,   124,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,     0,    36,    37,     0,    39,
    40,   119,   120,     0,     0,     0,     0,   121,     0,     0,
     0,     0,   124,     0,     0,    51,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
    53,    26,    27,    28,    29,    30,    31,    32,    33,     0,
    34,     0,    36,    37,     0,    39,    40,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    51,     0,     0,     0,    -8,     1,     0,    -8,   -51,
     0,     0,     0,     0,     0,    52,    53,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    62,     0,     0,     0,     0,     0,   -51,     0,   -51,   -51,
   -51,   -51,   -51,   -51,   -51,   -51,   -51,     0,   -51,   -51,
   -51,   -51,   -51,   -51,   -51,     0,     0,     0,   -51,   -51,
   -51,   -51,   -51,   -51,     0,   -51,   -51,   -51,   -51,   -51,
     0,     0,   473,     0,     0,     0,    62,     0,     0,     0,
     0,     0,     0,   -51,   -51,     0,     0,     0,     0,     0,
     0,   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   478,    -8,
    -8,    -8,    -8,    -8,    -8,    -8,    -8,    23,     0,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   -51,     2,     3,     0,     4,   279,
     0,     0,     0,     0,    24,   461,    25,    26,    27,    28,
    29,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,     0,     0,     0,    41,    42,    43,    44,
    45,    46,     0,    47,    48,    49,    50,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   191,     0,
     0,    52,    53,     0,     0,     0,     0,     0,     0,    54,
     0,    55,    56,    57,    58,    59,    60,    61,     0,    26,
    27,    28,    29,    30,    31,    32,    33,     0,    34,     0,
    36,    37,     0,    39,    40,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    51,
     0,     0,     0,     0,     0,     0,     0,   192,   193,   194,
     0,     0,    62,    52,    53,   195,   196,   197,   198,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,     0,    62,     0,  1223,     0,  1224,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,   433,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,     0,   265,   266,   267,   268,   269,
   438,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,   440,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,   265,   266,   267,   268,   269,   614,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,   265,   266,   267,   268,   269,   618,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,   265,   266,   267,
   268,   269,   619,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
   265,   266,   267,   268,   269,   754,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,   265,   266,   267,   268,   269,   975,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,   265,   266,   267,   268,
   269,  1123,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,   265,
   266,   267,   268,   269,  1142,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,  1186,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,     0,   265,   266,   267,   268,   269,
  1187,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,  1188,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,   265,   266,   267,   268,   269,  1191,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,   265,   266,   267,   268,   269,  1192,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,   265,   266,   267,
   268,   269,  1226,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
   265,   266,   267,   268,   269,  1287,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,   265,   266,   267,   268,   269,  1395,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,   265,   266,   267,   268,
   269,  1424,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   564,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   571,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   572,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   573,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   631,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   632,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   633,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   752,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   753,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   882,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   883,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   895,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   896,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   927,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   928,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   929,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   930,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   931,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   932,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   933,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   934,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   935,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   936,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   937,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   938,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   955,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   962,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1072,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1073,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1081,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1084,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1095,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1100,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1103,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1105,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1106,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1107,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1108,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1109,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1110,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1111,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1112,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1113,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1114,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1115,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1116,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1124,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1125,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1201,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1210,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1211,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1212,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1213,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1214,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1215,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1216,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1217,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1218,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1275,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1276,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1277,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1278,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1279,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1280,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1281,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1282,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1283,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1325,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1326,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1327,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1328,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1329,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1330,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1331,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1332,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1333,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1367,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1371,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1372,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1373,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1374,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1375,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1376,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1394,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1399,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1400,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1401,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1402,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1403,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1404,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1427,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1428,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1429,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1430,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1431,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1432,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1455,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1456,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1457,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1469,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1470,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1471,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1486,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1487,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1488,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,     0,   408,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,     0,
   525,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,     0,   635,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,     0,
   952,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   401,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   432,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   434,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   435,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   437,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   441,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   442,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   447,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   481,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   484,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   487,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   553,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   554,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   555,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   556,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   557,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   558,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   559,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   560,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   561,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   562,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   563,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   565,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   566,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   567,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   568,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   569,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   570,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   601,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   604,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   615,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   616,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   620,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   621,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   622,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   623,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   624,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   640,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   644,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   822,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   823,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   824,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   825,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   885,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   976,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   997,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,  1090,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,  1094,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,  1096,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
  1204,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,  1206,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,  1208,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,  1219,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,  1220,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,  1221,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,  1377,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,  1378,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,  1379,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,  1458,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
  1459,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,  1460,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,  1506,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,  1507,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,  1508
};

static const short yycheck[] = {    23,
    86,   717,    23,   318,   259,  1070,     4,   902,    38,     4,
     4,     4,   582,     4,     6,     3,   911,     6,     3,     4,
     7,    59,   295,   918,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     6,    60,    60,    78,
    59,   989,    65,    65,    81,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,     6,   163,   164,
     4,     6,    34,   170,   171,    37,    38,     6,    40,   176,
   175,   178,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,     4,   119,   120,   121,   163,   164,
   124,   125,    95,   127,   163,   164,    45,   163,   164,   144,
   134,   135,   136,   137,   179,   139,   140,     7,   142,   143,
   144,   180,   146,   179,   174,   181,     6,   163,   164,   845,
   180,   404,   163,   164,   704,     6,   174,   161,   162,   175,
   163,   164,   180,    43,   174,     6,  1084,   174,     7,   180,
    84,    85,     6,   408,   174,   179,   179,   181,   431,   183,
   184,   190,   149,   150,   151,   152,   174,     6,   181,   181,
   181,   180,   180,   175,    84,    85,   164,   179,   163,   164,
   163,   164,   180,   174,   169,   180,   180,   180,   180,   174,
  1085,   180,   177,     8,  1089,   180,   179,   181,   181,  1264,
    60,   225,   174,   163,   164,    65,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,     7,   163,   164,
   175,   174,    34,   257,   179,    37,    38,   174,   259,   163,
   164,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   180,     7,   158,   159,
   160,     6,   286,   175,   175,   289,   166,   179,   179,   174,
   294,   295,   163,   164,   175,   299,   300,   301,   179,   303,
   304,   305,   306,   307,   308,   309,   170,   171,   179,   174,
   149,   150,   151,   152,   178,   174,   320,   321,   322,   163,
   164,   325,   575,  1198,  1199,  1200,  1201,   174,   332,   175,
  1205,   170,   171,   179,   338,   179,   179,   181,   181,   178,
   163,   164,   163,   164,   165,   166,   167,   179,   228,   181,
   170,   174,   173,    42,   174,  1051,   609,   180,   153,   154,
   155,   156,   157,   174,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    37,    38,   376,    40,    38,   173,     6,
   163,   164,    34,   163,   164,    37,   181,   163,   164,   149,
   150,   151,   152,    38,  1269,  1270,   179,    38,  1273,   179,
   404,    40,   179,   179,   181,   180,   410,   408,   170,   171,
   170,   171,   180,   179,   176,   181,   178,   179,    38,   149,
   150,   151,   152,    50,   170,   171,   179,   431,   181,   179,
   176,   181,   178,     6,     7,   315,   316,     3,   180,   443,
   170,   171,   446,     6,   170,   171,  1321,   451,     4,   702,
   176,     6,   178,   165,   166,   167,   460,   461,   179,     6,
   181,   173,   170,   171,   179,   469,   181,   174,   176,     8,
   178,   174,   476,     4,   709,   710,    51,    52,   170,   171,
     5,   485,   486,   736,   176,   179,   178,   181,     3,     3,
     4,   179,    38,   181,  1369,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    53,    54,    55,
    56,   174,    58,  1398,   525,   174,   153,   154,   155,   156,
   157,   174,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    99,   100,   101,   102,   103,   173,     6,   114,   115,
   116,   117,   118,   119,   120,   121,   170,   171,   170,   171,
   564,   145,   176,   179,   178,   181,   150,   571,   572,   573,
   179,   575,   181,   577,   174,   174,   829,   581,   582,   459,
   875,   585,   174,   170,   171,   174,   179,   171,   181,   176,
   594,   178,   174,   177,   178,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   174,   609,   610,   174,     6,   173,
  1485,   179,   678,   181,   153,   154,   155,   156,   157,     5,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   179,
   174,   181,   636,   637,   173,   639,   175,   179,   179,   181,
   181,     6,   174,   647,   648,   179,   179,   181,   181,   163,
   164,   179,   179,   181,   181,   169,   179,   174,   181,   180,
   174,   174,   174,   177,   174,   174,   180,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   682,   683,
   684,   685,   686,   687,   688,   689,   690,   691,   692,   693,
     6,   944,   180,   180,   174,   174,   174,   174,   702,   703,
   704,     6,    87,   176,   180,   180,   180,     6,   174,   710,
   174,   174,   174,   174,   718,     6,   720,   597,   155,   156,
   157,   174,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   174,   736,   174,   738,   174,   173,     5,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   751,   752,   753,
   174,   631,   632,   633,   174,   174,   174,   174,   174,   174,
   174,   770,   766,   767,   174,   174,   174,  1062,   174,   649,
   174,     4,   179,   175,   179,     5,   173,   178,   658,     7,
     7,     7,     7,     7,     7,    82,   180,   145,   153,   154,
   155,   156,   157,  1046,   159,   160,   161,   162,   163,   164,
   165,   166,   167,     5,     5,     5,     5,   808,   173,     5,
     5,     5,     5,     5,     5,     5,     5,     5,   402,     5,
     5,     5,     5,     5,     5,   829,     5,   831,   832,     5,
     5,   835,     5,     5,   132,     5,     5,   153,   154,   155,
   156,   157,     5,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     3,     5,     7,     5,     5,   173,   924,   863,
   864,     6,   153,   154,   155,   156,   157,     5,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     6,   882,   883,
     6,     4,   173,     7,   893,     6,     6,     6,   892,   156,
   157,   895,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   905,     7,     7,     6,   181,   173,     7,   912,   913,
   914,     7,     7,     7,   180,   919,   181,   180,   174,   923,
     7,   179,   179,   927,   928,   929,   930,   931,   932,   933,
   934,   935,   936,   937,   938,   146,   179,   941,   179,   179,
   944,   179,   179,   179,   179,   179,     5,   179,   179,     6,
   954,   955,     6,     6,   175,     6,     6,   179,   962,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   174,   179,
   850,   179,   179,   977,   179,   179,   179,     7,     7,     7,
     7,   179,   179,     6,    85,     7,     7,     7,     7,     7,
   999,   995,   179,     7,   174,     7,   876,   174,   878,     7,
   880,   179,   176,   174,     7,     6,   174,   174,   174,   174,
   174,     7,   174,   174,   174,   599,   600,     7,   602,   177,
     6,   180,   606,   607,   153,   154,   155,   156,   157,   142,
   159,   160,   161,   162,   163,   164,   165,   166,   167,     3,
     3,     3,  1046,   165,   173,     3,     3,     3,     3,     3,
     3,     3,     3,     3,   638,     3,     3,   641,     7,     5,
     5,  1065,  1066,  1067,     3,     3,     6,     4,  1072,  1073,
   178,   655,   656,     6,     6,  1079,     6,   661,   662,   178,
     6,     6,     6,  1087,   668,     6,   670,   180,    83,   180,
   179,  1095,   175,   179,   179,   175,  1100,     6,   179,  1103,
   175,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,
  1114,  1115,  1116,   179,   179,   179,   179,   175,   179,   175,
  1124,     6,     5,  1127,   179,     6,   175,   179,   175,     4,
   153,   154,   155,   156,   157,  1144,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   729,   179,   731,   179,     6,
   173,     6,     6,   179,   179,   739,   740,   741,     6,     6,
   744,   745,   746,   747,   748,   749,   750,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   179,    84,     6,   179,   179,   173,  1197,     6,
   179,   179,   177,     6,     6,     6,     6,     6,     6,     6,
     6,     6,     3,     7,    83,     3,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,  1218,     6,     6,     6,     6,  1223,
     3,   165,     6,   153,   154,   155,   156,   157,  1237,   159,
   160,   161,   162,   163,   164,   165,   166,   167,     3,     6,
     6,     3,     6,   173,   153,   154,   155,   156,   157,   833,
   159,   160,   161,   162,   163,   164,   165,   166,   167,     3,
     3,     3,   177,   177,   173,     6,     6,     6,   178,     7,
     6,  1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,
  1284,  1285,  1286,   178,  1293,   181,   180,     6,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    80,   175,   889,   179,   179,   173,   179,
   179,  1320,   896,   175,   179,  1319,   181,   175,   179,   175,
   179,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
  1334,   915,  1336,   175,  1338,  1344,   153,   154,   155,   156,
   157,   175,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   179,   175,   179,   179,     4,   173,   177,     6,   180,
    83,   142,  1366,  1367,     6,     3,     6,  1371,  1372,  1373,
  1374,  1375,  1376,   153,   154,   155,   156,   157,     8,   159,
   160,   161,   162,   163,   164,   165,   166,   167,     6,     3,
  1394,     6,     3,   173,     6,  1399,  1400,  1401,  1402,  1403,
  1404,  1405,  1406,  1407,     6,     6,     6,     6,     6,     5,
   179,     6,     5,   181,   177,     6,     6,   175,     6,   180,
   179,   181,   179,  1427,  1428,  1429,  1430,  1431,  1432,  1433,
   179,  1435,   179,  1437,   153,   154,   155,   156,   157,     6,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   175,
   179,  1455,  1456,  1457,   173,   175,   177,   179,     6,     6,
     6,   179,   179,     6,     6,  1469,  1470,  1471,  1472,  1473,
  1474,     6,     6,     6,     5,   179,     5,   179,   181,   179,
   179,   175,  1486,  1487,  1488,  1489,   175,  1491,   179,  1493,
   180,   179,  1076,   180,  1078,   180,   179,  1081,   179,    80,
     6,   142,     6,     5,     5,   181,     6,   180,   179,  1513,
  1514,  1515,   179,  1097,   175,   175,   181,   181,  1522,    80,
  1524,     6,  1526,   153,   154,   155,   156,   157,     6,   159,
   160,   161,   162,   163,   164,   165,   166,   167,     8,     6,
     6,     6,     6,   173,     3,     4,     6,   180,   179,  1133,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   179,     3,     4,   147,   179,   148,     6,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   179,     6,   180,   180,     3,     4,   180,     0,  1193,
  1194,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     6,   179,   175,     6,     6,     6,   180,
   179,   179,     8,     3,     4,     6,     0,  1231,   180,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   180,   179,     6,     6,     6,   175,   180,     6,     6,
     6,   527,  1266,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   180,     7,
     7,     7,   838,   173,   163,   164,  1290,    -1,  1230,    -1,
   169,    -1,    -1,    -1,    -1,   174,    -1,    -1,   177,    -1,
    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   887,    -1,    -1,   163,   164,    -1,    -1,    -1,  1322,   169,
    -1,    -1,    -1,    -1,   174,    -1,    -1,   177,    -1,    -1,
   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,    -1,    -1,
    -1,   169,    -1,    -1,    -1,    -1,   174,    -1,    -1,   177,
    -1,    -1,   180,    -1,    -1,    -1,  1370,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,   163,   164,    -1,    -1,   173,    -1,   169,
    -1,    -1,    -1,  1397,   174,    -1,    -1,   177,    -1,    -1,
   180,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
    -1,  1425,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
  1454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     4,    -1,    -1,    -1,  1468,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,     7,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,     3,     4,
   177,    -1,    -1,   180,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,   163,
   164,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,
   174,    -1,    -1,    -1,    -1,    -1,   180,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   163,   164,    -1,    -1,    -1,    -1,   169,   170,   171,
    -1,    -1,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   163,   164,    -1,    -1,    -1,    -1,   169,     3,     4,
    -1,    -1,   174,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     8,    -1,    -1,    -1,   163,   164,
    -1,    -1,    -1,    -1,   169,     3,     4,    -1,    -1,   174,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,
    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,   163,   164,    -1,    -1,
   173,    -1,   169,    -1,    -1,    -1,   179,   174,   181,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,    -1,    -1,
    -1,   169,    -1,    -1,    -1,    -1,   174,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,   163,   164,    -1,    -1,   173,    -1,   169,
    -1,    -1,    -1,   179,   174,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,
    49,   163,   164,    -1,    -1,    -1,    -1,   169,    -1,    -1,
    -1,    -1,   174,    -1,    -1,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
    79,    34,    35,    36,    37,    38,    39,    40,    41,    -1,
    43,    -1,    45,    46,    -1,    48,    49,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    64,    -1,    -1,    -1,     0,     1,    -1,     3,     4,
    -1,    -1,    -1,    -1,    -1,    78,    79,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,    -1,    -1,    -1,    -1,    -1,    31,    -1,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    -1,    43,    44,
    45,    46,    47,    48,    49,    -1,    -1,    -1,    53,    54,
    55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
    -1,    -1,   181,    -1,    -1,    -1,   139,    -1,    -1,    -1,
    -1,    -1,    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,
    -1,    86,    -1,    88,    89,    90,    91,    92,    93,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,   114,
   115,   116,   117,   118,   119,   120,   121,     4,    -1,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   139,   140,   141,    -1,   143,   173,
    -1,    -1,    -1,    -1,    31,   179,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    44,    45,    46,
    47,    48,    49,    -1,    -1,    -1,    53,    54,    55,    56,
    57,    58,    -1,    60,    61,    62,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,
    -1,    88,    89,    90,    91,    92,    93,    94,    -1,    34,
    35,    36,    37,    38,    39,    40,    41,    -1,    43,    -1,
    45,    46,    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
    -1,    -1,   139,    78,    79,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,    -1,   133,   134,   135,   136,   137,   138,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,   139,    -1,   179,    -1,   181,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   177,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   177,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   177,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 154 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 163 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 177 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 184 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 201 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 202 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 203 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 208 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 213 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 224 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 227 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 231 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 237 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 243 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 250 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 256 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 260 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 264 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 271 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 275 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 280 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 284 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 288 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 292 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 296 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 300 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 304 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 308 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 314 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 317 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 320 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 324 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 328 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 332 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 336 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 355 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 358 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 371 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 374 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 396 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 66:
#line 400 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 67:
#line 430 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-4].c); 
    ;
    break;}
case 68:
#line 435 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-6].c);
    ;
    break;}
case 69:
#line 443 "Gmsh.y"
{
      BeginView(1, Force_ViewNumber); 
    ;
    break;}
case 82:
#line 462 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 464 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 469 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 474 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 481 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 483 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 488 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 493 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 500 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 502 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 507 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 512 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 519 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 521 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 527 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 533 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 540 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 542 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 548 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 554 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 561 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 563 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 569 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 575 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 582 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 584 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 591 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 600 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 607 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 609 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 616 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 625 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 632 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 634 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 641 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 650 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 657 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 659 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 667 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 676 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 683 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 685 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 693 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 702 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 709 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 711 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 719 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 728 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 740 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 131:
#line 741 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 132:
#line 742 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 133:
#line 743 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 134:
#line 744 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 135:
#line 747 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 136:
#line 748 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 137:
#line 755 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 138:
#line 782 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 139:
#line 816 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	      List_Add(Symbol_L, &TheSymbol);
	    }
	  }
	  else
	    vyyerror("Unknown Variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 140:
#line 863 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 141:
#line 878 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 142:
#line 887 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 143:
#line 902 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 144:
#line 914 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 145:
#line 928 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 146:
#line 951 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by Zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 147:
#line 975 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 148:
#line 987 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 149:
#line 1001 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 150:
#line 1013 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 151:
#line 1027 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 152:
#line 1043 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 153:
#line 1069 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 1076 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 155:
#line 1082 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 156:
#line 1101 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 157:
#line 1112 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 158:
#line 1120 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 1126 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 160:
#line 1132 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 161:
#line 1151 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1157 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 163:
#line 1174 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 164:
#line 1180 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 165:
#line 1186 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1192 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1198 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1204 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 169:
#line 1223 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 170:
#line 1235 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1241 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 172:
#line 1260 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 173:
#line 1283 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 174:
#line 1291 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 175:
#line 1295 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1301 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1307 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 178:
#line 1319 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 179:
#line 1325 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1331 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1344 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 182:
#line 1349 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 183:
#line 1354 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 184:
#line 1359 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 185:
#line 1366 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 186:
#line 1367 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 187:
#line 1368 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 188:
#line 1373 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 189:
#line 1377 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1389 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 191:
#line 1407 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 192:
#line 1414 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 193:
#line 1419 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 194:
#line 1431 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing System Call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 195:
#line 1485 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 196:
#line 1505 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 197:
#line 1509 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 198:
#line 1531 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 199:
#line 1545 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 200:
#line 1559 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 201:
#line 1584 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 202:
#line 1609 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 203:
#line 1635 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 204:
#line 1641 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 205:
#line 1646 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 206:
#line 1651 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 207:
#line 1655 "Gmsh.y"
{
    ;
    break;}
case 208:
#line 1666 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 209:
#line 1671 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 210:
#line 1677 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 211:
#line 1681 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 212:
#line 1685 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 213:
#line 1689 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 214:
#line 1693 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 215:
#line 1698 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 216:
#line 1706 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 1709 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 1715 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 219:
#line 1735 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 220:
#line 1746 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 221:
#line 1764 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 222:
#line 1782 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 223:
#line 1800 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 224:
#line 1822 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1843 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1864 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 227:
#line 1882 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1908 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 229:
#line 1912 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 230:
#line 1923 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 231:
#line 1924 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 232:
#line 1928 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 233:
#line 1929 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 234:
#line 1930 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 1931 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 1932 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 1936 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 238:
#line 1937 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 239:
#line 1938 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 240:
#line 1939 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 241:
#line 1940 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 242:
#line 1941 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 243:
#line 1942 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 244:
#line 1943 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 245:
#line 1945 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 246:
#line 1951 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 247:
#line 1952 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 248:
#line 1953 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 249:
#line 1954 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 250:
#line 1955 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 251:
#line 1956 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 252:
#line 1957 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 253:
#line 1958 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 254:
#line 1959 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 255:
#line 1960 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 256:
#line 1961 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 257:
#line 1962 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 258:
#line 1963 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 259:
#line 1964 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 260:
#line 1965 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 261:
#line 1966 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 262:
#line 1967 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 263:
#line 1968 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 264:
#line 1969 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1970 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 266:
#line 1971 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1972 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 268:
#line 1973 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1974 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 1975 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 1976 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 272:
#line 1977 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 273:
#line 1978 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 274:
#line 1979 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 275:
#line 1980 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 276:
#line 1981 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 277:
#line 1982 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 278:
#line 1991 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 279:
#line 1992 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 280:
#line 1997 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 281:
#line 2008 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 282:
#line 2025 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 283:
#line 2036 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 284:
#line 2055 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 285:
#line 2071 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 286:
#line 2087 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 287:
#line 2103 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 288:
#line 2121 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 289:
#line 2127 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 290:
#line 2141 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 291:
#line 2145 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2149 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 293:
#line 2153 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2157 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2163 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 296:
#line 2167 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2171 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2175 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2182 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2185 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2191 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2194 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2200 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2203 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 305:
#line 2207 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 306:
#line 2214 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 307:
#line 2219 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 308:
#line 2226 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 309:
#line 2231 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 310:
#line 2245 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 311:
#line 2268 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 312:
#line 2284 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 313:
#line 2310 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 314:
#line 2318 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 315:
#line 2323 "Gmsh.y"
{ 
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 316:
#line 2327 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 317:
#line 2339 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 318:
#line 2360 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i) ;
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 319:
#line 2374 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd ;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 320:
#line 2401 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 321:
#line 2405 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
    ;
    break;}
case 322:
#line 2412 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 323:
#line 2423 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 324:
#line 2443 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 325:
#line 2456 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd ;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 326:
#line 2481 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 327:
#line 2485 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 328:
#line 2489 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 329:
#line 2494 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 330:
#line 2499 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 331:
#line 2518 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 332:
#line 2522 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 333:
#line 2536 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 334:
#line 2541 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 335:
#line 2548 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 336:
#line 2552 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 337:
#line 2556 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring)+1);
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2581 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


