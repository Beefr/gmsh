
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tAttractor	329
#define	tLayers	330
#define	tHole	331
#define	tAlias	332
#define	tAliasWithOptions	333
#define	tText2D	334
#define	tText3D	335
#define	tInterpolationScheme	336
#define	tTime	337
#define	tGrain	338
#define	tCombine	339
#define	tBSpline	340
#define	tBezier	341
#define	tNurbs	342
#define	tOrder	343
#define	tKnots	344
#define	tColor	345
#define	tColorTable	346
#define	tFor	347
#define	tIn	348
#define	tEndFor	349
#define	tIf	350
#define	tEndIf	351
#define	tExit	352
#define	tReturn	353
#define	tCall	354
#define	tFunction	355
#define	tShow	356
#define	tHide	357
#define	tGetValue	358
#define	tGMSH_MAJOR_VERSION	359
#define	tGMSH_MINOR_VERSION	360
#define	tGMSH_PATCH_VERSION	361
#define	tAFFECTPLUS	362
#define	tAFFECTMINUS	363
#define	tAFFECTTIMES	364
#define	tAFFECTDIVIDE	365
#define	tOR	366
#define	tAND	367
#define	tEQUAL	368
#define	tNOTEQUAL	369
#define	tLESSOREQUAL	370
#define	tGREATEROREQUAL	371
#define	tPLUSPLUS	372
#define	tMINUSMINUS	373
#define	UNARYPREC	374

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.315 2007-04-12 08:58:06 remacle Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Attractors.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static gmshSurface *myGmshSurface = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 78 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1230
#define	YYFLAG		-32768
#define	YYNTBASE	141

#define YYTRANSLATE(x) ((unsigned)(x) <= 374 ? yytranslate[x] : 210)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   126,     2,   136,     2,   125,     2,     2,   131,
   132,   123,   121,   137,   122,   135,   124,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   117,
     2,   119,   112,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   133,     2,   134,   130,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   138,     2,   139,   140,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   113,   114,   115,   116,   118,
   120,   127,   128,   129
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   204,   205,   212,   219,   221,   223,   225,   227,   229,
   231,   233,   238,   246,   256,   263,   270,   274,   281,   286,
   293,   303,   310,   320,   326,   335,   344,   356,   363,   373,
   383,   393,   395,   397,   405,   414,   421,   428,   435,   443,
   451,   459,   469,   477,   487,   505,   513,   521,   533,   542,
   551,   560,   569,   573,   578,   589,   597,   605,   614,   623,
   632,   640,   649,   655,   667,   673,   683,   685,   687,   689,
   690,   693,   700,   707,   714,   721,   726,   733,   740,   747,
   752,   759,   763,   768,   774,   778,   782,   787,   792,   796,
   804,   812,   816,   824,   828,   831,   834,   850,   853,   860,
   869,   878,   889,   891,   894,   896,   900,   905,   907,   913,
   925,   939,   940,   948,   949,   963,   964,   980,   981,   988,
   989,  1000,  1009,  1018,  1027,  1040,  1053,  1066,  1081,  1096,
  1111,  1112,  1125,  1126,  1139,  1140,  1153,  1154,  1171,  1172,
  1189,  1190,  1207,  1208,  1227,  1228,  1247,  1248,  1267,  1269,
  1272,  1278,  1286,  1296,  1299,  1309,  1316,  1326,  1336,  1345,
  1355,  1364,  1373,  1380,  1385,  1396,  1407,  1418,  1429,  1432,
  1434,  1438,  1441,  1444,  1447,  1451,  1455,  1459,  1463,  1467,
  1471,  1475,  1479,  1483,  1487,  1491,  1495,  1499,  1503,  1509,
  1514,  1519,  1524,  1529,  1534,  1539,  1544,  1549,  1554,  1559,
  1566,  1571,  1576,  1581,  1586,  1591,  1596,  1603,  1610,  1617,
  1622,  1627,  1632,  1637,  1642,  1647,  1652,  1657,  1662,  1667,
  1672,  1679,  1684,  1689,  1694,  1699,  1704,  1709,  1716,  1723,
  1730,  1735,  1737,  1739,  1741,  1743,  1745,  1747,  1749,  1751,
  1757,  1762,  1767,  1770,  1776,  1780,  1787,  1792,  1800,  1807,
  1809,  1812,  1815,  1819,  1823,  1835,  1845,  1853,  1861,  1863,
  1867,  1869,  1871,  1874,  1878,  1883,  1889,  1892,  1896,  1900,
  1906,  1911,  1913,  1915,  1917,  1921,  1928,  1930,  1932,  1936,
  1940,  1950,  1958,  1960,  1966,  1970,  1977,  1979,  1983,  1985,
  1987,  1989,  1991,  1998,  2003,  2008,  2013,  2020,  2027
};

static const short yyrhs[] = {   142,
     0,     1,     6,     0,     0,   142,   143,     0,   146,     0,
   145,     0,   165,     0,   167,     0,   168,     0,   171,     0,
   172,     0,   173,     0,   174,     0,   177,     0,   194,     0,
   195,     0,   196,     0,   176,     0,   175,     0,   119,     0,
   119,   119,     0,    35,   131,     5,   132,     6,     0,    35,
   131,     5,   132,   144,   208,     6,     0,    35,   131,     5,
   137,   204,   132,     6,     0,    35,   131,     5,   137,   204,
   132,   144,   208,     6,     0,     4,     5,   138,   147,   139,
     6,     0,     4,     5,     4,   199,   138,   147,   139,     6,
     0,     0,   147,   150,     0,   147,   154,     0,   147,   157,
     0,   147,   159,     0,   147,   160,     0,   147,   162,     0,
   197,     0,   148,   137,   197,     0,   197,     0,   149,   137,
   197,     0,     0,     0,     4,   151,   131,   148,   132,   152,
   138,   149,   139,     6,     0,   208,     0,   153,   137,   208,
     0,     0,    80,   131,   197,   137,   197,   137,   197,   132,
   155,   138,   153,   139,     6,     0,   208,     0,   156,   137,
   208,     0,     0,    81,   131,   197,   137,   197,   137,   197,
   137,   197,   132,   158,   138,   156,   139,     6,     0,    82,
   138,   201,   139,   138,   201,   139,     6,     0,    82,   138,
   201,   139,   138,   201,   139,   138,   201,   139,   138,   201,
   139,     6,     0,     0,    83,   161,   138,   149,   139,     6,
     0,    84,   131,   197,   132,   202,     6,     0,     7,     0,
   108,     0,   109,     0,   110,     0,   111,     0,   127,     0,
   128,     0,     4,   163,   197,     6,     0,     4,   133,   197,
   134,   163,   197,     6,     0,     4,   133,   138,   204,   139,
   134,   163,   202,     6,     0,     4,   133,   134,     7,   202,
     6,     0,     4,   133,   134,   108,   202,     6,     0,     4,
   164,     6,     0,     4,   133,   197,   134,   164,     6,     0,
     4,     7,   209,     6,     0,     4,   135,     4,     7,   209,
     6,     0,     4,   133,   197,   134,   135,     4,     7,   209,
     6,     0,     4,   135,     4,   163,   197,     6,     0,     4,
   133,   197,   134,   135,     4,   163,   197,     6,     0,     4,
   135,     4,   164,     6,     0,     4,   133,   197,   134,   135,
     4,   164,     6,     0,     4,   135,    91,   135,     4,     7,
   205,     6,     0,     4,   133,   197,   134,   135,    91,   135,
     4,     7,   205,     6,     0,     4,   135,    92,     7,   206,
     6,     0,     4,   133,   197,   134,   135,    92,     7,   206,
     6,     0,    64,   131,     4,   132,   135,     4,     7,   197,
     6,     0,    64,   131,     4,   132,   135,     4,     7,   209,
     6,     0,   197,     0,   209,     0,    43,   131,   197,   132,
     7,   199,     6,     0,    60,    43,   131,   166,   132,     7,
   202,     6,     0,    75,    43,   202,     7,   202,     6,     0,
    75,    46,   202,     7,   202,     6,     0,    52,    53,   202,
     7,   197,     6,     0,    46,   131,   197,   132,     7,   202,
     6,     0,    50,   131,   197,   132,     7,   202,     6,     0,
    44,   131,   197,   132,     7,   202,     6,     0,    44,   131,
   197,   132,     7,   202,    56,   199,     6,     0,    45,   131,
   197,   132,     7,   202,     6,     0,    45,   131,   197,   132,
     7,   202,    56,   199,     6,     0,    54,   131,   197,   132,
     7,   138,   197,   137,   197,   137,     5,   137,     5,   137,
     5,   139,     6,     0,    86,   131,   197,   132,     7,   202,
     6,     0,    87,   131,   197,   132,     7,   202,     6,     0,
    88,   131,   197,   132,     7,   202,    90,   202,    89,   197,
     6,     0,    46,    71,   131,   197,   132,     7,   202,     6,
     0,    60,    46,   131,   166,   132,     7,   202,     6,     0,
    56,    49,   131,   197,   132,     7,   202,     6,     0,    57,
    49,   131,   197,   132,     7,   202,     6,     0,    12,    13,
     6,     0,    13,    49,   197,     6,     0,    54,    49,   131,
   197,   132,     7,     5,     5,     5,     6,     0,    47,   131,
   197,   132,     7,   202,     6,     0,    48,   131,   197,   132,
     7,   202,     6,     0,    49,    71,   131,   197,   132,     7,
   202,     6,     0,    60,    49,   131,   166,   132,     7,   202,
     6,     0,    59,    51,   131,   197,   132,     7,   202,     6,
     0,    51,   131,   197,   132,     7,   202,     6,     0,    60,
    51,   131,   166,   132,     7,   202,     6,     0,    66,   199,
   138,   169,   139,     0,    65,   138,   199,   137,   199,   137,
   197,   139,   138,   169,   139,     0,    67,   199,   138,   169,
   139,     0,    68,   138,   199,   137,   197,   139,   138,   169,
   139,     0,   171,     0,   170,     0,   168,     0,     0,   170,
   167,     0,   170,    43,   138,   204,   139,     6,     0,   170,
    46,   138,   204,   139,     6,     0,   170,    49,   138,   204,
   139,     6,     0,   170,    51,   138,   204,   139,     6,     0,
    70,   138,   170,   139,     0,    70,     4,   133,   197,   134,
     6,     0,    78,     4,   133,   197,   134,     6,     0,    79,
     4,   133,   197,   134,     6,     0,    73,   138,   170,   139,
     0,    73,     4,   133,   197,   134,     6,     0,    73,     4,
     6,     0,    73,     4,     4,     6,     0,    91,   205,   138,
   170,   139,     0,   102,   208,     6,     0,   103,   208,     6,
     0,   102,   138,   170,   139,     0,   103,   138,   170,   139,
     0,     4,   209,     6,     0,     4,     4,   133,   197,   134,
   208,     6,     0,     4,     4,     4,   133,   197,   134,     6,
     0,     4,   197,     6,     0,    64,   131,     4,   132,   135,
     4,     6,     0,    85,     4,     6,     0,    98,     6,     0,
    40,     6,     0,    40,   138,   197,   137,   197,   137,   197,
   137,   197,   137,   197,   137,   197,   139,     6,     0,    41,
     6,     0,    93,   131,   197,     8,   197,   132,     0,    93,
   131,   197,     8,   197,     8,   197,   132,     0,    93,     4,
    94,   138,   197,     8,   197,   139,     0,    93,     4,    94,
   138,   197,     8,   197,     8,   197,   139,     0,    95,     0,
   101,     4,     0,    99,     0,   100,     4,     6,     0,    96,
   131,   197,   132,     0,    97,     0,    69,   199,   138,   170,
   139,     0,    69,   138,   199,   137,   199,   137,   197,   139,
   138,   170,   139,     0,    69,   138,   199,   137,   199,   137,
   199,   137,   197,   139,   138,   170,   139,     0,     0,    69,
   199,   138,   170,   178,   192,   139,     0,     0,    69,   138,
   199,   137,   199,   137,   197,   139,   138,   170,   179,   192,
   139,     0,     0,    69,   138,   199,   137,   199,   137,   199,
   137,   197,   139,   138,   170,   180,   192,   139,     0,     0,
    69,   138,   170,   181,   192,   139,     0,     0,    69,     4,
   133,   197,   134,   138,   170,   182,   192,   139,     0,    69,
    43,   138,   197,   137,   199,   139,     6,     0,    69,    46,
   138,   197,   137,   199,   139,     6,     0,    69,    49,   138,
   197,   137,   199,   139,     6,     0,    69,    43,   138,   197,
   137,   199,   137,   199,   137,   197,   139,     6,     0,    69,
    46,   138,   197,   137,   199,   137,   199,   137,   197,   139,
     6,     0,    69,    49,   138,   197,   137,   199,   137,   199,
   137,   197,   139,     6,     0,    69,    43,   138,   197,   137,
   199,   137,   199,   137,   199,   137,   197,   139,     6,     0,
    69,    46,   138,   197,   137,   199,   137,   199,   137,   199,
   137,   197,   139,     6,     0,    69,    49,   138,   197,   137,
   199,   137,   199,   137,   199,   137,   197,   139,     6,     0,
     0,    69,    43,   138,   197,   137,   199,   139,   183,   138,
   192,   139,     6,     0,     0,    69,    46,   138,   197,   137,
   199,   139,   184,   138,   192,   139,     6,     0,     0,    69,
    49,   138,   197,   137,   199,   139,   185,   138,   192,   139,
     6,     0,     0,    69,    43,   138,   197,   137,   199,   137,
   199,   137,   197,   139,   186,   138,   192,   139,     6,     0,
     0,    69,    46,   138,   197,   137,   199,   137,   199,   137,
   197,   139,   187,   138,   192,   139,     6,     0,     0,    69,
    49,   138,   197,   137,   199,   137,   199,   137,   197,   139,
   188,   138,   192,   139,     6,     0,     0,    69,    43,   138,
   197,   137,   199,   137,   199,   137,   199,   137,   197,   139,
   189,   138,   192,   139,     6,     0,     0,    69,    46,   138,
   197,   137,   199,   137,   199,   137,   199,   137,   197,   139,
   190,   138,   192,   139,     6,     0,     0,    69,    49,   138,
   197,   137,   199,   137,   199,   137,   199,   137,   197,   139,
   191,   138,   192,   139,     6,     0,   193,     0,   192,   193,
     0,    76,   138,   197,   139,     6,     0,    76,   138,   202,
   137,   202,   139,     6,     0,    76,   138,   202,   137,   202,
   137,   202,   139,     6,     0,    72,     6,     0,    77,   131,
   197,   132,     7,   202,    61,   197,     6,     0,    58,    46,
   202,     7,   197,     6,     0,    58,    46,   202,     7,   197,
    61,    63,   197,     6,     0,    58,    46,   202,     7,   197,
    61,    62,   197,     6,     0,    58,    49,   138,   197,   139,
     7,   202,     6,     0,    58,    49,   138,   197,   139,     7,
   202,     4,     6,     0,    55,    49,   138,   197,   139,     7,
   202,     6,     0,    58,    51,   138,   197,   139,     7,   202,
     6,     0,    72,    49,   202,     7,   197,     6,     0,    72,
    49,   202,     6,     0,    43,   138,   204,   139,    94,    49,
   138,   197,   139,     6,     0,    46,   138,   204,   139,    94,
    49,   138,   197,   139,     6,     0,    46,   138,   204,   139,
    94,    51,   138,   197,   139,     6,     0,    49,   138,   204,
   139,    94,    51,   138,   197,   139,     6,     0,    74,     6,
     0,   198,     0,   131,   197,   132,     0,   122,   197,     0,
   121,   197,     0,   126,   197,     0,   197,   122,   197,     0,
   197,   121,   197,     0,   197,   123,   197,     0,   197,   124,
   197,     0,   197,   125,   197,     0,   197,   130,   197,     0,
   197,   117,   197,     0,   197,   119,   197,     0,   197,   118,
   197,     0,   197,   120,   197,     0,   197,   115,   197,     0,
   197,   116,   197,     0,   197,   114,   197,     0,   197,   113,
   197,     0,   197,   112,   197,     8,   197,     0,    14,   131,
   197,   132,     0,    15,   131,   197,   132,     0,    16,   131,
   197,   132,     0,    17,   131,   197,   132,     0,    18,   131,
   197,   132,     0,    19,   131,   197,   132,     0,    20,   131,
   197,   132,     0,    21,   131,   197,   132,     0,    22,   131,
   197,   132,     0,    24,   131,   197,   132,     0,    25,   131,
   197,   137,   197,   132,     0,    26,   131,   197,   132,     0,
    27,   131,   197,   132,     0,    28,   131,   197,   132,     0,
    29,   131,   197,   132,     0,    30,   131,   197,   132,     0,
    31,   131,   197,   132,     0,    32,   131,   197,   137,   197,
   132,     0,    33,   131,   197,   137,   197,   132,     0,    34,
   131,   197,   137,   197,   132,     0,    23,   131,   197,   132,
     0,    14,   133,   197,   134,     0,    15,   133,   197,   134,
     0,    16,   133,   197,   134,     0,    17,   133,   197,   134,
     0,    18,   133,   197,   134,     0,    19,   133,   197,   134,
     0,    20,   133,   197,   134,     0,    21,   133,   197,   134,
     0,    22,   133,   197,   134,     0,    24,   133,   197,   134,
     0,    25,   133,   197,   137,   197,   134,     0,    26,   133,
   197,   134,     0,    27,   133,   197,   134,     0,    28,   133,
   197,   134,     0,    29,   133,   197,   134,     0,    30,   133,
   197,   134,     0,    31,   133,   197,   134,     0,    32,   133,
   197,   137,   197,   134,     0,    33,   133,   197,   137,   197,
   134,     0,    34,   133,   197,   137,   197,   134,     0,    23,
   133,   197,   134,     0,     3,     0,     9,     0,    10,     0,
    11,     0,   105,     0,   106,     0,   107,     0,     4,     0,
     4,   140,   138,   197,   139,     0,     4,   133,   197,   134,
     0,   136,     4,   133,   134,     0,     4,   164,     0,     4,
   133,   197,   134,   164,     0,     4,   135,     4,     0,     4,
   133,   197,   134,   135,     4,     0,     4,   135,     4,   164,
     0,     4,   133,   197,   134,   135,     4,   164,     0,   104,
   131,     5,   137,   197,   132,     0,   200,     0,   122,   199,
     0,   121,   199,     0,   199,   122,   199,     0,   199,   121,
   199,     0,   138,   197,   137,   197,   137,   197,   137,   197,
   137,   197,   139,     0,   138,   197,   137,   197,   137,   197,
   137,   197,   139,     0,   138,   197,   137,   197,   137,   197,
   139,     0,   131,   197,   137,   197,   137,   197,   132,     0,
   202,     0,   201,   137,   202,     0,   197,     0,   203,     0,
   138,   139,     0,   138,   204,   139,     0,   122,   138,   204,
   139,     0,   197,   123,   138,   204,   139,     0,   122,   203,
     0,   197,   123,   203,     0,   197,     8,   197,     0,   197,
     8,   197,     8,   197,     0,    43,   138,   197,   139,     0,
   168,     0,   171,     0,   177,     0,     4,   133,   134,     0,
     4,   133,   138,   204,   139,   134,     0,   197,     0,   203,
     0,   204,   137,   197,     0,   204,   137,   203,     0,   138,
   197,   137,   197,   137,   197,   137,   197,   139,     0,   138,
   197,   137,   197,   137,   197,   139,     0,     4,     0,     4,
   135,    91,   135,     4,     0,   138,   207,   139,     0,     4,
   133,   197,   134,   135,    92,     0,   205,     0,   207,   137,
   205,     0,   209,     0,     4,     0,     5,     0,    42,     0,
    37,   131,   208,   137,   208,   132,     0,    38,   131,   208,
   132,     0,    39,   131,   208,   132,     0,    36,   131,   208,
   132,     0,    36,   131,   208,   137,   204,   132,     0,    36,
   131,     4,   135,     4,   132,     0,    36,   131,     4,   133,
   197,   134,   135,     4,   132,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   143,   145,   150,   152,   155,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   173,
   178,   184,   190,   205,   218,   246,   254,   263,   271,   272,
   273,   274,   275,   276,   279,   282,   286,   289,   293,   484,
   502,   512,   518,   525,   533,   539,   545,   552,   560,   566,
   572,   582,   587,   591,   600,   602,   603,   604,   605,   608,
   610,   613,   648,   687,   741,   758,   776,   787,   804,   811,
   825,   842,   868,   895,   909,   926,   940,   957,   977,  1000,
  1010,  1024,  1029,  1037,  1063,  1079,  1108,  1139,  1161,  1179,
  1197,  1215,  1241,  1259,  1285,  1305,  1329,  1353,  1379,  1396,
  1415,  1433,  1472,  1477,  1482,  1488,  1510,  1532,  1548,  1568,
  1585,  1602,  1622,  1628,  1633,  1638,  1645,  1647,  1648,  1651,
  1656,  1660,  1683,  1706,  1729,  1756,  1769,  1775,  1781,  1792,
  1802,  1812,  1828,  1846,  1860,  1867,  1873,  1882,  1895,  1946,
  1961,  1972,  1992,  2002,  2024,  2028,  2033,  2038,  2048,  2065,
  2081,  2107,  2134,  2166,  2173,  2178,  2184,  2188,  2196,  2205,
  2213,  2221,  2225,  2233,  2237,  2245,  2249,  2257,  2261,  2268,
  2272,  2284,  2291,  2298,  2305,  2312,  2319,  2326,  2333,  2340,
  2347,  2351,  2358,  2362,  2369,  2373,  2380,  2384,  2391,  2395,
  2402,  2406,  2413,  2417,  2424,  2428,  2435,  2439,  2449,  2453,
  2458,  2468,  2490,  2514,  2518,  2541,  2560,  2578,  2596,  2625,
  2660,  2665,  2692,  2706,  2724,  2731,  2737,  2740,  2748,  2758,
  2760,  2761,  2762,  2763,  2764,  2765,  2766,  2767,  2774,  2775,
  2776,  2777,  2778,  2779,  2780,  2781,  2782,  2783,  2784,  2785,
  2786,  2787,  2788,  2789,  2790,  2791,  2792,  2793,  2794,  2795,
  2796,  2797,  2798,  2799,  2800,  2801,  2802,  2803,  2804,  2805,
  2807,  2808,  2809,  2810,  2811,  2812,  2813,  2814,  2815,  2816,
  2817,  2818,  2819,  2820,  2821,  2822,  2823,  2824,  2825,  2826,
  2827,  2832,  2837,  2838,  2839,  2840,  2841,  2842,  2846,  2862,
  2877,  2897,  2911,  2924,  2947,  2965,  2983,  3001,  3019,  3026,
  3031,  3035,  3039,  3043,  3049,  3054,  3058,  3062,  3068,  3074,
  3081,  3087,  3091,  3096,  3100,  3108,  3118,  3127,  3135,  3141,
  3152,  3172,  3182,  3192,  3202,  3219,  3245,  3251,  3255,  3259,
  3271,  3276,  3288,  3295,  3316,  3321,  3335,  3341,  3347,  3352,
  3358,  3363,  3371,  3379,  3393,  3407,  3411,  3430,  3452
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tAttractor",
"tLayers","tHole","tAlias","tAliasWithOptions","tText2D","tText3D","tInterpolationScheme",
"tTime","tGrain","tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn",
"tCall","tFunction","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL",
"'+'","'-'","'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems",
"GeoFormatItem","SendToFile","Printf","View","Views","ElementCoords","ElementValues",
"Element","@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4",
"InterpolationMatrix","Time","@5","Grain","NumericAffectation","NumericIncrement",
"Affectation","PhysicalId","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Colorify","Visibility","Command","Loop","Extrude","@6",
"@7","@8","@9","@10","@11","@12","@13","@14","@15","@16","@17","@18","@19","ExtrudeParameters",
"ExtrudeParameter","Transfinite","Embedding","Coherence","FExpr","FExpr_Single",
"VExpr","VExpr_Single","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExprVar",
"StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   141,   141,   142,   142,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   144,
   144,   145,   145,   145,   145,   146,   146,   147,   147,   147,
   147,   147,   147,   147,   148,   148,   149,   149,   151,   152,
   150,   153,   153,   155,   154,   156,   156,   158,   157,   159,
   159,   161,   160,   162,   163,   163,   163,   163,   163,   164,
   164,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   166,   166,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   168,   168,   168,   168,   169,   169,   169,   170,
   170,   170,   170,   170,   170,   171,   171,   171,   171,   172,
   172,   172,   172,   173,   174,   174,   174,   174,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   176,   176,
   176,   176,   176,   176,   176,   176,   176,   176,   177,   177,
   177,   178,   177,   179,   177,   180,   177,   181,   177,   182,
   177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
   183,   177,   184,   177,   185,   177,   186,   177,   187,   177,
   188,   177,   189,   177,   190,   177,   191,   177,   192,   192,
   193,   193,   193,   193,   193,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   195,   195,   195,   195,   196,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   198,   198,   198,   198,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   198,   198,   199,
   199,   199,   199,   199,   200,   200,   200,   200,   201,   201,
   202,   202,   202,   202,   202,   202,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   204,   204,   204,   204,
   205,   205,   205,   205,   206,   206,   207,   207,   208,   208,
   209,   209,   209,   209,   209,   209,   209,   209,   209
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
    14,     0,     6,     6,     1,     1,     1,     1,     1,     1,
     1,     4,     7,     9,     6,     6,     3,     6,     4,     6,
     9,     6,     9,     5,     8,     8,    11,     6,     9,     9,
     9,     1,     1,     7,     8,     6,     6,     6,     7,     7,
     7,     9,     7,     9,    17,     7,     7,    11,     8,     8,
     8,     8,     3,     4,    10,     7,     7,     8,     8,     8,
     7,     8,     5,    11,     5,     9,     1,     1,     1,     0,
     2,     6,     6,     6,     6,     4,     6,     6,     6,     4,
     6,     3,     4,     5,     3,     3,     4,     4,     3,     7,
     7,     3,     7,     3,     2,     2,    15,     2,     6,     8,
     8,    10,     1,     2,     1,     3,     4,     1,     5,    11,
    13,     0,     7,     0,    13,     0,    15,     0,     6,     0,
    10,     8,     8,     8,    12,    12,    12,    14,    14,    14,
     0,    12,     0,    12,     0,    12,     0,    16,     0,    16,
     0,    16,     0,    18,     0,    18,     0,    18,     1,     2,
     5,     7,     9,     2,     9,     6,     9,     9,     8,     9,
     8,     8,     6,     4,    10,    10,    10,    10,     2,     1,
     3,     2,     2,     2,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     1,     1,     1,     1,     1,     1,     1,     1,     5,
     4,     4,     2,     5,     3,     6,     4,     7,     6,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     1,     3,
     1,     1,     2,     3,     4,     5,     2,     3,     3,     5,
     4,     1,     1,     1,     3,     6,     1,     1,     3,     3,
     9,     7,     1,     5,     3,     6,     1,     3,     1,     1,
     1,     1,     6,     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   153,     0,   158,     0,   155,
     0,     0,     0,     0,     4,     6,     5,     7,     8,     9,
    10,    11,    12,    13,    19,    18,    14,    15,    16,    17,
   282,   289,   341,    55,   283,   284,   285,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   342,     0,   286,   287,   288,    56,    57,    58,
    59,     0,     0,     0,    60,    61,     0,     0,     0,     0,
     0,     0,     0,   220,     0,     0,     0,     0,   146,     0,
   148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,   120,     0,     0,   120,     0,     0,   120,   219,
     0,     0,     0,     0,     0,     0,     0,     0,   333,     0,
     0,     0,     0,     0,   145,     0,   154,   340,   341,   120,
     0,   339,   120,     0,     0,     0,     0,     0,   293,     0,
    28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   289,
   223,   222,   224,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    67,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
   103,     0,     0,     0,     0,   289,     0,     0,   322,   323,
   324,   327,   328,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   311,     0,   312,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   302,   301,     0,     0,     0,
     0,   120,   120,     0,     0,     0,     0,     0,     0,     0,
     0,   168,     0,   120,     0,     0,     0,     0,   132,     0,
     0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     0,   120,     0,     0,     0,   156,     0,   135,     0,   136,
     0,     0,   295,     0,     0,     0,    69,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   340,
     0,     0,     0,     0,     0,     0,   221,     0,     0,     0,
     0,    55,     0,     0,     0,     0,     0,    62,     0,   238,
   237,   235,   236,   231,   233,   232,   234,   226,   225,   227,
   228,   229,   230,   104,     0,     0,     0,     0,     0,     0,
   222,   317,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    82,    83,     0,     0,     0,     0,     0,     0,
     0,   304,   303,   119,     0,   118,   117,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   121,     0,
     0,   162,     0,   126,   214,     0,   133,     0,   130,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   157,   137,   138,     0,   291,   297,     0,    28,    39,
     0,     0,     0,    52,     0,     0,    29,    30,    31,    32,
    33,    34,   240,   261,   241,   262,   242,   263,   243,   264,
   244,   265,   245,   266,   246,   267,   247,   268,   248,   269,
   260,   281,   249,   270,     0,     0,   251,   272,   252,   273,
   253,   274,   254,   275,   255,   276,   256,   277,     0,     0,
     0,     0,     0,     0,     0,     0,   346,     0,     0,   344,
   345,     0,     0,     0,     0,     0,    55,     0,     0,     0,
     0,     0,    74,     0,     0,     0,     0,   292,     0,    22,
    20,     0,     0,     0,     0,   325,     0,     0,   319,   227,
   318,   329,   330,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   314,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   113,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   199,     0,   159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   134,     0,     0,
     0,     0,   294,     0,   290,     0,     0,     0,     0,     0,
     0,     0,    26,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   291,    65,    66,     0,
     0,     0,     0,     0,    68,    70,    72,     0,     0,   337,
     0,    78,   239,    21,     0,     0,     0,     0,     0,   321,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   315,     0,    88,     0,     0,     0,
     0,     0,   206,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   120,     0,     0,     0,
     0,     0,     0,     0,   204,     0,     0,   169,   200,     0,
     0,   127,   213,   131,    86,    87,   128,   129,     0,     0,
     0,   334,     0,     0,     0,   149,   141,   296,   140,     0,
     0,     0,     0,     0,   309,     0,     0,   250,   271,   257,
   278,   258,   279,   259,   280,     0,   348,   347,   343,   299,
     0,    55,     0,     0,     0,     0,    63,     0,     0,     0,
   335,    23,    24,     0,     0,    84,     0,   320,     0,    91,
     0,    93,     0,     0,    89,     0,     0,   106,   107,     0,
     0,    90,   111,   316,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,     0,
     0,     0,     0,   120,   170,     0,   181,     0,   183,     0,
   185,     0,     0,     0,     0,   311,     0,     0,     0,     0,
   163,    96,    97,     0,     0,     0,     0,   298,    27,     0,
    35,     0,     0,     0,     0,     0,    37,     0,     0,     0,
     0,     0,    75,     0,     0,    76,     0,   338,     0,     0,
   326,     0,     0,     0,    99,     0,     0,   108,     0,     0,
     0,   211,   101,   102,     0,     0,     0,   209,   212,   110,
    85,   100,   109,   112,     0,     0,     0,   308,     0,   307,
     0,     0,     0,   172,     0,     0,   173,     0,     0,   174,
     0,   122,   123,   124,   125,     0,     0,     0,     0,     0,
     0,     0,   332,     0,   151,   150,    40,     0,     0,     0,
   310,     0,     0,     0,     0,     0,    64,    71,    73,     0,
    79,     0,    25,     0,     0,    92,    94,     0,     0,     0,
     0,     0,   208,   207,   210,    80,    81,   120,     0,   116,
     0,     0,     0,     0,     0,     0,     0,   201,     0,     0,
   120,     0,     0,     0,     0,     0,    36,     0,     0,     0,
    38,    53,    54,   349,     0,   336,     0,   215,   216,   217,
   218,   105,     0,     0,     0,   306,   171,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
     0,     0,   331,   152,     0,     0,     0,     0,    77,     0,
     0,   114,     0,   187,     0,     0,   189,     0,     0,   191,
     0,     0,     0,   202,     0,   160,     0,   120,    98,     0,
    44,     0,    50,     0,     0,     0,   305,   175,     0,     0,
   182,   176,     0,     0,   184,   177,     0,     0,   186,     0,
     0,     0,   166,     0,     0,     0,     0,     0,     0,     0,
   193,     0,   195,     0,   197,   203,   205,   165,   161,     0,
    41,     0,    48,     0,     0,     0,     0,   178,     0,     0,
   179,     0,     0,   180,     0,     0,     0,    42,     0,     0,
   147,     0,     0,     0,     0,     0,     0,     0,   167,     0,
     0,     0,     0,     0,   188,     0,   190,     0,   192,     0,
    43,    45,     0,    46,     0,    95,     0,     0,     0,     0,
     0,    51,   194,   196,   198,    47,    49,     0,     0,     0
};

static const short yydefgoto[] = {  1228,
     2,    55,   642,    56,    57,   386,   940,   946,   567,   727,
  1066,  1187,   568,  1155,  1213,   569,  1189,   570,   571,   731,
   572,   121,   209,    58,   502,   529,   299,   515,   516,   300,
    62,    63,    64,    65,    66,   301,   705,  1127,  1170,   530,
   992,   995,   998,  1001,  1139,  1143,  1147,  1179,  1182,  1185,
   701,   702,    68,    69,    70,   318,   124,   336,   166,   844,
   845,   320,   304,   191,   637,   761,   201,   202
};

static const short yypact[] = {  2752,
    40,  2829,-32768,  1880,    93,    61,    -6,     7,   165,   -51,
    53,    57,   -31,   132,   136,   -34,   182,   186,   268,   -17,
   276,   363,   375,   490,   288,   750,   202,   267,   382,   382,
   296,    35,    12,   391,    14,   449,   339,   463,   484,   502,
   403,   411,   423,    26,    37,-32768,   428,-32768,   524,-32768,
   560,   573,    21,    29,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    20,    31,   548,-32768,-32768,-32768,  -104,   -69,   128,
   253,   289,   374,   436,   458,   517,   532,   555,   559,   574,
   581,   599,   621,   628,   640,   641,   667,   675,   470,   475,
   485,   488,-32768,   513,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2175,  2175,  2175,-32768,-32768,  2175,  1674,    11,   576,
  2175,   631,  1947,-32768,   648,   660,  2175,   670,-32768,  2175,
-32768,  2175,  2014,  2175,  2175,   552,  2175,  2014,  2175,  2175,
   558,  2014,  2175,  2175,  1284,   566,  2175,   562,   577,   582,
  1284,   578,   583,   593,   594,   598,   614,   617,   749,   382,
   382,   382,  2175,  2175,   -33,-32768,   174,   382,   627,   625,
   630,   637,  1845,   393,   634,-32768,  1284,    41,-32768,-32768,
  1284,  1284,   661,   664,   801,  2175,  2175,  2175,   679,  2175,
   680,   723,  2175,  2175,-32768,   824,-32768,-32768,-32768,-32768,
   825,-32768,-32768,   837,   718,  2175,   856,   739,-32768,   382,
-32768,   873,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,
  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,
  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,
  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,
  2175,  2175,  2175,  2175,   519,   588,   588,   588,   875,   571,
   751,   751,   751,  5063,    43,  2014,  2842,    69,   748,   877,
   754,  1986,-32768,-32768,  2175,  2175,  2175,  2175,  2175,  2175,
  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,  2175,-32768,
-32768,  2106,   -83,  3596,  5084,   629,   753,  2014,-32768,-32768,
-32768,  2507,-32768,    70,  5105,  5126,  2175,  5147,   312,  5168,
  5189,  2175,   506,  5210,  5231,  1414,  1153,  2537,   885,-32768,
  2175,  5252,  2175,  2175,  2175,   886,  2175,  2175,  2175,  2138,
  2138,  2138,  2138,   762,   -36,-32768,-32768,  3622,  3648,   382,
   382,   606,   606,   254,  2175,  2175,  2175,  2175,  1845,  1845,
  2175,  2893,   309,-32768,  2175,   690,    68,   889,-32768,  2175,
  1051,   890,   891,  2175,  2175,-32768,  5273,  5294,  5315,   805,
  3674,-32768,   763,  2558,  5336,-32768,  1190,-32768,  1321,-32768,
  2175,  4350,   166,  2175,   441,    10,-32768,  5357,  4373,  5378,
  4396,  5399,  4419,  5420,  4442,  5441,  4465,  5462,  4488,  5483,
  4511,  5504,  4534,  5525,  4557,  5546,  4580,  5567,  4603,  3700,
  3726,  5588,  4626,  5609,  4649,  5630,  4672,  5651,  4695,  5672,
  4718,  5693,  4741,  3752,  3778,  3804,  3830,  3856,  3882,   677,
   -60,   765,   772,   774,   768,  2175,-32768,  1284,  1284,   674,
   261,   548,  2175,   901,   904,    32,   776,-32768,  2581,   830,
  1476,   662,   662,   557,   557,   557,   557,   448,   448,   751,
   751,   751,   751,-32768,    64,  2014,  2175,   905,  1709,  2175,
   751,-32768,  2175,  2014,  2014,   817,   906,   909,  5714,   910,
   826,   915,   917,  5735,   831,   919,   920,  2014,-32768,   684,
  1544,  2175,  5756,   921,  2655,  5777,  5798,  2175,  2954,  2982,
  5819,   802,  6071,-32768,   803,   804,   806,   798,   382,  2175,
  2175,-32768,-32768,-32768,   800,  2893,-32768,   818,  2175,  4764,
  3908,  3934,  3960,  3570,   126,   227,     2,   203,-32768,   592,
   382,  1451,  4787,-32768,-32768,  2175,-32768,  4810,-32768,  1284,
  1284,  4833,  4856,   930,   933,   936,   827,  2175,  1702,  2175,
  2175,-32768,-32768,-32768,  4879,   265,-32768,  3010,-32768,-32768,
   832,   833,   823,-32768,   834,   960,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2175,  2175,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2175,  2175,
  2175,  2175,  2175,  2175,  2175,   963,-32768,  2014,   588,-32768,
-32768,  2175,  4902,   962,   965,   835,-32768,    17,  2175,   966,
   967,  2269,-32768,   968,   841,    26,   970,-32768,  2175,-32768,
   858,   588,   326,  3986,   382,-32768,  2014,  3038,  2600,   751,
-32768,  2507,-32768,   929,  1284,  1284,   973,  1284,   773,  1284,
  1284,   975,   932,  1284,  1284,   688,-32768,  2014,  2299,   977,
   847,   979,   980,   982,  1522,   983,   984,   999,  1000,  1001,
  1005,  1008,  1016,   371,  4012,  4038,-32768,-32768,  3066,   883,
   382,   382,   382,  2014,  2014,  2014,  2014,  1031,   900,   908,
   -24,-32768,   407,-32768,   592,  1034,  2320,  1036,  1037,  1038,
  1039,  1040,  1284,  1284,  1284,  1043,  4064,-32768,  2625,  1811,
  1046,  1045,-32768,  1048,-32768,    15,   925,  2175,  2175,  1284,
   922,  2175,-32768,  5840,  4925,  5861,  4948,  5882,  4971,  5903,
  4994,  5017,   926,   347,   927,  5924,   127,-32768,-32768,    13,
   298,   931,  1054,  2343,-32768,-32768,-32768,    26,  2175,-32768,
   689,-32768,  6071,-32768,  1059,    76,  2175,    77,   698,-32768,
  2175,   934,    63,   152,  1284,  1063,   935,   937,  1064,  1065,
  1284,   939,  1068,  1072,-32768,   699,-32768,  1074,  2175,  1284,
  1284,  1284,-32768,   534,  1284,  1284,  1284,  1284,  1284,  1284,
  1284,   616,  2175,  2175,  2175,   942,-32768,   282,   315,   322,
   702,   707,   710,   711,-32768,  1284,  2175,-32768,-32768,  1845,
   -21,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1075,  1076,
   993,-32768,  2175,  2175,  2175,-32768,-32768,   166,-32768,  1079,
  2175,  4090,  4116,   715,-32768,  2175,  5945,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   951,-32768,-32768,-32768,-32768,
  1284,   548,  2175,  1081,  1084,    32,-32768,  1083,  5040,    26,
-32768,-32768,-32768,   588,  4142,-32768,   956,  6071,  2175,-32768,
   382,-32768,   382,  1085,-32768,  2175,  2175,-32768,-32768,  1086,
  2175,-32768,-32768,-32768,  1088,  4168,  1100,  1103,  1106,  2175,
  2175,   851,  1107,  1109,  1110,  1113,  1115,  1116,-32768,  2138,
  3094,  5966,  2870,   606,  2893,   382,  1117,   382,  1119,   382,
  1121,  1122,  1123,  1124,  1126,   880,   996,  5987,  3122,   461,
-32768,-32768,-32768,  1284,  2898,   911,  6008,-32768,-32768,   395,
  6071,  2175,  2175,  1284,   997,   719,  6071,  1284,  1132,  1134,
  1135,  2362,-32768,  1136,  1138,-32768,  1007,-32768,  1139,  2175,
-32768,  3150,   169,   188,-32768,  3178,  3206,-32768,  3234,  1142,
  2175,-32768,-32768,-32768,  2389,  2419,  1143,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2440,  1145,  1015,-32768,  2175,-32768,
  1019,   592,   478,-32768,  1017,   481,-32768,  1021,   483,-32768,
  1022,-32768,-32768,-32768,-32768,  1155,  1284,  1158,  1050,  2175,
  1102,  2175,-32768,  2175,-32768,-32768,-32768,  2175,  4194,  4220,
-32768,  1284,  2175,  1183,  1186,  1061,-32768,-32768,-32768,    26,
-32768,  1105,-32768,  4246,  1188,-32768,-32768,  1189,  1192,  1193,
  1194,  4272,-32768,-32768,-32768,-32768,-32768,   606,  2926,-32768,
   134,  1845,   592,  1845,   592,  1845,   592,-32768,   722,  1284,
-32768,  3262,  2175,  3290,  3318,  1066,  6071,  2175,  2175,   726,
  6071,-32768,-32768,-32768,  1195,-32768,  2175,-32768,-32768,-32768,
-32768,-32768,  1200,  1067,  2175,-32768,-32768,  3346,   510,   242,
  3374,   512,   284,  3402,   518,   290,  1284,  1201,  1147,  2271,
  1071,  2463,-32768,-32768,  2175,  6029,  4298,    38,-32768,  4324,
  1073,-32768,  3430,  1205,  2175,  1206,  1207,  2175,  1208,  1209,
  2175,  1210,  1078,-32768,  2175,-32768,   592,-32768,-32768,   727,
-32768,  2175,-32768,  1284,  2175,  1219,-32768,-32768,  1087,  3458,
-32768,-32768,  1089,  3486,-32768,-32768,  1090,  3514,-32768,  1220,
  2482,   302,  2291,  1223,  1092,  6050,   732,  3542,  1108,   592,
  1237,   592,  1242,   592,  1245,-32768,-32768,-32768,-32768,   592,
-32768,   588,-32768,  1114,  1247,  1249,   318,-32768,  1118,   338,
-32768,  1125,   341,-32768,  1128,   356,   733,-32768,  1129,  1284,
-32768,  1130,  1255,   592,  1256,   592,  1258,   592,-32768,   588,
  1262,   588,   736,  1264,-32768,   399,-32768,   406,-32768,   409,
-32768,-32768,   737,-32768,  1265,-32768,  1266,  1267,  1274,   588,
  1275,-32768,-32768,-32768,-32768,-32768,-32768,  1282,  1283,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   489,-32768,-32768,   731,-32768,   180,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -251,     4,-32768,    66,  1289,     0,  -333,  -172,     9,
-32768,-32768,-32768,-32768,-32768,  1294,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -700,  -640,-32768,-32768,-32768,    -1,-32768,    98,-32768,  -999,
  -139,   235,    23,  -614,   420,-32768,   -54,     5
};


#define	YYLAST		6201


static const short yytable[] = {   204,
   352,    60,   123,   356,   821,   319,   361,   122,   125,   518,
    61,   326,   129,   560,   268,   175,   443,   178,   560,   627,
   751,   760,  1070,   205,   198,   199,   213,   377,   214,   189,
   379,   146,   198,   199,   210,   635,   141,   357,   169,   136,
   192,   362,   363,  1133,   358,     3,   359,   698,   465,   438,
   698,   699,   700,   466,   699,   700,    99,   100,   101,   102,
   819,   215,   103,   216,    99,   100,   101,   102,   880,   640,
   103,   617,   141,   535,   536,   442,   618,   170,   212,   132,
   171,   873,   876,   172,   340,   341,   133,   340,   341,   561,
   562,   563,   564,   565,   561,   562,   563,   564,   565,   137,
   509,   269,   270,   142,   342,   126,   138,   752,   753,   127,
   261,   262,   263,   147,   818,   264,   267,   931,   881,   272,
   108,   109,   110,   111,   128,   292,   165,   167,   294,   174,
   295,   302,   305,   306,  1157,   308,   302,   310,   311,   696,
   302,   314,   315,   868,   130,   322,   115,   116,   566,   176,
   439,   179,   206,   840,   207,   161,   162,   882,   200,   208,
   309,   338,   339,   190,   313,   163,   203,   193,   211,   636,
   131,   339,   173,   360,  1036,  1134,   108,   109,   110,   111,
   819,   532,   641,   134,   367,   368,   369,   135,   371,   629,
  1203,   374,   375,  1037,   641,   115,   116,   340,   341,   549,
   431,   432,   433,   434,   382,   698,   475,   883,   476,   699,
   700,   388,   389,   390,   391,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
   427,   428,   429,   115,   116,   958,   132,   335,   217,   337,
   218,   722,   139,   694,   302,   344,   140,   627,   198,   199,
   353,   444,  1087,   449,   450,   451,   452,   453,   454,   455,
   456,   457,   458,   459,   460,   461,   462,   463,   440,   340,
   341,  1051,   115,   116,   340,   341,   471,   136,   624,   625,
    99,   100,   101,   102,   862,   479,   103,   385,   340,   341,
   484,   343,   143,   698,   471,   302,   144,   699,   700,   493,
   145,   495,   496,   497,   148,   499,   500,   501,   503,   503,
   503,   503,   159,   144,   504,   504,   504,   504,   154,   490,
   697,   514,   514,   520,   521,   522,   523,   261,   262,   524,
   517,   517,  1090,   533,  1093,   698,  1096,   137,   538,   699,
   700,   698,   542,   543,   695,   699,   700,   303,   108,   109,
   110,   111,   303,   698,   340,   341,   303,   699,   700,   555,
  1116,   181,   558,   219,   182,   220,   557,   115,   116,   698,
   519,   115,   116,   699,   700,   628,   505,   506,   507,   722,
   709,   710,   340,   341,   160,   108,   109,   110,   111,   698,
   819,   149,   698,   699,   700,  1075,   699,   700,   916,   221,
   917,   222,  1119,   150,   115,   116,  1152,   698,  1122,   340,
   341,   699,   700,   168,   623,   340,   341,   512,   513,   177,
  1168,   632,   340,   341,   630,   531,   631,   337,   475,   819,
   481,   918,   819,   919,   180,   819,  1193,   766,   920,  1177,
   921,  1180,   475,  1183,   302,   644,   183,   623,   648,  1186,
   698,   649,   650,   652,   699,   700,  1195,   698,   858,  1197,
   698,   699,   700,   475,   699,   700,   302,   184,   643,   650,
   669,   340,   341,  1206,  1199,  1208,   675,  1210,   861,   863,
   303,   724,   161,   162,   223,   185,   224,   803,   685,   686,
   666,   819,   163,   340,   341,   773,   774,   689,   776,   164,
   779,   780,   430,   199,   783,   784,  1017,   340,   341,   195,
   354,  1018,   472,   186,   707,   151,   819,  1217,   152,   819,
   153,   187,   819,   820,  1218,   819,   717,  1219,   719,   720,
   472,   303,   199,   188,    99,   100,   101,   102,   194,   723,
   103,   340,   341,   196,   745,   819,   225,   819,   226,   819,
   286,   287,   288,   829,   830,   831,   197,   289,   559,   271,
   991,   340,   341,    99,   100,   101,   102,   765,   227,   103,
   228,   198,   199,   734,   735,   900,   901,  1010,   340,   341,
   255,   340,   341,   340,   341,   256,   684,   736,   737,   738,
   739,   740,   741,   742,  1052,   257,   302,  1054,   258,  1056,
   746,   909,   910,    99,   100,   101,   102,   754,   703,   103,
   340,   341,   340,   341,   915,   884,   273,   763,   340,   341,
   744,   890,   475,   259,   485,   302,  1115,   229,  1118,   230,
   897,   898,   899,   290,  1121,   902,   903,   904,   905,   906,
   907,   908,   231,   698,   232,   291,   302,   699,   700,   769,
    28,    29,    30,    31,   293,    33,   927,   284,   285,   286,
   287,   288,   307,    38,    39,   233,   289,   234,   312,   235,
   786,   236,   302,   302,   302,   302,   321,   115,   116,   323,
   303,     5,     6,   436,   237,   207,   238,   324,   651,   653,
   208,   239,   325,   240,  1084,   327,   811,   812,   813,   814,
   328,   950,   303,   329,   330,   651,   842,   843,   331,   241,
   847,   242,   525,    11,    12,   526,    14,    15,   527,    17,
   528,    19,   768,    20,   332,    22,    23,   333,    25,    26,
   723,   243,   334,   244,   864,   115,   116,   869,   245,   345,
   246,   469,   346,   207,    37,   875,   355,   347,   208,   878,
   247,   249,   248,   250,   348,    41,    42,    43,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   896,   808,   809,
   810,   289,   155,   364,  1011,   156,   365,   251,   157,   252,
   158,   911,   912,   913,  1021,   253,   366,   254,  1025,   615,
   475,   616,   626,   370,   926,   928,   373,   372,   929,   959,
   475,   777,   667,   778,   475,   870,   785,   871,   534,   376,
   378,   935,   936,   937,   475,   475,   877,   894,   475,   941,
   922,   938,   380,   475,   947,   923,   475,   475,   924,   925,
   381,   944,   303,   945,   977,  1023,   978,  1024,  1097,   383,
  1098,   952,   944,  1023,  1108,  1154,   951,  1059,   944,  1200,
  1174,  1201,   944,  1220,  1215,  1221,   384,   962,   387,   435,
   289,   303,   445,   446,   966,   967,   447,   473,  1100,   969,
   470,   492,   498,   508,   537,   547,   540,   541,   975,   976,
   550,   619,   303,   620,   622,   621,   633,   634,   985,   638,
   654,   645,   655,   514,   986,   656,   658,   930,  1014,   659,
  1099,   660,   517,   661,   663,   664,   665,   671,   303,   303,
   303,   303,   683,   679,   680,   681,   713,   682,   687,   714,
  1019,  1020,   715,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,  1153,   688,  1123,  1034,   289,
   730,   716,   728,   729,   732,   733,   743,   748,   750,  1042,
   749,   755,   756,   759,   758,   762,   764,   772,   963,   775,
   964,   781,   782,   788,   789,   790,   791,  1049,   792,   795,
   796,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   491,   287,   288,   797,   798,   799,  1062,   289,
  1064,   800,  1065,   993,   801,   996,  1067,   999,  1006,   802,
   807,  1071,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   815,   816,   817,   822,
   289,   824,   825,   826,   827,   828,   832,   514,   838,  1015,
  1088,   837,  1091,   839,  1094,   841,   517,   857,   859,   846,
   866,  1102,     5,     6,   872,   865,  1106,  1107,   885,   888,
   889,   879,   886,   892,   887,  1110,   891,   893,   895,   914,
   932,   933,   934,  1113,   939,   949,   953,   954,   956,   961,
   965,   968,   970,   525,    11,    12,   526,    14,    15,   527,
    17,   528,    19,   947,    20,   972,    22,    23,   973,    25,
    26,   974,   979,  1140,   980,   981,  1144,  1188,   982,  1148,
   983,   984,   994,  1151,   997,    37,  1000,  1002,  1003,  1004,
  1156,  1005,  1007,  1158,  1022,  1026,    41,    42,    43,  1027,
  1028,  1032,  1030,  1031,  1033,  1211,  1041,  1214,  1045,  1089,
  1047,  1092,  1048,  1095,  1053,    71,   296,  1050,  1055,  1057,
  1058,    75,    76,    77,  1060,  1226,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,  1061,  1072,   539,
  1063,  1073,  1074,  1078,  1079,   297,  1076,  1080,  1081,  1082,
  1109,     5,     6,  1105,  1111,  1112,  1124,  1125,  1128,  1136,
  1138,  1141,  1142,  1145,  1146,  1149,  1150,    28,    29,    30,
    31,    32,    33,  1159,  1160,  1166,  1162,  1164,  1171,  1172,
    38,    39,   525,    11,    12,   526,    14,    15,   527,    17,
   528,    19,  1178,    20,  1176,    22,    23,  1181,    25,    26,
  1184,  1190,  1191,  1192,   874,  1194,   104,   105,   106,   107,
  1205,  1207,  1196,  1209,    37,  1198,  1202,  1212,  1204,  1216,
  1222,  1223,  1224,   112,   298,    41,    42,    43,   114,  1225,
  1227,  1229,  1230,   117,  1130,   955,    71,   296,   120,   726,
    59,   489,    75,    76,    77,    67,     0,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,     0,     0,
     0,     0,     0,     0,     0,     0,   297,     0,   553,     0,
     0,     0,     5,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
    30,    31,    32,    33,     0,     0,     0,     0,     0,     0,
     0,    38,    39,   525,    11,    12,   526,    14,    15,   527,
    17,   528,    19,     0,    20,     0,    22,    23,     0,    25,
    26,     0,     0,     0,     0,     0,     0,   104,   105,   106,
   107,     0,     0,     0,     0,    37,     0,     0,     0,     0,
     0,     0,     0,     0,   112,   316,    41,    42,    43,   114,
     0,     0,     0,     0,   117,     0,    71,   296,     0,   120,
     0,   317,    75,    76,    77,     0,     0,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,     0,     0,
     0,     0,     0,     0,     0,     0,   297,     0,     0,   554,
     0,     0,     5,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
    30,    31,    32,    33,     0,     0,     0,     0,     0,     0,
     0,    38,    39,   525,    11,    12,   526,    14,    15,   527,
    17,   528,    19,     0,    20,     0,    22,    23,     0,    25,
    26,     0,     0,     0,     0,     0,     0,   104,   105,   106,
   107,     0,     0,     0,     0,    37,     0,   793,     0,     0,
     0,     0,     0,     0,   112,   298,    41,    42,    43,   114,
     0,     0,     0,     0,   117,     0,    71,   296,     0,   120,
     0,   488,    75,    76,    77,     0,     0,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,     0,     0,
     0,     0,   794,     0,     0,     0,   297,     0,     0,   704,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,    28,    29,
    30,    31,    32,    33,     0,     0,     0,     0,     0,     0,
     0,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   104,   105,   106,
   107,   289,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   112,   298,     0,     0,     0,   114,
     0,     0,     0,     0,   117,     0,    71,   260,     0,   120,
     0,   668,    75,    76,    77,     0,     0,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,     0,     0,
     0,    71,   260,     5,     6,     0,     0,    75,    76,    77,
     0,     0,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,     0,   525,    11,    12,   526,    14,    15,
   527,    17,   528,    19,     0,    20,     0,    22,    23,     0,
    25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    37,   104,   105,   106,
   107,     0,     0,     0,     0,     0,     0,    41,    42,    43,
     0,     0,     0,     0,   112,   113,     0,     0,     0,   114,
     0,     0,     0,     0,   117,     0,     0,   265,     0,   120,
     0,   266,   104,   105,   106,   107,     0,     0,   835,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
   113,     0,     0,     0,   114,     0,     0,     0,     0,   117,
   718,     0,   646,     0,   120,     0,   647,    71,   260,     0,
     0,     0,     0,    75,    76,    77,     0,     0,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,     0,
     0,     0,    71,    72,    73,     0,    74,     0,    75,    76,
    77,     0,     0,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,     0,    99,   100,   101,   102,     0,
     0,   103,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,   836,     0,     0,     0,     0,     0,   104,   105,
   106,   107,   274,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   349,   350,     0,     0,     0,
   114,     0,     0,     0,     0,   351,     0,     0,     0,     0,
   120,     0,   164,   104,   105,   106,   107,   108,   109,   110,
   111,   448,     0,     0,     0,     0,     0,     0,     0,     0,
   112,   113,     0,     0,     0,   114,   115,   116,     0,     0,
   117,     0,   118,     0,   119,   120,    71,   296,     0,     0,
     0,     0,    75,    76,    77,     0,     0,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,     0,     0,
     0,     0,     0,     0,     0,     0,   297,     0,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,    28,    29,
    30,    31,    32,    33,     0,     0,     0,     0,     0,     0,
     0,    38,    39,     0,     0,     0,     0,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   464,     0,     0,     0,   289,     0,   104,   105,   106,
   107,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   112,   298,     0,     0,     0,   114,
    71,   260,   199,     0,   117,     0,    75,    76,    77,   120,
     0,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,     0,    99,   100,   101,   102,    71,   260,   103,
     0,     0,     0,    75,    76,    77,     0,     0,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,     0,
     0,     0,     0,     0,     0,     0,     0,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,   104,   105,   106,   107,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     0,     0,     0,   114,     0,     0,     0,     0,   117,     0,
     0,     0,     0,   120,   757,     0,     0,     0,   104,   105,
   106,   107,     5,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   112,   113,     0,     0,     0,
   114,     0,     5,     6,   787,   117,     0,     0,     0,     0,
   120,     0,     0,   525,    11,    12,   526,    14,    15,   527,
    17,   528,    19,     0,    20,   823,    22,    23,     0,    25,
    26,     0,     0,   525,    11,    12,   526,    14,    15,   527,
    17,   528,    19,     0,    20,    37,    22,    23,   867,    25,
    26,     0,     0,     0,     0,     0,    41,    42,    43,     0,
     0,     0,     0,     0,     0,    37,     0,  1029,     0,     0,
     0,     0,     0,     0,     0,     0,    41,    42,    43,     0,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,  1043,     0,     0,     0,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1126,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,  1044,     0,     0,     0,   289,  1169,
     0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,  1046,     0,     0,     0,   289,
     0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,  1129,     0,
     0,     0,   289,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,  1167,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   473,     0,     0,     0,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   473,     0,     0,     0,   289,     0,
     0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   551,     0,     0,     0,   289,
     0,     0,     0,     0,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   639,     0,
     0,     0,   289,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   771,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   474,
   287,   288,   834,     0,     0,     0,   289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   491,
   287,   288,     0,     0,     0,     0,   289,     0,     0,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,    -3,     1,     0,   289,    -3,     0,     0,     0,     0,
     0,     0,     0,    -3,    -3,     0,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,    -3,     0,     0,     0,
     0,    -3,    -3,   672,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,     0,     0,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,    -3,    -3,    -3,    -3,     0,     0,    -3,
    -3,     0,     4,     0,     0,     0,    -3,    -3,    -3,    -3,
     5,     6,    -3,     0,    -3,     0,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,     0,     0,     0,     0,     0,
     0,     0,     0,     7,     0,     0,     0,     0,     8,     9,
     0,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,     0,    20,    21,    22,    23,    24,    25,    26,     0,
     0,     0,    27,    28,    29,    30,    31,    32,    33,     0,
    34,    35,    36,    37,     5,     6,    38,    39,     0,     0,
     0,     0,     0,    40,    41,    42,    43,     0,     0,    44,
     0,    45,     0,    46,    47,    48,    49,    50,    51,    52,
    53,    54,     0,     0,     0,   525,    11,    12,   526,    14,
    15,   527,    17,   528,    19,     0,    20,     0,    22,    23,
     0,    25,    26,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,    37,     0,     0,
     0,   289,     0,     0,     0,   441,     0,     0,    41,    42,
    43,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,   989,     0,   990,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,  1012,     0,  1013,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,  1085,     0,  1086,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
     0,     0,   676,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
   677,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,   725,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,     0,     0,   770,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,     0,     0,   806,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
     0,     0,   987,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
  1009,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,  1035,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,     0,     0,  1038,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,     0,     0,  1039,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
     0,     0,  1040,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
  1101,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,  1103,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,     0,     0,  1104,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,     0,     0,  1114,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
     0,     0,  1117,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
  1120,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,  1137,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,     0,     0,  1161,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,     0,     0,  1163,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
     0,     0,  1165,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,     0,     0,
  1175,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,   437,     0,     0,     0,     0,   510,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,   467,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,   510,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,   511,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
   548,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,   595,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,   596,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,   609,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,   610,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
   611,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,   612,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,   613,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,   614,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,   691,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
   692,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,   693,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,   767,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,   804,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,   805,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
   833,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,   942,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,   943,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,   960,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,   971,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
  1068,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,  1069,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,  1077,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,     0,     0,     0,  1083,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,     0,     0,     0,  1132,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,     0,
  1135,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,   556,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,     0,     0,   574,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,   576,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
     0,     0,   578,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,   580,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,     0,     0,   582,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,   584,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,     0,     0,   586,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,   588,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,     0,     0,
   590,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,   592,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,     0,     0,   594,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,   598,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
     0,     0,   600,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,   602,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,     0,     0,   604,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,   606,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,     0,     0,   608,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,   690,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,     0,     0,
   706,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,   708,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,     0,     0,   711,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,     0,     0,   712,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
     0,     0,   721,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,     0,     0,   747,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,     0,     0,   849,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,     0,
     0,   851,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,     0,     0,   853,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,     0,     0,   855,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,     0,     0,
   856,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,     0,     0,   957,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,   437,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,   468,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,   477,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,   478,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,   480,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,   482,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
   483,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,   486,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,   487,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,   494,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,   544,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,   545,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,   546,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,   552,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,   573,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,   575,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
   577,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,   579,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,   581,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,   583,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,   585,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,   587,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,   589,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,   591,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,   593,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,   597,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
   599,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,   601,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,   603,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,   605,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,   607,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,   657,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,   662,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,   670,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,   673,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,   674,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
   678,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,   848,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289,     0,   850,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,     0,     0,     0,
     0,   289,     0,   852,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     0,     0,   289,     0,   854,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
     0,     0,     0,   289,     0,   860,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     0,     0,     0,     0,   289,     0,   948,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,     0,     0,     0,     0,   289,     0,   988,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,     0,     0,     0,     0,   289,     0,  1008,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,     0,     0,     0,     0,   289,     0,  1016,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,     0,     0,     0,     0,   289,     0,
  1131,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,     0,     0,     0,     0,   289,
     0,  1173,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,     0,     0,     0,     0,
   289
};

static const short yycheck[] = {    54,
   173,     2,     4,   176,   705,   145,   179,     4,     4,   343,
     2,   151,     6,     4,     4,     4,   268,     4,     4,     7,
     4,   636,  1022,     4,     4,     5,   131,   200,   133,     4,
   203,    49,     4,     5,     4,     4,    71,   177,     4,    71,
     4,   181,   182,     6,     4,     6,     6,    72,   132,     7,
    72,    76,    77,   137,    76,    77,    36,    37,    38,    39,
   701,   131,    42,   133,    36,    37,    38,    39,     6,     6,
    42,   132,    71,     6,     7,     7,   137,    43,    74,   131,
    46,     6,     6,    49,   121,   122,   138,   121,   122,    80,
    81,    82,    83,    84,    80,    81,    82,    83,    84,   131,
   137,    91,    92,   138,   138,    13,   138,    91,    92,    49,
   112,   113,   114,   131,   139,   117,   118,   139,    56,   121,
   108,   109,   110,   111,   131,   127,    29,    30,   130,    32,
   132,   133,   134,   135,  1134,   137,   138,   139,   140,   138,
   142,   143,   144,   758,   138,   147,   127,   128,   139,   138,
   108,   138,   133,   139,   135,   121,   122,     6,   138,   140,
   138,   163,   164,   138,   142,   131,   138,   131,   138,   138,
     6,   173,   138,   133,     6,   138,   108,   109,   110,   111,
   821,   354,   119,   131,   186,   187,   188,   131,   190,   441,
  1190,   193,   194,     6,   119,   127,   128,   121,   122,   372,
   255,   256,   257,   258,   206,    72,   137,    56,   139,    76,
    77,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   127,   128,   870,   131,   160,   131,   162,
   133,   135,   131,   138,   266,   168,   131,     7,     4,     5,
   173,   268,   139,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   266,   121,
   122,   992,   127,   128,   121,   122,   298,    71,   438,   439,
    36,    37,    38,    39,     7,   307,    42,   210,   121,   122,
   312,   138,   131,    72,   316,   317,   131,    76,    77,   321,
    53,   323,   324,   325,    49,   327,   328,   329,   330,   331,
   332,   333,   131,   131,   330,   331,   332,   333,    51,   317,
   138,   342,   343,   345,   346,   347,   348,   349,   350,   351,
   342,   343,  1053,   355,  1055,    72,  1057,   131,   360,    76,
    77,    72,   364,   365,   138,    76,    77,   133,   108,   109,
   110,   111,   138,    72,   121,   122,   142,    76,    77,   381,
   139,    43,   384,   131,    46,   133,   383,   127,   128,    72,
   137,   127,   128,    76,    77,   135,   331,   332,   333,   135,
   540,   541,   121,   122,   138,   108,   109,   110,   111,    72,
  1051,    49,    72,    76,    77,  1030,    76,    77,   137,   131,
   139,   133,   139,    49,   127,   128,  1127,    72,   139,   121,
   122,    76,    77,   138,   436,   121,   122,   340,   341,    49,
   139,   443,   121,   122,   441,   137,   442,   350,   137,  1090,
   139,   137,  1093,   139,     6,  1096,   139,   132,   137,  1160,
   139,  1162,   137,  1164,   466,   467,     4,   469,   470,  1170,
    72,   473,   474,   475,    76,    77,   139,    72,   132,   139,
    72,    76,    77,   137,    76,    77,   488,     4,   466,   491,
   492,   121,   122,  1194,   139,  1196,   498,  1198,   750,   751,
   266,   556,   121,   122,   131,     4,   133,   137,   510,   511,
   488,  1152,   131,   121,   122,   655,   656,   519,   658,   138,
   660,   661,     4,     5,   664,   665,   132,   121,   122,     6,
   138,   137,   298,   131,   536,    46,  1177,   139,    49,  1180,
    51,   131,  1183,   137,   139,  1186,   548,   139,   550,   551,
   316,   317,     5,   131,    36,    37,    38,    39,   131,   556,
    42,   121,   122,     4,   619,  1206,   131,  1208,   133,  1210,
   123,   124,   125,   713,   714,   715,     4,   130,   138,     4,
   914,   121,   122,    36,    37,    38,    39,   642,   131,    42,
   133,     4,     5,   595,   596,    62,    63,   137,   121,   122,
   131,   121,   122,   121,   122,   131,   509,   609,   610,   611,
   612,   613,   614,   615,   137,   131,   618,   137,   131,   137,
   622,     6,     7,    36,    37,    38,    39,   629,   531,    42,
   121,   122,   121,   122,   807,   775,     6,   639,   121,   122,
   618,   781,   137,   131,   139,   647,   137,   131,   137,   133,
   790,   791,   792,     6,   137,   795,   796,   797,   798,   799,
   800,   801,   131,    72,   133,     6,   668,    76,    77,   647,
    65,    66,    67,    68,     5,    70,   816,   121,   122,   123,
   124,   125,   131,    78,    79,   131,   130,   133,   131,   131,
   668,   133,   694,   695,   696,   697,   131,   127,   128,   138,
   466,    12,    13,   133,   131,   135,   133,   131,   474,   475,
   140,   131,   131,   133,  1048,   138,   694,   695,   696,   697,
   138,   861,   488,   131,   131,   491,   728,   729,   131,   131,
   732,   133,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,   645,    54,   131,    56,    57,   131,    59,    60,
   747,   131,     4,   133,   751,   127,   128,   759,   131,   133,
   133,   133,   138,   135,    75,   767,   133,   138,   140,   771,
   131,   131,   133,   133,   138,    86,    87,    88,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   789,   691,   692,
   693,   130,    43,   133,   934,    46,   133,   131,    49,   133,
    51,   803,   804,   805,   944,   131,     6,   133,   948,   133,
   137,   135,   139,   135,   816,   817,    94,   138,   820,   874,
   137,    49,   139,    51,   137,   137,   139,   139,   139,     6,
     6,   833,   834,   835,   137,   137,   139,   139,   137,   841,
   139,   838,     6,   137,   846,   139,   137,   137,   139,   139,
   133,   137,   618,   139,     4,   137,     6,   139,   137,     4,
   139,   863,   137,   137,   139,   139,   862,  1007,   137,   137,
   139,   139,   137,   137,   139,   139,   138,   879,     6,     5,
   130,   647,   135,     7,   886,   887,   133,     8,  1061,   891,
   138,     7,     7,   132,     6,    91,     7,     7,   900,   901,
   138,   137,   668,   132,   137,   132,     6,     4,   910,   134,
    94,     7,     7,   914,   910,     7,     7,   820,     8,    94,
  1060,     7,   914,     7,    94,     7,     7,     7,   694,   695,
   696,   697,   135,   132,   132,   132,     7,   132,   139,     7,
   942,   943,     7,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,  1128,   139,  1097,   960,   130,
   138,   135,   131,   131,   131,     6,     4,     6,   134,   971,
     6,     6,     6,   133,     7,     6,   119,    49,   881,     7,
   883,     7,    51,     7,   138,     7,     7,   989,     7,     7,
     7,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,     7,     7,     7,  1010,   130,
  1012,     7,  1014,   916,     7,   918,  1018,   920,   139,     4,
   138,  1023,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,     6,   138,   131,     6,
   130,     6,     6,     6,     6,     6,     4,  1048,     4,   139,
  1052,     6,  1054,     6,  1056,   131,  1048,   132,   132,   138,
     7,  1063,    12,    13,     6,   135,  1068,  1069,     6,     6,
     6,   138,   138,     6,   138,  1077,   138,     6,     5,   138,
     6,     6,    90,  1085,     6,   135,     6,     4,     6,   134,
     6,     6,     5,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,  1105,    54,     6,    56,    57,     6,    59,
    60,     6,     6,  1115,     6,     6,  1118,  1172,     6,  1121,
     6,     6,     6,  1125,     6,    75,     6,     6,     6,     6,
  1132,     6,   137,  1135,   138,     4,    86,    87,    88,     6,
     6,   135,     7,     6,     6,  1200,     5,  1202,     6,  1052,
     6,  1054,   138,  1056,   138,     3,     4,   139,   138,   138,
     6,     9,    10,    11,     7,  1220,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   138,     6,   139,
    89,     6,   132,     6,     6,    43,    92,     6,     6,     6,
     6,    12,    13,   138,     5,   139,     6,    61,   138,   137,
     6,     6,     6,     6,     6,     6,   139,    65,    66,    67,
    68,    69,    70,     5,   138,     6,   138,   138,     6,   138,
    78,    79,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,     6,    54,   137,    56,    57,     6,    59,    60,
     6,   138,     6,     5,   766,   138,   104,   105,   106,   107,
     6,     6,   138,     6,    75,   138,   138,     6,   139,     6,
     6,     6,     6,   121,   122,    86,    87,    88,   126,     6,
     6,     0,     0,   131,  1105,   866,     3,     4,   136,   559,
     2,   139,     9,    10,    11,     2,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,   139,    -1,
    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   121,   122,    86,    87,    88,   126,
    -1,    -1,    -1,    -1,   131,    -1,     3,     4,    -1,   136,
    -1,   138,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,   139,
    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,    75,    -1,     6,    -1,    -1,
    -1,    -1,    -1,    -1,   121,   122,    86,    87,    88,   126,
    -1,    -1,    -1,    -1,   131,    -1,     3,     4,    -1,   136,
    -1,   138,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    61,    -1,    -1,    -1,    43,    -1,    -1,   139,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    65,    66,
    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   104,   105,   106,
   107,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,
    -1,    -1,    -1,    -1,   131,    -1,     3,     4,    -1,   136,
    -1,   138,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,     3,     4,    12,    13,    -1,    -1,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    75,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,
    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,    -1,   136,
    -1,   138,   104,   105,   106,   107,    -1,    -1,     8,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
   139,    -1,   134,    -1,   136,    -1,   138,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,     3,     4,     5,    -1,     7,    -1,     9,    10,
    11,    -1,    -1,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    -1,    36,    37,    38,    39,    -1,
    -1,    42,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,   132,    -1,    -1,    -1,    -1,    -1,   104,   105,
   106,   107,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,
   136,    -1,   138,   104,   105,   106,   107,   108,   109,   110,
   111,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   121,   122,    -1,    -1,    -1,   126,   127,   128,    -1,    -1,
   131,    -1,   133,    -1,   135,   136,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    65,    66,
    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    -1,    -1,    -1,    -1,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,     6,    -1,    -1,    -1,   130,    -1,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,
     3,     4,     5,    -1,   131,    -1,     9,    10,    11,   136,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    36,    37,    38,    39,     3,     4,    42,
    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,
    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
    -1,    -1,    -1,   136,     6,    -1,    -1,    -1,   104,   105,
   106,   107,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
   126,    -1,    12,    13,     6,   131,    -1,    -1,    -1,    -1,
   136,    -1,    -1,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,     6,    56,    57,    -1,    59,
    60,    -1,    -1,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    75,    56,    57,     6,    59,
    60,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
    -1,    -1,    -1,    -1,    -1,    75,    -1,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,     6,    -1,    -1,    -1,   130,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,     6,    -1,    -1,    -1,   130,   139,
    -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,     6,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,     6,    -1,
    -1,    -1,   130,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,     6,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,     8,    -1,    -1,    -1,   130,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,     8,    -1,    -1,    -1,   130,    -1,
    -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,     8,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,     8,    -1,
    -1,    -1,   130,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,     8,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,     8,    -1,    -1,    -1,   130,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,     0,     1,    -1,   130,     4,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    12,    13,    -1,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,    35,    -1,    -1,    -1,
    -1,    40,    41,   139,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    65,    66,    67,    68,
    69,    70,    -1,    72,    73,    74,    75,    -1,    -1,    78,
    79,    -1,     4,    -1,    -1,    -1,    85,    86,    87,    88,
    12,    13,    91,    -1,    93,    -1,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    40,    41,
    -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
    72,    73,    74,    75,    12,    13,    78,    79,    -1,    -1,
    -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,    91,
    -1,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
   102,   103,    -1,    -1,    -1,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    -1,    54,    -1,    56,    57,
    -1,    59,    60,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    75,    -1,    -1,
    -1,   130,    -1,    -1,    -1,   134,    -1,    -1,    86,    87,
    88,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,   139,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,    -1,   139,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,    -1,   139,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   139,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   139,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   139,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   139,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   139,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   139,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,   132,    -1,    -1,    -1,    -1,   137,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
   137,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
   137,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
   137,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
   137,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
   137,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
   137,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   134,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,   134,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   134,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   134,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,   134,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   134,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,    -1,    -1,   134,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
    -1,    -1,   134,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,   134,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    -1,   134,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
   134,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,   134,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
   132,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,   132,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,   132,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,   132,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
   132,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,   132,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,   132,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,   132,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
   132,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,   132,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,   132,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,   132,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
   132,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,   132,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130,    -1,   132,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,   130,    -1,   132,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
   132,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
    -1,   132,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
   130
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 145 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 161 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 165 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 170 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 175 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 179 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 186 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 191 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 206 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 219 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 248 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 255 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 265 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 281 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 283 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 288 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 290 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 295 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 485 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 503 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 514 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 519 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 527 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 534 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 541 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 546 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 554 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 561 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 569 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 577 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-11].l, yyvsp[-8].l, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 52:
#line 584 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 53:
#line 588 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 593 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 55:
#line 601 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 56:
#line 602 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 57:
#line 603 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 58:
#line 604 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 59:
#line 605 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 60:
#line 609 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 61:
#line 610 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 62:
#line 618 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 63:
#line 649 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 64:
#line 688 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 742 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 759 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 67:
#line 777 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 68:
#line 788 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 69:
#line 805 "Gmsh.y"
{ 
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 70:
#line 812 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 71:
#line 826 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 72:
#line 843 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 73:
#line 869 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 74:
#line 896 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 75:
#line 910 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 76:
#line 927 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 77:
#line 941 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 78:
#line 958 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 79:
#line 978 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 80:
#line 1001 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 81:
#line 1011 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 82:
#line 1026 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 83:
#line 1030 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 84:
#line 1042 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if(!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X, v->Pos.Y, v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1064 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1080 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      Attractor *att = tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  att->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    att->addPoint(gv->x(), gv->y(), gv->z());
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1109 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      Attractor *att = tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  buildListOfPoints(att, c, (int)pars[3]);
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag((int)d);
	  if(ge){
	    buildListOfPoints(att, ge, (int)pars[3]);
	  }
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1140 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 89:
#line 1162 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1180 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1198 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1216 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1242 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1260 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1287 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1306 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1330 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1354 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1380 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1397 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1416 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1434 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1473 "Gmsh.y"
{
    myGmshSurface = 0;
  ;
    break;}
case 104:
#line 1478 "Gmsh.y"
{
    myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
  ;
    break;}
case 105:
#line 1483 "Gmsh.y"
{
    int num = (int)yyvsp[-6].d, type = 0;
    myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
  ;
    break;}
case 106:
#line 1489 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 107:
#line 1511 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 108:
#line 1533 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1549 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 110:
#line 1569 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 111:
#line 1586 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 112:
#line 1603 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 113:
#line 1624 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 114:
#line 1629 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 115:
#line 1634 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 116:
#line 1639 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 117:
#line 1646 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 118:
#line 1647 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 119:
#line 1648 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 120:
#line 1653 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 121:
#line 1657 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 122:
#line 1661 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(v){
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GVertex *gv = GMODEL->vertexByTag(TheShape.Num);
	  if(gv){
	    TheShape.Type = MSH_POINT_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown point %d", TheShape.Num);
	}
      }
    ;
    break;}
case 123:
#line 1684 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(c){
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag(TheShape.Num);
	  if(ge){
	    TheShape.Type = MSH_SEGM_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	}
      }
    ;
    break;}
case 124:
#line 1707 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(s){
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GFace *gf = GMODEL->faceByTag(TheShape.Num);
	  if(gf){
	    TheShape.Type = MSH_SURF_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	}
      }
    ;
    break;}
case 125:
#line 1730 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(v){
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GRegion *gr = GMODEL->regionByTag(TheShape.Num);
	  if(gr){
	    TheShape.Type = MSH_VOLUME_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	}
      }
    ;
    break;}
case 126:
#line 1758 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 127:
#line 1770 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 128:
#line 1776 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 129:
#line 1782 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 130:
#line 1794 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 131:
#line 1803 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 132:
#line 1813 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 133:
#line 1829 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 134:
#line 1848 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 135:
#line 1862 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 136:
#line 1868 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 137:
#line 1874 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 138:
#line 1883 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 139:
#line 1897 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1947 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1962 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 142:
#line 1973 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 143:
#line 1993 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 144:
#line 2003 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 145:
#line 2025 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 146:
#line 2029 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 147:
#line 2034 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 148:
#line 2039 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 149:
#line 2051 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 150:
#line 2066 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 151:
#line 2082 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 152:
#line 2108 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 153:
#line 2135 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 154:
#line 2167 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 155:
#line 2174 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 156:
#line 2179 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 157:
#line 2185 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 158:
#line 2189 "Gmsh.y"
{
    ;
    break;}
case 159:
#line 2198 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 160:
#line 2206 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 161:
#line 2214 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 162:
#line 2222 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 163:
#line 2226 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 164:
#line 2234 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 165:
#line 2238 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 166:
#line 2246 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 167:
#line 2250 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 168:
#line 2258 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 169:
#line 2262 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 170:
#line 2269 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 171:
#line 2273 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      extr.mesh.ViewIndex = yyvsp[-6].d;
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      extr.mesh.ViewIndex = -1;
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 172:
#line 2285 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 173:
#line 2292 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 174:
#line 2299 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 175:
#line 2306 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 176:
#line 2313 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 177:
#line 2320 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 178:
#line 2327 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 179:
#line 2334 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 180:
#line 2341 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 181:
#line 2348 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 182:
#line 2352 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 183:
#line 2359 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 184:
#line 2363 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 185:
#line 2370 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 186:
#line 2374 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 187:
#line 2381 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 188:
#line 2385 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 189:
#line 2392 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 190:
#line 2396 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 191:
#line 2403 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 192:
#line 2407 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 193:
#line 2414 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 194:
#line 2418 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 195:
#line 2425 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 196:
#line 2429 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 197:
#line 2436 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 198:
#line 2440 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 199:
#line 2451 "Gmsh.y"
{
    ;
    break;}
case 200:
#line 2454 "Gmsh.y"
{
    ;
    break;}
case 201:
#line 2460 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 202:
#line 2469 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 203:
#line 2491 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 204:
#line 2515 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 205:
#line 2519 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	Tree_Add(THEM->Surfaces, &s);
	extr.mesh.Holes[num].first = yyvsp[-1].d;
	extr.mesh.Holes[num].second.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	  double d;
	  List_Read(yyvsp[-3].l, i, &d);
	  extr.mesh.Holes[num].second.push_back((int)d);
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 206:
#line 2543 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 207:
#line 2561 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 208:
#line 2579 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 209:
#line 2597 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 210:
#line 2626 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 211:
#line 2661 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 212:
#line 2666 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 213:
#line 2693 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 214:
#line 2707 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 215:
#line 2726 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 216:
#line 2732 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 217:
#line 2738 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 2741 "Gmsh.y"
{
    ;
    break;}
case 219:
#line 2750 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 220:
#line 2759 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 221:
#line 2760 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 222:
#line 2761 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 223:
#line 2762 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 224:
#line 2763 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 225:
#line 2764 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 226:
#line 2765 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 227:
#line 2766 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 228:
#line 2768 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 229:
#line 2774 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 230:
#line 2775 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 231:
#line 2776 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 232:
#line 2777 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 233:
#line 2778 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 234:
#line 2779 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 235:
#line 2780 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 236:
#line 2781 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 237:
#line 2782 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 238:
#line 2783 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 239:
#line 2784 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 240:
#line 2785 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 241:
#line 2786 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 242:
#line 2787 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 243:
#line 2788 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 244:
#line 2789 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 245:
#line 2790 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 246:
#line 2791 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 247:
#line 2792 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 248:
#line 2793 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 249:
#line 2794 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 250:
#line 2795 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 251:
#line 2796 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 252:
#line 2797 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2798 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 254:
#line 2799 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2800 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 256:
#line 2801 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2802 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 258:
#line 2803 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 259:
#line 2804 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 260:
#line 2805 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 261:
#line 2807 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2808 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2809 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 2810 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2811 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2812 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2813 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2814 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2815 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2816 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2817 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 272:
#line 2818 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2819 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2820 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2821 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2822 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 2823 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2824 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 279:
#line 2825 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 280:
#line 2826 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 281:
#line 2827 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 282:
#line 2836 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 283:
#line 2837 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 284:
#line 2838 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 285:
#line 2839 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 286:
#line 2840 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 287:
#line 2841 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 288:
#line 2842 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 289:
#line 2847 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 290:
#line 2863 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 291:
#line 2878 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 292:
#line 2898 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 293:
#line 2912 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2925 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 295:
#line 2948 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 296:
#line 2966 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 297:
#line 2984 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 298:
#line 3002 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 299:
#line 3020 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 300:
#line 3028 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 301:
#line 3032 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 302:
#line 3036 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 303:
#line 3040 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 304:
#line 3044 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 305:
#line 3051 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 306:
#line 3055 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 307:
#line 3059 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 308:
#line 3063 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 309:
#line 3070 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 310:
#line 3075 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 311:
#line 3083 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 312:
#line 3088 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 313:
#line 3092 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 314:
#line 3097 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 315:
#line 3101 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 316:
#line 3109 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-4].d;
      }
    ;
    break;}
case 317:
#line 3120 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 318:
#line 3128 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-2].d;
      }
    ;
    break;}
case 319:
#line 3136 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 320:
#line 3142 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 321:
#line 3153 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 322:
#line 3173 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 323:
#line 3183 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 324:
#line 3193 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 325:
#line 3203 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 326:
#line 3220 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 327:
#line 3247 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 328:
#line 3252 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 329:
#line 3256 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 330:
#line 3260 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 331:
#line 3273 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 332:
#line 3277 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 333:
#line 3289 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 334:
#line 3296 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 335:
#line 3318 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 336:
#line 3322 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 337:
#line 3337 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 338:
#line 3342 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 339:
#line 3349 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 340:
#line 3353 "Gmsh.y"
{
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 341:
#line 3360 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 342:
#line 3364 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 343:
#line 3372 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 344:
#line 3380 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 345:
#line 3394 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 346:
#line 3408 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 347:
#line 3412 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 348:
#line 3431 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 349:
#line 3453 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3476 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
