
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tRotate	315
#define	tTranslate	316
#define	tSymmetry	317
#define	tDilate	318
#define	tExtrude	319
#define	tDuplicata	320
#define	tLoop	321
#define	tRecombine	322
#define	tDelete	323
#define	tCoherence	324
#define	tIntersect	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tGrain	334
#define	tCombine	335
#define	tBSpline	336
#define	tBezier	337
#define	tNurbs	338
#define	tOrder	339
#define	tWith	340
#define	tBounds	341
#define	tKnots	342
#define	tColor	343
#define	tColorTable	344
#define	tFor	345
#define	tIn	346
#define	tEndFor	347
#define	tIf	348
#define	tEndIf	349
#define	tExit	350
#define	tReturn	351
#define	tCall	352
#define	tFunction	353
#define	tTrimmed	354
#define	tShow	355
#define	tHide	356
#define	tGetValue	357
#define	tGMSH_MAJOR_VERSION	358
#define	tGMSH_MINOR_VERSION	359
#define	tGMSH_PATCH_VERSION	360
#define	tAFFECTPLUS	361
#define	tAFFECTMINUS	362
#define	tAFFECTTIMES	363
#define	tAFFECTDIVIDE	364
#define	tOR	365
#define	tAND	366
#define	tEQUAL	367
#define	tNOTEQUAL	368
#define	tAPPROXEQUAL	369
#define	tLESSOREQUAL	370
#define	tGREATEROREQUAL	371
#define	tCROSSPRODUCT	372
#define	tPLUSPLUS	373
#define	tMINUSMINUS	374
#define	UNARYPREC	375

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.269 2006-07-14 13:31:08 geuzaine Exp $
//
// Copyright (C) 1997-2006 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 77 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1197
#define	YYFLAG		-32768
#define	YYNTBASE	142

#define YYTRANSLATE(x) ((unsigned)(x) <= 375 ? yytranslate[x] : 207)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   127,     2,   137,     2,   125,     2,     2,   132,
   133,   123,   121,   138,   122,   136,   124,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   117,
     2,   119,   111,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   134,     2,   135,   131,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   139,     2,   140,   141,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   112,   113,   114,   115,   116,   118,
   120,   126,   128,   129,   130
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    42,    48,    56,    64,    74,    81,    90,    91,    94,    97,
   100,   103,   106,   109,   111,   115,   117,   121,   122,   123,
   134,   136,   140,   141,   155,   157,   161,   162,   178,   187,
   188,   195,   202,   204,   206,   208,   210,   212,   214,   216,
   221,   229,   239,   246,   253,   257,   264,   271,   281,   288,
   298,   304,   313,   322,   334,   341,   351,   361,   371,   379,
   388,   401,   408,   416,   424,   432,   442,   450,   460,   478,
   486,   494,   506,   515,   528,   537,   546,   555,   568,   591,
   612,   621,   630,   639,   647,   656,   662,   674,   680,   690,
   692,   694,   696,   697,   700,   707,   714,   721,   728,   733,
   740,   747,   754,   759,   766,   770,   775,   781,   785,   789,
   794,   799,   803,   811,   819,   823,   831,   835,   838,   841,
   857,   860,   867,   876,   885,   896,   898,   901,   903,   907,
   912,   914,   920,   932,   946,   947,   955,   956,   970,   971,
   987,   996,  1005,  1014,  1027,  1040,  1053,  1068,  1083,  1098,
  1099,  1112,  1113,  1126,  1127,  1140,  1141,  1158,  1159,  1176,
  1177,  1194,  1195,  1214,  1215,  1234,  1235,  1254,  1256,  1259,
  1269,  1277,  1280,  1287,  1297,  1307,  1316,  1326,  1335,  1344,
  1351,  1356,  1359,  1362,  1364,  1368,  1371,  1374,  1377,  1381,
  1385,  1389,  1393,  1397,  1401,  1405,  1409,  1413,  1417,  1421,
  1425,  1429,  1433,  1439,  1444,  1449,  1454,  1459,  1464,  1469,
  1474,  1479,  1484,  1489,  1496,  1501,  1506,  1511,  1516,  1521,
  1526,  1533,  1540,  1547,  1552,  1557,  1562,  1567,  1572,  1577,
  1582,  1587,  1592,  1597,  1602,  1609,  1614,  1619,  1624,  1629,
  1634,  1639,  1646,  1653,  1660,  1665,  1667,  1669,  1671,  1673,
  1675,  1677,  1679,  1681,  1687,  1692,  1697,  1700,  1706,  1710,
  1717,  1722,  1730,  1737,  1739,  1742,  1745,  1749,  1753,  1765,
  1775,  1783,  1791,  1792,  1796,  1800,  1802,  1806,  1808,  1810,
  1813,  1817,  1822,  1826,  1832,  1837,  1839,  1841,  1843,  1847,
  1852,  1859,  1867,  1869,  1871,  1875,  1879,  1889,  1897,  1899,
  1905,  1909,  1916,  1918,  1922,  1924,  1926,  1933,  1938,  1943,
  1948,  1955,  1962
};

static const short yyrhs[] = {   143,
     0,     1,     6,     0,     0,   143,   144,     0,   147,     0,
   146,     0,   166,     0,   167,     0,   168,     0,   171,     0,
   172,     0,   173,     0,   174,     0,   177,     0,   192,     0,
   193,     0,   176,     0,   175,     0,   119,     0,   119,   119,
     0,    33,   132,     5,   133,     6,     0,    33,   132,     5,
   133,   145,   206,     6,     0,    33,   132,     5,   138,   202,
   133,     6,     0,    33,   132,     5,   138,   202,   133,   145,
   206,     6,     0,     4,     5,   139,   148,   140,     6,     0,
     4,     5,     4,   196,   139,   148,   140,     6,     0,     0,
   148,   151,     0,   148,   155,     0,   148,   158,     0,   148,
   160,     0,   148,   161,     0,   148,   163,     0,   194,     0,
   149,   138,   194,     0,   194,     0,   150,   138,   194,     0,
     0,     0,     4,   152,   132,   149,   133,   153,   139,   150,
   140,     6,     0,   206,     0,   154,   138,   206,     0,     0,
    76,   132,   194,   138,   194,   138,   194,   133,   156,   139,
   154,   140,     6,     0,   206,     0,   157,   138,   206,     0,
     0,    77,   132,   194,   138,   194,   138,   194,   138,   194,
   133,   159,   139,   157,   140,     6,     0,    78,   139,   199,
   140,   139,   199,   140,     6,     0,     0,    79,   162,   139,
   150,   140,     6,     0,    80,   132,   194,   133,   200,     6,
     0,     7,     0,   107,     0,   108,     0,   109,     0,   110,
     0,   128,     0,   129,     0,     4,   164,   194,     6,     0,
     4,   134,   194,   135,   164,   194,     6,     0,     4,   134,
   139,   202,   140,   135,   164,   200,     6,     0,     4,   134,
   135,     7,   200,     6,     0,     4,   134,   135,   107,   200,
     6,     0,     4,   165,     6,     0,     4,   134,   194,   135,
   165,     6,     0,     4,   136,     4,     7,   206,     6,     0,
     4,   134,   194,   135,   136,     4,     7,   206,     6,     0,
     4,   136,     4,   164,   194,     6,     0,     4,   134,   194,
   135,   136,     4,   164,   194,     6,     0,     4,   136,     4,
   165,     6,     0,     4,   134,   194,   135,   136,     4,   165,
     6,     0,     4,   136,    89,   136,     4,     7,   203,     6,
     0,     4,   134,   194,   135,   136,    89,   136,     4,     7,
   203,     6,     0,     4,   136,    90,     7,   204,     6,     0,
     4,   134,   194,   135,   136,    90,     7,   204,     6,     0,
    60,   132,     4,   133,   136,     4,     7,   194,     6,     0,
    60,   132,     4,   133,   136,     4,     7,   206,     6,     0,
    41,   132,   194,   133,     7,   196,     6,     0,    56,    41,
   132,   194,   133,     7,   200,     6,     0,    72,    41,   200,
     7,   139,   194,   138,   194,   138,   194,   140,     6,     0,
    48,    49,   200,     7,   194,     6,     0,    44,   132,   194,
   133,     7,   200,     6,     0,    46,   132,   194,   133,     7,
   200,     6,     0,    42,   132,   194,   133,     7,   200,     6,
     0,    42,   132,   194,   133,     7,   200,    52,   196,     6,
     0,    43,   132,   194,   133,     7,   200,     6,     0,    43,
   132,   194,   133,     7,   200,    52,   196,     6,     0,    50,
   132,   194,   133,     7,   139,   194,   138,   194,   138,     5,
   138,     5,   138,     5,   140,     6,     0,    82,   132,   194,
   133,     7,   200,     6,     0,    83,   132,   194,   133,     7,
   200,     6,     0,    84,   132,   194,   133,     7,   200,    88,
   200,    85,   194,     6,     0,    44,    67,   132,   194,   133,
     7,   200,     6,     0,    72,    44,   200,     7,   139,   194,
   138,   194,   138,   194,   140,     6,     0,    56,    44,   132,
   194,   133,     7,   200,     6,     0,    52,    45,   132,   194,
   133,     7,   200,     6,     0,    53,    45,   132,   194,   133,
     7,   200,     6,     0,   100,    45,   132,   194,   133,     7,
   139,   194,   138,   200,   140,     6,     0,    84,    45,    86,
    87,   132,   194,   133,     7,   198,    88,   139,   200,   138,
   200,   140,    85,   139,   194,   138,   194,   140,     6,     0,
    84,    45,   132,   194,   133,     7,   198,    88,   139,   200,
   138,   200,   140,    85,   139,   194,   138,   194,   140,     6,
     0,    45,    67,   132,   194,   133,     7,   200,     6,     0,
    56,    45,   132,   194,   133,     7,   200,     6,     0,    55,
    47,   132,   194,   133,     7,   200,     6,     0,    47,   132,
   194,   133,     7,   200,     6,     0,    56,    47,   132,   194,
   133,     7,   200,     6,     0,    62,   196,   139,   169,   140,
     0,    61,   139,   196,   138,   196,   138,   194,   140,   139,
   169,   140,     0,    63,   196,   139,   169,   140,     0,    64,
   139,   196,   138,   194,   140,   139,   169,   140,     0,   171,
     0,   170,     0,   168,     0,     0,   170,   167,     0,   170,
    41,   139,   202,   140,     6,     0,   170,    44,   139,   202,
   140,     6,     0,   170,    45,   139,   202,   140,     6,     0,
   170,    47,   139,   202,   140,     6,     0,    66,   139,   170,
   140,     0,    66,     4,   134,   194,   135,     6,     0,    74,
     4,   134,   194,   135,     6,     0,    75,     4,   134,   194,
   135,     6,     0,    69,   139,   170,   140,     0,    69,     4,
   134,   194,   135,     6,     0,    69,     4,     6,     0,    69,
     4,     4,     6,     0,    89,   203,   139,   170,   140,     0,
   101,   206,     6,     0,   102,   206,     6,     0,   101,   139,
   170,   140,     0,   102,   139,   170,   140,     0,     4,   206,
     6,     0,     4,     4,   134,   194,   135,   206,     6,     0,
     4,     4,     4,   134,   194,   135,     6,     0,     4,   194,
     6,     0,    60,   132,     4,   133,   136,     4,     6,     0,
    81,     4,     6,     0,    96,     6,     0,    38,     6,     0,
    38,   139,   194,   138,   194,   138,   194,   138,   194,   138,
   194,   138,   194,   140,     6,     0,    39,     6,     0,    91,
   132,   194,     8,   194,   133,     0,    91,   132,   194,     8,
   194,     8,   194,   133,     0,    91,     4,    92,   139,   194,
     8,   194,   140,     0,    91,     4,    92,   139,   194,     8,
   194,     8,   194,   140,     0,    93,     0,    99,     4,     0,
    97,     0,    98,     4,     6,     0,    94,   132,   194,   133,
     0,    95,     0,    65,   196,   139,   170,   140,     0,    65,
   139,   196,   138,   196,   138,   194,   140,   139,   170,   140,
     0,    65,   139,   196,   138,   196,   138,   196,   138,   194,
   140,   139,   170,   140,     0,     0,    65,   196,   139,   170,
   178,   190,   140,     0,     0,    65,   139,   196,   138,   196,
   138,   194,   140,   139,   170,   179,   190,   140,     0,     0,
    65,   139,   196,   138,   196,   138,   196,   138,   194,   140,
   139,   170,   180,   190,   140,     0,    65,    41,   139,   194,
   138,   196,   140,     6,     0,    65,    44,   139,   194,   138,
   196,   140,     6,     0,    65,    45,   139,   194,   138,   196,
   140,     6,     0,    65,    41,   139,   194,   138,   196,   138,
   196,   138,   194,   140,     6,     0,    65,    44,   139,   194,
   138,   196,   138,   196,   138,   194,   140,     6,     0,    65,
    45,   139,   194,   138,   196,   138,   196,   138,   194,   140,
     6,     0,    65,    41,   139,   194,   138,   196,   138,   196,
   138,   196,   138,   194,   140,     6,     0,    65,    44,   139,
   194,   138,   196,   138,   196,   138,   196,   138,   194,   140,
     6,     0,    65,    45,   139,   194,   138,   196,   138,   196,
   138,   196,   138,   194,   140,     6,     0,     0,    65,    41,
   139,   194,   138,   196,   140,   181,   139,   190,   140,     6,
     0,     0,    65,    44,   139,   194,   138,   196,   140,   182,
   139,   190,   140,     6,     0,     0,    65,    45,   139,   194,
   138,   196,   140,   183,   139,   190,   140,     6,     0,     0,
    65,    41,   139,   194,   138,   196,   138,   196,   138,   194,
   140,   184,   139,   190,   140,     6,     0,     0,    65,    44,
   139,   194,   138,   196,   138,   196,   138,   194,   140,   185,
   139,   190,   140,     6,     0,     0,    65,    45,   139,   194,
   138,   196,   138,   196,   138,   194,   140,   186,   139,   190,
   140,     6,     0,     0,    65,    41,   139,   194,   138,   196,
   138,   196,   138,   196,   138,   194,   140,   187,   139,   190,
   140,     6,     0,     0,    65,    44,   139,   194,   138,   196,
   138,   196,   138,   196,   138,   194,   140,   188,   139,   190,
   140,     6,     0,     0,    65,    45,   139,   194,   138,   196,
   138,   196,   138,   196,   138,   194,   140,   189,   139,   190,
   140,     6,     0,   191,     0,   190,   191,     0,    73,   139,
   200,   138,   200,   138,   200,   140,     6,     0,    73,   139,
   200,   138,   200,   140,     6,     0,    68,     6,     0,    54,
    44,   200,     7,   194,     6,     0,    54,    44,   200,     7,
   194,    57,    59,   194,     6,     0,    54,    44,   200,     7,
   194,    57,    58,   194,     6,     0,    54,    45,   139,   194,
   140,     7,   200,     6,     0,    54,    45,   139,   194,   140,
     7,   200,     4,     6,     0,    51,    45,   139,   194,   140,
     7,   200,     6,     0,    54,    47,   139,   194,   140,     7,
   200,     6,     0,    68,    45,   200,     7,   194,     6,     0,
    68,    45,   200,     6,     0,    70,     6,     0,    71,     6,
     0,   195,     0,   132,   194,   133,     0,   122,   194,     0,
   121,   194,     0,   127,   194,     0,   194,   122,   194,     0,
   194,   121,   194,     0,   194,   123,   194,     0,   194,   124,
   194,     0,   194,   125,   194,     0,   194,   131,   194,     0,
   194,   117,   194,     0,   194,   119,   194,     0,   194,   118,
   194,     0,   194,   120,   194,     0,   194,   114,   194,     0,
   194,   115,   194,     0,   194,   113,   194,     0,   194,   112,
   194,     0,   194,   111,   194,     8,   194,     0,    12,   132,
   194,   133,     0,    13,   132,   194,   133,     0,    14,   132,
   194,   133,     0,    15,   132,   194,   133,     0,    16,   132,
   194,   133,     0,    17,   132,   194,   133,     0,    18,   132,
   194,   133,     0,    19,   132,   194,   133,     0,    20,   132,
   194,   133,     0,    22,   132,   194,   133,     0,    23,   132,
   194,   138,   194,   133,     0,    24,   132,   194,   133,     0,
    25,   132,   194,   133,     0,    26,   132,   194,   133,     0,
    27,   132,   194,   133,     0,    28,   132,   194,   133,     0,
    29,   132,   194,   133,     0,    30,   132,   194,   138,   194,
   133,     0,    31,   132,   194,   138,   194,   133,     0,    32,
   132,   194,   138,   194,   133,     0,    21,   132,   194,   133,
     0,    12,   134,   194,   135,     0,    13,   134,   194,   135,
     0,    14,   134,   194,   135,     0,    15,   134,   194,   135,
     0,    16,   134,   194,   135,     0,    17,   134,   194,   135,
     0,    18,   134,   194,   135,     0,    19,   134,   194,   135,
     0,    20,   134,   194,   135,     0,    22,   134,   194,   135,
     0,    23,   134,   194,   138,   194,   135,     0,    24,   134,
   194,   135,     0,    25,   134,   194,   135,     0,    26,   134,
   194,   135,     0,    27,   134,   194,   135,     0,    28,   134,
   194,   135,     0,    29,   134,   194,   135,     0,    30,   134,
   194,   138,   194,   135,     0,    31,   134,   194,   138,   194,
   135,     0,    32,   134,   194,   138,   194,   135,     0,    21,
   134,   194,   135,     0,     3,     0,     9,     0,    10,     0,
    11,     0,   104,     0,   105,     0,   106,     0,     4,     0,
     4,   141,   139,   194,   140,     0,     4,   134,   194,   135,
     0,   137,     4,   134,   135,     0,     4,   165,     0,     4,
   134,   194,   135,   165,     0,     4,   136,     4,     0,     4,
   134,   194,   135,   136,     4,     0,     4,   136,     4,   165,
     0,     4,   134,   194,   135,   136,     4,   165,     0,   103,
   132,     5,   138,   194,   133,     0,   197,     0,   122,   196,
     0,   121,   196,     0,   196,   122,   196,     0,   196,   121,
   196,     0,   139,   194,   138,   194,   138,   194,   138,   194,
   138,   194,   140,     0,   139,   194,   138,   194,   138,   194,
   138,   194,   140,     0,   139,   194,   138,   194,   138,   194,
   140,     0,   132,   194,   138,   194,   138,   194,   133,     0,
     0,   139,   199,   140,     0,   132,   199,   133,     0,   200,
     0,   199,   138,   200,     0,   194,     0,   201,     0,   139,
   140,     0,   139,   202,   140,     0,   122,   139,   202,   140,
     0,   194,     8,   194,     0,   194,     8,   194,     8,   194,
     0,    41,   139,   194,   140,     0,   168,     0,   171,     0,
   177,     0,     4,   134,   135,     0,   122,     4,   134,   135,
     0,     4,   134,   139,   202,   140,   135,     0,   122,     4,
   134,   139,   202,   140,   135,     0,   194,     0,   201,     0,
   202,   138,   194,     0,   202,   138,   201,     0,   139,   194,
   138,   194,   138,   194,   138,   194,   140,     0,   139,   194,
   138,   194,   138,   194,   140,     0,     4,     0,     4,   136,
    89,   136,     4,     0,   139,   205,   140,     0,     4,   134,
   194,   135,   136,    90,     0,   203,     0,   205,   138,   203,
     0,     5,     0,    40,     0,    35,   132,   206,   138,   206,
   133,     0,    36,   132,   206,   133,     0,    37,   132,   206,
   133,     0,    34,   132,   206,   133,     0,    34,   132,   206,
   138,   202,   133,     0,    34,   132,     4,   136,     4,   133,
     0,    34,   132,     4,   134,   194,   135,   136,     4,   133,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   149,   151,   154,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   171,   176,
   182,   188,   203,   216,   244,   252,   261,   269,   270,   271,
   272,   273,   274,   277,   280,   284,   287,   291,   482,   500,
   510,   516,   523,   531,   537,   543,   550,   558,   564,   572,
   577,   581,   590,   592,   593,   594,   595,   598,   600,   603,
   638,   677,   731,   748,   766,   777,   796,   810,   827,   853,
   880,   894,   911,   925,   942,   962,   985,   995,  1010,  1030,
  1046,  1065,  1084,  1102,  1120,  1138,  1164,  1182,  1208,  1228,
  1252,  1276,  1302,  1319,  1337,  1356,  1375,  1414,  1439,  1458,
  1477,  1493,  1513,  1530,  1547,  1567,  1573,  1578,  1583,  1590,
  1592,  1593,  1596,  1601,  1605,  1621,  1637,  1653,  1673,  1688,
  1694,  1700,  1711,  1721,  1731,  1745,  1763,  1777,  1786,  1792,
  1803,  1816,  1859,  1874,  1885,  1904,  1914,  1936,  1940,  1945,
  1950,  1960,  1977,  1993,  2019,  2046,  2078,  2085,  2090,  2096,
  2100,  2108,  2117,  2125,  2133,  2138,  2146,  2151,  2159,  2164,
  2174,  2181,  2188,  2195,  2202,  2209,  2216,  2223,  2230,  2237,
  2242,  2249,  2254,  2261,  2266,  2273,  2278,  2285,  2290,  2297,
  2302,  2309,  2314,  2321,  2326,  2333,  2338,  2348,  2352,  2357,
  2384,  2408,  2416,  2435,  2453,  2471,  2500,  2535,  2562,  2589,
  2603,  2621,  2626,  2635,  2637,  2638,  2639,  2640,  2641,  2642,
  2643,  2644,  2651,  2652,  2653,  2654,  2655,  2656,  2657,  2658,
  2659,  2660,  2661,  2662,  2663,  2664,  2665,  2666,  2667,  2668,
  2669,  2670,  2671,  2672,  2673,  2674,  2675,  2676,  2677,  2678,
  2679,  2680,  2681,  2682,  2684,  2685,  2686,  2687,  2688,  2689,
  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2697,  2698,  2699,
  2700,  2701,  2702,  2703,  2704,  2709,  2714,  2715,  2716,  2717,
  2718,  2719,  2723,  2739,  2754,  2774,  2788,  2801,  2824,  2842,
  2860,  2878,  2896,  2903,  2908,  2912,  2916,  2920,  2926,  2931,
  2935,  2939,  2945,  2949,  2953,  2959,  2965,  2972,  2978,  2982,
  2987,  2991,  3002,  3009,  3020,  3040,  3050,  3060,  3070,  3087,
  3106,  3130,  3158,  3164,  3168,  3172,  3184,  3189,  3201,  3208,
  3229,  3234,  3248,  3254,  3260,  3265,  3273,  3281,  3295,  3309,
  3313,  3332,  3354
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tGrain",
"tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn",
"tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION",
"tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"'#'","','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem","SendToFile",
"Printf","View","Views","ElementCoords","ElementValues","Element","@1","@2",
"Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","Shape",
"Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12","@13","@14",
"@15","@16","@17","ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   142,   142,   143,   143,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   145,   145,
   146,   146,   146,   146,   147,   147,   148,   148,   148,   148,
   148,   148,   148,   149,   149,   150,   150,   152,   153,   151,
   154,   154,   156,   155,   157,   157,   159,   158,   160,   162,
   161,   163,   164,   164,   164,   164,   164,   165,   165,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   168,   168,   168,   168,   169,
   169,   169,   170,   170,   170,   170,   170,   170,   171,   171,
   171,   171,   172,   172,   172,   172,   173,   174,   174,   174,
   174,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   176,   176,   176,   176,   176,   176,   176,   176,   176,
   176,   177,   177,   177,   178,   177,   179,   177,   180,   177,
   177,   177,   177,   177,   177,   177,   177,   177,   177,   181,
   177,   182,   177,   183,   177,   184,   177,   185,   177,   186,
   177,   187,   177,   188,   177,   189,   177,   190,   190,   191,
   191,   191,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   193,   193,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   196,   196,   196,   196,   196,   197,   197,
   197,   197,   198,   198,   198,   199,   199,   200,   200,   200,
   200,   200,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   202,   202,   202,   202,   203,   203,   203,   203,
   204,   204,   205,   205,   206,   206,   206,   206,   206,   206,
   206,   206,   206
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     5,     7,     7,     9,     6,     8,     0,     2,     2,     2,
     2,     2,     2,     1,     3,     1,     3,     0,     0,    10,
     1,     3,     0,    13,     1,     3,     0,    15,     8,     0,
     6,     6,     1,     1,     1,     1,     1,     1,     1,     4,
     7,     9,     6,     6,     3,     6,     6,     9,     6,     9,
     5,     8,     8,    11,     6,     9,     9,     9,     7,     8,
    12,     6,     7,     7,     7,     9,     7,     9,    17,     7,
     7,    11,     8,    12,     8,     8,     8,    12,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     6,     6,     4,     6,     3,     4,     5,     3,     3,     4,
     4,     3,     7,     7,     3,     7,     3,     2,     2,    15,
     2,     6,     8,     8,    10,     1,     2,     1,     3,     4,
     1,     5,    11,    13,     0,     7,     0,    13,     0,    15,
     8,     8,     8,    12,    12,    12,    14,    14,    14,     0,
    12,     0,    12,     0,    12,     0,    16,     0,    16,     0,
    16,     0,    18,     0,    18,     0,    18,     1,     2,     9,
     7,     2,     6,     9,     9,     8,     9,     8,     8,     6,
     4,     2,     2,     1,     3,     2,     2,     2,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     5,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     4,     4,     4,
     6,     6,     6,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     1,     1,     1,     1,     1,
     1,     1,     1,     5,     4,     4,     2,     5,     3,     6,
     4,     7,     6,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     0,     3,     3,     1,     3,     1,     1,     2,
     3,     4,     3,     5,     4,     1,     1,     1,     3,     4,
     6,     7,     1,     1,     3,     3,     9,     7,     1,     5,
     3,     6,     1,     3,     1,     1,     6,     4,     4,     4,
     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   146,     0,   151,     0,   148,     0,     0,     0,
     0,     0,     4,     6,     5,     7,     8,     9,    10,    11,
    12,    13,    18,    17,    14,    15,    16,   266,   273,   325,
    53,   267,   268,   269,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   326,
     0,   270,   271,   272,    54,    55,    56,    57,     0,     0,
     0,    58,    59,     0,     0,     0,     0,     0,     0,     0,
   204,     0,     0,   139,     0,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   284,     0,     0,     0,     0,     0,
     0,     0,     0,   113,     0,     0,   113,   202,   203,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   319,     0,
     0,     0,     0,     0,   138,     0,   147,     0,   325,   113,
     0,   113,     0,     0,     0,     0,     0,   277,     0,    27,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   273,   207,   206,
   208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    65,   135,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   132,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   273,     0,
     0,     0,   306,   307,   308,   298,     0,   299,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   286,   285,     0,     0,     0,     0,   113,   113,
     0,     0,     0,     0,     0,     0,     0,     0,   113,     0,
     0,     0,     0,   125,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,     0,     0,     0,   113,     0,
     0,     0,   149,     0,     0,   128,     0,   129,     0,     0,
   279,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   205,     0,     0,     0,   313,   314,     0,
     0,    53,     0,     0,     0,     0,     0,    60,     0,   222,
   221,   219,   220,   215,   217,   216,   218,   210,   209,   211,
   212,   213,   214,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   273,     0,   300,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   288,   287,
   112,     0,   111,   110,     0,     0,     0,     0,     0,     0,
     0,   155,     0,     0,     0,     0,     0,   119,   114,   201,
     0,   126,     0,   123,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
   130,   131,     0,   275,   281,     0,    27,    38,     0,     0,
     0,    50,     0,     0,    28,    29,    30,    31,    32,    33,
   224,   245,   225,   246,   226,   247,   227,   248,   228,   249,
   229,   250,   230,   251,   231,   252,   232,   253,   244,   265,
   233,   254,     0,     0,   235,   256,   236,   257,   237,   258,
   238,   259,   239,   260,   240,   261,     0,     0,     0,     0,
     0,     0,     0,     0,   330,     0,     0,   328,   329,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    71,     0,     0,     0,     0,   276,     0,    21,    19,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   309,     0,     0,     0,     0,   301,   303,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,   108,     0,     0,     0,     0,
     0,   152,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   127,     0,     0,     0,     0,     0,   278,     0,   274,
     0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   275,    63,    64,   315,   316,     0,     0,     0,     0,
     0,    66,    67,    69,     0,     0,   323,     0,    75,   223,
    20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   305,   310,     0,   302,     0,    82,     0,
     0,     0,     0,   193,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   188,   120,     0,     0,     0,     0,
   200,   124,     0,     0,   121,   122,     0,     0,     0,   293,
     0,   320,     0,     0,     0,   142,     0,   134,   280,   133,
     0,     0,     0,     0,     0,   296,     0,     0,   234,   255,
   241,   262,   242,   263,   243,   264,     0,   332,   331,   327,
   283,     0,    53,     0,     0,     0,     0,    61,     0,     0,
     0,   321,    22,    23,     0,     0,    79,    85,     0,    87,
     0,     0,    83,     0,    84,   104,     0,     0,   304,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,     0,     0,     0,     0,   113,     0,   170,
     0,   172,     0,   174,     0,     0,   192,     0,   156,   189,
     0,     0,     0,     0,     0,     0,    90,    91,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   282,    26,     0,
    34,     0,     0,     0,     0,     0,    36,     0,     0,     0,
     0,     0,    72,     0,     0,    73,     0,   324,     0,     0,
     0,     0,    93,   101,   311,     0,     0,   198,    96,    97,
     0,     0,     0,   196,   199,   103,    80,    95,   102,   105,
     0,     0,     0,   292,     0,   291,     0,     0,   161,     0,
     0,   162,     0,     0,   163,     0,     0,     0,     0,   115,
   116,   117,   118,     0,     0,   293,     0,     0,     0,     0,
     0,   318,     0,   144,   143,     0,    39,     0,     0,     0,
   297,     0,     0,     0,     0,     0,    62,    68,    70,     0,
    76,     0,    24,     0,    86,    88,   312,     0,   195,   194,
   197,    77,    78,   113,     0,   109,     0,     0,     0,     0,
     0,     0,   113,     0,     0,     0,     0,     0,   295,   294,
     0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
    37,    51,    52,   333,     0,   322,     0,     0,     0,     0,
   290,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   157,     0,     0,     0,     0,     0,     0,     0,   317,   145,
     0,     0,     0,     0,     0,    74,     0,     0,   107,     0,
   176,     0,     0,   178,     0,     0,   180,     0,     0,   153,
     0,   113,     0,     0,     0,     0,     0,     0,    92,     0,
     0,    43,     0,    49,     0,     0,   289,   164,     0,     0,
   171,   165,     0,     0,   173,   166,     0,     0,   175,     0,
   159,     0,   191,    81,    94,     0,     0,    98,     0,     0,
     0,     0,     0,     0,   182,     0,   184,     0,   186,   158,
   154,     0,     0,     0,     0,    40,     0,    47,     0,     0,
     0,   167,     0,     0,   168,     0,     0,   169,     0,     0,
   190,     0,     0,     0,    41,     0,   140,     0,     0,     0,
     0,     0,     0,     0,   160,     0,     0,     0,     0,     0,
     0,   177,     0,   179,     0,   181,     0,     0,     0,    42,
    44,     0,    45,    89,     0,     0,     0,     0,     0,     0,
     0,   183,   185,   187,     0,     0,    46,    48,     0,     0,
     0,   100,     0,    99,     0,     0,     0
};

static const short yydefgoto[] = {  1195,
     2,    53,   610,    54,    55,   364,   890,   896,   535,   682,
  1016,  1144,   536,  1110,  1172,   537,  1146,   538,   539,   686,
   540,   118,   198,    56,   499,   293,   482,   483,   294,    60,
    61,    62,    63,    64,   295,   653,  1071,  1122,   940,   943,
   946,  1089,  1093,  1097,  1133,  1136,  1139,   764,   765,    66,
    67,   296,   121,   313,   155,   882,   795,   796,   298,   420,
   181,   605,   718,   122
};

static const short yypact[] = {  2304,
    11,  2701,-32768,  1846,   -94,     3,    42,   -88,   -68,   -36,
   -34,    41,    32,    50,    86,   108,   133,   201,   213,   517,
   234,   553,   157,   160,   327,   327,   168,   250,     7,   268,
    14,   355,   364,    35,   349,   369,   393,   273,   289,   -31,
    15,     6,-32768,   302,-32768,   370,-32768,   413,   449,   417,
    23,    31,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    22,    16,
-32768,-32768,-32768,-32768,   -37,     2,   208,   262,   434,   435,
   467,   470,   487,   490,   493,   494,   498,   501,   550,   572,
   576,   579,   582,   596,   597,   338,   348,   363,   373,-32768,
   386,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2061,  2061,
  2061,-32768,-32768,  2061,  1447,    26,   482,  2061,   529,   684,
-32768,   532,   536,-32768,  2061,-32768,  2061,  2061,  2061,   414,
  2061,   415,  2061,  2061,  1380,  2061,   432,   440,   456,  1380,
   442,   448,   460,   463,   509,   523,   534,   663,   327,   327,
   327,  2061,  2061,   -52,-32768,   153,   327,   531,   538,   539,
  1685,   194,   537,-32768,  1380,     9,-32768,-32768,-32768,  1380,
  1380,   566,   567,   701,  2061,  2061,   -47,  2061,   583,  2061,
   600,   626,  2061,  2061,-32768,   729,-32768,   590,-32768,-32768,
   743,-32768,   763,   581,  2061,   774,   647,-32768,   327,-32768,
  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,
  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,
  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,
  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,
  2061,  2061,    38,   403,   403,   403,   778,   429,   660,   660,
   660,  4852,    -5,  1896,  4077,   271,   664,   806,   695,   779,
-32768,-32768,  2061,  2061,  2061,  2061,  2061,  2061,  2061,  2061,
  2061,  2061,  2061,  2061,  2061,  2061,  2061,-32768,   199,  3285,
  4875,  4898,  4921,  2061,  4944,  2061,  4967,  4990,   455,   712,
  1715,  1248,-32768,-32768,-32768,  2118,   841,-32768,  5013,  2061,
  2061,  2061,   854,  2061,  2061,  2061,  2061,  2061,  2061,  2061,
   733,   155,-32768,-32768,  3307,  3329,   327,   327,   598,   598,
   339,  2061,  2061,  2061,  1685,  1685,  2061,   343,-32768,  2061,
  2366,   189,   863,-32768,  2061,  2387,   866,   870,  2061,  2061,
-32768,  5036,  5059,   783,  2061,  5082,   789,  3351,-32768,   740,
  2133,  5105,-32768,  2061,  2433,-32768,  2493,-32768,  2061,  4102,
   257,  2061,   308,     4,  5128,  4127,  5151,  4152,  5174,  4177,
  5197,  4202,  5220,  4227,  5243,  4252,  5266,  4277,  5289,  4302,
  5312,  4327,  5335,  4352,  5358,  4377,  3373,  3395,  5381,  4402,
  5404,  4427,  5427,  4452,  5450,  4477,  5473,  4502,  5496,  4527,
  3417,  3439,  3461,  3483,  3505,  3527,   619,   285,   742,   748,
   749,   746,  2061,-32768,  1380,  1380,  2091,  2118,-32768,   618,
   238,   403,  2061,   879,   882,    20,   752,-32768,  2148,   492,
   623,   642,   642,   602,   602,   602,   602,   124,   124,   660,
   660,   660,   660,    21,  1896,  2061,   888,   898,   900,  5519,
   901,  5542,   902,   905,  1511,  2061,   540,  1896,-32768,   630,
  2061,  2061,   907,  2379,  5565,  5588,  2061,  2506,  2753,  5611,
  5634,  5657,  5680,  5703,   780,   327,  2061,  2061,-32768,-32768,
-32768,   775,  2763,-32768,   777,  2061,  3549,  3571,  3593,  3257,
   327,  2514,  4552,   -39,   -20,   -30,    55,-32768,-32768,-32768,
  2061,-32768,  4577,-32768,   781,   782,  4602,  4627,   911,   912,
   791,  5726,   917,   805,  2061,  2560,  2061,  2061,-32768,  5749,
-32768,-32768,  4652,   274,-32768,  2777,-32768,-32768,   793,   810,
   804,-32768,   813,   941,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  2061,  2061,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2061,  2061,  2061,  2061,
  2061,  2061,  2061,   944,-32768,  1896,   403,-32768,-32768,  2061,
  4677,   943,   945,  1896,   817,    28,  2061,   947,   948,   815,
-32768,   949,   816,    15,   952,-32768,  2061,-32768,   836,   403,
   312,  3615,   327,  1380,  1380,   953,  1380,   954,  1380,  1380,
-32768,  1896,  2801,  1648,   636,-32768,  2163,   916,   823,   956,
   958,   959,   574,   960,   961,   965,   967,   970,   971,   972,
   976,   347,  3637,  3659,-32768,-32768,  2825,   327,   327,   327,
   350,-32768,   410,   975,  1896,  1896,  1896,  1896,   999,   977,
  2061,  2061,   978,   979,  1380,  1380,  2061,   981,  1380,   982,
  3681,-32768,  2178,   713,   983,   985,   988,-32768,   990,-32768,
    12,   850,  2061,  2061,  1380,   855,  2061,-32768,  5772,  4702,
  5795,  4727,  5818,  4752,  5841,  4777,  4802,   856,   379,   865,
  5864,   -74,-32768,-32768,  2118,-32768,   176,   283,   864,   994,
  1026,-32768,-32768,-32768,    15,  2061,-32768,   637,-32768,  6025,
-32768,  1000,    46,  2061,    39,    34,    47,  1380,  1001,  1380,
  1003,  1004,   644,-32768,-32768,  1896,-32768,  2061,-32768,  2061,
  1380,  1380,  1380,-32768,   269,  1380,  1380,  1380,  1380,  1380,
  1380,  1380,   502,  2061,  2061,  2061,   872,   -18,   293,   306,
  1685,  1006,   874,   -27,-32768,-32768,   649,   654,   674,   678,
-32768,-32768,  3703,  3725,-32768,-32768,  1010,  1011,  5887,   256,
   930,-32768,  2061,  2061,  2061,-32768,   880,-32768,   257,-32768,
  1014,  2061,  3747,  3769,   679,-32768,  2061,  5910,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   906,-32768,-32768,-32768,
-32768,  1380,   403,  2061,  1018,  1039,    20,-32768,  1038,  4827,
    15,-32768,-32768,-32768,   403,  3791,-32768,-32768,   327,-32768,
   327,  1040,-32768,  1043,-32768,-32768,   910,   682,  6025,  3813,
  1044,  1045,  1046,  2061,  2061,   839,  1047,  1048,  1050,  1053,
  1054,  1056,-32768,  2026,  2849,  5933,  1873,   598,   327,  1057,
   327,  1059,   327,  1060,  2873,   354,-32768,  1380,-32768,-32768,
  1061,  1062,  1063,  1064,  2061,  2061,-32768,-32768,  1065,  1380,
  1380,   986,  1380,  2200,   525,  5956,  2061,-32768,-32768,   398,
  6025,  2061,  2061,  1380,   932,   709,  6025,  1380,  1072,  1067,
  1071,  1069,-32768,  1073,  1076,-32768,   942,-32768,  1077,  2061,
    45,    71,-32768,-32768,-32768,   957,  2061,-32768,-32768,-32768,
  1084,  1173,  1082,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1213,  1085,   955,-32768,  2061,-32768,   969,   368,-32768,   962,
   372,-32768,   987,   378,-32768,   989,   992,  2061,   991,-32768,
-32768,-32768,-32768,  3835,  3857,   256,   404,   715,   993,  1008,
  2061,-32768,  2061,-32768,-32768,  3879,-32768,  2061,  3901,  3923,
-32768,  1380,  2061,  1089,  1090,  1002,-32768,-32768,-32768,    15,
-32768,  1025,-32768,  3945,-32768,-32768,-32768,  3967,-32768,-32768,
-32768,-32768,-32768,   598,  2719,-32768,  1685,   410,  1685,   410,
  1685,   410,-32768,  2897,  1380,  2061,  2061,  1012,-32768,-32768,
  1380,  2061,  2921,  2945,  1380,   995,  6025,  2061,  2061,   716,
  6025,-32768,-32768,-32768,  1121,-32768,  2061,  1128,   996,  2061,
-32768,  2969,   381,   -12,  2993,   402,   113,  3017,   407,   116,
  2620,  1013,   719,  3041,  3065,  1015,  1017,  1476,-32768,-32768,
  1019,  2061,  5979,  3989,  1136,-32768,  4011,  1022,-32768,  3089,
  1155,  2061,  1156,  1157,  2061,  1158,  1159,  2061,  1160,-32768,
   410,-32768,  1380,  1161,  1163,  1164,  1380,  1380,-32768,  1165,
   720,-32768,  2061,-32768,  2061,  1167,-32768,-32768,  1034,  3113,
-32768,-32768,  1037,  3137,-32768,-32768,  1074,  3161,-32768,   244,
  2641,  1070,-32768,-32768,-32768,  1078,  1080,-32768,  1171,  1075,
  6002,  3185,  1079,   410,  1205,   410,  1206,   410,  1212,-32768,
-32768,   410,  1215,  1380,  1137,-32768,   403,-32768,  1220,  1223,
   266,-32768,  1091,   276,-32768,  1092,   284,-32768,  1093,   286,
-32768,  1094,  1096,   724,-32768,  1097,-32768,  1098,  1227,   410,
  1231,   410,  1234,   410,-32768,  1144,  2061,   403,  1235,   403,
  1236,-32768,   292,-32768,   295,-32768,   296,  1104,  4033,-32768,
-32768,   727,-32768,-32768,  1238,  1239,  1240,  2061,  2061,   403,
  1241,-32768,-32768,-32768,  4055,  3209,-32768,-32768,  2061,  1242,
  3233,-32768,  1243,-32768,  1253,  1255,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   533,-32768,-32768,   754,-32768,   230,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -252,     1,-32768,  1281,     5,  -319,  -161,    10,-32768,
-32768,-32768,-32768,-32768,  1297,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -977,  -633,-32768,
-32768,    -4,-32768,   226,-32768,   344,  -846,   356,  -107,  -102,
  -582,   484,-32768,    -2
};


#define	YYLAST		6156


static const short yytable[] = {   120,
   485,   415,   331,   423,   119,   336,    58,   528,   124,   182,
   163,    59,   333,   177,   334,   528,     3,   166,   179,   199,
  1034,   717,  1037,   603,  1040,   194,   608,   189,   355,   256,
   357,   708,   130,   957,   958,   189,   132,   123,   344,   828,
   762,   407,   189,   127,   827,   763,   130,   126,   191,   193,
   985,   824,   830,   112,   113,   762,    96,    97,    98,    99,
   763,   677,   100,   128,    96,    97,    98,    99,   317,   318,
   100,    96,    97,    98,    99,   170,   986,   100,   171,   529,
   530,   531,   532,   533,   345,   829,   319,   529,   530,   531,
   532,   533,   127,  1100,   201,   129,   202,   131,   831,   655,
   178,   416,   317,   318,   249,   250,   251,   132,   657,   252,
   255,   131,   869,   260,   257,   258,   709,   710,   656,   859,
   280,   860,   281,   282,   283,  1020,   285,  1063,   287,   288,
   870,   299,   819,   203,   135,   204,  1131,   183,  1134,   609,
  1137,   125,   335,   534,  1140,   164,   419,   315,   316,   112,
   113,   791,   167,   180,   200,   195,   316,   196,   604,   317,
   318,   190,   197,   133,   609,   317,   318,   492,   597,   192,
   342,   343,  1163,   346,  1165,   348,  1167,   137,   351,   352,
   762,   134,    71,   762,   419,   763,   134,   516,   763,   460,
   360,   317,   318,   658,   500,   501,   365,   366,   367,   368,
   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
   389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
   399,   400,   401,   402,   403,   404,   405,   406,   908,   136,
   408,   409,   410,   411,    71,   138,   274,   275,   276,   418,
   154,   156,  1066,   162,   277,  1069,   424,   139,   429,   430,
   431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
   441,   442,   443,   317,   318,   317,   318,   422,   189,   450,
   143,   452,   105,   106,   107,   108,   250,   418,   148,   813,
   158,   320,   476,   159,   160,   464,   465,   466,   149,   468,
   469,   470,   471,   472,   473,   474,   157,    96,    97,    98,
    99,   762,   165,   100,   317,   318,   763,   487,   488,   489,
   249,   250,   490,   481,   481,   493,   844,   845,   484,   484,
   503,   444,   329,   762,   507,   508,   445,   419,   763,   205,
   512,   206,   611,   762,   105,   106,   107,   108,   763,   520,
   419,   762,   172,   762,   523,   625,   763,   526,   763,   762,
   168,   525,   762,   762,   763,   112,   113,   763,   763,   169,
   150,   151,   173,   596,   312,   185,   314,   105,   106,   107,
   108,   152,   321,  1120,   112,   113,   328,   880,   161,   105,
   106,   107,   108,   207,   881,   208,   174,  1025,   112,   113,
   870,   112,   113,   870,   175,  1149,   870,   189,   591,   677,
   112,   113,   250,   317,   318,  1151,   186,   585,   600,   599,
   176,   598,   586,  1153,   363,  1155,   317,   318,   317,   318,
   861,  1175,   862,   184,  1176,  1177,    96,    97,    98,    99,
   418,   612,   100,   863,   723,   864,   527,   150,   151,   594,
   591,   623,   187,   418,   812,   814,   627,   628,   152,   317,
   318,   188,   633,   317,   318,   153,   870,   317,   318,   243,
   317,   318,   643,   644,   317,   318,   486,   762,   419,   244,
   491,   647,   763,   699,   754,   259,   706,   761,   317,   318,
   297,   948,   317,   318,   245,   303,   659,   870,   317,   318,
   870,   317,   318,   870,   246,   997,   870,   853,   854,   999,
   671,   809,   673,   674,   419,  1001,   594,   247,  1062,   733,
   332,   679,   317,   318,   678,   337,   338,   317,   318,   870,
   967,   870,   963,   870,   261,   968,  1009,   278,   937,  1065,
   279,   894,   479,   480,  1068,   284,   286,   419,   419,   419,
   419,   314,   767,   768,   769,   770,   112,   113,   689,   690,
   140,   141,   413,   142,   196,   209,   211,   210,   212,   197,
   300,   301,   691,   692,   693,   694,   695,   696,   697,   744,
   304,   418,   112,   113,   700,   701,   305,   302,   455,   705,
   196,   306,   711,   144,   307,   197,   145,   146,   213,   147,
   214,   215,   720,   216,   265,   266,   267,   722,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   418,   217,   591,
   218,   219,   277,   220,   221,   223,   222,   224,   419,   225,
   745,   226,   227,   838,   228,   263,   264,   265,   266,   267,
   308,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   418,   418,   418,   418,   309,   277,   773,   774,    24,    25,
    26,    27,   779,    29,   964,   310,   311,   112,   113,   322,
   330,    35,    36,   624,  1029,   196,   323,   324,   793,   794,
   197,   229,   798,   230,   263,   264,   265,   266,   267,   262,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   339,
   340,   642,   678,   231,   277,   232,   341,   233,   815,   234,
   235,   820,   236,   237,   359,   238,   651,   350,   347,   826,
   785,   354,   272,   273,   274,   275,   276,   239,   241,   240,
   242,   418,   277,   839,   353,   840,   266,   267,   349,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   356,   855,
   856,   857,   583,   277,   584,   594,   865,   595,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   594,   358,   626,
   592,   593,   277,   594,   821,   737,   822,   361,   884,   885,
   886,   594,   412,   837,   428,   362,   594,   891,   871,   888,
   277,   594,   897,   872,   263,   264,   265,   266,   267,   425,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   902,
   901,   594,   426,   873,   277,   594,   894,   874,   895,   594,
   714,   916,   909,   263,   264,   265,   266,   267,   427,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   725,   921,
   922,  1041,   923,   277,   924,   786,   973,   462,   974,   931,
   456,   932,   894,   894,  1010,  1055,  1073,   973,  1074,  1109,
   467,  1158,   481,  1159,  1180,   475,  1181,   484,   502,   511,
   954,   955,   505,   758,   759,   760,   506,   514,   517,   587,
   588,   589,   966,   590,   601,   602,   606,   969,   970,   263,
   264,   265,   266,   267,   613,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   614,   984,   615,   617,   619,   277,
  1101,   620,   988,   629,   645,   641,   646,   665,   666,   661,
   662,   739,   667,   669,   683,   263,   264,   265,   266,   267,
   995,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   670,   684,   685,  1004,   687,   277,   688,   698,   703,   716,
   704,   707,   712,   713,   721,   715,  1013,   719,  1014,   728,
   730,   740,   741,  1017,   742,   743,   746,   747,  1021,   726,
   727,   748,   729,   749,   731,   732,   750,   751,   752,   753,
   766,   792,   772,   775,   776,   782,   866,   780,   808,   787,
   788,   789,  1032,   797,  1035,   790,  1038,   810,   481,   816,
   817,  1044,  1045,   484,   771,   823,   833,  1048,   835,   836,
   858,   867,   868,  1053,  1054,   877,   878,   883,   887,   889,
   777,   778,  1057,   903,   781,  1060,   263,   264,   265,   266,
   267,   818,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   899,   904,   906,   915,   913,   277,   897,   914,   918,
   919,   920,   925,   926,   911,   927,   912,  1090,   928,   929,
  1094,   930,   939,  1098,   942,   945,   950,   951,   952,   953,
   972,   956,   977,   959,   979,   976,   978,   982,  1111,   980,
  1112,   981,   983,   832,   938,   834,   941,   991,   944,   989,
   993,   987,  1012,   994,  1022,  1023,   841,   842,   843,  1046,
   998,   846,   847,   848,   849,   850,   851,   852,   996,   263,
   264,   265,   266,   267,  1026,   268,   269,   270,   271,   272,
   273,   274,   275,   276,  1145,  1000,  1056,  1002,  1005,   277,
  1003,  1011,  1058,  1052,  1024,  1059,   263,   264,   265,   266,
   267,  1084,   268,   269,   270,   271,   272,   273,   274,   275,
   276,  1072,  1169,  1077,  1078,  1170,   277,  1173,  1080,  1086,
  1088,  1091,  1092,  1095,  1096,  1099,  1103,   900,  1104,  1105,
  1108,  1113,  1114,  1185,  1186,  1116,  1126,  1187,   990,   263,
   264,   265,   266,   267,  1191,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   263,   264,   265,   266,   267,   277,
   268,   269,   270,   271,   272,   273,   274,   275,   276,  1123,
  1132,  1135,  1118,  1127,   277,  1124,  1130,  1138,   992,  1125,
  1141,  1143,  1033,   949,  1036,  1147,  1039,  1148,  1168,  1150,
  1152,  1154,  1162,  1156,  1157,  1160,  1164,  1161,   960,  1166,
  1171,  1174,  1178,  1182,  1183,  1184,  1188,  1192,  1194,   971,
    68,   289,  1196,   975,  1197,   825,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
   681,  1081,    57,   263,   264,   265,   266,   267,   290,   268,
   269,   270,   271,   272,   273,   274,   275,   276,    65,  1008,
   905,     0,     0,   277,     0,     0,     0,     0,    24,    25,
    26,    27,    28,    29,     0,     0,     0,     0,     0,     0,
     0,    35,    36,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,     0,     0,     0,
   101,   102,   103,   104,     0,     0,     0,     0,     0,     0,
  1043,     0,     0,     0,     0,     0,  1047,     0,   109,   417,
  1051,     0,     0,     0,   111,     0,     0,     0,     0,   114,
     0,     0,    68,   289,   117,     0,     0,   459,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,     0,     0,     0,     0,     0,     0,     0,     0,
   290,     0,     0,     0,     0,     0,     0,     0,  1102,     0,
     0,     0,  1106,  1107,     0,     0,     0,     0,     0,     0,
    24,    25,    26,    27,    28,    29,     0,     0,     0,    68,
   248,     0,     0,    35,    36,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,  1142,
     0,  1079,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,   291,     0,     0,     0,     0,   111,     0,     0,     0,
     0,   114,     0,    68,   248,     0,   117,     0,   292,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,     0,     0,     0,     0,   101,
   102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,     0,
     0,     0,     0,   111,     0,     0,     0,     0,   114,     0,
     0,   253,     0,   117,     0,   254,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,     0,     0,
     0,     0,     0,   101,   102,   103,   104,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,     0,     0,     0,     0,   111,     0,     0,
     0,     0,   114,     0,     0,   621,     0,   117,     0,   622,
    68,   248,     0,     0,     0,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
     0,     0,     0,     0,     0,     0,     0,    68,   248,     0,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    68,   457,     0,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,     0,
   101,   102,   103,   104,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
     0,     0,     0,     0,   111,     0,     0,     0,     0,   114,
     0,     0,   735,     0,   117,     0,   736,   101,   102,   103,
   104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   325,   326,     0,     0,     0,
     0,   111,     0,     0,     0,     0,   327,   101,   102,   103,
   104,   117,     0,   153,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,     0,     0,     0,
     0,   111,     0,     0,     0,     0,   114,     0,    68,    69,
    70,   117,    71,   458,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,    96,
    97,    98,    99,     0,     0,   100,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    68,   289,
     0,     0,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,     0,
     0,     0,     0,     0,     0,     0,   290,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   101,   102,
   103,   104,   105,   106,   107,   108,    24,    25,    26,    27,
    28,    29,     0,     0,     0,     0,   109,   110,     0,    35,
    36,     0,   111,   112,   113,     0,     0,   114,     0,   115,
     0,   116,   117,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   101,   102,
   103,   104,     0,   277,     0,     0,     0,     0,     0,     0,
   935,     0,   936,     0,     0,     0,   109,   417,     0,     0,
     0,     0,   111,     0,     0,     0,     0,   114,    68,   248,
   189,     0,   117,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,    96,
    97,    98,    99,    68,   248,   100,     0,     0,     0,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    68,   457,     0,     0,     0,     0,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,   461,     0,     0,   101,   102,
   103,   104,     0,     0,     0,     0,     0,     0,     0,     0,
   518,     0,     0,     0,     0,     0,   109,   110,     0,     0,
     0,     0,   111,     0,     0,   607,     0,   114,     0,     0,
     0,     0,   117,   101,   102,   103,   104,     0,     0,     0,
   738,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,     0,     0,   784,     0,   111,     0,     0,
     0,     0,   114,   101,   102,   103,   104,   117,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,     0,     0,     0,     0,   111,     0,     0,
     0,     0,   114,     0,     0,     0,     0,   117,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   263,   264,   265,   266,   267,   277,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   263,   264,
   265,   266,   267,   277,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   263,   264,   265,   266,   267,   277,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   263,   264,
   265,   266,   267,   277,   268,   269,   270,   271,   272,   273,
   274,   275,   276,    -3,     1,     0,     0,    -3,   277,     0,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,     0,     0,     0,     0,    -3,   961,     0,   962,
     0,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,    -3,    -3,    -3,    -3,    -3,     0,    -3,    -3,     0,
     0,     0,     0,     0,    -3,    -3,    -3,    -3,     0,     0,
     0,     0,    -3,     0,    -3,     0,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,   494,     9,    10,   495,
   496,    13,   497,    15,     0,    16,     0,    18,    19,     0,
    21,    22,     0,     0,     0,     0,     0,   494,     9,    10,
   495,   496,    13,   497,    15,     0,    16,    34,    18,    19,
     0,    21,    22,     0,     0,     0,     0,    38,    39,    40,
     0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
     0,     0,     0,     0,     0,    50,     0,     0,    38,    39,
    40,     0,     0,   494,     9,    10,   495,   496,    13,   497,
    15,     0,    16,     0,    18,    19,    50,    21,    22,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,    34,   498,     0,     0,     0,   277,
     0,     0,     0,     0,    38,    39,    40,     0,   630,     0,
     0,     0,     0,     0,     0,     0,   504,     0,     0,     0,
     0,     0,    50,   494,     9,    10,   495,   496,    13,   497,
    15,     0,    16,     0,    18,    19,     0,    21,    22,     0,
     0,     0,     0,     0,   494,     9,    10,   495,   496,    13,
   497,    15,     0,    16,    34,    18,    19,     0,    21,    22,
     0,     0,   521,     0,    38,    39,    40,     0,     0,     0,
     0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
     0,     0,    50,     0,     0,    38,    39,    40,     0,     0,
   494,     9,    10,   495,   496,    13,   497,    15,     0,    16,
     0,    18,    19,    50,    21,    22,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,    34,   522,     0,     0,     0,   277,     0,     0,     0,
     0,    38,    39,    40,     0,   634,     0,     0,     0,     0,
     0,     0,     0,   652,     0,     0,     0,     0,     0,    50,
   494,     9,    10,   495,   496,    13,   497,    15,     0,    16,
     0,    18,    19,     0,    21,    22,     0,     0,     0,     0,
     0,   494,     9,    10,   495,   496,    13,   497,    15,     0,
    16,    34,    18,    19,     0,    21,    22,     0,     0,   672,
     0,    38,    39,    40,     4,     0,     0,     0,     0,     0,
     0,     0,    34,     0,     0,     0,     0,     0,     0,    50,
     0,     0,    38,    39,    40,     0,     0,     0,     0,     0,
     0,     0,     0,     5,     0,     0,     0,     0,     6,     7,
    50,     8,     9,    10,    11,    12,    13,    14,    15,     0,
    16,    17,    18,    19,    20,    21,    22,     0,     0,  1070,
    23,    24,    25,    26,    27,    28,    29,     0,    30,    31,
    32,    33,    34,     0,    35,    36,     0,     0,     0,     0,
  1121,    37,    38,    39,    40,     0,     0,     0,     0,    41,
     0,    42,     0,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,   494,     9,    10,   495,   496,    13,   497,
    15,     0,    16,     0,    18,    19,     0,    21,    22,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
   264,   265,   266,   267,    34,   268,   269,   270,   271,   272,
   273,   274,   275,   276,    38,    39,    40,     0,     0,   277,
     0,     0,     0,     0,     0,     0,  1030,     0,  1031,     0,
     0,     0,    50,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,   263,   264,   265,
   266,   267,   635,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   263,   264,   265,   266,   267,   680,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,     0,     0,   263,   264,   265,   266,   267,
   734,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,     0,     0,   263,
   264,   265,   266,   267,   757,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,     0,     0,   263,   264,   265,   266,   267,   933,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,   263,   264,   265,
   266,   267,   947,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   263,   264,   265,   266,   267,  1042,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,     0,     0,   263,   264,   265,   266,   267,
  1049,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,     0,     0,   263,
   264,   265,   266,   267,  1050,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,     0,     0,   263,   264,   265,   266,   267,  1061,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,   263,   264,   265,
   266,   267,  1064,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   263,   264,   265,   266,   267,  1067,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,     0,     0,   263,   264,   265,   266,   267,
  1075,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,     0,     0,   263,
   264,   265,   266,   267,  1076,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,     0,     0,   263,   264,   265,   266,   267,  1087,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,   263,   264,   265,
   266,   267,  1115,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   263,   264,   265,   266,   267,  1117,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,     0,     0,   263,   264,   265,   266,   267,
  1119,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,     0,     0,   263,
   264,   265,   266,   267,  1129,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,     0,     0,   263,   264,   265,   266,   267,  1190,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,     0,     0,   263,   264,   265,
   266,   267,  1193,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   414,
     0,     0,     0,     0,   477,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,   446,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,   477,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,   478,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,   515,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
   563,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,   564,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,   577,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,   578,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,   579,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
   580,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,   581,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,   582,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,   648,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,   649,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
   650,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,   724,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,   755,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,   756,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,   783,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
   875,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,   876,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,   892,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,   893,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,   910,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
   917,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,  1006,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,  1007,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,  1015,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,  1018,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
  1019,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,  1027,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   263,
   264,   265,   266,   267,  1028,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   263,   264,   265,   266,   267,  1083,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   263,   264,   265,   266,   267,  1085,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   263,   264,   265,   266,   267,
  1179,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   263,   264,   265,
   266,   267,  1189,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   421,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   524,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   542,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   544,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   546,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   548,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   550,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   552,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   554,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   556,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   558,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   560,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   562,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   566,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   568,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   570,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   572,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   574,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   576,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   654,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   660,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   663,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   664,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   676,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   702,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   800,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   802,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   804,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   806,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,     0,     0,   807,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,     0,
     0,   907,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   414,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   447,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   448,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   449,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   451,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   453,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   454,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   463,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   509,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   510,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   513,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   519,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   541,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   543,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   545,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   547,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   549,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   551,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   553,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   555,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   557,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   559,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   561,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   565,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   567,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   569,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   571,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   573,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   575,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   616,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   618,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   631,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   632,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   636,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   637,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   638,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   639,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   640,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   668,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,   675,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,   799,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277,     0,   801,   263,   264,
   265,   266,   267,     0,   268,   269,   270,   271,   272,   273,
   274,   275,   276,     0,     0,     0,     0,     0,   277,     0,
   803,   263,   264,   265,   266,   267,     0,   268,   269,   270,
   271,   272,   273,   274,   275,   276,     0,     0,     0,     0,
     0,   277,     0,   805,   263,   264,   265,   266,   267,     0,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     0,     0,     0,     0,   277,     0,   811,   263,   264,   265,
   266,   267,     0,   268,   269,   270,   271,   272,   273,   274,
   275,   276,     0,     0,     0,     0,     0,   277,     0,   879,
   263,   264,   265,   266,   267,     0,   268,   269,   270,   271,
   272,   273,   274,   275,   276,     0,     0,     0,     0,     0,
   277,     0,   898,   263,   264,   265,   266,   267,     0,   268,
   269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     0,     0,     0,   277,     0,   934,   263,   264,   265,   266,
   267,     0,   268,   269,   270,   271,   272,   273,   274,   275,
   276,     0,     0,     0,     0,     0,   277,     0,   965,   263,
   264,   265,   266,   267,     0,   268,   269,   270,   271,   272,
   273,   274,   275,   276,     0,     0,     0,     0,     0,   277,
     0,  1082,   263,   264,   265,   266,   267,     0,   268,   269,
   270,   271,   272,   273,   274,   275,   276,     0,     0,     0,
     0,     0,   277,     0,  1128,   263,   264,   265,   266,   267,
     0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     0,     0,     0,     0,     0,   277
};

static const short yycheck[] = {     4,
   320,     7,   164,   256,     4,   167,     2,     4,     6,     4,
     4,     2,     4,    45,     6,     4,     6,     4,     4,     4,
   998,   604,  1000,     4,  1002,     4,     6,     5,   190,     4,
   192,     4,    67,   880,   881,     5,    67,   132,    86,     6,
    68,     4,     5,   132,     6,    73,    67,     6,    51,    52,
     6,     6,     6,   128,   129,    68,    34,    35,    36,    37,
    73,   136,    40,   132,    34,    35,    36,    37,   121,   122,
    40,    34,    35,    36,    37,    41,     6,    40,    44,    76,
    77,    78,    79,    80,   132,    52,   139,    76,    77,    78,
    79,    80,   132,  1071,   132,   132,   134,   132,    52,   139,
   132,   107,   121,   122,   109,   110,   111,    67,   139,   114,
   115,   132,   140,   118,    89,    90,    89,    90,   139,   138,
   125,   140,   127,   128,   129,   972,   131,   140,   133,   134,
   764,   136,   715,   132,    49,   134,  1114,   132,  1116,   119,
  1118,   139,   134,   140,  1122,   139,   254,   152,   153,   128,
   129,   140,   139,   139,   139,   134,   161,   136,   139,   121,
   122,   139,   141,   132,   119,   121,   122,   329,   421,   139,
   175,   176,  1150,   178,  1152,   180,  1154,    45,   183,   184,
    68,   132,     7,    68,   292,    73,   132,   349,    73,   292,
   195,   121,   122,   139,     6,     7,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
   235,   236,   237,   238,   239,   240,   241,   242,   821,   132,
   243,   244,   245,   246,     7,    45,   123,   124,   125,   254,
    25,    26,   140,    28,   131,   140,   256,    45,   263,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   121,   122,   121,   122,     7,     5,   284,
    47,   286,   107,   108,   109,   110,   291,   292,   132,     7,
    41,   139,   138,    44,    45,   300,   301,   302,   139,   304,
   305,   306,   307,   308,   309,   310,   139,    34,    35,    36,
    37,    68,    45,    40,   121,   122,    73,   322,   323,   324,
   325,   326,   327,   319,   320,   330,    58,    59,   319,   320,
   335,   133,   139,    68,   339,   340,   138,   445,    73,   132,
   345,   134,   445,    68,   107,   108,   109,   110,    73,   354,
   458,    68,     4,    68,   359,   458,    73,   362,    73,    68,
     6,   361,    68,    68,    73,   128,   129,    73,    73,     6,
   121,   122,     4,   136,   149,     6,   151,   107,   108,   109,
   110,   132,   157,   140,   128,   129,   161,   132,   139,   107,
   108,   109,   110,   132,   139,   134,     4,   980,   128,   129,
  1034,   128,   129,  1037,   132,   140,  1040,     5,   413,   136,
   128,   129,   417,   121,   122,   140,     4,   133,   423,   422,
   132,   421,   138,   140,   199,   140,   121,   122,   121,   122,
   138,   140,   140,   132,   140,   140,    34,    35,    36,    37,
   445,   446,    40,   138,   133,   140,   139,   121,   122,   138,
   455,   456,     4,   458,   707,   708,   461,   462,   132,   121,
   122,    45,   467,   121,   122,   139,  1100,   121,   122,   132,
   121,   122,   477,   478,   121,   122,   138,    68,   586,   132,
   138,   486,    73,   586,   138,     4,   594,   138,   121,   122,
   135,   138,   121,   122,   132,   140,   501,  1131,   121,   122,
  1134,   121,   122,  1137,   132,   138,  1140,     6,     7,   138,
   515,   133,   517,   518,   622,   138,   138,   132,   138,   622,
   165,   524,   121,   122,   524,   170,   171,   121,   122,  1163,
   133,  1165,     8,  1167,     6,   138,   133,     6,   858,   138,
     5,   138,   317,   318,   138,   132,   132,   655,   656,   657,
   658,   326,   655,   656,   657,   658,   128,   129,   563,   564,
    44,    45,   134,    47,   136,   132,   132,   134,   134,   141,
   139,   132,   577,   578,   579,   580,   581,   582,   583,     6,
   139,   586,   128,   129,   587,   590,   139,   132,   134,   594,
   136,   132,   597,    41,   132,   141,    44,    45,   132,    47,
   134,   132,   607,   134,   113,   114,   115,   610,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   622,   132,   624,
   134,   132,   131,   134,   132,   132,   134,   134,   736,   132,
    57,   134,   132,   736,   134,   111,   112,   113,   114,   115,
   132,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   655,   656,   657,   658,   132,   131,   661,   662,    61,    62,
    63,    64,   667,    66,   140,   132,     4,   128,   129,   139,
   134,    74,    75,   134,   994,   136,   139,   139,   683,   684,
   141,   132,   687,   134,   111,   112,   113,   114,   115,     6,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   134,
   134,   476,   702,   132,   131,   134,     6,   132,   708,   134,
   132,   716,   134,   132,   134,   134,   491,    92,   136,   724,
     8,   132,   121,   122,   123,   124,   125,   132,   132,   134,
   134,   736,   131,   738,     6,   740,   114,   115,   139,   117,
   118,   119,   120,   121,   122,   123,   124,   125,     6,   754,
   755,   756,   134,   131,   136,   138,   761,   140,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   138,     6,   140,
   415,   416,   131,   138,   138,   140,   140,     4,   783,   784,
   785,   138,     5,   140,     6,   139,   138,   792,   140,   789,
   131,   138,   797,   140,   111,   112,   113,   114,   115,   136,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   814,
   813,   138,     7,   140,   131,   138,   138,   140,   140,   138,
     6,   140,   825,   111,   112,   113,   114,   115,   134,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   613,   844,
   845,  1003,     4,   131,     6,   133,   138,     7,   140,   854,
   139,   854,   138,   138,   140,   140,   138,   138,   140,   140,
     7,   138,   858,   140,   138,   133,   140,   858,     6,    87,
   875,   876,     7,   648,   649,   650,     7,    89,   139,   138,
   133,   133,   887,   138,     6,     4,   135,   892,   893,   111,
   112,   113,   114,   115,     7,   117,   118,   119,   120,   121,
   122,   123,   124,   125,     7,   910,     7,     7,     7,   131,
  1072,     7,   917,     7,   140,   136,   140,     7,     7,   139,
   139,     6,   132,     7,   132,   111,   112,   113,   114,   115,
   935,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   136,   132,   139,   948,   132,   131,     6,     4,     6,   134,
     6,   135,     6,     6,   119,     7,   961,     6,   963,     7,
     7,   139,     7,   968,     7,     7,     7,     7,   973,   614,
   615,     7,   617,     7,   619,   620,     7,     7,     7,     4,
     6,   132,     6,     6,     6,     4,   761,     7,   133,     7,
     6,     4,   997,   139,   999,     6,  1001,   133,   994,   136,
     7,  1006,  1007,   994,     6,     6,     6,  1012,     6,     6,
   139,     6,   139,  1018,  1019,     6,     6,    88,   139,     6,
   665,   666,  1027,     6,   669,  1030,   111,   112,   113,   114,
   115,     6,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   136,     4,     6,   135,     6,   131,  1052,     6,     6,
     6,     6,     6,     6,   829,     6,   831,  1062,     6,     6,
  1065,     6,     6,  1068,     6,     6,     6,     6,     6,     6,
   139,     7,     6,    88,     6,     4,     6,   136,  1083,     7,
  1085,     6,     6,   728,   859,   730,   861,     6,   863,     6,
     6,   135,    85,   139,     6,     6,   741,   742,   743,    88,
   139,   746,   747,   748,   749,   750,   751,   752,   140,   111,
   112,   113,   114,   115,    90,   117,   118,   119,   120,   121,
   122,   123,   124,   125,  1127,   139,     6,   139,   138,   131,
   139,   139,     5,   139,   133,   140,   111,   112,   113,   114,
   115,     6,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   139,  1157,   139,   138,  1158,   131,  1160,   140,   138,
     6,     6,     6,     6,     6,     6,     6,   812,     6,     6,
     6,     5,   139,  1178,  1179,   139,     6,  1180,     6,   111,
   112,   113,   114,   115,  1189,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   111,   112,   113,   114,   115,   131,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   140,
     6,     6,   139,   139,   131,   138,   138,     6,     6,   140,
     6,    85,   997,   868,   999,     6,  1001,     5,    85,   139,
   139,   139,     6,   140,   139,   139,     6,   140,   883,     6,
     6,     6,   139,     6,     6,     6,     6,     6,     6,   894,
     3,     4,     0,   898,     0,   723,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   527,  1052,     2,   111,   112,   113,   114,   115,    41,   117,
   118,   119,   120,   121,   122,   123,   124,   125,     2,   956,
   817,    -1,    -1,   131,    -1,    -1,    -1,    -1,    61,    62,
    63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    74,    75,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,
   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
  1005,    -1,    -1,    -1,    -1,    -1,  1011,    -1,   121,   122,
  1015,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
    -1,    -1,     3,     4,   137,    -1,    -1,   140,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1073,    -1,
    -1,    -1,  1077,  1078,    -1,    -1,    -1,    -1,    -1,    -1,
    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,     3,
     4,    -1,    -1,    74,    75,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,  1124,
    -1,     6,   103,   104,   105,   106,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
    -1,   132,    -1,     3,     4,    -1,   137,    -1,   139,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,   103,
   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,
    -1,   135,    -1,   137,    -1,   139,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
    -1,    -1,    -1,   103,   104,   105,   106,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,    -1,   135,    -1,   137,    -1,   139,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,
    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
    -1,    -1,   135,    -1,   137,    -1,   139,   103,   104,   105,
   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,   103,   104,   105,
   106,   137,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,     3,     4,
     5,   137,     7,   139,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,    37,    -1,    -1,    40,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
   105,   106,   107,   108,   109,   110,    61,    62,    63,    64,
    65,    66,    -1,    -1,    -1,    -1,   121,   122,    -1,    74,
    75,    -1,   127,   128,   129,    -1,    -1,   132,    -1,   134,
    -1,   136,   137,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   103,   104,
   105,   106,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,
   138,    -1,   140,    -1,    -1,    -1,   121,   122,    -1,    -1,
    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,     3,     4,
     5,    -1,   137,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,    37,     3,     4,    40,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,     8,    -1,    -1,   103,   104,
   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     8,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,
    -1,    -1,   127,    -1,    -1,     8,    -1,   132,    -1,    -1,
    -1,    -1,   137,   103,   104,   105,   106,    -1,    -1,    -1,
     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   121,   122,    -1,    -1,     8,    -1,   127,    -1,    -1,
    -1,    -1,   132,   103,   104,   105,   106,   137,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,   111,   112,
   113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   111,   112,   113,   114,   115,   131,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   111,   112,
   113,   114,   115,   131,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   111,   112,   113,   114,   115,   131,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   111,   112,
   113,   114,   115,   131,   117,   118,   119,   120,   121,   122,
   123,   124,   125,     0,     1,    -1,    -1,     4,   131,    -1,
   111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   131,    -1,    -1,    -1,    -1,    -1,    33,   138,    -1,   140,
    -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    51,    52,    53,    54,    55,    56,
    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
    -1,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,
    -1,    -1,    89,    -1,    91,    -1,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    41,    42,    43,    44,
    45,    46,    47,    48,    -1,    50,    -1,    52,    53,    -1,
    55,    56,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    72,    52,    53,
    -1,    55,    56,    -1,    -1,    -1,    -1,    82,    83,    84,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    82,    83,
    84,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    48,    -1,    50,    -1,    52,    53,   100,    55,    56,   111,
   112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    72,   140,    -1,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    82,    83,    84,    -1,   140,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,
    -1,    -1,   100,    41,    42,    43,    44,    45,    46,    47,
    48,    -1,    50,    -1,    52,    53,    -1,    55,    56,    -1,
    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    72,    52,    53,    -1,    55,    56,
    -1,    -1,   140,    -1,    82,    83,    84,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    -1,   100,    -1,    -1,    82,    83,    84,    -1,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,   100,    55,    56,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    72,   140,    -1,    -1,    -1,   131,    -1,    -1,    -1,
    -1,    82,    83,    84,    -1,   140,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,    -1,   100,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,    -1,    55,    56,    -1,    -1,    -1,    -1,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    72,    52,    53,    -1,    55,    56,    -1,    -1,   140,
    -1,    82,    83,    84,     4,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,   100,
    -1,    -1,    82,    83,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    38,    39,
   100,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    51,    52,    53,    54,    55,    56,    -1,    -1,   140,
    60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
   140,    81,    82,    83,    84,    -1,    -1,    -1,    -1,    89,
    -1,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,    41,    42,    43,    44,    45,    46,    47,
    48,    -1,    50,    -1,    52,    53,    -1,    55,    56,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
   112,   113,   114,   115,    72,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    82,    83,    84,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,   140,    -1,
    -1,    -1,   100,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   140,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   140,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   140,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   140,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,    -1,    -1,   111,   112,   113,   114,   115,   140,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   140,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   140,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   140,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   140,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,    -1,    -1,   111,   112,   113,   114,   115,   140,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   140,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   140,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   140,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   140,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,    -1,    -1,   111,   112,   113,   114,   115,   140,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   140,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   140,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   140,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   140,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,    -1,    -1,   111,   112,   113,   114,   115,   140,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   140,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
    -1,    -1,    -1,    -1,   138,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,
   112,   113,   114,   115,   138,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   111,   112,   113,   114,   115,   138,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   111,   112,   113,   114,   115,   138,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   111,   112,   113,   114,   115,
   138,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   111,   112,   113,
   114,   115,   138,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,
   113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,
   133,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   133,   111,   112,   113,   114,   115,    -1,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
   111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   131,    -1,   133,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,
   112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   133,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,
   113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,
   133,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   133,   111,   112,   113,   114,   115,    -1,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
   111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   131,    -1,   133,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,
   112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   133,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,
   113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,
   133,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   133,   111,   112,   113,   114,   115,    -1,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
   111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   131,    -1,   133,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,
   112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   133,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,
   113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,
   133,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   133,   111,   112,   113,   114,   115,    -1,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
   111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   131,    -1,   133,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,
   112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   133,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,
   113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,
   133,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,   131,    -1,   133,   111,   112,   113,   114,   115,    -1,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
    -1,    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,
   114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
   111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   131,    -1,   133,   111,   112,   113,   114,   115,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,   111,
   112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,   131,
    -1,   133,   111,   112,   113,   114,   115,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,    -1,   133,   111,   112,   113,   114,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   131
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 144 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 164 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 173 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 20:
#line 177 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 21:
#line 184 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 22:
#line 189 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 23:
#line 204 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 24:
#line 217 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 25:
#line 246 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 26:
#line 253 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 27:
#line 263 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 34:
#line 279 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 35:
#line 281 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 286 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 37:
#line 288 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 293 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 39:
#line 483 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 40:
#line 501 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 41:
#line 512 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 42:
#line 517 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 525 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 44:
#line 532 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 45:
#line 539 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 46:
#line 544 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 552 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 48:
#line 559 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 49:
#line 567 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 50:
#line 574 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 51:
#line 578 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 583 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 53:
#line 591 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 54:
#line 592 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 55:
#line 593 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 56:
#line 594 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 57:
#line 595 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 58:
#line 599 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 59:
#line 600 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 60:
#line 608 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 61:
#line 639 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 62:
#line 678 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 63:
#line 732 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 749 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 767 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 66:
#line 778 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 67:
#line 797 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 68:
#line 811 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 69:
#line 828 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 70:
#line 854 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 881 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 895 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 912 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 74:
#line 926 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 943 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 76:
#line 963 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 986 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 78:
#line 996 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 79:
#line 1015 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 80:
#line 1031 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 81:
#line 1047 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 82:
#line 1066 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 83:
#line 1085 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1103 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1121 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1139 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 87:
#line 1165 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 88:
#line 1183 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 89:
#line 1210 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1229 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1253 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1277 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1303 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1320 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 95:
#line 1338 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1357 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1376 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1415 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1442 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1461 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1478 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1494 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1514 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1531 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1548 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1569 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 107:
#line 1574 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 108:
#line 1579 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 109:
#line 1584 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 110:
#line 1591 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 111:
#line 1592 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 112:
#line 1593 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 113:
#line 1598 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 114:
#line 1602 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 115:
#line 1606 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 116:
#line 1622 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 117:
#line 1638 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 118:
#line 1654 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 119:
#line 1675 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 120:
#line 1689 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 121:
#line 1695 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 122:
#line 1701 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 123:
#line 1713 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 124:
#line 1722 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 125:
#line 1732 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 126:
#line 1746 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 127:
#line 1765 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 128:
#line 1779 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 129:
#line 1787 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 130:
#line 1793 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 131:
#line 1804 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 132:
#line 1818 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 133:
#line 1860 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 134:
#line 1875 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 135:
#line 1886 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	ReMesh(THEM);
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	THEM->status = (int)yyvsp[-1].d;
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 136:
#line 1905 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 137:
#line 1915 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 138:
#line 1937 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 139:
#line 1941 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 140:
#line 1946 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 141:
#line 1951 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 142:
#line 1963 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 143:
#line 1978 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 144:
#line 1994 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 145:
#line 2020 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 146:
#line 2047 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 147:
#line 2079 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 148:
#line 2086 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 149:
#line 2091 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 150:
#line 2097 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 151:
#line 2101 "Gmsh.y"
{
    ;
    break;}
case 152:
#line 2110 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 153:
#line 2118 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 2126 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 2134 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 156:
#line 2139 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 157:
#line 2147 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 158:
#line 2152 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 159:
#line 2160 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 160:
#line 2165 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 161:
#line 2175 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 162:
#line 2182 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 163:
#line 2189 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 164:
#line 2196 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 165:
#line 2203 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 166:
#line 2210 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 167:
#line 2217 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 168:
#line 2224 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 169:
#line 2231 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 170:
#line 2238 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 171:
#line 2243 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 172:
#line 2250 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 173:
#line 2255 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 174:
#line 2262 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 175:
#line 2267 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 176:
#line 2274 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 177:
#line 2279 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 178:
#line 2286 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 179:
#line 2291 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 180:
#line 2298 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 181:
#line 2303 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 182:
#line 2310 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 183:
#line 2315 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 184:
#line 2322 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 185:
#line 2327 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 186:
#line 2334 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 187:
#line 2339 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 188:
#line 2350 "Gmsh.y"
{
    ;
    break;}
case 189:
#line 2353 "Gmsh.y"
{
    ;
    break;}
case 190:
#line 2359 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 191:
#line 2385 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 192:
#line 2409 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 193:
#line 2418 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 194:
#line 2436 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 195:
#line 2454 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 196:
#line 2472 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = 1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 197:
#line 2501 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 198:
#line 2536 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 199:
#line 2563 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 200:
#line 2590 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 201:
#line 2604 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 202:
#line 2623 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 203:
#line 2627 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 204:
#line 2636 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 205:
#line 2637 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 206:
#line 2638 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 207:
#line 2639 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 208:
#line 2640 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 209:
#line 2641 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 210:
#line 2642 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 211:
#line 2643 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 212:
#line 2645 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 213:
#line 2651 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 214:
#line 2652 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 215:
#line 2653 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 216:
#line 2654 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 217:
#line 2655 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 218:
#line 2656 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 219:
#line 2657 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 220:
#line 2658 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 221:
#line 2659 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 222:
#line 2660 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 223:
#line 2661 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 224:
#line 2662 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 225:
#line 2663 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 226:
#line 2664 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 227:
#line 2665 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 228:
#line 2666 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 229:
#line 2667 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 230:
#line 2668 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 231:
#line 2669 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 232:
#line 2670 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 233:
#line 2671 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 234:
#line 2672 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 235:
#line 2673 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 236:
#line 2674 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 237:
#line 2675 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 238:
#line 2676 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 239:
#line 2677 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 240:
#line 2678 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 241:
#line 2679 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 242:
#line 2680 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 243:
#line 2681 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 244:
#line 2682 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 245:
#line 2684 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 246:
#line 2685 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 247:
#line 2686 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 248:
#line 2687 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 249:
#line 2688 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 250:
#line 2689 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 251:
#line 2690 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 252:
#line 2691 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2692 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2693 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2694 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 256:
#line 2695 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2696 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 258:
#line 2697 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2698 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2699 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 261:
#line 2700 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2701 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 263:
#line 2702 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 264:
#line 2703 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 265:
#line 2704 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 266:
#line 2713 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 267:
#line 2714 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 268:
#line 2715 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 269:
#line 2716 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 270:
#line 2717 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 271:
#line 2718 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 272:
#line 2719 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 273:
#line 2724 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 274:
#line 2740 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 275:
#line 2755 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 276:
#line 2775 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 277:
#line 2789 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 278:
#line 2802 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 279:
#line 2825 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 280:
#line 2843 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 281:
#line 2861 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 282:
#line 2879 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 283:
#line 2897 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 284:
#line 2905 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 285:
#line 2909 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 286:
#line 2913 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 287:
#line 2917 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 288:
#line 2921 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 289:
#line 2928 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 290:
#line 2932 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 291:
#line 2936 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 292:
#line 2940 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 293:
#line 2947 "Gmsh.y"
{
    ;
    break;}
case 294:
#line 2950 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 295:
#line 2954 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 296:
#line 2961 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 297:
#line 2966 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 298:
#line 2974 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 299:
#line 2979 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 300:
#line 2983 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 301:
#line 2988 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 302:
#line 2992 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 303:
#line 3004 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 304:
#line 3010 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 305:
#line 3021 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 306:
#line 3041 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 307:
#line 3051 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 308:
#line 3061 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 309:
#line 3071 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 310:
#line 3088 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 311:
#line 3107 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 312:
#line 3131 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 313:
#line 3160 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 314:
#line 3165 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 315:
#line 3169 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 316:
#line 3173 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 317:
#line 3186 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 318:
#line 3190 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 319:
#line 3202 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 320:
#line 3209 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 321:
#line 3231 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 322:
#line 3235 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 323:
#line 3250 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 324:
#line 3255 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 325:
#line 3262 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 326:
#line 3266 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 327:
#line 3274 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 328:
#line 3282 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 329:
#line 3296 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 330:
#line 3310 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 331:
#line 3314 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 332:
#line 3333 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 333:
#line 3355 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3378 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
