
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tAttractor	329
#define	tLayers	330
#define	tHole	331
#define	tAlias	332
#define	tAliasWithOptions	333
#define	tText2D	334
#define	tText3D	335
#define	tInterpolationScheme	336
#define	tTime	337
#define	tGrain	338
#define	tCombine	339
#define	tBSpline	340
#define	tBezier	341
#define	tNurbs	342
#define	tOrder	343
#define	tKnots	344
#define	tColor	345
#define	tColorTable	346
#define	tFor	347
#define	tIn	348
#define	tEndFor	349
#define	tIf	350
#define	tEndIf	351
#define	tExit	352
#define	tField	353
#define	tThreshold	354
#define	tStructured	355
#define	tLatLon	356
#define	tGrad	357
#define	tReturn	358
#define	tCall	359
#define	tFunction	360
#define	tShow	361
#define	tHide	362
#define	tGetValue	363
#define	tGMSH_MAJOR_VERSION	364
#define	tGMSH_MINOR_VERSION	365
#define	tGMSH_PATCH_VERSION	366
#define	tAFFECTPLUS	367
#define	tAFFECTMINUS	368
#define	tAFFECTTIMES	369
#define	tAFFECTDIVIDE	370
#define	tOR	371
#define	tAND	372
#define	tEQUAL	373
#define	tNOTEQUAL	374
#define	tLESSOREQUAL	375
#define	tGREATEROREQUAL	376
#define	tPLUSPLUS	377
#define	tMINUSMINUS	378
#define	UNARYPREC	379

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.318 2007-04-21 19:46:27 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Field.h"
#include "BackgroundMesh.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static gmshSurface *myGmshSurface = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 79 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1265
#define	YYFLAG		-32768
#define	YYNTBASE	146

#define YYTRANSLATE(x) ((unsigned)(x) <= 379 ? yytranslate[x] : 215)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   131,     2,   141,     2,   130,     2,     2,   136,
   137,   128,   126,   142,   127,   140,   129,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   122,
     2,   124,   117,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   138,     2,   139,   135,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   143,     2,   144,   145,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   118,   119,   120,   121,   123,   125,   132,   133,   134
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   204,   205,   212,   219,   221,   223,   225,   227,   229,
   231,   233,   238,   246,   256,   263,   270,   274,   281,   286,
   293,   303,   310,   320,   326,   335,   344,   356,   363,   373,
   383,   393,   395,   397,   405,   414,   424,   433,   443,   452,
   458,   465,   472,   479,   487,   495,   503,   513,   521,   531,
   549,   557,   565,   577,   586,   595,   604,   613,   617,   622,
   633,   641,   649,   658,   667,   676,   684,   693,   699,   711,
   717,   727,   729,   731,   733,   734,   737,   744,   751,   758,
   765,   770,   777,   784,   791,   796,   803,   807,   812,   818,
   822,   826,   831,   836,   840,   848,   856,   860,   868,   872,
   875,   878,   894,   897,   904,   913,   922,   933,   935,   938,
   940,   944,   949,   951,   957,   969,   983,   984,   992,   993,
  1007,  1008,  1024,  1025,  1032,  1033,  1044,  1053,  1062,  1071,
  1084,  1097,  1110,  1125,  1140,  1155,  1156,  1169,  1170,  1183,
  1184,  1197,  1198,  1215,  1216,  1233,  1234,  1251,  1252,  1271,
  1272,  1291,  1292,  1311,  1313,  1316,  1322,  1330,  1340,  1343,
  1353,  1360,  1370,  1380,  1389,  1399,  1408,  1417,  1424,  1429,
  1440,  1451,  1462,  1473,  1476,  1478,  1482,  1485,  1488,  1491,
  1495,  1499,  1503,  1507,  1511,  1515,  1519,  1523,  1527,  1531,
  1535,  1539,  1543,  1547,  1553,  1558,  1563,  1568,  1573,  1578,
  1583,  1588,  1593,  1598,  1603,  1610,  1615,  1620,  1625,  1630,
  1635,  1640,  1647,  1654,  1661,  1666,  1671,  1676,  1681,  1686,
  1691,  1696,  1701,  1706,  1711,  1716,  1723,  1728,  1733,  1738,
  1743,  1748,  1753,  1760,  1767,  1774,  1779,  1781,  1783,  1785,
  1787,  1789,  1791,  1793,  1795,  1801,  1806,  1811,  1814,  1820,
  1824,  1831,  1836,  1844,  1851,  1853,  1856,  1859,  1863,  1867,
  1879,  1889,  1897,  1905,  1907,  1911,  1913,  1915,  1918,  1922,
  1927,  1933,  1936,  1940,  1944,  1950,  1955,  1957,  1959,  1961,
  1965,  1972,  1974,  1976,  1980,  1984,  1994,  2002,  2004,  2010,
  2014,  2021,  2023,  2027,  2029,  2031,  2033,  2035,  2042,  2047,
  2052,  2057,  2064,  2071
};

static const short yyrhs[] = {   147,
     0,     1,     6,     0,     0,   147,   148,     0,   151,     0,
   150,     0,   170,     0,   172,     0,   173,     0,   176,     0,
   177,     0,   178,     0,   179,     0,   182,     0,   199,     0,
   200,     0,   201,     0,   181,     0,   180,     0,   124,     0,
   124,   124,     0,    35,   136,     5,   137,     6,     0,    35,
   136,     5,   137,   149,   213,     6,     0,    35,   136,     5,
   142,   209,   137,     6,     0,    35,   136,     5,   142,   209,
   137,   149,   213,     6,     0,     4,     5,   143,   152,   144,
     6,     0,     4,     5,     4,   204,   143,   152,   144,     6,
     0,     0,   152,   155,     0,   152,   159,     0,   152,   162,
     0,   152,   164,     0,   152,   165,     0,   152,   167,     0,
   202,     0,   153,   142,   202,     0,   202,     0,   154,   142,
   202,     0,     0,     0,     4,   156,   136,   153,   137,   157,
   143,   154,   144,     6,     0,   213,     0,   158,   142,   213,
     0,     0,    80,   136,   202,   142,   202,   142,   202,   137,
   160,   143,   158,   144,     6,     0,   213,     0,   161,   142,
   213,     0,     0,    81,   136,   202,   142,   202,   142,   202,
   142,   202,   137,   163,   143,   161,   144,     6,     0,    82,
   143,   206,   144,   143,   206,   144,     6,     0,    82,   143,
   206,   144,   143,   206,   144,   143,   206,   144,   143,   206,
   144,     6,     0,     0,    83,   166,   143,   154,   144,     6,
     0,    84,   136,   202,   137,   207,     6,     0,     7,     0,
   113,     0,   114,     0,   115,     0,   116,     0,   132,     0,
   133,     0,     4,   168,   202,     6,     0,     4,   138,   202,
   139,   168,   202,     6,     0,     4,   138,   143,   209,   144,
   139,   168,   207,     6,     0,     4,   138,   139,     7,   207,
     6,     0,     4,   138,   139,   113,   207,     6,     0,     4,
   169,     6,     0,     4,   138,   202,   139,   169,     6,     0,
     4,     7,   214,     6,     0,     4,   140,     4,     7,   214,
     6,     0,     4,   138,   202,   139,   140,     4,     7,   214,
     6,     0,     4,   140,     4,   168,   202,     6,     0,     4,
   138,   202,   139,   140,     4,   168,   202,     6,     0,     4,
   140,     4,   169,     6,     0,     4,   138,   202,   139,   140,
     4,   169,     6,     0,     4,   140,    91,   140,     4,     7,
   210,     6,     0,     4,   138,   202,   139,   140,    91,   140,
     4,     7,   210,     6,     0,     4,   140,    92,     7,   211,
     6,     0,     4,   138,   202,   139,   140,    92,     7,   211,
     6,     0,    64,   136,     4,   137,   140,     4,     7,   202,
     6,     0,    64,   136,     4,   137,   140,     4,     7,   214,
     6,     0,   202,     0,   214,     0,    43,   136,   202,   137,
     7,   204,     6,     0,    60,    43,   136,   171,   137,     7,
   207,     6,     0,    75,    43,    99,   136,   202,   137,     7,
   207,     6,     0,   100,    99,   136,   202,   137,     7,   207,
     6,     0,   106,    99,   136,   202,   137,     7,     5,   207,
     6,     0,   101,    99,   136,   202,   137,     7,     5,     6,
     0,    52,    53,    99,   207,     6,     0,    75,    43,   207,
     7,   207,     6,     0,    75,    46,   207,     7,   207,     6,
     0,    52,    53,   207,     7,   202,     6,     0,    46,   136,
   202,   137,     7,   207,     6,     0,    50,   136,   202,   137,
     7,   207,     6,     0,    44,   136,   202,   137,     7,   207,
     6,     0,    44,   136,   202,   137,     7,   207,    56,   204,
     6,     0,    45,   136,   202,   137,     7,   207,     6,     0,
    45,   136,   202,   137,     7,   207,    56,   204,     6,     0,
    54,   136,   202,   137,     7,   143,   202,   142,   202,   142,
     5,   142,     5,   142,     5,   144,     6,     0,    86,   136,
   202,   137,     7,   207,     6,     0,    87,   136,   202,   137,
     7,   207,     6,     0,    88,   136,   202,   137,     7,   207,
    90,   207,    89,   202,     6,     0,    46,    71,   136,   202,
   137,     7,   207,     6,     0,    60,    46,   136,   171,   137,
     7,   207,     6,     0,    56,    49,   136,   202,   137,     7,
   207,     6,     0,    57,    49,   136,   202,   137,     7,   207,
     6,     0,    12,    13,     6,     0,    13,    49,   202,     6,
     0,    54,    49,   136,   202,   137,     7,     5,     5,     5,
     6,     0,    47,   136,   202,   137,     7,   207,     6,     0,
    48,   136,   202,   137,     7,   207,     6,     0,    49,    71,
   136,   202,   137,     7,   207,     6,     0,    60,    49,   136,
   171,   137,     7,   207,     6,     0,    59,    51,   136,   202,
   137,     7,   207,     6,     0,    51,   136,   202,   137,     7,
   207,     6,     0,    60,    51,   136,   171,   137,     7,   207,
     6,     0,    66,   204,   143,   174,   144,     0,    65,   143,
   204,   142,   204,   142,   202,   144,   143,   174,   144,     0,
    67,   204,   143,   174,   144,     0,    68,   143,   204,   142,
   202,   144,   143,   174,   144,     0,   176,     0,   175,     0,
   173,     0,     0,   175,   172,     0,   175,    43,   143,   209,
   144,     6,     0,   175,    46,   143,   209,   144,     6,     0,
   175,    49,   143,   209,   144,     6,     0,   175,    51,   143,
   209,   144,     6,     0,    70,   143,   175,   144,     0,    70,
     4,   138,   202,   139,     6,     0,    78,     4,   138,   202,
   139,     6,     0,    79,     4,   138,   202,   139,     6,     0,
    73,   143,   175,   144,     0,    73,     4,   138,   202,   139,
     6,     0,    73,     4,     6,     0,    73,     4,     4,     6,
     0,    91,   210,   143,   175,   144,     0,   107,   213,     6,
     0,   108,   213,     6,     0,   107,   143,   175,   144,     0,
   108,   143,   175,   144,     0,     4,   214,     6,     0,     4,
     4,   138,   202,   139,   213,     6,     0,     4,     4,     4,
   138,   202,   139,     6,     0,     4,   202,     6,     0,    64,
   136,     4,   137,   140,     4,     6,     0,    85,     4,     6,
     0,    98,     6,     0,    40,     6,     0,    40,   143,   202,
   142,   202,   142,   202,   142,   202,   142,   202,   142,   202,
   144,     6,     0,    41,     6,     0,    93,   136,   202,     8,
   202,   137,     0,    93,   136,   202,     8,   202,     8,   202,
   137,     0,    93,     4,    94,   143,   202,     8,   202,   144,
     0,    93,     4,    94,   143,   202,     8,   202,     8,   202,
   144,     0,    95,     0,   106,     4,     0,   104,     0,   105,
     4,     6,     0,    96,   136,   202,   137,     0,    97,     0,
    69,   204,   143,   175,   144,     0,    69,   143,   204,   142,
   204,   142,   202,   144,   143,   175,   144,     0,    69,   143,
   204,   142,   204,   142,   204,   142,   202,   144,   143,   175,
   144,     0,     0,    69,   204,   143,   175,   183,   197,   144,
     0,     0,    69,   143,   204,   142,   204,   142,   202,   144,
   143,   175,   184,   197,   144,     0,     0,    69,   143,   204,
   142,   204,   142,   204,   142,   202,   144,   143,   175,   185,
   197,   144,     0,     0,    69,   143,   175,   186,   197,   144,
     0,     0,    69,     4,   138,   202,   139,   143,   175,   187,
   197,   144,     0,    69,    43,   143,   202,   142,   204,   144,
     6,     0,    69,    46,   143,   202,   142,   204,   144,     6,
     0,    69,    49,   143,   202,   142,   204,   144,     6,     0,
    69,    43,   143,   202,   142,   204,   142,   204,   142,   202,
   144,     6,     0,    69,    46,   143,   202,   142,   204,   142,
   204,   142,   202,   144,     6,     0,    69,    49,   143,   202,
   142,   204,   142,   204,   142,   202,   144,     6,     0,    69,
    43,   143,   202,   142,   204,   142,   204,   142,   204,   142,
   202,   144,     6,     0,    69,    46,   143,   202,   142,   204,
   142,   204,   142,   204,   142,   202,   144,     6,     0,    69,
    49,   143,   202,   142,   204,   142,   204,   142,   204,   142,
   202,   144,     6,     0,     0,    69,    43,   143,   202,   142,
   204,   144,   188,   143,   197,   144,     6,     0,     0,    69,
    46,   143,   202,   142,   204,   144,   189,   143,   197,   144,
     6,     0,     0,    69,    49,   143,   202,   142,   204,   144,
   190,   143,   197,   144,     6,     0,     0,    69,    43,   143,
   202,   142,   204,   142,   204,   142,   202,   144,   191,   143,
   197,   144,     6,     0,     0,    69,    46,   143,   202,   142,
   204,   142,   204,   142,   202,   144,   192,   143,   197,   144,
     6,     0,     0,    69,    49,   143,   202,   142,   204,   142,
   204,   142,   202,   144,   193,   143,   197,   144,     6,     0,
     0,    69,    43,   143,   202,   142,   204,   142,   204,   142,
   204,   142,   202,   144,   194,   143,   197,   144,     6,     0,
     0,    69,    46,   143,   202,   142,   204,   142,   204,   142,
   204,   142,   202,   144,   195,   143,   197,   144,     6,     0,
     0,    69,    49,   143,   202,   142,   204,   142,   204,   142,
   204,   142,   202,   144,   196,   143,   197,   144,     6,     0,
   198,     0,   197,   198,     0,    76,   143,   202,   144,     6,
     0,    76,   143,   207,   142,   207,   144,     6,     0,    76,
   143,   207,   142,   207,   142,   207,   144,     6,     0,    72,
     6,     0,    77,   136,   202,   137,     7,   207,    61,   202,
     6,     0,    58,    46,   207,     7,   202,     6,     0,    58,
    46,   207,     7,   202,    61,    63,   202,     6,     0,    58,
    46,   207,     7,   202,    61,    62,   202,     6,     0,    58,
    49,   143,   202,   144,     7,   207,     6,     0,    58,    49,
   143,   202,   144,     7,   207,     4,     6,     0,    55,    49,
   143,   202,   144,     7,   207,     6,     0,    58,    51,   143,
   202,   144,     7,   207,     6,     0,    72,    49,   207,     7,
   202,     6,     0,    72,    49,   207,     6,     0,    43,   143,
   209,   144,    94,    49,   143,   202,   144,     6,     0,    46,
   143,   209,   144,    94,    49,   143,   202,   144,     6,     0,
    46,   143,   209,   144,    94,    51,   143,   202,   144,     6,
     0,    49,   143,   209,   144,    94,    51,   143,   202,   144,
     6,     0,    74,     6,     0,   203,     0,   136,   202,   137,
     0,   127,   202,     0,   126,   202,     0,   131,   202,     0,
   202,   127,   202,     0,   202,   126,   202,     0,   202,   128,
   202,     0,   202,   129,   202,     0,   202,   130,   202,     0,
   202,   135,   202,     0,   202,   122,   202,     0,   202,   124,
   202,     0,   202,   123,   202,     0,   202,   125,   202,     0,
   202,   120,   202,     0,   202,   121,   202,     0,   202,   119,
   202,     0,   202,   118,   202,     0,   202,   117,   202,     8,
   202,     0,    14,   136,   202,   137,     0,    15,   136,   202,
   137,     0,    16,   136,   202,   137,     0,    17,   136,   202,
   137,     0,    18,   136,   202,   137,     0,    19,   136,   202,
   137,     0,    20,   136,   202,   137,     0,    21,   136,   202,
   137,     0,    22,   136,   202,   137,     0,    24,   136,   202,
   137,     0,    25,   136,   202,   142,   202,   137,     0,    26,
   136,   202,   137,     0,    27,   136,   202,   137,     0,    28,
   136,   202,   137,     0,    29,   136,   202,   137,     0,    30,
   136,   202,   137,     0,    31,   136,   202,   137,     0,    32,
   136,   202,   142,   202,   137,     0,    33,   136,   202,   142,
   202,   137,     0,    34,   136,   202,   142,   202,   137,     0,
    23,   136,   202,   137,     0,    14,   138,   202,   139,     0,
    15,   138,   202,   139,     0,    16,   138,   202,   139,     0,
    17,   138,   202,   139,     0,    18,   138,   202,   139,     0,
    19,   138,   202,   139,     0,    20,   138,   202,   139,     0,
    21,   138,   202,   139,     0,    22,   138,   202,   139,     0,
    24,   138,   202,   139,     0,    25,   138,   202,   142,   202,
   139,     0,    26,   138,   202,   139,     0,    27,   138,   202,
   139,     0,    28,   138,   202,   139,     0,    29,   138,   202,
   139,     0,    30,   138,   202,   139,     0,    31,   138,   202,
   139,     0,    32,   138,   202,   142,   202,   139,     0,    33,
   138,   202,   142,   202,   139,     0,    34,   138,   202,   142,
   202,   139,     0,    23,   138,   202,   139,     0,     3,     0,
     9,     0,    10,     0,    11,     0,   110,     0,   111,     0,
   112,     0,     4,     0,     4,   145,   143,   202,   144,     0,
     4,   138,   202,   139,     0,   141,     4,   138,   139,     0,
     4,   169,     0,     4,   138,   202,   139,   169,     0,     4,
   140,     4,     0,     4,   138,   202,   139,   140,     4,     0,
     4,   140,     4,   169,     0,     4,   138,   202,   139,   140,
     4,   169,     0,   109,   136,     5,   142,   202,   137,     0,
   205,     0,   127,   204,     0,   126,   204,     0,   204,   127,
   204,     0,   204,   126,   204,     0,   143,   202,   142,   202,
   142,   202,   142,   202,   142,   202,   144,     0,   143,   202,
   142,   202,   142,   202,   142,   202,   144,     0,   143,   202,
   142,   202,   142,   202,   144,     0,   136,   202,   142,   202,
   142,   202,   137,     0,   207,     0,   206,   142,   207,     0,
   202,     0,   208,     0,   143,   144,     0,   143,   209,   144,
     0,   127,   143,   209,   144,     0,   202,   128,   143,   209,
   144,     0,   127,   208,     0,   202,   128,   208,     0,   202,
     8,   202,     0,   202,     8,   202,     8,   202,     0,    43,
   143,   202,   144,     0,   173,     0,   176,     0,   182,     0,
     4,   138,   139,     0,     4,   138,   143,   209,   144,   139,
     0,   202,     0,   208,     0,   209,   142,   202,     0,   209,
   142,   208,     0,   143,   202,   142,   202,   142,   202,   142,
   202,   144,     0,   143,   202,   142,   202,   142,   202,   144,
     0,     4,     0,     4,   140,    91,   140,     4,     0,   143,
   212,   144,     0,     4,   138,   202,   139,   140,    92,     0,
   210,     0,   212,   142,   210,     0,   214,     0,     4,     0,
     5,     0,    42,     0,    37,   136,   213,   142,   213,   137,
     0,    38,   136,   213,   137,     0,    39,   136,   213,   137,
     0,    36,   136,   213,   137,     0,    36,   136,   213,   142,
   209,   137,     0,    36,   136,     4,   140,     4,   137,     0,
    36,   136,     4,   138,   202,   139,   140,     4,   137,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   145,   147,   152,   154,   157,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   175,
   180,   186,   192,   207,   220,   248,   256,   265,   273,   274,
   275,   276,   277,   278,   281,   284,   288,   291,   295,   486,
   504,   514,   520,   527,   535,   541,   547,   554,   562,   568,
   574,   584,   589,   593,   602,   604,   605,   606,   607,   610,
   612,   615,   650,   689,   743,   760,   778,   789,   806,   813,
   827,   844,   870,   897,   911,   928,   942,   959,   979,  1002,
  1012,  1026,  1031,  1039,  1065,  1082,  1099,  1109,  1120,  1123,
  1131,  1164,  1200,  1222,  1240,  1258,  1276,  1302,  1320,  1346,
  1366,  1390,  1414,  1440,  1457,  1476,  1494,  1533,  1538,  1543,
  1549,  1571,  1593,  1609,  1629,  1646,  1663,  1683,  1689,  1694,
  1699,  1706,  1708,  1709,  1712,  1717,  1721,  1744,  1767,  1790,
  1817,  1830,  1836,  1842,  1853,  1863,  1873,  1889,  1907,  1921,
  1928,  1934,  1943,  1956,  2007,  2022,  2037,  2057,  2067,  2089,
  2093,  2098,  2103,  2113,  2130,  2146,  2172,  2199,  2231,  2238,
  2243,  2249,  2253,  2261,  2270,  2278,  2286,  2290,  2298,  2302,
  2310,  2314,  2322,  2326,  2333,  2337,  2349,  2356,  2363,  2370,
  2377,  2384,  2391,  2398,  2405,  2412,  2416,  2423,  2427,  2434,
  2438,  2445,  2449,  2456,  2460,  2467,  2471,  2478,  2482,  2489,
  2493,  2500,  2504,  2514,  2518,  2523,  2533,  2555,  2579,  2583,
  2606,  2625,  2643,  2661,  2690,  2725,  2730,  2757,  2771,  2789,
  2796,  2802,  2805,  2813,  2823,  2825,  2826,  2827,  2828,  2829,
  2830,  2831,  2832,  2839,  2840,  2841,  2842,  2843,  2844,  2845,
  2846,  2847,  2848,  2849,  2850,  2851,  2852,  2853,  2854,  2855,
  2856,  2857,  2858,  2859,  2860,  2861,  2862,  2863,  2864,  2865,
  2866,  2867,  2868,  2869,  2870,  2872,  2873,  2874,  2875,  2876,
  2877,  2878,  2879,  2880,  2881,  2882,  2883,  2884,  2885,  2886,
  2887,  2888,  2889,  2890,  2891,  2892,  2897,  2902,  2903,  2904,
  2905,  2906,  2907,  2911,  2927,  2942,  2962,  2976,  2989,  3012,
  3030,  3048,  3066,  3084,  3091,  3096,  3100,  3104,  3108,  3114,
  3119,  3123,  3127,  3133,  3139,  3146,  3152,  3156,  3161,  3165,
  3173,  3183,  3192,  3200,  3206,  3217,  3237,  3247,  3257,  3267,
  3284,  3310,  3316,  3320,  3324,  3336,  3341,  3353,  3360,  3381,
  3386,  3400,  3406,  3412,  3417,  3423,  3428,  3436,  3444,  3458,
  3472,  3476,  3495,  3517
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tAttractor",
"tLayers","tHole","tAlias","tAliasWithOptions","tText2D","tText3D","tInterpolationScheme",
"tTime","tGrain","tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tField",
"tThreshold","tStructured","tLatLon","tGrad","tReturn","tCall","tFunction","tShow",
"tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND",
"tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'",
"'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem",
"SendToFile","Printf","View","Views","ElementCoords","ElementValues","Element",
"@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","PhysicalId",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","@18","@19","ExtrudeParameters","ExtrudeParameter",
"Transfinite","Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExprVar","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   146,   146,   147,   147,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,   149,
   149,   150,   150,   150,   150,   151,   151,   152,   152,   152,
   152,   152,   152,   152,   153,   153,   154,   154,   156,   157,
   155,   158,   158,   160,   159,   161,   161,   163,   162,   164,
   164,   166,   165,   167,   168,   168,   168,   168,   168,   169,
   169,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   171,   171,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   173,   173,   173,
   173,   174,   174,   174,   175,   175,   175,   175,   175,   175,
   176,   176,   176,   176,   177,   177,   177,   177,   178,   179,
   179,   179,   179,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   182,   182,   182,   183,   182,   184,   182,
   185,   182,   186,   182,   187,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   188,   182,   189,   182,   190,
   182,   191,   182,   192,   182,   193,   182,   194,   182,   195,
   182,   196,   182,   197,   197,   198,   198,   198,   198,   198,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   200,
   200,   200,   200,   201,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   204,   204,   204,   204,   204,   205,
   205,   205,   205,   206,   206,   207,   207,   207,   207,   207,
   207,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   209,   209,   209,   209,   210,   210,   210,   210,   211,
   211,   212,   212,   213,   213,   214,   214,   214,   214,   214,
   214,   214,   214,   214
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
    14,     0,     6,     6,     1,     1,     1,     1,     1,     1,
     1,     4,     7,     9,     6,     6,     3,     6,     4,     6,
     9,     6,     9,     5,     8,     8,    11,     6,     9,     9,
     9,     1,     1,     7,     8,     9,     8,     9,     8,     5,
     6,     6,     6,     7,     7,     7,     9,     7,     9,    17,
     7,     7,    11,     8,     8,     8,     8,     3,     4,    10,
     7,     7,     8,     8,     8,     7,     8,     5,    11,     5,
     9,     1,     1,     1,     0,     2,     6,     6,     6,     6,
     4,     6,     6,     6,     4,     6,     3,     4,     5,     3,
     3,     4,     4,     3,     7,     7,     3,     7,     3,     2,
     2,    15,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     5,    11,    13,     0,     7,     0,    13,
     0,    15,     0,     6,     0,    10,     8,     8,     8,    12,
    12,    12,    14,    14,    14,     0,    12,     0,    12,     0,
    12,     0,    16,     0,    16,     0,    16,     0,    18,     0,
    18,     0,    18,     1,     2,     5,     7,     9,     2,     9,
     6,     9,     9,     8,     9,     8,     8,     6,     4,    10,
    10,    10,    10,     2,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     4,     4,     2,     5,     3,
     6,     4,     7,     6,     1,     2,     2,     3,     3,    11,
     9,     7,     7,     1,     3,     1,     1,     2,     3,     4,
     5,     2,     3,     3,     5,     4,     1,     1,     1,     3,
     6,     1,     1,     3,     3,     9,     7,     1,     5,     3,
     6,     1,     3,     1,     1,     1,     1,     6,     4,     4,
     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   158,     0,   163,     0,     0,
     0,   160,     0,     0,     0,     0,     4,     6,     5,     7,
     8,     9,    10,    11,    12,    13,    19,    18,    14,    15,
    16,    17,   287,   294,   346,    55,   288,   289,   290,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   347,     0,   291,   292,   293,    56,
    57,    58,    59,     0,     0,     0,    60,    61,     0,     0,
     0,     0,     0,     0,     0,   225,     0,     0,     0,     0,
   151,     0,   153,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   305,     0,     0,
     0,     0,     0,     0,   125,     0,     0,   125,     0,     0,
   125,   224,     0,     0,     0,     0,     0,     0,     0,     0,
   338,     0,     0,     0,     0,     0,   150,     0,     0,     0,
   159,     0,   345,   346,   125,     0,   344,   125,     0,     0,
     0,     0,     0,   298,     0,    28,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   294,   228,   227,   229,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    67,   147,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   144,   108,     0,     0,     0,     0,
   294,     0,     0,   327,   328,   329,   332,   333,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   316,     0,   317,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   307,   306,     0,     0,     0,     0,   125,   125,     0,
     0,     0,     0,     0,     0,     0,     0,   173,     0,   125,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
     0,     0,   149,     0,     0,     0,     0,     0,   125,     0,
     0,     0,     0,     0,   161,     0,     0,   140,     0,   141,
     0,     0,   300,     0,     0,     0,    69,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   345,
     0,     0,     0,     0,     0,     0,   226,     0,     0,     0,
     0,    55,     0,     0,     0,     0,     0,    62,     0,   243,
   242,   240,   241,   236,   238,   237,   239,   231,   230,   232,
   233,   234,   235,   109,     0,     0,     0,     0,     0,     0,
   227,   322,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   318,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    82,    83,     0,     0,     0,     0,     0,
     0,     0,   309,   308,   124,     0,   123,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   126,     0,     0,   167,     0,   131,   219,     0,   138,     0,
   135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   162,     0,     0,     0,   142,   143,
     0,   296,   302,     0,    28,    39,     0,     0,     0,    52,
     0,     0,    29,    30,    31,    32,    33,    34,   245,   266,
   246,   267,   247,   268,   248,   269,   249,   270,   250,   271,
   251,   272,   252,   273,   253,   274,   265,   286,   254,   275,
     0,     0,   256,   277,   257,   278,   258,   279,   259,   280,
   260,   281,   261,   282,     0,     0,     0,     0,     0,     0,
     0,     0,   351,     0,     0,   349,   350,     0,     0,     0,
     0,     0,    55,     0,     0,     0,     0,     0,    74,     0,
     0,     0,     0,   297,     0,    22,    20,     0,     0,     0,
     0,   330,     0,     0,   324,   232,   323,   334,   335,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    90,     0,   319,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   118,   120,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   204,     0,
   164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,   299,     0,   295,     0,     0,     0,     0,
     0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   296,    65,    66,
     0,     0,     0,     0,     0,    68,    70,    72,     0,     0,
   342,     0,    78,   244,    21,     0,     0,     0,     0,     0,
   326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   320,     0,    93,     0,     0,
     0,     0,     0,   211,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   125,     0,     0,
     0,     0,     0,     0,     0,   209,     0,     0,   174,   205,
     0,     0,   132,   218,   136,     0,    91,    92,   133,   134,
     0,     0,     0,   339,     0,     0,     0,   154,     0,     0,
     0,   146,   301,   145,     0,     0,     0,     0,     0,   314,
     0,     0,   255,   276,   262,   283,   263,   284,   264,   285,
     0,   353,   352,   348,   304,     0,    55,     0,     0,     0,
     0,    63,     0,     0,     0,   340,    23,    24,     0,     0,
    84,     0,   325,     0,    96,     0,    98,     0,     0,    94,
     0,     0,   111,   112,     0,     0,    95,   116,   321,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   148,     0,     0,     0,     0,   125,   175,
     0,   186,     0,   188,     0,   190,     0,     0,     0,     0,
   316,     0,     0,     0,     0,   168,     0,   101,   102,     0,
     0,     0,     0,     0,     0,     0,   303,    27,     0,    35,
     0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
     0,    75,     0,     0,    76,     0,   343,     0,     0,   331,
     0,     0,     0,   104,     0,     0,   113,     0,     0,     0,
   216,   106,   107,     0,     0,     0,   214,   217,   115,    85,
   105,   114,   117,     0,     0,     0,   313,     0,   312,     0,
     0,     0,   177,     0,     0,   178,     0,     0,   179,     0,
   127,   128,   129,   130,     0,     0,     0,     0,     0,     0,
     0,     0,   337,     0,   156,   155,    87,    89,     0,    40,
     0,     0,     0,   315,     0,     0,     0,     0,     0,    64,
    71,    73,     0,    79,     0,    25,     0,     0,    97,    99,
     0,     0,     0,     0,     0,   213,   212,   215,    80,    81,
   125,     0,   121,     0,     0,     0,     0,     0,     0,     0,
   206,     0,     0,   125,     0,    86,     0,     0,     0,    88,
     0,    36,     0,     0,     0,    38,    53,    54,   354,     0,
   341,     0,   220,   221,   222,   223,   110,     0,     0,     0,
   311,   176,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   169,     0,     0,   336,   157,     0,
     0,     0,     0,    77,     0,     0,   119,     0,   192,     0,
     0,   194,     0,     0,   196,     0,     0,     0,   207,     0,
   165,     0,   125,   103,     0,    44,     0,    50,     0,     0,
     0,   310,   180,     0,     0,   187,   181,     0,     0,   189,
   182,     0,     0,   191,     0,     0,     0,   171,     0,     0,
     0,     0,     0,     0,     0,   198,     0,   200,     0,   202,
   208,   210,   170,   166,     0,    41,     0,    48,     0,     0,
     0,     0,   183,     0,     0,   184,     0,     0,   185,     0,
     0,     0,    42,     0,     0,   152,     0,     0,     0,     0,
     0,     0,     0,   172,     0,     0,     0,     0,     0,   193,
     0,   195,     0,   197,     0,    43,    45,     0,    46,     0,
   100,     0,     0,     0,     0,     0,    51,   199,   201,   203,
    47,    49,     0,     0,     0
};

static const short yydefgoto[] = {  1263,
     2,    57,   658,    58,    59,   396,   969,   975,   583,   748,
  1101,  1222,   584,  1190,  1248,   585,  1224,   586,   587,   752,
   588,   123,   214,    60,   513,   541,   304,   526,   527,   305,
    64,    65,    66,    67,    68,   306,   722,  1162,  1205,   542,
  1021,  1024,  1027,  1030,  1174,  1178,  1182,  1214,  1217,  1220,
   718,   719,    70,    71,    72,   324,   126,   342,   168,   869,
   870,   326,   309,   193,   653,   782,   206,   207
};

static const short yypact[] = {  2929,
    50,  3006,-32768,  2214,    84,    78,   -26,    16,   134,   127,
    13,    18,   228,    64,    74,   -40,   125,   131,   150,   -34,
   135,   246,   252,   247,   322,   259,   251,   258,   -74,   -74,
   276,    25,    14,   385,    23,   421,    -7,   386,   433,   441,
   329,   343,   350,    24,    -1,-32768,   357,-32768,   491,   455,
   458,-32768,   516,    20,    21,    28,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    15,    26,   473,-32768,-32768,-32768,   -38,
    -8,   187,   207,   325,   399,   474,   496,   500,   519,   530,
   556,   585,   589,   597,   601,   605,   606,   613,   633,   634,
   396,   442,   461,   470,-32768,   482,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2424,  2424,  2424,-32768,-32768,  2424,  1974,
    17,   629,  2424,   631,  1148,-32768,   639,   645,  2424,   649,
-32768,  2424,-32768,  2424,  2353,  2424,  2424,   529,  2424,  2353,
  2424,  2424,   536,  2353,  2424,  2424,  1363,   565,  2424,   559,
   577,   580,  1633,   581,   602,   592,   612,   618,   643,   647,
   771,   -74,   -74,   -74,  2424,  2424,   -82,-32768,   281,   -74,
   654,   650,   662,   682,  2179,   345,   663,-32768,  1633,   119,
-32768,-32768,  1498,  1633,   681,   698,   804,  2424,  2424,  2424,
   701,  2424,   699,   756,  2424,  2424,-32768,   725,   730,   845,
-32768,   741,-32768,-32768,-32768,   872,-32768,-32768,   874,   746,
  2424,   882,   744,-32768,   -74,-32768,   884,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,   551,
   611,   611,   611,   887,   558,   753,   753,   753,  5285,     5,
  2353,  3018,    65,   754,   888,   758,  1185,-32768,-32768,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,-32768,-32768,  1290,    57,  3818,  5306,
   567,   755,  2353,-32768,-32768,-32768,  1426,-32768,   384,  5327,
  5348,  2424,  5369,   398,  5390,  5411,  2424,   440,  5432,  5453,
  1633,  1768,  1221,  1561,   890,-32768,  2424,  5474,  2424,  2424,
  2424,   892,  2424,  2424,  2424,  2482,  2482,  2482,  2482,   763,
   283,-32768,-32768,  3844,  3870,   -74,   -74,   652,   652,   306,
  2424,  2424,  2424,  2424,  2179,  2179,  2424,  3074,   333,-32768,
  2424,  1018,    70,   896,-32768,  2424,  1084,   768,   898,   899,
  2424,  2424,-32768,  5495,  5516,  5537,   816,  3896,-32768,   767,
  1696,  5558,  2424,  2424,-32768,  2424,  2528,-32768,  2592,-32768,
  2424,  4572,    81,  2424,   378,     6,-32768,  5579,  4595,  5600,
  4618,  5621,  4641,  5642,  4664,  5663,  4687,  5684,  4710,  5705,
  4733,  5726,  4756,  5747,  4779,  5768,  4802,  5789,  4825,  3922,
  3948,  5810,  4848,  5831,  4871,  5852,  4894,  5873,  4917,  5894,
  4940,  5915,  4963,  3974,  4000,  4026,  4052,  4078,  4104,   467,
   122,   769,   775,   777,   774,  2424,-32768,  1633,  1633,   632,
   262,   473,  2424,   911,   914,    30,   780,-32768,  1831,  1216,
   850,   829,   829,   669,   669,   669,   669,   546,   546,   753,
   753,   753,   753,-32768,    34,  2353,  2424,   913,  2038,  2424,
   753,-32768,  2424,  2353,  2353,   827,   918,   919,  5936,   920,
   834,   922,   923,  5957,   837,   926,   927,   930,  2353,-32768,
   636,  1903,  2424,  5978,   931,  3148,  5999,  6020,  2424,  3176,
  3204,  6041,   802,  6377,-32768,   803,   808,   810,   809,   -74,
  2424,  2424,-32768,-32768,-32768,   817,  3074,-32768,   818,  2424,
  4986,  4130,  4156,  4182,  3792,   186,   250,   -28,   201,   849,
-32768,   363,   -74,  2614,  5009,-32768,-32768,  2424,-32768,  5032,
-32768,  2424,  1633,  1633,  5055,  5078,   956,   958,   959,   841,
  2424,  2678,  2424,  2424,-32768,  6062,  6083,  6104,-32768,-32768,
  5101,    43,-32768,  3232,-32768,-32768,   831,   851,   846,-32768,
   852,   984,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2424,  2424,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2424,  2424,  2424,  2424,  2424,  2424,
  2424,   987,-32768,  2353,   611,-32768,-32768,  2424,  5124,   986,
   988,   856,-32768,   110,  2424,   990,   992,  1328,-32768,  1007,
   878,    24,  1011,-32768,  2424,-32768,   895,   611,   371,  4208,
   -74,-32768,  2353,  3260,  2708,   753,-32768,  1426,-32768,   971,
  1633,  1633,  1014,  1633,   735,  1633,  1633,  1015,   972,  1633,
  1633,-32768,   646,-32768,  2353,  1461,  1017,   885,  1019,  1022,
  1025,   446,  1026,  1027,  1028,  1030,  1031,  1033,  1035,  1021,
   342,  4234,  4260,-32768,-32768,  3288,   900,   -74,   -74,   -74,
  2353,  2353,  2353,  2353,  1038,   902,   910,   235,-32768,   404,
-32768,   363,  1041,  1596,  1043,  6125,  1044,  1045,  1046,  1048,
  1633,  1633,  1633,  1051,  4286,-32768,  2832,  1083,  1049,  1050,
  1052,  1054,  1067,-32768,  1070,-32768,    12,   937,  2424,  2424,
  1633,   915,  2424,-32768,  6146,  5147,  6167,  5170,  6188,  5193,
  6209,  5216,  5239,   942,   380,   943,  6230,   -91,-32768,-32768,
   158,   290,   941,  1076,  1731,-32768,-32768,-32768,    24,  2424,
-32768,   658,-32768,  6377,-32768,  1079,    67,  2424,    69,   664,
-32768,  2424,   944,    48,    49,  1633,  1089,   946,   947,  1092,
  1093,  1633,   960,  1096,  1101,-32768,   667,-32768,  1103,  2424,
  1633,  1633,  1633,-32768,   213,  1633,  1633,  1633,  1633,  1633,
  1633,  1633,   544,  2424,  2424,  2424,   967,-32768,   -43,   -20,
   240,   671,   672,   676,   684,-32768,  1633,  2424,-32768,-32768,
  2179,   241,-32768,-32768,-32768,  1104,-32768,-32768,-32768,-32768,
  1106,  1107,  1024,-32768,  2424,  2424,  2424,-32768,  1633,  1111,
  1115,-32768,    81,-32768,  1116,  2424,  4312,  4338,   695,-32768,
  2424,  6251,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   981,-32768,-32768,-32768,-32768,  1633,   473,  2424,  1117,  1121,
    30,-32768,  1120,  5262,    24,-32768,-32768,-32768,   611,  4364,
-32768,  1000,  6377,  2424,-32768,   -74,-32768,   -74,  1136,-32768,
  2424,  2424,-32768,-32768,  1139,  2424,-32768,-32768,-32768,  1141,
  4390,  1142,  1143,  1146,  2424,  2424,   842,  1149,  1150,  1152,
  1154,  1155,  1157,-32768,  2482,  3316,  6272,  3064,   652,  3074,
   -74,  1159,   -74,  1160,   -74,  1162,  1163,  1167,  1168,  1169,
   638,  1034,  6293,  3344,   459,-32768,  1633,-32768,-32768,  1633,
  3092,   883,  6314,  1171,  1172,  1633,-32768,-32768,   387,  6377,
  2424,  2424,  1633,  1040,   714,  6377,  1633,  1182,  1181,  1183,
  2003,-32768,  1186,  1188,-32768,  1055,-32768,  1190,  2424,-32768,
  3372,    85,   139,-32768,  3400,  3428,-32768,  3456,  1187,  2424,
-32768,-32768,-32768,  2140,  2280,  1191,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2755,  1192,  1071,-32768,  2424,-32768,  1072,
   363,   469,-32768,  1078,   477,-32768,  1080,   487,-32768,  1086,
-32768,-32768,-32768,-32768,  1220,  1633,  1215,  1090,  2424,  1228,
  1099,  2424,-32768,  2424,-32768,-32768,-32768,-32768,  1250,-32768,
  2424,  4416,  4442,-32768,  1633,  2424,  1251,  1252,  1122,-32768,
-32768,-32768,    24,-32768,  1135,-32768,  4468,  1254,-32768,-32768,
  1255,  1256,  1257,  1273,  4494,-32768,-32768,-32768,-32768,-32768,
   652,  3120,-32768,   270,  2179,   363,  2179,   363,  2179,   363,
-32768,   715,  1633,-32768,  3484,-32768,  2424,  3512,  3540,-32768,
  1137,  6377,  2424,  2424,   718,  6377,-32768,-32768,-32768,  1275,
-32768,  2424,-32768,-32768,-32768,-32768,-32768,  1277,  1140,  2424,
-32768,-32768,  3568,   514,   285,  3596,   517,   320,  3624,   535,
   339,  1633,  1279,  1231,  2700,  1151,  2774,-32768,-32768,  2424,
  6335,  4520,    31,-32768,  4546,  1153,-32768,  3652,  1287,  2424,
  1291,  1292,  2424,  1295,  1310,  2424,  1311,  1174,-32768,  2424,
-32768,   363,-32768,-32768,   723,-32768,  2424,-32768,  1633,  2424,
  1314,-32768,-32768,  1178,  3680,-32768,-32768,  1179,  3708,-32768,
-32768,  1180,  3736,-32768,  1318,  2793,   341,  2764,  1319,  1184,
  6356,   727,  3764,  1207,   363,  1320,   363,  1322,   363,  1323,
-32768,-32768,-32768,-32768,   363,-32768,   611,-32768,  1210,  1344,
  1349,   354,-32768,  1212,   370,-32768,  1213,   379,-32768,  1217,
   381,   728,-32768,  1225,  1633,-32768,  1214,  1358,   363,  1364,
   363,  1365,   363,-32768,   611,  1369,   611,   731,  1370,-32768,
   390,-32768,   415,-32768,   418,-32768,-32768,   732,-32768,  1392,
-32768,  1393,  1394,  1395,   611,  1396,-32768,-32768,-32768,-32768,
-32768,-32768,  1403,  1404,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   582,-32768,-32768,   830,-32768,   282,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -269,    19,-32768,    61,  1419,     7,  -347,  -170,    11,
-32768,-32768,-32768,-32768,-32768,  1421,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -350,  -548,-32768,-32768,-32768,    -3,-32768,   274,-32768, -1048,
  -133,   230,   118,  -635,   533,-32768,   -56,     2
};


#define	YYLAST		6512


static const short yytable[] = {   209,
   125,   529,   194,   453,   358,   127,  1105,   362,    62,   576,
   367,   448,    63,   325,   148,   576,   781,   177,   210,   332,
   273,   131,   124,   201,   203,   204,   180,   191,   171,   215,
   143,   203,   204,   651,   387,   183,  1168,   389,   184,   656,
   117,   118,   143,   346,   347,   363,   203,   204,   743,   369,
   370,   163,   164,   905,   907,     3,   101,   102,   103,   104,
   348,   165,   105,   101,   102,   103,   104,   172,   166,   105,
   173,   452,   898,   174,   901,   547,   548,   217,   101,   102,
   103,   104,   346,   347,   105,   577,   578,   579,   580,   581,
  1069,   577,   578,   579,   580,   581,   128,   218,   941,   219,
   942,   149,   144,   906,   908,   346,   347,   274,   275,   130,
   266,   267,   268,   772,   713,   269,   272,   449,   202,   277,
  1192,   943,   364,   944,   365,   297,   129,   220,   299,   221,
   300,   307,   310,   311,   195,   313,   307,   315,   316,   133,
   307,   319,   320,   893,  1070,   328,   117,   118,   136,   582,
   163,   164,   211,   137,   212,   865,   178,   657,   132,   213,
   165,   344,   345,   205,   643,   181,   192,   175,   216,   840,
   208,   345,   652,  1169,   117,   118,  1238,   110,   111,   112,
   113,   645,   743,   150,   374,   375,   376,   498,   378,   544,
   657,   381,   382,   475,   346,   347,   117,   118,   476,   141,
   773,   774,   147,   441,   442,   443,   444,   392,   562,   142,
   346,   347,   117,   118,   398,   399,   400,   401,   402,   403,
   404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
   414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
   424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
   434,   435,   436,   437,   438,   439,   366,   314,   633,   987,
   145,   318,   134,   634,   346,   347,   146,   307,   643,   135,
   110,   111,   112,   113,   925,   926,   459,   460,   461,   462,
   463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
   473,   454,   153,   840,   151,   154,   887,   155,   138,   481,
   152,   157,   167,   169,   158,   176,   715,   159,   489,   160,
   716,   717,   715,   494,   640,   641,   716,   717,   481,   307,
   138,   134,   222,   504,   223,   506,   507,   508,   711,   510,
   511,   512,   514,   514,   514,   514,   146,   515,   515,   515,
   515,   715,   224,   714,   225,   716,   717,   531,   532,   533,
   534,   266,   267,   535,   525,   525,   715,   545,   528,   528,
   716,   717,   550,   139,   308,   346,   347,   555,   556,   308,
   140,   842,   156,   308,   110,   111,   112,   113,   839,   566,
   567,   945,   568,   946,   956,   139,   161,   571,   450,   185,
   574,   715,   712,   117,   118,   716,   717,   516,   517,   518,
   162,   644,   110,   111,   112,   113,   346,   347,   346,   347,
   715,   573,   715,  1122,   716,   717,   716,   717,   170,   727,
   728,   117,   118,   349,   520,   715,   182,  1110,  1151,   716,
   717,   346,   347,   179,   715,   341,   186,   343,   716,   717,
   501,   715,   639,   350,   187,   716,   717,   530,   359,   648,
   715,   814,   715,   647,   716,   717,   716,   717,   346,   347,
   226,   715,   227,  1154,   188,   716,   717,   346,   347,   646,
   346,   347,   307,   660,   543,   639,   664,   204,   189,   665,
   666,   668,  1157,   824,  1203,   190,   715,   360,   395,   715,
   716,   717,   196,   716,   717,   307,   197,  1228,   666,   686,
   308,   886,   888,   346,   347,   692,   815,   787,   101,   102,
   103,   104,   485,  1230,   105,   745,   883,   702,   703,   200,
   575,   485,  1232,  1050,  1234,   485,   706,   486,  1051,   346,
   347,   260,   482,  1252,   228,   840,   229,   794,   795,   485,
   797,   491,   800,   801,   724,   841,   804,   805,   726,   934,
   935,   482,   308,   198,   440,   204,   199,   735,  1253,   737,
   738,  1254,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   840,   261,   766,   840,
   294,   485,   840,   495,   346,   347,   101,   102,   103,   104,
   744,  1020,   105,   659,   346,   347,   262,   851,   852,   853,
  1039,   786,   346,   347,   631,   263,   632,   755,   756,   230,
  1085,   231,   346,   347,   203,   204,   683,   264,  1087,   523,
   524,   757,   758,   759,   760,   761,   762,   763,  1089,   343,
   307,   232,   276,   233,   767,   234,   278,   235,   840,   346,
   347,   775,   346,   347,   295,   483,   101,   102,   103,   104,
   296,   784,   105,   298,   236,  1150,   237,   940,  1153,   307,
   346,   347,   909,   840,   312,   238,   840,   239,   915,   840,
  1084,   317,   840,   291,   292,   293,  1156,   922,   923,   924,
   294,   307,   927,   928,   929,   930,   931,   932,   933,   117,
   118,   240,   840,   241,   840,   446,   840,   212,   117,   118,
   327,   329,   213,   952,   479,   308,   212,   307,   307,   307,
   307,   213,   330,   667,   669,   331,    28,    29,    30,    31,
   242,    33,   243,   333,   244,   964,   245,   335,   308,    38,
    39,   667,   246,  1119,   247,  1125,   248,  1128,   249,  1131,
   250,   252,   251,   253,   334,   867,   868,   336,   254,   872,
   255,   765,   979,   337,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   502,   292,   293,   256,   258,
   257,   259,   294,   485,   340,   642,   894,   485,   338,   684,
   790,  1035,   339,   798,   900,   799,   744,   485,   903,   806,
   889,   351,   352,   701,   289,   290,   291,   292,   293,   895,
   361,   896,   807,   294,   353,   485,   921,   902,   485,   373,
   919,  1187,   485,   485,   947,   948,   720,   485,   371,   949,
   936,   937,   938,  1040,   354,   485,  1041,   950,   832,   833,
   834,   835,  1049,   951,   953,   372,   973,   954,   974,  1054,
   377,   379,   988,  1058,  1212,  1006,  1215,  1007,  1218,   380,
   385,   961,   962,   963,  1221,  1056,  1132,  1057,  1133,   973,
   383,  1143,   970,   308,  1056,   384,  1189,   976,   973,  1235,
  1209,  1236,   973,  1255,  1250,  1256,   386,   388,  1241,   390,
  1243,   967,  1245,   391,   981,   393,   394,   294,   980,   397,
  1044,   445,   308,   455,   456,   457,   503,   480,   509,   519,
   991,   549,  1092,   552,   553,   554,   560,   995,   996,   563,
   635,   636,   998,   637,   308,   638,   649,   650,   654,   661,
   670,  1004,  1005,  1135,   671,   672,   674,   675,   676,   677,
   679,  1014,   680,   681,   789,   682,  1015,   688,   696,   697,
   308,   308,   308,   308,   698,   525,   699,   202,   700,   528,
   285,   286,   287,   288,   289,   290,   291,   292,   293,  1134,
   704,   705,   731,   294,   732,   733,   749,  1052,  1053,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   734,   829,   830,   831,   294,  1067,   750,   753,   751,   754,
   764,   769,  1188,   770,   771,   776,  1075,   777,  1158,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   779,  1082,   780,   783,   294,   785,   793,
   796,   802,   803,   809,   823,   811,  1045,   810,   812,     5,
     6,   813,   816,   817,   818,  1095,   819,   820,  1098,   821,
  1099,   822,   828,   836,   837,   838,   843,  1102,   845,   847,
   848,   849,  1106,   850,   854,   859,   860,   871,   861,   862,
   536,    11,    12,   537,    14,    15,   538,    17,   539,    19,
   863,    20,   866,    22,    23,   864,    25,    26,   882,   884,
   890,  1123,   891,  1126,   897,  1129,   904,   525,   911,   912,
   857,   528,    37,  1137,   910,     5,     6,   913,   914,  1141,
  1142,   917,   916,    41,    42,    43,   918,   920,  1145,   939,
   957,   958,   959,   960,   955,   965,  1148,    50,    51,   966,
   978,   968,   982,   540,   983,   985,   536,    11,    12,   537,
    14,    15,   538,    17,   539,    19,   976,    20,   990,    22,
    23,   994,    25,    26,   997,   999,  1175,  1001,  1002,  1179,
  1223,  1003,  1183,   279,  1008,  1009,  1186,  1010,    37,  1011,
  1012,   546,  1013,  1191,  1023,  1026,  1193,  1029,  1031,    41,
    42,    43,  1032,  1033,  1034,  1036,  1047,  1048,  1246,   992,
  1249,   993,  1055,    50,    51,  1059,  1060,  1097,  1061,   540,
   458,  1074,  1063,  1064,  1065,  1066,  1078,  1080,  1261,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,  1081,  1022,  1083,  1025,   294,  1028,   858,
  1086,  1093,  1088,    73,   301,  1091,  1111,   551,  1090,    77,
    78,    79,  1094,  1096,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,  1100,  1107,  1108,  1109,  1113,
  1114,  1115,  1116,   302,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,  1117,  1140,
  1144,  1146,   294,  1147,  1159,    28,    29,    30,    31,    32,
    33,  1160,  1173,  1163,  1171,   474,  1176,  1177,    38,    39,
  1180,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,  1181,  1184,  1185,  1194,   294,
  1195,  1197,  1199,  1201,  1206,  1213,  1207,  1216,  1219,   106,
   107,   108,   109,   778,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   114,   303,  1211,  1226,
   294,   116,  1225,  1227,  1229,  1231,   119,  1239,  1124,  1233,
  1127,   122,  1130,  1240,   500,    73,   301,  1237,   899,  1242,
  1244,    77,    78,    79,  1247,  1251,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,  1257,  1258,  1259,
  1260,  1262,  1264,  1265,   747,   302,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
    61,  1165,    69,   984,   294,     0,     0,    28,    29,    30,
    31,    32,    33,   483,     0,     0,     0,     0,     0,     0,
    38,    39,     0,     0,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,   321,   294,     0,     0,     0,   808,     0,     0,     0,
     0,   106,   107,   108,   109,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,   322,
     0,     0,     0,   116,     0,     0,     0,     0,   119,     0,
    73,   301,     0,   122,     0,   323,    77,    78,    79,     0,
     0,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,     0,     0,     0,     0,     0,     0,     0,     0,
   302,     0,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   484,   292,   293,     0,     0,     0,     0,
   294,     0,    28,    29,    30,    31,    32,    33,   483,     0,
     0,     0,     0,     0,     0,    38,    39,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,   368,     0,     0,     0,
     0,   844,     0,     0,     0,     0,   106,   107,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,   322,     0,     0,     0,   116,     0,
     0,     0,     0,   119,     0,    73,   301,     0,   122,     0,
   323,    77,    78,    79,     0,     0,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,     0,     0,     0,
     0,     0,     0,     0,     0,   302,     0,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   502,   292,
   293,     0,     0,     0,     0,   294,     0,    28,    29,    30,
    31,    32,    33,   564,     0,     0,     0,     0,     0,     0,
    38,    39,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,   892,     0,     0,     0,
     0,   106,   107,   108,   109,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,   322,
     0,     0,     0,   116,     0,     0,     0,     0,   119,     0,
    73,   301,     0,   122,     0,   323,    77,    78,    79,     0,
     0,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,     0,     0,     0,     0,     0,     0,     0,     0,
   302,     0,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,    28,    29,    30,    31,    32,    33,   655,     0,
     0,     0,     0,     0,     0,    38,    39,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   106,   107,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,   303,     0,     0,     0,   116,     0,
     0,     0,     0,   119,     0,    73,   301,     0,   122,     0,
   499,    77,    78,    79,     0,     0,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,     0,     0,     0,
     0,     0,     0,     0,     0,   302,     0,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,    28,    29,    30,
    31,    32,    33,     0,     0,     0,    73,   265,     0,     0,
    38,    39,    77,    78,    79,     0,     0,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,  1062,     0,
     0,   106,   107,   108,   109,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,   303,
     0,     0,     0,   116,     0,     0,     0,     0,   119,     0,
    73,   265,     0,   122,     0,   685,    77,    78,    79,     0,
     0,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   106,   107,   108,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
   115,     0,     0,     0,   116,     0,     0,     0,     0,   119,
     0,     0,   270,     0,   122,     0,   271,     0,     0,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,     0,
     0,     0,     0,     0,     0,  1076,   106,   107,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,   115,     0,     0,     0,   116,     0,
     0,     0,     0,   119,     0,     0,   662,     0,   122,     0,
   663,    73,   265,     0,     0,     0,     0,    77,    78,    79,
     0,     0,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,     0,     0,     0,    73,    74,    75,     0,
    76,     0,    77,    78,    79,     0,     0,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,     0,   101,
   102,   103,   104,     0,     0,   105,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1077,     0,   106,   107,   108,
   109,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   355,   356,     0,     0,     0,   116,
     0,     0,     0,     0,   357,     0,     0,     0,     0,   122,
     0,   166,   106,   107,   108,   109,   110,   111,   112,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
   115,     0,     0,     0,   116,   117,   118,     0,     0,   119,
     0,   120,     0,   121,   122,    73,   301,     0,     0,     0,
     0,    77,    78,    79,     0,     0,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,     0,     0,     0,
     0,     0,     0,     0,     0,   302,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,    28,    29,    30,
    31,    32,    33,     0,     0,     0,    73,   265,     0,     0,
    38,    39,    77,    78,    79,     0,     0,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,     0,     0,
     0,   106,   107,   108,   109,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,   303,
     0,     0,     0,   116,    73,   265,   204,     0,   119,     0,
    77,    78,    79,   122,     0,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,     0,   101,   102,   103,
   104,     0,     0,   105,     0,     0,     0,     0,     0,     0,
     0,     0,   106,   107,   108,   109,     0,     0,     0,     5,
     6,     0,     0,     0,     0,     0,     0,     0,     0,   114,
   115,     0,     0,     0,   116,     0,     0,     0,     0,   119,
     0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
   536,    11,    12,   537,    14,    15,   538,    17,   539,    19,
     0,    20,     0,    22,    23,     0,    25,    26,     0,     0,
   106,   107,   108,   109,     0,     0,     0,     0,     0,     0,
     0,     0,    37,     5,     6,     0,     0,   114,   115,     0,
     0,     0,   116,    41,    42,    43,     0,   119,     0,     0,
     0,     0,   122,     0,     0,     5,     6,    50,    51,     0,
     0,     0,     0,   540,   536,    11,    12,   537,    14,    15,
   538,    17,   539,    19,     0,    20,     0,    22,    23,     0,
    25,    26,     0,     0,     0,     0,   536,    11,    12,   537,
    14,    15,   538,    17,   539,    19,    37,    20,     0,    22,
    23,   569,    25,    26,     0,     0,     0,    41,    42,    43,
     0,     0,     0,     0,     0,     0,     0,     0,    37,     5,
     6,    50,    51,     0,     0,     0,     0,   540,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     5,     6,    50,    51,   792,     0,     0,     0,   540,
   536,    11,    12,   537,    14,    15,   538,    17,   539,    19,
     0,    20,     0,    22,    23,   570,    25,    26,     0,     0,
     0,     0,   536,    11,    12,   537,    14,    15,   538,    17,
   539,    19,    37,    20,     0,    22,    23,   721,    25,    26,
  1079,     0,     0,    41,    42,    43,     0,     0,     0,     0,
     0,     0,     0,     0,    37,     5,     6,    50,    51,  1164,
     0,     0,     0,   540,     0,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1202,    50,
    51,     0,     0,     0,     0,   540,   536,    11,    12,   537,
    14,    15,   538,    17,   539,    19,     0,    20,     0,    22,
    23,   736,    25,    26,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,    37,   856,
     0,     0,   294,  1161,     0,     0,     0,     0,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,    51,     0,     0,     0,     0,   540,
     0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,  1204,   294,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,    -3,     1,
     0,     0,    -3,     0,     0,     0,     0,     0,     0,     0,
    -3,    -3,     0,     0,     0,     0,     0,     0,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,    -3,     0,     0,   294,     0,    -3,    -3,
     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,
     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,
    -3,    -3,    -3,    -3,     0,     0,    -3,    -3,     0,     4,
     0,     0,     0,    -3,    -3,    -3,    -3,     5,     6,    -3,
     0,    -3,     0,    -3,    -3,    -3,    -3,     0,    -3,    -3,
     0,     0,    -3,    -3,    -3,    -3,    -3,     0,     0,     0,
     7,     0,     0,     0,     0,     8,     9,     0,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,     0,    20,
    21,    22,    23,    24,    25,    26,     0,     0,     0,    27,
    28,    29,    30,    31,    32,    33,     0,    34,    35,    36,
    37,     0,     0,    38,    39,     5,     6,     0,     0,     0,
    40,    41,    42,    43,     0,     0,    44,     0,    45,     0,
    46,    47,    48,    49,     0,    50,    51,     0,     0,    52,
    53,    54,    55,    56,     0,     0,   536,    11,    12,   537,
    14,    15,   538,    17,   539,    19,     0,    20,     0,    22,
    23,     0,    25,    26,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,    37,     0,
     0,     0,   294,     0,     0,     0,   451,     0,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,    51,     0,     0,     0,     0,   540,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,  1018,     0,  1019,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,  1042,     0,  1043,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,  1120,     0,  1121,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,   689,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,     0,     0,   693,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,     0,     0,   694,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,     0,     0,   746,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,     0,     0,   791,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,   827,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,     0,     0,  1016,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,     0,     0,  1038,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,     0,     0,  1068,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,     0,     0,  1071,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,  1072,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,     0,     0,  1073,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,     0,     0,  1136,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,     0,     0,  1138,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,     0,     0,  1139,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,  1149,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,     0,     0,  1152,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,     0,     0,  1155,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,     0,     0,  1172,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,     0,     0,  1196,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,  1198,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,     0,     0,  1200,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,     0,     0,  1210,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,   447,     0,
     0,     0,     0,   521,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,   477,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,   521,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,   522,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,   561,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,   611,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,   612,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,   625,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,   626,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,   627,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,   628,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,   629,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,   630,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,   708,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,   709,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,   710,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,   788,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,   825,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,   826,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,   855,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,   971,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,   972,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,   989,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,  1000,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,  1103,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
     0,     0,     0,  1104,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,  1112,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,     0,     0,     0,  1118,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,     0,     0,
     0,  1167,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,  1170,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
   572,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,     0,     0,   590,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,   592,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,     0,     0,   594,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,   596,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,     0,     0,   598,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,   600,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,     0,
     0,   602,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,   604,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,     0,     0,   606,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
   608,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,     0,     0,   610,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,   614,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,     0,     0,   616,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,   618,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,     0,     0,   620,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,   622,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,     0,
     0,   624,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,   707,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,     0,     0,   723,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
   725,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,     0,     0,   729,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,     0,     0,   730,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,     0,     0,   742,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
     0,     0,   768,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,     0,     0,   874,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,     0,     0,   876,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,     0,
     0,   878,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,     0,     0,   880,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,     0,     0,   881,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,     0,     0,
   986,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,   447,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,   478,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,   487,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,   488,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,   490,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,   492,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,   493,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,   496,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,   497,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
   505,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,   557,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,   558,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,   559,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,   565,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,   589,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,   591,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,   593,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,   595,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,   597,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
   599,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,   601,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,   603,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,   605,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,   607,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,   609,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,   613,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,   615,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,   617,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,   619,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
   621,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,   623,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,   673,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,   678,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,   687,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,   690,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,   691,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,   695,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,   739,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,   740,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
   741,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,   846,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,   873,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294,     0,   875,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
     0,     0,   294,     0,   877,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     0,     0,     0,   294,     0,   879,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     0,     0,     0,     0,   294,     0,   885,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,     0,     0,     0,     0,   294,     0,   977,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,     0,     0,     0,     0,   294,     0,  1017,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,     0,     0,     0,     0,   294,     0,  1037,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,     0,     0,     0,   294,     0,
  1046,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,     0,     0,     0,     0,   294,
     0,  1166,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,     0,     0,
   294,     0,  1208,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,     0,     0,     0,
     0,   294
};

static const short yycheck[] = {    56,
     4,   349,     4,   273,   175,     4,  1055,   178,     2,     4,
   181,     7,     2,   147,    49,     4,   652,     4,     4,   153,
     4,     6,     4,     4,     4,     5,     4,     4,     4,     4,
    71,     4,     5,     4,   205,    43,     6,   208,    46,     6,
   132,   133,    71,   126,   127,   179,     4,     5,   140,   183,
   184,   126,   127,     6,     6,     6,    36,    37,    38,    39,
   143,   136,    42,    36,    37,    38,    39,    43,   143,    42,
    46,     7,     6,    49,     6,     6,     7,    76,    36,    37,
    38,    39,   126,   127,    42,    80,    81,    82,    83,    84,
     6,    80,    81,    82,    83,    84,    13,   136,   142,   138,
   144,   136,   143,    56,    56,   126,   127,    91,    92,   136,
   114,   115,   116,     4,   143,   119,   120,   113,    99,   123,
  1169,   142,     4,   144,     6,   129,    49,   136,   132,   138,
   134,   135,   136,   137,   136,   139,   140,   141,   142,     6,
   144,   145,   146,   779,     6,   149,   132,   133,   136,   144,
   126,   127,   138,   136,   140,   144,   143,   124,   143,   145,
   136,   165,   166,   143,     7,   143,   143,   143,   143,   718,
   143,   175,   143,   143,   132,   133,  1225,   113,   114,   115,
   116,   451,   140,    49,   188,   189,   190,   321,   192,   360,
   124,   195,   196,   137,   126,   127,   132,   133,   142,   136,
    91,    92,    53,   260,   261,   262,   263,   211,   379,   136,
   126,   127,   132,   133,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   138,   140,   137,   895,
   136,   144,   136,   142,   126,   127,   136,   271,     7,   143,
   113,   114,   115,   116,    62,    63,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   273,    46,   842,    49,    49,     7,    51,    71,   303,
    49,    43,    29,    30,    46,    32,    72,    49,   312,    51,
    76,    77,    72,   317,   448,   449,    76,    77,   322,   323,
    71,   136,   136,   327,   138,   329,   330,   331,   143,   333,
   334,   335,   336,   337,   338,   339,   136,   336,   337,   338,
   339,    72,   136,   143,   138,    76,    77,   351,   352,   353,
   354,   355,   356,   357,   348,   349,    72,   361,   348,   349,
    76,    77,   366,   136,   135,   126,   127,   371,   372,   140,
   143,   722,    51,   144,   113,   114,   115,   116,   144,   383,
   384,   142,   386,   144,   144,   136,   136,   391,   271,     4,
   394,    72,   143,   132,   133,    76,    77,   337,   338,   339,
   143,   140,   113,   114,   115,   116,   126,   127,   126,   127,
    72,   393,    72,   144,    76,    77,    76,    77,   143,   553,
   554,   132,   133,   143,   142,    72,     6,  1063,   144,    76,
    77,   126,   127,    49,    72,   162,     4,   164,    76,    77,
   323,    72,   446,   170,     4,    76,    77,   142,   175,   453,
    72,     6,    72,   452,    76,    77,    76,    77,   126,   127,
   136,    72,   138,   144,   136,    76,    77,   126,   127,   451,
   126,   127,   476,   477,   142,   479,   480,     5,   136,   483,
   484,   485,   144,   142,   144,   136,    72,   143,   215,    72,
    76,    77,   136,    76,    77,   499,     6,   144,   502,   503,
   271,   771,   772,   126,   127,   509,    61,   137,    36,    37,
    38,    39,   142,   144,    42,   572,   137,   521,   522,     4,
   143,   142,   144,   137,   144,   142,   530,   144,   142,   126,
   127,   136,   303,   144,   136,  1084,   138,   671,   672,   142,
   674,   144,   676,   677,   548,   142,   680,   681,   552,     6,
     7,   322,   323,    99,     4,     5,    99,   561,   144,   563,
   564,   144,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,  1125,   136,   635,  1128,
   135,   142,  1131,   144,   126,   127,    36,    37,    38,    39,
   572,   939,    42,   476,   126,   127,   136,   731,   732,   733,
   142,   658,   126,   127,   138,   136,   140,   611,   612,   136,
   142,   138,   126,   127,     4,     5,   499,   136,   142,   346,
   347,   625,   626,   627,   628,   629,   630,   631,   142,   356,
   634,   136,     4,   138,   638,   136,     6,   138,  1187,   126,
   127,   645,   126,   127,     6,     8,    36,    37,    38,    39,
     6,   655,    42,     5,   136,   142,   138,   828,   142,   663,
   126,   127,   796,  1212,   136,   136,  1215,   138,   802,  1218,
  1021,   136,  1221,   128,   129,   130,   142,   811,   812,   813,
   135,   685,   816,   817,   818,   819,   820,   821,   822,   132,
   133,   136,  1241,   138,  1243,   138,  1245,   140,   132,   133,
   136,   143,   145,   837,   138,   476,   140,   711,   712,   713,
   714,   145,   136,   484,   485,   136,    65,    66,    67,    68,
   136,    70,   138,   143,   136,   859,   138,   136,   499,    78,
    79,   502,   136,  1081,   138,  1086,   136,  1088,   138,  1090,
   136,   136,   138,   138,   143,   749,   750,   136,   136,   753,
   138,   634,   886,   136,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   136,   136,
   138,   138,   135,   142,     4,   144,   780,   142,   136,   144,
   663,   144,   136,    49,   788,    51,   768,   142,   792,   144,
   772,   138,   143,   520,   126,   127,   128,   129,   130,   142,
   138,   144,   685,   135,   143,   142,   810,   144,   142,     6,
   144,  1162,   142,   142,   144,   144,   543,   142,   138,   144,
   824,   825,   826,   957,   143,   142,   960,   144,   711,   712,
   713,   714,   966,   837,   838,   138,   142,   841,   144,   973,
   140,   143,   899,   977,  1195,     4,  1197,     6,  1199,    94,
     6,   855,   856,   857,  1205,   142,   142,   144,   144,   142,
   136,   144,   866,   634,   142,   136,   144,   871,   142,   142,
   144,   144,   142,   142,   144,   144,   136,     6,  1229,     6,
  1231,   863,  1233,   138,   888,     4,   143,   135,   887,     6,
     8,     5,   663,   140,     7,   138,     7,   143,     7,   137,
   904,     6,  1036,   136,     7,     7,    91,   911,   912,   143,
   142,   137,   916,   137,   685,   142,     6,     4,   139,     7,
    94,   925,   926,  1094,     7,     7,     7,    94,     7,     7,
    94,   935,     7,     7,   661,     6,   935,     7,   137,   137,
   711,   712,   713,   714,   137,   939,   137,    99,   140,   939,
   122,   123,   124,   125,   126,   127,   128,   129,   130,  1093,
   144,   144,     7,   135,     7,     7,   136,   971,   972,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   140,   708,   709,   710,   135,   989,   136,   136,   143,     6,
     4,     6,  1163,     6,   139,     6,  1000,     6,  1132,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,     7,  1018,   138,     6,   135,   124,    49,
     7,     7,    51,     7,     4,     7,   144,   143,     7,    12,
    13,     7,     7,     7,     7,  1039,     7,     7,  1042,     7,
  1044,     7,   143,     6,   143,   136,     6,  1051,     6,     6,
     6,     6,  1056,     6,     4,     7,     7,   143,     7,     6,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     4,    54,   136,    56,    57,     6,    59,    60,   137,   137,
   140,  1085,     7,  1087,     6,  1089,   143,  1081,   143,   143,
     8,  1081,    75,  1097,     6,    12,    13,     6,     6,  1103,
  1104,     6,   143,    86,    87,    88,     6,     5,  1112,   143,
     7,     6,     6,    90,   841,     5,  1120,   100,   101,     5,
   140,     6,     6,   106,     4,     6,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,  1140,    54,   139,    56,
    57,     6,    59,    60,     6,     5,  1150,     6,     6,  1153,
  1207,     6,  1156,     6,     6,     6,  1160,     6,    75,     6,
     6,   144,     6,  1167,     6,     6,  1170,     6,     6,    86,
    87,    88,     6,     6,     6,   142,     6,     6,  1235,   906,
  1237,   908,   143,   100,   101,     4,     6,    89,     6,   106,
     6,     5,     7,     6,   140,     6,     6,     6,  1255,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   143,   941,   144,   943,   135,   945,   137,
   143,     7,   143,     3,     4,     6,    92,   144,   143,     9,
    10,    11,   143,     6,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,     6,     6,     6,   137,     6,
     6,     6,     6,    43,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,     6,   143,
     6,     5,   135,   144,     6,    65,    66,    67,    68,    69,
    70,    61,     6,   143,   142,     6,     6,     6,    78,    79,
     6,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,     6,     6,   144,     5,   135,
   143,   143,   143,     6,     6,     6,   143,     6,     6,   109,
   110,   111,   112,     6,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   126,   127,   142,     6,
   135,   131,   143,     5,   143,   143,   136,   144,  1085,   143,
  1087,   141,  1089,     6,   144,     3,     4,   143,   787,     6,
     6,     9,    10,    11,     6,     6,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,     6,     6,     6,
     6,     6,     0,     0,   575,    43,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     2,  1140,     2,   891,   135,    -1,    -1,    65,    66,    67,
    68,    69,    70,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    78,    79,    -1,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    99,   135,    -1,    -1,    -1,     6,    -1,    -1,    -1,
    -1,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,
    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,
     3,     4,    -1,   141,    -1,   143,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    65,    66,    67,    68,    69,    70,     8,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    79,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    99,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
    -1,    -1,    -1,   136,    -1,     3,     4,    -1,   141,    -1,
   143,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,    65,    66,    67,
    68,    69,    70,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    78,    79,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
    -1,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,
    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,
     3,     4,    -1,   141,    -1,   143,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    65,    66,    67,    68,    69,    70,     8,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    79,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
    -1,    -1,    -1,   136,    -1,     3,     4,    -1,   141,    -1,
   143,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,    65,    66,    67,
    68,    69,    70,    -1,    -1,    -1,     3,     4,    -1,    -1,
    78,    79,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,     6,    -1,
    -1,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,
    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,
     3,     4,    -1,   141,    -1,   143,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
   127,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,   139,    -1,   141,    -1,   143,    -1,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
    -1,    -1,    -1,   136,    -1,    -1,   139,    -1,   141,    -1,
   143,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,     3,     4,     5,    -1,
     7,    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    36,
    37,    38,    39,    -1,    -1,    42,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,    -1,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,   131,
    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,
    -1,   143,   109,   110,   111,   112,   113,   114,   115,   116,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
   127,    -1,    -1,    -1,   131,   132,   133,    -1,    -1,   136,
    -1,   138,    -1,   140,   141,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    65,    66,    67,
    68,    69,    70,    -1,    -1,    -1,     3,     4,    -1,    -1,
    78,    79,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,
    -1,    -1,    -1,   131,     3,     4,     5,    -1,   136,    -1,
     9,    10,    11,   141,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
    39,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   109,   110,   111,   112,    -1,    -1,    -1,    12,
    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
   127,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    -1,    56,    57,    -1,    59,    60,    -1,    -1,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    12,    13,    -1,    -1,   126,   127,    -1,
    -1,    -1,   131,    86,    87,    88,    -1,   136,    -1,    -1,
    -1,    -1,   141,    -1,    -1,    12,    13,   100,   101,    -1,
    -1,    -1,    -1,   106,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,
    59,    60,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    75,    54,    -1,    56,
    57,   144,    59,    60,    -1,    -1,    -1,    86,    87,    88,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    12,
    13,   100,   101,    -1,    -1,    -1,    -1,   106,    -1,    86,
    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    12,    13,   100,   101,     8,    -1,    -1,    -1,   106,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    -1,    56,    57,   144,    59,    60,    -1,    -1,
    -1,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    75,    54,    -1,    56,    57,   144,    59,    60,
     6,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    75,    12,    13,   100,   101,     6,
    -1,    -1,    -1,   106,    -1,    86,    87,    88,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,   100,
   101,    -1,    -1,    -1,    -1,   106,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    -1,    56,
    57,   144,    59,    60,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    75,     8,
    -1,    -1,   135,   144,    -1,    -1,    -1,    -1,    -1,    86,
    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,    -1,    -1,    -1,    -1,   106,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,   144,   135,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,     0,     1,
    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    35,    -1,    -1,   135,    -1,    40,    41,
    -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
    72,    73,    74,    75,    -1,    -1,    78,    79,    -1,     4,
    -1,    -1,    -1,    85,    86,    87,    88,    12,    13,    91,
    -1,    93,    -1,    95,    96,    97,    98,    -1,   100,   101,
    -1,    -1,   104,   105,   106,   107,   108,    -1,    -1,    -1,
    35,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    64,
    65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
    75,    -1,    -1,    78,    79,    12,    13,    -1,    -1,    -1,
    85,    86,    87,    88,    -1,    -1,    91,    -1,    93,    -1,
    95,    96,    97,    98,    -1,   100,   101,    -1,    -1,   104,
   105,   106,   107,   108,    -1,    -1,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    -1,    56,
    57,    -1,    59,    60,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    75,    -1,
    -1,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,    86,
    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,    -1,    -1,    -1,    -1,   106,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,   142,    -1,   144,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,    -1,   144,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,    -1,
    -1,    -1,    -1,   142,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,   142,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,   142,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,   142,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,   142,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,   142,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,   142,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,   142,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
   139,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,    -1,    -1,   139,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,   139,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,   139,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,    -1,    -1,   139,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
    -1,   139,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,   139,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
   139,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,    -1,    -1,   139,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,   139,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,   139,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,    -1,    -1,   139,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
    -1,   139,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,   139,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
   139,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,    -1,    -1,   139,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    -1,   139,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    -1,   139,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,    -1,    -1,   139,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
    -1,   139,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,    -1,    -1,   139,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
   139,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,   137,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,   137,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,   137,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
   137,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,   137,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,   137,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,   137,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
   137,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,   137,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,   137,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,   137,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
   137,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,   137,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,   137,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,   137,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
   137,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,   137,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,   137,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135,    -1,   137,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,    -1,
   137,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
    -1,   137,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
   135,    -1,   137,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
    -1,   135
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 147 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 162 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 163 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 167 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 170 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 171 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 172 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 177 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 181 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 188 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 193 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 208 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 221 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 250 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 257 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 267 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 283 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 285 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 290 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 292 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 297 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 487 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 505 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 516 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 521 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 529 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 536 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 543 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 548 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 556 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 563 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 571 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 579 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-11].l, yyvsp[-8].l, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 52:
#line 586 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 53:
#line 590 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 595 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 55:
#line 603 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 56:
#line 604 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 57:
#line 605 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 58:
#line 606 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 59:
#line 607 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 60:
#line 611 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 61:
#line 612 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 62:
#line 620 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 63:
#line 651 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 64:
#line 690 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 744 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 761 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 67:
#line 779 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 68:
#line 790 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 69:
#line 807 "Gmsh.y"
{ 
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 70:
#line 814 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 71:
#line 828 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 72:
#line 845 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 73:
#line 871 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 74:
#line 898 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 75:
#line 912 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 76:
#line 929 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 77:
#line 943 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 78:
#line 960 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 79:
#line 980 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 80:
#line 1003 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 81:
#line 1013 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 82:
#line 1028 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 83:
#line 1032 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 84:
#line 1044 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if(!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X, v->Pos.Y, v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1066 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1082 "Gmsh.y"
{
 			AttractorField *att = new AttractorField();
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
        double d;
        List_Read(yyvsp[-1].l, i, &d);
        Vertex *v = FindPoint((int)d); 
        if(v)
          att->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
        else{
          GVertex *gv = GMODEL->vertexByTag((int)d);
          if(gv) 
            att->addPoint(gv->x(), gv->y(), gv->z());
        }
      }
      att->buildFastSearchStructures();
      fields.insert(att,(int)yyvsp[-4].d);
    ;
    break;}
case 87:
#line 1099 "Gmsh.y"
{
    double pars[]={0,CTX.lc/10,CTX.lc,CTX.lc/100,CTX.lc/20};
    for (int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      if(i>4)
        yymsg(GERROR,"Too many parameters for Thresold Field (max=5)");
      else
        List_Read(yyvsp[-1].l,i,&pars[i]);
    }
    fields.insert(new ThresholdField(fields.get((int)pars[0]),pars[1],pars[2],pars[3],pars[4]),(int)yyvsp[-4].d);
  ;
    break;}
case 88:
#line 1109 "Gmsh.y"
{
		std::list<Field*> *flist=new std::list<Field*>;
		flist->resize(0);
		for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
			double id;
			List_Read(yyvsp[-1].l, i, &id);
      Field *pfield=fields.get((int)id);
			if(pfield)flist->push_front(pfield);
		}
    fields.insert(new FunctionField(flist,yyvsp[-2].c),(int)yyvsp[-5].d);
  ;
    break;}
case 89:
#line 1120 "Gmsh.y"
{
      fields.insert(new StructuredField(yyvsp[-1].c),(int)yyvsp[-4].d);
 		;
    break;}
case 90:
#line 1123 "Gmsh.y"
{
 			for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
 				double id;
 				List_Read(yyvsp[-1].l, i, &id);
        BGMAddField(fields.get((int)id));
 			}
 		;
    break;}
case 91:
#line 1132 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 1, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *attractor= new AttractorField();
      fields.insert(attractor);
      Field *threshold=new ThresholdField(attractor,pars[0],pars[0]*pars[4],pars[1],pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  attractor->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    attractor->addPoint(gv->x(), gv->y(), gv->z());
	}
      }
      attractor->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 92:
#line 1165 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *att = new AttractorField();
      fields.insert(att);
      Field *threshold=new ThresholdField(att,pars[0],pars[0]*pars[4],pars[1],pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      //tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  att->addCurve(c, (int)pars[3]);
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag((int)d);
	  if(ge){
	    att->addGEdge(ge, (int)pars[3]);
	  }
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 93:
#line 1201 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 94:
#line 1223 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1241 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1259 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1277 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1303 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1321 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1348 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1367 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1391 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1415 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1441 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1458 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1477 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1495 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1534 "Gmsh.y"
{
    myGmshSurface = 0;
  ;
    break;}
case 109:
#line 1539 "Gmsh.y"
{
    myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
  ;
    break;}
case 110:
#line 1544 "Gmsh.y"
{
    int num = (int)yyvsp[-6].d, type = 0;
    myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
  ;
    break;}
case 111:
#line 1550 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 112:
#line 1572 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 113:
#line 1594 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 114:
#line 1610 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 115:
#line 1630 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 116:
#line 1647 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 117:
#line 1664 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1685 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 119:
#line 1690 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 120:
#line 1695 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 121:
#line 1700 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 122:
#line 1707 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 123:
#line 1708 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 124:
#line 1709 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 125:
#line 1714 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 126:
#line 1718 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 127:
#line 1722 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(v){
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GVertex *gv = GMODEL->vertexByTag(TheShape.Num);
	  if(gv){
	    TheShape.Type = MSH_POINT_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown point %d", TheShape.Num);
	}
      }
    ;
    break;}
case 128:
#line 1745 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(c){
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag(TheShape.Num);
	  if(ge){
	    TheShape.Type = MSH_SEGM_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	}
      }
    ;
    break;}
case 129:
#line 1768 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(s){
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GFace *gf = GMODEL->faceByTag(TheShape.Num);
	  if(gf){
	    TheShape.Type = MSH_SURF_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	}
      }
    ;
    break;}
case 130:
#line 1791 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(v){
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GRegion *gr = GMODEL->regionByTag(TheShape.Num);
	  if(gr){
	    TheShape.Type = MSH_VOLUME_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	}
      }
    ;
    break;}
case 131:
#line 1819 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 132:
#line 1831 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 133:
#line 1837 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 134:
#line 1843 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 135:
#line 1855 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 136:
#line 1864 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 137:
#line 1874 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 138:
#line 1890 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 139:
#line 1909 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 140:
#line 1923 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1929 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 142:
#line 1935 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 1944 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 144:
#line 1958 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 145:
#line 2008 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 146:
#line 2023 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) {
    Field *field=new PostViewField(*vv);
    fields.insert(field);
    BGMAddField(field);
  }
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 147:
#line 2038 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 148:
#line 2058 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 149:
#line 2068 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 150:
#line 2090 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 151:
#line 2094 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 152:
#line 2099 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 153:
#line 2104 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 154:
#line 2116 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 155:
#line 2131 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 156:
#line 2147 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 157:
#line 2173 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 158:
#line 2200 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 159:
#line 2232 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 160:
#line 2239 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 161:
#line 2244 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 162:
#line 2250 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 163:
#line 2254 "Gmsh.y"
{
    ;
    break;}
case 164:
#line 2263 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 165:
#line 2271 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 166:
#line 2279 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 167:
#line 2287 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 168:
#line 2291 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 169:
#line 2299 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 170:
#line 2303 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 171:
#line 2311 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 172:
#line 2315 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 173:
#line 2323 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 174:
#line 2327 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 175:
#line 2334 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 176:
#line 2338 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      extr.mesh.ViewIndex = (int)yyvsp[-6].d;
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      extr.mesh.ViewIndex = -1;
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 177:
#line 2350 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 178:
#line 2357 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 179:
#line 2364 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 180:
#line 2371 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 181:
#line 2378 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 182:
#line 2385 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 183:
#line 2392 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 184:
#line 2399 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 185:
#line 2406 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 186:
#line 2413 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 187:
#line 2417 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 188:
#line 2424 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 189:
#line 2428 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 190:
#line 2435 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 191:
#line 2439 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 192:
#line 2446 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 193:
#line 2450 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 194:
#line 2457 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 195:
#line 2461 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 196:
#line 2468 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 197:
#line 2472 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 198:
#line 2479 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 199:
#line 2483 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 200:
#line 2490 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 201:
#line 2494 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 202:
#line 2501 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 203:
#line 2505 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 204:
#line 2516 "Gmsh.y"
{
    ;
    break;}
case 205:
#line 2519 "Gmsh.y"
{
    ;
    break;}
case 206:
#line 2525 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 207:
#line 2534 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 208:
#line 2556 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 209:
#line 2580 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 210:
#line 2584 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	Tree_Add(THEM->Surfaces, &s);
	extr.mesh.Holes[num].first = yyvsp[-1].d;
	extr.mesh.Holes[num].second.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	  double d;
	  List_Read(yyvsp[-3].l, i, &d);
	  extr.mesh.Holes[num].second.push_back((int)d);
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 211:
#line 2608 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 212:
#line 2626 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 213:
#line 2644 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 214:
#line 2662 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 215:
#line 2691 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 216:
#line 2726 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 2731 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 218:
#line 2758 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 219:
#line 2772 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 220:
#line 2791 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 221:
#line 2797 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 222:
#line 2803 "Gmsh.y"
{
    ;
    break;}
case 223:
#line 2806 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 2815 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 225:
#line 2824 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 226:
#line 2825 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 227:
#line 2826 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 228:
#line 2827 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 229:
#line 2828 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 230:
#line 2829 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 231:
#line 2830 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 232:
#line 2831 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 233:
#line 2833 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 234:
#line 2839 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 235:
#line 2840 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 236:
#line 2841 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 237:
#line 2842 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 238:
#line 2843 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 239:
#line 2844 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 240:
#line 2845 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 241:
#line 2846 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 242:
#line 2847 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 243:
#line 2848 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 244:
#line 2849 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 245:
#line 2850 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 246:
#line 2851 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 247:
#line 2852 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 248:
#line 2853 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 249:
#line 2854 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 250:
#line 2855 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 251:
#line 2856 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 252:
#line 2857 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2858 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2859 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2860 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 256:
#line 2861 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2862 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 258:
#line 2863 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2864 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2865 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 261:
#line 2866 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2867 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 263:
#line 2868 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 264:
#line 2869 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 265:
#line 2870 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 266:
#line 2872 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2873 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2874 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 269:
#line 2875 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2876 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 271:
#line 2877 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2878 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2879 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2880 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 275:
#line 2881 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2882 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 277:
#line 2883 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2884 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2885 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2886 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2887 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 282:
#line 2888 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 283:
#line 2889 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 284:
#line 2890 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 285:
#line 2891 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 286:
#line 2892 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 287:
#line 2901 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 288:
#line 2902 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 289:
#line 2903 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 290:
#line 2904 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 291:
#line 2905 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 292:
#line 2906 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 293:
#line 2907 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 294:
#line 2912 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 295:
#line 2928 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 296:
#line 2943 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 297:
#line 2963 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 298:
#line 2977 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 299:
#line 2990 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 300:
#line 3013 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 301:
#line 3031 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 302:
#line 3049 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 303:
#line 3067 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 304:
#line 3085 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 305:
#line 3093 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 306:
#line 3097 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 307:
#line 3101 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 308:
#line 3105 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 309:
#line 3109 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 310:
#line 3116 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 311:
#line 3120 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 312:
#line 3124 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 313:
#line 3128 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 314:
#line 3135 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 315:
#line 3140 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 316:
#line 3148 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 317:
#line 3153 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 318:
#line 3157 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 319:
#line 3162 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 320:
#line 3166 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 321:
#line 3174 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-4].d;
      }
    ;
    break;}
case 322:
#line 3185 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 323:
#line 3193 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-2].d;
      }
    ;
    break;}
case 324:
#line 3201 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 325:
#line 3207 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 326:
#line 3218 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 327:
#line 3238 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 328:
#line 3248 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 329:
#line 3258 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 330:
#line 3268 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 331:
#line 3285 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 332:
#line 3312 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 333:
#line 3317 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 334:
#line 3321 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 335:
#line 3325 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 336:
#line 3338 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 337:
#line 3342 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 338:
#line 3354 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 339:
#line 3361 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 340:
#line 3383 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 341:
#line 3387 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 342:
#line 3402 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 343:
#line 3407 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 344:
#line 3414 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 345:
#line 3418 "Gmsh.y"
{
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 346:
#line 3425 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 347:
#line 3429 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 348:
#line 3437 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 349:
#line 3445 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 350:
#line 3459 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 351:
#line 3473 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 352:
#line 3477 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 353:
#line 3496 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 354:
#line 3518 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3541 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
