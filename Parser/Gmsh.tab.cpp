
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tRotate	315
#define	tTranslate	316
#define	tSymmetry	317
#define	tDilate	318
#define	tExtrude	319
#define	tDuplicata	320
#define	tLoop	321
#define	tRecombine	322
#define	tDelete	323
#define	tCoherence	324
#define	tIntersect	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tCombine	334
#define	tBSpline	335
#define	tBezier	336
#define	tNurbs	337
#define	tOrder	338
#define	tWith	339
#define	tBounds	340
#define	tKnots	341
#define	tColor	342
#define	tColorTable	343
#define	tFor	344
#define	tIn	345
#define	tEndFor	346
#define	tIf	347
#define	tEndIf	348
#define	tExit	349
#define	tReturn	350
#define	tCall	351
#define	tFunction	352
#define	tTrimmed	353
#define	tShow	354
#define	tHide	355
#define	tGetValue	356
#define	tGMSH_MAJOR_VERSION	357
#define	tGMSH_MINOR_VERSION	358
#define	tGMSH_PATCH_VERSION	359
#define	tB_SPLINE_SURFACE_WITH_KNOTS	360
#define	tB_SPLINE_CURVE_WITH_KNOTS	361
#define	tCARTESIAN_POINT	362
#define	tTRUE	363
#define	tFALSE	364
#define	tUNSPECIFIED	365
#define	tU	366
#define	tV	367
#define	tEDGE_CURVE	368
#define	tVERTEX_POINT	369
#define	tORIENTED_EDGE	370
#define	tPLANE	371
#define	tFACE_OUTER_BOUND	372
#define	tEDGE_LOOP	373
#define	tADVANCED_FACE	374
#define	tVECTOR	375
#define	tDIRECTION	376
#define	tAXIS2_PLACEMENT_3D	377
#define	tISO	378
#define	tENDISO	379
#define	tENDSEC	380
#define	tDATA	381
#define	tHEADER	382
#define	tFILE_DESCRIPTION	383
#define	tFILE_SCHEMA	384
#define	tFILE_NAME	385
#define	tMANIFOLD_SOLID_BREP	386
#define	tCLOSED_SHELL	387
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	388
#define	tFACE_BOUND	389
#define	tCYLINDRICAL_SURFACE	390
#define	tCONICAL_SURFACE	391
#define	tCIRCLE	392
#define	tTRIMMED_CURVE	393
#define	tGEOMETRIC_SET	394
#define	tCOMPOSITE_CURVE_SEGMENT	395
#define	tCONTINUOUS	396
#define	tCOMPOSITE_CURVE	397
#define	tTOROIDAL_SURFACE	398
#define	tPRODUCT_DEFINITION	399
#define	tPRODUCT_DEFINITION_SHAPE	400
#define	tSHAPE_DEFINITION_REPRESENTATION	401
#define	tELLIPSE	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.249 2006-01-14 22:32:58 geuzaine Exp $
//
// Copyright (C) 1997-2006 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"
#include "GmshVersion.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 79 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1536
#define	YYFLAG		-32768
#define	YYNTBASE	183

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 254)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,   179,     2,   167,     2,     2,   174,
   175,   165,   163,   180,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   181,     2,   182,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    15,    17,    20,
    23,    26,    29,    32,    40,    46,    64,    74,    98,   130,
   146,   158,   170,   186,   196,   210,   220,   232,   246,   256,
   266,   278,   288,   300,   310,   322,   336,   350,   362,   376,
   394,   404,   416,   428,   442,   454,   464,   465,   468,   470,
   472,   474,   476,   478,   480,   482,   484,   486,   488,   490,
   492,   494,   496,   502,   510,   517,   526,   527,   530,   533,
   536,   539,   542,   544,   548,   550,   554,   555,   556,   567,
   569,   573,   574,   588,   590,   594,   595,   611,   620,   621,
   628,   630,   632,   634,   636,   638,   640,   642,   647,   655,
   665,   672,   676,   683,   690,   700,   707,   717,   723,   732,
   741,   753,   760,   770,   780,   790,   798,   807,   820,   827,
   835,   843,   851,   861,   869,   879,   897,   905,   913,   925,
   934,   947,   956,   965,   974,   987,  1010,  1031,  1040,  1049,
  1058,  1066,  1075,  1081,  1093,  1099,  1109,  1111,  1113,  1115,
  1116,  1119,  1126,  1133,  1140,  1147,  1152,  1159,  1166,  1173,
  1178,  1185,  1189,  1194,  1200,  1204,  1208,  1213,  1218,  1222,
  1230,  1234,  1242,  1246,  1249,  1252,  1268,  1271,  1278,  1287,
  1296,  1307,  1309,  1312,  1314,  1318,  1323,  1325,  1331,  1343,
  1357,  1358,  1366,  1367,  1381,  1382,  1398,  1407,  1416,  1425,
  1438,  1451,  1464,  1479,  1494,  1509,  1510,  1523,  1524,  1537,
  1538,  1551,  1552,  1569,  1570,  1587,  1588,  1605,  1606,  1625,
  1626,  1645,  1646,  1665,  1667,  1670,  1680,  1688,  1691,  1698,
  1708,  1718,  1727,  1737,  1746,  1755,  1762,  1767,  1770,  1773,
  1775,  1777,  1779,  1781,  1783,  1785,  1789,  1792,  1795,  1798,
  1802,  1806,  1810,  1814,  1818,  1822,  1826,  1830,  1834,  1838,
  1842,  1846,  1850,  1854,  1860,  1865,  1870,  1875,  1880,  1885,
  1890,  1895,  1900,  1905,  1910,  1917,  1922,  1927,  1932,  1937,
  1942,  1947,  1954,  1961,  1968,  1973,  1978,  1983,  1988,  1993,
  1998,  2003,  2008,  2013,  2018,  2023,  2030,  2035,  2040,  2045,
  2050,  2055,  2060,  2067,  2074,  2081,  2086,  2088,  2090,  2092,
  2094,  2096,  2098,  2100,  2102,  2107,  2112,  2115,  2121,  2125,
  2132,  2137,  2145,  2152,  2154,  2157,  2160,  2164,  2168,  2180,
  2190,  2198,  2206,  2207,  2211,  2213,  2217,  2218,  2222,  2226,
  2228,  2232,  2234,  2236,  2240,  2245,  2249,  2255,  2260,  2262,
  2264,  2266,  2270,  2275,  2282,  2290,  2292,  2294,  2298,  2302,
  2312,  2320,  2322,  2328,  2332,  2339,  2341,  2345,  2347,  2349,
  2356,  2361,  2366,  2371,  2378,  2385
};

static const short yyrhs[] = {   184,
     0,   189,     0,     1,     6,     0,     0,   184,   185,     0,
   186,     0,   188,     0,   187,     0,   124,     6,     0,   125,
     6,     0,   127,     6,     0,   126,     6,     0,   128,     6,
     0,   129,   174,   243,   180,     5,   175,     6,     0,   130,
   174,   243,   175,     6,     0,   131,   174,     5,   180,     5,
   180,   243,   180,   243,   180,     5,   180,     5,   180,     5,
   175,     6,     0,     3,     7,   108,   174,     5,   180,   241,
   175,     6,     0,     3,     7,   107,   174,     5,   180,   239,
   180,   247,   180,   238,   180,   238,   180,   238,   180,   247,
   180,   247,   180,   238,   175,     6,     0,     3,     7,   106,
   174,     5,   180,   239,   180,   239,   180,   245,   180,   238,
   180,   238,   180,   238,   180,   238,   180,   247,   180,   247,
   180,   247,   180,   247,   180,   238,   175,     6,     0,     3,
     7,   114,   174,     5,   180,     3,   180,     3,   180,     3,
   180,   238,   175,     6,     0,     3,     7,   118,   174,     5,
   180,     3,   180,   238,   175,     6,     0,     3,     7,   135,
   174,     5,   180,     3,   180,   238,   175,     6,     0,     3,
     7,   116,   174,     5,   180,   165,   180,   165,   180,   239,
   180,   238,   175,     6,     0,     3,     7,   119,   174,     5,
   180,   247,   175,     6,     0,     3,     7,   120,   174,     5,
   180,   247,   180,     3,   180,   238,   175,     6,     0,     3,
     7,   115,   174,     5,   180,     3,   175,     6,     0,     3,
     7,   121,   174,     5,   180,     3,   180,   239,   175,     6,
     0,     3,     7,   123,   174,     5,   180,     3,   180,     3,
   180,     3,   175,     6,     0,     3,     7,   122,   174,     5,
   180,   241,   175,     6,     0,     3,     7,   117,   174,     5,
   180,     3,   175,     6,     0,     3,     7,    44,   174,     5,
   180,     3,   180,     3,   175,     6,     0,     3,     7,   133,
   174,     5,   180,   247,   175,     6,     0,     3,     7,   134,
   174,     5,   180,   247,   180,     3,   175,     6,     0,     3,
     7,   132,   174,     5,   180,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   180,     3,   180,   239,   175,     6,
     0,     3,     7,   137,   174,     5,   180,     3,   180,   239,
   180,   239,   175,     6,     0,     3,     7,   144,   174,     5,
   180,     3,   180,   239,   180,   239,   175,     6,     0,     3,
     7,   138,   174,     5,   180,     3,   180,   239,   175,     6,
     0,     3,     7,   148,   174,     5,   180,     3,   180,   239,
   180,   239,   175,     6,     0,     3,     7,   139,   174,     5,
   180,     3,   180,   247,   180,   247,   180,   238,   180,   238,
   175,     6,     0,     3,     7,   140,   174,     5,   180,   247,
   175,     6,     0,     3,     7,   141,   174,   142,   180,   238,
   180,     3,   175,     6,     0,     3,     7,   143,   174,     5,
   180,   247,   180,   238,   175,     6,     0,     3,     7,   145,
   174,     5,   180,     5,   180,     3,   180,     3,   175,     6,
     0,     3,     7,   146,   174,     5,   180,     5,   180,     3,
   175,     6,     0,     3,     7,   147,   174,     3,   180,     3,
   175,     6,     0,     0,   189,   190,     0,   192,     0,   191,
     0,   210,     0,   211,     0,   212,     0,   215,     0,   216,
     0,   217,     0,   218,     0,   221,     0,   236,     0,   237,
     0,   220,     0,   219,     0,    33,   174,     5,   175,     6,
     0,    33,   174,     5,   180,   249,   175,     6,     0,     4,
     5,   181,   193,   182,     6,     0,     4,     5,     4,   241,
   181,   193,   182,     6,     0,     0,   193,   196,     0,   193,
   200,     0,   193,   203,     0,   193,   205,     0,   193,   206,
     0,   239,     0,   194,   180,   239,     0,   239,     0,   195,
   180,   239,     0,     0,     0,     4,   197,   174,   194,   175,
   198,   181,   195,   182,     6,     0,   253,     0,   199,   180,
   253,     0,     0,    76,   174,   239,   180,   239,   180,   239,
   175,   201,   181,   199,   182,     6,     0,   253,     0,   202,
   180,   253,     0,     0,    77,   174,   239,   180,   239,   180,
   239,   180,   239,   175,   204,   181,   202,   182,     6,     0,
    78,   181,   246,   182,   181,   246,   182,     6,     0,     0,
    79,   207,   181,   195,   182,     6,     0,     7,     0,   149,
     0,   150,     0,   151,     0,   152,     0,   170,     0,   171,
     0,     4,   208,   239,     6,     0,     4,   176,   239,   177,
   208,   239,     6,     0,     4,   176,   181,   249,   182,   177,
   208,   247,     6,     0,     4,   176,   177,     7,   247,     6,
     0,     4,   209,     6,     0,     4,   176,   239,   177,   209,
     6,     0,     4,   178,     4,     7,   253,     6,     0,     4,
   176,   239,   177,   178,     4,     7,   253,     6,     0,     4,
   178,     4,   208,   239,     6,     0,     4,   176,   239,   177,
   178,     4,   208,   239,     6,     0,     4,   178,     4,   209,
     6,     0,     4,   176,   239,   177,   178,     4,   209,     6,
     0,     4,   178,    88,   178,     4,     7,   250,     6,     0,
     4,   176,   239,   177,   178,    88,   178,     4,     7,   250,
     6,     0,     4,   178,    89,     7,   251,     6,     0,     4,
   176,   239,   177,   178,    89,     7,   251,     6,     0,    60,
   174,     4,   175,   178,     4,     7,   239,     6,     0,    60,
   174,     4,   175,   178,     4,     7,   253,     6,     0,    41,
   174,   239,   175,     7,   241,     6,     0,    56,    41,   174,
   239,   175,     7,   247,     6,     0,    72,    41,   247,     7,
   181,   239,   180,   239,   180,   239,   182,     6,     0,    48,
    49,   247,     7,   239,     6,     0,    44,   174,   239,   175,
     7,   247,     6,     0,    46,   174,   239,   175,     7,   247,
     6,     0,    42,   174,   239,   175,     7,   247,     6,     0,
    42,   174,   239,   175,     7,   247,    52,   241,     6,     0,
    43,   174,   239,   175,     7,   247,     6,     0,    43,   174,
   239,   175,     7,   247,    52,   241,     6,     0,    50,   174,
   239,   175,     7,   181,   239,   180,   239,   180,     5,   180,
     5,   180,     5,   182,     6,     0,    81,   174,   239,   175,
     7,   247,     6,     0,    82,   174,   239,   175,     7,   247,
     6,     0,    83,   174,   239,   175,     7,   247,    87,   247,
    84,   239,     6,     0,    44,    67,   174,   239,   175,     7,
   247,     6,     0,    72,    44,   247,     7,   181,   239,   180,
   239,   180,   239,   182,     6,     0,    56,    44,   174,   239,
   175,     7,   247,     6,     0,    52,    45,   174,   239,   175,
     7,   247,     6,     0,    53,    45,   174,   239,   175,     7,
   247,     6,     0,    99,    45,   174,   239,   175,     7,   181,
   239,   180,   247,   182,     6,     0,    83,    45,    85,    86,
   174,   239,   175,     7,   245,    87,   181,   247,   180,   247,
   182,    84,   181,   239,   180,   239,   182,     6,     0,    83,
    45,   174,   239,   175,     7,   245,    87,   181,   247,   180,
   247,   182,    84,   181,   239,   180,   239,   182,     6,     0,
    45,    67,   174,   239,   175,     7,   247,     6,     0,    56,
    45,   174,   239,   175,     7,   247,     6,     0,    55,    47,
   174,   239,   175,     7,   247,     6,     0,    47,   174,   239,
   175,     7,   247,     6,     0,    56,    47,   174,   239,   175,
     7,   247,     6,     0,    62,   241,   181,   213,   182,     0,
    61,   181,   241,   180,   241,   180,   239,   182,   181,   213,
   182,     0,    63,   241,   181,   213,   182,     0,    64,   181,
   241,   180,   239,   182,   181,   213,   182,     0,   215,     0,
   214,     0,   212,     0,     0,   214,   211,     0,   214,    41,
   181,   249,   182,     6,     0,   214,    44,   181,   249,   182,
     6,     0,   214,    45,   181,   249,   182,     6,     0,   214,
    47,   181,   249,   182,     6,     0,    66,   181,   214,   182,
     0,    66,     4,   176,   239,   177,     6,     0,    74,     4,
   176,   239,   177,     6,     0,    75,     4,   176,   239,   177,
     6,     0,    69,   181,   214,   182,     0,    69,     4,   176,
   239,   177,     6,     0,    69,     4,     6,     0,    69,     4,
     4,     6,     0,    88,   250,   181,   214,   182,     0,   100,
   253,     6,     0,   101,   253,     6,     0,   100,   181,   214,
   182,     0,   101,   181,   214,   182,     0,     4,   253,     6,
     0,     4,     4,   176,   239,   177,   253,     6,     0,     4,
   239,     6,     0,    60,   174,     4,   175,   178,     4,     6,
     0,    80,     4,     6,     0,    95,     6,     0,    38,     6,
     0,    38,   181,   239,   180,   239,   180,   239,   180,   239,
   180,   239,   180,   239,   182,     6,     0,    39,     6,     0,
    90,   174,   239,     8,   239,   175,     0,    90,   174,   239,
     8,   239,     8,   239,   175,     0,    90,     4,    91,   181,
   239,     8,   239,   182,     0,    90,     4,    91,   181,   239,
     8,   239,     8,   239,   182,     0,    92,     0,    98,     4,
     0,    96,     0,    97,     4,     6,     0,    93,   174,   239,
   175,     0,    94,     0,    65,   241,   181,   214,   182,     0,
    65,   181,   241,   180,   241,   180,   239,   182,   181,   214,
   182,     0,    65,   181,   241,   180,   241,   180,   241,   180,
   239,   182,   181,   214,   182,     0,     0,    65,   241,   181,
   214,   222,   234,   182,     0,     0,    65,   181,   241,   180,
   241,   180,   239,   182,   181,   214,   223,   234,   182,     0,
     0,    65,   181,   241,   180,   241,   180,   241,   180,   239,
   182,   181,   214,   224,   234,   182,     0,    65,    41,   181,
   239,   180,   241,   182,     6,     0,    65,    44,   181,   239,
   180,   241,   182,     6,     0,    65,    45,   181,   239,   180,
   241,   182,     6,     0,    65,    41,   181,   239,   180,   241,
   180,   241,   180,   239,   182,     6,     0,    65,    44,   181,
   239,   180,   241,   180,   241,   180,   239,   182,     6,     0,
    65,    45,   181,   239,   180,   241,   180,   241,   180,   239,
   182,     6,     0,    65,    41,   181,   239,   180,   241,   180,
   241,   180,   241,   180,   239,   182,     6,     0,    65,    44,
   181,   239,   180,   241,   180,   241,   180,   241,   180,   239,
   182,     6,     0,    65,    45,   181,   239,   180,   241,   180,
   241,   180,   241,   180,   239,   182,     6,     0,     0,    65,
    41,   181,   239,   180,   241,   182,   225,   181,   234,   182,
     6,     0,     0,    65,    44,   181,   239,   180,   241,   182,
   226,   181,   234,   182,     6,     0,     0,    65,    45,   181,
   239,   180,   241,   182,   227,   181,   234,   182,     6,     0,
     0,    65,    41,   181,   239,   180,   241,   180,   241,   180,
   239,   182,   228,   181,   234,   182,     6,     0,     0,    65,
    44,   181,   239,   180,   241,   180,   241,   180,   239,   182,
   229,   181,   234,   182,     6,     0,     0,    65,    45,   181,
   239,   180,   241,   180,   241,   180,   239,   182,   230,   181,
   234,   182,     6,     0,     0,    65,    41,   181,   239,   180,
   241,   180,   241,   180,   241,   180,   239,   182,   231,   181,
   234,   182,     6,     0,     0,    65,    44,   181,   239,   180,
   241,   180,   241,   180,   241,   180,   239,   182,   232,   181,
   234,   182,     6,     0,     0,    65,    45,   181,   239,   180,
   241,   180,   241,   180,   241,   180,   239,   182,   233,   181,
   234,   182,     6,     0,   235,     0,   234,   235,     0,    73,
   181,   247,   180,   247,   180,   247,   182,     6,     0,    73,
   181,   247,   180,   247,   182,     6,     0,    68,     6,     0,
    54,    44,   247,     7,   239,     6,     0,    54,    44,   247,
     7,   239,    57,    59,   239,     6,     0,    54,    44,   247,
     7,   239,    57,    58,   239,     6,     0,    54,    45,   181,
   239,   182,     7,   247,     6,     0,    54,    45,   181,   239,
   182,     7,   247,     4,     6,     0,    51,    45,   181,   239,
   182,     7,   247,     6,     0,    54,    47,   181,   239,   182,
     7,   247,     6,     0,    68,    45,   247,     7,   239,     6,
     0,    68,    45,   247,     6,     0,    70,     6,     0,    71,
     6,     0,   109,     0,   110,     0,   111,     0,   112,     0,
   113,     0,   240,     0,   174,   239,   175,     0,   164,   239,
     0,   163,   239,     0,   169,   239,     0,   239,   164,   239,
     0,   239,   163,   239,     0,   239,   165,   239,     0,   239,
   166,   239,     0,   239,   167,   239,     0,   239,   173,   239,
     0,   239,   159,   239,     0,   239,   161,   239,     0,   239,
   160,   239,     0,   239,   162,   239,     0,   239,   156,   239,
     0,   239,   157,   239,     0,   239,   155,   239,     0,   239,
   154,   239,     0,   239,   153,   239,     8,   239,     0,    12,
   174,   239,   175,     0,    13,   174,   239,   175,     0,    14,
   174,   239,   175,     0,    15,   174,   239,   175,     0,    16,
   174,   239,   175,     0,    17,   174,   239,   175,     0,    18,
   174,   239,   175,     0,    19,   174,   239,   175,     0,    20,
   174,   239,   175,     0,    22,   174,   239,   175,     0,    23,
   174,   239,   180,   239,   175,     0,    24,   174,   239,   175,
     0,    25,   174,   239,   175,     0,    26,   174,   239,   175,
     0,    27,   174,   239,   175,     0,    28,   174,   239,   175,
     0,    29,   174,   239,   175,     0,    30,   174,   239,   180,
   239,   175,     0,    31,   174,   239,   180,   239,   175,     0,
    32,   174,   239,   180,   239,   175,     0,    21,   174,   239,
   175,     0,    12,   176,   239,   177,     0,    13,   176,   239,
   177,     0,    14,   176,   239,   177,     0,    15,   176,   239,
   177,     0,    16,   176,   239,   177,     0,    17,   176,   239,
   177,     0,    18,   176,   239,   177,     0,    19,   176,   239,
   177,     0,    20,   176,   239,   177,     0,    22,   176,   239,
   177,     0,    23,   176,   239,   180,   239,   177,     0,    24,
   176,   239,   177,     0,    25,   176,   239,   177,     0,    26,
   176,   239,   177,     0,    27,   176,   239,   177,     0,    28,
   176,   239,   177,     0,    29,   176,   239,   177,     0,    30,
   176,   239,   180,   239,   177,     0,    31,   176,   239,   180,
   239,   177,     0,    32,   176,   239,   180,   239,   177,     0,
    21,   176,   239,   177,     0,     3,     0,     9,     0,    10,
     0,    11,     0,   103,     0,   104,     0,   105,     0,     4,
     0,     4,   176,   239,   177,     0,   179,     4,   176,   177,
     0,     4,   209,     0,     4,   176,   239,   177,   209,     0,
     4,   178,     4,     0,     4,   176,   239,   177,   178,     4,
     0,     4,   178,     4,   209,     0,     4,   176,   239,   177,
   178,     4,   209,     0,   102,   174,     5,   180,   239,   175,
     0,   242,     0,   164,   241,     0,   163,   241,     0,   241,
   164,   241,     0,   241,   163,   241,     0,   181,   239,   180,
   239,   180,   239,   180,   239,   180,   239,   182,     0,   181,
   239,   180,   239,   180,   239,   180,   239,   182,     0,   181,
   239,   180,   239,   180,   239,   182,     0,   174,   239,   180,
   239,   180,   239,   175,     0,     0,   174,   244,   175,     0,
     5,     0,   244,   180,     5,     0,     0,   181,   246,   182,
     0,   174,   246,   175,     0,   247,     0,   246,   180,   247,
     0,   239,     0,   248,     0,   181,   249,   182,     0,   164,
   181,   249,   182,     0,   239,     8,   239,     0,   239,     8,
   239,     8,   239,     0,    41,   181,   239,   182,     0,   212,
     0,   215,     0,   221,     0,     4,   176,   177,     0,   164,
     4,   176,   177,     0,     4,   176,   181,   249,   182,   177,
     0,   164,     4,   176,   181,   249,   182,   177,     0,   239,
     0,   248,     0,   249,   180,   239,     0,   249,   180,   248,
     0,   181,   239,   180,   239,   180,   239,   180,   239,   182,
     0,   181,   239,   180,   239,   180,   239,   182,     0,     4,
     0,     4,   178,    88,   178,     4,     0,   181,   252,   182,
     0,     4,   176,   239,   177,   178,    89,     0,   250,     0,
   252,   180,   250,     0,     5,     0,    40,     0,    35,   174,
   253,   180,   253,   175,     0,    36,   174,   253,   175,     0,
    37,   174,   253,   175,     0,    34,   174,   253,   175,     0,
    34,   174,   253,   180,   249,   175,     0,    34,   174,     4,
   178,     4,   175,     0,    34,   174,     4,   176,   239,   177,
   178,     4,   175,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   157,   159,   160,   170,   172,   175,   177,   178,   181,   187,
   192,   193,   194,   197,   201,   204,   210,   215,   221,   229,
   234,   238,   244,   249,   253,   258,   262,   265,   270,   274,
   278,   282,   287,   291,   294,   298,   302,   306,   310,   314,
   318,   321,   325,   328,   332,   335,   342,   344,   347,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   364,   370,   387,   395,   404,   412,   413,   414,
   415,   416,   419,   422,   426,   429,   433,   624,   642,   652,
   658,   665,   673,   679,   685,   692,   700,   706,   714,   719,
   726,   728,   729,   730,   731,   734,   736,   739,   774,   813,
   867,   884,   895,   914,   928,   945,   971,   998,  1012,  1029,
  1043,  1060,  1080,  1103,  1113,  1128,  1148,  1164,  1183,  1202,
  1220,  1238,  1256,  1282,  1300,  1326,  1346,  1370,  1394,  1420,
  1437,  1455,  1474,  1493,  1532,  1557,  1576,  1595,  1611,  1631,
  1648,  1665,  1685,  1691,  1696,  1701,  1708,  1710,  1711,  1714,
  1719,  1723,  1739,  1755,  1771,  1791,  1806,  1812,  1818,  1829,
  1839,  1849,  1863,  1881,  1895,  1904,  1910,  1921,  1934,  1979,
  1994,  2010,  2020,  2042,  2046,  2051,  2056,  2067,  2084,  2100,
  2126,  2153,  2185,  2192,  2197,  2203,  2207,  2215,  2224,  2232,
  2240,  2245,  2253,  2258,  2266,  2271,  2281,  2288,  2295,  2302,
  2309,  2316,  2323,  2330,  2337,  2344,  2349,  2356,  2361,  2368,
  2373,  2380,  2385,  2392,  2397,  2404,  2409,  2416,  2421,  2428,
  2433,  2440,  2445,  2455,  2459,  2464,  2491,  2515,  2523,  2542,
  2560,  2578,  2607,  2642,  2669,  2696,  2710,  2728,  2733,  2742,
  2744,  2745,  2746,  2747,  2750,  2752,  2753,  2754,  2755,  2756,
  2757,  2758,  2759,  2766,  2767,  2768,  2769,  2770,  2771,  2772,
  2773,  2774,  2775,  2776,  2777,  2778,  2779,  2780,  2781,  2782,
  2783,  2784,  2785,  2786,  2787,  2788,  2789,  2790,  2791,  2792,
  2793,  2794,  2795,  2796,  2797,  2799,  2800,  2801,  2802,  2803,
  2804,  2805,  2806,  2807,  2808,  2809,  2810,  2811,  2812,  2813,
  2814,  2815,  2816,  2817,  2818,  2819,  2824,  2829,  2830,  2831,
  2832,  2833,  2834,  2838,  2851,  2871,  2885,  2898,  2921,  2939,
  2957,  2975,  2993,  3000,  3005,  3009,  3013,  3017,  3023,  3028,
  3032,  3036,  3042,  3046,  3051,  3055,  3060,  3064,  3068,  3074,
  3080,  3087,  3093,  3097,  3101,  3112,  3119,  3130,  3150,  3160,
  3170,  3180,  3197,  3216,  3240,  3268,  3274,  3278,  3282,  3294,
  3299,  3311,  3318,  3339,  3344,  3358,  3364,  3370,  3375,  3383,
  3391,  3405,  3419,  3423,  3442,  3464
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"'#'","','","'{'","'}'","All","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View",
"Views","ElementCoords","ElementValues","Element","@1","@2","Text2DValues","Text2D",
"@3","Text3DValues","Text3D","@4","InterpolationMatrix","Time","@5","NumericAffectation",
"NumericIncrement","Affectation","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Colorify","Visibility","Command","Loop","Extrude","@6",
"@7","@8","@9","@10","@11","@12","@13","@14","@15","@16","@17","ExtrudeParameters",
"ExtrudeParameter","Transfinite","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   183,   183,   183,   184,   184,   185,   185,   185,   186,   186,
   186,   186,   186,   187,   187,   187,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   189,   189,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   191,   191,   192,   192,   193,   193,   193,   193,
   193,   193,   194,   194,   195,   195,   197,   198,   196,   199,
   199,   201,   200,   202,   202,   204,   203,   205,   207,   206,
   208,   208,   208,   208,   208,   209,   209,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   212,   212,   212,   212,   213,   213,   213,   214,
   214,   214,   214,   214,   214,   215,   215,   215,   215,   216,
   216,   216,   216,   217,   218,   218,   218,   218,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   221,   221,   221,
   222,   221,   223,   221,   224,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   225,   221,   226,   221,   227,
   221,   228,   221,   229,   221,   230,   221,   231,   221,   232,
   221,   233,   221,   234,   234,   235,   235,   235,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   237,   237,   238,
   238,   238,   238,   238,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   241,   241,   241,   241,   241,   242,   242,
   242,   242,   243,   243,   244,   244,   245,   245,   245,   246,
   246,   247,   247,   247,   247,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   249,   249,   249,   249,   250,
   250,   250,   250,   251,   251,   252,   252,   253,   253,   253,
   253,   253,   253,   253,   253,   253
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     1,     1,     2,     2,
     2,     2,     2,     7,     5,    17,     9,    23,    31,    15,
    11,    11,    15,     9,    13,     9,    11,    13,     9,     9,
    11,     9,    11,     9,    11,    13,    13,    11,    13,    17,
     9,    11,    11,    13,    11,     9,     0,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     5,     7,     6,     8,     0,     2,     2,     2,
     2,     2,     1,     3,     1,     3,     0,     0,    10,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     0,     6,
     1,     1,     1,     1,     1,     1,     1,     4,     7,     9,
     6,     3,     6,     6,     9,     6,     9,     5,     8,     8,
    11,     6,     9,     9,     9,     7,     8,    12,     6,     7,
     7,     7,     9,     7,     9,    17,     7,     7,    11,     8,
    12,     8,     8,     8,    12,    22,    20,     8,     8,     8,
     7,     8,     5,    11,     5,     9,     1,     1,     1,     0,
     2,     6,     6,     6,     6,     4,     6,     6,     6,     4,
     6,     3,     4,     5,     3,     3,     4,     4,     3,     7,
     3,     7,     3,     2,     2,    15,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     5,    11,    13,
     0,     7,     0,    13,     0,    15,     8,     8,     8,    12,
    12,    12,    14,    14,    14,     0,    12,     0,    12,     0,
    12,     0,    16,     0,    16,     0,    16,     0,    18,     0,
    18,     0,    18,     1,     2,     9,     7,     2,     6,     9,
     9,     8,     9,     8,     8,     6,     4,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     4,     2,     5,     3,     6,
     4,     7,     6,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     1,     1,     3,     4,     3,     5,     4,     1,     1,
     1,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     1,     6,
     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     3,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,     6,     8,     7,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   187,     0,
   184,     0,     0,     0,     0,     0,    48,    50,    49,    51,
    52,    53,    54,    55,    56,    57,    62,    61,    58,    59,
    60,     0,     9,    10,    12,    11,    13,   333,   333,     0,
   307,   314,   368,    91,   308,   309,   310,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   369,     0,   311,   312,   313,    92,    93,    94,
    95,     0,     0,     0,    96,    97,     0,     0,     0,     0,
     0,     0,     0,   245,     0,     0,   175,     0,   177,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   324,     0,     0,
     0,     0,     0,     0,     0,     0,   150,     0,     0,   150,
   238,   239,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   362,     0,     0,     0,     0,     0,   174,     0,   183,
     0,   368,   150,     0,   150,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   317,     0,    67,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   314,   248,   247,   249,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   102,   171,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   169,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   314,     0,     0,     0,   349,   350,   351,
   342,     0,   343,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   326,   325,     0,
     0,     0,     0,   150,   150,     0,     0,     0,     0,     0,
     0,     0,     0,   150,     0,     0,     0,     0,   162,     0,
     0,     0,     0,     0,     0,   173,     0,     0,     0,     0,
     0,     0,     0,   150,     0,     0,     0,   185,     0,     0,
   165,     0,   166,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   335,     0,     0,     0,     0,     0,   319,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   246,     0,     0,   356,   357,     0,     0,    91,     0,
     0,     0,     0,     0,    98,     0,   263,   262,   260,   261,
   256,   258,   257,   259,   251,   250,   252,   253,   254,   255,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   314,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   328,   327,   149,     0,   148,   147,
     0,     0,     0,     0,     0,     0,     0,   191,     0,     0,
     0,     0,     0,   156,   151,   237,     0,   163,     0,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   186,     0,   167,   168,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   334,     0,
     0,    15,     0,   315,   321,    67,    77,     0,     0,     0,
    89,     0,    68,    69,    70,    71,    72,   265,   286,   266,
   287,   267,   288,   268,   289,   269,   290,   270,   291,   271,
   292,   272,   293,   273,   294,   285,   306,   274,   295,     0,
     0,   276,   297,   277,   298,   278,   299,   279,   300,   280,
   301,   281,   302,     0,     0,     0,     0,     0,     0,     0,
     0,   373,     0,     0,   371,   372,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   108,     0,     0,     0,
     0,   316,     0,    63,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   352,     0,     0,     0,     0,   344,
   346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,   145,
     0,     0,     0,     0,     0,   188,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   164,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   336,
     0,   333,     0,   318,     0,     0,     0,     0,     0,     0,
     0,    65,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   315,   101,   358,   359,     0,
     0,     0,     0,     0,   103,   104,   106,     0,     0,   366,
     0,   112,   264,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   348,   353,     0,   345,     0,   119,
     0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   224,   157,     0,     0,     0,
     0,   236,   161,     0,     0,   158,   159,     0,     0,     0,
   337,     0,   363,     0,     0,     0,   178,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   240,   241,   242,   243,   244,     0,     0,     0,     0,
     0,     0,     0,    14,     0,   320,   170,     0,     0,     0,
     0,     0,   340,     0,   275,   296,   282,   303,   283,   304,
   284,   305,     0,   375,   374,   370,   323,     0,    91,     0,
     0,     0,     0,    99,     0,     0,     0,   364,    64,     0,
   116,   122,     0,   124,     0,     0,   120,     0,   121,   141,
     0,     0,   347,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   172,     0,     0,     0,
     0,   150,     0,   206,     0,   208,     0,   210,     0,     0,
   228,     0,   192,   225,     0,     0,     0,     0,     0,     0,
   127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   333,   322,    66,     0,    73,     0,     0,     0,     0,
     0,    75,     0,     0,     0,     0,   109,     0,     0,   110,
     0,   367,     0,     0,     0,   130,   138,   354,     0,     0,
   234,   133,   134,     0,     0,     0,   232,   235,   140,   117,
   132,   139,   142,     0,     0,     0,   332,     0,   331,     0,
     0,   197,     0,     0,   198,     0,     0,   199,     0,     0,
     0,     0,   152,   153,   154,   155,     0,     0,   337,     0,
     0,     0,     0,     0,   361,     0,   180,   179,     0,     0,
     0,     0,    17,     0,    26,     0,    30,     0,    24,     0,
     0,    29,     0,    34,    32,     0,     0,     0,     0,     0,
     0,    41,     0,     0,     0,     0,     0,    46,     0,     0,
    78,     0,     0,     0,   341,     0,     0,     0,     0,   100,
   105,   107,     0,   113,     0,     0,   123,   125,   355,     0,
   231,   230,   233,   114,   115,   150,     0,   146,     0,     0,
     0,     0,     0,     0,   150,     0,     0,     0,     0,     0,
   339,   338,     0,     0,     0,     0,     0,     0,   337,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    74,     0,     0,     0,    76,    90,   376,     0,   365,     0,
     0,     0,     0,   330,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   193,     0,     0,     0,     0,     0,     0,
     0,   360,   181,     0,    31,     0,     0,     0,     0,    21,
     0,    27,     0,    33,    22,    35,     0,    38,     0,    42,
    43,     0,     0,    45,     0,     0,     0,     0,     0,     0,
   111,     0,     0,   144,     0,   212,     0,     0,   214,     0,
     0,   216,     0,     0,   189,     0,   150,     0,     0,     0,
     0,     0,     0,   129,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
    88,     0,     0,   329,   200,     0,     0,   207,   201,     0,
     0,   209,   202,     0,     0,   211,     0,   195,     0,   227,
   118,   131,     0,     0,   135,     0,     0,     0,     0,    25,
    28,    36,     0,    37,    44,    39,     0,     0,     0,     0,
     0,     0,     0,   218,     0,   220,     0,   222,   194,   190,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    79,     0,    86,     0,     0,     0,   203,     0,     0,   204,
     0,     0,   205,     0,     0,   226,     0,     0,     0,     0,
    20,    23,     0,     0,     0,    80,     0,   176,     0,     0,
     0,     0,     0,     0,     0,   196,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   213,     0,   215,     0,
   217,     0,     0,     0,     0,     0,    40,    16,    81,    83,
     0,    84,   126,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   219,   221,   223,     0,     0,     0,     0,    85,
    87,     0,     0,     0,     0,     0,   137,     0,     0,     0,
     0,     0,   136,     0,    18,     0,     0,     0,     0,     0,
     0,     0,    19,     0,     0,     0
};

static const short yydefgoto[] = {  1534,
     2,    14,    15,    16,    17,     3,    67,    68,    69,   452,
  1095,  1101,   653,   827,  1270,  1455,   654,  1409,  1491,   655,
  1457,   656,   657,   831,   141,   253,    70,   585,   348,   568,
   569,   349,    74,    75,    76,    77,    78,   350,   767,  1346,
  1421,  1143,  1146,  1149,  1376,  1380,  1384,  1438,  1441,  1444,
   905,   906,    80,    81,   957,   351,   144,   368,   178,   248,
   445,  1056,   972,   973,   353,   507,   204,   721,   861,   145
};

static const short yypact[] = {  2531,
    37,    43,  2680,-32768,    50,    76,    91,   106,   115,   131,
   -66,   -25,   -15,-32768,-32768,-32768,-32768,  1768,     5,     9,
   185,    42,    54,    58,   -19,   145,   109,   125,   171,   153,
   179,   235,   295,    27,   302,   458,   191,   194,   -96,   -96,
   224,   396,     1,   367,    13,   414,   441,   102,   461,   478,
   489,   334,   364,   -22,    16,    31,-32768,   369,-32768,   543,
-32768,   558,   562,   537,    19,    26,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2560,-32768,-32768,-32768,-32768,-32768,   413,   413,   448,
-32768,   280,    17,-32768,-32768,-32768,-32768,  -125,   -45,   182,
   270,   352,   387,   447,   453,   482,   493,   499,   510,   514,
   517,   526,   530,   541,   549,   550,   585,   586,   418,   428,
   433,   457,-32768,   472,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2013,  2013,  2013,-32768,-32768,  2013,  1445,   141,   571,
  2013,   629,   825,-32768,   643,   655,-32768,  2013,-32768,  2013,
  2013,  2013,   487,  2013,   492,  2013,  2013,  1272,  2013,   471,
   500,   513,  1272,   520,   531,   533,   545,   556,   557,   566,
   690,   -96,   -96,   -96,  2013,  2013,   -87,-32768,   -57,   -96,
   569,   575,   583,  1665,   -53,   591,-32768,  1272,    28,-32768,
-32768,-32768,  1272,  1272,   608,   625,   765,  2013,  2013,   -48,
  2013,   624,  2013,   640,   716,  2013,  2013,-32768,   829,-32768,
   671,-32768,-32768,   847,-32768,   851,   686,   694,   702,   711,
   731,   736,   737,   738,   739,   740,   741,   742,   743,   744,
   745,   747,   748,   749,   750,   752,   753,   758,   759,   760,
   761,   762,   763,   764,   766,   767,   859,   695,   770,   768,
  2013,   861,-32768,   -96,-32768,  2013,  2013,  2013,  2013,  2013,
  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,
  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,
  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,
  2013,  2013,  2013,  2013,  2013,  2013,  2013,   381,   476,   476,
   476,   934,   463,   769,   769,   769,  4946,   939,  1945,  4196,
   278,   771,   943,   777,   860,-32768,-32768,  2013,  2013,  2013,
  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,  2013,
  2013,  2013,-32768,   -80,  3250,  4969,  4992,  5015,  2013,  5038,
  2013,  5061,  5084,   477,   773,  1721,  1945,-32768,-32768,-32768,
  1828,   948,-32768,  5107,  2013,  2013,  2013,   950,  2013,  2013,
  2013,  2013,  2013,  2013,  2013,   783,   155,-32768,-32768,  3272,
  3294,   -96,   -96,   647,   647,   327,  2013,  2013,  2013,  1665,
  1665,  2013,   337,-32768,  2013,   848,   169,   953,-32768,  2013,
  2236,   954,   955,  2013,  2013,-32768,  5130,  5153,   874,  2013,
  5176,   875,  3316,-32768,   784,  1937,  5199,-32768,  2013,  2257,
-32768,  2305,-32768,   961,   964,   965,   966,   968,   969,   970,
   971,   972,   978,   988,   989,   990,   991,   992,   994,   998,
   999,  1000,  1001,  1002,  1003,  1006,   870,  1013,  1023,  1024,
  1029,  1032,  1034,-32768,    39,  1035,  1031,  1036,  4221,   217,
   -16,    10,  5222,  4246,  5245,  4271,  5268,  4296,  5291,  4321,
  5314,  4346,  5337,  4371,  5360,  4396,  5383,  4421,  5406,  4446,
  5429,  4471,  5452,  4496,  3338,  3360,  5475,  4521,  5498,  4546,
  5521,  4571,  5544,  4596,  5567,  4621,  5590,  4646,  3382,  3404,
  3426,  3448,  3470,  3492,   379,   150,   787,   867,   872,   868,
  2013,-32768,  1272,  2220,  1828,-32768,   590,   219,   476,  2013,
  1043,  1046,    18,   876,-32768,  1972,   449,  1014,   582,   582,
   685,   685,   685,   685,   258,   258,   769,   769,   769,   769,
  1045,  1945,  2013,  1047,  1049,  1050,  5613,  1051,  5636,  1052,
  1053,  1486,  2013,   494,  1945,   595,  2013,  2013,  1054,  2043,
  5659,  5682,  2013,  2481,  2742,  5705,  5728,  5751,  5774,  5797,
   887,   -96,  2013,  2013,-32768,-32768,-32768,   884,  2741,-32768,
   885,  2013,  3514,  3536,  3558,  3222,   -96,  2326,  4671,   -21,
   -39,   -37,    29,-32768,-32768,-32768,  2013,-32768,  4696,-32768,
   871,   889,  4721,  4746,  1061,  1064,   898,  5820,  1068,   899,
  2013,  2385,  2013,  2013,-32768,  5843,-32768,-32768,   901,   903,
   904,   905,   906,   907,   909,   910,   911,   913,   914,   916,
   917,   918,   919,   920,   921,   923,   924,   925,   926,   928,
   929,   930,   931,   932,   933,   951,   952,   956,-32768,  1109,
   959,-32768,   957,   317,-32768,-32768,-32768,   967,   980,   949,
-32768,  1132,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2013,
  2013,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2013,  2013,  2013,  2013,  2013,  2013,  2013,
  1135,-32768,  1945,   476,-32768,-32768,  2013,  4771,  1134,  1945,
   987,   285,  2013,  1136,  1137,   962,-32768,  1138,  1007,    16,
  1159,-32768,  2013,-32768,   151,  3580,   -96,  1272,  1272,  1160,
  1272,  1161,  1272,  1272,-32768,  1945,  2766,  1542,   596,-32768,
  2005,   996,   963,  1165,  1175,  1178,   626,  1179,  1181,  1183,
  1184,  1185,  1187,  1188,  1162,   359,  3602,  3624,-32768,-32768,
  2790,   -96,   -96,   -96,   368,-32768,   282,  1190,  1945,  1945,
  1945,  1945,  1225,  1193,  2013,  2013,  1194,  1195,  1272,  1272,
  2013,  1196,  1272,  1198,  3646,-32768,  2103,   663,  1197,  1202,
  2013,  2013,   -96,  1203,  1204,  1044,  1205,  1207,  1272,  1272,
  1209,   -96,  1211,  1213,  1272,  1272,  1214,  1215,  1216,  1219,
  1220,  1272,   486,  1272,  1221,  1222,  1223,  1226,  1230,-32768,
  1229,   413,  1232,-32768,  1231,    14,  1065,  2013,  2013,  1272,
  1057,-32768,  5866,  4796,  5889,  4821,  5912,  4846,  5935,  4871,
  4896,  1066,   228,  1069,  5958,   366,-32768,  1828,-32768,    12,
   326,  1062,  1218,  1240,-32768,-32768,-32768,    16,  2013,-32768,
   614,-32768,  6234,  1237,  2013,    23,    21,    46,  1272,  1239,
  1272,  1242,  1243,   615,-32768,-32768,  1945,-32768,  2013,-32768,
  2013,  1272,  1272,  1272,-32768,   475,  1272,  1272,  1272,  1272,
  1272,  1272,  1272,   636,  2013,  2013,  2013,  1070,   220,   229,
   275,  1665,  1246,  1072,   -32,-32768,-32768,   618,   632,   633,
   660,-32768,-32768,  3668,  3690,-32768,-32768,  1250,  1251,  5981,
   143,  1171,-32768,  2013,  2013,  2013,-32768,  1079,  1081,  3712,
  3734,   231,  1083,  1089,  1086,  1094,  1091,  1098,  1097,  1099,
   279,  1100,  1103,  1130,  1126,  1127,  1128,  1131,  1140,  1141,
  1139,-32768,-32768,-32768,-32768,-32768,  1143,  1144,  1146,  1147,
  1148,  1142,  1149,-32768,  1150,   217,-32768,  1304,  2013,  3756,
  3778,   664,-32768,  2013,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1153,-32768,-32768,-32768,-32768,  1272,   476,  2013,
  1306,  1312,    18,-32768,  1326,  4921,    16,-32768,-32768,  3800,
-32768,-32768,   -96,-32768,   -96,  1333,-32768,  1334,-32768,-32768,
  1164,   674,  6234,  3822,  1336,  1337,  1338,  2013,  2013,   802,
  1342,  1343,  1344,  1345,  1347,  1349,-32768,  2048,  2814,  6004,
  2645,   647,   -96,  1350,   -96,  1351,   -96,  1352,  2838,   378,
-32768,  1272,-32768,-32768,  1354,  1355,  1356,  1357,  2013,  2013,
-32768,-32768,  1311,  1272,  1272,  1277,  1272,  2682,   307,  6027,
  2013,  1362,  2013,  1272,  1361,  1367,  1363,  1245,  1377,   486,
  1402,  1409,  2013,  1413,  1426,  1424,  1425,  1429,   486,  2013,
  2013,  2013,  1272,  1427,  1435,   486,  2013,  1436,  1437,  1438,
  2013,   413,-32768,-32768,   304,  6234,  2013,  2013,  1272,  1262,
   687,  6234,  1443,  1446,  1472,  1261,-32768,  1476,  1478,-32768,
  1264,-32768,  2013,    38,    59,-32768,-32768,-32768,  1305,  2013,
-32768,-32768,-32768,  1366,  1439,  1479,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1475,  1480,  1307,-32768,  2013,-32768,  1309,
   401,-32768,  1353,   404,-32768,  1359,   408,-32768,  1360,  1394,
  2013,  1313,-32768,-32768,-32768,-32768,  3844,  3866,   143,   329,
   691,  1395,  1403,  2013,-32768,  2013,-32768,-32768,  3888,  1317,
  3910,  1358,-32768,  1364,-32768,  1397,-32768,  1368,-32768,  1398,
  6050,-32768,  1399,-32768,-32768,  1405,  1406,  6073,  3932,  6096,
  1404,-32768,  1407,  1408,  3954,  1417,  1410,-32768,  3976,  1430,
-32768,  2013,  3998,  4020,-32768,  1272,  2013,  1518,  1411,-32768,
-32768,-32768,    16,-32768,  1447,  4042,-32768,-32768,-32768,  4064,
-32768,-32768,-32768,-32768,-32768,   647,  2712,-32768,  1665,   282,
  1665,   282,  1665,   282,-32768,  2862,  1272,  2013,  2013,  1448,
-32768,-32768,  1272,  2013,  2886,  2910,  1272,  1531,   143,   486,
  1539,  2013,  1581,   486,  1601,  1608,  1607,  1609,  1610,  2013,
  1611,  1272,  1612,  1614,  2013,  1618,  1617,  2013,  1620,  1452,
  6234,  2013,  2013,   692,  6234,-32768,-32768,  1621,-32768,  2013,
  1638,  1469,  2013,-32768,  2934,   437,   -28,  2958,   456,   -26,
  2982,   474,    -4,  2408,  1471,   700,  3006,  3030,  1473,  1477,
  1694,-32768,-32768,  1474,-32768,  1481,  1482,  1484,  4086,-32768,
  1483,-32768,  1491,-32768,-32768,-32768,  6119,-32768,  1490,-32768,
-32768,  6142,  1496,-32768,  6165,  1492,  2013,  6188,  4108,  1647,
-32768,  4130,  1493,-32768,  3054,  1653,  2013,  1692,  1693,  2013,
  1695,  1696,  2013,  1697,-32768,   282,-32768,  1272,  1698,  1701,
  1702,  1272,  1272,-32768,  1703,   486,   486,   486,   486,  1704,
  1706,  1707,   486,  1708,  1709,  1711,  1713,   701,-32768,  2013,
-32768,  2013,  1715,-32768,-32768,  1541,  3078,-32768,-32768,  1545,
  3102,-32768,-32768,  1546,  3126,-32768,     2,  2469,  1547,-32768,
-32768,-32768,  1548,  1572,-32768,  1575,  1576,  1582,  1583,-32768,
-32768,-32768,  1579,-32768,-32768,-32768,  1580,  1755,  1584,  6211,
  3150,  1586,   282,  1756,   282,  1757,   282,  1758,-32768,-32768,
   282,  1770,  1272,  1690,   486,   486,  1795,  1800,   486,  1802,
-32768,   476,-32768,  1803,  1805,    11,-32768,  1630,    36,-32768,
  1631,    45,-32768,  1632,    49,-32768,  1633,  1635,  1634,  1637,
-32768,-32768,  1643,  1644,   706,-32768,  1639,-32768,  1640,  1815,
   282,  1821,   282,  1824,   282,-32768,  1747,  2013,   486,  1272,
  1826,  1827,   476,  1829,   476,  1831,-32768,   138,-32768,   214,
-32768,   225,  1657,  4152,  1660,  1661,-32768,-32768,-32768,-32768,
   717,-32768,-32768,  1836,  1837,  1839,  2013,  2013,   486,  1272,
   476,  1846,-32768,-32768,-32768,  4174,  3174,  1682,  1683,-32768,
-32768,  2013,  1858,  1272,   486,  3198,-32768,  1685,  1691,  1862,
  1272,  1863,-32768,  1699,-32768,  1272,  1700,  1272,  1712,   486,
  1714,  1868,-32768,  1875,  1876,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1235,
-32768,   551,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -299,   -14,-32768,  1874,     4,  -364,
   -88,     6,-32768,-32768,-32768,-32768,-32768,  1879,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
 -1129,  -889,-32768,-32768,  -660,   -18,-32768,    41,-32768,   -83,
-32768, -1109, -1029,  -155,  -251,  -337,  -707,   890,-32768,   -64
};


#define	YYLAST		6407


static const short yytable[] = {   143,
   214,   216,   352,   142,   186,   249,    72,   358,    73,   546,
   571,   510,   860,   647,   147,  1044,   189,   647,    94,   202,
   254,   719,   200,   212,  1160,  1161,  1002,   153,  1001,   155,
   212,   388,   387,   389,   205,   903,   399,   392,   393,   903,
   904,   903,     4,  1217,   904,     5,   904,   153,   256,  1240,
   257,  1004,   119,   120,   121,   122,    82,   506,   123,   119,
   120,   121,   122,   903,  1218,   123,   173,   174,   904,   903,
   163,   164,  1003,   165,   904,   372,   373,   175,   903,   177,
   179,    83,   185,   904,   176,   648,   649,   650,   651,   648,
   649,   650,   651,   374,   531,   506,    84,  1005,   386,   532,
  1287,   391,  1290,   903,  1293,   372,   373,    88,   904,   372,
   373,    85,   903,   304,   305,   306,   903,   904,   307,   310,
    86,   904,   315,   375,   410,   400,   412,   384,   258,   335,
   259,   336,   337,   338,   154,   340,    87,   342,   343,  1306,
   354,   770,   193,   771,   311,   194,   372,   373,    89,  1043,
   995,   201,   150,  1338,   154,  1341,   370,   371,    90,   769,
   128,   129,   130,   131,   646,   371,     6,     7,     8,     9,
    10,    11,    12,    13,   586,   587,  1274,  1344,   146,   397,
   398,   187,   401,  1419,   403,   372,   373,   406,   407,   148,
   149,   652,  1460,   190,   725,   968,   203,   255,   720,   213,
   372,   373,   157,   390,   206,   903,   215,   739,   713,   772,
   904,   155,   367,   639,   369,   150,  1387,  1462,   640,   158,
   376,   372,   373,   160,   383,    94,  1464,   151,   312,   313,
  1466,   152,   449,   496,   497,   498,   499,   453,   454,   455,
   456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
   476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
   486,   487,   488,   489,   490,   491,   492,   493,   494,   161,
   506,   903,   156,  1436,   509,  1439,   904,  1442,   851,  1112,
   505,  1445,   903,   506,   451,   578,   511,   904,   157,   516,
   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
   527,   528,   529,   530,  1166,   602,  1054,   372,   373,  1494,
   537,   212,   539,  1055,   702,   864,   159,   305,   505,   703,
   710,  1478,   989,  1480,   562,  1482,   550,   551,   552,   162,
   554,   555,   556,   557,   558,   559,   560,   709,   166,   903,
   119,   120,   121,   122,   904,   260,   123,   261,   573,   574,
   575,   304,   305,   576,   171,   843,   579,   128,   129,   130,
   131,   589,   852,   853,   172,   593,   594,   567,   567,   570,
   570,   598,   372,   373,   495,   212,   135,   136,   135,   136,
   606,   372,   373,   372,   373,  1495,   712,  1044,   874,  1033,
  1044,  1034,   985,  1044,   180,  1065,  1496,   710,  1035,  1178,
  1036,   188,   565,   566,   119,   120,   121,   122,  1187,   191,
   123,   369,   329,   330,   331,  1194,   128,   129,   130,   131,
   332,   908,   909,   910,   911,   645,   181,   372,   373,   182,
   183,   372,   373,   262,   715,   263,   192,   135,   136,   135,
   136,   506,   250,  1074,  1037,   251,  1038,   252,   849,   318,
   319,   320,   321,   322,   195,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   128,   129,   130,   131,  1201,   332,
   212,   196,   708,  1202,   506,   305,   135,   136,  1167,   372,
   373,   716,   197,   714,   823,   135,   136,  1044,   167,   372,
   373,   168,   169,  1241,   170,  1278,   572,   198,  1099,   119,
   120,   121,   122,   505,   726,   123,   577,   506,   506,   506,
   506,   372,   373,   708,   737,   264,   505,   265,   741,   742,
   372,   373,  1018,  1019,   747,   135,   136,   199,   895,  1012,
   372,   373,   207,   823,   757,   758,  1044,   902,   208,  1044,
   988,   990,  1044,   761,   700,  1044,   701,  1151,   173,   174,
   266,   209,   267,   372,   373,   210,   372,   373,   773,   175,
   372,   373,   867,   868,   314,   870,   184,   872,   873,   825,
  1229,   211,   785,  1231,   787,   788,   247,  1233,  1044,  1307,
  1044,   298,  1044,  1311,   952,   953,   954,   955,   956,   372,
   373,   299,   756,   320,   321,   322,   300,   323,   324,   325,
   326,   327,   328,   329,   330,   331,  1337,   765,   372,   373,
   268,   332,   269,   918,   919,   506,   270,   922,   271,   824,
   301,   885,   135,   136,   316,  1340,   372,   373,   501,   844,
   252,  1027,  1028,   938,   939,   302,   135,   136,   333,   944,
   945,   355,   542,  1343,   252,   272,   951,   273,   958,   334,
   339,   833,   834,   135,   136,   341,   274,  1140,   275,   738,
   926,   252,   276,   356,   277,   835,   836,   837,   838,   839,
   840,   841,   886,   278,   505,   279,   357,   280,   845,   281,
   282,   848,   283,   366,   854,  1396,  1397,  1398,  1399,   284,
   359,   285,  1403,   286,   863,   287,   361,    38,    39,    40,
    41,   360,    43,  1006,   288,  1008,   289,   505,   362,   708,
    49,    50,   290,   292,   291,   293,  1015,  1016,  1017,   363,
   364,  1020,  1021,  1022,  1023,  1024,  1025,  1026,   965,   365,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   377,
   505,   505,   505,   505,   332,   378,   914,   915,   294,   296,
   295,   297,   920,   379,  1449,  1450,   385,   866,  1453,   710,
   396,   711,   930,   931,   710,   710,   740,   878,   318,   319,
   320,   321,   322,   394,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   997,   710,   998,  1011,   710,   332,  1045,
   395,   402,   899,   900,   901,  1126,   405,  1127,  1485,   970,
   971,   710,   710,  1046,  1047,   318,   319,   320,   321,   322,
   404,   323,   324,   325,   326,   327,   328,   329,   330,   331,
   317,   824,  1104,   932,   408,   332,   991,   927,  1508,   710,
   996,  1048,   941,  1099,   409,  1100,  1000,   327,   328,   329,
   330,   331,   411,   710,  1519,  1119,   413,   332,   505,   414,
  1013,  1282,  1014,   444,   450,   515,  1207,   415,  1208,  1531,
  1099,  1099,  1242,  1330,   446,   416,  1029,  1030,  1031,  1348,
  1207,  1349,  1408,  1039,   417,  1473,  1152,  1474,   580,    23,
    24,   581,   582,    27,   583,    29,  1501,    30,  1502,    32,
    33,  1163,    35,    36,   418,  1058,  1059,  1060,  1172,   419,
   420,   421,   422,   423,   424,   425,   426,   427,   428,    48,
   429,   430,   431,   432,  1105,   433,   434,  1191,    52,    53,
    54,   435,   436,   437,   438,   439,   440,   441,   500,   442,
   443,   332,  1040,  1205,   447,   503,    64,   448,   512,   513,
  1096,  1093,   514,   543,   548,  1102,   553,   561,   588,   597,
   591,   592,   600,  1135,   603,   609,   704,   857,   610,   611,
   612,  1106,   613,   614,   615,   616,   617,   318,   319,   320,
   321,   322,   618,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   619,   620,   621,   622,   623,   332,   624,  1124,
  1125,   880,   625,   626,   627,   628,   629,   630,  1200,  1134,
   631,   632,   318,   319,   320,   321,   322,   633,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   634,   635,   584,
  1157,  1158,   332,   636,   637,   567,   642,   570,   638,   641,
   643,   705,  1169,  1114,  1171,  1115,   706,   707,   717,   718,
   724,   775,   722,   727,  1181,   728,   729,   731,   733,   734,
   743,  1188,  1189,  1190,   755,   759,   760,   779,  1195,   776,
   780,   781,  1199,  1141,   783,  1144,   784,  1147,  1203,  1204,
   790,  1296,   791,   792,   793,   794,   795,  1300,   796,   797,
   798,  1304,   799,   800,  1216,   801,   802,   803,   804,   805,
   806,  1220,   807,   808,   809,   810,  1319,   811,   812,   813,
   814,   815,   816,   820,   318,   319,   320,   321,   322,  1227,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   830,
   817,   818,  1236,   821,   332,   819,   822,   832,   842,   847,
   828,   855,   856,   881,   858,  1245,  1294,  1246,   318,   319,
   320,   321,   322,   829,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   850,   862,   894,   869,   871,   332,   321,
   322,   882,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   883,   859,  1271,   884,   887,   332,   888,  1275,   889,
   890,   891,  1389,   892,   893,   907,  1393,  1394,   913,   916,
   917,   923,   921,   928,   929,   933,   934,   936,   935,   937,
  1285,   940,  1288,   942,  1291,   943,   946,   947,   948,  1297,
  1298,   949,   950,   959,   993,  1301,   960,   961,   962,   567,
   912,   570,   963,  1309,   964,   966,   967,   974,   969,   992,
   984,  1317,   999,   986,  1007,   994,  1322,  1009,  1010,  1325,
  1032,  1041,  1042,  1328,  1329,  1051,  1052,  1057,  1388,  1061,
  1062,  1332,  1066,  1067,  1335,  1068,  1212,  1447,  1069,  1286,
  1070,  1289,  1071,  1292,    91,   344,  1072,  1076,  1073,  1075,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,  1077,  1078,  1079,  1080,  1102,  1094,
  1081,  1107,   345,  1084,  1486,  1108,  1090,  1159,  1377,  1082,
  1083,  1381,  1085,  1086,  1385,  1087,  1088,  1089,  1091,  1092,
  1103,  1110,    38,    39,    40,    41,    42,    43,  1116,  1117,
  1118,  1121,  1122,  1123,  1509,    49,    50,  1128,  1129,  1130,
  1131,  1410,  1132,  1411,  1133,  1142,  1145,  1148,  1518,  1153,
  1154,  1155,  1156,  1162,  1170,  1524,  1173,  1456,  1175,  1174,
  1527,  1221,  1529,   124,   125,   126,   127,   318,   319,   320,
   321,   322,  1177,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   318,   319,   320,   321,   322,   332,   323,   324,
   325,   326,   327,   328,   329,   330,   331,  1179,  1489,  1176,
  1492,  1180,   332,   318,   319,   320,   321,   322,  1182,   323,
   324,   325,   326,   327,   328,   329,   330,   331,  1183,  1184,
  1185,  1186,  1192,   332,   132,   346,  1510,  1193,  1196,  1197,
   134,  1215,  1206,  1198,  1222,   137,  1209,    91,   303,  1484,
   140,  1210,   347,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,  1211,  1506,  1507,
  1224,  1219,  1213,  1214,  1223,  1225,  1244,  1226,    91,   303,
  1228,  1248,  1237,  1516,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   318,   319,
   320,   321,   322,  1276,   323,   324,   325,   326,   327,   328,
   329,   330,   331,  1230,  1299,  1279,  1305,  1250,   332,  1232,
  1234,  1308,  1253,  1251,    91,   303,   124,   125,   126,   127,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,  1235,  1243,  1252,  1254,  1256,  1257,
  1258,  1263,  1264,  1262,  1267,  1277,  1310,   124,   125,   126,
   127,   318,   319,   320,   321,   322,  1266,   323,   324,   325,
   326,   327,   328,   329,   330,   331,  1312,   132,   133,  1269,
  1313,   332,  1314,   134,  1315,  1316,  1318,  1320,   137,  1321,
  1323,   308,  1324,   140,  1326,   309,  1331,   318,   319,   320,
   321,   322,  1327,   323,   324,   325,   326,   327,   328,   329,
   330,   331,  1333,   124,   125,   126,   127,   332,   132,   133,
  1334,  1347,  1371,  1352,   134,  1355,  1353,  1360,  1375,   137,
  1356,  1357,   735,  1358,   140,  1361,   736,    91,   303,  1363,
  1365,  1367,  1373,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,  1378,  1379,  1354,
  1382,  1383,  1386,  1390,   132,   133,  1391,  1392,  1395,  1400,
   134,  1401,  1402,  1404,  1405,   137,  1406,  1407,   876,  1412,
   140,  1413,   877,    91,   544,  1415,  1417,  1423,  1422,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,  1424,  1425,  1426,  1427,  1428,  1429,  1430,
  1431,  1437,  1440,  1443,  1432,  1435,   124,   125,   126,   127,
    91,    92,    93,  1448,    94,  1446,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
  1451,   119,   120,   121,   122,  1452,  1454,   123,  1458,  1459,
  1461,  1463,  1465,  1469,  1467,  1468,  1470,  1471,  1472,  1475,
  1477,  1476,   124,   125,   126,   127,  1479,   380,   381,  1481,
  1483,  1487,  1488,   134,  1490,   547,  1493,  1497,   382,  1499,
  1500,  1503,  1504,   140,  1505,   176,   318,   319,   320,   321,
   322,  1511,   323,   324,   325,   326,   327,   328,   329,   330,
   331,  1514,  1515,  1517,  1521,  1522,   332,  1523,  1525,   124,
   125,   126,   127,  1533,  1535,  1536,    71,  1368,  1526,  1528,
   826,    79,  1109,   132,   133,     0,     0,     0,  1532,   134,
     0,  1530,     0,     0,   137,     0,     0,     0,     0,   140,
     0,   545,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   128,   129,   130,   131,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   132,   133,     0,     0,     0,     0,   134,   135,   136,     0,
     0,   137,     0,   138,   604,   139,   140,    91,   344,     0,
     0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,     0,     0,   723,
   318,   319,   320,   321,   322,   345,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,     0,    38,    39,    40,    41,    42,
    43,     0,   879,     0,     0,    91,   303,     0,    49,    50,
     0,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,     0,   124,   125,   126,   127,
    91,   303,   212,     0,     0,     0,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     0,   119,   120,   121,   122,     0,     0,   123,     0,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,   132,   504,   332,
   925,     0,     0,   134,   124,   125,   126,   127,   137,     0,
     0,     0,     0,   140,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,     0,   124,
   125,   126,   127,     0,     0,     0,     0,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,   132,   133,   332,     0,     0,
     0,   134,     0,     0,     0,     0,   137,     0,     0,     0,
     0,   140,     0,     0,     0,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
   132,   133,     0,     0,     0,   332,   134,     0,     0,     0,
     0,   137,    91,   544,   744,     0,   140,     0,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,     0,     0,     0,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,   580,    23,    24,   581,
   582,    27,   583,    29,     0,    30,     0,    32,    33,     0,
    35,    36,     0,     0,     0,     0,     0,   580,    23,    24,
   581,   582,    27,   583,    29,     0,    30,    48,    32,    33,
     0,    35,    36,     0,     0,     0,    52,    53,    54,     0,
     0,   124,   125,   126,   127,     0,     0,     0,    48,     0,
     0,     0,     0,     0,    64,     0,     0,    52,    53,    54,
     0,     0,     0,     0,     0,   580,    23,    24,   581,   582,
    27,   583,    29,     0,    30,    64,    32,    33,     0,    35,
    36,     0,     0,     0,     0,     0,   580,    23,    24,   581,
   582,    27,   583,    29,     0,    30,    48,    32,    33,     0,
    35,    36,   132,   133,     0,    52,    53,    54,   134,     0,
     0,     0,     0,   137,     0,     0,     0,    48,   140,     0,
     0,     0,     0,    64,     0,     0,    52,    53,    54,     0,
     0,     0,     0,     0,     0,     0,     0,   590,     0,     0,
     0,     0,     0,     0,    64,   580,    23,    24,   581,   582,
    27,   583,    29,     0,    30,     0,    32,    33,   607,    35,
    36,     0,     0,     0,     0,     0,     0,     0,   580,    23,
    24,   581,   582,    27,   583,    29,    48,    30,     0,    32,
    33,     0,    35,    36,     0,    52,    53,    54,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
     0,     0,     0,    64,     0,     0,   608,     0,    52,    53,
    54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    64,   766,     0,   580,
    23,    24,   581,   582,    27,   583,    29,     0,    30,     0,
    32,    33,     0,    35,    36,     0,     0,     0,     0,     0,
    -4,     1,     0,    -4,   -47,     0,     0,     0,     0,     0,
    48,     0,     0,     0,     0,     0,     0,     0,     0,    52,
    53,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   -47,     0,     0,   786,    64,   -47,   -47,
     0,   -47,   -47,   -47,   -47,   -47,   -47,   -47,   -47,     0,
   -47,   -47,   -47,   -47,   -47,   -47,   -47,     0,     0,  1345,
   -47,   -47,   -47,   -47,   -47,   -47,   -47,     0,   -47,   -47,
   -47,   -47,   -47,   217,   -47,   -47,     0,     0,     0,     0,
   -47,   -47,   -47,   -47,     0,     0,     0,     0,   -47,     0,
   -47,     0,   -47,   -47,   -47,   -47,   -47,   -47,   -47,   -47,
   -47,   -47,     0,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
  1420,     0,     0,   332,    -4,    -4,    -4,    -4,    -4,    -4,
    -4,    -4,   748,     0,     0,   218,   219,   220,     0,     0,
     0,     0,     0,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,    18,     0,     0,     0,     0,     0,     0,
     0,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,     0,   241,   242,   243,   244,   245,   246,     0,     0,
     0,     0,    19,     0,     0,     0,     0,    20,    21,     0,
    22,    23,    24,    25,    26,    27,    28,    29,     0,    30,
    31,    32,    33,    34,    35,    36,     0,     0,     0,    37,
    38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
    47,    48,     0,    49,    50,     0,     0,     0,     0,    51,
    52,    53,    54,     0,     0,     0,     0,    55,     0,    56,
     0,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,   580,    23,    24,   581,   582,    27,   583,    29,     0,
    30,     0,    32,    33,     0,    35,    36,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    48,     0,     0,     0,     0,   332,     0,     0,
     0,    52,    53,    54,  1138,     0,  1139,     0,     0,     0,
     0,     0,     0,     0,   318,   319,   320,   321,   322,    64,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,     0,     0,
     0,  1164,     0,  1165,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,     0,     0,
     0,  1283,     0,  1284,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,   749,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,   875,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,   898,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1136,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1150,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,  1295,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,  1302,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,  1303,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1336,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1339,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,  1342,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,  1350,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,  1351,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1374,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1414,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,  1416,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,  1418,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,  1434,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1513,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1520,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   502,     0,     0,     0,
     0,   563,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   533,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   563,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   564,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   601,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,   680,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   681,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   694,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   695,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   696,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,   697,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   698,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   699,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   762,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   763,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,   764,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   865,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   896,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   897,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   924,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1049,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1050,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1063,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1064,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1097,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1098,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1113,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1120,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1238,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1239,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1247,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1249,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1260,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1265,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1268,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1272,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1273,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1280,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1281,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1359,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1370,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1372,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1498,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1512,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   508,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   644,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   659,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   661,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   663,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   665,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   667,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   669,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   671,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   673,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   675,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   677,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   679,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   683,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   685,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   687,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   689,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   691,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   693,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   768,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   774,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   777,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   778,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   846,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   976,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   978,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   980,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   982,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   983,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,  1111,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   502,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   534,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   535,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   536,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   538,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   540,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   541,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   549,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   595,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   596,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   599,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   605,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   658,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   660,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   662,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   664,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   666,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   668,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   670,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   672,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   674,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   676,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   678,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   682,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   684,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   686,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   688,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   690,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   692,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   730,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   732,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   745,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   746,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   750,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   751,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   752,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   753,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   754,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   782,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   789,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   975,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   977,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   979,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   981,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   987,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,  1053,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,  1137,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,  1168,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,  1255,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,  1259,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
  1261,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,  1362,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,  1364,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,  1366,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,  1369,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,  1433,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332
};

static const short yycheck[] = {    18,
    65,    66,   158,    18,     4,    89,     3,   163,     3,   347,
   375,   311,   720,     4,     6,   905,     4,     4,     7,     4,
     4,     4,    45,     5,  1054,  1055,     6,    67,     6,    67,
     5,     4,   188,     6,     4,    68,    85,   193,   194,    68,
    73,    68,     6,     6,    73,     3,    73,    67,   174,  1159,
   176,     6,    34,    35,    36,    37,     7,   309,    40,    34,
    35,    36,    37,    68,     6,    40,   163,   164,    73,    68,
    44,    45,    52,    47,    73,   163,   164,   174,    68,    39,
    40,     6,    42,    73,   181,    76,    77,    78,    79,    76,
    77,    78,    79,   181,   175,   347,     6,    52,   187,   180,
  1230,   190,  1232,    68,  1234,   163,   164,   174,    73,   163,
   164,     6,    68,   132,   133,   134,    68,    73,   137,   138,
     6,    73,   141,   181,   213,   174,   215,   181,   174,   148,
   176,   150,   151,   152,   174,   154,     6,   156,   157,  1249,
   159,   181,    41,   181,     4,    44,   163,   164,   174,   182,
   858,   174,   174,   182,   174,   182,   175,   176,   174,   181,
   149,   150,   151,   152,   181,   184,   124,   125,   126,   127,
   128,   129,   130,   131,     6,     7,  1206,   182,   174,   198,
   199,   181,   201,   182,   203,   163,   164,   206,   207,   181,
     6,   182,   182,   181,   532,   182,   181,   181,   181,   181,
   163,   164,   174,   176,   174,    68,   181,   545,   508,   181,
    73,    67,   172,   175,   174,   174,  1346,   182,   180,    49,
   180,   163,   164,    45,   184,     7,   182,   174,    88,    89,
   182,   174,   251,   298,   299,   300,   301,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    45,
   532,    68,   174,  1413,     7,  1415,    73,  1417,     4,   997,
   309,  1421,    68,   545,   254,   384,   311,    73,   174,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,     8,   404,   174,   163,   164,   182,
   339,     5,   341,   181,   175,   175,   174,   346,   347,   180,
   180,  1461,     7,  1463,   180,  1465,   355,   356,   357,    45,
   359,   360,   361,   362,   363,   364,   365,   503,    47,    68,
    34,    35,    36,    37,    73,   174,    40,   176,   377,   378,
   379,   380,   381,   382,   174,   703,   385,   149,   150,   151,
   152,   390,    88,    89,   181,   394,   395,   374,   375,   374,
   375,   400,   163,   164,     4,     5,   170,   171,   170,   171,
   409,   163,   164,   163,   164,   182,   178,  1287,   736,   180,
  1290,   182,   175,  1293,   181,   175,   182,   180,   180,  1070,
   182,    45,   372,   373,    34,    35,    36,    37,  1079,     6,
    40,   381,   165,   166,   167,  1086,   149,   150,   151,   152,
   173,   769,   770,   771,   772,   450,    41,   163,   164,    44,
    45,   163,   164,   174,   509,   176,     6,   170,   171,   170,
   171,   703,     5,   175,   180,   176,   182,   178,   710,   153,
   154,   155,   156,   157,     4,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   149,   150,   151,   152,   175,   173,
     5,     4,   501,   180,   736,   504,   170,   171,   182,   163,
   164,   510,     4,   508,   178,   170,   171,  1387,    41,   163,
   164,    44,    45,   175,    47,  1213,   180,   174,   180,    34,
    35,    36,    37,   532,   533,    40,   180,   769,   770,   771,
   772,   163,   164,   542,   543,   174,   545,   176,   547,   548,
   163,   164,    58,    59,   553,   170,   171,   174,   180,   877,
   163,   164,   174,   178,   563,   564,  1436,   180,     6,  1439,
   850,   851,  1442,   572,   176,  1445,   178,   180,   163,   164,
   174,     4,   176,   163,   164,     4,   163,   164,   587,   174,
   163,   164,   728,   729,     4,   731,   181,   733,   734,   644,
   180,    45,   601,   180,   603,   604,   174,   180,  1478,  1250,
  1480,   174,  1482,  1254,   109,   110,   111,   112,   113,   163,
   164,   174,   562,   155,   156,   157,   174,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   180,   577,   163,   164,
   174,   173,   176,   779,   780,   877,   174,   783,   176,   644,
   174,     6,   170,   171,     6,   180,   163,   164,   176,   704,
   178,     6,     7,   799,   800,   174,   170,   171,     6,   805,
   806,   181,   176,   180,   178,   174,   812,   176,   814,     5,
   174,   680,   681,   170,   171,   174,   174,  1032,   176,   176,
     8,   178,   174,   174,   176,   694,   695,   696,   697,   698,
   699,   700,    57,   174,   703,   176,   174,   174,   707,   176,
   174,   710,   176,     4,   713,  1356,  1357,  1358,  1359,   174,
   181,   176,  1363,   174,   723,   176,   174,    61,    62,    63,
    64,   181,    66,   869,   174,   871,   176,   736,   174,   738,
    74,    75,   174,   174,   176,   176,   882,   883,   884,   174,
   174,   887,   888,   889,   890,   891,   892,   893,   822,   174,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   181,
   769,   770,   771,   772,   173,   181,   775,   776,   174,   174,
   176,   176,   781,   181,  1425,  1426,   176,   727,  1429,   180,
     6,   182,   791,   792,   180,   180,   182,   182,   153,   154,
   155,   156,   157,   176,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   180,   180,   182,   182,   180,   173,   182,
   176,   178,   762,   763,   764,     4,    91,     6,  1469,   828,
   829,   180,   180,   182,   182,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     6,   846,   988,   793,     6,   173,   851,   175,  1499,   180,
   859,   182,   802,   180,   174,   182,   865,   163,   164,   165,
   166,   167,     6,   180,  1515,   182,     6,   173,   877,   174,
   879,  1226,   881,     5,     4,     6,   180,   174,   182,  1530,
   180,   180,   182,   182,   180,   174,   895,   896,   897,   180,
   180,   182,   182,   902,   174,   180,  1042,   182,    41,    42,
    43,    44,    45,    46,    47,    48,   180,    50,   182,    52,
    53,  1057,    55,    56,   174,   924,   925,   926,  1064,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,    72,
   174,   174,   174,   174,   989,   174,   174,  1083,    81,    82,
    83,   174,   174,   174,   174,   174,   174,   174,     5,   174,
   174,   173,   902,  1099,   175,     7,    99,   180,   178,     7,
   969,   966,   176,   181,     7,   974,     7,   175,     6,    86,
     7,     7,    88,  1028,   181,     5,   180,     6,     5,     5,
     5,   990,     5,     5,     5,     5,     5,   153,   154,   155,
   156,   157,     5,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     5,     5,     5,     5,     5,   173,     5,  1018,
  1019,     6,     5,     5,     5,     5,     5,     5,  1092,  1028,
     5,   142,   153,   154,   155,   156,   157,     5,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     5,     5,   182,
  1049,  1050,   173,     5,     3,  1032,     6,  1032,     5,     5,
     5,   175,  1061,  1003,  1063,  1005,   175,   180,     6,     4,
     6,   181,   177,     7,  1073,     7,     7,     7,     7,     7,
     7,  1080,  1081,  1082,   178,   182,   182,     7,  1087,   181,
     7,   174,  1091,  1033,     7,  1035,   178,  1037,  1097,  1098,
   180,  1237,   180,   180,   180,   180,   180,  1243,   180,   180,
   180,  1247,   180,   180,  1113,   180,   180,   180,   180,   180,
   180,  1120,   180,   180,   180,   180,  1262,   180,   180,   180,
   180,   180,   180,     5,   153,   154,   155,   156,   157,  1138,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   181,
   180,   180,  1151,   175,   173,   180,   180,     6,     4,     6,
   174,     6,     6,   181,     7,  1164,  1235,  1166,   153,   154,
   155,   156,   157,   174,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   177,     6,     4,     7,     7,   173,   156,
   157,     7,   159,   160,   161,   162,   163,   164,   165,   166,
   167,     7,   176,  1202,     7,     7,   173,     7,  1207,     7,
     7,     7,  1348,     7,     7,     6,  1352,  1353,     6,     6,
     6,     4,     7,     7,     3,     3,     3,     3,   165,     3,
  1229,     3,  1231,     3,  1233,     3,     3,     3,     3,  1238,
  1239,     3,     3,     3,     7,  1244,     5,     5,     3,  1226,
     6,  1226,     3,  1252,     6,     4,     6,   181,   174,   178,
   175,  1260,     6,   175,     6,     6,  1265,     6,     6,  1268,
   181,     6,   181,  1272,  1273,     6,     6,    87,  1347,   181,
   180,  1280,   180,   175,  1283,   180,     6,  1423,   175,  1229,
   180,  1231,   175,  1233,     3,     4,   180,   175,   180,   180,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   175,   180,   180,   180,  1327,     6,
   180,     6,    41,   175,  1470,     4,   175,     7,  1337,   180,
   180,  1340,   180,   180,  1343,   180,   180,   180,   180,   180,
   178,     6,    61,    62,    63,    64,    65,    66,     6,     6,
   177,     6,     6,     6,  1500,    74,    75,     6,     6,     6,
     6,  1370,     6,  1372,     6,     6,     6,     6,  1514,     6,
     6,     6,     6,    87,     3,  1521,     6,  1432,     6,     3,
  1526,     6,  1528,   102,   103,   104,   105,   153,   154,   155,
   156,   157,     6,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   153,   154,   155,   156,   157,   173,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     6,  1473,   165,
  1475,     3,   173,   153,   154,   155,   156,   157,     6,   159,
   160,   161,   162,   163,   164,   165,   166,   167,     3,     6,
     6,     3,     6,   173,   163,   164,  1501,     3,     3,     3,
   169,   178,   181,     6,     6,   174,     4,     3,     4,  1468,
   179,     6,   181,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,  1497,  1498,
     6,   177,     7,     6,     6,     6,    84,   181,     3,     4,
   182,   175,   180,  1512,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   153,   154,
   155,   156,   157,     6,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   181,    87,    89,     6,   180,   173,   181,
   181,     3,   175,   180,     3,     4,   102,   103,   104,   105,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   181,   181,   180,   180,   180,   175,
   175,   175,   175,   180,   175,   175,     6,   102,   103,   104,
   105,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,     6,   163,   164,   180,
     3,   173,     6,   169,     6,     6,     6,     6,   174,     6,
     3,   177,     6,   179,     5,   181,     6,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     5,   102,   103,   104,   105,   173,   163,   164,
   182,   181,     6,   181,   169,   182,   180,   175,     6,   174,
   180,   180,   177,   180,   179,   175,   181,     3,     4,   180,
   175,   180,   180,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,     6,     6,
     6,     6,     6,     6,   163,   164,     6,     6,     6,     6,
   169,     6,     6,     6,     6,   174,     6,     5,   177,     5,
   179,   181,   181,     3,     4,   181,   181,   180,   182,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   182,   180,   180,   175,   175,   180,   180,
     6,     6,     6,     6,   181,   180,   102,   103,   104,   105,
     3,     4,     5,    84,     7,     6,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     6,    34,    35,    36,    37,     6,     5,    40,     6,     5,
   181,   181,   181,   180,   182,   181,   180,   175,   175,   181,
     6,   182,   102,   103,   104,   105,     6,   163,   164,     6,
    84,     6,     6,   169,     6,     8,     6,   181,   174,   180,
   180,     6,     6,   179,     6,   181,   153,   154,   155,   156,
   157,     6,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   180,   180,     6,   180,   175,   173,     6,     6,   102,
   103,   104,   105,     6,     0,     0,     3,  1327,   180,   180,
   646,     3,   993,   163,   164,    -1,    -1,    -1,   175,   169,
    -1,   180,    -1,    -1,   174,    -1,    -1,    -1,    -1,   179,
    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   163,   164,    -1,    -1,    -1,    -1,   169,   170,   171,    -1,
    -1,   174,    -1,   176,     8,   178,   179,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,     8,
   153,   154,   155,   156,   157,    41,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
    66,    -1,     8,    -1,    -1,     3,     4,    -1,    74,    75,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,   102,   103,   104,   105,
     3,     4,     5,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,    37,    -1,    -1,    40,    -1,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,   163,   164,   173,
     8,    -1,    -1,   169,   102,   103,   104,   105,   174,    -1,
    -1,    -1,    -1,   179,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,   102,
   103,   104,   105,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,   163,   164,   173,    -1,    -1,
    -1,   169,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,
    -1,   179,    -1,    -1,    -1,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   163,   164,    -1,    -1,    -1,   173,   169,    -1,    -1,    -1,
    -1,   174,     3,     4,   182,    -1,   179,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    41,    42,    43,    44,
    45,    46,    47,    48,    -1,    50,    -1,    52,    53,    -1,
    55,    56,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    72,    52,    53,
    -1,    55,    56,    -1,    -1,    -1,    81,    82,    83,    -1,
    -1,   102,   103,   104,   105,    -1,    -1,    -1,    72,    -1,
    -1,    -1,    -1,    -1,    99,    -1,    -1,    81,    82,    83,
    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
    46,    47,    48,    -1,    50,    99,    52,    53,    -1,    55,
    56,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
    45,    46,    47,    48,    -1,    50,    72,    52,    53,    -1,
    55,    56,   163,   164,    -1,    81,    82,    83,   169,    -1,
    -1,    -1,    -1,   174,    -1,    -1,    -1,    72,   179,    -1,
    -1,    -1,    -1,    99,    -1,    -1,    81,    82,    83,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,    -1,
    -1,    -1,    -1,    -1,    99,    41,    42,    43,    44,    45,
    46,    47,    48,    -1,    50,    -1,    52,    53,   182,    55,
    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    48,    72,    50,    -1,    52,
    53,    -1,    55,    56,    -1,    81,    82,    83,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    -1,    -1,    -1,    99,    -1,    -1,   182,    -1,    81,    82,
    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   182,    -1,    41,
    42,    43,    44,    45,    46,    47,    48,    -1,    50,    -1,
    52,    53,    -1,    55,    56,    -1,    -1,    -1,    -1,    -1,
     0,     1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    33,    -1,    -1,   182,    99,    38,    39,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    51,    52,    53,    54,    55,    56,    -1,    -1,   182,
    60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
    70,    71,    72,    44,    74,    75,    -1,    -1,    -1,    -1,
    80,    81,    82,    83,    -1,    -1,    -1,    -1,    88,    -1,
    90,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
   182,    -1,    -1,   173,   124,   125,   126,   127,   128,   129,
   130,   131,   182,    -1,    -1,   106,   107,   108,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,     4,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,    -1,   143,   144,   145,   146,   147,   148,    -1,    -1,
    -1,    -1,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    51,    52,    53,    54,    55,    56,    -1,    -1,    -1,    60,
    61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    -1,    -1,    -1,    -1,    88,    -1,    90,
    -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    -1,    52,    53,    -1,    55,    56,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    72,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    81,    82,    83,   180,    -1,   182,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,    99,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,
    -1,   180,    -1,   182,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,
    -1,   180,    -1,   182,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   182,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   182,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   182,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   182,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   182,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   182,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   182,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   182,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   182,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   182,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   182,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   182,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   182,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   182,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   182,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   182,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,    -1,    -1,    -1,
    -1,   180,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   153,   154,   155,   156,   157,   180,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   153,   154,   155,   156,   157,   180,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,   180,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,
   157,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,
   155,   156,   157,   180,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 160 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 6:
#line 176 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 177 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 178 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 10:
#line 188 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 14:
#line 199 "Gmsh.y"
{
    ;
    break;}
case 15:
#line 202 "Gmsh.y"
{
    ;
    break;}
case 16:
#line 206 "Gmsh.y"
{
    ;
    break;}
case 17:
#line 212 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 18:
#line 218 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 19:
#line 225 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 20:
#line 231 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 21:
#line 235 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 22:
#line 239 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 23:
#line 246 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 24:
#line 250 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 25:
#line 255 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 26:
#line 259 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 27:
#line 263 "Gmsh.y"
{
    ;
    break;}
case 28:
#line 267 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 29:
#line 271 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 30:
#line 275 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 279 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 32:
#line 283 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 33:
#line 289 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 292 "Gmsh.y"
{
    ;
    break;}
case 35:
#line 295 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 36:
#line 299 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 37:
#line 303 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 38:
#line 307 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 39:
#line 311 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 316 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 319 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 323 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 44:
#line 330 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 348 "Gmsh.y"
{ return 1; ;
    break;}
case 50:
#line 349 "Gmsh.y"
{ return 1; ;
    break;}
case 51:
#line 350 "Gmsh.y"
{ return 1; ;
    break;}
case 52:
#line 351 "Gmsh.y"
{ return 1; ;
    break;}
case 53:
#line 352 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 54:
#line 353 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 55:
#line 354 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 355 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 356 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 357 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 59:
#line 358 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 359 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 360 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 361 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 366 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 64:
#line 371 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 65:
#line 389 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 66:
#line 396 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 67:
#line 406 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 73:
#line 421 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 74:
#line 423 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 75:
#line 428 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 76:
#line 430 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 77:
#line 435 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 78:
#line 625 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 79:
#line 643 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 80:
#line 654 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 81:
#line 659 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 667 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 83:
#line 674 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 84:
#line 681 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 85:
#line 686 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 86:
#line 694 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 87:
#line 701 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 88:
#line 709 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 89:
#line 716 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 90:
#line 720 "Gmsh.y"
{
    ;
    break;}
case 91:
#line 727 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 92:
#line 728 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 93:
#line 729 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 94:
#line 730 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 95:
#line 731 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 96:
#line 735 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 97:
#line 736 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 98:
#line 744 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 99:
#line 775 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 100:
#line 814 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 101:
#line 868 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 102:
#line 885 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 103:
#line 896 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 104:
#line 915 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 105:
#line 929 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 106:
#line 946 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 107:
#line 972 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 108:
#line 999 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 109:
#line 1013 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 110:
#line 1030 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 111:
#line 1044 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 112:
#line 1061 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 113:
#line 1081 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 114:
#line 1104 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 115:
#line 1114 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 116:
#line 1133 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 117:
#line 1149 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1165 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 119:
#line 1184 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 120:
#line 1203 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 121:
#line 1221 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 122:
#line 1239 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 123:
#line 1257 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 124:
#line 1283 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 125:
#line 1301 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 126:
#line 1328 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 127:
#line 1347 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 128:
#line 1371 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 129:
#line 1395 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 130:
#line 1421 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 131:
#line 1438 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 132:
#line 1456 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 133:
#line 1475 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 134:
#line 1494 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 135:
#line 1533 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 136:
#line 1560 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 137:
#line 1579 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 138:
#line 1596 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 139:
#line 1612 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 140:
#line 1632 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 141:
#line 1649 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 142:
#line 1666 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 143:
#line 1687 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 144:
#line 1692 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 145:
#line 1697 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 146:
#line 1702 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 147:
#line 1709 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 148:
#line 1710 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 149:
#line 1711 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 150:
#line 1716 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 151:
#line 1720 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 152:
#line 1724 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 153:
#line 1740 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 154:
#line 1756 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 155:
#line 1772 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 156:
#line 1793 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 157:
#line 1807 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 158:
#line 1813 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 159:
#line 1819 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 160:
#line 1831 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 161:
#line 1840 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 162:
#line 1850 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 163:
#line 1864 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 164:
#line 1883 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 165:
#line 1897 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 166:
#line 1905 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 167:
#line 1911 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 168:
#line 1922 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 169:
#line 1936 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 170:
#line 1980 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 171:
#line 1995 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 172:
#line 2011 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 173:
#line 2021 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 174:
#line 2043 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 175:
#line 2047 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 176:
#line 2052 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 177:
#line 2057 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 178:
#line 2070 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 179:
#line 2085 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 180:
#line 2101 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 181:
#line 2127 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 182:
#line 2154 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 183:
#line 2186 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 184:
#line 2193 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 185:
#line 2198 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 186:
#line 2204 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 187:
#line 2208 "Gmsh.y"
{
    ;
    break;}
case 188:
#line 2217 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 189:
#line 2225 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 190:
#line 2233 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 191:
#line 2241 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 192:
#line 2246 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 193:
#line 2254 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 194:
#line 2259 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 195:
#line 2267 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 196:
#line 2272 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 197:
#line 2282 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 198:
#line 2289 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 199:
#line 2296 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 200:
#line 2303 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 201:
#line 2310 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 202:
#line 2317 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 203:
#line 2324 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 204:
#line 2331 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 205:
#line 2338 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 206:
#line 2345 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 207:
#line 2350 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 208:
#line 2357 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 209:
#line 2362 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 210:
#line 2369 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 211:
#line 2374 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 212:
#line 2381 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 213:
#line 2386 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 214:
#line 2393 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 215:
#line 2398 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 216:
#line 2405 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 217:
#line 2410 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 218:
#line 2417 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 219:
#line 2422 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 220:
#line 2429 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 221:
#line 2434 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 222:
#line 2441 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 223:
#line 2446 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 224:
#line 2457 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 2460 "Gmsh.y"
{
    ;
    break;}
case 226:
#line 2466 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 227:
#line 2492 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 228:
#line 2516 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 229:
#line 2525 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 230:
#line 2543 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 231:
#line 2561 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 232:
#line 2579 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = 1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 233:
#line 2608 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 234:
#line 2643 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 2670 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 236:
#line 2697 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 237:
#line 2711 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 238:
#line 2730 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 239:
#line 2734 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 240:
#line 2743 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 241:
#line 2744 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 242:
#line 2745 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 243:
#line 2746 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 244:
#line 2747 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 245:
#line 2751 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 246:
#line 2752 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 247:
#line 2753 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 248:
#line 2754 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 249:
#line 2755 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 250:
#line 2756 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 251:
#line 2757 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 252:
#line 2758 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 253:
#line 2760 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 254:
#line 2766 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 255:
#line 2767 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 256:
#line 2768 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 257:
#line 2769 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 258:
#line 2770 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 259:
#line 2771 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 260:
#line 2772 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 261:
#line 2773 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 262:
#line 2774 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 263:
#line 2775 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 264:
#line 2776 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 265:
#line 2777 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2778 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2779 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 268:
#line 2780 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2781 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2782 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2783 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 272:
#line 2784 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2785 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 274:
#line 2786 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2787 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 276:
#line 2788 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 277:
#line 2789 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2790 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2791 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2792 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 281:
#line 2793 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2794 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 283:
#line 2795 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 284:
#line 2796 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 285:
#line 2797 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 286:
#line 2799 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 287:
#line 2800 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 288:
#line 2801 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 289:
#line 2802 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 290:
#line 2803 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 291:
#line 2804 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 292:
#line 2805 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 293:
#line 2806 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 294:
#line 2807 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 295:
#line 2808 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 296:
#line 2809 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 297:
#line 2810 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 298:
#line 2811 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 299:
#line 2812 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 300:
#line 2813 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 301:
#line 2814 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 302:
#line 2815 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 303:
#line 2816 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 304:
#line 2817 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 305:
#line 2818 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 306:
#line 2819 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 307:
#line 2828 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 308:
#line 2829 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 309:
#line 2830 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 310:
#line 2831 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 311:
#line 2832 "Gmsh.y"
{ yyval.d = GMSH_MAJOR_VERSION; ;
    break;}
case 312:
#line 2833 "Gmsh.y"
{ yyval.d = GMSH_MINOR_VERSION; ;
    break;}
case 313:
#line 2834 "Gmsh.y"
{ yyval.d = GMSH_PATCH_VERSION; ;
    break;}
case 314:
#line 2839 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 315:
#line 2852 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 316:
#line 2872 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 317:
#line 2886 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 318:
#line 2899 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 319:
#line 2922 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 320:
#line 2940 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 321:
#line 2958 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 322:
#line 2976 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 323:
#line 2994 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 324:
#line 3002 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 325:
#line 3006 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 326:
#line 3010 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 327:
#line 3014 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 328:
#line 3018 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 329:
#line 3025 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 330:
#line 3029 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 331:
#line 3033 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 332:
#line 3037 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 333:
#line 3044 "Gmsh.y"
{
    ;
    break;}
case 334:
#line 3047 "Gmsh.y"
{
    ;
    break;}
case 335:
#line 3053 "Gmsh.y"
{
    ;
    break;}
case 336:
#line 3056 "Gmsh.y"
{
    ;
    break;}
case 337:
#line 3062 "Gmsh.y"
{
    ;
    break;}
case 338:
#line 3065 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 339:
#line 3069 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 340:
#line 3076 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 341:
#line 3081 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 342:
#line 3089 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 343:
#line 3094 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 344:
#line 3098 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 345:
#line 3102 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 346:
#line 3114 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 347:
#line 3120 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 348:
#line 3131 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 349:
#line 3151 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 350:
#line 3161 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 351:
#line 3171 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 352:
#line 3181 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 353:
#line 3198 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 354:
#line 3217 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 355:
#line 3241 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 356:
#line 3270 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 357:
#line 3275 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 358:
#line 3279 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 359:
#line 3283 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 360:
#line 3296 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 361:
#line 3300 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 362:
#line 3312 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 363:
#line 3319 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 364:
#line 3341 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 365:
#line 3345 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 366:
#line 3360 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 367:
#line 3365 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 368:
#line 3372 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 369:
#line 3376 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 370:
#line 3384 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 371:
#line 3392 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 372:
#line 3406 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 373:
#line 3420 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 374:
#line 3424 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 375:
#line 3443 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 376:
#line 3465 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3488 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
