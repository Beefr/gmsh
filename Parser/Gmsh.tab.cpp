
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tStrCat	287
#define	tStrPrefix	288
#define	tDraw	289
#define	tPoint	290
#define	tCircle	291
#define	tEllipsis	292
#define	tLine	293
#define	tSurface	294
#define	tSpline	295
#define	tVolume	296
#define	tCharacteristic	297
#define	tLength	298
#define	tParametric	299
#define	tElliptic	300
#define	tPlane	301
#define	tRuled	302
#define	tTransfinite	303
#define	tComplex	304
#define	tPhysical	305
#define	tUsing	306
#define	tBump	307
#define	tProgression	308
#define	tRotate	309
#define	tTranslate	310
#define	tSymmetry	311
#define	tDilate	312
#define	tExtrude	313
#define	tDuplicata	314
#define	tLoop	315
#define	tRecombine	316
#define	tDelete	317
#define	tCoherence	318
#define	tIntersect	319
#define	tAttractor	320
#define	tLayers	321
#define	tScalarTetrahedron	322
#define	tVectorTetrahedron	323
#define	tTensorTetrahedron	324
#define	tScalarTriangle	325
#define	tVectorTriangle	326
#define	tTensorTriangle	327
#define	tScalarLine	328
#define	tVectorLine	329
#define	tTensorLine	330
#define	tScalarPoint	331
#define	tVectorPoint	332
#define	tTensorPoint	333
#define	tBSpline	334
#define	tNurbs	335
#define	tOrder	336
#define	tWith	337
#define	tBounds	338
#define	tKnots	339
#define	tColor	340
#define	tColorTable	341
#define	tFor	342
#define	tIn	343
#define	tEndFor	344
#define	tIf	345
#define	tEndIf	346
#define	tExit	347
#define	tReturn	348
#define	tCall	349
#define	tFunction	350
#define	tMesh	351
#define	tB_SPLINE_SURFACE_WITH_KNOTS	352
#define	tB_SPLINE_CURVE_WITH_KNOTS	353
#define	tCARTESIAN_POINT	354
#define	tTRUE	355
#define	tFALSE	356
#define	tUNSPECIFIED	357
#define	tU	358
#define	tV	359
#define	tEDGE_CURVE	360
#define	tVERTEX_POINT	361
#define	tORIENTED_EDGE	362
#define	tPLANE	363
#define	tFACE_OUTER_BOUND	364
#define	tEDGE_LOOP	365
#define	tADVANCED_FACE	366
#define	tVECTOR	367
#define	tDIRECTION	368
#define	tAXIS2_PLACEMENT_3D	369
#define	tISO	370
#define	tENDISO	371
#define	tENDSEC	372
#define	tDATA	373
#define	tHEADER	374
#define	tFILE_DESCRIPTION	375
#define	tFILE_SCHEMA	376
#define	tFILE_NAME	377
#define	tMANIFOLD_SOLID_BREP	378
#define	tCLOSED_SHELL	379
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	380
#define	tFACE_BOUND	381
#define	tCYLINDRICAL_SURFACE	382
#define	tCONICAL_SURFACE	383
#define	tCIRCLE	384
#define	tTRIMMED_CURVE	385
#define	tGEOMETRIC_SET	386
#define	tCOMPOSITE_CURVE_SEGMENT	387
#define	tCONTINUOUS	388
#define	tCOMPOSITE_CURVE	389
#define	tTOROIDAL_SURFACE	390
#define	tPRODUCT_DEFINITION	391
#define	tPRODUCT_DEFINITION_SHAPE	392
#define	tSHAPE_DEFINITION_REPRESENTATION	393
#define	tELLIPSE	394
#define	tTrimmed	395
#define	tSolid	396
#define	tEndSolid	397
#define	tVertex	398
#define	tFacet	399
#define	tNormal	400
#define	tOuter	401
#define	tLoopSTL	402
#define	tEndLoop	403
#define	tEndFacet	404
#define	tAFFECTPLUS	405
#define	tAFFECTMINUS	406
#define	tAFFECTTIMES	407
#define	tAFFECTDIVIDE	408
#define	tOR	409
#define	tAND	410
#define	tEQUAL	411
#define	tNOTEQUAL	412
#define	tAPPROXEQUAL	413
#define	tLESSOREQUAL	414
#define	tGREATEROREQUAL	415
#define	tCROSSPRODUCT	416
#define	tPLUSPLUS	417
#define	tMINUSMINUS	418
#define	UNARYPREC	419

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.93 2001-07-26 18:47:59 remacle Exp $

  //
  // Generaliser sprintf avec des chaines de caracteres
  // 

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 71 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1526
#define	YYFLAG		-32768
#define	YYNTBASE	184

#define YYTRANSLATE(x) ((unsigned)(x) <= 419 ? yytranslate[x] : 265)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   171,     2,     2,     2,   169,     2,     2,   176,
   177,   167,   165,   181,   166,   180,   168,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   161,
     2,   163,   155,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   178,     2,   179,   175,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   182,     2,   183,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   156,   157,
   158,   159,   160,   162,   164,   170,   172,   173,   174
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   594,   598,   599,   613,   615,   619,
   620,   634,   636,   640,   641,   655,   657,   661,   662,   682,
   684,   688,   689,   709,   711,   715,   716,   736,   738,   742,
   743,   769,   771,   775,   776,   802,   804,   808,   809,   835,
   837,   841,   842,   874,   876,   880,   881,   913,   915,   919,
   920,   952,   954,   956,   958,   960,   962,   964,   966,   971,
   979,   989,   996,  1000,  1007,  1014,  1024,  1031,  1041,  1047,
  1056,  1065,  1077,  1084,  1094,  1102,  1111,  1124,  1131,  1137,
  1145,  1153,  1166,  1174,  1184,  1202,  1210,  1219,  1228,  1236,
  1248,  1254,  1263,  1276,  1285,  1308,  1329,  1338,  1347,  1353,
  1362,  1370,  1379,  1385,  1397,  1403,  1413,  1415,  1417,  1419,
  1420,  1423,  1428,  1433,  1440,  1444,  1448,  1452,  1455,  1458,
  1465,  1474,  1483,  1494,  1496,  1499,  1501,  1505,  1510,  1512,
  1521,  1534,  1543,  1556,  1565,  1578,  1590,  1606,  1608,  1611,
  1621,  1624,  1631,  1641,  1651,  1660,  1669,  1678,  1685,  1690,
  1693,  1696,  1698,  1700,  1702,  1704,  1706,  1708,  1712,  1715,
  1718,  1721,  1725,  1729,  1733,  1737,  1741,  1745,  1749,  1753,
  1757,  1761,  1765,  1769,  1773,  1777,  1783,  1788,  1793,  1798,
  1803,  1808,  1813,  1818,  1823,  1828,  1833,  1840,  1845,  1850,
  1855,  1860,  1865,  1870,  1877,  1884,  1891,  1896,  1898,  1900,
  1902,  1907,  1910,  1916,  1920,  1927,  1932,  1940,  1942,  1945,
  1948,  1952,  1956,  1968,  1978,  1986,  1994,  1995,  1999,  2001,
  2005,  2006,  2010,  2014,  2016,  2020,  2022,  2024,  2028,  2033,
  2037,  2043,  2047,  2052,  2059,  2067,  2069,  2071,  2075,  2079,
  2089,  2097,  2099,  2105,  2109,  2116,  2118,  2122,  2124,  2131,
  2136,  2141,  2148,  2155
};

static const short yyrhs[] = {   187,
     0,   186,     0,   192,     0,     1,     6,     0,     3,     0,
   166,     3,     0,   142,     0,   145,   146,   185,   185,   185,
   147,   148,   144,   185,   185,   185,   144,   185,   185,   185,
   144,   185,   185,   185,   149,   150,     0,   143,     0,     0,
   187,   188,     0,   189,     0,   191,     0,   190,     0,   116,
     6,     0,   117,     6,     0,   119,     6,     0,   118,     6,
     0,   120,     6,     0,   121,   176,   254,   181,     5,   177,
     6,     0,   122,   176,   254,   177,     6,     0,   123,   176,
     5,   181,     5,   181,   254,   181,   254,   181,     5,   181,
     5,   181,     5,   177,     6,     0,     3,     7,   100,   176,
     5,   181,   252,   177,     6,     0,     3,     7,    99,   176,
     5,   181,   250,   181,   258,   181,   249,   181,   249,   181,
   249,   181,   258,   181,   258,   181,   249,   177,     6,     0,
     3,     7,    98,   176,     5,   181,   250,   181,   250,   181,
   256,   181,   249,   181,   249,   181,   249,   181,   249,   181,
   258,   181,   258,   181,   258,   181,   258,   181,   249,   177,
     6,     0,     3,     7,   106,   176,     5,   181,     3,   181,
     3,   181,     3,   181,   249,   177,     6,     0,     3,     7,
   110,   176,     5,   181,     3,   181,   249,   177,     6,     0,
     3,     7,   127,   176,     5,   181,     3,   181,   249,   177,
     6,     0,     3,     7,   108,   176,     5,   181,   167,   181,
   167,   181,   250,   181,   249,   177,     6,     0,     3,     7,
   111,   176,     5,   181,   258,   177,     6,     0,     3,     7,
   112,   176,     5,   181,   258,   181,     3,   181,   249,   177,
     6,     0,     3,     7,   107,   176,     5,   181,     3,   177,
     6,     0,     3,     7,   113,   176,     5,   181,     3,   181,
   250,   177,     6,     0,     3,     7,   115,   176,     5,   181,
     3,   181,     3,   181,     3,   177,     6,     0,     3,     7,
   114,   176,     5,   181,   252,   177,     6,     0,     3,     7,
   109,   176,     5,   181,     3,   177,     6,     0,     3,     7,
    39,   176,     5,   181,     3,   181,     3,   177,     6,     0,
     3,     7,   125,   176,     5,   181,   258,   177,     6,     0,
     3,     7,   126,   176,     5,   181,   258,   181,     3,   177,
     6,     0,     3,     7,   124,   176,     5,   181,     3,   177,
     6,     0,     3,     7,   128,   176,     5,   181,     3,   181,
   250,   177,     6,     0,     3,     7,   129,   176,     5,   181,
     3,   181,   250,   181,   250,   177,     6,     0,     3,     7,
   136,   176,     5,   181,     3,   181,   250,   181,   250,   177,
     6,     0,     3,     7,   130,   176,     5,   181,     3,   181,
   250,   177,     6,     0,     3,     7,   140,   176,     5,   181,
     3,   181,   250,   181,   250,   177,     6,     0,     3,     7,
   131,   176,     5,   181,     3,   181,   258,   181,   258,   181,
   249,   181,   249,   177,     6,     0,     3,     7,   132,   176,
     5,   181,   258,   177,     6,     0,     3,     7,   133,   176,
   134,   181,   249,   181,     3,   177,     6,     0,     3,     7,
   135,   176,     5,   181,   258,   181,   249,   177,     6,     0,
     3,     7,   137,   176,     5,   181,     5,   181,     3,   181,
     3,   177,     6,     0,     3,     7,   138,   176,     5,   181,
     5,   181,     3,   177,     6,     0,     3,     7,   139,   176,
     3,   181,     3,   177,     6,     0,     0,   192,   193,     0,
   195,     0,   194,     0,   235,     0,   236,     0,   237,     0,
   240,     0,   241,     0,   244,     0,   247,     0,   248,     0,
   243,     0,   242,     0,    31,   176,     5,   177,     6,     0,
    31,   176,     5,   181,   260,   177,     6,     0,     4,     5,
   182,   196,   183,     6,     0,     4,     5,     4,   252,   182,
   196,   183,     6,     0,     0,   196,   198,     0,   196,   201,
     0,   196,   204,     0,   196,   207,     0,   196,   210,     0,
   196,   213,     0,   196,   216,     0,   196,   219,     0,   196,
   222,     0,   196,   225,     0,   196,   228,     0,   196,   231,
     0,   250,     0,   197,   181,   250,     0,     0,    77,   176,
   250,   181,   250,   181,   250,   177,   199,   182,   197,   183,
     6,     0,   250,     0,   200,   181,   250,     0,     0,    78,
   176,   250,   181,   250,   181,   250,   177,   202,   182,   200,
   183,     6,     0,   250,     0,   203,   181,   250,     0,     0,
    79,   176,   250,   181,   250,   181,   250,   177,   205,   182,
   203,   183,     6,     0,   250,     0,   206,   181,   250,     0,
     0,    74,   176,   250,   181,   250,   181,   250,   181,   250,
   181,   250,   181,   250,   177,   208,   182,   206,   183,     6,
     0,   250,     0,   209,   181,   250,     0,     0,    75,   176,
   250,   181,   250,   181,   250,   181,   250,   181,   250,   181,
   250,   177,   211,   182,   209,   183,     6,     0,   250,     0,
   212,   181,   250,     0,     0,    76,   176,   250,   181,   250,
   181,   250,   181,   250,   181,   250,   181,   250,   177,   214,
   182,   212,   183,     6,     0,   250,     0,   215,   181,   250,
     0,     0,    71,   176,   250,   181,   250,   181,   250,   181,
   250,   181,   250,   181,   250,   181,   250,   181,   250,   181,
   250,   177,   217,   182,   215,   183,     6,     0,   250,     0,
   218,   181,   250,     0,     0,    72,   176,   250,   181,   250,
   181,   250,   181,   250,   181,   250,   181,   250,   181,   250,
   181,   250,   181,   250,   177,   220,   182,   218,   183,     6,
     0,   250,     0,   221,   181,   250,     0,     0,    73,   176,
   250,   181,   250,   181,   250,   181,   250,   181,   250,   181,
   250,   181,   250,   181,   250,   181,   250,   177,   223,   182,
   221,   183,     6,     0,   250,     0,   224,   181,   250,     0,
     0,    68,   176,   250,   181,   250,   181,   250,   181,   250,
   181,   250,   181,   250,   181,   250,   181,   250,   181,   250,
   181,   250,   181,   250,   181,   250,   177,   226,   182,   224,
   183,     6,     0,   250,     0,   227,   181,   250,     0,     0,
    69,   176,   250,   181,   250,   181,   250,   181,   250,   181,
   250,   181,   250,   181,   250,   181,   250,   181,   250,   181,
   250,   181,   250,   181,   250,   177,   229,   182,   227,   183,
     6,     0,   250,     0,   230,   181,   250,     0,     0,    70,
   176,   250,   181,   250,   181,   250,   181,   250,   181,   250,
   181,   250,   181,   250,   181,   250,   181,   250,   181,   250,
   181,   250,   181,   250,   177,   232,   182,   230,   183,     6,
     0,     7,     0,   151,     0,   152,     0,   153,     0,   154,
     0,   172,     0,   173,     0,     4,   233,   250,     6,     0,
     4,   178,   250,   179,   233,   250,     6,     0,     4,   178,
   182,   260,   183,   179,   233,   258,     6,     0,     4,   178,
   179,     7,   258,     6,     0,     4,   234,     6,     0,     4,
   178,   250,   179,   234,     6,     0,     4,   180,     4,     7,
   264,     6,     0,     4,   178,   250,   179,   180,     4,     7,
   264,     6,     0,     4,   180,     4,   233,   250,     6,     0,
     4,   178,   250,   179,   180,     4,   233,   250,     6,     0,
     4,   180,     4,   234,     6,     0,     4,   178,   250,   179,
   180,     4,   234,     6,     0,     4,   180,    86,   180,     4,
     7,   261,     6,     0,     4,   178,   250,   179,   180,    86,
   180,     4,     7,   261,     6,     0,     4,   180,    87,     7,
   262,     6,     0,     4,   178,   250,   179,   180,    87,     7,
   262,     6,     0,    36,   176,   250,   177,     7,   252,     6,
     0,    51,    36,   176,   250,   177,     7,   258,     6,     0,
    66,    36,   258,     7,   182,   250,   181,   250,   181,   250,
   183,     6,     0,    43,    44,   258,     7,   250,     6,     0,
    36,   182,   250,   183,     6,     0,    39,   176,   250,   177,
     7,   258,     6,     0,    41,   176,   250,   177,     7,   258,
     6,     0,    66,    39,   258,     7,   182,   250,   181,   250,
   181,   250,   183,     6,     0,    37,   176,   250,   177,     7,
   258,     6,     0,    37,   176,   250,   177,     7,   258,    47,
   252,     6,     0,    45,   176,   250,   177,     7,   182,   250,
   181,   250,   181,     5,   181,     5,   181,     5,   183,     6,
     0,    38,   176,   250,   177,     7,   258,     6,     0,    51,
    39,   176,   250,   177,     7,   258,     6,     0,    39,    61,
   176,   250,   177,     7,   258,     6,     0,    80,   176,   250,
   177,     7,   258,     6,     0,    81,   176,   250,   177,     7,
   258,    85,   258,    82,   250,     6,     0,    39,   182,   250,
   183,     6,     0,    47,    40,   176,   250,   177,     7,   258,
     6,     0,   141,    40,   176,   250,   177,     7,   182,   250,
   181,   258,   183,     6,     0,    48,    40,   176,   250,   177,
     7,   258,     6,     0,    81,    40,    83,    84,   176,   250,
   177,     7,   256,    85,   182,   258,   181,   258,   183,    82,
   182,   250,   181,   250,   183,     6,     0,    81,    40,   176,
   250,   177,     7,   256,    85,   182,   258,   181,   258,   183,
    82,   182,   250,   181,   250,   183,     6,     0,    51,    40,
   176,   250,   177,     7,   258,     6,     0,    40,    61,   176,
   250,   177,     7,   258,     6,     0,    40,   182,   250,   183,
     6,     0,    50,    42,   176,   250,   177,     7,   258,     6,
     0,    42,   176,   250,   177,     7,   258,     6,     0,    51,
    42,   176,   250,   177,     7,   258,     6,     0,    56,   252,
   182,   238,   183,     0,    55,   182,   252,   181,   252,   181,
   250,   183,   182,   238,   183,     0,    57,   252,   182,   238,
   183,     0,    58,   182,   252,   181,   250,   183,   182,   238,
   183,     0,   240,     0,   239,     0,   237,     0,     0,   239,
   236,     0,    60,   182,   239,   183,     0,    63,   182,   239,
   183,     0,    63,     4,   178,   250,   179,     6,     0,    63,
    97,     6,     0,     4,   264,     6,     0,     4,   250,     6,
     0,    93,     6,     0,    35,     6,     0,    88,   176,   250,
     8,   250,   177,     0,    88,   176,   250,     8,   250,     8,
   250,   177,     0,    88,     4,    89,   182,   250,     8,   250,
   183,     0,    88,     4,    89,   182,   250,     8,   250,     8,
   250,   183,     0,    90,     0,    96,     4,     0,    94,     0,
    95,     4,     6,     0,    91,   176,   250,   177,     0,    92,
     0,    59,    36,   182,   250,   181,   252,   183,     6,     0,
    59,    36,   182,   250,   181,   252,   181,   252,   181,   250,
   183,     6,     0,    59,    39,   182,   250,   181,   252,   183,
     6,     0,    59,    39,   182,   250,   181,   252,   181,   252,
   181,   250,   183,     6,     0,    59,    40,   182,   250,   181,
   252,   183,     6,     0,    59,    40,   182,   250,   181,   252,
   181,   252,   181,   250,   183,     6,     0,    59,    40,   182,
   250,   181,   252,   183,   182,   245,   183,     6,     0,    59,
    40,   182,   250,   181,   252,   181,   252,   181,   250,   183,
   182,   245,   183,     6,     0,   246,     0,   245,   246,     0,
    67,   182,   258,   181,   258,   181,   258,   183,     6,     0,
    62,     6,     0,    49,    39,   258,     7,   250,     6,     0,
    49,    39,   258,     7,   250,    52,    54,   250,     6,     0,
    49,    39,   258,     7,   250,    52,    53,   250,     6,     0,
    49,    40,   182,   250,   183,     7,   258,     6,     0,    46,
    40,   182,   250,   183,     7,   258,     6,     0,    49,    42,
   182,   250,   183,     7,   258,     6,     0,    62,    40,   258,
     7,   250,     6,     0,    62,    40,   258,     6,     0,    64,
     6,     0,    65,     6,     0,   101,     0,   102,     0,   103,
     0,   104,     0,   105,     0,   251,     0,   176,   250,   177,
     0,   166,   250,     0,   165,   250,     0,   171,   250,     0,
   250,   166,   250,     0,   250,   165,   250,     0,   250,   167,
   250,     0,   250,   168,   250,     0,   250,   169,   250,     0,
   250,   175,   250,     0,   250,   161,   250,     0,   250,   163,
   250,     0,   250,   162,   250,     0,   250,   164,   250,     0,
   250,   158,   250,     0,   250,   159,   250,     0,   250,   157,
   250,     0,   250,   156,   250,     0,   250,   155,   250,     8,
   250,     0,    10,   176,   250,   177,     0,    11,   176,   250,
   177,     0,    12,   176,   250,   177,     0,    13,   176,   250,
   177,     0,    14,   176,   250,   177,     0,    15,   176,   250,
   177,     0,    16,   176,   250,   177,     0,    17,   176,   250,
   177,     0,    18,   176,   250,   177,     0,    20,   176,   250,
   177,     0,    21,   176,   250,   181,   250,   177,     0,    22,
   176,   250,   177,     0,    23,   176,   250,   177,     0,    24,
   176,   250,   177,     0,    25,   176,   250,   177,     0,    26,
   176,   250,   177,     0,    27,   176,   250,   177,     0,    28,
   176,   250,   181,   250,   177,     0,    29,   176,   250,   181,
   250,   177,     0,    30,   176,   250,   181,   250,   177,     0,
    19,   176,   250,   177,     0,     3,     0,     9,     0,     4,
     0,     4,   178,   250,   179,     0,     4,   234,     0,     4,
   178,   250,   179,   234,     0,     4,   180,     4,     0,     4,
   178,   250,   179,   180,     4,     0,     4,   180,     4,   234,
     0,     4,   178,   250,   179,   180,     4,   234,     0,   253,
     0,   166,   252,     0,   165,   252,     0,   252,   166,   252,
     0,   252,   165,   252,     0,   182,   250,   181,   250,   181,
   250,   181,   250,   181,   250,   183,     0,   182,   250,   181,
   250,   181,   250,   181,   250,   183,     0,   182,   250,   181,
   250,   181,   250,   183,     0,   176,   250,   181,   250,   181,
   250,   177,     0,     0,   176,   255,   177,     0,     5,     0,
   255,   181,     5,     0,     0,   182,   257,   183,     0,   176,
   257,   177,     0,   258,     0,   257,   181,   258,     0,   250,
     0,   259,     0,   182,   260,   183,     0,   166,   182,   260,
   183,     0,   250,     8,   250,     0,   250,     8,   250,     8,
   250,     0,     4,   178,   179,     0,   166,     4,   178,   179,
     0,     4,   178,   182,   260,   183,   179,     0,   166,     4,
   178,   182,   260,   183,   179,     0,   250,     0,   259,     0,
   260,   181,   250,     0,   260,   181,   259,     0,   182,   250,
   181,   250,   181,   250,   181,   250,   183,     0,   182,   250,
   181,   250,   181,   250,   183,     0,     4,     0,     4,   180,
    86,   180,     4,     0,   182,   263,   183,     0,     4,   178,
   250,   179,   180,    87,     0,   261,     0,   263,   181,   261,
     0,     5,     0,    33,   176,   264,   181,   264,   177,     0,
    34,   176,   264,   177,     0,    32,   176,   264,   177,     0,
    32,   176,   264,   181,   260,   177,     0,    32,   176,     4,
   180,     4,   177,     0,    32,   176,     4,   178,   250,   179,
   180,     4,   177,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   153,   155,   156,   157,   164,   166,   169,   177,   191,   203,
   205,   208,   210,   211,   214,   220,   225,   226,   227,   230,
   234,   237,   243,   248,   254,   262,   267,   271,   277,   282,
   286,   291,   295,   298,   303,   307,   311,   315,   320,   324,
   327,   331,   335,   339,   343,   347,   351,   354,   358,   361,
   365,   368,   377,   381,   387,   389,   390,   391,   392,   393,
   394,   395,   396,   397,   398,   399,   402,   407,   436,   442,
   449,   454,   455,   456,   457,   458,   459,   460,   461,   462,
   463,   464,   465,   468,   471,   475,   481,   487,   490,   494,
   500,   506,   509,   513,   519,   525,   528,   532,   540,   546,
   549,   553,   561,   567,   570,   574,   582,   588,   591,   595,
   607,   613,   616,   620,   632,   638,   641,   645,   657,   663,
   666,   670,   683,   689,   692,   696,   709,   715,   718,   722,
   735,   747,   749,   750,   751,   752,   754,   756,   758,   789,
   823,   870,   885,   894,   909,   921,   935,   958,   982,   994,
  1008,  1020,  1034,  1050,  1072,  1083,  1089,  1108,  1119,  1127,
  1133,  1139,  1158,  1164,  1180,  1187,  1193,  1199,  1205,  1211,
  1230,  1242,  1248,  1267,  1288,  1296,  1302,  1308,  1314,  1326,
  1332,  1338,  1350,  1356,  1361,  1366,  1373,  1375,  1376,  1379,
  1384,  1395,  1413,  1421,  1426,  1437,  1505,  1525,  1529,  1549,
  1565,  1579,  1604,  1629,  1655,  1661,  1666,  1671,  1675,  1685,
  1691,  1697,  1701,  1705,  1709,  1713,  1718,  1725,  1729,  1734,
  1755,  1765,  1784,  1802,  1820,  1842,  1863,  1884,  1898,  1919,
  1924,  1935,  1937,  1938,  1939,  1940,  1943,  1945,  1946,  1947,
  1948,  1949,  1950,  1951,  1952,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1995,  2000,  2004,
  2015,  2032,  2043,  2062,  2078,  2094,  2110,  2127,  2132,  2136,
  2140,  2144,  2149,  2154,  2158,  2162,  2168,  2172,  2177,  2181,
  2186,  2190,  2194,  2200,  2206,  2213,  2219,  2223,  2227,  2237,
  2244,  2255,  2269,  2285,  2305,  2329,  2335,  2339,  2343,  2354,
  2359,  2370,  2375,  2393,  2398,  2411,  2417,  2423,  2428,  2436,
  2449,  2453,  2478,  2492
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tStrCat","tStrPrefix","tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface",
"tSpline","tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane",
"tRuled","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarLine","tVectorLine","tTensorLine","tScalarPoint","tVectorPoint",
"tTensorPoint","tBSpline","tNurbs","tOrder","tWith","tBounds","tKnots","tColor",
"tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall",
"tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"NumericAffectation","NumericIncrement","Affectation","Shape","Transform","MultipleShape",
"ListOfShapes","Duplicata","Delete","Command","Loop","Extrude","ExtrudeParameters",
"ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   184,   184,   184,   184,   185,   185,   186,   186,   186,   187,
   187,   188,   188,   188,   189,   189,   189,   189,   189,   190,
   190,   190,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   192,   192,   193,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   194,   194,   195,   195,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   197,   197,   199,   198,   200,   200,   202,
   201,   203,   203,   205,   204,   206,   206,   208,   207,   209,
   209,   211,   210,   212,   212,   214,   213,   215,   215,   217,
   216,   218,   218,   220,   219,   221,   221,   223,   222,   224,
   224,   226,   225,   227,   227,   229,   228,   230,   230,   232,
   231,   233,   233,   233,   233,   233,   234,   234,   235,   235,
   235,   235,   235,   235,   235,   235,   235,   235,   235,   235,
   235,   235,   235,   235,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   237,   237,   237,   237,   238,   238,   238,   239,
   239,   240,   241,   241,   241,   242,   242,   242,   242,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   244,
   244,   244,   244,   244,   244,   244,   244,   245,   245,   246,
   246,   247,   247,   247,   247,   247,   247,   247,   247,   248,
   248,   249,   249,   249,   249,   249,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   252,   252,   252,
   252,   252,   253,   253,   253,   253,   254,   254,   255,   255,
   256,   256,   256,   257,   257,   258,   258,   258,   258,   259,
   259,   259,   259,   259,   259,   260,   260,   260,   260,   261,
   261,   261,   261,   262,   262,   263,   263,   264,   264,   264,
   264,   264,   264,   264
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     7,     8,    12,     6,     5,     7,
     7,    12,     7,     9,    17,     7,     8,     8,     7,    11,
     5,     8,    12,     8,    22,    20,     8,     8,     5,     8,
     7,     8,     5,    11,     5,     9,     1,     1,     1,     0,
     2,     4,     4,     6,     3,     3,     3,     2,     2,     6,
     8,     8,    10,     1,     2,     1,     3,     4,     1,     8,
    12,     8,    12,     8,    12,    11,    15,     1,     2,     9,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     4,     2,     5,     3,     6,     4,     7,     1,     2,     2,
     3,     3,    11,     9,     7,     7,     0,     3,     1,     3,
     0,     3,     3,     1,     3,     1,     1,     3,     4,     3,
     5,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     6,     4,
     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,     0,   209,     0,   206,     0,
     0,     0,    54,    56,    55,    57,    58,    59,    60,    61,
    66,    65,    62,    63,    64,     5,     0,     0,     0,    15,
    16,    18,    17,    19,   297,   297,     0,   278,   280,   328,
   132,   279,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   133,   134,   135,   136,
     0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
     0,   237,     0,     0,   199,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   288,     0,     0,     0,     0,
     0,   190,     0,     0,     0,   190,   230,   231,     0,     0,
     0,     0,     0,     0,     0,     0,   198,     0,   205,     0,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   282,     0,
    71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   240,   239,   241,     0,     0,
     0,     0,     0,     0,     0,     0,   143,   197,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   280,     0,     0,   306,
     0,   307,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   290,   289,     0,     0,     0,
     0,   190,   190,     0,     0,     0,     0,     0,     0,     0,
   195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   207,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   328,     0,     0,     0,   238,
     0,     0,   316,   317,     0,     0,   132,     0,     0,     0,
     0,   139,     0,   255,   254,   252,   253,   248,   250,   249,
   251,   243,   242,   244,   245,   246,   247,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   280,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   292,   291,   189,     0,   188,   187,     0,     0,     0,
     0,     0,   192,   191,   229,     0,     0,   193,     0,     0,
     0,     0,     0,     0,     0,     0,   208,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   298,
     0,     0,    21,     0,   281,   286,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   277,   266,     0,   268,   269,   270,   271,   272,   273,
     0,     0,     0,     0,     0,   331,     0,     0,   330,     0,
     0,     0,     0,     0,     0,     0,     0,   149,     0,     0,
     0,     0,     0,    67,     0,     0,   159,     0,     0,     0,
     0,   171,     0,   179,     0,     0,   312,     0,     0,     0,
   308,   310,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   183,   185,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   300,     0,   297,     0,
   283,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    69,     0,     0,     0,     0,     0,
     0,     0,     0,   142,   318,   319,     0,     0,     0,     0,
     0,   144,   145,   147,     0,     0,   322,     0,   326,     0,
   153,   256,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   313,     0,   309,     0,   158,     0,     0,     0,
     0,   222,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   228,   194,     0,
     0,     0,     0,   301,     0,     0,     0,   200,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     0,     0,     0,     0,     0,    20,     0,   285,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   267,   274,   275,   276,     0,   333,   332,   329,     0,
   132,     0,     0,     0,     0,   140,     0,     0,     0,     0,
     0,   324,    68,   155,   163,     0,   166,     0,   160,     0,
   161,   181,     0,     0,   311,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,     0,     0,     0,     0,     0,     0,     0,     0,
   169,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   297,   287,    70,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     0,     0,   151,     0,     0,     0,   327,     0,   168,   178,
   314,     0,     0,   226,   172,   174,     0,     0,   225,   227,
   180,   156,   167,   177,   182,     0,   296,     0,   295,     0,
     0,   210,     0,   212,     0,   214,     0,     0,     0,   301,
     0,   304,     0,     0,     0,     0,   202,   201,     0,     0,
     0,     0,     0,    23,     0,    32,     0,    36,     0,    30,
     0,     0,    35,     0,    40,    38,     0,     0,     0,     0,
     0,     0,    47,     0,     0,     0,     0,     0,    52,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,   146,   148,     0,   154,     0,
     0,     0,   164,   315,     0,   224,   223,   190,     0,   186,
     0,     0,     0,     0,     0,     0,   218,     0,     0,     0,
   303,     0,   302,     0,     0,     0,     0,     0,     0,   301,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   334,     0,   325,   323,     0,     0,     0,     0,
   294,     0,     0,     0,   221,     0,     0,   219,     0,     0,
     0,   305,     0,     0,   203,     0,     0,    37,     0,     0,
     0,     0,    27,     0,    33,     0,    39,    28,    41,     0,
    44,     0,    48,    49,     0,     0,    51,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   152,     0,     0,   184,     0,     0,     0,     0,     0,
   216,     0,     0,     0,     0,   170,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
    90,    94,     0,   321,     0,   293,   211,   213,   215,     0,
     0,   157,   162,     0,     0,   173,     0,     0,     0,     0,
     0,    31,    34,    42,     0,    43,    50,    45,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
     0,     0,     0,     0,     0,    26,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    84,
     0,    88,     0,    92,     0,   217,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    46,    22,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    85,    87,    89,
    91,    93,    95,   165,   220,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    98,   102,   106,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   176,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    96,     0,
   100,     0,   104,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
    24,     0,     0,     0,     0,     0,     0,    97,    99,   101,
   103,   105,   107,     0,     0,     0,     0,   110,   114,   118,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     0,   112,     0,   116,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   111,
   113,   115,   117,   119,     0,   122,   126,   130,    25,     0,
     0,     0,     0,     0,     0,     0,   120,     0,   124,     0,
   128,     0,     0,     0,     0,     0,     0,   121,   123,   125,
   127,   129,   131,     0,     0,     0
};

static const short yydefgoto[] = {  1524,
    78,     5,     6,    19,    20,    21,    22,     7,    63,    64,
    65,   383,  1299,   551,  1249,  1301,   552,  1250,  1303,   553,
  1251,  1408,   554,  1381,  1410,   555,  1382,  1412,   556,  1383,
  1469,   557,  1455,  1471,   558,  1456,  1473,   559,  1457,  1506,
   560,  1500,  1508,   561,  1501,  1510,   562,  1502,   129,   229,
    66,   484,   474,   475,   476,   477,    70,    71,    72,    73,
  1066,  1067,    74,    75,   809,   300,   132,   165,   166,   224,
   376,   895,   991,   992,   302,   415,   729,   602,   730,   133
};

static const short yypact[] = {  2055,
    29,-32768,-32768,  -123,-32768,   261,  2187,-32768,    17,    55,
    91,   105,   123,   130,   139,  -103,    -9,    31,-32768,-32768,
-32768,-32768,  1491,    69,   184,  -143,    97,   102,   -34,   -29,
   108,   154,   155,   163,   302,   312,   325,   311,   333,   232,
   194,     3,     3,   205,   358,   208,   375,     4,   420,   423,
   107,   269,   -24,    21,-32768,   279,-32768,   455,-32768,   453,
   461,   430,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   468,    17,  2209,-32768,
-32768,-32768,-32768,-32768,   307,   307,   479,-32768,    62,    10,
-32768,-32768,   373,   380,   381,   400,   408,   418,   422,   425,
   426,   427,   429,   435,   445,   446,   447,   452,   454,   456,
   457,   462,   463,   464,   465,   466,-32768,-32768,-32768,-32768,
    65,    65,    65,-32768,-32768,    65,   483,    41,    65,   484,
   862,-32768,   556,   595,-32768,    65,    65,    65,    65,   467,
    65,    65,   469,    65,    65,    65,   765,    65,   449,   470,
   471,   765,   473,   474,   476,   477,   481,   482,   485,     3,
     3,     3,    65,    65,   -58,-32768,     5,     3,   478,   486,
   487,-32768,   765,   459,   623,-32768,-32768,-32768,   765,   765,
    65,   -64,    65,   555,    65,    65,-32768,   644,-32768,   488,
-32768,    17,   490,   491,   509,   510,   511,   513,   514,   515,
   516,   518,   519,   524,   525,   526,   528,   530,   535,   546,
   548,   552,   553,   554,   557,   558,   559,   560,   561,   565,
   570,   571,   658,   308,   550,   567,    65,   727,-32768,     3,
-32768,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    33,    38,    38,   574,   574,   574,  4987,   725,
  1555,  4862,   182,   572,   743,  1037,-32768,-32768,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,-32768,   -22,  5010,  1578,  5033,  5056,    65,
  5079,  2224,    65,  2247,  5102,  5125,   213,  1108,  1555,  1189,
   744,-32768,  5148,    65,    65,    65,   748,    65,    65,    65,
    65,    65,    65,    65,  -118,-32768,-32768,  2615,  2636,     3,
     3,   314,   314,   140,    65,    65,    65,  1888,   294,    65,
-32768,  1905,   749,   750,  5171,   674,    65,  5194,   577,  1664,
  5217,-32768,    65,   613,   757,   758,   759,   760,   761,   762,
   766,   767,   768,   791,   792,   794,   800,   810,   811,   812,
   813,   816,   817,   818,   819,   820,   821,   693,   824,   825,
   831,   844,   847,   849,-32768,   148,   850,   846,   851,  4887,
   150,   114,   -18,  5240,  5263,  5286,  5309,  5332,  5355,  5378,
  5401,  5424,  5447,  5470,  2657,  5493,  5516,  5539,  5562,  5585,
  5608,  2678,  2699,  2720,  -136,-32768,   183,   677,   680,-32768,
   765,  1583,  1189,-32768,   -46,   165,    38,    65,   853,   856,
    13,-32768,  1686,   424,   551,   313,   313,   274,   274,   274,
   274,   244,   244,   574,   574,   574,   574,   855,  1555,   857,
   859,   863,   864,  5631,   865,   867,  5654,   868,   870,   871,
   517,   245,  1555,    56,    65,    65,   873,  2270,  5677,  5700,
    65,  2293,  2316,  5723,  5746,  5769,  5792,  5815,     3,    65,
    65,-32768,-32768,-32768,   679,  1958,-32768,   686,    65,  2741,
  2762,  2783,-32768,-32768,-32768,    65,  4912,-32768,   681,   699,
   875,   707,  5838,   877,    65,    65,-32768,  5861,   737,   694,
   705,   706,   709,   710,   711,   712,   713,   714,   718,   719,
   720,   721,   723,   724,   728,   729,   742,   745,   746,   751,
   753,   754,   756,   764,   769,   770,   771,   772,   773,-32768,
   883,   731,-32768,   775,   -63,-32768,-32768,   730,   763,   782,
   783,   784,   785,   786,   787,   788,   789,   790,   793,   918,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    65,-32768,-32768,-32768,-32768,-32768,-32768,
    65,    65,    65,    65,   921,-32768,  1555,    38,-32768,   923,
  1555,   795,    45,    65,   932,   936,  1058,-32768,   939,   801,
    14,   937,    65,-32768,   211,     3,-32768,   765,   765,   941,
   765,-32768,   960,-32768,   765,   765,-32768,  1555,   986,   253,
-32768,  1720,  1102,   796,   961,   964,   965,   645,   968,   973,
   974,   975,   976,   978,   980,   143,  2804,  2825,-32768,-32768,
  2339,     3,     3,     3,  1152,   985,    65,    65,   765,    65,
   987,   765,  1742,   676,  1015,   848,   990,    65,    65,     3,
  1029,  1030,   869,  1031,  1032,   765,   765,  1038,     3,  1039,
  1041,   765,   765,  1044,  1045,  1046,  1047,  1048,   765,   349,
   765,  1050,  1049,  1051,  1052,  1054,-32768,  1053,   307,  1057,
-32768,   331,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,-32768,  5884,  5907,  5930,  5953,  4937,
   881,   243,   885,-32768,  1189,-32768,    23,   195,   886,  1056,
  1459,-32768,-32768,-32768,    14,    65,   887,    65,-32768,   254,
-32768,  6459,  1063,    35,    58,  1064,   765,  1065,   765,  1066,
  1068,   263,-32768,  1555,-32768,    65,-32768,    65,   765,   765,
   765,-32768,   128,   765,   765,   765,   765,   765,   765,   765,
    65,    65,    65,   893,   -32,   -27,   132,-32768,-32768,  2846,
  2867,  1071,  5976,   -80,  1005,    65,    65,-32768,   909,    17,
   911,  2888,  2909,    67,   912,   919,   914,   922,   917,   924,
   925,   926,   100,   928,   927,   933,   934,   958,   959,   962,
   963,   966,   969,-32768,-32768,-32768,-32768,-32768,   967,   972,
   979,   982,   983,   977,   988,-32768,   989,   150,  1094,  2930,
  2951,  2972,  2993,  3014,  3035,  3056,  3077,  3098,  3119,  3140,
  3161,-32768,-32768,-32768,-32768,   970,-32768,-32768,-32768,   765,
    38,    65,  1096,  1099,    13,-32768,  1107,  4962,  1019,  3182,
    14,-32768,-32768,-32768,-32768,     3,-32768,  1135,-32768,  1136,
-32768,-32768,   935,   277,  6459,  3203,  1139,  1143,  1150,    65,
    65,  1153,  1155,  1160,  1161,  1165,  1166,  1167,  2362,  5999,
  1549,   314,     3,  1168,     3,  1169,     3,     9,    65,    65,
-32768,  1170,   765,   765,  1091,   765,   451,  6022,    65,    17,
  1184,    65,   765,  1182,  1186,  1185,  1040,  1203,   349,  1204,
  1215,    65,  1222,  1226,  1224,  1225,  1229,   349,    65,    65,
    65,   765,  1228,  1232,   349,    65,  1233,  1234,  1235,    65,
   307,-32768,-32768,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,  1236,  1248,  1249,  1520,-32768,
  1265,  1250,-32768,  1059,  1095,    65,-32768,    40,-32768,-32768,
-32768,  1097,    65,-32768,-32768,-32768,  1613,  1634,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1098,-32768,    65,-32768,  1100,
   145,-32768,   175,-32768,   192,-32768,   141,  3224,  3245,   -80,
   250,-32768,   283,  1103,  1196,    65,-32768,-32768,  3266,    17,
  1104,  3287,  1101,-32768,  1106,-32768,  1110,-32768,  1111,-32768,
  1121,  6045,-32768,  1123,-32768,-32768,  1112,  1129,  6068,  3308,
  6091,  1131,-32768,  1145,  1146,  3329,  1144,  1147,-32768,  3350,
  1148,  3371,  3392,  3413,  3434,  3455,  3476,  3497,  3518,  3539,
  3560,  3581,  3602,  1149,-32768,-32768,-32768,    14,-32768,  1241,
  1326,  3623,-32768,-32768,  3644,-32768,-32768,   314,  2129,-32768,
    65,    65,    65,  1325,  1154,   -36,-32768,    65,    65,  1247,
-32768,   765,-32768,   765,    65,  2385,   765,  1191,  1331,   -80,
   349,  1346,    65,  1353,   349,  1354,  1359,  1357,  1369,  1370,
    65,  1371,   765,  1372,  1373,    65,  1362,  1374,    65,  1376,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,-32768,  1377,-32768,-32768,    65,  1379,  1199,    65,
-32768,  2408,  2431,  2454,-32768,   765,  1380,-32768,  2477,  2500,
  1205,-32768,  1207,  1649,-32768,  1202,    17,-32768,  1208,  1209,
  1210,  3665,-32768,  1216,-32768,  1230,-32768,-32768,-32768,  6114,
-32768,  1211,-32768,-32768,  6137,  1237,-32768,  6160,  1220,  3686,
  3707,  3728,  3749,  3770,  3791,  3812,  3833,  3854,  6183,  6206,
  6229,-32768,  2195,  1238,-32768,  2523,  1397,  1403,    16,  1239,
-32768,  1404,  1405,   765,   765,-32768,  1409,    17,   349,   349,
   349,   349,  1410,  1411,  1412,   349,  1415,  1419,  1420,  1422,
    65,    65,    65,    65,    65,    65,    65,    65,    65,-32768,
-32768,-32768,    65,-32768,  1423,-32768,-32768,-32768,-32768,   141,
   765,-32768,-32768,  1251,  1246,-32768,    17,  1252,  1253,  1254,
  1258,-32768,-32768,-32768,  1261,-32768,-32768,-32768,  1262,  3875,
  3896,  3917,  3938,  3959,  3980,  4001,  4022,  4043,  1263,  1266,
  1268,  2546,  1270,   -33,  1271,   765,  1348,  1300,   349,   349,
  1441,  1451,   349,  1454,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,-32768,  1456,  1460,   765,
  1279,  1285,    17,  1287,  1290,-32768,-32768,  1295,  1296,  4064,
  4085,  4106,  4127,  4148,  4169,  4190,  4211,  4232,   335,  6459,
   336,  6459,   341,  6459,  1291,-32768,  1292,  1395,    65,    17,
   349,   765,  1473,  1477,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,  1478,    65,  1479,    65,  1480,  1481,
  1482,  1308,  4253,    17,  1311,  1316,-32768,-32768,  4274,  4295,
  4316,  4337,  4358,  4379,  6252,  6275,  6298,  6459,-32768,  6459,
-32768,  6459,-32768,-32768,-32768,    65,    65,  1350,   349,   765,
    65,    65,    65,    65,    65,    65,-32768,-32768,-32768,  4400,
  2569,  1378,  1341,  1349,  4421,  4442,  4463,  4484,  4505,  4526,
  1345,  1347,  1351,    65,  1525,-32768,   765,   349,    65,    65,
    65,    65,    65,    65,    65,    65,    65,  2592,-32768,  1356,
  1355,  4547,  4568,  4589,  4610,  4631,  4652,   342,  6459,   367,
  6459,   371,  6459,  1529,   765,  1532,    65,    65,    65,    65,
    65,    65,    65,  1533,    65,  1534,    65,  1535,-32768,  1361,
-32768,  4673,  4694,  4715,  6321,  6344,  6367,  6459,-32768,  6459,
-32768,  6459,-32768,   765,    65,    65,    65,-32768,-32768,-32768,
  1363,  4736,  4757,  4778,  1367,  1368,  1381,   765,    65,    65,
    65,    65,    65,    65,  1364,  4799,  4820,  4841,   372,  6459,
   382,  6459,   386,  6459,   349,    65,    65,    65,    65,  1537,
    65,  1554,    65,  1556,  1384,  6390,  6413,  6436,  6459,-32768,
  6459,-32768,  6459,-32768,  1582,-32768,-32768,-32768,-32768,  1407,
  1408,  1447,    65,    65,    65,   391,  6459,   392,  6459,   396,
  6459,    65,  1585,    65,  1624,    65,  1625,  6459,-32768,  6459,
-32768,  6459,-32768,  1632,  1633,-32768
};

static const short yypgoto[] = {-32768,
   -72,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1109,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -250,   -20,
-32768,  1628,  1629,  -316,   -15,  1631,-32768,-32768,-32768,-32768,
   419, -1061,-32768,-32768,  -897,   -23,-32768,   101,-32768,   -85,
-32768,  -954,   747,   797,  -259,  -275,  -721,   802,-32768,  -244
};


#define	YYLAST		6634


static const short yytable[] = {   131,
   225,   414,   130,   847,  1128,   192,   478,   174,   407,   408,
   409,  1009,   418,   230,   986,   182,   600,   727,   336,    76,
  1018,  1219,     9,   454,   184,  1064,   140,  1025,  1064,    91,
  1065,   143,   136,  1065,     8,  1070,   405,   406,   137,   414,
   854,   584,   406,   585,   263,  1053,   320,   321,   718,   538,
   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,
   549,    79,   469,   855,   114,   115,   116,    88,    89,   114,
   115,   116,    85,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   893,    80,   256,   257,   258,
   175,   894,   259,   262,   856,   266,   320,   321,   124,   125,
    81,   337,   286,   287,   288,   289,   690,   291,   292,   344,
   294,   295,   296,   322,   303,  1139,   264,   265,    82,   957,
   719,   720,   320,   321,   591,    83,   592,   320,   321,   318,
   319,   141,   179,   167,    84,   180,  1127,   142,   883,  1279,
   884,   183,   144,   885,   438,   886,   328,   335,   439,   338,
   332,   340,   341,   605,   550,   594,    86,   161,   162,   320,
   321,    91,   596,   117,   118,   119,   120,   620,   163,   414,
   870,   871,    77,  1140,   164,   176,   323,  1144,   417,   135,
   987,   231,  1128,   414,   601,   728,   185,  1220,   147,   320,
   321,   841,  1064,   380,   320,   321,    87,  1065,   384,   385,
   386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
   396,   397,   398,   399,   400,   401,   402,   403,   404,   121,
   122,   320,   321,   124,   125,   123,   591,   413,   621,   227,
   126,   228,   419,   904,   134,   423,   424,   425,   426,   427,
   428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
   315,   316,   317,    10,   320,   321,   444,   156,   324,   447,
   157,   158,   138,   159,   257,   413,   913,   139,   320,   321,
   458,   459,   460,   145,   462,   463,   464,   465,   466,   467,
   468,  1228,  1229,  1230,  1231,   537,   320,   321,  1235,   485,
   486,   480,   481,   482,   320,   321,   487,   320,   321,   320,
   321,   712,   887,   493,   888,   117,   118,   119,   120,   498,
   479,   124,   125,   761,   530,  1061,  1114,   414,   531,   146,
   382,   716,   117,   118,   119,   120,   124,   125,   148,   320,
   321,   149,   742,   713,   593,   117,   118,   119,   120,   152,
   153,   150,   154,   124,   125,  1062,   320,   321,   414,   586,
   536,  1284,  1285,   587,   151,  1288,   124,   125,    41,    42,
    43,    44,  1063,    46,   155,   160,    11,    12,    13,    14,
    15,    16,    17,    18,   124,   125,   168,   733,   257,   172,
   451,   591,   228,   169,   597,   595,   170,   171,   538,   539,
   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
   280,   281,   282,  1335,   173,   413,   124,   125,   283,   838,
   472,   473,   619,   591,   228,   177,  1071,   380,   178,   413,
  1072,   622,   623,   591,   851,   745,   852,   628,   278,   279,
   280,   281,   282,   591,   181,   863,   637,   638,   283,   804,
   805,   806,   807,   808,   186,   641,   188,   591,   996,   962,
   187,  1373,   645,  1072,   189,  1073,   840,   842,   864,   190,
   191,   653,   654,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   223,   226,   414,    88,    89,   283,   377,   267,
  1401,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   819,   691,  1324,  1326,  1325,  1327,    88,
    89,  1328,  1423,  1329,  1424,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,  1425,   232,  1426,
   706,  1427,  1479,  1428,  1480,   233,   234,   707,   708,   709,
   710,   284,  1481,   413,  1482,   980,  1483,   715,  1484,   636,
   721,  1512,  1514,  1513,  1515,   235,  1516,  1485,  1517,   732,
   271,   272,   273,   236,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   237,   413,   380,   948,   238,   283,   285,
   239,   240,   241,   817,   242,   269,   270,   271,   272,   273,
   243,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   244,   245,   246,   770,   771,   283,   773,   247,   331,   248,
   304,   249,   250,   997,   782,   783,   330,   251,   252,   253,
   254,   255,   290,   339,   293,   305,   306,   121,   122,   342,
   752,   310,   311,   123,   308,   309,   312,   313,   126,   325,
   314,   260,   375,   343,   261,   345,   346,   326,   327,   820,
   821,   822,   823,   824,   825,   826,   827,   828,   829,   830,
   831,   121,   122,   777,   347,   348,   349,   123,   350,   351,
   352,   353,   126,   354,   355,   617,   753,   843,   618,   356,
   357,   358,   848,   359,   850,   360,   734,   900,   272,   273,
   361,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   413,   362,   865,   363,   866,   283,   378,   364,   365,   366,
   381,   411,   367,   368,   369,   370,   371,   879,   880,   881,
   372,  1119,   765,   766,   767,   373,   374,   379,   283,   421,
   456,   420,   897,   898,   461,   489,   490,   492,   495,   499,
   784,   500,   501,   502,   503,   504,   505,    88,   297,   793,
   506,   507,   508,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   509,   510,   932,   511,   269,
   270,   271,   272,   273,   512,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   513,   514,   515,   516,   949,   283,
   517,   518,   519,   520,   521,   522,   523,  1000,   524,   525,
   269,   270,   271,   272,   273,   526,   274,   275,   276,   277,
   278,   279,   280,   281,   282,  1031,   967,   968,   527,   528,
   283,   533,   778,   529,   532,   534,   589,   588,   598,   599,
   604,   639,   647,   606,   607,   988,   989,   268,   640,   608,
   609,   611,   612,   614,   657,   999,   615,   616,  1002,   624,
   648,   649,   650,   652,   656,   658,   659,   687,  1012,   660,
   661,   662,   663,   664,   665,  1019,  1020,  1021,   666,   667,
   668,   669,  1026,   670,   671,   693,  1030,   688,   672,   673,
  1032,  1033,  1034,  1035,  1036,  1037,  1038,  1039,  1040,  1041,
  1042,  1043,   674,   705,   711,   675,   676,  1078,   714,   121,
   298,   677,  1052,   678,   679,   123,   680,   722,   694,  1055,
   126,   723,   731,   301,   681,   725,   299,   737,   307,   682,
   683,   684,   685,   686,  1059,   689,   958,   695,   696,   697,
   698,   699,   700,   701,   702,   703,   739,   749,   704,   329,
   750,   751,  1076,   717,   754,   333,   334,   748,   726,   755,
   756,   757,   758,   981,   759,   983,   760,   985,    88,    89,
   769,   780,   781,   774,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   269,   270,   271,   272,
   273,   779,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   785,   786,   788,   789,   787,   283,  1122,  1123,  1124,
   792,   794,   422,   795,  1129,  1130,   798,   799,   800,   801,
   802,  1134,   811,   812,   814,   813,   815,   837,   816,  1142,
   818,   839,   845,   724,  1188,   844,   849,  1150,   853,   857,
   859,   861,  1155,   862,   882,  1158,   891,  1160,  1161,  1162,
  1163,  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,   896,
   899,   901,   905,  1173,   907,   906,  1176,   909,   908,   933,
   910,   950,   951,   915,   955,   911,   912,   747,   914,   916,
    88,   452,   953,   961,   917,  1227,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   918,   919,
   959,   960,   920,   921,   964,   923,   922,   924,   965,   946,
   121,   122,   925,   929,  1258,   966,   123,   768,   969,   926,
   970,   126,   927,   928,   743,   971,   972,   744,   930,   931,
   973,   974,   975,   982,   984,   994,   990,  1240,  1241,  1242,
  1243,  1244,  1245,  1246,  1247,  1248,  1001,  1004,  1005,  1252,
  1006,   269,   270,   271,   272,   273,   455,   274,   275,   276,
   277,   278,   279,   280,   281,   282,  1007,   590,  1008,  1010,
  1310,   283,   269,   270,   271,   272,   273,  1011,   274,   275,
   276,   277,   278,   279,   280,   281,   282,  1013,  1014,  1015,
  1016,  1017,   283,  1023,  1024,  1027,  1028,  1334,  1050,  1044,
  1029,  1290,  1291,  1292,  1293,  1294,  1295,  1296,  1297,  1298,
  1300,  1302,  1304,  1045,  1046,  1049,   269,   270,   271,   272,
   273,  1358,   274,   275,   276,   277,   278,   279,   280,   281,
   282,  1048,   121,   122,  1051,  1054,   283,  1075,   123,  1058,
  1079,  1081,  1060,   126,  1074,  1333,  1082,  1084,  1088,   453,
  1083,  1339,  1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,
  1348,  1085,  1350,  1087,  1352,  1089,   269,   270,   271,   272,
   273,  1093,   274,   275,   276,   277,   278,   279,   280,   281,
   282,  1094,  1095,  1098,  1097,  1113,   283,  1115,  1100,  1116,
  1125,  1131,  1370,  1371,  1137,  1126,  1138,  1375,  1376,  1377,
  1378,  1379,  1380,   269,   270,   271,   272,   273,  1141,   274,
   275,   276,   277,   278,   279,   280,   281,   282,  1143,  1145,
  1398,  1146,  1147,   283,  1156,  1402,  1403,  1404,  1405,  1406,
  1407,  1409,  1411,  1413,  1148,  1149,  1151,  1153,  1154,  1157,
  1159,  1175,  1172,  1174,  1187,  1181,  1184,  1185,  1189,  1190,
  1191,  1196,  1193,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
  1200,  1440,  1217,  1442,   735,   736,  1194,   738,  1218,  1222,
  1223,   740,   741,  1198,  1226,  1232,  1233,  1234,  1215,  1221,
  1236,  1452,  1453,  1454,  1237,  1238,  1239,  1253,  1257,  1282,
  1261,  1256,  1259,  1260,  1262,  1466,  1467,  1468,  1470,  1472,
  1474,  1263,  1264,  1283,  1274,   772,  1286,  1275,   775,  1276,
  1278,  1280,  1486,  1487,  1488,  1489,  1287,  1491,  1289,  1493,
  1305,  1308,   790,   791,   846,  1306,  1309,  1311,   796,   797,
  1312,  1313,  1314,  1330,  1331,   803,  1332,   810,  1337,  1507,
  1509,  1511,  1338,  1349,  1351,  1353,  1354,  1355,  1518,  1356,
  1520,  1359,  1522,    88,    89,    90,  1360,    91,  1372,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,  1387,   114,   115,   116,  1047,  1395,  1386,  1396,  1388,
  1399,  1416,  1397,   858,  1429,   860,  1415,  1431,  1439,  1441,
  1443,  1444,  1490,  1458,  1475,   867,   868,   869,  1462,  1463,
   872,   873,   874,   875,   876,   877,   878,    88,   297,  1492,
  1495,  1494,  1464,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,    88,   452,  1499,  1503,  1504,
  1519,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   269,   270,   271,   272,   273,  1056,   274,
   275,   276,   277,   278,   279,   280,   281,   282,  1505,  1521,
  1523,  1525,  1526,   283,    67,    68,   947,    69,  1254,  1057,
   993,   117,   118,   119,   120,   692,   952,     0,     0,     0,
     0,     0,     0,     0,  1186,   121,   122,     0,     0,     0,
     0,   123,   124,   125,     0,     0,   126,     0,   127,     0,
   128,   496,     0,     0,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,   995,   603,   283,     0,     0,     0,     0,  1003,
     0,     0,     0,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,  1022,   121,
   412,     0,     0,   283,     0,   123,     0,   746,     0,   978,
   126,   979,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   121,   122,   776,
     0,     0,   283,   123,     0,     0,     0,     0,   126,     0,
   441,     0,     0,     0,     0,     0,     0,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   269,   270,   271,   272,   273,   283,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   269,   270,
   271,   272,   273,   283,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,     0,     0,     0,     0,     0,     0,  1132,     0,
  1133,     0,     0,  1136,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,  1152,
     0,     0,     0,     0,   283,     0,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,     0,     0,
     0,     0,  1180,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,     0,    36,    37,     0,    39,    40,     0,
    26,    27,    28,    29,    30,    31,    32,    33,     0,    34,
     0,    36,    37,    51,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    52,    53,     0,
    51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1224,  1225,     0,     0,    52,    53,     0,     0,     0,     0,
     0,     0,     0,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,     0,    36,    37,     0,    39,    40,     0,
     0,     0,     0,     0,     0,     0,     0,  1255,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,    62,     0,
     0,     0,     0,     0,     0,     0,     0,    52,    53,     0,
     0,     0,     0,     0,     0,    62,     0,     0,     0,     0,
     0,     0,  1281,     0,   -10,     1,     0,   -10,   -53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   483,     0,     0,     0,     0,     0,  1307,     0,     0,     0,
     0,     0,     0,     0,     0,   -53,     0,   488,     0,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,    62,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,     0,     0,  1336,   -53,
   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,
   -53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   -53,   -53,     0,     0,     0,     0,
     0,     0,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,     0,     0,     0,     0,     0,  1374,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,     0,     0,
     0,     0,     0,  1400,     0,     0,     0,     0,     0,     0,
    23,     0,     0,     0,     0,   -53,     2,     3,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1430,     0,     0,     0,     0,     0,    24,     0,     0,
     0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,    35,    36,    37,    38,    39,    40,     0,     0,
  1451,    41,    42,    43,    44,    45,    46,   193,    47,    48,
    49,    50,    51,     0,  1465,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    52,    53,     0,     0,
     0,     0,     0,     0,    54,     0,    55,    56,    57,    58,
    59,    60,    61,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,     0,   194,   195,   196,  1120,
     0,  1121,     0,     0,   197,   198,   199,   200,   201,   202,
   203,   204,   205,   206,     0,     0,     0,    62,     0,     0,
     0,     0,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,     0,   217,   218,   219,   220,   221,   222,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,     0,     0,     0,     0,  1213,     0,  1214,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
     0,   269,   270,   271,   272,   273,   446,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,     0,   269,   270,   271,   272,   273,   448,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,     0,   269,   270,   271,
   272,   273,   625,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,     0,
   269,   270,   271,   272,   273,   629,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,     0,   269,   270,   271,   272,   273,   630,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,     0,   269,   270,   271,   272,
   273,   764,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,     0,   269,
   270,   271,   272,   273,   976,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,     0,   269,   270,   271,   272,   273,  1135,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,     0,   269,   270,   271,   272,   273,
  1177,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,     0,   269,   270,
   271,   272,   273,  1178,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
     0,   269,   270,   271,   272,   273,  1179,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,     0,   269,   270,   271,   272,   273,  1182,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,     0,   269,   270,   271,
   272,   273,  1183,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,     0,
   269,   270,   271,   272,   273,  1216,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,     0,   269,   270,   271,   272,   273,  1277,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,     0,   269,   270,   271,   272,
   273,  1385,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,     0,   269,
   270,   271,   272,   273,  1414,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,   470,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,   471,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,   574,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,   581,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,   582,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
   583,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,   642,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,   643,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,   644,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,   762,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,   763,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,   889,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,   890,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,   902,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,   903,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
   934,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,   935,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,   936,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,   937,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,   938,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,   939,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,   940,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,   941,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,   942,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,   943,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
   944,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,   945,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,   956,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,   963,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1068,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1069,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1077,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1080,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1091,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1096,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1099,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1101,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1102,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1103,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1104,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1105,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1106,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1107,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1108,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1109,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1110,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1111,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1112,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1117,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1118,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1192,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1201,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1202,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1203,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1204,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1205,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1206,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1207,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1208,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1209,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1265,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1266,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1267,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1268,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1269,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1270,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1271,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1272,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1315,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1316,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1317,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1318,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1319,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1320,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1321,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1322,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1323,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1357,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1361,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1362,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1363,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1364,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1365,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1366,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1384,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1389,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1390,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1391,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1392,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1393,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1394,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1417,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1418,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1419,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1420,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1421,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,   269,   270,   271,
   272,   273,  1422,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,   269,   270,
   271,   272,   273,  1445,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,   269,
   270,   271,   272,   273,  1446,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
   269,   270,   271,   272,   273,  1447,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,   269,   270,   271,   272,   273,  1459,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,   269,   270,   271,   272,   273,  1460,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,   269,   270,   271,   272,   273,  1461,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,   269,   270,   271,   272,   273,  1476,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,   269,   270,   271,   272,   273,
  1477,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,   269,   270,   271,   272,
   273,  1478,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,     0,     0,
   416,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,     0,     0,   535,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,     0,     0,
   646,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,     0,     0,   836,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,     0,     0,
   954,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,   410,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,   440,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,   442,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,   443,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,   445,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,   449,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,   450,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,   457,   269,   270,   271,   272,   273,
     0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,   491,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
   494,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,   497,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,   563,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,   564,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,   565,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,   566,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,   567,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,   568,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,   569,   269,   270,   271,   272,   273,
     0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,   570,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
   571,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,   572,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,   573,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,   575,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,   576,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,   577,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,   578,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,   579,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,   580,   269,   270,   271,   272,   273,
     0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,   610,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
   613,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,   626,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,   627,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,   631,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,   632,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,   633,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,   634,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,   635,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,   651,   269,   270,   271,   272,   273,
     0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,   655,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
   832,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,   833,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,   834,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,   835,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,   892,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,   977,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,   998,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,  1086,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,  1090,   269,   270,   271,   272,   273,
     0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,  1092,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
  1195,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,  1197,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,  1199,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,  1210,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,  1211,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283,     0,  1212,   269,   270,   271,   272,
   273,     0,   274,   275,   276,   277,   278,   279,   280,   281,
   282,     0,     0,     0,     0,     0,   283,     0,  1367,   269,
   270,   271,   272,   273,     0,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,   283,
     0,  1368,   269,   270,   271,   272,   273,     0,   274,   275,
   276,   277,   278,   279,   280,   281,   282,     0,     0,     0,
     0,     0,   283,     0,  1369,   269,   270,   271,   272,   273,
     0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     0,     0,     0,     0,     0,   283,     0,  1448,   269,   270,
   271,   272,   273,     0,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,   283,     0,
  1449,   269,   270,   271,   272,   273,     0,   274,   275,   276,
   277,   278,   279,   280,   281,   282,     0,     0,     0,     0,
     0,   283,     0,  1450,   269,   270,   271,   272,   273,     0,
   274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
     0,     0,     0,     0,   283,     0,  1496,   269,   270,   271,
   272,   273,     0,   274,   275,   276,   277,   278,   279,   280,
   281,   282,     0,     0,     0,     0,     0,   283,     0,  1497,
   269,   270,   271,   272,   273,     0,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
   283,     0,  1498,   269,   270,   271,   272,   273,     0,   274,
   275,   276,   277,   278,   279,   280,   281,   282,     0,     0,
     0,     0,     0,   283
};

static const short yycheck[] = {    23,
    86,   261,    23,   725,  1066,    78,   323,     4,   253,   254,
   255,   909,   263,     4,     6,    40,     4,     4,    83,     3,
   918,     6,   146,   299,     4,    62,    61,   925,    62,     7,
    67,    61,   176,    67,     6,   990,     4,     5,   182,   299,
     6,   178,     5,   180,     4,     6,   165,   166,     4,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     7,   181,     6,    32,    33,    34,     3,     4,    32,
    33,    34,   176,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   176,     6,   121,   122,   123,
    97,   182,   126,   127,    47,   129,   165,   166,   172,   173,
     6,   176,   136,   137,   138,   139,   180,   141,   142,   192,
   144,   145,   146,   182,   148,  1080,    86,    87,     6,   851,
    86,    87,   165,   166,   181,     6,   183,   165,   166,   163,
   164,   176,    36,    43,     6,    39,   183,   182,   181,   183,
   183,   176,   182,   181,   177,   183,   172,   181,   181,   183,
   176,   185,   186,   439,   183,   416,   176,   165,   166,   165,
   166,     7,   417,   151,   152,   153,   154,   453,   176,   439,
    53,    54,   166,  1081,   182,   182,   182,  1085,     7,     6,
   182,   182,  1254,   453,   182,   182,   176,   182,    44,   165,
   166,     7,    62,   227,   165,   166,   176,    67,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   165,
   166,   165,   166,   172,   173,   171,   181,   261,   183,   178,
   176,   180,   263,   177,   176,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   160,   161,   162,     3,   165,   166,   290,    36,   168,   293,
    39,    40,   176,    42,   298,   299,   177,   176,   165,   166,
   304,   305,   306,   176,   308,   309,   310,   311,   312,   313,
   314,  1189,  1190,  1191,  1192,   182,   165,   166,  1196,     6,
     7,   325,   326,   327,   165,   166,   330,   165,   166,   165,
   166,   587,   181,   337,   183,   151,   152,   153,   154,   343,
   181,   172,   173,   181,   177,   181,  1048,   587,   181,   176,
   230,   591,   151,   152,   153,   154,   172,   173,   176,   165,
   166,    40,   618,   588,   180,   151,   152,   153,   154,    39,
    40,    40,    42,   172,   173,   181,   165,   166,   618,   177,
   381,  1259,  1260,   181,    40,  1263,   172,   173,    55,    56,
    57,    58,   181,    60,    42,   182,   116,   117,   118,   119,
   120,   121,   122,   123,   172,   173,   182,   177,   412,   182,
   178,   181,   180,    36,   418,   416,    39,    40,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   167,   168,   169,  1311,    40,   439,   172,   173,   175,   177,
   320,   321,   178,   181,   180,     6,   177,   451,     6,   453,
   181,   455,   456,   181,   181,   183,   183,   461,   165,   166,
   167,   168,   169,   181,   176,   183,   470,   471,   175,   101,
   102,   103,   104,   105,   176,   479,     4,   181,     8,   183,
     6,  1359,   486,   181,     4,   183,   717,   718,   744,    40,
     3,   495,   496,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   176,     5,   744,     3,     4,   175,   181,     6,
  1388,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   183,   535,   181,   181,   183,   183,     3,
     4,   181,   181,   183,   183,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,   181,   176,   183,
   574,   181,   181,   183,   183,   176,   176,   581,   582,   583,
   584,     6,   181,   587,   183,   882,   181,   591,   183,   469,
   594,   181,   181,   183,   183,   176,   181,  1475,   183,   603,
   157,   158,   159,   176,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   176,   618,   619,   841,   176,   175,     5,
   176,   176,   176,   689,   176,   155,   156,   157,   158,   159,
   176,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   176,   176,   176,   647,   648,   175,   650,   176,     6,   176,
   182,   176,   176,   183,   658,   659,   178,   176,   176,   176,
   176,   176,   176,    89,   176,   176,   176,   165,   166,     6,
     6,   176,   176,   171,   182,   182,   176,   176,   176,   182,
   176,   179,     5,   176,   182,   176,   176,   182,   182,   693,
   694,   695,   696,   697,   698,   699,   700,   701,   702,   703,
   704,   165,   166,     8,   176,   176,   176,   171,   176,   176,
   176,   176,   176,   176,   176,   179,    52,   718,   182,   176,
   176,   176,   726,   176,   728,   176,   606,   780,   158,   159,
   176,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   744,   176,   746,   176,   748,   175,   177,   176,   176,   176,
     4,     7,   176,   176,   176,   176,   176,   761,   762,   763,
   176,  1058,   642,   643,   644,   176,   176,   181,   175,     7,
     7,   180,   776,   777,     7,     7,     7,    84,   182,   147,
   660,     5,     5,     5,     5,     5,     5,     3,     4,   669,
     5,     5,     5,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     5,     5,   818,     5,   155,
   156,   157,   158,   159,     5,   161,   162,   163,   164,   165,
   166,   167,   168,   169,     5,     5,     5,     5,   842,   175,
     5,     5,     5,     5,     5,     5,   134,   900,     5,     5,
   155,   156,   157,   158,   159,     5,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   931,   870,   871,     5,     3,
   175,     6,   177,     5,     5,     5,   177,   181,     6,     4,
     6,   183,   182,     7,     6,   889,   890,     6,   183,     7,
     7,     7,     6,     6,   181,   899,     7,     7,   902,     7,
   182,     7,   176,     7,   148,   181,   181,     5,   912,   181,
   181,   181,   181,   181,   181,   919,   920,   921,   181,   181,
   181,   181,   926,   181,   181,   176,   930,   177,   181,   181,
   934,   935,   936,   937,   938,   939,   940,   941,   942,   943,
   944,   945,   181,     6,     4,   181,   181,  1000,     6,   165,
   166,   181,   956,   181,   181,   171,   181,     6,   176,   963,
   176,     6,     6,   147,   181,     7,   182,     7,   152,   181,
   181,   181,   181,   181,   978,   181,   856,   176,   176,   176,
   176,   176,   176,   176,   176,   176,     7,     7,   176,   173,
     7,     7,   996,   179,     7,   179,   180,   182,   178,     7,
     7,     7,     7,   883,     7,   885,     7,   887,     3,     4,
     6,   144,     3,     7,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   155,   156,   157,   158,
   159,     7,   161,   162,   163,   164,   165,   166,   167,   168,
   169,     3,     3,     3,     3,   167,   175,  1061,  1062,  1063,
     3,     3,     6,     3,  1068,  1069,     3,     3,     3,     3,
     3,  1075,     3,     5,     3,     5,     3,   177,     6,  1083,
     4,   177,     7,     6,  1137,   180,   180,  1091,     6,     6,
     6,     6,  1096,     6,   182,  1099,     6,  1101,  1102,  1103,
  1104,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,    85,
   182,   181,   181,  1117,   181,   177,  1120,   181,   177,     6,
   177,     6,     4,   177,    86,   181,   181,     6,   181,   177,
     3,     4,     6,   179,   181,  1188,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,   181,   181,
     6,     6,   181,   181,     6,   177,   181,   181,     6,   180,
   165,   166,   181,   177,  1227,     6,   171,     6,     6,   181,
     6,   176,   181,   181,   179,     6,     6,   182,   181,   181,
     6,     6,     6,     6,     6,    85,     7,  1201,  1202,  1203,
  1204,  1205,  1206,  1207,  1208,  1209,     3,     6,     3,  1213,
     6,   155,   156,   157,   158,   159,     8,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   167,   411,     6,     6,
  1283,   175,   155,   156,   157,   158,   159,     3,   161,   162,
   163,   164,   165,   166,   167,   168,   169,     6,     3,     6,
     6,     3,   175,     6,     3,     3,     3,  1310,   180,     4,
     6,  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,
  1274,  1275,  1276,     6,     6,     6,   155,   156,   157,   158,
   159,  1334,   161,   162,   163,   164,   165,   166,   167,   168,
   169,     7,   165,   166,   180,   179,   175,    82,   171,   182,
   177,   181,   183,   176,   182,  1309,   181,   177,   177,   182,
   181,  1315,  1316,  1317,  1318,  1319,  1320,  1321,  1322,  1323,
  1324,   181,  1326,   181,  1328,   177,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   177,   177,   177,   181,   177,   175,    87,   181,     4,
     6,    85,  1356,  1357,   144,   182,     6,  1361,  1362,  1363,
  1364,  1365,  1366,   155,   156,   157,   158,   159,     3,   161,
   162,   163,   164,   165,   166,   167,   168,   169,     6,     6,
  1384,     3,     6,   175,     3,  1389,  1390,  1391,  1392,  1393,
  1394,  1395,  1396,  1397,     6,     6,     6,     6,     6,     6,
     5,   183,     6,     5,   183,     6,   182,   181,   181,   181,
   181,   181,   177,  1417,  1418,  1419,  1420,  1421,  1422,  1423,
   181,  1425,     6,  1427,   608,   609,   177,   611,     6,     6,
     6,   615,   616,   177,     6,     6,     6,     6,   181,   181,
     6,  1445,  1446,  1447,     6,     6,     5,     5,   183,    82,
   177,   181,   181,   181,   177,  1459,  1460,  1461,  1462,  1463,
  1464,   181,   181,   144,   182,   649,     6,   182,   652,   182,
   181,   181,  1476,  1477,  1478,  1479,     6,  1481,     5,  1483,
     5,   183,   666,   667,     6,     6,   182,   181,   672,   673,
   181,   177,   177,   183,   183,   679,    82,   681,     6,  1503,
  1504,  1505,     6,     6,     6,     6,     6,     6,  1512,   182,
  1514,   181,  1516,     3,     4,     5,   181,     7,   149,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   181,    32,    33,    34,     6,   182,   150,   182,   181,
     6,   177,   182,   737,     6,   739,   181,     6,     6,     6,
     6,   181,     6,   181,   181,   749,   750,   751,   182,   182,
   754,   755,   756,   757,   758,   759,   760,     3,     4,     6,
   177,     6,   182,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     3,     4,     6,   182,   182,
     6,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   155,   156,   157,   158,   159,     6,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   182,     6,
     6,     0,     0,   175,     7,     7,   840,     7,  1220,     6,
   894,   151,   152,   153,   154,   537,   845,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,   165,   166,    -1,    -1,    -1,
    -1,   171,   172,   173,    -1,    -1,   176,    -1,   178,    -1,
   180,     8,    -1,    -1,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,   896,     8,   175,    -1,    -1,    -1,    -1,   903,
    -1,    -1,    -1,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   922,   165,
   166,    -1,    -1,   175,    -1,   171,    -1,     8,    -1,   181,
   176,   183,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   165,   166,     8,
    -1,    -1,   175,   171,    -1,    -1,    -1,    -1,   176,    -1,
   183,    -1,    -1,    -1,    -1,    -1,    -1,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   155,   156,   157,   158,   159,   175,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   155,   156,
   157,   158,   159,   175,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1072,    -1,
  1074,    -1,    -1,  1077,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,  1093,
    -1,    -1,    -1,    -1,   175,    -1,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
    -1,    -1,  1126,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    45,    -1,    47,    48,    -1,    50,    51,    -1,
    36,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
    -1,    47,    48,    66,    50,    51,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,
    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1184,  1185,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    45,    -1,    47,    48,    -1,    50,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1221,    -1,    -1,
    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,   141,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,
    -1,    -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,
    -1,    -1,  1256,    -1,     0,     1,    -1,     3,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   183,    -1,    -1,    -1,    -1,    -1,  1280,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    31,    -1,   183,    -1,    35,
    36,    37,    38,    39,    40,    41,    42,    43,   141,    45,
    46,    47,    48,    49,    50,    51,    -1,    -1,  1312,    55,
    56,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    -1,    90,    91,    92,    93,    94,    95,
    96,    -1,    -1,    -1,    -1,    -1,  1360,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,    -1,    -1,
    -1,    -1,    -1,  1387,    -1,    -1,    -1,    -1,    -1,    -1,
     4,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1415,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    -1,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
  1444,    55,    56,    57,    58,    59,    60,    39,    62,    63,
    64,    65,    66,    -1,  1458,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    -1,    90,    91,    92,    93,
    94,    95,    96,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,    -1,    98,    99,   100,   181,
    -1,   183,    -1,    -1,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,    -1,    -1,    -1,   141,    -1,    -1,
    -1,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,    -1,   135,   136,   137,   138,   139,   140,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
    -1,   155,   156,   157,   158,   159,   183,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,    -1,   155,   156,   157,   158,   159,   183,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,    -1,   155,   156,   157,
   158,   159,   183,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,
   155,   156,   157,   158,   159,   183,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,    -1,   155,   156,   157,   158,   159,   183,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,    -1,   155,   156,   157,   158,
   159,   183,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,   155,
   156,   157,   158,   159,   183,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,    -1,   155,   156,   157,   158,   159,   183,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,    -1,   155,   156,   157,   158,   159,
   183,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,   155,   156,
   157,   158,   159,   183,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
    -1,   155,   156,   157,   158,   159,   183,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,    -1,   155,   156,   157,   158,   159,   183,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,    -1,   155,   156,   157,
   158,   159,   183,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,
   155,   156,   157,   158,   159,   183,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,    -1,   155,   156,   157,   158,   159,   183,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,    -1,   155,   156,   157,   158,
   159,   183,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,   155,
   156,   157,   158,   159,   183,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,
   158,   159,   181,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,   156,
   157,   158,   159,   181,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,   155,
   156,   157,   158,   159,   181,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
   155,   156,   157,   158,   159,   181,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,   155,   156,   157,   158,   159,   181,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,   155,   156,   157,   158,   159,   181,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,   155,   156,   157,   158,   159,   181,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,   181,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,   159,
   181,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,   155,   156,   157,   158,
   159,   181,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
   179,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,    -1,    -1,   179,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
   179,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,    -1,    -1,   179,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
   179,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,   177,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,   159,
    -1,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   177,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,   177,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,   159,
    -1,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   177,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,   177,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,   159,
    -1,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   177,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,   177,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,   159,
    -1,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   177,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,   177,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,   159,
    -1,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   177,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,
   159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,
   156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,
    -1,   177,   155,   156,   157,   158,   159,    -1,   161,   162,
   163,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
    -1,    -1,   175,    -1,   177,   155,   156,   157,   158,   159,
    -1,   161,   162,   163,   164,   165,   166,   167,   168,   169,
    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,
   157,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
   167,   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,
   177,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
    -1,   175,    -1,   177,   155,   156,   157,   158,   159,    -1,
   161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,    -1,    -1,    -1,   175,    -1,   177,   155,   156,   157,
   158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
   168,   169,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
   175,    -1,   177,   155,   156,   157,   158,   159,    -1,   161,
   162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
    -1,    -1,    -1,   175
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 157 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 165 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 166 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 171 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 185 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 192 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 209 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 210 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 211 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 216 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 221 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 232 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 235 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 239 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 245 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 251 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 258 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 264 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 268 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 272 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 279 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 283 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 288 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 292 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 296 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 300 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 304 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 308 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 312 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 316 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 322 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 325 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 328 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 332 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 336 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 340 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 344 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 352 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 356 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 363 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 379 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 382 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 404 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 408 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Printf format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 438 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 443 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 451 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 84:
#line 470 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 472 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 477 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 87:
#line 482 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 88:
#line 489 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 491 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 496 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 91:
#line 501 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 92:
#line 508 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 510 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 515 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 520 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 96:
#line 527 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 529 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 535 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 541 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 100:
#line 548 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 550 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 556 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 562 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 104:
#line 569 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 571 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 577 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 583 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 108:
#line 590 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 592 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 599 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 608 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 112:
#line 615 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 617 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 624 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 633 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 116:
#line 640 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 642 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 649 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 658 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 120:
#line 665 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 667 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 675 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 684 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 124:
#line 691 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 693 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 701 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 710 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 128:
#line 717 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 719 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 727 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 736 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 132:
#line 748 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 133:
#line 749 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 134:
#line 750 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 135:
#line 751 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 136:
#line 752 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 137:
#line 755 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 138:
#line 756 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 139:
#line 763 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 140:
#line 790 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 141:
#line 824 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	      List_Add(Symbol_L, &TheSymbol);
	    }
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 142:
#line 871 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 886 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 144:
#line 895 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 145:
#line 910 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 146:
#line 922 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 147:
#line 936 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 148:
#line 959 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 149:
#line 983 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 150:
#line 995 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 151:
#line 1009 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 152:
#line 1021 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 153:
#line 1035 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 1051 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 1077 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 156:
#line 1084 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 1090 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 158:
#line 1109 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 159:
#line 1120 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 160:
#line 1128 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 161:
#line 1134 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1140 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 163:
#line 1159 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1165 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 165:
#line 1182 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 166:
#line 1188 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1194 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1200 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1206 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1212 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 171:
#line 1231 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 172:
#line 1243 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1249 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 174:
#line 1268 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 175:
#line 1291 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 176:
#line 1299 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 177:
#line 1303 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 178:
#line 1309 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1315 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 180:
#line 1327 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 181:
#line 1333 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 182:
#line 1339 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 183:
#line 1352 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 184:
#line 1357 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 185:
#line 1362 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 186:
#line 1367 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 187:
#line 1374 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 188:
#line 1375 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 189:
#line 1376 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 190:
#line 1381 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 191:
#line 1385 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1397 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 193:
#line 1415 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 194:
#line 1422 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 195:
#line 1427 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 196:
#line 1439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 197:
#line 1506 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 198:
#line 1526 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 199:
#line 1530 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 200:
#line 1552 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 201:
#line 1566 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 202:
#line 1580 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 203:
#line 1605 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 204:
#line 1630 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 205:
#line 1656 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 206:
#line 1662 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 207:
#line 1667 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 208:
#line 1672 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 209:
#line 1676 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 1687 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 211:
#line 1692 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 212:
#line 1698 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 213:
#line 1702 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 214:
#line 1706 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 215:
#line 1710 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 216:
#line 1714 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 217:
#line 1719 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 218:
#line 1727 "Gmsh.y"
{
    ;
    break;}
case 219:
#line 1730 "Gmsh.y"
{
    ;
    break;}
case 220:
#line 1736 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 221:
#line 1756 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 222:
#line 1767 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 223:
#line 1785 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 224:
#line 1803 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 225:
#line 1821 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1843 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 227:
#line 1864 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1885 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 229:
#line 1899 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 230:
#line 1921 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 231:
#line 1925 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 232:
#line 1936 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 233:
#line 1937 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 234:
#line 1938 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 1939 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 1940 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 1944 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 238:
#line 1945 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 239:
#line 1946 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 240:
#line 1947 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 241:
#line 1948 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 242:
#line 1949 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 243:
#line 1950 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 244:
#line 1951 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 245:
#line 1953 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 246:
#line 1959 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 247:
#line 1960 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 248:
#line 1961 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 249:
#line 1962 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 250:
#line 1963 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 251:
#line 1964 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 252:
#line 1965 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 253:
#line 1966 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 254:
#line 1967 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 255:
#line 1968 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 256:
#line 1969 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 257:
#line 1970 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 258:
#line 1971 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 259:
#line 1972 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 260:
#line 1973 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 261:
#line 1974 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 262:
#line 1975 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 263:
#line 1976 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 264:
#line 1977 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1978 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 266:
#line 1979 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1980 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 268:
#line 1981 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1982 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 1983 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 1984 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 272:
#line 1985 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 273:
#line 1986 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 274:
#line 1987 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 275:
#line 1988 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 276:
#line 1989 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 277:
#line 1990 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 278:
#line 1999 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 279:
#line 2000 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 280:
#line 2005 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 281:
#line 2016 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 282:
#line 2033 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 283:
#line 2044 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 284:
#line 2063 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 285:
#line 2079 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 286:
#line 2095 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 287:
#line 2111 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 288:
#line 2129 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 289:
#line 2133 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 290:
#line 2137 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 291:
#line 2141 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2145 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 293:
#line 2151 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 294:
#line 2155 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 295:
#line 2159 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 296:
#line 2163 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2170 "Gmsh.y"
{
    ;
    break;}
case 298:
#line 2173 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2179 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2182 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2188 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2191 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 303:
#line 2195 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 304:
#line 2202 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 305:
#line 2207 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 306:
#line 2215 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 307:
#line 2220 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 308:
#line 2224 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 309:
#line 2228 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 310:
#line 2239 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 311:
#line 2245 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 312:
#line 2256 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 313:
#line 2270 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 314:
#line 2286 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 315:
#line 2306 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 316:
#line 2331 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2336 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 318:
#line 2340 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 319:
#line 2344 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 320:
#line 2356 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 2360 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 2371 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 323:
#line 2376 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 324:
#line 2395 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 325:
#line 2399 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 326:
#line 2413 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 327:
#line 2418 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 328:
#line 2425 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 329:
#line 2429 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 330:
#line 2437 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 331:
#line 2450 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 332:
#line 2454 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Sprintf format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
      Free(yyvsp[-3].c);
    ;
    break;}
case 333:
#line 2479 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 334:
#line 2493 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2508 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


