
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tRand	274
#define	tAtan	275
#define	tAtan2	276
#define	tSinh	277
#define	tCosh	278
#define	tTanh	279
#define	tFabs	280
#define	tFloor	281
#define	tCeil	282
#define	tFmod	283
#define	tModulo	284
#define	tHypot	285
#define	tPrintf	286
#define	tSprintf	287
#define	tDraw	288
#define	tPoint	289
#define	tCircle	290
#define	tEllipsis	291
#define	tLine	292
#define	tSurface	293
#define	tSpline	294
#define	tVolume	295
#define	tCharacteristic	296
#define	tLength	297
#define	tParametric	298
#define	tElliptic	299
#define	tPlane	300
#define	tRuled	301
#define	tTransfinite	302
#define	tComplex	303
#define	tPhysical	304
#define	tUsing	305
#define	tBump	306
#define	tProgression	307
#define	tRotate	308
#define	tTranslate	309
#define	tSymmetry	310
#define	tDilate	311
#define	tExtrude	312
#define	tDuplicata	313
#define	tLoop	314
#define	tRecombine	315
#define	tDelete	316
#define	tCoherence	317
#define	tIntersect	318
#define	tView	319
#define	tAttractor	320
#define	tLayers	321
#define	tScalarTetrahedron	322
#define	tVectorTetrahedron	323
#define	tTensorTetrahedron	324
#define	tScalarTriangle	325
#define	tVectorTriangle	326
#define	tTensorTriangle	327
#define	tScalarLine	328
#define	tVectorLine	329
#define	tTensorLine	330
#define	tScalarPoint	331
#define	tVectorPoint	332
#define	tTensorPoint	333
#define	tBSpline	334
#define	tNurbs	335
#define	tOrder	336
#define	tWith	337
#define	tBounds	338
#define	tKnots	339
#define	tColor	340
#define	tFor	341
#define	tIn	342
#define	tEndFor	343
#define	tIf	344
#define	tEndIf	345
#define	tExit	346
#define	tReturn	347
#define	tCall	348
#define	tFunction	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.48 2000-12-14 12:25:15 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Mesh      *THEM;
extern Post_View *ActualView;
extern char       ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;
static char           *str;
static void           *pNumOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;

void yyerror (char *s);
void vyyerror (char *fmt, ...);
void skip_until (char *until);


#line 64 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1535
#define	YYFLAG		-32768
#define	YYNTBASE	181

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 260)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   168,     2,     2,     2,   166,     2,     2,   173,
   174,   164,   162,   178,   163,   177,   165,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   158,
     2,   160,   152,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   175,     2,   176,   172,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   179,     2,   180,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   153,   154,   155,   156,
   157,   159,   161,   167,   169,   170,   171
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   952,   960,   964,   971,   975,   982,   987,   995,  1000,  1008,
  1013,  1021,  1026,  1034,  1041,  1053,  1060,  1072,  1079,  1091,
  1098,  1110,  1117,  1129,  1136,  1148,  1154,  1166,  1172,  1184,
  1193,  1205,  1213,  1222,  1235,  1242,  1248,  1256,  1264,  1277,
  1285,  1295,  1313,  1321,  1330,  1339,  1347,  1359,  1365,  1374,
  1387,  1396,  1419,  1440,  1449,  1458,  1464,  1473,  1481,  1490,
  1496,  1508,  1514,  1524,  1526,  1528,  1530,  1531,  1534,  1539,
  1544,  1548,  1552,  1555,  1558,  1565,  1574,  1583,  1594,  1596,
  1598,  1602,  1605,  1610,  1612,  1621,  1634,  1643,  1656,  1665,
  1678,  1690,  1706,  1708,  1711,  1721,  1724,  1731,  1741,  1751,
  1760,  1769,  1778,  1785,  1790,  1793,  1796,  1798,  1801,  1803,
  1805,  1807,  1809,  1811,  1813,  1817,  1820,  1823,  1826,  1830,
  1834,  1838,  1842,  1846,  1850,  1854,  1858,  1862,  1866,  1870,
  1874,  1878,  1882,  1888,  1893,  1898,  1903,  1908,  1913,  1918,
  1923,  1928,  1933,  1938,  1945,  1950,  1955,  1960,  1965,  1970,
  1975,  1982,  1989,  1996,  2001,  2003,  2005,  2007,  2012,  2015,
  2021,  2024,  2030,  2034,  2043,  2048,  2058,  2063,  2073,  2077,
  2083,  2085,  2088,  2091,  2095,  2099,  2111,  2121,  2129,  2137,
  2138,  2142,  2144,  2148,  2149,  2153,  2157,  2159,  2163,  2164,
  2166,  2170,  2174,  2176,  2178,  2182,  2186,  2190,  2196,  2206,
  2214,  2220,  2222,  2228,  2232,  2241,  2243,  2247,  2249,  2254
};

static const short yyrhs[] = {   183,
     0,   182,     0,   188,     0,     1,     6,     0,   139,     0,
   142,   143,   243,   243,   243,   144,   145,   141,   243,   243,
   243,   141,   243,   243,   243,   141,   243,   243,   243,   146,
   147,     0,   140,     0,     0,   183,   184,     0,   185,     0,
   187,     0,   186,     0,   113,     6,     0,   114,     6,     0,
   116,     6,     0,   115,     6,     0,   117,     6,     0,   118,
   173,   250,   178,     5,   174,     6,     0,   119,   173,   250,
   174,     6,     0,   120,   173,     5,   178,     5,   178,   250,
   178,   250,   178,     5,   178,     5,   178,     5,   174,     6,
     0,     3,     7,    97,   173,     5,   178,   248,   174,     6,
     0,     3,     7,    96,   173,     5,   178,   245,   178,   254,
   178,   244,   178,   244,   178,   244,   178,   254,   178,   254,
   178,   244,   174,     6,     0,     3,     7,    95,   173,     5,
   178,   245,   178,   245,   178,   252,   178,   244,   178,   244,
   178,   244,   178,   244,   178,   254,   178,   254,   178,   254,
   178,   254,   178,   244,   174,     6,     0,     3,     7,   103,
   173,     5,   178,     3,   178,     3,   178,     3,   178,   244,
   174,     6,     0,     3,     7,   107,   173,     5,   178,     3,
   178,   244,   174,     6,     0,     3,     7,   124,   173,     5,
   178,     3,   178,   244,   174,     6,     0,     3,     7,   105,
   173,     5,   178,   164,   178,   164,   178,   245,   178,   244,
   174,     6,     0,     3,     7,   108,   173,     5,   178,   254,
   174,     6,     0,     3,     7,   109,   173,     5,   178,   254,
   178,     3,   178,   244,   174,     6,     0,     3,     7,   104,
   173,     5,   178,     3,   174,     6,     0,     3,     7,   110,
   173,     5,   178,     3,   178,   245,   174,     6,     0,     3,
     7,   112,   173,     5,   178,     3,   178,     3,   178,     3,
   174,     6,     0,     3,     7,   111,   173,     5,   178,   248,
   174,     6,     0,     3,     7,   106,   173,     5,   178,     3,
   174,     6,     0,     3,     7,    37,   173,     5,   178,     3,
   178,     3,   174,     6,     0,     3,     7,   122,   173,     5,
   178,   254,   174,     6,     0,     3,     7,   123,   173,     5,
   178,   254,   178,     3,   174,     6,     0,     3,     7,   121,
   173,     5,   178,     3,   174,     6,     0,     3,     7,   125,
   173,     5,   178,     3,   178,   245,   174,     6,     0,     3,
     7,   126,   173,     5,   178,     3,   178,   245,   178,   245,
   174,     6,     0,     3,     7,   133,   173,     5,   178,     3,
   178,   245,   178,   245,   174,     6,     0,     3,     7,   127,
   173,     5,   178,     3,   178,   245,   174,     6,     0,     3,
     7,   137,   173,     5,   178,     3,   178,   245,   178,   245,
   174,     6,     0,     3,     7,   128,   173,     5,   178,     3,
   178,   254,   178,   254,   178,   244,   178,   244,   174,     6,
     0,     3,     7,   129,   173,     5,   178,   254,   174,     6,
     0,     3,     7,   130,   173,   131,   178,   244,   178,     3,
   174,     6,     0,     3,     7,   132,   173,     5,   178,   254,
   178,   244,   174,     6,     0,     3,     7,   134,   173,     5,
   178,     5,   178,     3,   178,     3,   174,     6,     0,     3,
     7,   135,   173,     5,   178,     5,   178,     3,   174,     6,
     0,     3,     7,   136,   173,     3,   178,     3,   174,     6,
     0,     0,   188,   189,     0,   191,     0,   190,     0,   229,
     0,   230,     0,   231,     0,   234,     0,   235,     0,   238,
     0,   241,     0,   242,     0,   237,     0,   236,     0,    31,
   173,     5,   174,     6,     0,    31,   173,     5,   178,   255,
   174,     6,     0,    64,     5,   179,   192,   180,     6,     0,
    64,     5,     4,   248,   179,   192,   180,     6,     0,     0,
   192,   194,     0,   192,   197,     0,   192,   200,     0,   192,
   203,     0,   192,   206,     0,   192,   209,     0,   192,   212,
     0,   192,   215,     0,   192,   218,     0,   192,   221,     0,
   192,   224,     0,   192,   227,     0,   245,     0,   193,   178,
   245,     0,     0,    76,   173,   245,   178,   245,   178,   245,
   174,   195,   179,   193,   180,     6,     0,   245,     0,   196,
   178,   245,     0,     0,    77,   173,   245,   178,   245,   178,
   245,   174,   198,   179,   196,   180,     6,     0,   245,     0,
   199,   178,   245,     0,     0,    78,   173,   245,   178,   245,
   178,   245,   174,   201,   179,   199,   180,     6,     0,   245,
     0,   202,   178,   245,     0,     0,    73,   173,   245,   178,
   245,   178,   245,   178,   245,   178,   245,   178,   245,   174,
   204,   179,   202,   180,     6,     0,   245,     0,   205,   178,
   245,     0,     0,    74,   173,   245,   178,   245,   178,   245,
   178,   245,   178,   245,   178,   245,   174,   207,   179,   205,
   180,     6,     0,   245,     0,   208,   178,   245,     0,     0,
    75,   173,   245,   178,   245,   178,   245,   178,   245,   178,
   245,   178,   245,   174,   210,   179,   208,   180,     6,     0,
   245,     0,   211,   178,   245,     0,     0,    70,   173,   245,
   178,   245,   178,   245,   178,   245,   178,   245,   178,   245,
   178,   245,   178,   245,   178,   245,   174,   213,   179,   211,
   180,     6,     0,   245,     0,   214,   178,   245,     0,     0,
    71,   173,   245,   178,   245,   178,   245,   178,   245,   178,
   245,   178,   245,   178,   245,   178,   245,   178,   245,   174,
   216,   179,   214,   180,     6,     0,   245,     0,   217,   178,
   245,     0,     0,    72,   173,   245,   178,   245,   178,   245,
   178,   245,   178,   245,   178,   245,   178,   245,   178,   245,
   178,   245,   174,   219,   179,   217,   180,     6,     0,   245,
     0,   220,   178,   245,     0,     0,    67,   173,   245,   178,
   245,   178,   245,   178,   245,   178,   245,   178,   245,   178,
   245,   178,   245,   178,   245,   178,   245,   178,   245,   178,
   245,   174,   222,   179,   220,   180,     6,     0,   245,     0,
   223,   178,   245,     0,     0,    68,   173,   245,   178,   245,
   178,   245,   178,   245,   178,   245,   178,   245,   178,   245,
   178,   245,   178,   245,   178,   245,   178,   245,   178,   245,
   174,   225,   179,   223,   180,     6,     0,   245,     0,   226,
   178,   245,     0,     0,    69,   173,   245,   178,   245,   178,
   245,   178,   245,   178,   245,   178,   245,   178,   245,   178,
   245,   178,   245,   178,   245,   178,   245,   178,   245,   174,
   228,   179,   226,   180,     6,     0,     4,     7,   245,     6,
     0,     4,   175,   245,   176,     7,   245,     6,     0,     4,
   169,     6,     0,     4,   175,   245,   176,   169,     6,     0,
     4,   170,     6,     0,     4,   175,   245,   176,   170,     6,
     0,     4,   148,   245,     6,     0,     4,   175,   245,   176,
   148,   245,     6,     0,     4,   149,   245,     6,     0,     4,
   175,   245,   176,   149,   245,     6,     0,     4,   150,   245,
     6,     0,     4,   175,   245,   176,   150,   245,     6,     0,
     4,   151,   245,     6,     0,     4,   175,   245,   176,   151,
   245,     6,     0,     4,   177,     4,     7,     5,     6,     0,
     4,   177,    64,   175,   245,   176,   177,     4,     7,     5,
     6,     0,     4,   177,     4,     7,   245,     6,     0,     4,
   177,    64,   175,   245,   176,   177,     4,     7,   245,     6,
     0,     4,   177,     4,   148,   245,     6,     0,     4,   177,
    64,   175,   245,   176,   177,     4,   148,   245,     6,     0,
     4,   177,     4,   149,   245,     6,     0,     4,   177,    64,
   175,   245,   176,   177,     4,   149,   245,     6,     0,     4,
   177,     4,   150,   245,     6,     0,     4,   177,    64,   175,
   245,   176,   177,     4,   150,   245,     6,     0,     4,   177,
     4,   151,   245,     6,     0,     4,   177,    64,   175,   245,
   176,   177,     4,   151,   245,     6,     0,     4,   177,     4,
   169,     6,     0,     4,   177,    64,   175,   245,   176,   177,
     4,   169,   245,     6,     0,     4,   177,     4,   170,     6,
     0,     4,   177,    64,   175,   245,   176,   177,     4,   170,
   245,     6,     0,     4,   177,    85,   177,     4,     7,   256,
     6,     0,     4,   177,    64,   175,   245,   176,   177,    85,
     7,   257,     6,     0,    34,   173,   245,   174,     7,   248,
     6,     0,    49,    34,   173,   245,   174,     7,   254,     6,
     0,    65,    34,   254,     7,   179,   245,   178,   245,   178,
   245,   180,     6,     0,    41,    42,   254,     7,   245,     6,
     0,    34,   179,   245,   180,     6,     0,    37,   173,   245,
   174,     7,   254,     6,     0,    39,   173,   245,   174,     7,
   254,     6,     0,    65,    37,   254,     7,   179,   245,   178,
   245,   178,   245,   180,     6,     0,    35,   173,   245,   174,
     7,   254,     6,     0,    35,   173,   245,   174,     7,   254,
    45,   248,     6,     0,    43,   173,   245,   174,     7,   179,
   245,   178,   245,   178,     5,   178,     5,   178,     5,   180,
     6,     0,    36,   173,   245,   174,     7,   254,     6,     0,
    49,    37,   173,   245,   174,     7,   254,     6,     0,    37,
    59,   173,   245,   174,     7,   254,     6,     0,    79,   173,
   245,   174,     7,   254,     6,     0,    80,   173,   245,   174,
     7,   254,    84,   254,    81,   245,     6,     0,    37,   179,
   245,   180,     6,     0,    45,    38,   173,   245,   174,     7,
   254,     6,     0,   138,    38,   173,   245,   174,     7,   179,
   245,   178,   254,   180,     6,     0,    46,    38,   173,   245,
   174,     7,   254,     6,     0,    80,    38,    82,    83,   173,
   245,   174,     7,   252,    84,   179,   254,   178,   254,   180,
    81,   179,   245,   178,   245,   180,     6,     0,    80,    38,
   173,   245,   174,     7,   252,    84,   179,   254,   178,   254,
   180,    81,   179,   245,   178,   245,   180,     6,     0,    49,
    38,   173,   245,   174,     7,   254,     6,     0,    38,    59,
   173,   245,   174,     7,   254,     6,     0,    38,   179,   245,
   180,     6,     0,    48,    40,   173,   245,   174,     7,   254,
     6,     0,    40,   173,   245,   174,     7,   254,     6,     0,
    49,    40,   173,   245,   174,     7,   254,     6,     0,    54,
   248,   179,   232,   180,     0,    53,   179,   248,   178,   248,
   178,   245,   180,   179,   232,   180,     0,    55,   248,   179,
   232,   180,     0,    56,   179,   248,   178,   245,   180,   179,
   232,   180,     0,   234,     0,   233,     0,   231,     0,     0,
   233,   230,     0,    58,   179,   233,   180,     0,    61,   179,
   233,   180,     0,     4,   259,     6,     0,     4,   245,     6,
     0,    91,     6,     0,    33,     6,     0,    86,   173,   245,
     8,   245,   174,     0,    86,   173,   245,     8,   245,     8,
   245,   174,     0,    86,     4,    87,   179,   245,     8,   245,
   180,     0,    86,     4,    87,   179,   245,     8,   245,     8,
   245,   180,     0,    88,     0,    92,     0,    93,     4,     6,
     0,    94,     4,     0,    89,   173,   245,   174,     0,    90,
     0,    57,    34,   179,   245,   178,   248,   180,     6,     0,
    57,    34,   179,   245,   178,   248,   178,   248,   178,   245,
   180,     6,     0,    57,    37,   179,   245,   178,   248,   180,
     6,     0,    57,    37,   179,   245,   178,   248,   178,   248,
   178,   245,   180,     6,     0,    57,    38,   179,   245,   178,
   248,   180,     6,     0,    57,    38,   179,   245,   178,   248,
   178,   248,   178,   245,   180,     6,     0,    57,    38,   179,
   245,   178,   248,   180,   179,   239,   180,     6,     0,    57,
    38,   179,   245,   178,   248,   178,   248,   178,   245,   180,
   179,   239,   180,     6,     0,   240,     0,   239,   240,     0,
    66,   179,   254,   178,   254,   178,   254,   180,     6,     0,
    60,     6,     0,    47,    37,   254,     7,   245,     6,     0,
    47,    37,   254,     7,   245,    50,    52,   245,     6,     0,
    47,    37,   254,     7,   245,    50,    51,   245,     6,     0,
    47,    38,   179,   245,   180,     7,   254,     6,     0,    44,
    38,   179,   245,   180,     7,   254,     6,     0,    47,    40,
   179,   245,   180,     7,   254,     6,     0,    60,    38,   254,
     7,   245,     6,     0,    60,    38,   254,     6,     0,    62,
     6,     0,    63,     6,     0,     3,     0,   163,     3,     0,
    98,     0,    99,     0,   100,     0,   101,     0,   102,     0,
   246,     0,   173,   245,   174,     0,   163,   245,     0,   162,
   245,     0,   168,   245,     0,   245,   163,   245,     0,   245,
   162,   245,     0,   245,   164,   245,     0,   245,   165,   245,
     0,   245,   166,   245,     0,   245,   172,   245,     0,   245,
   158,   245,     0,   245,   160,   245,     0,   245,   159,   245,
     0,   245,   161,   245,     0,   245,   155,   245,     0,   245,
   156,   245,     0,   245,   154,   245,     0,   245,   153,   245,
     0,   245,   152,   245,     8,   245,     0,    10,   173,   245,
   174,     0,    11,   173,   245,   174,     0,    12,   173,   245,
   174,     0,    13,   173,   245,   174,     0,    14,   173,   245,
   174,     0,    15,   173,   245,   174,     0,    16,   173,   245,
   174,     0,    17,   173,   245,   174,     0,    18,   173,   245,
   174,     0,    20,   173,   245,   174,     0,    21,   173,   245,
   178,   245,   174,     0,    22,   173,   245,   174,     0,    23,
   173,   245,   174,     0,    24,   173,   245,   174,     0,    25,
   173,   245,   174,     0,    26,   173,   245,   174,     0,    27,
   173,   245,   174,     0,    28,   173,   245,   178,   245,   174,
     0,    29,   173,   245,   178,   245,   174,     0,    30,   173,
   245,   178,   245,   174,     0,    19,   173,   245,   174,     0,
     3,     0,     9,     0,     4,     0,     4,   175,   245,   176,
     0,     4,   169,     0,     4,   175,   245,   176,   169,     0,
     4,   170,     0,     4,   175,   245,   176,   170,     0,     4,
   177,     4,     0,     4,   177,    64,   175,   245,   176,   177,
     4,     0,     4,   177,     4,   169,     0,     4,   177,    64,
   175,   245,   176,   177,     4,   169,     0,     4,   177,     4,
   170,     0,     4,   177,    64,   175,   245,   176,   177,     4,
   170,     0,   245,     8,   245,     0,   245,     8,   245,     8,
   245,     0,   249,     0,   163,   248,     0,   162,   248,     0,
   248,   163,   248,     0,   248,   162,   248,     0,   179,   245,
   178,   245,   178,   245,   178,   245,   178,   245,   180,     0,
   179,   245,   178,   245,   178,   245,   178,   245,   180,     0,
   179,   245,   178,   245,   178,   245,   180,     0,   173,   245,
   178,   245,   178,   245,   174,     0,     0,   173,   251,   174,
     0,     5,     0,   251,   178,     5,     0,     0,   179,   253,
   180,     0,   173,   253,   174,     0,   254,     0,   253,   178,
   254,     0,     0,   245,     0,     4,   175,   176,     0,   179,
   255,   180,     0,   245,     0,   247,     0,     4,   175,   176,
     0,   255,   178,   245,     0,   255,   178,   247,     0,   255,
   178,     4,   175,   176,     0,   179,   245,   178,   245,   178,
   245,   178,   245,   180,     0,   179,   245,   178,   245,   178,
   245,   180,     0,   179,     4,   178,   245,   180,     0,     4,
     0,     4,   177,    85,   177,     4,     0,   179,   258,   180,
     0,     4,   177,    64,   175,   245,   176,   177,    85,     0,
   256,     0,   258,   178,   256,     0,     5,     0,    32,   173,
     5,   174,     0,    32,   173,     5,   178,   255,   174,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   143,   145,   146,   147,   154,   162,   176,   188,   190,   193,
   195,   196,   199,   205,   210,   211,   212,   215,   219,   222,
   228,   233,   239,   247,   252,   256,   262,   267,   271,   276,
   280,   283,   288,   292,   296,   300,   305,   309,   312,   316,
   320,   324,   328,   332,   336,   339,   343,   346,   350,   353,
   362,   366,   372,   374,   375,   376,   377,   378,   379,   380,
   381,   382,   383,   384,   387,   392,   421,   426,   432,   437,
   438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
   448,   451,   454,   458,   464,   470,   473,   477,   483,   489,
   492,   496,   502,   508,   511,   515,   523,   529,   532,   536,
   544,   550,   553,   557,   565,   571,   574,   578,   590,   596,
   599,   603,   615,   621,   624,   628,   640,   646,   649,   653,
   666,   672,   675,   679,   692,   698,   701,   705,   718,   730,
   746,   758,   767,   779,   787,   799,   807,   819,   827,   839,
   847,   859,   871,   890,   903,   921,   938,   959,   976,   997,
  1014,  1035,  1052,  1073,  1094,  1120,  1137,  1158,  1175,  1198,
  1211,  1236,  1247,  1253,  1272,  1283,  1291,  1297,  1303,  1322,
  1328,  1344,  1351,  1357,  1363,  1369,  1375,  1394,  1406,  1412,
  1431,  1452,  1460,  1466,  1472,  1478,  1490,  1496,  1502,  1514,
  1520,  1525,  1530,  1537,  1539,  1540,  1543,  1548,  1559,  1577,
  1592,  1664,  1684,  1688,  1707,  1723,  1737,  1762,  1787,  1813,
  1818,  1823,  1830,  1834,  1844,  1850,  1856,  1860,  1864,  1868,
  1872,  1877,  1884,  1888,  1893,  1911,  1921,  1939,  1956,  1973,
  1994,  2014,  2034,  2051,  2075,  2080,  2091,  2093,  2096,  2098,
  2099,  2100,  2101,  2104,  2106,  2107,  2108,  2109,  2110,  2111,
  2112,  2113,  2120,  2121,  2122,  2123,  2124,  2125,  2126,  2127,
  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,  2136,  2137,
  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,
  2148,  2149,  2150,  2151,  2156,  2161,  2165,  2177,  2195,  2207,
  2225,  2237,  2257,  2278,  2302,  2323,  2347,  2368,  2393,  2400,
  2413,  2420,  2424,  2428,  2432,  2437,  2442,  2446,  2450,  2456,
  2460,  2465,  2469,  2474,  2478,  2482,  2488,  2494,  2500,  2504,
  2510,  2525,  2532,  2538,  2547,  2559,  2563,  2571,  2584,  2589,
  2593,  2598,  2603,  2622,  2627,  2648,  2657,  2663,  2668,  2672
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tView","tAttractor","tLayers","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarLine","tVectorLine","tTensorLine","tScalarPoint","tVectorPoint",
"tTensorPoint","tBSpline","tNurbs","tOrder","tWith","tBounds","tKnots","tColor",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Command","Loop","Extrude",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","SignedDouble",
"BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor",
"StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   181,   181,   181,   181,   182,   182,   182,   183,   183,   184,
   184,   184,   185,   185,   185,   185,   185,   186,   186,   186,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   190,   190,   191,   191,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   193,   193,   195,   194,   196,   196,   198,   197,   199,
   199,   201,   200,   202,   202,   204,   203,   205,   205,   207,
   206,   208,   208,   210,   209,   211,   211,   213,   212,   214,
   214,   216,   215,   217,   217,   219,   218,   220,   220,   222,
   221,   223,   223,   225,   224,   226,   226,   228,   227,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   231,
   231,   231,   231,   232,   232,   232,   233,   233,   234,   235,
   236,   236,   236,   236,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   238,   238,   238,   238,   238,   238,
   238,   238,   239,   239,   240,   240,   241,   241,   241,   241,
   241,   241,   241,   241,   242,   242,   243,   243,   244,   244,
   244,   244,   244,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   247,   247,
   248,   248,   248,   248,   248,   249,   249,   249,   249,   250,
   250,   251,   251,   252,   252,   252,   253,   253,   254,   254,
   254,   254,   255,   255,   255,   255,   255,   255,   256,   256,
   256,   256,   256,   257,   257,   258,   258,   259,   259,   259
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     4,
     7,     3,     6,     3,     6,     4,     7,     4,     7,     4,
     7,     4,     7,     6,    11,     6,    11,     6,    11,     6,
    11,     6,    11,     6,    11,     5,    11,     5,    11,     8,
    11,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,    12,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     3,     3,     2,     2,     6,     8,     8,    10,     1,     1,
     3,     2,     4,     1,     8,    12,     8,    12,     8,    12,
    11,    15,     1,     2,     9,     2,     6,     9,     9,     8,
     8,     8,     6,     4,     2,     2,     1,     2,     1,     1,
     1,     1,     1,     1,     3,     2,     2,     2,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     5,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     4,     4,     4,
     6,     6,     6,     4,     1,     1,     1,     4,     2,     5,
     2,     5,     3,     8,     4,     9,     4,     9,     3,     5,
     1,     2,     2,     3,     3,    11,     9,     7,     7,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     0,     1,
     3,     3,     1,     1,     3,     3,     3,     5,     9,     7,
     5,     1,     5,     3,     8,     1,     3,     1,     4,     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   209,     0,   214,     0,   210,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    64,    63,    60,    61,    62,   237,     0,     0,     0,
    13,    14,    16,    15,    17,   310,   310,     0,   285,   287,
   338,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   244,     0,
     0,   204,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   319,     0,     0,     0,     0,   319,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   301,     0,     0,     0,     0,     0,   197,   319,
   197,   235,   236,     0,   319,   319,     0,     0,     0,     0,
     0,     0,   203,     0,   212,     0,   238,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   289,   291,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   247,   246,   248,   132,   134,     0,     0,
     0,     0,     0,   202,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   287,     0,   320,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   303,
   302,     0,     0,     0,     0,   197,   197,     0,     0,     0,
     0,     0,     0,     0,     0,    69,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   312,     0,
     0,     0,     0,     0,   293,     0,   130,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
   138,   140,   142,   245,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   262,   261,   259,   260,   255,
   257,   256,   258,   250,   249,   251,   252,   253,   254,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   287,   323,   324,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   305,   304,   196,     0,   195,   194,     0,
     0,     0,     0,     0,   199,   198,   234,     0,   200,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   213,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   311,     0,     0,    19,     0,   288,   295,   297,
     0,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   284,   273,     0,   275,   276,   277,   278,   279,   280,     0,
     0,     0,   339,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,   158,     0,
     0,     0,    65,     0,     0,   166,   319,   319,     0,   319,
   178,     0,   186,   319,   319,   321,     0,     0,     0,   322,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   190,   192,     0,     0,
     0,     0,     0,    69,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,     0,
     0,   319,     0,     0,   319,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   319,   319,
     0,     0,     0,     0,   319,   319,     0,     0,     0,     0,
     0,   319,     0,   319,     0,     0,     0,     0,     0,   313,
     0,   310,   290,   292,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   133,   135,   144,   146,   148,
   150,   152,   154,     0,     0,   263,     0,     0,     0,     0,
   319,     0,   319,     0,     0,   325,   299,   287,   326,   327,
   165,     0,   319,   319,   319,   227,     0,   319,   319,   319,
   319,   319,   319,   319,     0,     0,     0,     0,     0,     0,
     0,   233,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    67,     0,     0,     0,     0,
   314,     0,     0,     0,   205,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   239,   240,   241,   242,   243,     0,     0,     0,     0,     0,
     0,     0,    18,     0,     0,   274,   281,   282,   283,   340,
   131,   137,   139,   141,   143,     0,   332,     0,     0,    66,
   162,   170,     0,   173,     0,   167,     0,   168,   188,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   197,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   176,
     0,   319,   319,     0,   319,     0,     0,     0,     0,     0,
     0,   319,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   319,     0,     0,     0,     0,     0,     0,     0,     0,   310,
     0,     0,     0,     0,   287,     0,   160,     0,   175,   185,
   300,   328,     0,   231,   179,   181,     0,     0,   230,   232,
   187,   163,   174,   184,   189,     0,   309,     0,   308,     0,
     0,   215,     0,   217,     0,   219,     0,    68,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   314,     0,   317,     0,     0,     0,     0,   207,
   206,     0,     0,     0,     0,     0,    21,     0,    30,     0,
    34,     0,    28,     0,     0,    33,     0,    38,    36,     0,
     0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
     0,    50,     0,     0,   294,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   171,     0,   229,   228,
   197,     0,   193,     0,     0,     0,     0,     0,     0,   223,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   316,   319,   315,   319,     0,
     0,   319,     0,     0,   314,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   319,     0,     0,
     0,     0,     0,     0,     0,   296,   298,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   226,   319,
     0,   224,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   318,     0,     0,
   208,     0,     0,    35,     0,     0,     0,     0,    25,     0,
    31,     0,    37,    26,    39,     0,    42,     0,    46,    47,
     0,     0,    49,     0,     0,   145,   147,   149,   151,   153,
   155,   157,   159,     0,   336,     0,   161,   333,   331,     0,
     0,   191,     0,     0,     0,     0,     0,   221,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,   319,   177,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   334,     0,     0,   306,   216,   218,   220,     0,   319,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    84,
    88,    92,   164,   169,     0,     0,   180,     0,     0,     0,
     0,     0,    29,    32,    40,     0,    41,    48,    43,     0,
     0,   337,     0,   330,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   319,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,    27,     0,     0,     0,   329,     0,   222,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    82,
     0,    86,     0,    90,     0,     0,     0,     0,   319,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    44,    20,   335,   172,   225,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,    85,
    87,    89,    91,    93,     0,     0,     0,     0,   319,     0,
     0,     0,     0,     0,     0,    96,   100,   104,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     6,   319,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   183,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    94,     0,    98,
     0,   102,     0,   319,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   182,     0,    22,
     0,     0,     0,     0,     0,     0,    95,    97,    99,   101,
   103,   105,   319,     0,     0,     0,   108,   112,   116,     0,
     0,     0,     0,     0,     0,     0,   319,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   106,     0,
   110,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   107,   109,   111,
   113,   115,   117,     0,   120,   124,   128,    23,     0,     0,
     0,     0,     0,     0,     0,   118,     0,   122,     0,   126,
     0,     0,     0,     0,     0,     0,   119,   121,   123,   125,
   127,   129,     0,     0,     0
};

static const short yydefgoto[] = {  1533,
     5,     6,    19,    20,    21,    22,     7,    64,    65,    66,
   481,  1309,   628,  1257,  1311,   629,  1258,  1313,   630,  1259,
  1417,   631,  1390,  1419,   632,  1391,  1421,   633,  1392,  1478,
   634,  1464,  1480,   635,  1465,  1482,   636,  1466,  1515,   637,
  1509,  1517,   638,  1510,  1519,   639,  1511,    67,   476,   466,
   467,   468,   469,    71,    72,    73,    74,  1029,  1030,    75,
    76,    79,   796,   295,   129,   446,   162,   163,   220,   370,
   874,   964,   965,   447,   819,  1088,  1156,   130
};

static const short yypact[] = {  2440,
    51,-32768,-32768,   -78,-32768,    47,  2557,-32768,    15,    81,
   121,   146,   168,   183,   189,    92,   140,   145,-32768,-32768,
-32768,-32768,   629,   148,   318,  -120,   155,   182,   -45,   -44,
   196,   203,   386,   229,   399,   403,   418,   312,   423,   398,
   306,  -107,  -107,   311,   282,   313,   426,   319,   485,   505,
   520,    36,   357,   -28,     0,-32768,   371,-32768,   532,-32768,
   542,   544,   509,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   559,    15,  2579,
-32768,-32768,-32768,-32768,-32768,   390,   390,   567,-32768,    24,
-32768,  1595,-32768,   409,   410,   411,   412,   416,   417,   419,
   420,   421,   422,   436,   437,   438,   439,   440,   443,   446,
   451,   452,   453,   454,   457,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,   582,   585,  1595,  1595,    44,   341,-32768,   609,
   626,-32768,  1595,  1595,  1595,  1595,   462,  1595,  1595,   464,
  1595,  1595,  1595,    17,  1595,   481,   489,   492,    17,   487,
   488,   510,   511,   512,   513,   514,  -107,  -107,  -107,  1595,
  1595,   -38,-32768,    99,  -107,   515,   517,   518,-32768,    17,
-32768,-32768,-32768,    -2,    17,    17,  1595,   -33,  1595,   602,
  1595,  1595,-32768,   684,-32768,   519,-32768,    15,   522,   525,
   527,   538,   545,   546,   547,   560,   561,   562,   563,   564,
   565,   566,   569,   570,   571,   572,   573,   574,   575,   576,
   577,   578,   579,   580,   581,   584,   586,   587,   686,   539,
   590,   583,-32768,-32768,  1595,    59,   415,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,   711,   516,
   853,   963,  1263,   593,   593,   593,-32768,-32768,  5432,  5307,
   119,   591,   592,-32768,  1595,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,-32768,
  -114,  5455,  2623,  5478,  5501,  1595,  5524,  2646,  1595,  2669,
  5547,  5570,   224,  1668,  6904,   760,  5593,  1595,  1595,  1595,
   761,  1595,  1595,  1595,  1595,  1595,  1595,  1595,   -57,-32768,
-32768,  3060,  3081,  -107,  -107,   181,   181,    96,  1595,  1595,
  1595,  2371,    94,  2389,  -107,-32768,   763,   764,  5616,   689,
  1595,  5639,   594,   987,  5662,-32768,  1595,   630,   770,   771,
   776,   777,   778,   779,   780,   781,   782,   783,   784,   785,
   788,   789,   791,   795,   796,   798,   804,   805,   806,   807,
   810,   685,   812,   813,   814,   816,   819,   820,-32768,   -32,
   821,   822,   824,  5332,    28,   652,-32768,  5685,  5708,  5731,
  5754,  5777,  5800,  5823,  5846,  5869,  5892,  5915,  3102,  5938,
  5961,  5984,  6007,  6030,  6053,  3123,  3144,  3165,   -27,-32768,
-32768,-32768,-32768,-32768,   142,  1539,  1595,  1595,  1595,  1595,
   825,   826,  1595,   829,  1047,   202,   442,   543,   543,   281,
   281,   281,   281,   285,   285,   593,   593,   593,   593,   830,
  1668,   823,   833,   828,   834,  6076,   835,   841,  6099,   842,
   844,   846,   938,   340,  2202,-32768,  -156,  1595,   847,  2692,
  6122,  6145,  1595,  2715,  2738,  6168,  6191,  6214,  6237,  6260,
  -107,  1595,  1595,-32768,-32768,-32768,   660,  1249,-32768,   669,
  1595,  3186,  3207,  3228,-32768,-32768,-32768,  1595,-32768,   167,
     8,   677,   678,   854,   690,  6283,   858,  1595,  1595,-32768,
  6306,   721,   691,   692,   693,   694,   695,   696,   700,   701,
   702,   703,   705,   706,   707,   709,   710,   712,   714,   715,
   716,   717,   718,   719,   720,   726,   727,   735,   736,   738,
   739,   740,-32768,   862,   745,-32768,   742,   103,-32768,-32768,
  1595,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1595,-32768,-32768,-32768,-32768,-32768,-32768,  1595,
  1595,  1595,-32768,  1668,  1595,  1595,  1595,  1595,  1595,   915,
   916,   917,  1320,  1488,  1693,  1708,  1730,-32768,-32768,  5357,
   918,  1595,-32768,   -21,  -107,-32768,    17,    17,   931,    17,
-32768,   932,-32768,    17,    17,-32768,  1154,  1595,  1761,-32768,
  1745,   765,   933,   936,   964,   251,   965,   966,   967,   968,
   969,   970,   971,   124,  3249,  3270,-32768,-32768,  2761,  -107,
  -107,  -107,  1814,-32768,   751,   772,   797,   808,   809,   817,
   818,   827,   831,   837,   849,   850,   973,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1595,
  1595,    17,  1595,   989,    17,  2217,   315,   990,   839,   991,
  1595,  1595,  -107,   995,   996,   860,  1023,  1025,    17,    17,
  1026,  -107,  1027,  1028,    17,    17,  1029,  1030,  1031,  1033,
  1034,    17,   360,    17,  1035,  1036,  1037,  1041,  1042,-32768,
  1040,   390,-32768,-32768,  5382,  6329,  6352,  6375,  6398,    26,
  1829,  1844,  1869,  1906,  1921,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   863,     3,  6904,  1044,    65,    45,  1046,
    17,  1048,    17,  1050,  1051,-32768,  2232,   349,  2202,-32768,
-32768,  1595,    17,    17,    17,-32768,   243,    17,    17,    17,
    17,    17,    17,    17,  1595,  1595,  1595,   868,   -71,   -30,
   137,-32768,   483,  1595,  1595,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,-32768,  3291,  3312,  1052,  6421,
  -111,   955,  1595,  1595,-32768,   880,    15,   883,  3333,  3354,
   -19,   884,   889,   886,   891,   888,   893,   890,   892,    29,
   894,   895,   899,   896,   897,   898,   900,   914,   919,   903,
-32768,-32768,-32768,-32768,-32768,   920,   921,   924,   925,   926,
   922,   927,-32768,   929,   935,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    19,   943,  1789,  1087,-32768,
-32768,-32768,  -107,-32768,  1088,-32768,  1089,-32768,-32768,  1595,
  1500,  3375,  1102,  1103,  1104,  1595,  1595,  1124,  1125,  1126,
  1127,  1128,  1130,  1132,  2784,  6444,  2500,   181,  -107,  1138,
  -107,  1149,  -107,     5,  1150,  3396,  3417,  3438,  3459,  3480,
  3501,  3522,  3543,  3564,  3585,  3606,  3627,  1595,  1595,-32768,
  1153,    17,    17,  1077,    17,   179,  6467,  1595,    15,  1159,
  1595,    17,  1179,  1183,  1181,  1053,  1191,   360,  1192,  1201,
  1595,  1209,  1213,  1215,  1216,  1220,   360,  1595,  1595,  1595,
    17,  1218,  1223,   360,  1595,  1225,  1226,  1227,  1595,   390,
  1228,   222,  1224,  1151,    63,  3648,-32768,    68,-32768,-32768,
  6904,-32768,  1595,-32768,-32768,-32768,  1936,  1957,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1055,-32768,  1595,-32768,  1057,
   218,-32768,   256,-32768,   264,-32768,    70,-32768,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,
  3669,  3690,  -111,    86,-32768,   -91,  1056,  1157,  1595,-32768,
-32768,  3711,    15,  1065,  3732,  1062,-32768,  1063,-32768,  1064,
-32768,  1070,-32768,  1067,  6490,-32768,  1069,-32768,-32768,  1074,
  1075,  6513,  3753,  6536,  1072,-32768,  1090,  1091,  3774,  1085,
  1092,-32768,  3795,  1093,   219,  1567,  1595,  1595,  1595,  1595,
  1595,  1595,     4,  1095,  1595,  1595,-32768,  3816,-32768,-32768,
   181,  2565,-32768,  1595,  1595,  1595,  1261,  1094,    -8,-32768,
  3837,  3858,  3879,  3900,  3921,  3942,  3963,  3984,  4005,  4026,
  4047,  4068,  1595,  1595,  1186,-32768,    17,-32768,    17,  1595,
  2807,    17,  1133,  1269,  -111,   360,  1273,  1595,  1271,   360,
  1274,  1276,  1275,  1285,  1290,  1595,  1293,    17,  1294,  1295,
  1595,  1279,  1306,  1595,  1313,-32768,-32768,  1314,  2005,  2020,
  2041,  2097,  2118,  2133,  2148,  1142,     3,  1315,  1319,  2830,
  4089,  1326,  1144,  1595,-32768,  2853,  2876,  2899,-32768,    17,
  1327,-32768,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  2922,  2945,  1146,-32768,  1156,  2181,
-32768,  1152,    15,-32768,  1158,  1160,  1161,  4110,-32768,  1163,
-32768,  1166,-32768,-32768,-32768,  6559,-32768,  1167,-32768,-32768,
  6582,  1170,-32768,  6605,  1168,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1277,-32768,   129,-32768,-32768,-32768,  1595,
  1175,-32768,  2968,  1329,  1348,     7,  1177,-32768,  4131,  4152,
  4173,  4194,  4215,  4236,  4257,  4278,  4299,  6628,  6651,  6674,
  1350,  1351,    17,    17,-32768,  1352,    15,   360,   360,   360,
   360,  1353,  1354,  1357,   360,  1358,  1359,  1360,  1362,  1193,
     3,-32768,  2594,  1364,-32768,-32768,-32768,-32768,    70,    17,
  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,-32768,
-32768,-32768,-32768,-32768,  1194,  1204,-32768,    15,  1195,  1196,
  1197,  1211,-32768,-32768,-32768,  1208,-32768,-32768,-32768,  1212,
  1595,-32768,  1595,-32768,  1214,     1,  1217,  4320,  4341,  4362,
  4383,  4404,  4425,  4446,  4467,  4488,  1210,  1219,  1221,    17,
  1310,  1252,   360,   360,  1388,  1390,   360,  1392,  5407,  2991,
  1394,  1395,    17,  1595,  1595,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,  1222,  1231,    15,  1234,  1236,
-32768,-32768,  1246,  1256,  1257,-32768,  1259,-32768,  1260,  4509,
  4530,  4551,  4572,  4593,  4614,  4635,  4656,  4677,   197,  6904,
   217,  6904,   220,  6904,  1355,  1595,    15,   360,    17,  1431,
  1435,  1367,  1436,  1437,  1595,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1438,  1595,  1447,  1595,  1448,  1278,
  4698,    15,  1280,  1281,-32768,-32768,-32768,-32768,-32768,  4719,
  4740,  4761,  4782,  4803,  4824,  6697,  6720,  6743,  6904,-32768,
  6904,-32768,  6904,-32768,  1595,  1595,  1309,   360,    17,  1595,
  1595,  1595,  1595,  1595,  1595,-32768,-32768,-32768,  4845,  3014,
  1321,  1282,  1283,  4866,  4887,  4908,  4929,  4950,  4971,  1287,
  1291,  1292,  1595,  1450,-32768,    17,   360,  1595,  1595,  1595,
  1595,  1595,  1595,  1595,  1595,  1595,  3037,-32768,  1299,  1322,
  4992,  5013,  5034,  5055,  5076,  5097,   244,  6904,   274,  6904,
   304,  6904,  1481,    17,  1482,  1595,  1595,  1595,  1595,  1595,
  1595,  1595,  1487,  1595,  1489,  1595,  1493,-32768,  1323,-32768,
  5118,  5139,  5160,  6766,  6789,  6812,  6904,-32768,  6904,-32768,
  6904,-32768,    17,  1595,  1595,  1595,-32768,-32768,-32768,  1328,
  5181,  5202,  5223,  1356,  1361,  1366,    17,  1595,  1595,  1595,
  1595,  1595,  1595,  1330,  5244,  5265,  5286,   308,  6904,   336,
  6904,   343,  6904,   360,  1595,  1595,  1595,  1595,  1499,  1595,
  1501,  1595,  1525,  1363,  6835,  6858,  6881,  6904,-32768,  6904,
-32768,  6904,-32768,  1526,-32768,-32768,-32768,-32768,  1396,  1421,
  1422,  1595,  1595,  1595,   361,  6904,   362,  6904,   365,  6904,
  1595,  1527,  1595,  1528,  1595,  1530,  6904,-32768,  6904,-32768,
  6904,-32768,  1538,  1541,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   959,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1532,  1596,
  -311,   260,  1619,-32768,-32768,-32768,-32768,   337, -1020,-32768,
-32768,   -74,  -885,   -23,-32768,  1038,    11,-32768,   -86,-32768,
  -938,   755,   178,  -415, -1070,-32768,-32768,-32768
};


#define	YYLAST		7076


static const short yytable[] = {   128,
   221,   325,   982,   180,   188,   470,   817,  1086,  1102,   178,
   946,   991,  1208,   137,   140,   574,  1155,    77,   998,    89,
   293,   589,   912,   590,  1045,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   261,   330,    10,
   822,  1027,   133,   164,   158,   159,     8,  1028,   134,   430,
  1027,   872,   375,   431,     9,   160,  1028,   873,   227,   175,
   821,   161,   176,  1017,   615,   616,   617,   618,   619,   620,
   621,   622,   623,   624,   625,   626,  1047,    80,  1048,   823,
   314,   315,   250,   251,   252,   253,   254,   255,   256,   477,
   478,   259,   260,   913,   314,   315,   849,   262,   850,   282,
   283,   284,   285,   338,   287,   288,  1125,   290,   291,   292,
   461,   297,   376,   314,   315,   406,    81,   138,   263,  1027,
  1242,   314,   315,   139,   141,  1028,   312,   313,   690,   331,
   316,   523,   314,   315,   179,   524,   553,   851,   555,   852,
   554,    82,   707,   329,   883,   332,   589,   334,   335,    11,
    12,    13,    14,    15,    16,    17,    18,   309,   310,   311,
  1126,  1101,   181,    83,  1130,   318,   326,    78,   120,   121,
  1272,   818,  1087,   947,   122,  1209,   969,   627,    84,   125,
   314,   315,   223,   224,    85,   294,   529,   530,   225,   810,
   226,   374,   892,   589,   378,   379,   380,   381,   382,   383,
   384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
   394,   395,   396,   397,   398,  1102,   314,   315,  1006,   314,
   315,   223,   224,    41,    42,    43,    44,   225,    46,   226,
  1015,   415,   416,   417,   418,   419,   420,   421,   422,   423,
   424,   425,   426,   427,   428,   429,   726,   314,   315,  1046,
   314,   315,   436,  1047,    86,   439,   407,   408,   409,   410,
   445,   683,   684,   471,   450,   451,   452,   317,   454,   455,
   456,   457,   458,   459,   460,   314,   315,   411,   412,   556,
   557,   558,   559,   836,   837,   472,   473,   474,   314,   315,
   727,   735,  1229,  1230,  1231,  1232,  1201,   486,  1202,  1236,
   560,   561,    87,   491,   853,   166,   854,    88,   167,   168,
   131,   296,   764,   132,   464,   465,   301,   135,   314,   315,
   265,   266,   267,   268,   269,   480,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   614,   264,   323,   149,   150,
   279,   151,   327,   328,   136,   267,   268,   269,   970,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   142,  1007,
  1008,  1009,  1010,   279,  1334,   143,  1335,  1289,  1290,   314,
   315,  1293,   563,   564,   565,   566,   567,  1076,  1077,   570,
  1011,  1012,   223,   224,  1336,  1024,  1337,  1338,   443,  1339,
   226,   145,   265,   266,   267,   268,   269,   445,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   314,   315,   374,
   377,  1432,   279,  1433,   591,   314,   315,   144,   322,   596,
   324,   153,  1343,  1025,   154,   155,   146,   156,   605,   606,
   147,  1026,   274,   275,   276,   277,   278,   609,   276,   277,
   278,  1434,   279,  1435,   613,   148,   279,   791,   792,   793,
   794,   795,   152,   170,   646,   647,   265,   266,   267,   268,
   269,   604,   270,   271,   272,   273,   274,   275,   276,   277,
   278,  1436,  1382,  1437,   157,  1488,   279,  1489,   765,   165,
   172,   169,   265,   266,   267,   268,   269,   171,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   685,   223,   224,
   173,  1410,   279,  1490,   587,  1491,   226,   223,   224,   686,
  1492,   400,  1493,   831,   174,   226,   687,   688,   689,   177,
   445,   691,   692,   693,   694,   695,   940,   183,  1521,  1523,
  1522,  1524,  1525,   182,  1526,   184,   186,   185,   706,   615,
   616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
   626,   187,   219,   374,   717,   719,   265,   266,   267,   268,
   269,   222,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   228,   229,   230,   231,   708,   279,   257,   232,   233,
   258,   234,   235,   236,   237,   804,   268,   269,  1494,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   238,   239,
   240,   241,   242,   279,   280,   243,   757,   758,   244,   760,
   739,   740,   741,   245,   246,   247,   248,   769,   770,   249,
   281,    89,    90,    91,   286,    92,   289,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   298,
   115,   299,   855,   771,   300,   302,   303,   265,   266,   267,
   268,   269,   780,   270,   271,   272,   273,   274,   275,   276,
   277,   278,   304,   305,   306,   307,   308,   279,   333,   336,
   369,   337,   879,   319,   339,   320,   321,   340,   832,   341,
   270,   271,   272,   273,   274,   275,   276,   277,   278,  1093,
   342,   845,   846,   847,   279,   399,   371,   343,   344,   345,
   856,   857,   858,   859,   860,   861,   862,   863,   864,   865,
   866,   867,   346,   347,   348,   349,   350,   351,   352,   876,
   877,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,   364,   365,   709,   710,   366,   712,   367,   368,
   373,   714,   715,   372,   279,   413,   448,   453,   414,   482,
   483,   485,   488,   492,   493,   494,   116,   117,   118,   119,
   495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
   120,   121,   505,   506,   916,   507,   122,   123,   124,   508,
   509,   125,   510,   126,   973,   127,   921,   374,   511,   512,
   513,   514,   927,   928,   515,   516,   517,   518,   519,   759,
   520,   521,   762,  1004,   522,   525,   531,   526,   527,   575,
   568,   569,   571,   918,   577,   573,   777,   778,   576,   607,
   578,   580,   783,   784,   961,   962,   581,   583,   608,   790,
   584,   797,   585,   592,   972,   640,   641,   975,   401,   941,
   642,   943,   643,   945,   645,   649,   680,   985,   650,   651,
   652,   653,   654,   655,   992,   993,   994,   656,   657,   658,
   659,   999,   660,   661,   662,  1003,   663,   664,   825,   665,
   827,   666,   667,   668,   669,   670,   671,   672,  1053,  1018,
   833,   834,   835,   673,   674,   838,   839,   840,   841,   842,
   843,   844,   675,   676,  1022,   677,   678,   679,   681,   682,
   696,   697,   698,   744,   705,  1031,  1032,  1033,  1034,  1035,
  1036,  1037,  1038,  1039,  1040,  1041,  1042,   711,   713,   723,
    89,    90,   724,   722,   745,  1051,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   402,   746,
   725,   728,   729,   730,   731,   732,   733,   734,   756,   767,
   747,   748,  1079,  1080,  1081,  1082,  1083,  1084,  1085,   749,
   750,  1090,  1091,   768,   489,   761,   766,   772,   773,   751,
  1096,  1097,  1098,   752,   265,   266,   267,   268,   269,   753,
   270,   271,   272,   273,   274,   275,   276,   277,   278,  1115,
  1116,   754,   755,   774,   279,   775,  1120,   776,   779,   781,
   782,   785,   786,   787,  1128,   788,   789,   798,   875,   816,
   799,   800,  1136,   801,   802,   803,   848,  1141,  1187,   820,
  1144,   824,   968,   826,   572,   828,   829,   870,   878,   976,
   880,   884,   885,   886,   887,   888,   889,   890,   894,   891,
  1163,   893,   895,   896,   897,   898,   902,   899,   995,  1169,
  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,  1179,
  1180,   900,   917,   919,   920,   908,   901,   903,   904,   120,
   121,   905,   906,   907,   909,   122,   910,   924,   925,   926,
   125,   911,  1228,   586,   265,   266,   267,   268,   269,   914,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   929,
   930,   931,   932,   933,   279,   934,  1203,   935,   265,   266,
   267,   268,   269,   942,   270,   271,   272,   273,   274,   275,
   276,   277,   278,  1262,   944,   948,    89,    90,   279,   963,
   967,   974,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   977,   978,   979,  1248,  1249,  1250,
  1251,  1252,  1253,  1254,  1255,  1256,   981,   983,   265,   266,
   267,   268,   269,   984,   270,   271,   272,   273,   274,   275,
   276,   277,   278,  1317,   986,   987,   980,  1269,   279,  1270,
   988,   989,   990,   996,  1118,   997,  1119,  1000,  1001,  1122,
  1013,  1005,  1002,  1021,  1049,  1014,  1023,  1050,  1054,  1056,
  1057,  1058,  1342,  1059,  1060,  1138,  1062,  1063,  1064,  1068,
  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,  1310,
  1312,  1314,  1072,  1069,  1070,  1073,  1099,  1367,   403,  1117,
  1075,  1089,  1100,  1123,  1124,  1127,  1129,  1167,  1132,  1131,
  1133,  1142,    26,    27,    28,    29,    30,    31,    32,    33,
  1134,    34,  1341,    36,    37,  1135,    39,    40,  1137,  1139,
  1140,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,  1358,
  1359,  1143,  1361,    52,  1363,   120,   121,  1145,  1154,  1146,
  1157,   122,  1158,  1162,  1183,   699,   125,    53,    54,   716,
  1161,  1186,  1168,  1184,  1206,  1188,  1192,  1189,  1190,  1193,
  1200,  1379,  1380,  1197,  1195,  1199,  1384,  1385,  1386,  1387,
  1388,  1389,  1204,  1207,  1210,  1223,  1224,  1227,  1233,  1234,
  1225,  1226,  1235,  1237,  1238,  1239,  1240,  1241,  1245,  1407,
  1265,  1260,  1263,  1264,  1411,  1412,  1413,  1414,  1415,  1416,
  1418,  1420,  1422,  1261,  1266,  1267,    63,  1247,  1283,  1268,
  1287,  1271,  1288,  1291,  1273,  1292,  1294,  1284,  1297,  1285,
  1298,  1315,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1316,
  1449,  1318,  1451,  1319,   265,   266,   267,   268,   269,  1320,
   270,   271,   272,   273,   274,   275,   276,   277,   278,  1321,
  1461,  1462,  1463,  1322,   279,  1340,  1345,  1286,  1323,  1324,
  1346,  1348,  1349,  1360,  1475,  1476,  1477,  1479,  1481,  1483,
  1299,  1347,  1362,  1364,  1381,  1408,  1365,  1368,  1369,  1396,
  1397,  1495,  1496,  1497,  1498,  1404,  1500,  1395,  1502,  1405,
  1406,   265,   266,   267,   268,   269,  1424,   270,   271,   272,
   273,   274,   275,   276,   277,   278,  1438,  1440,  1516,  1518,
  1520,   279,  1448,   700,  1450,  1425,  1344,  1527,  1452,  1529,
  1453,  1531,    89,    90,  1499,  1467,  1501,  1484,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
  1503,  1508,  1528,  1530,  1471,  1532,  1504,  1534,    68,  1472,
  1535,    89,    90,   562,  1473,  1246,  1383,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    89,
    90,  1078,   743,  1409,  1512,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    89,    90,  1513,
  1514,  1439,    69,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    70,   720,   966,     0,     0,
  1460,     0,     0,     0,     0,     0,     0,     0,     0,   265,
   266,   267,   268,   269,  1474,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   120,   121,     0,     0,     0,     0,   122,     0,     0,
    89,   444,   125,     0,     0,   922,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   701,     0,
   120,   121,     0,     0,     0,     0,   122,     0,     0,     0,
     0,   125,     0,   702,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     0,     0,     0,     0,   122,   703,     0,     0,     0,   125,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   721,     0,     0,     0,     0,     0,   120,   121,     0,     0,
     0,     0,   122,    89,   718,     0,     0,   125,     0,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    89,   915,     0,     0,     0,     0,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   742,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
   121,     0,     0,     0,   811,   122,     0,     0,     0,     0,
   125,     0,     0,     0,   265,   266,   267,   268,   269,   812,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   265,
   266,   267,   268,   269,   279,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   813,     0,     0,     0,     0,   279,
     0,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   265,   266,   267,   268,
   269,   279,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   814,     0,     0,     0,     0,   279,     0,     0,     0,
     0,     0,   120,   121,     0,     0,   815,     0,   122,     0,
     0,     0,     0,   125,     0,     0,     0,     0,     0,     0,
     0,  1019,     0,     0,     0,     0,     0,     0,     0,     0,
   120,   121,     0,     0,     0,     0,   122,     0,     0,     0,
     0,   125,  1020,     0,     0,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   265,   266,   267,   268,   269,   279,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   265,   266,   267,   268,   269,
   279,   270,   271,   272,   273,   274,   275,   276,   277,   278,
  1147,     0,     0,     0,     0,   279,     0,     0,     0,     0,
   265,   266,   267,   268,   269,  1148,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,     0,     0,     0,  1149,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,   265,   266,   267,   268,   269,   279,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   265,   266,   267,
   268,   269,   279,   270,   271,   272,   273,   274,   275,   276,
   277,   278,  1150,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,  1151,     0,     0,     0,     0,   279,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1152,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1153,     0,     0,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   265,   266,   267,   268,   269,   279,   270,   271,   272,
   273,   274,   275,   276,   277,   278,  1185,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,   588,
     0,     0,   279,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   763,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   830,
     0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   265,   266,   267,   268,   269,   279,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   265,
   266,   267,   268,   269,   279,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   265,   266,
   267,   268,   269,   279,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   265,   266,   267,   268,   269,   279,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
     0,     0,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,     0,    36,    37,    52,    39,    40,     0,    -8,
     1,     0,    -8,   -51,     0,     0,     0,     0,     0,    53,
    54,     0,     0,    52,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    53,    54,     0,
   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,   -51,
   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,   -51,     0,
     0,     0,   -51,   -51,   -51,   -51,   -51,   -51,     0,   -51,
   -51,   -51,   -51,   -51,   -51,     0,     0,     0,    63,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -51,   -51,
     0,     0,     0,     0,     0,   -51,    63,   -51,   -51,   -51,
   -51,   -51,   -51,   -51,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   475,     0,    -8,    -8,    -8,    -8,    -8,    -8,    -8,    -8,
    23,     0,     0,     0,     0,     0,     0,     0,   479,     0,
     0,     0,     0,     0,     0,     0,     0,   -51,     2,     3,
     0,     4,     0,     0,     0,     0,     0,    24,     0,    25,
    26,    27,    28,    29,    30,    31,    32,    33,     0,    34,
    35,    36,    37,    38,    39,    40,     0,     0,     0,    41,
    42,    43,    44,    45,    46,   189,    47,    48,    49,    50,
    51,    52,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    53,    54,     0,     0,     0,
     0,     0,    55,     0,    56,    57,    58,    59,    60,    61,
    62,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   190,   191,   192,     0,   938,     0,   939,
     0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,     0,     0,     0,    63,     0,     0,     0,     0,   203,
   204,   205,   206,   207,   208,   209,   210,   211,   212,     0,
   213,   214,   215,   216,   217,   218,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,     0,
     0,     0,  1094,     0,  1095,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,     0,     0,
     0,  1243,     0,  1244,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,   265,   266,   267,
   268,   269,   433,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
   265,   266,   267,   268,   269,   438,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,   265,   266,   267,   268,   269,   440,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,   265,   266,   267,   268,
   269,   593,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,   265,
   266,   267,   268,   269,   597,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,   598,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,     0,   265,   266,   267,   268,   269,
   738,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,   936,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,   265,   266,   267,   268,   269,  1121,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,     0,   265,   266,   267,   268,   269,  1159,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,     0,   265,   266,   267,
   268,   269,  1164,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,     0,
   265,   266,   267,   268,   269,  1165,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,     0,   265,   266,   267,   268,   269,  1166,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,   265,   266,   267,   268,
   269,  1181,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,     0,   265,
   266,   267,   268,   269,  1182,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,     0,   265,   266,   267,   268,   269,  1205,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,     0,   265,   266,   267,   268,   269,
  1296,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,     0,   265,   266,
   267,   268,   269,  1394,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,   265,   266,   267,   268,   269,  1423,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   462,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   463,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   543,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   550,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   551,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   552,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   610,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   611,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   612,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   736,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   737,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   868,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   869,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   881,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   882,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   923,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   949,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   950,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,   951,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,   952,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,   953,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,   954,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,   955,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
   956,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,   957,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,   958,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,   959,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,   960,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1016,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1043,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1044,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1052,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1055,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1066,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1071,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1074,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1092,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1103,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1104,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1105,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1106,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1107,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1108,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1109,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1110,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1111,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1112,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1113,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1114,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1160,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1191,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1211,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1212,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1213,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1214,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1215,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1216,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1217,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1218,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1219,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1274,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1275,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1276,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1277,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1278,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1279,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1280,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1281,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1282,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1325,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1326,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1327,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1328,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1329,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1330,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1331,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1332,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1333,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1366,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1370,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1371,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1372,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1373,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1374,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1375,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1393,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1398,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1399,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1400,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1401,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1402,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1403,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1426,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1427,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1428,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1429,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1430,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,   265,
   266,   267,   268,   269,  1431,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
   265,   266,   267,   268,   269,  1454,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,   265,   266,   267,   268,   269,  1455,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,   265,   266,   267,   268,   269,  1456,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,   265,   266,   267,   268,   269,  1468,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,   265,   266,   267,   268,   269,  1469,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,   265,   266,   267,   268,   269,
  1470,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,   265,   266,   267,   268,
   269,  1485,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,   265,   266,   267,
   268,   269,  1486,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,   265,   266,
   267,   268,   269,  1487,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,   405,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,     0,   528,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,   704,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,     0,     0,   805,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
     0,     0,  1295,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   404,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   432,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   434,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   435,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   437,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   441,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   442,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   449,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   484,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   487,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   490,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   532,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   533,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   534,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   535,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   536,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   537,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   538,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   539,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   540,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   541,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   542,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   544,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   545,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   546,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   547,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   548,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   549,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   579,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   582,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   594,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   595,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   599,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   600,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   601,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   602,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,   603,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,   644,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,   648,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,   806,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,   807,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,   808,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,   809,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,   871,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,   937,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
   971,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,  1061,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,  1065,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,  1067,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,  1194,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,  1196,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,  1198,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,  1220,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,  1221,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279,     0,  1222,   265,   266,
   267,   268,   269,     0,   270,   271,   272,   273,   274,   275,
   276,   277,   278,     0,     0,     0,     0,     0,   279,     0,
  1376,   265,   266,   267,   268,   269,     0,   270,   271,   272,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   279,     0,  1377,   265,   266,   267,   268,   269,     0,
   270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     0,     0,     0,     0,   279,     0,  1378,   265,   266,   267,
   268,   269,     0,   270,   271,   272,   273,   274,   275,   276,
   277,   278,     0,     0,     0,     0,     0,   279,     0,  1457,
   265,   266,   267,   268,   269,     0,   270,   271,   272,   273,
   274,   275,   276,   277,   278,     0,     0,     0,     0,     0,
   279,     0,  1458,   265,   266,   267,   268,   269,     0,   270,
   271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     0,     0,     0,   279,     0,  1459,   265,   266,   267,   268,
   269,     0,   270,   271,   272,   273,   274,   275,   276,   277,
   278,     0,     0,     0,     0,     0,   279,     0,  1505,   265,
   266,   267,   268,   269,     0,   270,   271,   272,   273,   274,
   275,   276,   277,   278,     0,     0,     0,     0,     0,   279,
     0,  1506,   265,   266,   267,   268,   269,     0,   270,   271,
   272,   273,   274,   275,   276,   277,   278,     0,     0,     0,
     0,     0,   279,     0,  1507,   265,   266,   267,   268,   269,
     0,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     0,     0,     0,     0,     0,   279
};

static const short yycheck[] = {    23,
    87,     4,   888,     4,    79,   317,     4,     4,  1029,    38,
     6,   897,     6,    59,    59,   431,  1087,     3,   904,     3,
     4,   178,     4,   180,   963,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,     4,    82,     3,
     6,    60,   173,    43,   162,   163,     6,    66,   179,   174,
    60,   173,     4,   178,   143,   173,    66,   179,    92,    34,
     6,   179,    37,     6,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,   178,     7,   180,    45,
   162,   163,   116,   117,   118,   119,   120,   121,   122,     6,
     7,   125,   126,    85,   162,   163,   178,    64,   180,   133,
   134,   135,   136,   188,   138,   139,  1055,   141,   142,   143,
   178,   145,    64,   162,   163,     7,     6,   173,    85,    60,
  1201,   162,   163,   179,   179,    66,   160,   161,   554,   173,
   179,   174,   162,   163,   173,   178,   174,   178,     7,   180,
   178,     6,   174,   177,   174,   179,   178,   181,   182,   113,
   114,   115,   116,   117,   118,   119,   120,   157,   158,   159,
  1056,   180,   173,     6,  1060,   165,   179,   163,   162,   163,
   180,   179,   179,   179,   168,   179,     8,   180,     6,   173,
   162,   163,   169,   170,     6,   179,   169,   170,   175,   174,
   177,   225,   174,   178,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,  1246,   162,   163,     7,   162,
   163,   169,   170,    53,    54,    55,    56,   175,    58,   177,
   178,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,     6,   162,   163,   174,
   162,   163,   286,   178,   173,   289,   148,   149,   150,   151,
   294,   169,   170,   178,   298,   299,   300,   179,   302,   303,
   304,   305,   306,   307,   308,   162,   163,   169,   170,   148,
   149,   150,   151,    51,    52,   319,   320,   321,   162,   163,
    50,   178,  1188,  1189,  1190,  1191,   178,   331,   180,  1195,
   169,   170,   173,   337,   178,    34,   180,   173,    37,    38,
   173,   144,     8,     6,   314,   315,   149,   173,   162,   163,
   152,   153,   154,   155,   156,   325,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   179,     6,   170,    37,    38,
   172,    40,   175,   176,   173,   154,   155,   156,   180,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   173,   148,
   149,   150,   151,   172,   178,   173,   180,  1263,  1264,   162,
   163,  1267,   406,   407,   408,   409,   410,   169,   170,   413,
   169,   170,   169,   170,   178,   178,   180,   178,   175,   180,
   177,   173,   152,   153,   154,   155,   156,   431,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   162,   163,   443,
     6,   178,   172,   180,   448,   162,   163,    42,   169,   453,
   171,    34,  1318,   178,    37,    38,    38,    40,   462,   463,
    38,   178,   162,   163,   164,   165,   166,   471,   164,   165,
   166,   178,   172,   180,   478,    38,   172,    98,    99,   100,
   101,   102,    40,    38,   488,   489,   152,   153,   154,   155,
   156,   461,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   178,  1368,   180,   179,   178,   172,   180,   174,   179,
     6,   179,   152,   153,   154,   155,   156,   179,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   531,   169,   170,
     6,  1397,   172,   178,   175,   180,   177,   169,   170,   543,
   178,     6,   180,   175,     5,   177,   550,   551,   552,   173,
   554,   555,   556,   557,   558,   559,   848,     6,   178,   178,
   180,   180,   178,   173,   180,     4,    38,     4,   572,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     3,   173,   587,   588,   589,   152,   153,   154,   155,
   156,     5,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   173,   173,   173,   173,   575,   172,     6,   173,   173,
     6,   173,   173,   173,   173,   682,   155,   156,  1484,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   173,   173,
   173,   173,   173,   172,     6,   173,   640,   641,   173,   643,
   610,   611,   612,   173,   173,   173,   173,   651,   652,   173,
     5,     3,     4,     5,   173,     7,   173,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   179,
    32,   173,   180,   653,   173,   179,   179,   152,   153,   154,
   155,   156,   662,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   173,   173,   173,   173,   173,   172,    87,     6,
     5,   173,   767,   179,   173,   179,   179,   173,   722,   173,
   158,   159,   160,   161,   162,   163,   164,   165,   166,  1021,
   173,   735,   736,   737,   172,     5,   178,   173,   173,   173,
   744,   745,   746,   747,   748,   749,   750,   751,   752,   753,
   754,   755,   173,   173,   173,   173,   173,   173,   173,   763,
   764,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   577,   578,   173,   580,   173,   173,
   178,   584,   585,   174,   172,   175,     7,     7,   177,     7,
     7,    83,   179,   144,     5,     5,   148,   149,   150,   151,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
   162,   163,     5,     5,   818,     5,   168,   169,   170,     5,
     5,   173,     5,   175,   879,   177,   830,   831,     5,     5,
     5,     5,   836,   837,     5,   131,     5,     5,     5,   642,
     5,     3,   645,   910,     5,     5,   175,     6,     5,     7,
     6,     6,     4,   823,     7,     6,   659,   660,     6,   180,
     7,     7,   665,   666,   868,   869,     6,     6,   180,   672,
     7,   674,     7,     7,   878,   179,   179,   881,     6,   849,
     7,   851,   173,   853,     7,   145,     5,   891,   178,   178,
   178,   178,   178,   178,   898,   899,   900,   178,   178,   178,
   178,   905,   178,   178,   178,   909,   178,   178,   711,   178,
   713,   178,   178,   178,   178,   178,   178,   178,   973,   923,
   723,   724,   725,   178,   178,   728,   729,   730,   731,   732,
   733,   734,   178,   178,   938,   178,   178,   178,   174,   178,
     6,     6,     6,   173,     7,   949,   950,   951,   952,   953,
   954,   955,   956,   957,   958,   959,   960,     7,     7,     7,
     3,     4,     7,   179,   173,   969,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     6,   173,
     7,     7,     7,     7,     7,     7,     7,     7,     6,   141,
   173,   173,  1006,  1007,  1008,  1009,  1010,  1011,  1012,   173,
   173,  1015,  1016,     3,     8,     7,     7,     3,     3,   173,
  1024,  1025,  1026,   173,   152,   153,   154,   155,   156,   173,
   158,   159,   160,   161,   162,   163,   164,   165,   166,  1043,
  1044,   173,   173,   164,   172,     3,  1050,     3,     3,     3,
     3,     3,     3,     3,  1058,     3,     3,     3,    84,   177,
     5,     5,  1066,     3,     3,     6,   179,  1071,  1123,     6,
  1074,     6,   875,     6,     8,     6,     6,     6,   179,   882,
   178,   178,   174,   178,   174,   178,   174,   178,   174,   178,
  1094,   178,   174,   178,   178,   178,   174,   178,   901,  1103,
  1104,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,
  1114,   178,     6,     6,     6,   174,   178,   178,   178,   162,
   163,   178,   178,   178,   178,   168,   178,     6,     6,     6,
   173,   177,  1187,   176,   152,   153,   154,   155,   156,   177,
   158,   159,   160,   161,   162,   163,   164,   165,   166,     6,
     6,     6,     6,     6,   172,     6,  1160,     6,   152,   153,
   154,   155,   156,     6,   158,   159,   160,   161,   162,   163,
   164,   165,   166,  1228,     6,     6,     3,     4,   172,     7,
    84,     3,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     6,     3,     6,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,  1218,  1219,     6,     6,   152,   153,
   154,   155,   156,     3,   158,   159,   160,   161,   162,   163,
   164,   165,   166,  1288,     6,     3,   164,  1241,   172,  1243,
     6,     6,     3,     6,  1047,     3,  1049,     3,     3,  1052,
     7,     4,     6,   179,   179,    85,   180,    81,   174,   178,
   178,   178,  1317,   174,   178,  1068,   178,   174,   174,   178,
  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,
  1284,  1285,   178,   174,   174,   174,     6,  1342,     6,    84,
   178,   177,   179,   141,     6,     3,     6,  1100,     3,     6,
     6,     3,    34,    35,    36,    37,    38,    39,    40,    41,
     6,    43,  1316,    45,    46,     6,    48,    49,     6,     6,
     6,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
  1334,     6,  1336,    65,  1338,   162,   163,     5,   177,     6,
     6,   168,     4,   180,   179,     6,   173,    79,    80,   176,
     5,   180,     6,   178,     6,   178,   174,   178,   178,   174,
    64,  1365,  1366,   174,   178,   178,  1370,  1371,  1372,  1373,
  1374,  1375,   178,     6,   178,     6,     6,     6,     6,     6,
  1183,  1184,     6,     6,     6,     6,     5,   175,     5,  1393,
   174,   178,   178,   178,  1398,  1399,  1400,  1401,  1402,  1403,
  1404,  1405,  1406,   180,   174,   178,   138,  1210,   179,   178,
    81,   178,   141,     6,   178,     6,     5,   179,     5,   179,
     6,   180,  1426,  1427,  1428,  1429,  1430,  1431,  1432,   179,
  1434,   178,  1436,   178,   152,   153,   154,   155,   156,   174,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   174,
  1454,  1455,  1456,   177,   172,    81,     6,  1260,   180,   180,
     6,     6,     6,     6,  1468,  1469,  1470,  1471,  1472,  1473,
  1273,    85,     6,     6,   146,     6,   179,   178,   178,   178,
   178,  1485,  1486,  1487,  1488,   179,  1490,   147,  1492,   179,
   179,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     6,     6,  1512,  1513,
  1514,   172,     6,     6,     6,   174,  1319,  1521,     6,  1523,
   178,  1525,     3,     4,     6,   178,     6,   178,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     6,     6,     6,     6,   179,     6,   174,     0,     7,   179,
     0,     3,     4,     5,   179,  1209,  1369,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,     3,
     4,     5,   614,  1396,   179,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,     3,     4,   179,
   179,  1424,     7,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     7,   589,   873,    -1,    -1,
  1453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
   153,   154,   155,   156,  1467,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   162,   163,    -1,    -1,    -1,    -1,   168,    -1,    -1,
     3,     4,   173,    -1,    -1,   176,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     6,    -1,
   162,   163,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,   163,
    -1,    -1,    -1,    -1,   168,     6,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,    -1,   162,   163,    -1,    -1,
    -1,    -1,   168,     3,     4,    -1,    -1,   173,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
   163,    -1,    -1,    -1,     6,   168,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,   152,   153,   154,   155,   156,     6,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   152,
   153,   154,   155,   156,   172,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,    -1,    -1,    -1,    -1,   172,
    -1,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   152,   153,   154,   155,
   156,   172,   158,   159,   160,   161,   162,   163,   164,   165,
   166,     6,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
    -1,    -1,   162,   163,    -1,    -1,     6,    -1,   168,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   162,   163,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,     6,    -1,    -1,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   152,   153,   154,   155,   156,   172,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   152,   153,   154,   155,   156,
   172,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     6,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
   152,   153,   154,   155,   156,     6,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   152,   153,   154,   155,   156,   172,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   152,   153,   154,
   155,   156,   172,   158,   159,   160,   161,   162,   163,   164,
   165,   166,     6,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     6,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   152,   153,   154,   155,   156,   172,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     6,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,     8,
    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   152,   153,   154,   155,   156,   172,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   152,
   153,   154,   155,   156,   172,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   152,   153,
   154,   155,   156,   172,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   152,   153,   154,   155,   156,   172,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,
    -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
    -1,    43,    -1,    45,    46,    65,    48,    49,    -1,     0,
     1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    79,
    80,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,
    31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
    -1,    -1,    53,    54,    55,    56,    57,    58,    -1,    60,
    61,    62,    63,    64,    65,    -1,    -1,    -1,   138,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,
    -1,    -1,    -1,    -1,    -1,    86,   138,    88,    89,    90,
    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   180,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,
    -1,   142,    -1,    -1,    -1,    -1,    -1,    31,    -1,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
    44,    45,    46,    47,    48,    49,    -1,    -1,    -1,    53,
    54,    55,    56,    57,    58,    37,    60,    61,    62,    63,
    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,    -1,    -1,
    -1,    -1,    86,    -1,    88,    89,    90,    91,    92,    93,
    94,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,    95,    96,    97,    -1,   178,    -1,   180,
    -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,    -1,
   132,   133,   134,   135,   136,   137,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,
   155,   156,   180,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
   152,   153,   154,   155,   156,   180,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,    -1,   152,   153,   154,   155,   156,   180,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,
   156,   180,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,
   153,   154,   155,   156,   180,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,    -1,   152,   153,   154,   155,   156,   180,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,   156,
   180,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,   153,
   154,   155,   156,   180,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,   152,   153,   154,   155,   156,   180,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,    -1,   152,   153,   154,   155,   156,   180,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,
   155,   156,   180,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
   152,   153,   154,   155,   156,   180,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,    -1,   152,   153,   154,   155,   156,   180,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,
   156,   180,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,
   153,   154,   155,   156,   180,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,    -1,   152,   153,   154,   155,   156,   180,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,    -1,   152,   153,   154,   155,   156,
   180,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   152,   153,
   154,   155,   156,   180,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,   152,   153,   154,   155,   156,   180,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,
   153,   154,   155,   156,   178,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
   152,   153,   154,   155,   156,   178,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,   152,   153,   154,   155,   156,   178,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,   152,   153,   154,   155,   156,   178,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,   152,   153,   154,   155,   156,   178,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,   178,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,   156,
   178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,   155,
   156,   178,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,   154,
   155,   156,   178,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,   152,   153,
   154,   155,   156,   178,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,   176,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,   176,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,    -1,    -1,   176,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
    -1,    -1,   176,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,
   154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,
   174,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
    -1,   172,    -1,   174,   152,   153,   154,   155,   156,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,
   155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,
   152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
   172,    -1,   174,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,
   156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,    -1,    -1,   172,    -1,   174,   152,
   153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   172,
    -1,   174,   152,   153,   154,   155,   156,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
    -1,    -1,   172,    -1,   174,   152,   153,   154,   155,   156,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,    -1,    -1,   172
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 147 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 156 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 170 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 177 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 194 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 195 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 196 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 201 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 206 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 217 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 220 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 224 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 230 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 236 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 243 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 249 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 253 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 257 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 264 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 268 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 273 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 277 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 281 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 285 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 289 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 293 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 297 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 301 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 310 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 313 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 317 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 321 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 325 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 329 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 354 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 364 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 367 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 389 "Gmsh.y"
{
      fprintf(stderr, yyvsp[-2].c); 
    ;
    break;}
case 66:
#line 393 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  fprintf(stderr, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring, "%");
	  strcat(tmpstring, str);
	  fprintf(stderr, tmpstring, *(double*)List_Pointer(ListOfDouble_L,i)); 
	}
	else{
	  fprintf(stderr, "\n"); 
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      if(!yyerrorstate)
	fprintf(stderr, "\n"); 
    ;
    break;}
case 67:
#line 423 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 68:
#line 427 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 69:
#line 434 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 82:
#line 453 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 455 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 460 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 465 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 472 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 474 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 479 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 484 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 491 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 493 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 498 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 503 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 510 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 512 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 518 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 524 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 531 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 533 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 539 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 545 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 552 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 554 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 560 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 566 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 573 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 575 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 582 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 591 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 598 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 600 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 607 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 616 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 623 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 625 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 632 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 641 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 648 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 650 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 658 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 667 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 674 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 676 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 684 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 693 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 700 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 702 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 710 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 719 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 735 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-1].d);
      }
    ;
    break;}
case 131:
#line 747 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
      }
    ;
    break;}
case 132:
#line 759 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else{
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0 ;
      }
    ;
    break;}
case 133:
#line 768 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 134:
#line 780 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1. ;
    ;
    break;}
case 135:
#line 788 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd -= 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 136:
#line 800 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 808 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd += yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 138:
#line 820 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= yyvsp[-1].d ;
    ;
    break;}
case 139:
#line 828 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd -= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 140:
#line 840 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) *= yyvsp[-1].d ;
    ;
    break;}
case 141:
#line 848 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd *= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 142:
#line 860 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-3].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	else
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) /= yyvsp[-1].d ;
      }
    ;
    break;}
case 143:
#line 872 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-6].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
	else{
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	    *pd /= yyvsp[-1].d ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 144:
#line 891 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 145:
#line 904 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 146:
#line 922 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 939 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 960 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 977 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 998 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1015 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1036 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1053 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1074 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	  vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	else{
	  if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	    vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 155:
#line 1095 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.View[%d].%s /= %g'", 
		 yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(strcmp(yyvsp[-10].c, "PostProcessing"))
	  vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
	else{
	  if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	    if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	    else      vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			       yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	  }
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 156:
#line 1121 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1138 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1159 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1176 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1199 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1212 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 162:
#line 1241 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1248 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1254 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1273 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 166:
#line 1284 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 167:
#line 1292 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1298 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1304 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1323 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1329 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 172:
#line 1346 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 173:
#line 1352 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1358 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1364 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1370 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1376 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 178:
#line 1395 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 179:
#line 1407 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1413 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 181:
#line 1432 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 182:
#line 1455 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 183:
#line 1463 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 184:
#line 1467 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1473 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1479 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 187:
#line 1491 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 188:
#line 1497 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1503 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1516 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1521 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1526 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1531 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1538 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1539 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1540 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1545 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 198:
#line 1549 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1561 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 200:
#line 1579 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 201:
#line 1594 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;
	strcpy(tmpstring, ThePathForIncludes);
	if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,yyvsp[-1].c);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){

	if(!CTX.interactive){ // we're in interactive mode
	  char ext[6];
	  strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
	  Replot();
	  extern void CreateImage (char *name, FILE *fp);
	  FILE *fp = 0;
	  if(!strcmp(ext,".gif")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type = PRINT_GL2GIF;
	  }
	  else if(!strcmp(ext,".eps")){
	    fp = fopen(yyvsp[-1].c,"w");
	    CTX.print.type =  PRINT_GL2PS_RECURSIVE;
	  } 
	  else if(!strcmp(ext,".xpm")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type =  PRINT_XDUMP;
	    CTX.print.format = FORMAT_XPM;
	  } 
	  if(fp){
	    CreateImage(yyvsp[-1].c,fp);
	    fclose(fp);
	  }
	  else{
	    vyyerror("Unable to Open File '%s'", yyvsp[-1].c);
	  }
	}
	
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Save")){

	Print_Mesh(THEM, yyvsp[-1].c, CTX.mesh.format);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 202:
#line 1665 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	extern long Get_AnimTime();
	long sleep_time = Get_AnimTime();
	while(1){
	  if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 203:
#line 1685 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 204:
#line 1689 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	}
	else{
	  Init();
	  Draw();
	}
      }
    ;
    break;}
case 205:
#line 1710 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 206:
#line 1724 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 207:
#line 1738 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 208:
#line 1763 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 209:
#line 1788 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 210:
#line 1814 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 211:
#line 1819 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 212:
#line 1824 "Gmsh.y"
{
      // skip everything until return is found
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until("Return");
    ;
    break;}
case 213:
#line 1831 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("EndIf");
    ;
    break;}
case 214:
#line 1835 "Gmsh.y"
{
    ;
    break;}
case 215:
#line 1846 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 216:
#line 1851 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 217:
#line 1857 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 218:
#line 1861 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 219:
#line 1865 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 220:
#line 1869 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 221:
#line 1873 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 222:
#line 1878 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 223:
#line 1886 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1889 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 1895 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 226:
#line 1912 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 227:
#line 1923 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 228:
#line 1940 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 229:
#line 1957 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 230:
#line 1974 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 231:
#line 1995 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 232:
#line 2015 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 233:
#line 2035 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 234:
#line 2052 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 235:
#line 2077 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 236:
#line 2081 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 237:
#line 2092 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 238:
#line 2093 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 239:
#line 2097 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 240:
#line 2098 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 241:
#line 2099 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 242:
#line 2100 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 243:
#line 2101 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 244:
#line 2105 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 245:
#line 2106 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 246:
#line 2107 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 247:
#line 2108 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 248:
#line 2109 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 249:
#line 2110 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 250:
#line 2111 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 251:
#line 2112 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 252:
#line 2114 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 253:
#line 2120 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 254:
#line 2121 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 255:
#line 2122 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 256:
#line 2123 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 257:
#line 2124 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 258:
#line 2125 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 259:
#line 2126 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 260:
#line 2127 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 261:
#line 2128 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 262:
#line 2129 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 263:
#line 2130 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 264:
#line 2131 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 265:
#line 2132 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2133 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 267:
#line 2134 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2135 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2136 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2137 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 271:
#line 2138 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2139 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2140 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2141 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 275:
#line 2142 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2143 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 277:
#line 2144 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2145 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2146 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 280:
#line 2147 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2148 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 282:
#line 2149 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 283:
#line 2150 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 284:
#line 2151 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 285:
#line 2160 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 286:
#line 2161 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 287:
#line 2166 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
      }
      Free(yyvsp[0].c);
    ;
    break;}
case 288:
#line 2178 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 289:
#line 2196 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0) ;
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2208 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 291:
#line 2226 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1.0) ;
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 292:
#line 2238 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd -= 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 293:
#line 2258 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 294:
#line 2279 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 295:
#line 2303 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 296:
#line 2324 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 297:
#line 2348 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 298:
#line 2369 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 299:
#line 2395 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 300:
#line 2401 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 301:
#line 2415 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
      //??? Avec ce qui suit, bison se plante sur DEC
      //for(i=0 ; i<5 ; i++) $$[i] = $1[i];
    ;
    break;}
case 302:
#line 2421 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 303:
#line 2425 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 304:
#line 2429 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 305:
#line 2433 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 306:
#line 2439 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 307:
#line 2443 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 308:
#line 2447 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 309:
#line 2451 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 310:
#line 2458 "Gmsh.y"
{
    ;
    break;}
case 311:
#line 2461 "Gmsh.y"
{
    ;
    break;}
case 312:
#line 2467 "Gmsh.y"
{
    ;
    break;}
case 313:
#line 2470 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2476 "Gmsh.y"
{
    ;
    break;}
case 315:
#line 2479 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 316:
#line 2483 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 317:
#line 2490 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 318:
#line 2495 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 319:
#line 2502 "Gmsh.y"
{
    ;
    break;}
case 320:
#line 2505 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 321:
#line 2511 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(ListOfDouble_L, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 322:
#line 2526 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 323:
#line 2534 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 324:
#line 2539 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 325:
#line 2548 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 326:
#line 2560 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 327:
#line 2564 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 328:
#line 2572 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 329:
#line 2586 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 330:
#line 2590 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 331:
#line 2594 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 332:
#line 2599 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 333:
#line 2604 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 334:
#line 2624 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 335:
#line 2628 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 336:
#line 2650 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 337:
#line 2658 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 338:
#line 2665 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 339:
#line 2669 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 340:
#line 2673 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(ListOfDouble_L,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring));
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2697 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

