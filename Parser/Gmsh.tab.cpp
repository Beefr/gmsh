
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tStrCat	287
#define	tStrPrefix	288
#define	tDraw	289
#define	tPoint	290
#define	tCircle	291
#define	tEllipsis	292
#define	tLine	293
#define	tSurface	294
#define	tSpline	295
#define	tVolume	296
#define	tCharacteristic	297
#define	tLength	298
#define	tParametric	299
#define	tElliptic	300
#define	tPlane	301
#define	tRuled	302
#define	tTransfinite	303
#define	tComplex	304
#define	tPhysical	305
#define	tUsing	306
#define	tBump	307
#define	tProgression	308
#define	tPlugin	309
#define	tRotate	310
#define	tTranslate	311
#define	tSymmetry	312
#define	tDilate	313
#define	tExtrude	314
#define	tDuplicata	315
#define	tLoop	316
#define	tRecombine	317
#define	tDelete	318
#define	tCoherence	319
#define	tIntersect	320
#define	tAttractor	321
#define	tLayers	322
#define	tScalarTetrahedron	323
#define	tVectorTetrahedron	324
#define	tTensorTetrahedron	325
#define	tScalarTriangle	326
#define	tVectorTriangle	327
#define	tTensorTriangle	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarPoint	332
#define	tVectorPoint	333
#define	tTensorPoint	334
#define	tBSpline	335
#define	tNurbs	336
#define	tOrder	337
#define	tWith	338
#define	tBounds	339
#define	tKnots	340
#define	tColor	341
#define	tColorTable	342
#define	tFor	343
#define	tIn	344
#define	tEndFor	345
#define	tIf	346
#define	tEndIf	347
#define	tExit	348
#define	tReturn	349
#define	tCall	350
#define	tFunction	351
#define	tMesh	352
#define	tB_SPLINE_SURFACE_WITH_KNOTS	353
#define	tB_SPLINE_CURVE_WITH_KNOTS	354
#define	tCARTESIAN_POINT	355
#define	tTRUE	356
#define	tFALSE	357
#define	tUNSPECIFIED	358
#define	tU	359
#define	tV	360
#define	tEDGE_CURVE	361
#define	tVERTEX_POINT	362
#define	tORIENTED_EDGE	363
#define	tPLANE	364
#define	tFACE_OUTER_BOUND	365
#define	tEDGE_LOOP	366
#define	tADVANCED_FACE	367
#define	tVECTOR	368
#define	tDIRECTION	369
#define	tAXIS2_PLACEMENT_3D	370
#define	tISO	371
#define	tENDISO	372
#define	tENDSEC	373
#define	tDATA	374
#define	tHEADER	375
#define	tFILE_DESCRIPTION	376
#define	tFILE_SCHEMA	377
#define	tFILE_NAME	378
#define	tMANIFOLD_SOLID_BREP	379
#define	tCLOSED_SHELL	380
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	381
#define	tFACE_BOUND	382
#define	tCYLINDRICAL_SURFACE	383
#define	tCONICAL_SURFACE	384
#define	tCIRCLE	385
#define	tTRIMMED_CURVE	386
#define	tGEOMETRIC_SET	387
#define	tCOMPOSITE_CURVE_SEGMENT	388
#define	tCONTINUOUS	389
#define	tCOMPOSITE_CURVE	390
#define	tTOROIDAL_SURFACE	391
#define	tPRODUCT_DEFINITION	392
#define	tPRODUCT_DEFINITION_SHAPE	393
#define	tSHAPE_DEFINITION_REPRESENTATION	394
#define	tELLIPSE	395
#define	tTrimmed	396
#define	tSolid	397
#define	tEndSolid	398
#define	tVertex	399
#define	tFacet	400
#define	tNormal	401
#define	tOuter	402
#define	tLoopSTL	403
#define	tEndLoop	404
#define	tEndFacet	405
#define	tAFFECTPLUS	406
#define	tAFFECTMINUS	407
#define	tAFFECTTIMES	408
#define	tAFFECTDIVIDE	409
#define	tOR	410
#define	tAND	411
#define	tEQUAL	412
#define	tNOTEQUAL	413
#define	tAPPROXEQUAL	414
#define	tLESSOREQUAL	415
#define	tGREATEROREQUAL	416
#define	tCROSSPRODUCT	417
#define	tPLUSPLUS	418
#define	tMINUSMINUS	419
#define	UNARYPREC	420

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.99 2001-08-01 13:34:16 geuzaine Exp $

  //
  // Generaliser sprintf avec des chaines de caracteres
  // 

#include <stdarg.h>
#ifndef _NOPLUGIN
#include "PluginManager.h"
#endif
#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 73 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1539
#define	YYFLAG		-32768
#define	YYNTBASE	185

#define YYTRANSLATE(x) ((unsigned)(x) <= 420 ? yytranslate[x] : 267)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   172,     2,     2,     2,   170,     2,     2,   177,
   178,   168,   166,   182,   167,   181,   169,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   162,
     2,   164,   156,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   179,     2,   180,   176,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   183,     2,   184,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   157,
   158,   159,   160,   161,   163,   165,   171,   173,   174,   175
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   594,   598,   599,   613,   615,   619,
   620,   634,   636,   640,   641,   655,   657,   661,   662,   682,
   684,   688,   689,   709,   711,   715,   716,   736,   738,   742,
   743,   769,   771,   775,   776,   802,   804,   808,   809,   835,
   837,   841,   842,   874,   876,   880,   881,   913,   915,   919,
   920,   952,   954,   956,   958,   960,   962,   964,   966,   971,
   979,   989,   996,  1000,  1007,  1014,  1024,  1031,  1041,  1047,
  1056,  1065,  1077,  1084,  1094,  1104,  1114,  1122,  1131,  1144,
  1151,  1157,  1165,  1173,  1186,  1194,  1204,  1222,  1230,  1239,
  1248,  1256,  1268,  1274,  1283,  1296,  1305,  1328,  1349,  1358,
  1367,  1373,  1382,  1390,  1399,  1405,  1417,  1423,  1433,  1435,
  1437,  1439,  1440,  1443,  1448,  1453,  1460,  1464,  1468,  1472,
  1480,  1483,  1486,  1493,  1502,  1511,  1522,  1524,  1527,  1529,
  1533,  1538,  1540,  1549,  1562,  1571,  1584,  1593,  1606,  1618,
  1634,  1635,  1638,  1641,  1651,  1654,  1661,  1671,  1681,  1690,
  1699,  1708,  1715,  1720,  1723,  1726,  1728,  1730,  1732,  1734,
  1736,  1738,  1742,  1745,  1748,  1751,  1755,  1759,  1763,  1767,
  1771,  1775,  1779,  1783,  1787,  1791,  1795,  1799,  1803,  1807,
  1813,  1818,  1823,  1828,  1833,  1838,  1843,  1848,  1853,  1858,
  1863,  1870,  1875,  1880,  1885,  1890,  1895,  1900,  1907,  1914,
  1921,  1926,  1928,  1930,  1932,  1937,  1940,  1946,  1950,  1957,
  1962,  1970,  1972,  1975,  1978,  1982,  1986,  1998,  2008,  2016,
  2024,  2025,  2029,  2031,  2035,  2036,  2040,  2044,  2046,  2050,
  2052,  2054,  2058,  2063,  2067,  2073,  2077,  2082,  2089,  2097,
  2099,  2101,  2105,  2109,  2119,  2127,  2129,  2135,  2139,  2146,
  2148,  2152,  2154,  2161,  2166,  2171,  2178,  2185
};

static const short yyrhs[] = {   188,
     0,   187,     0,   193,     0,     1,     6,     0,     3,     0,
   167,     3,     0,   143,     0,   146,   147,   186,   186,   186,
   148,   149,   145,   186,   186,   186,   145,   186,   186,   186,
   145,   186,   186,   186,   150,   151,     0,   144,     0,     0,
   188,   189,     0,   190,     0,   192,     0,   191,     0,   117,
     6,     0,   118,     6,     0,   120,     6,     0,   119,     6,
     0,   121,     6,     0,   122,   177,   256,   182,     5,   178,
     6,     0,   123,   177,   256,   178,     6,     0,   124,   177,
     5,   182,     5,   182,   256,   182,   256,   182,     5,   182,
     5,   182,     5,   178,     6,     0,     3,     7,   101,   177,
     5,   182,   254,   178,     6,     0,     3,     7,   100,   177,
     5,   182,   252,   182,   260,   182,   251,   182,   251,   182,
   251,   182,   260,   182,   260,   182,   251,   178,     6,     0,
     3,     7,    99,   177,     5,   182,   252,   182,   252,   182,
   258,   182,   251,   182,   251,   182,   251,   182,   251,   182,
   260,   182,   260,   182,   260,   182,   260,   182,   251,   178,
     6,     0,     3,     7,   107,   177,     5,   182,     3,   182,
     3,   182,     3,   182,   251,   178,     6,     0,     3,     7,
   111,   177,     5,   182,     3,   182,   251,   178,     6,     0,
     3,     7,   128,   177,     5,   182,     3,   182,   251,   178,
     6,     0,     3,     7,   109,   177,     5,   182,   168,   182,
   168,   182,   252,   182,   251,   178,     6,     0,     3,     7,
   112,   177,     5,   182,   260,   178,     6,     0,     3,     7,
   113,   177,     5,   182,   260,   182,     3,   182,   251,   178,
     6,     0,     3,     7,   108,   177,     5,   182,     3,   178,
     6,     0,     3,     7,   114,   177,     5,   182,     3,   182,
   252,   178,     6,     0,     3,     7,   116,   177,     5,   182,
     3,   182,     3,   182,     3,   178,     6,     0,     3,     7,
   115,   177,     5,   182,   254,   178,     6,     0,     3,     7,
   110,   177,     5,   182,     3,   178,     6,     0,     3,     7,
    39,   177,     5,   182,     3,   182,     3,   178,     6,     0,
     3,     7,   126,   177,     5,   182,   260,   178,     6,     0,
     3,     7,   127,   177,     5,   182,   260,   182,     3,   178,
     6,     0,     3,     7,   125,   177,     5,   182,     3,   178,
     6,     0,     3,     7,   129,   177,     5,   182,     3,   182,
   252,   178,     6,     0,     3,     7,   130,   177,     5,   182,
     3,   182,   252,   182,   252,   178,     6,     0,     3,     7,
   137,   177,     5,   182,     3,   182,   252,   182,   252,   178,
     6,     0,     3,     7,   131,   177,     5,   182,     3,   182,
   252,   178,     6,     0,     3,     7,   141,   177,     5,   182,
     3,   182,   252,   182,   252,   178,     6,     0,     3,     7,
   132,   177,     5,   182,     3,   182,   260,   182,   260,   182,
   251,   182,   251,   178,     6,     0,     3,     7,   133,   177,
     5,   182,   260,   178,     6,     0,     3,     7,   134,   177,
   135,   182,   251,   182,     3,   178,     6,     0,     3,     7,
   136,   177,     5,   182,   260,   182,   251,   178,     6,     0,
     3,     7,   138,   177,     5,   182,     5,   182,     3,   182,
     3,   178,     6,     0,     3,     7,   139,   177,     5,   182,
     5,   182,     3,   178,     6,     0,     3,     7,   140,   177,
     3,   182,     3,   178,     6,     0,     0,   193,   194,     0,
   196,     0,   195,     0,   236,     0,   237,     0,   238,     0,
   241,     0,   242,     0,   245,     0,   249,     0,   250,     0,
   244,     0,   243,     0,    31,   177,     5,   178,     6,     0,
    31,   177,     5,   182,   262,   178,     6,     0,     4,     5,
   183,   197,   184,     6,     0,     4,     5,     4,   254,   183,
   197,   184,     6,     0,     0,   197,   199,     0,   197,   202,
     0,   197,   205,     0,   197,   208,     0,   197,   211,     0,
   197,   214,     0,   197,   217,     0,   197,   220,     0,   197,
   223,     0,   197,   226,     0,   197,   229,     0,   197,   232,
     0,   252,     0,   198,   182,   252,     0,     0,    78,   177,
   252,   182,   252,   182,   252,   178,   200,   183,   198,   184,
     6,     0,   252,     0,   201,   182,   252,     0,     0,    79,
   177,   252,   182,   252,   182,   252,   178,   203,   183,   201,
   184,     6,     0,   252,     0,   204,   182,   252,     0,     0,
    80,   177,   252,   182,   252,   182,   252,   178,   206,   183,
   204,   184,     6,     0,   252,     0,   207,   182,   252,     0,
     0,    75,   177,   252,   182,   252,   182,   252,   182,   252,
   182,   252,   182,   252,   178,   209,   183,   207,   184,     6,
     0,   252,     0,   210,   182,   252,     0,     0,    76,   177,
   252,   182,   252,   182,   252,   182,   252,   182,   252,   182,
   252,   178,   212,   183,   210,   184,     6,     0,   252,     0,
   213,   182,   252,     0,     0,    77,   177,   252,   182,   252,
   182,   252,   182,   252,   182,   252,   182,   252,   178,   215,
   183,   213,   184,     6,     0,   252,     0,   216,   182,   252,
     0,     0,    72,   177,   252,   182,   252,   182,   252,   182,
   252,   182,   252,   182,   252,   182,   252,   182,   252,   182,
   252,   178,   218,   183,   216,   184,     6,     0,   252,     0,
   219,   182,   252,     0,     0,    73,   177,   252,   182,   252,
   182,   252,   182,   252,   182,   252,   182,   252,   182,   252,
   182,   252,   182,   252,   178,   221,   183,   219,   184,     6,
     0,   252,     0,   222,   182,   252,     0,     0,    74,   177,
   252,   182,   252,   182,   252,   182,   252,   182,   252,   182,
   252,   182,   252,   182,   252,   182,   252,   178,   224,   183,
   222,   184,     6,     0,   252,     0,   225,   182,   252,     0,
     0,    69,   177,   252,   182,   252,   182,   252,   182,   252,
   182,   252,   182,   252,   182,   252,   182,   252,   182,   252,
   182,   252,   182,   252,   182,   252,   178,   227,   183,   225,
   184,     6,     0,   252,     0,   228,   182,   252,     0,     0,
    70,   177,   252,   182,   252,   182,   252,   182,   252,   182,
   252,   182,   252,   182,   252,   182,   252,   182,   252,   182,
   252,   182,   252,   182,   252,   178,   230,   183,   228,   184,
     6,     0,   252,     0,   231,   182,   252,     0,     0,    71,
   177,   252,   182,   252,   182,   252,   182,   252,   182,   252,
   182,   252,   182,   252,   182,   252,   182,   252,   182,   252,
   182,   252,   182,   252,   178,   233,   183,   231,   184,     6,
     0,     7,     0,   152,     0,   153,     0,   154,     0,   155,
     0,   173,     0,   174,     0,     4,   234,   252,     6,     0,
     4,   179,   252,   180,   234,   252,     6,     0,     4,   179,
   183,   262,   184,   180,   234,   260,     6,     0,     4,   179,
   180,     7,   260,     6,     0,     4,   235,     6,     0,     4,
   179,   252,   180,   235,     6,     0,     4,   181,     4,     7,
   266,     6,     0,     4,   179,   252,   180,   181,     4,     7,
   266,     6,     0,     4,   181,     4,   234,   252,     6,     0,
     4,   179,   252,   180,   181,     4,   234,   252,     6,     0,
     4,   181,     4,   235,     6,     0,     4,   179,   252,   180,
   181,     4,   235,     6,     0,     4,   181,    87,   181,     4,
     7,   263,     6,     0,     4,   179,   252,   180,   181,    87,
   181,     4,     7,   263,     6,     0,     4,   181,    88,     7,
   264,     6,     0,     4,   179,   252,   180,   181,    88,     7,
   264,     6,     0,    55,   177,     4,   178,   181,     4,     7,
   252,     6,     0,    55,   177,     4,   178,   181,     4,     7,
   266,     6,     0,    36,   177,   252,   178,     7,   254,     6,
     0,    51,    36,   177,   252,   178,     7,   260,     6,     0,
    67,    36,   260,     7,   183,   252,   182,   252,   182,   252,
   184,     6,     0,    43,    44,   260,     7,   252,     6,     0,
    36,   183,   252,   184,     6,     0,    39,   177,   252,   178,
     7,   260,     6,     0,    41,   177,   252,   178,     7,   260,
     6,     0,    67,    39,   260,     7,   183,   252,   182,   252,
   182,   252,   184,     6,     0,    37,   177,   252,   178,     7,
   260,     6,     0,    37,   177,   252,   178,     7,   260,    47,
   254,     6,     0,    45,   177,   252,   178,     7,   183,   252,
   182,   252,   182,     5,   182,     5,   182,     5,   184,     6,
     0,    38,   177,   252,   178,     7,   260,     6,     0,    51,
    39,   177,   252,   178,     7,   260,     6,     0,    39,    62,
   177,   252,   178,     7,   260,     6,     0,    81,   177,   252,
   178,     7,   260,     6,     0,    82,   177,   252,   178,     7,
   260,    86,   260,    83,   252,     6,     0,    39,   183,   252,
   184,     6,     0,    47,    40,   177,   252,   178,     7,   260,
     6,     0,   142,    40,   177,   252,   178,     7,   183,   252,
   182,   260,   184,     6,     0,    48,    40,   177,   252,   178,
     7,   260,     6,     0,    82,    40,    84,    85,   177,   252,
   178,     7,   258,    86,   183,   260,   182,   260,   184,    83,
   183,   252,   182,   252,   184,     6,     0,    82,    40,   177,
   252,   178,     7,   258,    86,   183,   260,   182,   260,   184,
    83,   183,   252,   182,   252,   184,     6,     0,    51,    40,
   177,   252,   178,     7,   260,     6,     0,    40,    62,   177,
   252,   178,     7,   260,     6,     0,    40,   183,   252,   184,
     6,     0,    50,    42,   177,   252,   178,     7,   260,     6,
     0,    42,   177,   252,   178,     7,   260,     6,     0,    51,
    42,   177,   252,   178,     7,   260,     6,     0,    57,   254,
   183,   239,   184,     0,    56,   183,   254,   182,   254,   182,
   252,   184,   183,   239,   184,     0,    58,   254,   183,   239,
   184,     0,    59,   183,   254,   182,   252,   184,   183,   239,
   184,     0,   241,     0,   240,     0,   238,     0,     0,   240,
   237,     0,    61,   183,   240,   184,     0,    64,   183,   240,
   184,     0,    64,     4,   179,   252,   180,     6,     0,    64,
    98,     6,     0,     4,   266,     6,     0,     4,   252,     6,
     0,    55,   177,     4,   178,   181,     4,     6,     0,    94,
     6,     0,    35,     6,     0,    89,   177,   252,     8,   252,
   178,     0,    89,   177,   252,     8,   252,     8,   252,   178,
     0,    89,     4,    90,   183,   252,     8,   252,   184,     0,
    89,     4,    90,   183,   252,     8,   252,     8,   252,   184,
     0,    91,     0,    97,     4,     0,    95,     0,    96,     4,
     6,     0,    92,   177,   252,   178,     0,    93,     0,    60,
    36,   183,   252,   182,   254,   184,     6,     0,    60,    36,
   183,   252,   182,   254,   182,   254,   182,   252,   184,     6,
     0,    60,    39,   183,   252,   182,   254,   184,     6,     0,
    60,    39,   183,   252,   182,   254,   182,   254,   182,   252,
   184,     6,     0,    60,    40,   183,   252,   182,   254,   184,
     6,     0,    60,    40,   183,   252,   182,   254,   182,   254,
   182,   252,   184,     6,     0,    60,    40,   183,   252,   182,
   254,   184,   183,   246,   184,     6,     0,    60,    40,   183,
   252,   182,   254,   182,   254,   182,   252,   184,   183,   246,
   184,     6,     0,     0,   247,   248,     0,   246,   248,     0,
    68,   183,   260,   182,   260,   182,   260,   184,     6,     0,
    63,     6,     0,    49,    39,   260,     7,   252,     6,     0,
    49,    39,   260,     7,   252,    52,    54,   252,     6,     0,
    49,    39,   260,     7,   252,    52,    53,   252,     6,     0,
    49,    40,   183,   252,   184,     7,   260,     6,     0,    46,
    40,   183,   252,   184,     7,   260,     6,     0,    49,    42,
   183,   252,   184,     7,   260,     6,     0,    63,    40,   260,
     7,   252,     6,     0,    63,    40,   260,     6,     0,    65,
     6,     0,    66,     6,     0,   102,     0,   103,     0,   104,
     0,   105,     0,   106,     0,   253,     0,   177,   252,   178,
     0,   167,   252,     0,   166,   252,     0,   172,   252,     0,
   252,   167,   252,     0,   252,   166,   252,     0,   252,   168,
   252,     0,   252,   169,   252,     0,   252,   170,   252,     0,
   252,   176,   252,     0,   252,   162,   252,     0,   252,   164,
   252,     0,   252,   163,   252,     0,   252,   165,   252,     0,
   252,   159,   252,     0,   252,   160,   252,     0,   252,   158,
   252,     0,   252,   157,   252,     0,   252,   156,   252,     8,
   252,     0,    10,   177,   252,   178,     0,    11,   177,   252,
   178,     0,    12,   177,   252,   178,     0,    13,   177,   252,
   178,     0,    14,   177,   252,   178,     0,    15,   177,   252,
   178,     0,    16,   177,   252,   178,     0,    17,   177,   252,
   178,     0,    18,   177,   252,   178,     0,    20,   177,   252,
   178,     0,    21,   177,   252,   182,   252,   178,     0,    22,
   177,   252,   178,     0,    23,   177,   252,   178,     0,    24,
   177,   252,   178,     0,    25,   177,   252,   178,     0,    26,
   177,   252,   178,     0,    27,   177,   252,   178,     0,    28,
   177,   252,   182,   252,   178,     0,    29,   177,   252,   182,
   252,   178,     0,    30,   177,   252,   182,   252,   178,     0,
    19,   177,   252,   178,     0,     3,     0,     9,     0,     4,
     0,     4,   179,   252,   180,     0,     4,   235,     0,     4,
   179,   252,   180,   235,     0,     4,   181,     4,     0,     4,
   179,   252,   180,   181,     4,     0,     4,   181,     4,   235,
     0,     4,   179,   252,   180,   181,     4,   235,     0,   255,
     0,   167,   254,     0,   166,   254,     0,   254,   167,   254,
     0,   254,   166,   254,     0,   183,   252,   182,   252,   182,
   252,   182,   252,   182,   252,   184,     0,   183,   252,   182,
   252,   182,   252,   182,   252,   184,     0,   183,   252,   182,
   252,   182,   252,   184,     0,   177,   252,   182,   252,   182,
   252,   178,     0,     0,   177,   257,   178,     0,     5,     0,
   257,   182,     5,     0,     0,   183,   259,   184,     0,   177,
   259,   178,     0,   260,     0,   259,   182,   260,     0,   252,
     0,   261,     0,   183,   262,   184,     0,   167,   183,   262,
   184,     0,   252,     8,   252,     0,   252,     8,   252,     8,
   252,     0,     4,   179,   180,     0,   167,     4,   179,   180,
     0,     4,   179,   183,   262,   184,   180,     0,   167,     4,
   179,   183,   262,   184,   180,     0,   252,     0,   261,     0,
   262,   182,   252,     0,   262,   182,   261,     0,   183,   252,
   182,   252,   182,   252,   182,   252,   184,     0,   183,   252,
   182,   252,   182,   252,   184,     0,     4,     0,     4,   181,
    87,   181,     4,     0,   183,   265,   184,     0,     4,   179,
   252,   180,   181,    88,     0,   263,     0,   265,   182,   263,
     0,     5,     0,    33,   177,   266,   182,   266,   178,     0,
    34,   177,   266,   178,     0,    32,   177,   266,   178,     0,
    32,   177,   266,   182,   262,   178,     0,    32,   177,     4,
   181,     4,   178,     0,    32,   177,     4,   179,   252,   180,
   181,     4,   178,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   155,   157,   158,   159,   166,   168,   171,   179,   193,   205,
   207,   210,   212,   213,   216,   222,   227,   228,   229,   232,
   236,   239,   245,   250,   256,   264,   269,   273,   279,   284,
   288,   293,   297,   300,   305,   309,   313,   317,   322,   326,
   329,   333,   337,   341,   345,   349,   353,   356,   360,   363,
   367,   370,   379,   383,   389,   391,   392,   393,   394,   395,
   396,   397,   398,   399,   400,   401,   404,   409,   438,   444,
   451,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   470,   473,   477,   483,   489,   492,   496,
   502,   508,   511,   515,   521,   527,   530,   534,   542,   548,
   551,   555,   563,   569,   572,   576,   584,   590,   593,   597,
   609,   615,   618,   622,   634,   640,   643,   647,   659,   665,
   668,   672,   685,   691,   694,   698,   711,   717,   720,   724,
   737,   749,   751,   752,   753,   754,   756,   758,   760,   791,
   825,   872,   887,   896,   911,   923,   937,   960,   984,   996,
  1010,  1022,  1036,  1052,  1068,  1081,  1101,  1112,  1118,  1137,
  1148,  1156,  1162,  1168,  1187,  1193,  1209,  1216,  1222,  1228,
  1234,  1240,  1259,  1271,  1277,  1296,  1317,  1325,  1331,  1337,
  1343,  1355,  1361,  1367,  1379,  1385,  1390,  1395,  1402,  1404,
  1405,  1408,  1413,  1424,  1442,  1450,  1455,  1466,  1534,  1554,
  1560,  1564,  1584,  1600,  1614,  1639,  1664,  1690,  1696,  1701,
  1706,  1710,  1720,  1726,  1732,  1736,  1740,  1744,  1748,  1753,
  1760,  1766,  1768,  1773,  1794,  1804,  1823,  1841,  1859,  1881,
  1902,  1923,  1937,  1958,  1963,  1974,  1976,  1977,  1978,  1979,
  1982,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1998,
  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,  2008,
  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,
  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,  2028,
  2029,  2034,  2039,  2043,  2054,  2071,  2082,  2101,  2117,  2133,
  2149,  2166,  2171,  2175,  2179,  2183,  2188,  2193,  2197,  2201,
  2207,  2211,  2216,  2220,  2225,  2229,  2233,  2239,  2245,  2252,
  2258,  2262,  2266,  2276,  2283,  2294,  2308,  2324,  2344,  2368,
  2374,  2378,  2382,  2393,  2398,  2409,  2414,  2432,  2437,  2450,
  2456,  2462,  2467,  2475,  2488,  2492,  2517,  2531
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tStrCat","tStrPrefix","tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface",
"tSpline","tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane",
"tRuled","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tPlugin","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarTriangle",
"tVectorTriangle","tTensorTriangle","tScalarLine","tVectorLine","tTensorLine",
"tScalarPoint","tVectorPoint","tTensorPoint","tBSpline","tNurbs","tOrder","tWith",
"tBounds","tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf",
"tExit","tReturn","tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","SignedDouble","STLFormatItem","StepFormatItems","StepFormatItem",
"StepSpecial","StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat",
"Printf","View","Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues",
"VectorPoint","@2","TensorPointValues","TensorPoint","@3","ScalarLineValues",
"ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine",
"@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","ExtrudeParameters","@13","ExtrudeParameter",
"Transfini","Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single",
"ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   185,   185,   185,   185,   186,   186,   187,   187,   187,   188,
   188,   189,   189,   189,   190,   190,   190,   190,   190,   191,
   191,   191,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   193,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   195,   195,   196,   196,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   198,   198,   200,   199,   201,   201,   203,
   202,   204,   204,   206,   205,   207,   207,   209,   208,   210,
   210,   212,   211,   213,   213,   215,   214,   216,   216,   218,
   217,   219,   219,   221,   220,   222,   222,   224,   223,   225,
   225,   227,   226,   228,   228,   230,   229,   231,   231,   233,
   232,   234,   234,   234,   234,   234,   235,   235,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   238,   238,   238,   238,   239,   239,
   239,   240,   240,   241,   242,   242,   242,   243,   243,   243,
   243,   243,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   245,   245,   245,   245,   245,   245,   245,   245,
   247,   246,   246,   248,   248,   249,   249,   249,   249,   249,
   249,   249,   249,   250,   250,   251,   251,   251,   251,   251,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   252,   253,   253,   253,   253,   253,   253,   253,   253,   253,
   253,   254,   254,   254,   254,   254,   255,   255,   255,   255,
   256,   256,   257,   257,   258,   258,   258,   259,   259,   260,
   260,   260,   260,   261,   261,   261,   261,   261,   261,   262,
   262,   262,   262,   263,   263,   263,   263,   264,   264,   265,
   265,   266,   266,   266,   266,   266,   266,   266
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     5,     7,     7,    12,     7,     9,    17,     7,     8,     8,
     7,    11,     5,     8,    12,     8,    22,    20,     8,     8,
     5,     8,     7,     8,     5,    11,     5,     9,     1,     1,
     1,     0,     2,     4,     4,     6,     3,     3,     3,     7,
     2,     2,     6,     8,     8,    10,     1,     2,     1,     3,
     4,     1,     8,    12,     8,    12,     8,    12,    11,    15,
     0,     2,     2,     9,     2,     6,     9,     9,     8,     8,
     8,     6,     4,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     1,     1,     1,     4,     2,     5,     3,     6,     4,
     7,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     0,     3,     1,     3,     0,     3,     3,     1,     3,     1,
     1,     3,     4,     3,     5,     3,     4,     6,     7,     1,
     1,     3,     3,     9,     7,     1,     5,     3,     6,     1,
     3,     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   207,     0,   212,     0,   209,
     0,     0,     0,    54,    56,    55,    57,    58,    59,    60,
    61,    66,    65,    62,    63,    64,     5,     0,     0,     0,
    15,    16,    18,    17,    19,   301,   301,     0,   282,   284,
   332,   132,   283,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   133,   134,   135,
   136,     0,     0,     0,   137,   138,     0,     0,     0,     0,
     0,     0,   241,     0,     0,   202,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   292,     0,     0,
     0,     0,     0,   192,     0,     0,     0,   192,   234,   235,
     0,     0,     0,     0,     0,     0,     0,     0,   201,     0,
   208,     0,     6,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   286,     0,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   244,   243,   245,
     0,     0,     0,     0,     0,     0,     0,     0,   143,   199,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   198,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   284,     0,
     0,   310,     0,   311,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   294,   293,
     0,     0,     0,     0,   192,   192,     0,     0,     0,     0,
     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   210,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   303,     0,     0,
     0,     0,     0,   288,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   242,     0,     0,   320,   321,     0,     0,   132,
     0,     0,     0,     0,   139,     0,   259,   258,   256,   257,
   252,   254,   253,   255,   247,   246,   248,   249,   250,   251,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   296,   295,   191,     0,   190,
   189,     0,     0,     0,     0,     0,   194,   193,   233,     0,
     0,   195,     0,     0,     0,     0,     0,     0,     0,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   302,     0,     0,    21,     0,   285,   290,
    71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,   261,   262,   263,   264,
   265,   266,   267,   268,   269,   281,   270,     0,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   335,
     0,     0,   334,     0,     0,     0,     0,     0,     0,     0,
     0,   149,     0,     0,     0,     0,     0,    67,     0,     0,
   161,     0,     0,     0,     0,   173,     0,   181,     0,     0,
   316,     0,     0,     0,   312,   314,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   185,   187,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,     0,   301,     0,   287,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,   142,   322,
   323,     0,     0,     0,     0,     0,   144,   145,   147,     0,
     0,   326,     0,   330,     0,   153,   260,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   317,     0,   313,
     0,   160,     0,     0,     0,     0,   226,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   232,   196,     0,     0,     0,     0,   305,
     0,     0,     0,   203,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   236,
   237,   238,   239,   240,     0,     0,     0,     0,     0,     0,
     0,    20,     0,   289,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   271,   278,   279,
   280,     0,   337,   336,   333,     0,   132,     0,     0,     0,
     0,   140,     0,     0,     0,     0,     0,   328,    68,   157,
   165,     0,   168,     0,   162,     0,   163,   183,     0,     0,
   315,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   200,     0,     0,     0,     0,   192,
     0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   301,   291,
    70,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   150,     0,     0,
   151,     0,     0,     0,   331,     0,   170,   180,   318,     0,
     0,   230,   174,   176,     0,     0,   229,   231,   182,   158,
   169,   179,   184,     0,     0,     0,   300,     0,   299,     0,
     0,   213,     0,   215,     0,   217,   221,     0,     0,   305,
     0,   308,     0,     0,     0,     0,   205,   204,     0,     0,
     0,     0,     0,    23,     0,    32,     0,    36,     0,    30,
     0,     0,    35,     0,    40,    38,     0,     0,     0,     0,
     0,     0,    47,     0,     0,     0,     0,     0,    52,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,   146,   148,     0,   154,     0,
     0,     0,   166,   319,     0,   228,   227,   155,   156,   192,
     0,   188,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,   306,     0,     0,     0,     0,     0,     0,   305,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   338,     0,   329,   327,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,   223,   222,     0,
     0,     0,   309,     0,     0,   206,     0,     0,    37,     0,
     0,     0,     0,    27,     0,    33,     0,    39,    28,    41,
     0,    44,     0,    48,    49,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   152,     0,     0,   186,     0,     0,     0,     0,
   225,     0,   219,     0,     0,     0,     0,   172,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    86,    90,    94,     0,   325,     0,   297,   214,   216,
   218,   221,     0,   159,   164,     0,     0,   175,     0,     0,
     0,     0,     0,    31,    34,    42,     0,    43,    50,    45,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   324,     0,
     0,     0,     0,     0,     0,     0,     0,    26,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    84,     0,    88,     0,    92,     0,   220,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    46,    22,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    85,
    87,    89,    91,    93,    95,   167,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    98,   102,
   106,   224,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   178,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    96,     0,   100,     0,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   177,     0,    24,     0,     0,     0,     0,     0,     0,
    97,    99,   101,   103,   105,   107,     0,     0,     0,     0,
   110,   114,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,     0,   112,     0,   116,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   111,   113,   115,   117,   119,     0,   122,   126,
   130,    25,     0,     0,     0,     0,     0,     0,     0,   120,
     0,   124,     0,   128,     0,     0,     0,     0,     0,     0,
   121,   123,   125,   127,   129,   131,     0,     0,     0
};

static const short yydefgoto[] = {  1537,
    79,     5,     6,    19,    20,    21,    22,     7,    64,    65,
    66,   386,  1311,   555,  1261,  1313,   556,  1262,  1315,   557,
  1263,  1421,   558,  1394,  1423,   559,  1395,  1425,   560,  1396,
  1482,   561,  1468,  1484,   562,  1469,  1486,   563,  1470,  1519,
   564,  1513,  1521,   565,  1514,  1523,   566,  1515,   130,   231,
    67,   488,   478,   479,   480,   481,    71,    72,    73,    74,
  1076,  1077,  1138,    75,    76,   815,   302,   133,   167,   168,
   226,   379,   903,  1001,  1002,   304,   418,   734,   606,   735,
   134
};

static const short yypact[] = {  1969,
    44,-32768,-32768,  -117,-32768,   232,  2096,-32768,    13,    48,
    68,   121,   163,   171,   240,   -67,   132,   139,-32768,-32768,
-32768,-32768,  1551,   145,   332,   -71,   158,   167,   -37,   -44,
   170,   196,   345,   225,   365,   368,   369,   105,   378,   364,
   252,   242,   -11,   -11,   247,   142,   249,   399,     5,   434,
   436,   292,   277,   -20,    24,-32768,   281,-32768,   456,-32768,
   465,   470,   444,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   500,    13,  2165,
-32768,-32768,-32768,-32768,-32768,   346,   346,   506,-32768,    94,
     6,-32768,-32768,   350,   351,   352,   353,   376,   377,   379,
   380,   381,   382,   383,   384,   390,   393,   394,   396,   397,
   400,   401,   402,   403,   405,   406,   408,-32768,-32768,-32768,
-32768,    67,    67,    67,-32768,-32768,    67,   522,    43,    67,
   509,  1047,-32768,   560,   571,-32768,    67,    67,    67,    67,
   409,    67,    67,   410,    67,    67,    67,   975,    67,   407,
   412,   414,   975,   411,   413,   415,   416,   418,   420,   421,
   597,   -11,   -11,   -11,    67,    67,   -58,-32768,   -15,   -11,
   419,   423,   424,-32768,   975,   425,   599,-32768,-32768,-32768,
   975,   975,    67,   -49,    67,   518,    67,    67,-32768,   603,
-32768,   435,-32768,    13,   437,   438,   439,   440,   445,   446,
   447,   448,   449,   450,   451,   454,   457,   458,   460,   461,
   462,   469,   471,   494,   495,   496,   497,   513,   514,   515,
   516,   519,   520,   521,   606,   431,   443,   524,    67,   629,
-32768,   -11,-32768,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    32,    35,    35,   527,   527,   527,
  5024,   688,  1583,  4899,   166,   466,   693,  1068,-32768,-32768,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,-32768,   -80,  5047,  2238,  5070,
  5093,    67,  5116,  2261,    67,  2284,  5139,  5162,   220,  1003,
  1583,   878,   697,-32768,  5185,    67,    67,    67,   700,    67,
    67,    67,    67,    67,    67,    67,   531,    -8,-32768,-32768,
  2652,  2673,   -11,   -11,   422,   422,    20,    67,    67,    67,
   340,   290,    67,-32768,  1917,   704,   705,  5208,   642,    67,
  5231,   546,  1718,  5254,-32768,    67,   595,   742,   745,   746,
   747,   748,   749,   750,   751,   752,   753,   756,   757,   758,
   759,   760,   761,   762,   763,   767,   768,   769,   792,   793,
   636,   794,   795,   796,   798,   801,   800,-32768,    -7,   803,
   804,   806,  4924,   187,   -13,   645,  5277,  5300,  5323,  5346,
  5369,  5392,  5415,  5438,  5461,  5484,  5507,  2694,  5530,  5553,
  5576,  5599,  5622,  5645,  2715,  2736,  2757,  -138,-32768,    12,
   627,   635,-32768,   975,  1624,   878,-32768,    63,   160,    35,
    67,   808,   811,    10,-32768,  1739,  1575,   572,   248,   248,
   198,   198,   198,   198,   258,   258,   527,   527,   527,   527,
   810,  1583,   812,   815,   817,   819,  5668,   820,   816,  5691,
   822,   823,   824,   640,   264,  1583,    92,    67,    67,   825,
  2307,  5714,  5737,    67,  2330,  2353,  5760,  5783,  5806,  5829,
  5852,   637,   -11,    67,    67,-32768,-32768,-32768,   650,  2158,
-32768,   652,    67,  2778,  2799,  2820,-32768,-32768,-32768,    67,
  4949,-32768,   659,   669,   849,   682,  5875,   851,    67,    67,
-32768,  5898,   711,   679,   683,   685,   686,   687,   689,   690,
   691,   694,   695,   696,   698,   699,   701,   703,   706,   707,
   708,   709,   710,   712,   713,   714,   716,   717,   718,   719,
   720,   721,   725,-32768,   865,   715,-32768,   726,  -122,-32768,
-32768,   702,   732,   733,   735,   736,   737,   739,   740,   741,
   754,   765,   770,   876,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    67,-32768,-32768,
-32768,-32768,-32768,-32768,    67,    67,    67,    67,   931,-32768,
  1583,    35,-32768,   930,  1583,   764,    49,    67,   934,   939,
  1162,-32768,   943,   772,    15,   946,    67,-32768,    14,   -11,
-32768,   975,   975,   947,   975,-32768,   948,-32768,   975,   975,
-32768,  1583,   766,    98,-32768,  1754,  1202,   773,   950,   951,
   955,   681,   956,   957,   959,   962,   963,   964,   965,   949,
    97,  2841,  2862,-32768,-32768,  2376,   -11,   -11,   -11,  1262,
   953,    67,    67,   975,    67,   966,   975,  1775,   952,   967,
   830,   973,    67,    67,   -11,   974,   977,   813,   979,  1005,
   975,   975,  1006,   -11,  1007,  1008,   975,   975,  1036,  1046,
  1054,  1055,  1056,   975,   344,   975,  1057,  1058,  1059,  1062,
  1063,-32768,  1061,   346,  1064,-32768,  1405,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,-32768,
  5921,  5944,  5967,  5990,  4974,   883,    54,   891,-32768,   878,
-32768,    55,   172,   890,  1065,  1351,-32768,-32768,-32768,    15,
    67,   892,    67,-32768,   175,-32768,  6496,  1070,    18,    25,
  1071,   975,  1073,   975,  1074,  1075,   202,-32768,  1583,-32768,
    67,-32768,    67,   975,   975,   975,-32768,   316,   975,   975,
   975,   975,   975,   975,   975,   389,    67,    67,    67,   899,
  -128,  -121,  -109,-32768,-32768,  2883,  2904,  1078,  6013,   -45,
   999,    67,    67,-32768,   904,    13,   918,  2925,  2946,  -118,
   919,   924,   921,   927,   941,   928,   942,   944,   133,   954,
   935,   960,   958,   961,   968,   969,   971,   972,   970,-32768,
-32768,-32768,-32768,-32768,   978,   980,   981,   982,   983,   989,
   990,-32768,   991,   187,  1119,  2967,  2988,  3009,  3030,  3051,
  3072,  3093,  3114,  3135,  3156,  3177,  3198,-32768,-32768,-32768,
-32768,   976,-32768,-32768,-32768,   975,    35,    67,  1123,  1127,
    10,-32768,  1126,  4999,  1048,  3219,    15,-32768,-32768,-32768,
-32768,   -11,-32768,  1128,-32768,  1131,-32768,-32768,   994,   271,
  6496,  3240,  1133,  1138,  1139,    67,    67,  1140,  1143,  1149,
  1150,  1153,  1155,  1165,-32768,  1267,  2399,  6036,  2151,   422,
   -11,  1170,   -11,  1171,   -11,    16,    67,    67,-32768,  1172,
   975,   975,  1092,   975,   329,  6059,    67,    13,  1130,    67,
   975,  1175,  1179,  1177,  1016,  1181,   344,  1182,  1186,    67,
  1193,  1198,  1212,  1213,  1217,   344,    67,    67,    67,   975,
  1215,  1226,   344,    67,  1236,  1237,  1235,    67,   346,-32768,
-32768,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,  1238,  1239,  1240,  1499,-32768,  1178,  1241,
-32768,  1067,  1069,    67,-32768,    38,-32768,-32768,-32768,  1072,
    67,-32768,-32768,-32768,  1608,  1654,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1675,  1245,  1060,-32768,    67,-32768,  1082,
    99,-32768,   104,-32768,   176,-32768,-32768,  3261,  3282,   -45,
    59,-32768,   275,  1084,  1191,    67,-32768,-32768,  3303,    13,
  1091,  3324,  1093,-32768,  1120,-32768,  1121,-32768,  1136,-32768,
  1134,  6082,-32768,  1141,-32768,-32768,  1156,  1157,  6105,  3345,
  6128,  1151,-32768,  1158,  1159,  3366,  1160,  1161,-32768,  3387,
  1166,  3408,  3429,  3450,  3471,  3492,  3513,  3534,  3555,  3576,
  3597,  3618,  3639,  1163,-32768,-32768,-32768,    15,-32768,  1252,
  1249,  3660,-32768,-32768,  3681,-32768,-32768,-32768,-32768,   422,
  2180,-32768,    67,    67,    67,   -36,    50,    67,    67,  1257,
-32768,   975,-32768,   975,    67,  2422,   975,  1199,  1341,   -45,
   344,  1346,    67,  1350,   344,  1357,  1370,  1369,  1371,  1382,
    67,  1383,   975,  1384,  1385,    67,  1373,  1386,    67,  1388,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,-32768,  1389,-32768,-32768,    67,  1391,  1210,    67,
-32768,  2445,  2468,  2491,  1394,  1214,  1396,-32768,-32768,  2514,
  2537,  1220,-32768,  1222,  1690,-32768,  1230,    13,-32768,  1234,
  1259,  1260,  3702,-32768,  1268,-32768,  1269,-32768,-32768,-32768,
  6151,-32768,  1263,-32768,-32768,  6174,  1270,-32768,  6197,  1273,
  3723,  3744,  3765,  3786,  3807,  3828,  3849,  3870,  3891,  6220,
  6243,  6266,-32768,  2209,  1274,-32768,  2560,  1417,  1453,    17,
-32768,   975,-32768,  1454,  1455,   975,   975,-32768,  1456,    13,
   344,   344,   344,   344,  1459,  1480,  1481,   344,  1482,  1483,
  1484,  1486,    67,    67,    67,    67,    67,    67,    67,    67,
    67,-32768,-32768,-32768,    67,-32768,  1487,-32768,-32768,-32768,
-32768,-32768,  1314,-32768,-32768,  1315,  1316,-32768,    13,  1317,
  1319,  1320,  1325,-32768,-32768,-32768,  1330,-32768,-32768,-32768,
  1340,  3912,  3933,  3954,  3975,  3996,  4017,  4038,  4059,  4080,
  1342,  1343,  1348,  2583,  1347,   -34,   975,   975,  1440,  1379,
   344,   344,  1526,  1527,   344,  1529,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,-32768,  1530,
  1531,  1354,  1355,  1360,    13,  1356,  1362,-32768,-32768,  1374,
  1375,  4101,  4122,  4143,  4164,  4185,  4206,  4227,  4248,  4269,
   279,  6496,   284,  6496,   288,  6496,  1398,-32768,   975,  1474,
    67,    13,   344,   975,  1553,  1582,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,  1584,    67,  1585,    67,
  1609,  1610,  1433,  1435,  4290,    13,  1437,  1438,-32768,-32768,
  4311,  4332,  4353,  4374,  4395,  4416,  6289,  6312,  6335,  6496,
-32768,  6496,-32768,  6496,-32768,-32768,  1615,    67,    67,  1472,
   344,   975,    67,    67,    67,    67,    67,    67,-32768,-32768,
-32768,-32768,  4437,  2606,  1473,  1441,  1443,  4458,  4479,  4500,
  4521,  4542,  4563,  1446,  1447,  1448,    67,  1620,-32768,   975,
   344,    67,    67,    67,    67,    67,    67,    67,    67,    67,
  2629,-32768,  1488,  1493,  4584,  4605,  4626,  4647,  4668,  4689,
   291,  6496,   318,  6496,   322,  6496,  1666,   975,  1667,    67,
    67,    67,    67,    67,    67,    67,  1668,    67,  1670,    67,
  1671,-32768,  1496,-32768,  4710,  4731,  4752,  6358,  6381,  6404,
  6496,-32768,  6496,-32768,  6496,-32768,   975,    67,    67,    67,
-32768,-32768,-32768,  1497,  4773,  4794,  4815,  1500,  1501,  1502,
   975,    67,    67,    67,    67,    67,    67,  1498,  4836,  4857,
  4878,   325,  6496,   326,  6496,   330,  6496,   344,    67,    67,
    67,    67,  1676,    67,  1680,    67,  1681,  1510,  6427,  6450,
  6473,  6496,-32768,  6496,-32768,  6496,-32768,  1683,-32768,-32768,
-32768,-32768,  1508,  1509,  1511,    67,    67,    67,   334,  6496,
   337,  6496,   338,  6496,    67,  1687,    67,  1689,    67,  1692,
  6496,-32768,  6496,-32768,  6496,-32768,  1699,  1700,-32768
};

static const short yypgoto[] = {-32768,
   -73,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1167,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -258,   -22,
-32768,  1694,  1695,  -321,    64,  1702,-32768,-32768,-32768,-32768,
   475,-32768,   633,-32768,-32768,  -900,   -23,-32768,   -29,-32768,
   -84,-32768,  -979,   809,   786,  -259,  -293,  -728,   861,-32768,
  -244
};


#define	YYLAST		6672


static const short yytable[] = {   132,
   131,   853,   227,   417,   482,   194,   421,   457,   176,   232,
   410,   411,   412,   604,   169,    77,  1019,   144,   732,   184,
  1080,   996,  1231,   860,   141,  1028,  1135,   186,  1135,     9,
   861,  1136,  1035,  1136,   339,   408,   409,   323,   324,   409,
   588,   417,   589,  1063,   323,   324,   265,   323,   324,     8,
   125,   126,   723,   891,    80,   892,   323,   324,   695,   912,
   893,    92,   894,   115,   116,   117,   115,   116,   117,    89,
    90,   862,   895,    81,   896,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   441,   258,   259,
   260,   442,   177,   261,   264,   137,   268,   323,   324,    86,
  1150,   138,  1135,   288,   289,   290,   291,  1136,   293,   294,
   347,   296,   297,   298,   325,   305,    82,   340,   965,   266,
   267,   901,   318,   319,   320,   724,   725,   902,   145,   142,
   327,   321,   322,   153,   154,   143,   155,  1137,   609,  1291,
   323,   324,   323,   324,   163,   164,   185,   323,   324,   338,
   598,   341,   624,   343,   344,   165,    92,   326,    83,   541,
   534,   166,   420,   473,   535,   600,    84,   171,   847,    78,
   172,   173,   417,   323,   324,   323,   324,   178,   233,   590,
  1151,   738,   605,   591,  1155,   595,   417,   733,   997,  1232,
   187,   483,   385,   323,   324,   383,   118,   119,   120,   121,
   387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   407,   844,   122,   123,    10,   595,  1081,   331,   124,   416,
  1082,   335,   422,   127,   595,    85,   596,   426,   427,   428,
   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   323,   324,   323,   324,   125,   126,   447,   323,
   324,   450,   229,   595,   230,   625,   259,   416,   767,   595,
  1073,   750,   461,   462,   463,  1074,   465,   466,   467,   468,
   469,   470,   471,   476,   477,   489,   490,   717,   323,   324,
  1240,  1241,  1242,  1243,   484,   485,   486,  1247,    87,   491,
   921,   118,   119,   120,   121,    88,   497,   118,   119,   120,
   121,   135,   502,   118,   119,   120,   121,   181,   747,  1124,
   182,   417,   125,   126,   139,   721,  1006,   136,   125,   126,
   597,   323,   324,   140,   125,   126,   146,   718,    11,    12,
    13,    14,    15,    16,    17,    18,   857,  1075,   858,   125,
   126,   540,   417,   280,   281,   282,   283,   284,   876,   877,
  1296,  1297,   147,   285,  1300,    26,    27,    28,    29,    30,
    31,    32,    33,   595,    34,   869,    36,    37,   148,    39,
    40,   259,   125,   126,   885,   886,   599,   601,   454,   157,
   230,   149,   158,   159,   150,   160,    52,   151,   152,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   416,   156,
    53,    54,  1347,   285,   162,   282,   283,   284,   161,   170,
   383,   174,   416,   285,   626,   627,   125,   126,   175,   179,
   632,   180,   623,   641,   230,   810,   811,   812,   813,   814,
   642,   643,   595,   183,   970,   870,  1082,   188,  1083,   646,
  1336,   189,  1337,   846,   848,  1338,   650,  1339,   190,  1340,
  1386,  1341,  1436,   191,  1437,   658,   659,    42,    43,    44,
    45,    63,    47,   192,   271,   272,   273,   274,   275,   417,
   276,   277,   278,   279,   280,   281,   282,   283,   284,  1438,
  1414,  1439,   193,  1440,   285,  1441,  1492,  1494,  1493,  1495,
   228,  1496,  1007,  1497,   269,  1525,   696,  1526,  1527,  1529,
  1528,  1530,   225,   487,    89,    90,   234,   235,   236,   237,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   238,   239,   711,   240,   241,   242,   243,   244,
   245,   712,   713,   714,   715,   286,   246,   416,   990,   247,
   248,   720,   249,   250,   726,   287,   251,   252,   253,   254,
   739,   255,   256,   737,   257,   292,   295,  1498,   307,   306,
   308,   312,   313,   310,   314,   311,   315,   316,   416,   383,
   317,   328,   956,   333,   334,   329,   330,   342,   345,   823,
   378,   346,   380,   348,   349,   350,   351,   771,   772,   773,
   381,   352,   353,   354,   355,   356,   357,   358,   776,   777,
   359,   779,   384,   360,   361,   790,   362,   363,   364,   788,
   789,   985,    89,    90,   799,   365,   423,   366,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   367,   368,   369,   370,   826,   827,   828,   829,   830,   831,
   832,   833,   834,   835,   836,   837,   757,   122,   123,   371,
   372,   373,   374,   124,   414,   375,   376,   377,   127,   424,
   849,   262,   285,   459,   263,   382,   464,   854,   472,   856,
   493,   494,   908,   542,   543,   544,   545,   546,   547,   548,
   549,   550,   551,   552,   553,   416,   496,   871,   499,   872,
   274,   275,   758,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   503,   887,   888,   889,   504,   285,  1129,   505,
   506,   507,   508,   509,   510,   511,   512,   513,   905,   906,
   514,   515,   516,   517,   518,   519,   520,   521,    89,    90,
   527,   522,   523,   524,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   525,   526,   528,   529,
   530,   940,   531,   532,   533,   122,   123,   536,   592,   537,
   538,   124,   593,   602,   603,   608,   127,   640,   610,   621,
   611,   616,   622,   612,   957,   613,   615,   618,   554,   619,
   620,   628,   966,   644,  1010,   645,   271,   272,   273,   274,
   275,   652,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   653,   975,   976,  1041,   654,   285,   657,   655,   661,
   662,   991,   984,   993,   663,   995,   664,   665,   666,   692,
   667,   668,   669,   998,   999,   670,   671,   672,   698,   673,
   674,   710,   675,  1009,   676,   458,  1012,   677,   678,   679,
   680,   681,   693,   682,   683,   684,  1022,   685,   686,   687,
   688,   689,   690,  1029,  1030,  1031,   691,   694,   699,   700,
  1036,   701,   702,   703,  1040,   704,   705,   706,  1042,  1043,
  1044,  1045,  1046,  1047,  1048,  1049,  1050,  1051,  1052,  1053,
   707,   122,   123,   303,   716,   719,  1088,   124,   309,   727,
  1062,   708,   127,   722,   728,   748,   709,  1065,   749,   730,
   731,   736,   766,   742,   744,   753,   754,   755,   775,   783,
   332,   756,   759,   760,  1071,   761,   336,   337,   762,   763,
   764,   765,   780,   785,   786,   787,   791,    89,   299,   792,
   793,   794,  1086,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    89,   455,   795,   798,   800,
   801,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   271,   272,   273,   274,   275,   804,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   805,  1132,
  1133,  1134,   270,   285,  1140,  1141,   806,   807,   808,   817,
   843,  1145,   818,   819,   820,   821,   822,   824,   845,  1153,
   850,   851,   855,   425,  1200,   859,   863,  1161,   865,   867,
   868,   890,  1166,   899,   904,  1169,   907,  1171,  1172,  1173,
  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,   909,
   913,   914,   915,  1184,   916,   918,  1187,   271,   272,   273,
   274,   275,   923,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   917,   919,   941,   920,  1239,   285,   958,   784,
   959,   961,  1011,   967,   963,   922,   968,   924,   972,   925,
   122,   300,   926,   973,   974,   977,   124,   931,   978,   927,
   928,   127,   929,   930,   979,   980,   954,   301,   981,   932,
   982,   933,   934,   935,   936,  1270,   937,   729,   122,   123,
   983,   938,   939,   969,   124,   992,   994,  1004,  1000,   127,
  1014,  1015,  1016,  1017,  1058,   456,  1018,  1020,  1021,  1252,
  1253,  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1023,   594,
  1024,  1264,   271,   272,   273,   274,   275,   752,   276,   277,
   278,   279,   280,   281,   282,   283,   284,  1025,  1026,  1027,
  1033,  1322,   285,   271,   272,   273,   274,   275,  1034,   276,
   277,   278,   279,   280,   281,   282,   283,   284,  1037,  1038,
  1039,  1054,  1070,   285,  1055,  1056,  1059,  1060,  1346,  1061,
  1069,  1064,  1126,  1302,  1303,  1304,  1305,  1306,  1307,  1308,
  1309,  1310,  1312,  1314,  1316,  1072,  1084,   774,  1089,    89,
    90,   409,  1370,  1085,  1091,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,  1345,   115,   116,
   117,  1092,  1093,  1351,  1352,  1353,  1354,  1355,  1356,  1357,
  1358,  1359,  1360,  1094,  1362,  1095,  1364,   271,   272,   273,
   274,   275,  1097,   276,   277,   278,   279,   280,   281,   282,
   283,   284,  1103,  1098,  1099,  1104,  1105,   285,  1108,  1125,
  1123,  1107,  1142,  1148,  1383,  1384,  1149,  1110,  1152,  1388,
  1389,  1390,  1391,  1392,  1393,  1154,   852,   271,   272,   273,
   274,   275,  1156,   276,   277,   278,   279,   280,   281,   282,
   283,   284,  1157,  1411,  1158,  1167,  1159,   285,  1415,  1416,
  1417,  1418,  1419,  1420,  1422,  1424,  1426,  1160,  1162,  1164,
  1165,  1168,  1170,  1186,  1183,  1185,  1192,   740,   741,  1191,
   743,  1193,  1196,  1197,   745,   746,  1445,  1446,  1447,  1448,
  1449,  1450,  1451,  1199,  1453,  1201,  1455,   271,   272,   273,
   274,   275,  1229,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   122,   123,  1465,  1466,  1467,   285,   124,   778,
  1202,  1203,   781,   127,  1208,  1205,  1206,  1210,  1479,  1480,
  1481,  1483,  1485,  1487,  1212,  1227,   796,   797,  1230,  1234,
  1235,  1238,   802,   803,  1244,  1499,  1500,  1501,  1502,   809,
  1504,   816,  1506,   542,   543,   544,   545,   546,   547,   548,
   549,   550,   551,   552,   553,  1245,  1246,  1248,  1249,  1250,
  1251,  1265,  1520,  1522,  1524,  1267,  1268,  1273,  1271,  1269,
  1272,  1531,  1274,  1533,  1057,  1535,   271,   272,   273,   274,
   275,  1275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,  1276,  1294,  1295,  1286,  1287,   285,   864,  1290,   866,
  1288,  1298,  1299,  1301,  1317,  1319,  1318,  1323,  1320,   873,
   874,   875,  1321,  1324,   878,   879,   880,   881,   882,   883,
   884,  1325,  1326,    89,    90,    91,  1344,    92,  1349,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,  1342,   115,   116,   117,    89,   299,  1350,   825,  1361,
  1363,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,  1066,  1365,  1366,  1367,  1368,  1371,  1372,
  1382,  1385,  1400,  1399,  1401,  1412,    89,   455,  1408,  1409,
  1410,   955,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   271,   272,   273,   274,   275,  1067,
   276,   277,   278,   279,   280,   281,   282,   283,   284,  1428,
  1429,  1442,  1444,  1452,   285,  1454,  1456,  1457,  1471,  1488,
  1068,  1503,  1475,  1476,  1477,  1505,  1507,  1508,  1512,  1005,
  1516,  1517,  1532,  1518,  1534,  1198,  1013,  1536,  1538,  1539,
    68,    69,   118,   119,   120,   121,  1266,   697,    70,  1139,
  1003,   960,     0,     0,     0,  1032,   122,   123,     0,     0,
     0,     0,   124,   125,   126,   500,     0,   127,     0,   128,
     0,   129,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,   607,     0,   122,   415,
   285,     0,     0,     0,   124,     0,     0,     0,     0,   127,
     0,   751,     0,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   782,   285,     0,     0,     0,     0,     0,   122,
   123,     0,     0,     0,     0,   124,     0,     0,     0,     0,
   127,     0,     0,     0,     0,     0,     0,     0,     0,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   271,   272,   273,   274,   275,
   285,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,  1143,     0,  1144,
     0,     0,  1147,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,  1163,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   271,
   272,   273,   274,   275,   285,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,     0,    36,    37,     0,    39,    40,   -10,     1,
     0,   -10,   -53,     0,     0,     0,     0,  1233,     0,     0,
     0,  1236,  1237,    52,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    53,    54,   -53,
     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   -53,
   -53,     0,  1292,  1293,     0,     0,     0,   -53,    63,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   -10,   -10,   -10,   -10,   -10,
   -10,   -10,   -10,     0,     0,     0,     0,     0,     0,    23,
   492,     0,     0,     0,  1343,     0,     0,     0,     0,  1348,
   -53,     2,     3,     0,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,     0,     0,     0,
    41,    42,    43,    44,    45,    46,    47,  1387,    48,    49,
    50,    51,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    53,    54,     0,     0,
     0,     0,     0,     0,    55,  1413,    56,    57,    58,    59,
    60,    61,    62,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,   195,    36,    37,     0,    39,    40,     0,
     0,     0,     0,  1443,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    63,    53,    54,
     0,     0,  1464,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1478,     0,     0,     0,
     0,     0,     0,   196,   197,   198,     0,     0,     0,     0,
     0,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,    63,
   219,   220,   221,   222,   223,   224,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,   988,     0,   989,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,     0,     0,     0,
     0,  1130,     0,  1131,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
  1225,     0,  1226,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,     0,   271,   272,   273,   274,
   275,   444,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,     0,   271,
   272,   273,   274,   275,   449,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,   271,   272,   273,   274,   275,   451,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,     0,   271,   272,   273,   274,   275,
   629,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,     0,   271,   272,
   273,   274,   275,   633,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
     0,   271,   272,   273,   274,   275,   634,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,     0,   271,   272,   273,   274,   275,   770,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,   271,   272,   273,
   274,   275,   986,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,     0,
   271,   272,   273,   274,   275,  1146,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,     0,   271,   272,   273,   274,   275,  1188,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,     0,   271,   272,   273,   274,
   275,  1189,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,     0,   271,
   272,   273,   274,   275,  1190,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,   271,   272,   273,   274,   275,  1194,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,     0,   271,   272,   273,   274,   275,
  1195,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,     0,   271,   272,
   273,   274,   275,  1228,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
     0,   271,   272,   273,   274,   275,  1289,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,     0,   271,   272,   273,   274,   275,  1398,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,   271,   272,   273,
   274,   275,  1427,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   474,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   475,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   578,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   585,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   586,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   587,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   647,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   648,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,   649,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,   768,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   769,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   897,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   898,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   910,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   911,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   942,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   943,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   944,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,   945,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,   946,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   947,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   948,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   949,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   950,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   951,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   952,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   953,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   964,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,   971,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1078,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1079,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1087,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1090,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1101,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1106,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1109,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1111,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1112,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1113,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1114,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1115,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1116,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1117,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1118,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1119,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1120,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1121,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1122,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1127,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1128,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1204,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1213,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1214,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1215,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1216,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1217,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1218,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1219,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1220,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1221,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1277,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1278,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1279,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1280,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1281,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1282,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1283,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1284,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1285,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1327,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1328,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1329,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1330,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1331,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1332,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1333,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1334,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1335,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1369,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1373,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1374,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1375,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1376,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1377,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1378,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1397,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1402,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1403,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1404,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1405,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1406,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1407,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1430,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1431,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1432,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1433,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1434,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1435,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1458,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1459,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1460,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1472,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1473,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1474,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1489,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1490,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1491,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,   419,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,     0,   539,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,   651,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,     0,   842,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,   962,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   413,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   443,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   445,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   446,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   448,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   452,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   453,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   460,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   495,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   498,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   501,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   567,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   568,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   569,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   570,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   571,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   572,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   573,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   574,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   575,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   576,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   577,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   579,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   580,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   581,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   582,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   583,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   584,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   614,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   617,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   630,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   631,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   635,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   636,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   637,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   638,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   639,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   656,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   660,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   838,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   839,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   840,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   841,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   900,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   987,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,  1008,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,  1096,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,  1100,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,  1102,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,  1207,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,  1209,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,  1211,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,  1222,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
  1223,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,  1224,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,  1379,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,  1380,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,  1381,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,  1461,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,  1462,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,  1463,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,  1509,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,  1510,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
  1511,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285
};

static const short yycheck[] = {    23,
    23,   730,    87,   263,   326,    79,   265,   301,     4,     4,
   255,   256,   257,     4,    44,     3,   917,    62,     4,    40,
  1000,     6,     6,     6,    62,   926,    63,     4,    63,   147,
     6,    68,   933,    68,    84,     4,     5,   166,   167,     5,
   179,   301,   181,     6,   166,   167,     4,   166,   167,     6,
   173,   174,     4,   182,     7,   184,   166,   167,   181,   178,
   182,     7,   184,    32,    33,    34,    32,    33,    34,     3,
     4,    47,   182,     6,   184,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,   178,   122,   123,
   124,   182,    98,   127,   128,   177,   130,   166,   167,   177,
  1090,   183,    63,   137,   138,   139,   140,    68,   142,   143,
   194,   145,   146,   147,   183,   149,     6,   177,   857,    87,
    88,   177,   162,   163,   164,    87,    88,   183,   183,   177,
   170,   165,   166,    39,    40,   183,    42,   184,   442,   184,
   166,   167,   166,   167,   166,   167,   177,   166,   167,   183,
   419,   185,   456,   187,   188,   177,     7,   183,     6,   183,
   178,   183,     7,   182,   182,   420,     6,    36,     7,   167,
    39,    40,   442,   166,   167,   166,   167,   183,   183,   178,
  1091,   178,   183,   182,  1095,   182,   456,   183,   183,   183,
   177,   182,   232,   166,   167,   229,   152,   153,   154,   155,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   178,   166,   167,     3,   182,   178,   174,   172,   263,
   182,   178,   265,   177,   182,     6,   184,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   166,   167,   166,   167,   173,   174,   292,   166,
   167,   295,   179,   182,   181,   184,   300,   301,   182,   182,
   182,   184,   306,   307,   308,   182,   310,   311,   312,   313,
   314,   315,   316,   323,   324,     6,     7,   591,   166,   167,
  1201,  1202,  1203,  1204,   328,   329,   330,  1208,   177,   333,
   178,   152,   153,   154,   155,   177,   340,   152,   153,   154,
   155,   177,   346,   152,   153,   154,   155,    36,   622,  1058,
    39,   591,   173,   174,   177,   595,     8,     6,   173,   174,
   181,   166,   167,   177,   173,   174,   177,   592,   117,   118,
   119,   120,   121,   122,   123,   124,   182,   182,   184,   173,
   174,   384,   622,   166,   167,   168,   169,   170,    53,    54,
  1271,  1272,   177,   176,  1275,    36,    37,    38,    39,    40,
    41,    42,    43,   182,    45,   184,    47,    48,    44,    50,
    51,   415,   173,   174,     6,     7,   419,   421,   179,    36,
   181,   177,    39,    40,    40,    42,    67,    40,    40,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   442,    42,
    81,    82,  1323,   176,   183,   168,   169,   170,   177,   183,
   454,   183,   456,   176,   458,   459,   173,   174,    40,     6,
   464,     6,   179,   473,   181,   102,   103,   104,   105,   106,
   474,   475,   182,   177,   184,   749,   182,   177,   184,   483,
   182,     6,   184,   722,   723,   182,   490,   184,     4,   182,
  1371,   184,   182,     4,   184,   499,   500,    56,    57,    58,
    59,   142,    61,    40,   156,   157,   158,   159,   160,   749,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   182,
  1401,   184,     3,   182,   176,   184,   182,   182,   184,   184,
     5,   182,   184,   184,     6,   182,   539,   184,   182,   182,
   184,   184,   177,   184,     3,     4,   177,   177,   177,   177,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   177,   177,   578,   177,   177,   177,   177,   177,
   177,   585,   586,   587,   588,     6,   177,   591,   890,   177,
   177,   595,   177,   177,   598,     5,   177,   177,   177,   177,
   610,   177,   177,   607,   177,   177,   177,  1488,   177,   183,
   177,   177,   177,   183,   177,   183,   177,   177,   622,   623,
     4,   183,   847,   179,     6,   183,   183,    90,     6,   694,
     5,   177,   182,   177,   177,   177,   177,   647,   648,   649,
   178,   177,   177,   177,   177,   177,   177,   177,   652,   653,
   177,   655,     4,   177,   177,   665,   177,   177,   177,   663,
   664,   886,     3,     4,   674,   177,   181,   177,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
   177,   177,   177,   177,   698,   699,   700,   701,   702,   703,
   704,   705,   706,   707,   708,   709,     6,   166,   167,   177,
   177,   177,   177,   172,     7,   177,   177,   177,   177,     7,
   723,   180,   176,     7,   183,   182,     7,   731,   178,   733,
     7,     7,   786,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,   749,    85,   751,   183,   753,
   159,   160,    52,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   148,   767,   768,   769,     5,   176,  1070,     5,
     5,     5,     5,     5,     5,     5,     5,     5,   782,   783,
     5,     5,     5,     5,     5,     5,     5,     5,     3,     4,
   135,     5,     5,     5,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     5,     5,     5,     5,
     5,   824,     5,     3,     5,   166,   167,     5,   182,     6,
     5,   172,   178,     6,     4,     6,   177,   181,     7,   180,
     6,     6,   183,     7,   848,     7,     7,     6,   184,     7,
     7,     7,   862,   184,   908,   184,   156,   157,   158,   159,
   160,   183,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   183,   876,   877,   939,     7,   176,     7,   177,   149,
   182,   891,   886,   893,   182,   895,   182,   182,   182,     5,
   182,   182,   182,   897,   898,   182,   182,   182,   177,   182,
   182,     6,   182,   907,   182,     8,   910,   182,   182,   182,
   182,   182,   178,   182,   182,   182,   920,   182,   182,   182,
   182,   182,   182,   927,   928,   929,   182,   182,   177,   177,
   934,   177,   177,   177,   938,   177,   177,   177,   942,   943,
   944,   945,   946,   947,   948,   949,   950,   951,   952,   953,
   177,   166,   167,   148,     4,     6,  1010,   172,   153,     6,
   964,   177,   177,   180,     6,   180,   177,   971,   183,     7,
   179,     6,     4,     7,     7,   183,     7,     7,     6,     8,
   175,     7,     7,     7,   988,     7,   181,   182,     7,     7,
     7,     7,     7,     7,   145,     3,     3,     3,     4,     3,
   168,     3,  1006,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     3,     4,     3,     3,     3,
     3,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   156,   157,   158,   159,   160,     3,   162,
   163,   164,   165,   166,   167,   168,   169,   170,     3,  1073,
  1074,  1075,     6,   176,  1078,  1079,     3,     3,     3,     3,
   178,  1085,     5,     5,     3,     3,     6,     4,   178,  1093,
   181,     7,   181,     6,  1148,     6,     6,  1101,     6,     6,
     6,   183,  1106,     6,    86,  1109,   183,  1111,  1112,  1113,
  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,   182,
   182,   178,   182,  1127,   178,   178,  1130,   156,   157,   158,
   159,   160,   178,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   182,   182,     6,   182,  1200,   176,     6,   178,
     4,     6,     3,     6,    87,   182,     6,   178,     6,   182,
   166,   167,   182,     6,     6,     6,   172,   178,     6,   182,
   182,   177,   182,   182,     6,     6,   181,   183,     6,   182,
     6,   182,   182,   182,   182,  1239,   178,     6,   166,   167,
     6,   182,   182,   180,   172,     6,     6,    86,     7,   177,
     6,     3,     6,   168,     7,   183,     6,     6,     3,  1213,
  1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,     6,   414,
     3,  1225,   156,   157,   158,   159,   160,     6,   162,   163,
   164,   165,   166,   167,   168,   169,   170,     6,     6,     3,
     6,  1295,   176,   156,   157,   158,   159,   160,     3,   162,
   163,   164,   165,   166,   167,   168,   169,   170,     3,     3,
     6,     4,   183,   176,     6,     6,     6,   181,  1322,   181,
     6,   180,     4,  1277,  1278,  1279,  1280,  1281,  1282,  1283,
  1284,  1285,  1286,  1287,  1288,   184,   183,     6,   178,     3,
     4,     5,  1346,    83,   182,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,  1321,    32,    33,
    34,   182,   182,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
  1334,  1335,  1336,   178,  1338,   182,  1340,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   182,   178,   178,   178,   178,   176,   178,    88,
   178,   182,    86,   145,  1368,  1369,     6,   182,     3,  1373,
  1374,  1375,  1376,  1377,  1378,     6,     6,   156,   157,   158,
   159,   160,     6,   162,   163,   164,   165,   166,   167,   168,
   169,   170,     3,  1397,     6,     3,     6,   176,  1402,  1403,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,     6,     6,     6,
     6,     6,     5,   184,     6,     5,   183,   612,   613,     6,
   615,     6,   183,   182,   619,   620,  1430,  1431,  1432,  1433,
  1434,  1435,  1436,   184,  1438,   182,  1440,   156,   157,   158,
   159,   160,     6,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   166,   167,  1458,  1459,  1460,   176,   172,   654,
   182,   182,   657,   177,   182,   178,   178,   178,  1472,  1473,
  1474,  1475,  1476,  1477,   182,   182,   671,   672,     6,     6,
     6,     6,   677,   678,     6,  1489,  1490,  1491,  1492,   684,
  1494,   686,  1496,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,     6,     6,     6,     6,     6,
     5,     5,  1516,  1517,  1518,   182,   182,   178,   182,   184,
   182,  1525,   178,  1527,     6,  1529,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   182,    83,   145,   183,   183,   176,   742,   182,   744,
   183,     6,     6,     5,     5,   182,     6,   182,   184,   754,
   755,   756,   183,   182,   759,   760,   761,   762,   763,   764,
   765,   178,   178,     3,     4,     5,    83,     7,     6,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   184,    32,    33,    34,     3,     4,     6,   184,     6,
     6,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     6,     6,     6,   184,   183,   182,   182,
     6,   150,   182,   151,   182,     6,     3,     4,   183,   183,
   183,   846,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   156,   157,   158,   159,   160,     6,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   182,
   178,     6,     6,     6,   176,     6,     6,   182,   182,   182,
     6,     6,   183,   183,   183,     6,     6,   178,     6,   904,
   183,   183,     6,   183,     6,     6,   911,     6,     0,     0,
     7,     7,   152,   153,   154,   155,  1232,   541,     7,  1077,
   902,   851,    -1,    -1,    -1,   930,   166,   167,    -1,    -1,
    -1,    -1,   172,   173,   174,     8,    -1,   177,    -1,   179,
    -1,   181,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,     8,    -1,   166,   167,
   176,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   177,
    -1,     8,    -1,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,     8,   176,    -1,    -1,    -1,    -1,    -1,   166,
   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   156,   157,   158,   159,   160,
   176,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,  1082,    -1,  1084,
    -1,    -1,  1087,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,  1103,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   156,
   157,   158,   159,   160,   176,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
    -1,    45,    -1,    47,    48,    -1,    50,    51,     0,     1,
    -1,     3,     4,    -1,    -1,    -1,    -1,  1192,    -1,    -1,
    -1,  1196,  1197,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    31,
    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    -1,    45,    46,    47,    48,    49,    50,    51,
    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,    61,
    -1,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    -1,  1267,  1268,    -1,    -1,    -1,    89,   142,    91,
    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,     4,
   184,    -1,    -1,    -1,  1319,    -1,    -1,    -1,    -1,  1324,
   142,   143,   144,    -1,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
    45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
    55,    56,    57,    58,    59,    60,    61,  1372,    63,    64,
    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    -1,    -1,
    -1,    -1,    -1,    -1,    89,  1400,    91,    92,    93,    94,
    95,    96,    97,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    45,    39,    47,    48,    -1,    50,    51,    -1,
    -1,    -1,    -1,  1428,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    81,    82,
    -1,    -1,  1457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1471,    -1,    -1,    -1,
    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,
    -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   142,
   136,   137,   138,   139,   140,   141,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
    -1,    -1,   182,    -1,   184,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
    -1,   182,    -1,   184,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
   182,    -1,   184,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,
   160,   184,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,
   157,   158,   159,   160,   184,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,   156,   157,   158,   159,   160,   184,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,
   184,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,
   158,   159,   160,   184,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
    -1,   156,   157,   158,   159,   160,   184,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,   184,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,
   159,   160,   184,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
   156,   157,   158,   159,   160,   184,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,    -1,   156,   157,   158,   159,   160,   184,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,
   160,   184,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,
   157,   158,   159,   160,   184,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,   156,   157,   158,   159,   160,   184,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,
   184,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,
   158,   159,   160,   184,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
    -1,   156,   157,   158,   159,   160,   184,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,   184,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,
   159,   160,   184,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,   180,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,    -1,   180,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,   180,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,    -1,   180,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,   180,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 159 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 167 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 168 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 173 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 187 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 194 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 211 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 212 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 213 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 218 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 223 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 234 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 237 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 241 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 247 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 253 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 260 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 266 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 270 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 274 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 281 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 285 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 290 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 294 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 298 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 302 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 306 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 310 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 314 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 318 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 324 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 327 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 330 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 334 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 338 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 342 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 346 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 354 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 358 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 365 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 381 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 384 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 406 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 410 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Printf format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 440 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 445 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 453 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 84:
#line 472 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 474 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 479 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 87:
#line 484 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 88:
#line 491 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 493 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 498 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 91:
#line 503 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 92:
#line 510 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 512 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 517 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 522 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 96:
#line 529 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 531 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 537 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 543 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 100:
#line 550 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 552 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 558 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 564 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 104:
#line 571 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 573 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 579 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 585 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 108:
#line 592 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 594 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 601 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 610 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 112:
#line 617 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 619 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 626 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 635 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 116:
#line 642 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 644 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 651 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 660 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 120:
#line 667 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 669 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 677 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 686 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 124:
#line 693 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 695 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 703 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 712 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 128:
#line 719 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 721 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 729 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 738 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 132:
#line 750 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 133:
#line 751 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 134:
#line 752 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 135:
#line 753 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 136:
#line 754 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 137:
#line 757 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 138:
#line 758 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 139:
#line 765 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 140:
#line 792 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 141:
#line 826 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 142:
#line 873 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 888 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 144:
#line 897 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 145:
#line 912 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 146:
#line 924 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 147:
#line 938 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 148:
#line 961 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 149:
#line 985 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 150:
#line 997 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 151:
#line 1011 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 152:
#line 1023 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 153:
#line 1037 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 1053 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 1069 "Gmsh.y"
{
#ifndef _NOPLUGIN
    try 
      {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
      }
    catch (...)
      {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
#endif
  ;
    break;}
case 156:
#line 1082 "Gmsh.y"
{
#ifndef _NOPLUGIN
    try 
      {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
      }
    catch (...)
      {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
#endif
  ;
    break;}
case 157:
#line 1106 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 1113 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 1119 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 160:
#line 1138 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 161:
#line 1149 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 162:
#line 1157 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1163 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1169 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1188 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1194 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 167:
#line 1211 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 168:
#line 1217 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1223 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1229 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1235 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 172:
#line 1241 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 173:
#line 1260 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 174:
#line 1272 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1278 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 176:
#line 1297 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 177:
#line 1320 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 178:
#line 1328 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 179:
#line 1332 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1338 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1344 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 182:
#line 1356 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 183:
#line 1362 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1368 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1381 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 186:
#line 1386 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 187:
#line 1391 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 188:
#line 1396 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 189:
#line 1403 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 190:
#line 1404 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 191:
#line 1405 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 192:
#line 1410 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 193:
#line 1414 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1426 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 195:
#line 1444 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 196:
#line 1451 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 197:
#line 1456 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 198:
#line 1468 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 199:
#line 1535 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 200:
#line 1555 "Gmsh.y"
{
#ifndef _NOPLUGIN
    GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
#endif
   ;
    break;}
case 201:
#line 1561 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 202:
#line 1565 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 203:
#line 1587 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 204:
#line 1601 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 205:
#line 1615 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 206:
#line 1640 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 207:
#line 1665 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 208:
#line 1691 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 209:
#line 1697 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 210:
#line 1702 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 211:
#line 1707 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 212:
#line 1711 "Gmsh.y"
{
    ;
    break;}
case 213:
#line 1722 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 214:
#line 1727 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 215:
#line 1733 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 216:
#line 1737 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 217:
#line 1741 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 218:
#line 1745 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 219:
#line 1749 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 220:
#line 1754 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 221:
#line 1761 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 222:
#line 1766 "Gmsh.y"
{
    ;
    break;}
case 223:
#line 1769 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1775 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 225:
#line 1795 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 226:
#line 1806 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 227:
#line 1824 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 228:
#line 1842 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 229:
#line 1860 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 230:
#line 1882 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 231:
#line 1903 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 232:
#line 1924 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 233:
#line 1938 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1960 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 235:
#line 1964 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 236:
#line 1975 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 237:
#line 1976 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 238:
#line 1977 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 1978 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 240:
#line 1979 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 241:
#line 1983 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 1984 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 243:
#line 1985 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 244:
#line 1986 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 245:
#line 1987 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 246:
#line 1988 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 247:
#line 1989 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 248:
#line 1990 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 249:
#line 1992 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 250:
#line 1998 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 251:
#line 1999 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 252:
#line 2000 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 253:
#line 2001 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 254:
#line 2002 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 255:
#line 2003 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 256:
#line 2004 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 257:
#line 2005 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 258:
#line 2006 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 259:
#line 2007 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 260:
#line 2008 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 261:
#line 2009 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2010 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2011 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 2012 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2013 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2014 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2015 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2016 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2017 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2018 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2019 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 272:
#line 2020 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2021 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2022 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2023 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2024 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 2025 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2026 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 279:
#line 2027 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 2028 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 281:
#line 2029 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 282:
#line 2038 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 283:
#line 2039 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 284:
#line 2044 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 285:
#line 2055 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 286:
#line 2072 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 287:
#line 2083 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 288:
#line 2102 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 289:
#line 2118 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 290:
#line 2134 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 291:
#line 2150 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 292:
#line 2168 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 293:
#line 2172 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2176 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 295:
#line 2180 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 296:
#line 2184 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 297:
#line 2190 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 298:
#line 2194 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2198 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 300:
#line 2202 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 301:
#line 2209 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2212 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2218 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2221 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2227 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2230 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 307:
#line 2234 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 308:
#line 2241 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 309:
#line 2246 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 310:
#line 2254 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 311:
#line 2259 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 312:
#line 2263 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 313:
#line 2267 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 314:
#line 2278 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 315:
#line 2284 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 316:
#line 2295 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 317:
#line 2309 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 318:
#line 2325 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 319:
#line 2345 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 320:
#line 2370 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 321:
#line 2375 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 322:
#line 2379 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 323:
#line 2383 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 324:
#line 2395 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 325:
#line 2399 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 326:
#line 2410 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 327:
#line 2415 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 328:
#line 2434 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 329:
#line 2438 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 330:
#line 2452 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 331:
#line 2457 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 332:
#line 2464 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 333:
#line 2468 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 334:
#line 2476 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 335:
#line 2489 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 336:
#line 2493 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Sprintf format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
      Free(yyvsp[-3].c);
    ;
    break;}
case 337:
#line 2518 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 338:
#line 2532 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2547 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


