
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tDraw	286
#define	tSleep	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tInclude	314
#define	tRecombine	315
#define	tDelete	316
#define	tCoherence	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tScript	343
#define	tExit	344
#define	tMerge	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tB_SPLINE_SURFACE_WITH_KNOTS	349
#define	tB_SPLINE_CURVE_WITH_KNOTS	350
#define	tCARTESIAN_POINT	351
#define	tTRUE	352
#define	tFALSE	353
#define	tUNSPECIFIED	354
#define	tU	355
#define	tV	356
#define	tEDGE_CURVE	357
#define	tVERTEX_POINT	358
#define	tORIENTED_EDGE	359
#define	tPLANE	360
#define	tFACE_OUTER_BOUND	361
#define	tEDGE_LOOP	362
#define	tADVANCED_FACE	363
#define	tVECTOR	364
#define	tDIRECTION	365
#define	tAXIS2_PLACEMENT_3D	366
#define	tISO	367
#define	tENDISO	368
#define	tENDSEC	369
#define	tDATA	370
#define	tHEADER	371
#define	tFILE_DESCRIPTION	372
#define	tFILE_SCHEMA	373
#define	tFILE_NAME	374
#define	tMANIFOLD_SOLID_BREP	375
#define	tCLOSED_SHELL	376
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	377
#define	tFACE_BOUND	378
#define	tCYLINDRICAL_SURFACE	379
#define	tCONICAL_SURFACE	380
#define	tCIRCLE	381
#define	tTRIMMED_CURVE	382
#define	tGEOMETRIC_SET	383
#define	tCOMPOSITE_CURVE_SEGMENT	384
#define	tCONTINUOUS	385
#define	tCOMPOSITE_CURVE	386
#define	tTOROIDAL_SURFACE	387
#define	tPRODUCT_DEFINITION	388
#define	tPRODUCT_DEFINITION_SHAPE	389
#define	tSHAPE_DEFINITION_REPRESENTATION	390
#define	tELLIPSE	391
#define	tTrimmed	392
#define	tSolid	393
#define	tEndSolid	394
#define	tVertex	395
#define	tFacet	396
#define	tNormal	397
#define	tOuter	398
#define	tLoopSTL	399
#define	tEndLoop	400
#define	tEndFacet	401
#define	tAND	402
#define	tOR	403
#define	tNOTEQUAL	404
#define	tEQUAL	405
#define	tAPPROXEQUAL	406
#define	tAFFECTPLUS	407
#define	tAFFECTMINUS	408
#define	tAFFECTTIMES	409
#define	tAFFECTDIVIDE	410
#define	tLESSOREQUAL	411
#define	tGREATEROREQUAL	412
#define	tCROSSPRODUCT	413
#define	UNARYPREC	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.37 2000-12-09 15:21:17 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 63 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1522
#define	YYFLAG		-32768
#define	YYNTBASE	181

#define YYTRANSLATE(x) ((unsigned)(x) <= 416 ? yytranslate[x] : 259)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   166,     2,     2,   173,
   175,   164,   162,   174,   163,   178,   165,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   158,
     2,   159,   148,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   179,     2,   180,   170,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   176,     2,   177,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   160,   161,   167,   168,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   525,   533,   540,   549,
   550,   553,   556,   559,   562,   565,   568,   571,   574,   577,
   580,   583,   586,   588,   592,   593,   607,   609,   613,   614,
   628,   630,   634,   635,   649,   651,   655,   656,   676,   678,
   682,   683,   703,   705,   709,   710,   730,   732,   736,   737,
   763,   765,   769,   770,   796,   798,   802,   803,   829,   831,
   835,   836,   868,   870,   874,   875,   907,   909,   913,   914,
   946,   951,   955,   959,   964,   969,   974,   979,   986,   998,
  1005,  1017,  1024,  1036,  1043,  1055,  1062,  1074,  1081,  1093,
  1099,  1111,  1117,  1129,  1136,  1148,  1155,  1167,  1174,  1186,
  1195,  1207,  1215,  1224,  1237,  1244,  1250,  1258,  1266,  1279,
  1287,  1297,  1315,  1323,  1332,  1341,  1349,  1361,  1367,  1376,
  1386,  1395,  1418,  1439,  1448,  1457,  1463,  1472,  1480,  1489,
  1495,  1507,  1513,  1523,  1525,  1527,  1529,  1530,  1533,  1538,
  1543,  1547,  1551,  1554,  1558,  1561,  1565,  1572,  1581,  1590,
  1601,  1603,  1605,  1609,  1612,  1621,  1634,  1643,  1656,  1665,
  1678,  1690,  1706,  1708,  1711,  1721,  1724,  1731,  1741,  1751,
  1760,  1769,  1778,  1785,  1790,  1793,  1795,  1797,  1799,  1801,
  1803,  1805,  1809,  1812,  1815,  1818,  1822,  1826,  1830,  1834,
  1838,  1842,  1846,  1850,  1854,  1858,  1862,  1866,  1870,  1874,
  1880,  1885,  1890,  1895,  1900,  1905,  1910,  1915,  1920,  1925,
  1930,  1937,  1942,  1947,  1952,  1957,  1962,  1967,  1974,  1981,
  1988,  1993,  1995,  1997,  1999,  2003,  2012,  2017,  2027,  2032,
  2042,  2046,  2052,  2054,  2057,  2060,  2064,  2068,  2080,  2090,
  2098,  2106,  2110,  2119,  2120,  2124,  2126,  2130,  2131,  2135,
  2139,  2141,  2145,  2146,  2148,  2152,  2154,  2156,  2160,  2164,
  2174,  2182,  2188,  2190,  2196,  2200,  2209,  2211
};

static const short yyrhs[] = {   183,
     0,   182,     0,   188,     0,   139,     0,   142,   143,   245,
   245,   245,   144,   145,   141,   245,   245,   245,   141,   245,
   245,   245,   141,   245,   245,   245,   146,   147,     0,   140,
     0,     0,   183,   184,     0,   185,     0,   187,     0,   186,
     0,     1,     6,     0,   113,     6,     0,   114,     6,     0,
   116,     6,     0,   115,     6,     0,   117,     6,     0,   118,
   173,   250,   174,     5,   175,     6,     0,   119,   173,   250,
   175,     6,     0,   120,   173,     5,   174,     5,   174,   250,
   174,   250,   174,     5,   174,     5,   174,     5,   175,     6,
     0,     3,     7,    97,   173,     5,   174,   248,   175,     6,
     0,     3,     7,    96,   173,     5,   174,   245,   174,   254,
   174,   244,   174,   244,   174,   244,   174,   254,   174,   254,
   174,   244,   175,     6,     0,     3,     7,    95,   173,     5,
   174,   245,   174,   245,   174,   252,   174,   244,   174,   244,
   174,   244,   174,   244,   174,   254,   174,   254,   174,   254,
   174,   254,   174,   244,   175,     6,     0,     3,     7,   103,
   173,     5,   174,     3,   174,     3,   174,     3,   174,   244,
   175,     6,     0,     3,     7,   107,   173,     5,   174,     3,
   174,   244,   175,     6,     0,     3,     7,   124,   173,     5,
   174,     3,   174,   244,   175,     6,     0,     3,     7,   105,
   173,     5,   174,   164,   174,   164,   174,   245,   174,   244,
   175,     6,     0,     3,     7,   108,   173,     5,   174,   254,
   175,     6,     0,     3,     7,   109,   173,     5,   174,   254,
   174,     3,   174,   244,   175,     6,     0,     3,     7,   104,
   173,     5,   174,     3,   175,     6,     0,     3,     7,   110,
   173,     5,   174,     3,   174,   245,   175,     6,     0,     3,
     7,   112,   173,     5,   174,     3,   174,     3,   174,     3,
   175,     6,     0,     3,     7,   111,   173,     5,   174,   248,
   175,     6,     0,     3,     7,   106,   173,     5,   174,     3,
   175,     6,     0,     3,     7,    37,   173,     5,   174,     3,
   174,     3,   175,     6,     0,     3,     7,   122,   173,     5,
   174,   254,   175,     6,     0,     3,     7,   123,   173,     5,
   174,   254,   174,     3,   175,     6,     0,     3,     7,   121,
   173,     5,   174,     3,   175,     6,     0,     3,     7,   125,
   173,     5,   174,     3,   174,   245,   175,     6,     0,     3,
     7,   126,   173,     5,   174,     3,   174,   245,   174,   245,
   175,     6,     0,     3,     7,   133,   173,     5,   174,     3,
   174,   245,   174,   245,   175,     6,     0,     3,     7,   127,
   173,     5,   174,     3,   174,   245,   175,     6,     0,     3,
     7,   137,   173,     5,   174,     3,   174,   245,   174,   245,
   175,     6,     0,     3,     7,   128,   173,     5,   174,     3,
   174,   254,   174,   254,   174,   244,   174,   244,   175,     6,
     0,     3,     7,   129,   173,     5,   174,   254,   175,     6,
     0,     3,     7,   130,   173,   131,   174,   244,   174,     3,
   175,     6,     0,     3,     7,   132,   173,     5,   174,   254,
   174,   244,   175,     6,     0,     3,     7,   134,   173,     5,
   174,     5,   174,     3,   174,     3,   175,     6,     0,     3,
     7,   135,   173,     5,   174,     5,   174,     3,   175,     6,
     0,     3,     7,   136,   173,     3,   174,     3,   175,     6,
     0,     0,   188,   189,     0,   191,     0,   190,     0,   229,
     0,   230,     0,   231,     0,   234,     0,   235,     0,   239,
     0,   242,     0,   243,     0,   236,     0,   238,     0,   237,
     0,     1,     6,     0,    31,   173,     5,   174,   245,   175,
     6,     0,    64,     5,   176,   192,   177,     6,     0,    64,
     5,     4,   248,   176,   192,   177,     6,     0,     0,   192,
   194,     0,   192,   197,     0,   192,   200,     0,   192,   203,
     0,   192,   206,     0,   192,   209,     0,   192,   212,     0,
   192,   215,     0,   192,   218,     0,   192,   221,     0,   192,
   224,     0,   192,   227,     0,   245,     0,   193,   174,   245,
     0,     0,    76,   173,   245,   174,   245,   174,   245,   175,
   195,   176,   193,   177,     6,     0,   245,     0,   196,   174,
   245,     0,     0,    77,   173,   245,   174,   245,   174,   245,
   175,   198,   176,   196,   177,     6,     0,   245,     0,   199,
   174,   245,     0,     0,    78,   173,   245,   174,   245,   174,
   245,   175,   201,   176,   199,   177,     6,     0,   245,     0,
   202,   174,   245,     0,     0,    73,   173,   245,   174,   245,
   174,   245,   174,   245,   174,   245,   174,   245,   175,   204,
   176,   202,   177,     6,     0,   245,     0,   205,   174,   245,
     0,     0,    74,   173,   245,   174,   245,   174,   245,   174,
   245,   174,   245,   174,   245,   175,   207,   176,   205,   177,
     6,     0,   245,     0,   208,   174,   245,     0,     0,    75,
   173,   245,   174,   245,   174,   245,   174,   245,   174,   245,
   174,   245,   175,   210,   176,   208,   177,     6,     0,   245,
     0,   211,   174,   245,     0,     0,    70,   173,   245,   174,
   245,   174,   245,   174,   245,   174,   245,   174,   245,   174,
   245,   174,   245,   174,   245,   175,   213,   176,   211,   177,
     6,     0,   245,     0,   214,   174,   245,     0,     0,    71,
   173,   245,   174,   245,   174,   245,   174,   245,   174,   245,
   174,   245,   174,   245,   174,   245,   174,   245,   175,   216,
   176,   214,   177,     6,     0,   245,     0,   217,   174,   245,
     0,     0,    72,   173,   245,   174,   245,   174,   245,   174,
   245,   174,   245,   174,   245,   174,   245,   174,   245,   174,
   245,   175,   219,   176,   217,   177,     6,     0,   245,     0,
   220,   174,   245,     0,     0,    67,   173,   245,   174,   245,
   174,   245,   174,   245,   174,   245,   174,   245,   174,   245,
   174,   245,   174,   245,   174,   245,   174,   245,   174,   245,
   175,   222,   176,   220,   177,     6,     0,   245,     0,   223,
   174,   245,     0,     0,    68,   173,   245,   174,   245,   174,
   245,   174,   245,   174,   245,   174,   245,   174,   245,   174,
   245,   174,   245,   174,   245,   174,   245,   174,   245,   175,
   225,   176,   223,   177,     6,     0,   245,     0,   226,   174,
   245,     0,     0,    69,   173,   245,   174,   245,   174,   245,
   174,   245,   174,   245,   174,   245,   174,   245,   174,   245,
   174,   245,   174,   245,   174,   245,   174,   245,   175,   228,
   176,   226,   177,     6,     0,     4,     7,   245,     6,     0,
     4,   171,     6,     0,     4,   172,     6,     0,     4,   154,
   245,     6,     0,     4,   155,   245,     6,     0,     4,   156,
   245,     6,     0,     4,   157,   245,     6,     0,     4,   178,
     4,     7,     5,     6,     0,     4,   178,    64,   179,   245,
   180,   178,     4,     7,     5,     6,     0,     4,   178,     4,
     7,   245,     6,     0,     4,   178,    64,   179,   245,   180,
   178,     4,     7,   245,     6,     0,     4,   178,     4,   154,
   245,     6,     0,     4,   178,    64,   179,   245,   180,   178,
     4,   154,   245,     6,     0,     4,   178,     4,   155,   245,
     6,     0,     4,   178,    64,   179,   245,   180,   178,     4,
   155,   245,     6,     0,     4,   178,     4,   156,   245,     6,
     0,     4,   178,    64,   179,   245,   180,   178,     4,   156,
   245,     6,     0,     4,   178,     4,   157,   245,     6,     0,
     4,   178,    64,   179,   245,   180,   178,     4,   157,   245,
     6,     0,     4,   178,     4,   171,     6,     0,     4,   178,
    64,   179,   245,   180,   178,     4,   171,   245,     6,     0,
     4,   178,     4,   172,     6,     0,     4,   178,    64,   179,
   245,   180,   178,     4,   172,   245,     6,     0,     4,   178,
     4,     7,   248,     6,     0,     4,   178,    64,   179,   245,
   180,   178,     4,     7,   248,     6,     0,     4,   178,     4,
   154,   248,     6,     0,     4,   178,    64,   179,   245,   180,
   178,     4,   154,   248,     6,     0,     4,   178,     4,   155,
   248,     6,     0,     4,   178,    64,   179,   245,   180,   178,
     4,   155,   248,     6,     0,     4,   178,    85,   178,     4,
     7,   256,     6,     0,     4,   178,    64,   179,   245,   180,
   178,    85,     7,   257,     6,     0,    34,   173,   245,   175,
     7,   248,     6,     0,    49,    34,   173,   245,   175,     7,
   254,     6,     0,    65,    34,   254,     7,   176,   245,   174,
   245,   174,   245,   177,     6,     0,    41,    42,   254,     7,
   245,     6,     0,    34,   176,   245,   177,     6,     0,    37,
   173,   245,   175,     7,   254,     6,     0,    39,   173,   245,
   175,     7,   254,     6,     0,    65,    37,   254,     7,   176,
   245,   174,   245,   174,   245,   177,     6,     0,    35,   173,
   245,   175,     7,   254,     6,     0,    35,   173,   245,   175,
     7,   254,    45,   248,     6,     0,    43,   173,   245,   175,
     7,   176,   245,   174,   245,   174,     5,   174,     5,   174,
     5,   177,     6,     0,    36,   173,   245,   175,     7,   254,
     6,     0,    49,    37,   173,   245,   175,     7,   254,     6,
     0,    37,    59,   173,   245,   175,     7,   254,     6,     0,
    79,   173,   245,   175,     7,   254,     6,     0,    80,   173,
   245,   175,     7,   254,    84,   254,    81,   245,     6,     0,
    37,   176,   245,   177,     6,     0,    45,    38,   173,   245,
   175,     7,   254,     6,     0,   138,    38,   173,   245,   175,
     7,   245,   254,     6,     0,    46,    38,   173,   245,   175,
     7,   254,     6,     0,    80,    38,    82,    83,   173,   245,
   175,     7,   252,    84,   176,   254,   174,   254,   177,    81,
   176,   245,   174,   245,   177,     6,     0,    80,    38,   173,
   245,   175,     7,   252,    84,   176,   254,   174,   254,   177,
    81,   176,   245,   174,   245,   177,     6,     0,    49,    38,
   173,   245,   175,     7,   254,     6,     0,    38,    59,   173,
   245,   175,     7,   254,     6,     0,    38,   176,   245,   177,
     6,     0,    48,    40,   173,   245,   175,     7,   254,     6,
     0,    40,   173,   245,   175,     7,   254,     6,     0,    49,
    40,   173,   245,   175,     7,   254,     6,     0,    54,   248,
   176,   232,   177,     0,    53,   176,   248,   174,   248,   174,
   245,   177,   176,   232,   177,     0,    55,   248,   176,   232,
   177,     0,    56,   176,   248,   174,   245,   177,   176,   232,
   177,     0,   234,     0,   233,     0,   231,     0,     0,   233,
   230,     0,    58,   176,   233,   177,     0,    62,   176,   233,
   177,     0,    60,     5,     6,     0,    31,     5,     6,     0,
    90,     6,     0,    91,     5,     6,     0,    32,     6,     0,
    33,   245,     6,     0,    86,   176,   245,     8,   245,   177,
     0,    86,   176,   245,     8,   245,     8,   245,   177,     0,
    86,     4,    87,   176,   245,     8,   245,   177,     0,    86,
     4,    87,   176,   245,     8,   245,     8,   245,   177,     0,
    88,     0,    92,     0,    93,     4,     6,     0,    94,     4,
     0,    57,    34,   176,   245,   174,   248,   177,     6,     0,
    57,    34,   176,   245,   174,   248,   174,   248,   174,   245,
   177,     6,     0,    57,    37,   176,   245,   174,   248,   177,
     6,     0,    57,    37,   176,   245,   174,   248,   174,   248,
   174,   245,   177,     6,     0,    57,    38,   176,   245,   174,
   248,   177,     6,     0,    57,    38,   176,   245,   174,   248,
   174,   248,   174,   245,   177,     6,     0,    57,    38,   176,
   245,   174,   248,   177,   176,   240,   177,     6,     0,    57,
    38,   176,   245,   174,   248,   174,   248,   174,   245,   177,
   176,   240,   177,     6,     0,   241,     0,   240,   241,     0,
    66,   176,   254,   174,   254,   174,   254,   177,     6,     0,
    61,     6,     0,    47,    37,   254,     7,   245,     6,     0,
    47,    37,   254,     7,   245,    50,    52,   245,     6,     0,
    47,    37,   254,     7,   245,    50,    51,   245,     6,     0,
    47,    38,   176,   245,   177,     7,   254,     6,     0,    44,
    38,   176,   245,   177,     7,   254,     6,     0,    47,    40,
   176,   245,   177,     7,   254,     6,     0,    61,    38,   254,
     7,   245,     6,     0,    61,    38,   254,     6,     0,    63,
     6,     0,    98,     0,    99,     0,   100,     0,   101,     0,
   102,     0,   246,     0,   173,   245,   175,     0,   163,   245,
     0,   162,   245,     0,   169,   245,     0,   245,   163,   245,
     0,   245,   162,   245,     0,   245,   164,   245,     0,   245,
   165,   245,     0,   245,   166,   245,     0,   245,   170,   245,
     0,   245,   158,   245,     0,   245,   159,   245,     0,   245,
   160,   245,     0,   245,   161,   245,     0,   245,   152,   245,
     0,   245,   151,   245,     0,   245,   149,   245,     0,   245,
   150,   245,     0,   245,   148,   245,     8,   245,     0,    10,
   173,   245,   175,     0,    11,   173,   245,   175,     0,    12,
   173,   245,   175,     0,    13,   173,   245,   175,     0,    14,
   173,   245,   175,     0,    15,   173,   245,   175,     0,    16,
   173,   245,   175,     0,    17,   173,   245,   175,     0,    18,
   173,   245,   175,     0,    20,   173,   245,   175,     0,    21,
   173,   245,   174,   245,   175,     0,    22,   173,   245,   175,
     0,    23,   173,   245,   175,     0,    24,   173,   245,   175,
     0,    25,   173,   245,   175,     0,    26,   173,   245,   175,
     0,    27,   173,   245,   175,     0,    28,   173,   245,   174,
   245,   175,     0,    29,   173,   245,   174,   245,   175,     0,
    30,   173,   245,   174,   245,   175,     0,    19,   173,   245,
   175,     0,     3,     0,     9,     0,     4,     0,     4,   178,
     4,     0,     4,   178,    64,   179,   245,   180,   178,     4,
     0,     4,   178,     4,   171,     0,     4,   178,    64,   179,
   245,   180,   178,     4,   171,     0,     4,   178,     4,   172,
     0,     4,   178,    64,   179,   245,   180,   178,     4,   172,
     0,   245,     8,   245,     0,   245,     8,   245,     8,   245,
     0,   249,     0,   163,   248,     0,   162,   248,     0,   248,
   163,   248,     0,   248,   162,   248,     0,   176,   245,   174,
   245,   174,   245,   174,   245,   174,   245,   177,     0,   176,
   245,   174,   245,   174,   245,   174,   245,   177,     0,   176,
   245,   174,   245,   174,   245,   177,     0,   173,   245,   174,
   245,   174,   245,   175,     0,     4,   178,     4,     0,     4,
   178,    64,   179,   245,   180,   178,     4,     0,     0,   173,
   251,   175,     0,     5,     0,   251,   174,     5,     0,     0,
   176,   253,   177,     0,   173,   253,   175,     0,   254,     0,
   253,   174,   254,     0,     0,   245,     0,   176,   255,   177,
     0,   245,     0,   247,     0,   255,   174,   245,     0,   255,
   174,   247,     0,   176,   245,   174,   245,   174,   245,   174,
   245,   177,     0,   176,   245,   174,   245,   174,   245,   177,
     0,   176,     4,   174,   245,   177,     0,     4,     0,     4,
   178,    85,   178,     4,     0,   176,   258,   177,     0,     4,
   178,    64,   179,   245,   180,   178,    85,     0,   256,     0,
   258,   174,   256,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   143,   145,   146,   153,   161,   175,   187,   189,   192,   194,
   195,   196,   199,   205,   210,   211,   212,   215,   219,   222,
   228,   233,   239,   247,   252,   256,   262,   267,   271,   276,
   280,   283,   288,   292,   296,   300,   305,   309,   312,   316,
   320,   324,   328,   332,   336,   339,   343,   346,   350,   353,
   362,   366,   372,   374,   375,   376,   377,   378,   379,   380,
   381,   382,   383,   384,   386,   387,   390,   401,   406,   412,
   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
   427,   428,   431,   434,   438,   444,   450,   453,   457,   463,
   469,   472,   476,   482,   488,   491,   495,   503,   509,   512,
   516,   524,   530,   533,   537,   545,   551,   554,   558,   570,
   576,   579,   583,   595,   601,   604,   608,   620,   626,   629,
   633,   646,   652,   655,   659,   672,   678,   681,   685,   698,
   710,   720,   728,   736,   744,   752,   760,   771,   784,   802,
   819,   840,   857,   878,   895,   916,   933,   954,   971,   992,
  1009,  1030,  1047,  1070,  1095,  1124,  1149,  1178,  1203,  1234,
  1247,  1272,  1283,  1289,  1308,  1319,  1327,  1333,  1339,  1358,
  1364,  1380,  1387,  1393,  1399,  1405,  1411,  1430,  1442,  1448,
  1467,  1488,  1496,  1502,  1508,  1514,  1526,  1532,  1538,  1550,
  1556,  1561,  1566,  1573,  1575,  1576,  1579,  1584,  1595,  1613,
  1628,  1656,  1685,  1689,  1695,  1708,  1722,  1738,  1752,  1774,
  1796,  1822,  1829,  1836,  1865,  1871,  1877,  1881,  1885,  1889,
  1893,  1898,  1905,  1909,  1914,  1932,  1942,  1960,  1977,  1994,
  2015,  2035,  2055,  2072,  2096,  2109,  2111,  2112,  2113,  2114,
  2117,  2119,  2120,  2121,  2122,  2123,  2124,  2125,  2126,  2127,
  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,  2136,  2137,
  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,
  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2156,  2157,
  2158,  2161,  2163,  2164,  2173,  2190,  2211,  2228,  2249,  2266,
  2288,  2295,  2308,  2313,  2317,  2321,  2325,  2330,  2335,  2339,
  2343,  2347,  2373,  2405,  2409,  2414,  2418,  2423,  2427,  2431,
  2437,  2443,  2449,  2453,  2459,  2466,  2472,  2481,  2485,  2495,
  2500,  2504,  2509,  2514,  2529,  2534,  2555,  2564
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tDraw",
"tSleep","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine",
"tDelete","tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tIn","tEndFor",
"tScript","tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","Color","ListOfColor","RecursiveListOfColor", NULL
};
#endif

static const short yyr1[] = {     0,
   181,   181,   181,   182,   182,   182,   183,   183,   184,   184,
   184,   184,   185,   185,   185,   185,   185,   186,   186,   186,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   190,   191,   191,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   193,   195,   194,   196,   196,   198,   197,
   199,   199,   201,   200,   202,   202,   204,   203,   205,   205,
   207,   206,   208,   208,   210,   209,   211,   211,   213,   212,
   214,   214,   216,   215,   217,   217,   219,   218,   220,   220,
   222,   221,   223,   223,   225,   224,   226,   226,   228,   227,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   231,
   231,   231,   231,   232,   232,   232,   233,   233,   234,   235,
   236,   237,   237,   237,   237,   237,   238,   238,   238,   238,
   238,   238,   238,   238,   239,   239,   239,   239,   239,   239,
   239,   239,   240,   240,   241,   241,   242,   242,   242,   242,
   242,   242,   242,   242,   243,   244,   244,   244,   244,   244,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   247,   247,   248,   248,   248,   248,   248,   249,   249,   249,
   249,   249,   249,   250,   250,   251,   251,   252,   252,   252,
   253,   253,   254,   254,   254,   255,   255,   255,   255,   256,
   256,   256,   256,   256,   257,   257,   258,   258
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
    11,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,     9,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     3,     3,     2,     3,     2,     3,     6,     8,     8,    10,
     1,     1,     3,     2,     8,    12,     8,    12,     8,    12,
    11,    15,     1,     2,     9,     2,     6,     9,     9,     8,
     8,     8,     6,     4,     2,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     1,     1,     1,     3,     8,     4,     9,     4,     9,
     3,     5,     1,     2,     2,     3,     3,    11,     9,     7,
     7,     3,     8,     0,     3,     1,     3,     0,     3,     3,
     1,     3,     0,     1,     3,     1,     1,     3,     3,     9,
     7,     5,     1,     5,     3,     8,     1,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   211,     0,     0,   212,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    63,    65,    64,    60,    61,    62,   282,   284,   283,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   241,    12,     0,    13,
    14,    16,    15,    17,   304,   304,     0,    66,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   313,     0,     0,     0,     0,   313,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   293,     0,     0,     0,     0,     0,   197,     0,   313,
   197,   235,     0,   313,   313,     0,     0,     0,     0,     0,
   203,     0,     0,   214,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   244,   243,   245,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
     0,   202,     0,   206,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   314,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   295,   294,     0,     0,     0,     0,
   197,   197,     0,     0,     0,     0,     0,   201,     0,     0,
     0,    70,     0,     0,     0,     0,     0,     0,     0,     0,
   204,   213,     0,   285,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   242,     0,   258,   259,
   257,   256,   252,   253,   254,   255,   244,   243,   248,   249,
   250,   251,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   306,     0,     0,     0,     0,   131,   134,
   135,   136,   137,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   247,   246,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   316,   317,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   302,     0,     0,     0,   297,   296,   196,
     0,   195,   194,     0,     0,     0,     0,     0,   199,   198,
   234,     0,   200,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   287,   289,     0,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   281,   270,     0,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   305,     0,    19,     0,   284,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   150,   152,
     0,     0,     0,     0,   166,   313,   313,     0,   313,   178,
     0,   186,   313,   313,     0,     0,   315,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   190,   192,     0,     0,     0,     0,
     0,    70,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,     0,     0,   313,
     0,     0,   313,     0,     0,     0,     0,     0,     0,     0,
     0,   260,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   313,   313,     0,     0,     0,     0,   313,   313,
     0,     0,     0,     0,     0,   313,     0,   313,     0,     0,
     0,     0,     0,   307,     0,   304,     0,   138,     0,   140,
   154,   142,   156,   144,   158,   146,   148,     0,     0,     0,
     0,     0,     0,   313,     0,   313,     0,     0,   291,   318,
   319,   165,     0,   313,   313,   313,   227,     0,   313,   313,
   313,   313,   313,   313,   313,     0,     0,     0,     0,     0,
     0,     0,     0,   233,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    68,     0,     0,
     0,     0,   308,     0,     0,     0,   207,     0,     0,   271,
   278,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   236,   237,   238,
   239,   240,     0,     0,     0,     0,     0,     0,     0,    18,
     0,   285,     0,     0,   323,     0,     0,    67,   162,   170,
     0,   173,     0,   167,     0,   168,   188,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   176,     0,   313,
   313,     0,   313,     0,     0,   313,     0,     0,     0,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
     0,     0,     0,     0,     0,     0,     0,     0,   304,     0,
     0,     0,     0,   284,     0,   160,     0,   175,   185,   292,
     0,   231,   179,   181,     0,     0,   230,   232,   187,   163,
   174,   184,   189,     0,     0,   301,     0,   300,     0,     0,
   215,     0,   217,     0,   219,     0,    69,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   308,     0,   311,     0,     0,     0,     0,   209,   208,
     0,   286,     0,     0,     0,     0,    21,     0,    30,     0,
    34,     0,    28,     0,     0,    33,     0,    38,    36,     0,
     0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
     0,    50,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   171,     0,   229,   228,
   197,   303,     0,   193,     0,     0,     0,     0,     0,     0,
   223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   313,   310,   309,   313,
     0,     0,   180,   288,   290,     0,     0,   308,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
     0,     0,     0,   226,   313,     0,   224,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   312,     0,     0,   210,     0,    35,     0,     0,
     0,     0,    25,     0,    31,     0,    37,    26,    39,     0,
    42,     0,    46,    47,     0,     0,    49,     0,     0,     0,
   139,   141,   155,   143,   157,   145,   159,   147,   149,   151,
   153,     0,   327,     0,   161,   324,   322,     0,     0,   191,
     0,     0,     0,     0,     0,   221,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   313,   313,   177,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   286,     0,     0,   325,
     0,     0,   298,   216,   218,   220,     0,   313,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    85,    89,    93,
   164,   169,     0,     0,     0,     0,     0,     0,     0,    29,
    32,    40,     0,    41,    48,    43,     0,     0,   328,     0,
   321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    27,     0,
     0,     0,   320,     0,   222,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,    87,     0,
    91,     0,     0,     0,     0,   313,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    44,    20,   326,   172,   225,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    84,    86,    88,    90,    92,
    94,     0,     0,     0,     0,   313,     0,     0,     0,     0,
     0,     0,    97,   101,   105,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     5,   313,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   183,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    95,     0,    99,     0,   103,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   182,     0,    22,     0,     0,     0,
     0,     0,     0,    96,    98,   100,   102,   104,   106,   313,
     0,     0,     0,   109,   113,   117,     0,     0,     0,     0,
     0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   107,     0,   111,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   108,   110,   112,   114,   116,   118,
     0,   121,   125,   129,    23,     0,     0,     0,     0,     0,
     0,     0,   119,     0,   123,     0,   127,     0,     0,     0,
     0,     0,     0,   120,   122,   124,   126,   128,   130,     0,
     0,     0
};

static const short yydefgoto[] = {  1520,
     4,     5,    18,    19,    20,    21,     6,    64,    65,    66,
   475,  1296,   616,  1244,  1298,   617,  1245,  1300,   618,  1246,
  1404,   619,  1377,  1406,   620,  1378,  1408,   621,  1379,  1465,
   622,  1451,  1467,   623,  1452,  1469,   624,  1453,  1502,   625,
  1496,  1504,   626,  1497,  1506,   627,  1498,    67,   470,   460,
   461,   462,   463,    71,    72,    73,    74,    75,  1010,  1011,
    76,    77,   783,   289,   107,   438,   305,   162,   259,   405,
   852,   943,   944,   439,   797,  1073,  1144
};

static const short yypact[] = {   312,
-32768,-32768,  -128,-32768,    42,  2282,  1625,    18,    19,    35,
    57,    65,   112,   136,   -29,   -24,   -22,-32768,-32768,-32768,
-32768,   164,    67,    30,   198,  1625,   -72,    71,    75,   -45,
   -41,    97,   115,    17,   133,   218,   278,   283,   357,   270,
    27,   195,     1,     1,   222,    45,   237,   397,   384,   269,
   441,   450,    83,   304,   -30,     0,-32768,   451,   459,-32768,
   475,   493,   460,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   325,-32768,
   331,   337,   341,   342,   367,   371,   385,   386,   390,   391,
   392,   393,   394,   398,   399,   400,   411,   413,   421,   422,
   423,  1625,  1625,  1625,  1625,  1597,-32768,-32768,  2322,-32768,
-32768,-32768,-32768,-32768,   446,   446,   546,-32768,  1625,  1625,
  1625,  1625,  1625,   556,   564,    21,   614,   618,-32768,   905,
  1625,  1625,  1625,  1625,   453,  1625,  1625,   454,  1625,  1625,
  1625,  1503,  1625,   452,   456,   457,  1503,   455,   458,   462,
   463,   467,   468,   469,     1,   465,     1,     1,  1625,  1625,
  -132,-32768,   -55,     1,   471,   472,   473,-32768,   626,  1503,
-32768,-32768,     2,  1503,  1503,  1625,   -71,  1625,   557,  1625,
-32768,   627,   639,-32768,   477,     8,  1625,  1625,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,   481,   481,   481,
  3015,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1597,   479,   480,   482,
   489,   490,   491,   492,   502,   503,   506,   507,   509,   510,
   512,   513,   514,   515,   516,   519,   520,   521,   522,   524,
   525,   526,   527,   528,   529,   530,   531,   649,   532,   533,
   536,   984,  1010,  1054,  1122,  1177,-32768,-32768,    86,   534,
   537,-32768,   540,-32768,  1625,  1625,  3043,  2495,  3071,  3099,
  1625,  3127,  2518,  1625,  2541,  3155,  3183,  1625,  7664,   698,
  3211,  1625,  1625,  1625,   700,  1625,  1625,  1625,  1625,  1625,
  1625,  1625,   -52,    12,-32768,-32768,  4779,  4806,     1,     1,
   432,   432,   110,  1625,  1625,  1625,  1322,-32768,   248,  2231,
     1,-32768,   709,   710,  3239,   635,  1625,  3267,   555,   844,
-32768,-32768,  1625,   111,   553,  3295,  3323,  3351,  3379,  3407,
  3435,  3463,  3491,  3519,  3547,  3575,  4833,  3603,  3631,  3659,
  3687,  3715,  3743,  4860,  4887,  4914,-32768,  2025,   308,   308,
   417,   417,   343,   343,   343,   343,  -114,   -84,   481,   481,
   481,   481,  4941,   728,   730,   731,   732,   735,   737,   738,
   739,   740,   741,   743,   744,   747,   748,   749,   750,   751,
   753,   754,   755,   757,   758,   765,   640,   767,   768,   779,
   780,   783,   785,-32768,   153,   787,   782,   788,-32768,-32768,
-32768,-32768,-32768,   320,  1547,  1547,  1625,  1625,   789,   790,
  1625,   793,  1625,   215,   215,   791,   794,   792,   795,  3771,
   796,   798,  3799,   799,   801,   802,  2048,-32768,   -27,  1625,
   803,  2564,  3827,  3855,  1625,  2587,  2610,  3883,  3911,  3939,
  3967,  3995,     1,-32768,   632,  1625,  1625,-32768,-32768,-32768,
   636,  2344,-32768,   637,  1625,  4964,  4991,  5018,-32768,-32768,
-32768,  1625,-32768,   142,   284,   644,   648,   805,   652,  4023,
   819,  1625,  1625,  4051,-32768,-32768,  1625,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1625,-32768,
-32768,-32768,-32768,-32768,-32768,  1625,  1625,  1625,  1625,   682,
   654,   655,   656,   657,   663,   664,   667,   681,   683,   685,
   686,   687,   688,   690,   691,   692,   693,   694,   695,   699,
   701,   702,   704,   706,   711,   712,   713,   714,   715,   716,
   851,-32768,   717,-32768,   719,   680,   868,  1547,  1547,  1625,
  1325,     4,  1432,    69,  1532,    72,  1679,  1702,-32768,-32768,
  -112,   877,  4079,     1,-32768,  1503,  1503,   884,  1503,-32768,
   888,-32768,  1503,  1503,  1625,  1625,-32768,  1725,   720,   890,
   891,   892,   684,   893,   894,   897,   898,   899,   900,   906,
   225,  1625,  5045,  5072,-32768,-32768,  2633,     1,     1,     1,
  1748,-32768,   745,   746,   760,   761,   762,   763,   764,   766,
   769,   771,   774,   775,   908,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1625,  1625,  1503,
  1625,   909,  1503,  2071,   101,   913,  2313,  4107,  4135,  4163,
  4191,  7664,   797,   937,  1625,  1625,     1,   946,   947,   804,
   948,   949,  1503,  1503,   953,     1,   954,   962,  1503,  1503,
   963,   964,   966,   967,   968,  1503,   448,  1503,   969,   907,
   970,   971,   983,-32768,   981,   446,    13,-32768,  1077,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   813,     3,   991,
    74,    15,   995,  1503,  1005,  1503,  1006,  1007,  2094,  2048,
-32768,-32768,  1625,  1503,  1503,  1503,-32768,   332,  1503,  1503,
  1503,  1503,  1503,  1503,  1503,  1625,  2336,  1625,  1625,   839,
   -93,   -74,   140,-32768,  1045,  1625,  1625,  1625,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,-32768,  5099,  5126,
  1013,  4219,    -8,   889,  1625,  1625,-32768,  1625,   842,-32768,
-32768,-32768,-32768,  1625,   847,  5153,  5180,   207,   848,   850,
   849,   852,   854,   855,   857,   858,   211,   859,   860,   861,
   863,   864,   865,   866,   867,   869,   870,-32768,-32768,-32768,
-32768,-32768,   872,   874,   875,   878,   885,   876,   887,-32768,
   902,   111,   879,     9,   895,  1792,  1020,-32768,-32768,-32768,
     1,-32768,  1023,-32768,  1038,-32768,-32768,  1625,  5207,  1056,
  1068,  1071,  1625,  1625,  1072,  1073,  1074,  1087,  1088,  1089,
  1090,  2656,   919,  4247,  2405,   432,     1,  1092,     1,  1093,
     1,    26,  1095,  5234,  5261,  5288,  5315,  5342,  5369,  5396,
  5423,  5450,  5477,  5504,  5531,  1625,  1625,-32768,  1096,  1503,
  1503,  1022,  1503,   617,  2679,   508,  1100,  1597,  1104,  1625,
  1503,  1102,  1106,  1105,   960,  1119,   448,  1120,  1124,  1625,
  1125,  1127,  1131,  1132,  1136,   448,  1625,  1625,  1625,  1503,
  1134,  1148,   448,  1625,  1149,  1150,  1151,  1625,   446,  1625,
   221,  1156,  1070,   -87,  5558,-32768,    84,-32768,-32768,  7664,
  1625,-32768,-32768,-32768,  1771,  1818,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   980,  1160,-32768,  1625,-32768,   988,   227,
-32768,   272,-32768,   274,-32768,    80,-32768,  1625,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  5585,
  5612,    -8,   189,-32768,    -2,   990,  1097,  1625,-32768,-32768,
  1171,   291,  1597,  1004,  5639,  1008,-32768,  1011,-32768,  1012,
-32768,  1009,-32768,  1014,  4275,-32768,  1015,-32768,-32768,  1016,
  1026,  4303,  5666,  4331,  1033,-32768,  1034,  1035,  5693,  1037,
  1055,-32768,  5720,  1057,  2359,   588,  1547,  1547,  1625,  1625,
  1625,  1625,    25,  1003,  1625,  1625,-32768,  5747,-32768,-32768,
   432,-32768,  2435,-32768,  1625,  1625,  1625,  1181,  1058,   -39,
-32768,  5774,  5801,  5828,  5855,  5882,  5909,  5936,  5963,  5990,
  6017,  6044,  6071,  1625,  1625,  1161,  1503,-32768,-32768,  1503,
  1625,  2702,-32768,-32768,-32768,  2732,  1184,    -8,   448,  1229,
  1625,  1227,   448,  1238,  1243,  1242,  1244,  1247,  1625,  1260,
  1503,  1261,  1263,  1625,  1246,  1269,  1625,  1272,  1111,  1284,
  1841,   113,  1864,   117,  1887,   134,  1910,  1933,  1956,  1979,
  1113,     3,  1287,  1274,  2755,  6098,  1289,  1118,  1625,-32768,
  2778,  2801,  2824,-32768,  1503,  1292,-32768,  1625,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  2847,
  2870,  1123,-32768,  1128,  2002,-32768,  1625,-32768,  1129,  1130,
  1141,  6125,-32768,  1126,-32768,  1142,-32768,-32768,-32768,  4359,
-32768,  1145,-32768,-32768,  4387,  1146,-32768,  4415,  1158,  1316,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1259,-32768,    53,-32768,-32768,-32768,  1625,  1159,-32768,
  2893,  1318,  1324,    49,  1170,-32768,  6152,  6179,  6206,  6233,
  6260,  6287,  6314,  6341,  6368,  4443,  4471,  4499,  1342,  1343,
  1503,  1503,-32768,  1597,   448,   448,   448,   448,  1358,  1360,
  1363,   448,  1366,  1368,  1369,  1371,   291,  1198,     3,-32768,
  2465,  1383,-32768,-32768,-32768,-32768,    80,  1503,  1625,  1625,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,-32768,-32768,-32768,
-32768,-32768,  1215,  1213,  1597,  1217,  1218,  1219,  1220,-32768,
-32768,-32768,  1222,-32768,-32768,-32768,  1223,  1625,-32768,  1625,
-32768,  1224,   -38,  1225,  6395,  6422,  6449,  6476,  6503,  6530,
  6557,  6584,  6611,  1228,  1237,  1239,  1503,  1312,  2923,   448,
   448,  1394,  1397,   448,  1400,  2382,  2946,  1412,  1413,  1503,
  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,
  1625,  1625,  1241,  1248,  1625,  1249,  1251,-32768,-32768,  1252,
  1253,  1254,-32768,  1245,-32768,  1256,  6638,  6665,  6692,  6719,
  6746,  6773,  6800,  6827,  6854,   124,  7664,   145,  7664,   226,
  7664,  1345,  1625,  1597,   448,  1503,  1423,  1424,  1346,  1431,
  1433,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1625,
  1625,  1434,  1625,  1435,  1625,  1436,  1267,  6881,  1597,  1270,
  1271,-32768,-32768,-32768,-32768,-32768,  6908,  6935,  6962,  6989,
  7016,  7043,  4527,  4555,  4583,  7664,-32768,  7664,-32768,  7664,
-32768,  1625,  1625,  2139,   448,  1503,  1625,  1625,  1625,  1625,
  1625,  1625,-32768,-32768,-32768,  7070,  2969,  1299,  1280,  1281,
  7097,  7124,  7151,  7178,  7205,  7232,  1282,  1283,  1285,  1625,
  1450,-32768,  1503,   448,  1625,  1625,  1625,  1625,  1625,  1625,
  1625,  1625,  1625,  2992,-32768,  1288,  1294,  7259,  7286,  7313,
  7340,  7367,  7394,   238,  7664,   243,  7664,   244,  7664,  1451,
  1503,  1457,  1625,  1625,  1625,  1625,  1625,  1625,  1625,  1458,
  1625,  1465,  1625,  1472,-32768,  1305,-32768,  7421,  7448,  7475,
  4611,  4639,  4667,  7664,-32768,  7664,-32768,  7664,-32768,  1503,
  1625,  1625,  1625,-32768,-32768,-32768,  1306,  7502,  7529,  7556,
  1321,  1326,  1328,  1503,  1625,  1625,  1625,  1625,  1625,  1625,
  1307,  7583,  7610,  7637,   265,  7664,   279,  7664,   307,  7664,
   448,  1625,  1625,  1625,  1625,  1476,  1625,  1492,  1625,  1494,
  1333,  4695,  4723,  4751,  7664,-32768,  7664,-32768,  7664,-32768,
  1504,-32768,-32768,-32768,-32768,  1335,  1359,  1361,  1625,  1625,
  1625,   317,  7664,   378,  7664,   379,  7664,  1625,  1528,  1625,
  1530,  1625,  1533,  7664,-32768,  7664,-32768,  7664,-32768,  1540,
  1541,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   940,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1537,  1538,
  -310,   389,  1539,-32768,-32768,-32768,-32768,-32768,   349, -1007,
-32768,-32768,  -810,    -7,-32768,   972,   -10,-32768,  -115,-32768,
  -933,   696,   249,-32768, -1052,-32768,-32768
};


#define	YYLAST		7834


static const short yytable[] = {   106,
   260,   464,  1087,   179,   156,   321,   795,   177,  1026,   681,
   326,   334,   891,   135,     7,   454,   792,   138,   130,  1143,
   800,  1008,  1008,   108,   269,   109,  1009,  1009,  1071,   309,
   310,   925,   161,   163,   127,   212,   213,   214,   215,   216,
   110,    -1,     8,   311,     9,   217,   218,   219,   220,   275,
   276,   223,   224,   225,  1196,   226,   962,   226,   142,   801,
   151,  -247,   111,   152,   153,   971,   154,   688,   309,   310,
   112,   335,   978,   119,   683,   455,   793,   685,   165,   799,
   827,   166,   167,   828,   270,   226,   995,   309,   310,   997,
   186,  -246,   414,   892,   208,   209,   210,   211,   227,   829,
   131,   327,   830,   132,  1109,   271,   309,   310,   746,   309,
   310,   262,   263,   264,   265,   266,   174,   113,  1133,   175,
   312,   453,  1135,   277,   278,   279,   280,   136,   282,   283,
   137,   285,   286,   287,   139,   291,  1229,  1086,  1259,  1137,
  1008,   114,   178,   115,   303,  1009,   576,   306,   116,   577,
   117,   307,   308,   313,    10,    11,    12,    13,    14,    15,
    16,    17,   157,   158,   850,   309,   310,   851,   325,   118,
   328,  1027,   330,   159,  1029,   180,   160,   322,   796,   336,
   337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
  1072,   926,   128,   129,   358,   359,   360,   361,   362,   363,
   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
   120,   121,   122,   123,  1197,  1087,  1189,   986,  1110,  1190,
   309,   310,  1114,   309,   310,   309,   310,   124,   125,   415,
   416,   417,   418,   133,   126,   309,   310,   134,   212,   213,
   214,   215,   216,   471,   472,   144,   419,   420,   217,   218,
   219,   220,   275,   276,   223,   224,   225,   424,   425,   140,
   226,   309,   310,   430,   309,   310,   433,   747,   309,   310,
   437,   485,   486,   465,   442,   443,   444,   141,   446,   447,
   448,   449,   450,   451,   452,   309,   310,  1321,   458,   459,
  1322,   309,   310,   309,   310,   143,   466,   467,   468,   150,
   474,    -7,    -7,   831,    -7,   145,   832,   602,  1323,   480,
   146,  1324,    78,   546,   547,   484,   541,   542,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
   613,   614,  1027,  1028,  1216,  1217,  1218,  1219,   309,   310,
   155,  1223,   309,   310,   987,   988,   989,   990,   223,   224,
   225,   862,   813,   814,   226,   871,   309,   310,   309,   310,
   290,   991,   992,   147,   148,   295,   149,   164,   716,  1325,
  1005,   169,  1326,   552,   554,   556,   551,   553,   555,   557,
   558,  1419,   168,   561,  1420,   563,  1421,  1423,   319,  1422,
  1424,   170,   323,   324,    -7,    -7,    -7,    -7,    -7,    -7,
    -7,    -7,   578,   309,   310,   309,   310,   583,  1475,  1276,
  1277,  1476,   591,  1280,   171,  1006,   172,  1007,   593,   594,
     1,     2,  1477,     3,   173,  1478,   181,   597,   215,   216,
   615,  1034,  1035,   182,   601,   217,   218,   219,   220,   275,
   276,   223,   224,   225,   634,   635,   176,   226,   183,   637,
  1479,   548,   549,  1480,    42,    43,    44,    45,   104,    47,
  1508,   638,   550,  1509,  1330,   160,   184,   185,   639,   640,
   641,   642,   186,   187,   275,   276,   223,   224,   225,   188,
    78,    79,   226,   189,   190,   919,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   306,   191,
   208,   209,   679,   192,  1369,   778,   779,   780,   781,   782,
   261,  1510,  1512,   691,  1511,  1513,   317,   193,   194,   320,
   791,   267,   195,   196,   197,   198,   199,   699,   700,   268,
   200,   201,   202,  1397,   217,   218,   219,   220,   275,   276,
   223,   224,   225,   203,   717,   204,   226,   721,   722,   723,
    78,   546,  1060,   205,   206,   207,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   258,   272,
   739,   740,   273,   742,   948,   281,   284,   292,   293,   294,
   296,   318,   331,   297,   298,   299,   758,   756,   757,   300,
   301,   302,   304,   329,   332,   767,   314,   315,   316,   333,
   226,   374,   375,   404,   376,   212,   213,   214,   215,   216,
  1481,   377,   378,   379,   380,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   381,   382,   104,   226,   383,   384,
   105,   385,   386,   288,   387,   388,   389,   390,   391,   707,
  1078,   392,   393,   394,   395,   809,   396,   397,   398,   399,
   400,   401,   402,   403,   440,   406,   445,   407,   822,   408,
   824,   825,   421,   423,   422,   476,   477,   479,   834,   835,
   836,   837,   838,   839,   840,   841,   842,   843,   844,   845,
   482,   487,   511,   708,   512,   513,   514,   854,   855,   515,
   856,   516,   517,   518,   519,   520,   858,   521,   522,   548,
   549,   523,   524,   525,   526,   527,   104,   528,   529,   530,
   550,   531,   532,   160,   212,   213,   214,   215,   216,   533,
   534,   535,   536,   984,   217,   218,   219,   220,   275,   276,
   223,   224,   225,   537,   538,   539,   226,   544,   895,   540,
   897,   543,   545,   949,   559,   560,   562,   564,   566,   565,
   900,   567,   569,   570,   572,   905,   906,   573,   574,   579,
   592,   630,   595,   596,   692,   693,   920,   695,   922,   628,
   924,   697,   698,   629,   631,   633,   643,   644,   645,   646,
   647,   212,   213,   214,   215,   216,   648,   649,   940,   941,
   650,   217,   218,   219,   220,   275,   276,   223,   224,   225,
   953,   483,   955,   226,   651,   674,   652,   677,   653,   654,
   655,   656,   965,   657,   658,   659,   660,   661,   662,   972,
   973,   974,   663,   678,   664,   665,   979,   666,   741,   667,
   983,   744,   985,   689,   668,   669,   670,   671,   672,   673,
   694,   675,   676,   998,   696,   703,   704,   705,   706,   709,
   710,   764,   765,   711,   712,   713,   714,   770,   771,  1003,
   274,   786,   715,   738,   777,   743,   784,   726,   727,   748,
  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,
  1022,  1023,   728,   729,   730,   731,   732,   754,   733,   755,
  1032,   734,   803,   735,   805,  1036,   736,   737,   759,   760,
   762,   763,   810,   811,   812,   766,   768,   815,   816,   817,
   818,   819,   820,   821,   769,   772,   773,   761,   774,   775,
   776,   785,   853,   788,   787,  1062,  1064,  1066,  1061,  1063,
  1065,  1067,  1068,  1069,  1070,   789,   790,  1075,  1076,   409,
   794,   212,   213,   214,   215,   216,   798,  1081,  1082,  1083,
   802,   217,   218,   219,   220,   275,   276,   223,   224,   225,
   804,   806,   807,   226,   826,   410,  1100,  1101,   848,   857,
   859,   863,   865,  1105,   864,   896,   866,   867,   898,   868,
   869,   870,   872,  1112,   873,   874,   875,   876,   877,   878,
   879,  1120,   880,   899,   881,   882,  1125,   883,   884,  1128,
   887,   885,   212,   213,   214,   215,   216,   890,   886,   411,
   888,   902,   217,   218,   219,   220,   275,   276,   223,   224,
   225,  1151,   893,   903,   226,   889,   904,   907,   908,   909,
  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,  1166,
  1167,  1168,   910,   911,   912,   913,   915,   921,   923,  1174,
   927,   947,   942,   952,   951,   946,   954,   957,   958,   956,
   959,   603,   604,   605,   606,   607,   608,   609,   610,   611,
   612,   613,   614,   960,   961,   963,   964,   412,   975,   967,
   966,   212,   213,   214,   215,   216,   968,   969,   970,   976,
  1191,   217,   218,   219,   220,   275,   276,   223,   224,   225,
   977,   980,   981,   226,   994,  1001,   982,   212,   213,   214,
   215,   216,   993,  1002,  1004,  1030,  1215,   217,   218,   219,
   220,   275,   276,   223,   224,   225,  1033,  1031,  1037,   226,
  1074,  1039,   413,  1042,  1040,  1041,  1084,  1043,  1045,  1108,
  1046,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,
  1047,   212,   213,   214,   215,   216,  1051,  1249,  1052,  1053,
  1055,   217,   218,   219,   220,   275,   276,   223,   224,   225,
  1256,   833,  1257,   226,   212,   213,   214,   215,   216,  1056,
  1058,  1111,  1113,  1085,   217,   218,   219,   220,   275,   276,
   223,   224,   225,  1115,  1102,  1116,   226,  1117,  1126,  1118,
   456,   357,  1119,  1287,  1288,  1289,  1290,  1291,  1292,  1293,
  1294,  1295,  1297,  1299,  1301,  1121,  1123,  1304,  1124,   212,
   213,   214,   215,   216,  1127,  1103,  1129,  1146,  1104,   217,
   218,   219,   220,   275,   276,   223,   224,   225,  1130,  1131,
  1142,   226,  1145,  1149,  1150,  1328,  1329,  1156,  1171,  1122,
  1179,  1172,  1175,  1176,  1337,  1338,  1339,  1340,  1341,  1342,
  1343,  1344,  1345,  1346,  1177,  1348,  1180,  1350,  1182,  1187,
  1184,  1354,  1188,  1194,   212,   213,   214,   215,   216,  1195,
   680,  1186,  1192,  1155,   217,   218,   219,   220,   275,   276,
   223,   224,   225,  1198,  1366,  1367,   226,  1211,  1212,  1371,
  1372,  1373,  1374,  1375,  1376,    27,    28,    29,    30,    31,
    32,    33,    34,  1220,    35,  1221,    37,    38,  1222,    40,
    41,  1224,  1394,  1225,  1226,  1227,  1228,  1398,  1399,  1400,
  1401,  1402,  1403,  1405,  1407,  1409,    53,  1232,  1247,  1248,
  1250,  1251,  1274,  1252,  1253,  1254,  1255,  1258,  1260,  1278,
    54,    55,  1279,  1270,  1281,  1428,  1429,  1430,  1431,  1432,
  1433,  1434,  1271,  1436,  1272,  1438,  1284,  1302,  1285,  1213,
  1214,  1310,  1305,  1303,  1306,  1327,  1307,  1308,  1332,  1333,
  1334,  1309,  1311,  1448,  1449,  1450,  1335,   682,  1336,  1347,
  1349,  1351,  1352,  1355,  1356,  1382,  1234,  1462,  1463,  1464,
  1466,  1468,  1470,  1383,  1384,  1395,  1425,  1391,  1392,    63,
  1393,  1411,  1427,  1435,  1482,  1483,  1484,  1485,  1412,  1487,
  1437,  1489,   212,   213,   214,   215,   216,  1439,  1440,  1454,
  1471,  1486,   217,   218,   219,   220,   275,   276,   223,   224,
   225,  1503,  1505,  1507,   226,  1273,  1458,  1488,   469,  1490,
  1514,  1459,  1516,  1460,  1518,    78,    79,  1491,  1286,  1495,
  1499,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,  1515,  1500,  1517,  1501,   684,  1519,  1521,
  1522,   725,    68,    69,    70,  1233,   945,   701,     0,    78,
   546,     0,     0,     0,  1331,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,     0,     0,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,    78,
    79,   226,     0,     0,  1370,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    78,    79,     0,
     0,  1396,     0,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,     0,     0,     0,     0,  1426,
     0,     0,     0,     0,   102,   103,     0,     0,     0,     0,
     0,   104,     0,     0,     0,   105,     0,     0,   288,   212,
   213,   214,   215,   216,   686,     0,     0,     0,  1447,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,  1461,     0,     0,     0,     0,   687,   548,   549,
     0,     0,     0,     0,     0,   104,     0,     0,     0,   550,
     0,     0,   160,     0,     0,     0,     0,     0,     0,     0,
   702,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   212,   213,   214,   215,   216,     0,
     0,     0,     0,   724,   217,   218,   219,   220,   221,   222,
   223,   224,   225,     0,     0,   104,   226,     0,     0,   105,
     0,     0,     0,     0,     0,     0,   999,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   102,   103,     0,     0,
     0,     0,     0,   104,    78,   894,     0,   105,     0,     0,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,     0,  1000,     0,     0,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,  1132,     0,   226,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,  1134,
     0,   226,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,  1136,     0,   226,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,  1138,     0,   226,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,  1139,     0,
   226,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   102,   103,     0,     0,     0,     0,     0,
   104,  1140,     0,     0,   105,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,  1141,     0,     0,   226,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,  1173,     0,     0,
   226,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,   509,   226,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,   575,   226,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,   745,   226,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,   808,   226,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,    27,    28,    29,    30,    31,    32,
    33,    34,     0,    35,     0,    37,    38,     0,    40,    41,
     0,    -3,    22,     0,  1368,    23,   212,   213,   214,   215,
   216,     0,     0,     0,     0,    53,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,    54,
    55,     0,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,     0,    35,    36,    37,    38,    39,    40,
    41,     0,     0,     0,    42,    43,    44,    45,    46,    47,
     0,    48,    49,    50,    51,    52,    53,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   228,     0,
    54,    55,     0,     0,     0,     0,     0,    56,    63,    57,
     0,    58,    59,    60,    61,    62,     0,    27,    28,    29,
    30,    31,    32,    33,    34,     0,    35,     0,    37,    38,
     0,    40,    41,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   473,    53,     0,
     0,     0,     0,     0,     0,     0,   229,   230,   231,    63,
     0,     0,    54,    55,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,     0,     0,     0,     0,     0,     0,
     0,     0,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,     0,   252,   253,   254,   255,   256,   257,     0,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,    63,   226,   212,   213,   214,   215,   216,     0,     0,
     0,     0,   749,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,   212,   213,   214,   215,
   216,     0,     0,     0,     0,   823,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,   212,
   213,   214,   215,   216,     0,     0,     0,     0,  1059,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,   212,   213,   214,   215,   216,     0,     0,     0,
     0,  1282,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,   917,     0,
     0,   918,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1079,     0,
     0,  1080,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1230,     0,
     0,  1231,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,   212,   213,   214,   215,   216,
     0,   427,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,   212,   213,
   214,   215,   216,     0,   432,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,   212,   213,   214,   215,   216,     0,   434,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,   212,   213,   214,   215,   216,     0,
   580,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,   212,   213,   214,
   215,   216,     0,   584,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
   212,   213,   214,   215,   216,     0,   585,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,   212,   213,   214,   215,   216,     0,   720,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,   212,   213,   214,   215,
   216,     0,   914,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,   212,
   213,   214,   215,   216,     0,   950,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,  1107,     0,     0,     0,     0,     0,  1106,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,   212,   213,   214,   215,   216,
     0,  1147,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,   212,   213,
   214,   215,   216,     0,  1152,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,   212,   213,   214,   215,   216,     0,  1153,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,   212,   213,   214,   215,   216,     0,
  1154,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,   212,   213,   214,
   215,   216,     0,  1169,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
   212,   213,   214,   215,   216,     0,  1170,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,  1275,     0,     0,     0,     0,     0,  1193,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,   212,   213,   214,   215,
   216,     0,  1283,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,   212,
   213,   214,   215,   216,     0,  1381,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,   212,   213,   214,   215,   216,     0,  1410,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   357,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   426,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   428,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   429,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   431,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   435,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   436,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   441,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   478,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   481,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   488,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   489,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   490,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   491,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   492,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   493,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   494,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   495,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   496,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   497,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   498,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   500,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   501,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   502,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   503,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   504,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   505,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   568,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   571,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   581,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   582,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   586,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   587,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   588,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   589,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   590,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   632,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   636,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   690,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   750,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,   751,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,   752,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,   753,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,   849,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,   916,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,  1044,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,  1048,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,  1050,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,  1181,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,  1183,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,  1185,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,  1208,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,  1209,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,  1210,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,  1363,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,  1364,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,  1365,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,  1444,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,     0,  1445,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
     0,  1446,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,     0,  1492,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,     0,  1493,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,     0,  1494,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,   456,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,   457,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,   499,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,   506,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
   507,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,   510,     0,     0,   508,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,   598,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,   599,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,   600,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,   718,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,   719,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,   846,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,   847,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,   860,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,   861,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
   901,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,   928,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,   929,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,   930,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,   931,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,   932,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,   933,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,   934,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,   935,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,   936,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
   937,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,   938,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,   939,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,   996,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1024,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1025,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1038,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1049,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1054,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1057,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1077,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1088,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1089,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1090,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1091,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1092,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1093,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1094,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1095,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1096,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1097,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1098,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1099,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1148,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1178,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1199,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1200,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1201,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1202,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1203,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1204,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1205,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1206,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1207,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1261,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1262,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1263,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1264,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1265,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1266,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1267,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1268,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1269,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1312,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1313,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1314,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1315,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1316,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1317,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1318,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1319,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1320,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1353,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1357,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1358,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1359,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1360,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1361,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1362,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1380,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1385,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1386,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1387,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1388,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1389,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1390,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1413,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1414,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1415,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1416,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1417,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226,     0,     0,     0,  1418,   212,   213,
   214,   215,   216,     0,     0,     0,     0,     0,   217,   218,
   219,   220,   275,   276,   223,   224,   225,     0,     0,     0,
   226,     0,     0,     0,  1441,   212,   213,   214,   215,   216,
     0,     0,     0,     0,     0,   217,   218,   219,   220,   275,
   276,   223,   224,   225,     0,     0,     0,   226,     0,     0,
     0,  1442,   212,   213,   214,   215,   216,     0,     0,     0,
     0,     0,   217,   218,   219,   220,   275,   276,   223,   224,
   225,     0,     0,     0,   226,     0,     0,     0,  1443,   212,
   213,   214,   215,   216,     0,     0,     0,     0,     0,   217,
   218,   219,   220,   275,   276,   223,   224,   225,     0,     0,
     0,   226,     0,     0,     0,  1455,   212,   213,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   275,   276,   223,   224,   225,     0,     0,     0,   226,     0,
     0,     0,  1456,   212,   213,   214,   215,   216,     0,     0,
     0,     0,     0,   217,   218,   219,   220,   275,   276,   223,
   224,   225,     0,     0,     0,   226,     0,     0,     0,  1457,
   212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   275,   276,   223,   224,   225,     0,
     0,     0,   226,     0,     0,     0,  1472,   212,   213,   214,
   215,   216,     0,     0,     0,     0,     0,   217,   218,   219,
   220,   275,   276,   223,   224,   225,     0,     0,     0,   226,
     0,     0,     0,  1473,   212,   213,   214,   215,   216,     0,
     0,     0,     0,     0,   217,   218,   219,   220,   275,   276,
   223,   224,   225,     0,     0,     0,   226,     0,     0,     0,
  1474,   212,   213,   214,   215,   216,     0,     0,     0,     0,
     0,   217,   218,   219,   220,   275,   276,   223,   224,   225,
     0,     0,     0,   226
};

static const short yycheck[] = {     7,
   116,   312,  1010,     4,     4,     4,     4,    38,   942,     6,
    82,     4,     4,    59,   143,     4,     4,    59,    26,  1072,
     6,    61,    61,     6,     4,     7,    66,    66,     4,   162,
   163,     6,    43,    44,     5,   148,   149,   150,   151,   152,
     6,     0,     1,   176,     3,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,   170,   867,   170,    42,    45,
    34,   176,     6,    37,    38,   876,    40,   180,   162,   163,
     6,    64,   883,     7,     6,    64,    64,     6,    34,     6,
   174,    37,    38,   177,    64,   170,   174,   162,   163,     6,
   178,   176,     7,    85,   102,   103,   104,   105,   106,   174,
   173,   173,   177,   176,  1038,    85,   162,   163,     8,   162,
   163,   119,   120,   121,   122,   123,    34,     6,     6,    37,
   176,   174,     6,   131,   132,   133,   134,   173,   136,   137,
   176,   139,   140,   141,   176,   143,  1189,   177,   177,     6,
    61,     6,   173,   173,   155,    66,   174,   158,   173,   177,
   173,   159,   160,   164,   113,   114,   115,   116,   117,   118,
   119,   120,   162,   163,   173,   162,   163,   176,   176,     6,
   178,   174,   180,   173,   177,   176,   176,   176,   176,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   176,   176,   173,     6,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   154,   155,   156,   157,   176,  1233,   174,     7,  1039,   177,
   162,   163,  1043,   162,   163,   162,   163,   171,   172,   154,
   155,   156,   157,   173,   178,   162,   163,   173,   148,   149,
   150,   151,   152,     6,     7,    38,   171,   172,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   275,   276,   173,
   170,   162,   163,   281,   162,   163,   284,   177,   162,   163,
   288,   171,   172,   174,   292,   293,   294,   173,   296,   297,
   298,   299,   300,   301,   302,   162,   163,   174,   309,   310,
   177,   162,   163,   162,   163,   173,   314,   315,   316,    40,
   321,     0,     1,   174,     3,    38,   177,   176,   174,   327,
    38,   177,     3,     4,     5,   333,   174,   175,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,   174,   175,  1175,  1176,  1177,  1178,   162,   163,
   176,  1182,   162,   163,   154,   155,   156,   157,   164,   165,
   166,   175,    51,    52,   170,   175,   162,   163,   162,   163,
   142,   171,   172,    37,    38,   147,    40,   176,   174,   174,
   174,     5,   177,   414,   415,   416,   414,   415,   416,   417,
   418,   174,   176,   421,   177,   423,   174,   174,   170,   177,
   177,    38,   174,   175,   113,   114,   115,   116,   117,   118,
   119,   120,   440,   162,   163,   162,   163,   445,   174,  1250,
  1251,   177,   453,  1254,   176,   174,     6,   174,   456,   457,
   139,   140,   174,   142,     5,   177,     6,   465,   151,   152,
   177,   171,   172,     5,   472,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   482,   483,   173,   170,     4,   487,
   174,   162,   163,   177,    53,    54,    55,    56,   169,    58,
   174,   499,   173,   177,  1305,   176,     4,    38,   506,   507,
   508,   509,   178,   173,   162,   163,   164,   165,   166,   173,
     3,     4,   170,   173,   173,   826,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,   549,   173,
   548,   549,   550,   173,  1355,    98,    99,   100,   101,   102,
     5,   174,   174,   564,   177,   177,   168,   173,   173,   171,
   676,     6,   173,   173,   173,   173,   173,   575,   576,     6,
   173,   173,   173,  1384,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   173,   592,   173,   170,   598,   599,   600,
     3,     4,     5,   173,   173,   173,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,   173,     6,
   628,   629,     5,   631,     8,   173,   173,   176,   173,   173,
   176,     6,     6,   176,   173,   173,   647,   645,   646,   173,
   173,   173,   178,    87,     6,   656,   176,   176,   176,   173,
   170,   173,   173,     5,   173,   148,   149,   150,   151,   152,
  1471,   173,   173,   173,   173,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   173,   173,   169,   170,   173,   173,
   173,   173,   173,   176,   173,   173,   173,   173,   173,     6,
  1001,   173,   173,   173,   173,   703,   173,   173,   173,   173,
   173,   173,   173,   173,     7,   174,     7,   175,   716,   174,
   718,   719,   179,   174,   178,     7,     7,    83,   726,   727,
   728,   729,   730,   731,   732,   733,   734,   735,   736,   737,
   176,   179,     5,    50,     5,     5,     5,   745,   746,     5,
   748,     5,     5,     5,     5,     5,   754,     5,     5,   162,
   163,     5,     5,     5,     5,     5,   169,     5,     5,     5,
   173,     5,     5,   176,   148,   149,   150,   151,   152,     5,
   131,     5,     5,   889,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     5,     5,     3,   170,     6,   796,     5,
   801,     5,     5,   177,     6,     6,     4,     7,     7,     6,
   808,     7,     7,     6,     6,   813,   814,     7,     7,     7,
   179,     7,   177,   177,   566,   567,   827,   569,   829,   176,
   831,   573,   574,   176,   173,     7,   145,   174,   174,   174,
   174,   148,   149,   150,   151,   152,   174,   174,   846,   847,
   174,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   858,     8,   860,   170,   174,     5,   174,   178,   174,   174,
   174,   174,   870,   174,   174,   174,   174,   174,   174,   877,
   878,   879,   174,     6,   174,   174,   884,   174,   630,   174,
   888,   633,   890,     7,   174,   174,   174,   174,   174,   174,
     7,   175,   174,   901,     7,   176,     7,     7,     7,     7,
     7,   653,   654,     7,     7,     7,     7,   659,   660,   917,
     6,     5,     7,     6,   666,     7,   668,   173,   173,     7,
   928,   929,   930,   931,   932,   933,   934,   935,   936,   937,
   938,   939,   173,   173,   173,   173,   173,   141,   173,     3,
   948,   173,   694,   173,   696,   953,   173,   173,     3,     3,
     3,     3,   704,   705,   706,     3,     3,   709,   710,   711,
   712,   713,   714,   715,     3,     3,     3,   164,     3,     3,
     3,     3,    84,     3,     5,   986,   987,   988,   986,   987,
   988,   989,   990,   991,   992,     3,     6,   995,   996,     6,
   178,   148,   149,   150,   151,   152,     6,  1005,  1006,  1007,
     6,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     6,     6,     6,   170,   176,     6,  1024,  1025,     6,   178,
   174,   174,   174,  1031,   175,     6,   175,   174,     6,   175,
   174,   174,   174,  1041,   175,   175,   174,   174,   174,   174,
   174,  1049,   174,     6,   175,   174,  1054,   174,   174,  1057,
   175,   174,   148,   149,   150,   151,   152,   179,   174,     6,
   174,     6,   158,   159,   160,   161,   162,   163,   164,   165,
   166,  1079,   178,     6,   170,   174,     6,     6,     6,     6,
  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,
  1098,  1099,     6,     6,     6,     6,   178,     6,     6,  1107,
     6,   853,     7,     4,   856,    84,     3,     6,     3,   861,
     6,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,   164,     6,     6,     3,     6,   880,     3,
     6,   148,   149,   150,   151,   152,     6,     6,     3,     6,
  1148,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     3,     3,     3,   170,    85,   176,     6,   148,   149,   150,
   151,   152,     7,     4,   177,   176,  1174,   158,   159,   160,
   161,   162,   163,   164,   165,   166,     6,    81,   175,   170,
   178,   174,     6,   175,   174,   174,     6,   174,   174,     6,
   175,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,
   175,   148,   149,   150,   151,   152,   174,  1215,   175,   175,
   174,   158,   159,   160,   161,   162,   163,   164,   165,   166,
  1228,   177,  1230,   170,   148,   149,   150,   151,   152,   175,
   174,     3,     6,   176,   158,   159,   160,   161,   162,   163,
   164,   165,   166,     6,    84,     3,   170,     6,     3,     6,
   174,   175,     6,  1261,  1262,  1263,  1264,  1265,  1266,  1267,
  1268,  1269,  1270,  1271,  1272,     6,     6,  1275,     6,   148,
   149,   150,   151,   152,     6,  1027,     5,     4,  1030,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   178,     6,
   178,   170,     6,     5,   177,  1303,  1304,     6,   176,  1051,
   175,   174,   174,   174,  1312,  1313,  1314,  1315,  1316,  1317,
  1318,  1319,  1320,  1321,   174,  1323,   175,  1325,   174,     4,
   175,  1329,    64,     6,   148,   149,   150,   151,   152,     6,
     6,   174,   174,  1085,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   174,  1352,  1353,   170,     6,     6,  1357,
  1358,  1359,  1360,  1361,  1362,    34,    35,    36,    37,    38,
    39,    40,    41,     6,    43,     6,    45,    46,     6,    48,
    49,     6,  1380,     6,     6,     5,   179,  1385,  1386,  1387,
  1388,  1389,  1390,  1391,  1392,  1393,    65,     5,   174,   177,
   174,   174,    81,   175,   175,   174,   174,   174,   174,     6,
    79,    80,     6,   176,     5,  1413,  1414,  1415,  1416,  1417,
  1418,  1419,   176,  1421,   176,  1423,     5,   177,     6,  1171,
  1172,   177,   174,   176,   174,    81,   175,   175,     6,     6,
    85,   178,   177,  1441,  1442,  1443,     6,     6,     6,     6,
     6,     6,   176,   174,   174,   147,  1198,  1455,  1456,  1457,
  1458,  1459,  1460,   174,   174,     6,     6,   176,   176,   138,
   176,   174,     6,     6,  1472,  1473,  1474,  1475,   175,  1477,
     6,  1479,   148,   149,   150,   151,   152,     6,   174,   174,
   174,     6,   158,   159,   160,   161,   162,   163,   164,   165,
   166,  1499,  1500,  1501,   170,  1247,   176,     6,   177,     6,
  1508,   176,  1510,   176,  1512,     3,     4,   175,  1260,     6,
   176,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     6,   176,     6,   176,     6,     6,     0,
     0,   602,     6,     6,     6,  1197,   851,   576,    -1,     3,
     4,    -1,    -1,    -1,  1306,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    -1,    -1,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,     3,
     4,   170,    -1,    -1,  1356,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,     3,     4,    -1,
    -1,  1383,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,  1411,
    -1,    -1,    -1,    -1,   162,   163,    -1,    -1,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,    -1,    -1,   176,   148,
   149,   150,   151,   152,     6,    -1,    -1,    -1,  1440,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,  1454,    -1,    -1,    -1,    -1,     6,   162,   163,
    -1,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,     6,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,   169,   170,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   162,   163,    -1,    -1,
    -1,    -1,    -1,   169,     3,     4,    -1,   173,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    -1,     6,    -1,    -1,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,     6,    -1,   170,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,     6,
    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,     6,    -1,   170,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,     6,    -1,   170,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,     6,    -1,
   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   162,   163,    -1,    -1,    -1,    -1,    -1,
   169,     6,    -1,    -1,   173,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,     6,    -1,    -1,   170,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,     6,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,     8,   170,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,     8,   170,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,     8,   170,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,     8,   170,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,
    -1,     0,     1,    -1,   146,     4,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    65,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    79,
    80,    -1,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
    49,    -1,    -1,    -1,    53,    54,    55,    56,    57,    58,
    -1,    60,    61,    62,    63,    64,    65,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
    79,    80,    -1,    -1,    -1,    -1,    -1,    86,   138,    88,
    -1,    90,    91,    92,    93,    94,    -1,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    -1,    45,    46,
    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    65,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,   138,
    -1,    -1,    79,    80,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,    -1,   132,   133,   134,   135,   136,   137,    -1,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,   138,   170,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,   180,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,   180,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,   180,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,   180,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,    -1,
    -1,   177,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,    -1,
    -1,   177,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,    -1,
    -1,   177,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,
    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,
   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,
   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,   177,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,
   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,
   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   141,    -1,    -1,    -1,    -1,    -1,   177,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,
    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,
   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,
   177,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,
   151,   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
   148,   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,   141,    -1,    -1,    -1,    -1,    -1,   177,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,   148,   149,   150,   151,
   152,    -1,   177,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,   148,
   149,   150,   151,   152,    -1,   177,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,   148,   149,   150,   151,   152,    -1,   177,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,    -1,   175,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    -1,   175,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,    -1,   175,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,   144,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,
   160,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,   158,
   159,   160,   161,   162,   163,   164,   165,   166,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,   151,
   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,    -1,
    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,
   158,   159,   160,   161,   162,   163,   164,   165,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,   174,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,   170,
    -1,    -1,    -1,   174,   148,   149,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    -1,    -1,    -1,   170,    -1,    -1,    -1,
   174,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
    -1,    -1,    -1,   170
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 155 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 169 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 176 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 193 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 194 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 195 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 196 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 201 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 206 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 217 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 220 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 224 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 230 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 236 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 243 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 249 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 253 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 257 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 264 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 268 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 273 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 277 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 281 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 285 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 289 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 293 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 297 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 301 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 310 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 313 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 317 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 321 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 325 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 329 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 354 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 364 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 367 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 384 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 387 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 392 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 403 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 407 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 414 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 433 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 435 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 440 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 445 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 452 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 454 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 459 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 464 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 471 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 473 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 478 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 483 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 490 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 492 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 498 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 504 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 511 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 513 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 519 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 525 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 532 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 534 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 540 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 546 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 553 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 555 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 562 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 571 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 578 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 580 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 587 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 596 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 603 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 605 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 612 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 621 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 628 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 630 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 638 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 647 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 654 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 656 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 664 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 673 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 680 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 682 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 690 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 699 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 715 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 721 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 729 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 737 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 745 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 753 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 761 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 772 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 785 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 140:
#line 803 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 820 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 841 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 858 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 879 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 896 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 917 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 934 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 955 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 972 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 993 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1010 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1031 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1048 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1071 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1096 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1125 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1150 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1179 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1204 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1235 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1248 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 162:
#line 1277 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1284 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1290 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1309 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 166:
#line 1320 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 167:
#line 1328 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1334 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1340 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1359 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1365 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 172:
#line 1382 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 173:
#line 1388 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1394 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1400 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1406 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1412 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 178:
#line 1431 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 179:
#line 1443 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1449 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 181:
#line 1468 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 182:
#line 1491 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 183:
#line 1499 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 184:
#line 1503 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1509 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1515 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 187:
#line 1527 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 188:
#line 1533 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1539 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1552 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1557 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1562 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1567 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1574 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1575 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1576 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1581 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 198:
#line 1585 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1597 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 200:
#line 1615 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 201:
#line 1630 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 202:
#line 1658 "Gmsh.y"
{
     if(!CTX.interactive){ // we're in interactive mode
       char ext[6];
       strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
       Replot();
       extern void CreateImage (FILE *fp);
       FILE *fp = 0;
       if(!strcmp(ext,".gif")){
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
       else if(!strcmp(ext,".eps")){
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
       else if(!strcmp(ext,".xpm")){
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

       if(fp){
	 CreateImage(fp);
	 fclose(fp);
       }
     }
   ;
    break;}
case 203:
#line 1686 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 204:
#line 1690 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 205:
#line 1696 "Gmsh.y"
{
     if(!CTX.interactive){ // we're in interactive mode
       if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	 Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	 Replot();
       }
       else{
	 Init();
	 Draw();
       }
     }
   ;
    break;}
case 206:
#line 1709 "Gmsh.y"
{
     extern long Get_AnimTime();
     long sleep_time = Get_AnimTime();
     while(1){
       if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
     }
   ;
    break;}
case 207:
#line 1725 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
    LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 208:
#line 1739 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
    LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 209:
#line 1753 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
    LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;

    TheSymbol.Name = yyvsp[-6].c;
    TheSymbol.val  = yyvsp[-3].d;
    if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
      List_Add(Symbol_L,&TheSymbol);
    else
      pSymbol->val = yyvsp[-3].d;

    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 210:
#line 1775 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
    LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

    TheSymbol.Name = yyvsp[-8].c;
    TheSymbol.val  = yyvsp[-5].d;
    if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
      List_Add(Symbol_L,&TheSymbol);
    else
      pSymbol->val = yyvsp[-5].d;

    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 211:
#line 1797 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;

        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];

	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  pSymbol->val += LoopControlVariablesTab[ImbricatedLoop-1][2];
	}

        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 212:
#line 1823 "Gmsh.y"
{
    if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
      {
	vyyerror("Error while exiting function");
      }
  ;
    break;}
case 213:
#line 1830 "Gmsh.y"
{
    if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
      {
	vyyerror("Unknown Function %s",yyvsp[-1].c);
      }
  ;
    break;}
case 214:
#line 1837 "Gmsh.y"
{
    // skip everything until return is found
    if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
      {
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      }
    void skip_until(char *until);
    skip_until("Return");
  ;
    break;}
case 215:
#line 1867 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 216:
#line 1872 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 217:
#line 1878 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 218:
#line 1882 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 219:
#line 1886 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 220:
#line 1890 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 221:
#line 1894 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 222:
#line 1899 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 223:
#line 1907 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1910 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 1916 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 226:
#line 1933 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 227:
#line 1944 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 228:
#line 1961 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 229:
#line 1978 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 230:
#line 1995 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 231:
#line 2016 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 232:
#line 2036 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 233:
#line 2056 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 234:
#line 2073 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 235:
#line 2098 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 236:
#line 2110 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 237:
#line 2111 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 238:
#line 2112 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 2113 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 240:
#line 2114 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 241:
#line 2118 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 2119 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 243:
#line 2120 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 244:
#line 2121 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 245:
#line 2122 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 246:
#line 2123 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 247:
#line 2124 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 248:
#line 2125 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 249:
#line 2126 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 250:
#line 2127 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 251:
#line 2128 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 252:
#line 2129 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 253:
#line 2130 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 254:
#line 2131 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 255:
#line 2132 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 256:
#line 2133 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 257:
#line 2134 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 258:
#line 2135 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 259:
#line 2136 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 260:
#line 2137 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 261:
#line 2138 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2139 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2140 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 264:
#line 2141 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2142 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2143 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2144 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2145 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2146 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2147 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2148 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 272:
#line 2149 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2150 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2151 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2152 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2153 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 277:
#line 2154 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2155 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 279:
#line 2156 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 2157 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 281:
#line 2158 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 282:
#line 2162 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 283:
#line 2163 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 284:
#line 2165 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 285:
#line 2174 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2191 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2212 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2229 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 289:
#line 2250 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 290:
#line 2267 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 291:
#line 2290 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 292:
#line 2296 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 293:
#line 2310 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 294:
#line 2314 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2318 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 296:
#line 2322 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 297:
#line 2326 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 298:
#line 2332 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 299:
#line 2336 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 300:
#line 2340 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 301:
#line 2344 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 302:
#line 2348 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 303:
#line 2374 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 304:
#line 2407 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2410 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2416 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2419 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2425 "Gmsh.y"
{
    ;
    break;}
case 309:
#line 2428 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 310:
#line 2432 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 311:
#line 2439 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 312:
#line 2444 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 313:
#line 2451 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2454 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 315:
#line 2460 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 316:
#line 2468 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2473 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 318:
#line 2482 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 319:
#line 2486 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 320:
#line 2497 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 2501 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 2505 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 323:
#line 2510 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 324:
#line 2515 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 325:
#line 2531 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 326:
#line 2535 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 327:
#line 2557 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 328:
#line 2565 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2571 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

